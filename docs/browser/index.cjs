!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.nlScript=e():t.nlScript=e()}(this,(()=>{return t={6970:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.IfNothingYetEnteredAutocompleter=e.EntireSequenceCompleter=e.Autocompleter=void 0;const n=i(2785),r=i(4912),s=i(3188),o=i(2671),l=i(1785),a=i(5310),h=i(1449);var c;e.IfNothingYetEnteredAutocompleter=class{constructor(t,e){this.ifNothingYetEntered=t,this.otherwise=e}getAutocompletion(t,e){return 0===t.getParsedString().length?n.Autocompletion.literal(t,[this.ifNothingYetEntered]):void 0!==this.otherwise?n.Autocompletion.literal(t,[this.otherwise]):void 0}},e.EntireSequenceCompleter=class{constructor(t,e){this.ebnf=t,this.symbol2Autocompletion=e}getAutocompletion(t,e){const i=t.getParsedString(),c=t.getRule(),u=c.getChildren(),d=new n.Autocompletion.EntireSequence(t);for(let t=0;t<u.length;t++){let e=u[t].getSymbol()+":"+c.getNameForChild(t),i=this.symbol2Autocompletion.get(e);if(void 0!==i){d.add(i);continue}const n=new r.BNF(this.ebnf.getBNF()),f=new h.Sequence(void 0,u[t]);f.setParsedChildNames(c.getNameForChild(t)),f.createBNF(n),n.removeStartProduction(),n.addProduction(new o.Production(r.BNF.ARTIFICIAL_START_SYMBOL,f.getTarget())),i=[],new l.RDParser(n,new s.Lexer(""),a.EBNFParsedNodeFactory.INSTANCE).parse(i),this.symbol2Autocompletion.set(e,i),d.add(i)}if(0===i.length)return d.asArray();const f=d.getCompletion(n.Autocompletion.Purpose.FOR_INSERTION).indexOf("${");return void 0!==f&&f>=0&&i.length>f?void 0:d.asArray()}},function(t){t.DEFAULT_INLINE_AUTOCOMPLETER={getAutocompletion(t,e){if(t.getParsedString().length>0)return n.Autocompletion.veto(t);let i=t.getName();return void 0===i&&(i=t.getSymbol().getSymbol()),void 0!==i?n.Autocompletion.parameterized(t,i):void 0}}}(c||(e.Autocompleter=c={}))},3349:(t,e)=>{"use strict";var i;Object.defineProperty(e,"__esModule",{value:!0}),e.Evaluator=void 0,function(t){t.FIRST_CHILD_EVALUATOR=t=>t.evaluate(0),t.ALL_CHILDREN_EVALUATOR=t=>0===t.getChildren().length?[]:t.getChildren().map((t=>t.evaluate())),t.DEFAULT_EVALUATOR=t=>t.getParsedString()}(i||(e.Evaluator=i={}))},738:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ParseException=void 0;const n=i(2785),r=i(3188),s=i(1785);class o extends Error{constructor(t,e,i){super(),this.root=t,this.failedTerminal=e,this.parser=i;let n=e;for(;null!=n&&!n.doesAutocomplete();)n=n.getParent();this.firstAutocompletingAncestorThatFailed=n,this.message=this.getError()}getRoot(){return this.root}getFailedTerminal(){return this.failedTerminal}getFirstAutocompletingAncestorThatFailed(){return this.firstAutocompletingAncestorThatFailed}getError(){const t=this.parser.getLexer(),e=this.parser.getGrammar(),i=this.failedTerminal.getMatcher().pos+this.failedTerminal.getMatcher().parsed.length-1,o=t.substring(0,this.failedTerminal.getMatcher().pos),l=new r.Lexer(o),a=new s.RDParser(e,l,this.parser.getParsedNodeFactory()),h=[];try{a.parse(h)}catch(t){return"Error at position "+i}const c=t.substring(0,i+1).split(/\r?\n|\r/),u=c.length-1,d=c[u].length-1;let f="";f+="Error at position "+i+" in line "+u+":\n",f+=c[u]+"\n";for(let t=0;t<d;t++)f+=" ";return f+="^\n",f+="Expected "+h.map((t=>t.getCompletion(n.Autocompletion.Purpose.FOR_INSERTION))).toString(),f}}e.ParseException=o},9991:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ParsedNode=void 0;const n=i(3818),r=i(5029),s=i(1872);class o extends n.DefaultParsedNode{constructor(t,e,i){super(t,e,i),this.nthEntryInParent=0}setNthEntryInParent(t){this.nthEntryInParent=t}getNthEntryInParent(){return this.nthEntryInParent}getRule(){let t=this.getProduction();if(void 0!==t&&t instanceof s.EBNFProduction)return t.getRule()}parentHasSameRule(){let t=this.getRule();if(void 0===t)return!1;let e=this.getParent();if(void 0===e)return!1;let i=e.getRule();return void 0!==i&&t===i}getAutocompletion(t){var e;let i=this.getRule();return void 0===i||void 0===i.getAutocompleter()||this.parentHasSameRule()?super.getAutocompletion(t):null===(e=i.getAutocompleter())||void 0===e?void 0:e.getAutocompletion(this,t)}notifyListeners(){for(let t=0;t<this.numChildren();t++)this.getChild(t).notifyListeners();const t=this.getMatcher().state;if(!t.equals(r.ParsingState.SUCCESSFUL)&&!t.equals(r.ParsingState.END_OF_INPUT))return;let e=this.getRule();if(void 0!==e&&!this.parentHasSameRule()){let t=e.getOnSuccessfulParsed();void 0!==t&&t(this)}}evaluate(...t){if(t.length>0)return super.evaluate(...t);let e=this.getRule();return void 0!==e&&void 0!==e.getEvaluator()?e.getEvaluator()(this):super.evaluate()}}e.ParsedNode=o},7649:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Parser=void 0;const n=i(6970),r=i(3188),s=i(2545),o=i(5029),l=i(1785),a=i(2940),h=i(995),c=i(5310),u=i(3156),d=i(3349),f=i(123),p=i(5152);e.Parser=class{constructor(){this.grammar=new h.EBNF,this.LINEBREAK=a.Terminal.literal("\n"),this.targetGrammar=new h.EBNF,this.symbol2Autocompletion=new Map,this.compiled=!1,this.parseStartListeners=[],this.QUANTIFIER=this.quantifier(),this.IDENTIFIER=this.identifier("identifier"),this.VARIABLE_NAME=this.variableName(),this.ENTRY_NAME=this.entryName(),this.LIST=this.list(),this.TUPLE=this.tuple(),this.CHARACTER_CLASS=this.characterClass(),this.TYPE=this.type(),this.VARIABLE=this.variable(),this.NO_VARIABLE=this.noVariable(),this.EXPRESSION=this.expression(),this.LINEBREAK_STAR=this.targetGrammar.star("linebreak-star",this.LINEBREAK.withName()),this.program()}getGrammar(){return this.grammar}getTargetGrammar(){return this.targetGrammar}defineSentence(t,e,i){let r;return r=void 0===i?void 0:"boolean"==typeof i?i?new n.EntireSequenceCompleter(this.targetGrammar,this.symbol2Autocompletion):n.Autocompleter.DEFAULT_INLINE_AUTOCOMPLETER:i,this.defineType("sentence",t,e,r)}defineType(t,e,i,s){let a;a=void 0===s?void 0:"boolean"==typeof s?s?new n.EntireSequenceCompleter(this.targetGrammar,this.symbol2Autocompletion):n.Autocompleter.DEFAULT_INLINE_AUTOCOMPLETER:s,this.grammar.compile(this.EXPRESSION.getTarget());let h=new l.RDParser(this.grammar.getBNF(),new r.Lexer(e),c.EBNFParsedNodeFactory.INSTANCE).parse();if(!h.getMatcher().state.equals(o.ParsingState.SUCCESSFUL))throw new Error("Parsing failed");const u=h.evaluate(),d=this.targetGrammar.sequence(t,...u);return void 0!==i&&d.setEvaluator(i),void 0!==a&&d.setAutocompleter(a),d.withName(t)}compile(t){void 0===t&&(t=this.targetGrammar.getSymbol("program")),this.targetGrammar.compile(t),this.compiled=!0}undefineType(t){const e=this.targetGrammar.getSymbol(t);this.targetGrammar.removeRules(e),this.compiled=!1}parse(t,e){this.compiled||this.compile(),this.symbol2Autocompletion.clear();const i=this.targetGrammar.getBNF(),n=new u.EBNFParser(i,new r.Lexer(t));return n.addParseStartListener((()=>this.fireParsingStarted())),n.parse(e)}quantifier(){const t=this.grammar;return t.or("quantifier",t.sequence(void 0,a.Terminal.literal("?").withName()).setEvaluator((t=>f.IntRange.OPTIONAL)).withName("optional"),t.sequence(void 0,a.Terminal.literal("+").withName()).setEvaluator((t=>f.IntRange.PLUS)).withName("plus"),t.sequence(void 0,a.Terminal.literal("*").withName()).setEvaluator((t=>f.IntRange.STAR)).withName("star"),t.sequence(void 0,t.INTEGER_RANGE.withName("range")).setEvaluator((t=>t.evaluate(0))).withName("range"),t.sequence(void 0,t.INTEGER.withName("int")).setEvaluator((t=>new f.IntRange(t.evaluate(0)))).withName("fixed"))}identifier(t){void 0===t&&(t="identifier");const e=this.grammar;return e.sequence(t,a.Terminal.characterClass("[A-Za-z_]").withName(),e.optional(void 0,e.sequence(void 0,e.star(void 0,a.Terminal.characterClass("[A-Za-z0-9_-]").withName()).withName("star"),a.Terminal.characterClass("[A-Za-z0-9_]").withName()).withName("seq")).withName("opt"))}variableName(){return this.grammar.plus("var-name",a.Terminal.characterClass("[^:{}]").withName()).setEvaluator(d.Evaluator.DEFAULT_EVALUATOR)}entryName(){return this.identifier("entry-name")}list(){const t=this.grammar;return t.sequence("list",a.Terminal.literal("list").withName(),t.WHITESPACE_STAR.withName("ws*"),a.Terminal.literal("<").withName(),t.WHITESPACE_STAR.withName("ws*"),this.IDENTIFIER.withName("type"),t.WHITESPACE_STAR.withName("ws*"),a.Terminal.literal(">").withName()).setEvaluator((t=>{const e=t.evaluate("type"),i=this.targetGrammar.getSymbol(e);if(void 0===i)throw new Error("Could not find "+e+" in the target grammar.");const n=(a.Terminal,i.withName(e));return this.targetGrammar.list(void 0,n)}))}tuple(){const t=this.grammar;return t.sequence("tuple",a.Terminal.literal("tuple").withName(),t.WHITESPACE_STAR.withName("ws*"),a.Terminal.literal("<").withName(),t.WHITESPACE_STAR.withName("ws*"),this.IDENTIFIER.withName("type"),t.plus(void 0,t.sequence(void 0,t.WHITESPACE_STAR.withName("ws*"),a.Terminal.literal(",").withName(),t.WHITESPACE_STAR.withName("ws*"),this.ENTRY_NAME.withName("entry-name"),t.WHITESPACE_STAR.withName("ws*")).withName("sequence-names")).withName("plus-names"),a.Terminal.literal(">").withName()).setEvaluator((t=>{const e=t.evaluate("type"),i=t.getChild("plus-names"),n=i.numChildren(),r=new Array(n);for(let t=0;t<n;t++)r[t]=i.getChild(t).evaluate("entry-name");const s=this.targetGrammar.getSymbol(e);if(void 0===s)throw new Error("Could not find "+e+" in the target grammar.");const o=(a.Terminal,s.withName());return this.targetGrammar.tuple(void 0,o,...r).getTarget()}))}characterClass(){return this.grammar.sequence("character-class",a.Terminal.literal("[").withName(),this.grammar.plus(void 0,this.grammar.or(void 0,a.Terminal.characterClass("[^]]").withName(),a.Terminal.literal("\\]").withName()).withName()).withName("plus"),a.Terminal.literal("]").withName()).setEvaluator((t=>{const e=t.getParsedString();return a.Terminal.characterClass(e)}))}type(){const t=this.grammar;return t.or("type",t.sequence(void 0,this.IDENTIFIER.withName("identifier")).setEvaluator((t=>{const e=t.getParsedString(),i=this.targetGrammar.getSymbol(e);if(void 0===i)throw new Error("Unknown type '"+e+"'");return i})).withName("type"),this.LIST.withName("list"),this.TUPLE.withName("tuple"),this.CHARACTER_CLASS.withName("character-class"))}variable(){const t=this.grammar;return t.sequence("variable",a.Terminal.literal("{").withName(),this.VARIABLE_NAME.withName("variable-name"),t.optional(void 0,t.sequence(void 0,a.Terminal.literal(":").withName(),this.TYPE.withName("type")).withName("seq-type")).withName("opt-type"),t.optional(void 0,t.sequence(void 0,a.Terminal.literal(":").withName(),this.QUANTIFIER.withName("quantifier")).withName("seq-quantifier")).withName("opt-quantifier"),a.Terminal.literal("}").withName()).setEvaluator((t=>{const e=t.evaluate("variable-name"),i=t.evaluate("opt-type","seq-type","type"),r=t.evaluate("opt-quantifier","seq-quantifier","quantifier");if(i instanceof p.Join){const t=i;return null!=r&&t.setCardinality(r),t.getTarget().withName(e)}let s=void 0===i?a.Terminal.literal(e):i,o=(a.Terminal,s.withName(e));if(void 0!==r){let t;i instanceof a.Terminal&&(t=n.Autocompleter.DEFAULT_INLINE_AUTOCOMPLETER);const l=r;s=l.equals(f.IntRange.STAR)?this.targetGrammar.star(void 0,o).setAutocompleter(t).getTarget():l.equals(f.IntRange.PLUS)?this.targetGrammar.plus(void 0,o).setAutocompleter(t).getTarget():l.equals(f.IntRange.OPTIONAL)?this.targetGrammar.optional(void 0,o).setAutocompleter(t).getTarget():this.targetGrammar.repeat(void 0,o,l.getLower(),l.getUpper()).setAutocompleter(t).getTarget(),o=s.withName(e)}return o}))}noVariable(){const t=this.grammar;return t.sequence("no-variable",a.Terminal.characterClass("[^ \t\n{]").withName(),t.optional(void 0,t.sequence(void 0,t.star(void 0,a.Terminal.characterClass("[^{\n]").withName()).withName("middle"),a.Terminal.characterClass("[^ \t\n{]").withName()).withName("seq")).withName("tail")).setEvaluator((t=>a.Terminal.literal(t.getParsedString()).withName()))}expression(){const t=this.grammar;return t.join("expression",t.or(void 0,this.NO_VARIABLE.withName("no-variable"),this.VARIABLE.withName("variable")).withName("or"),void 0,void 0,t.WHITESPACE_STAR.getTarget(),!1,f.IntRange.PLUS).setEvaluator((t=>{const e=t.numChildren(),i=[];i.push(t.evaluate(0));for(let n=1;n<e;n++){const e=t.getChild(n);n%2==0?i.push(e.evaluate()):e.numChildren()>0&&i.push(this.targetGrammar.WHITESPACE_PLUS.withName("ws+"))}return i}))}program(){return this.targetGrammar.join("program",new s.NonTerminal("sentence").withName("sentence"),this.LINEBREAK_STAR.getTarget(),this.LINEBREAK_STAR.getTarget(),this.LINEBREAK_STAR.getTarget(),!0,f.IntRange.STAR)}addParseStartListener(t){this.parseStartListeners.push(t)}removeParseStartListener(t){const e=this.parseStartListeners.indexOf(t);-1!==e&&this.parseStartListeners.splice(e,1)}fireParsingStarted(){for(let t of this.parseStartListeners)t()}}},2785:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Autocompletion=void 0;const n=i(4691);class r{constructor(t,e){if(void 0!==e)this.forSymbol=t,this.symbolName=e;else{const e=t;this.forSymbol=e.getSymbol(),this.symbolName=e.getName()}}isEmptyLiteral(){return this instanceof r.Literal&&0==this.getCompletion(r.Purpose.FOR_INSERTION).length}static literal(t,e,i,n){return void 0===i&&(i=""),void 0===n&&(n=""),e.map((e=>new r.Literal(t,i+e+n)))}static parameterized(t,e){return new r.Parameterized(t,e).asArray()}static veto(t){return new r.Veto(t).asArray()}static doesAutocomplete(t){return new r.DoesAutocomplete(t).asArray()}getAlreadyEntered(){return this.alreadyEntered}setAlreadyEntered(t){this.alreadyEntered=t}asArray(){return[this]}}e.Autocompletion=r,function(t){class e extends t{constructor(t,e,i){void 0!==i?(super(t,e),this.literal=i):(super(t),this.literal=e)}getCompletion(t){return this.literal}}t.Literal=e;class i extends t{constructor(t,e,i){void 0!==i?(super(t,e),this.paramName=i):(super(t),this.paramName=e)}getCompletion(t){return"${"+this.paramName+"}"}getParamName(){return this.paramName}}t.Parameterized=i;class r extends t{getCompletion(t){return r.VETO}}let s;r.VETO="VETO",t.Veto=r,t.DoesAutocomplete=class extends t{getCompletion(t){return"Something"}},t.EntireSequence=class extends t{constructor(t,e,i){void 0!==e&&null!=i?(super(t,e),this.sequence=i):(super(t),this.sequence=t.getRule()),this.sequenceOfCompletions=[]}add(t){this.sequenceOfCompletions.push(t)}getSequenceOfCompletions(){return this.sequenceOfCompletions}getSequence(){return this.sequence}addLiteral(t,i,n){this.add([new e(t,i,n)])}addParameterized(t,e,n){this.add([new i(t,e,n)])}getCompletion(t){let i="";for(let r=0;r<this.sequenceOfCompletions.length;r++){const o=this.sequenceOfCompletions[r],l=o.length;if(l>1)i+="${"+this.sequence.getNameForChild(r)+"}";else if(1==l)if(t===s.FOR_MENU){let t;const l=o[0];t=l instanceof e?l.getCompletion(s.FOR_INSERTION):"${"+this.sequence.getNameForChild(r)+"}",void 0!==t&&t!==n.Named.UNNAMED||(t="${"+this.sequence.getChildren()[r].getSymbol()+"}"),i+=t}else t===s.FOR_INSERTION&&(i+=o[0].getCompletion(t))}return i}},function(t){t[t.FOR_MENU=0]="FOR_MENU",t[t.FOR_INSERTION=1]="FOR_INSERTION"}(s=t.Purpose||(t.Purpose={}))}(r||(e.Autocompletion=r={}))},4912:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BNF=void 0;const n=i(2940),r=i(2545);class s{constructor(t){if(this.symbols=new Map,this.productions=[],void 0!==t){for(let[e,i]of t.symbols)this.symbols.set(e,i);this.productions.push(...t.productions)}}reset(){this.symbols.clear(),this.productions.length=0}removeStartProduction(){for(var t=this.productions.length;t--;)if(this.productions[t].getLeft().equals(s.ARTIFICIAL_START_SYMBOL)){this.productions.splice(t,1);break}}addProduction(t){let e=this.productions.findIndex((e=>e.equals(t)));if(-1!=e)return console.log("Production already exists: "+t),this.productions[e];this.productions.push(t),this.symbols.set(t.getLeft().getSymbol(),t.getLeft());for(let e of t.getRight())e.isEpsilon()||this.symbols.set(e.getSymbol(),e);return t}getSymbol(t){let e=this.symbols.get(t);if(void 0===e)throw new Error("Could not find symbol "+t);return e}getProductions(t){return this.productions.filter((e=>e.getLeft().equals(t)))}toString(){let t="";for(let e of this.productions)t+=e.toString()+"\n";return t}}e.BNF=s,s.ARTIFICIAL_START_SYMBOL=new r.NonTerminal("S'"),s.ARTIFICIAL_STOP_SYMBOL=n.Terminal.END_OF_INPUT},3818:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DefaultParsedNode=void 0;const n=i(2940),r=i(4691),s=i(2785);e.DefaultParsedNode=class{constructor(t,e,i){this.parent=void 0,this.children=[],this.matcher=t,this.symbol=e,this.production=i}getSymbol(){return this.symbol}getName(){return void 0!==this.name?this.name:this.symbol.getSymbol()}setName(t){this.name=t}getProduction(){return this.production}getMatcher(){return this.matcher}doesAutocomplete(){return null!=this.getAutocompletion(!0)}getAutocompletion(t){if(null===this.symbol||void 0===this.symbol)return;if(this.symbol instanceof n.Literal)return s.Autocompletion.literal(this,[this.symbol.getSymbol()]);let e=this.getName();return e===r.Named.UNNAMED&&(e=this.symbol.getSymbol()),this.symbol.isTerminal()?this.getParsedString().length>0?s.Autocompletion.veto(this):s.Autocompletion.parameterized(this,e):void 0}numChildren(){return this.children.length}getChildren(){return this.children}getChild(t){return"number"==typeof t?this.children[t]:"string"==typeof t?this.children.find((e=>e.getName()===t)):void 0}addChildren(...t){this.children.push(...t);for(let e of t)e.parent=this}getParent(){return this.parent}removeAllChildren(){for(let t of this.children)t.parent=void 0;this.children.length=0}evaluate(...t){if(0===t.length)return this.symbol.isTerminal()?this.symbol.evaluate(this.getMatcher()):this.getParsedString();if("number"==typeof t[0])return this.children[t].evaluate();if("string"==typeof t[0]){let e=this;for(let i of t)if(e=e.getChild(i),null==e)return;return e.evaluate()}}getParsedString(...t){let e=this;for(let i of t)if(e=e.getChild(i),void 0===e)return"";return e.getMatcher().parsed}toString(){return this.getMatcher().parsed}}},3188:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Lexer=void 0,e.Lexer=class{constructor(t){this.pos=0,this.input=t}getPosition(){return this.pos}setPosition(t){this.pos=t}fwd(t){this.pos+=t}peek(t=0){let e=this.pos+t;return e<this.input.length?this.input.charAt(e):"$"}substring(t,e){return void 0!==e&&e>this.input.length&&(e=this.input.length),this.input.substring(t,e)}isDone(){return this.pos>this.input.length}isAtEnd(t=0){return this.pos+t===this.input.length}toString(){return this.input.substring(0,this.pos)+" -- "+this.input.substring(this.pos)}}},4004:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Matcher=void 0,e.Matcher=class{constructor(t,e,i){this.state=t,this.pos=e,this.parsed=i}isBetterThan(t){return null==t||!!this.state.isBetterThan(t.state)||!t.state.isBetterThan(this.state)&&this.pos+this.parsed.length>=t.pos+t.parsed.length}toString(){return`${this.state.toString()}: '${this.parsed}' (${this.pos})`}}},4691:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Named=void 0;class i{constructor(t,e=void 0){this.object=t,this.name=void 0!==e?e:i.UNNAMED}getName(){return this.name}get(){return this.object}getSymbol(){return this.object.getRepresentedSymbol()}}e.Named=i,i.UNNAMED="UNNAMED"},2545:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.NonTerminal=void 0;const n=i(4691),r=i(1548);class s extends r.Sym{constructor(t){super(t)}isTerminal(){return!1}isNonTerminal(){return!0}isEpsilon(){return!1}withName(t=void 0){return new n.Named(this,t)}uses(t,e,i){void 0===i&&(i=new Set);const n=e.getProductions(this);for(const r of n){if(r.toString()in i)continue;i.add(r.toString());const n=r.getRight();for(const r of n){if(r.equals(t))return!0;if(r instanceof s&&r.uses(t,e,i))return!0}}return!1}toString(){return"<"+this.getSymbol()+">"}static makeRandomSymbol(){let t="";for(let e=0;e<8;e++)t+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".charAt(Math.floor(62*Math.random()));return t}}e.NonTerminal=s},8823:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ParsedNodeFactory=void 0;const n=i(3818);var r;!function(t){t.DEFAULT={createNode:(t,e,i)=>new n.DefaultParsedNode(t,e,i)}}(r||(e.ParsedNodeFactory=r={}))},5029:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ParsingState=void 0;class i{constructor(t,e){this.ordinal=t,this.label=e}isBetterThan(t){return this.ordinal<t.ordinal}toString(){return this.label}equals(t){return t instanceof i&&this.ordinal===t.ordinal}}e.ParsingState=i,i.SUCCESSFUL=new i(0,"SUCCESSFUL"),i.END_OF_INPUT=new i(1,"END_OF_INPUT"),i.FAILED=new i(2,"FAILED"),i.NOT_PARSED=new i(3,"NOT_PARSED")},2671:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AstBuilder=e.Production=void 0;const n=i(2940);var r;!function(t){t.DEFAULT=(t,...e)=>t.addChildren(...e)}(r||(e.AstBuilder=r={}));class s{constructor(t,...e){this.astBuilder=void 0,this.extensionListener=void 0,this.left=t,this.right=s.removeEpsilon(e)}static removeEpsilon(t){return t.filter((t=>!t.equals(n.Terminal.EPSILON)))}getLeft(){return this.left}getRight(){return this.right}setAstBuilder(t){this.astBuilder=t}builtAST(t,...e){void 0===this.astBuilder?t.addChildren(...e):this.astBuilder(t,...e)}wasExtended(t,...e){void 0!==this.extensionListener&&this.extensionListener(t,...e)}onExtension(t){if(void 0!==this.extensionListener)throw new Error("ExtensionListener cannot be overwritten");this.extensionListener=t}toString(){let t=this.getLeft().toString(),e="";for(let i=0;i<50-t.length;i++)e+=" ";e+=t,e+=" -> ";let i=this.getRight();for(let t of i)e+=t+" ";return e}equals(t){if(!(t instanceof s))return!1;const e=t;return this.left.equals(e.left)&&s.arraysEqual(this.right,e.right)}static arraysEqual(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(var i=0;i<t.length;++i)if(!t[i].equals(e[i]))return!1;return!0}}e.Production=s},1785:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SymbolSequence=e.RDParser=void 0;const n=i(2785),r=i(4912),s=i(4004),o=i(5029),l=i(738);class a{constructor(t,e,i){this.grammar=t,this.lexer=e,this.parsedNodeFactory=i}getLexer(){return this.lexer}getGrammar(){return this.grammar}getParsedNodeFactory(){return this.parsedNodeFactory}parse(t){let e=new h(r.BNF.ARTIFICIAL_START_SYMBOL,void 0,void 0),i=[],n=this.parseRecursive(e,i);void 0!==t&&this.collectAutocompletions(i,t);let s=[],a=this.createParsedTree(n,s);if(a=this.buildAst(a),a.getMatcher().state===o.ParsingState.FAILED)throw new l.ParseException(a,s[0],this);return a}buildAst(t){let e=[];for(let i=0;i<t.numChildren();i++)e.push(this.buildAst(t.getChild(i)));t.removeAllChildren();let i=t.getProduction();return void 0!==i&&i.builtAST(t,...e),t}collectAutocompletions(t,e){if(null==e)throw new Error("autocompletions should be defined at this point");const i=[];for(const e of t)this.collectAutocompletingParents(e,i);const n=new Set;for(const t of i){const i=t.getProduction();let r;if(void 0!==i){r=i.getLeft().getSymbol()+":";for(const t of i.getRight())r+=t.getSymbol()}else r=t.getSymbol().getSymbol();if(!n.has(r)){const i=this.addAutocompletions(t,e);if(n.add(r),i)break}}}collectAutocompletingParents(t,e){let i=[];this.createParsedTree(t,i);let n,r=[],s=i[0];for(;void 0!==s;)r.push(s),s=s.getParent();for(let t=r.length-1;t>=0;t--){let e=r[t];if(e.doesAutocomplete()){n=e;break}}void 0!==n&&e.push(n)}addAutocompletions(t,e){let i=t.getMatcher().pos,r=this.lexer.substring(i),s=t.getAutocompletion(!1);if(void 0!==s)for(let t of s){if(void 0===t||t.isEmptyLiteral())continue;if(t instanceof n.Autocompletion.Veto)return e.length=0,!0;t.setAlreadyEntered(r);const i=t.getCompletion(n.Autocompletion.Purpose.FOR_MENU);e.some((t=>(null==t?void 0:t.getCompletion(n.Autocompletion.Purpose.FOR_MENU))===i))||e.push(t)}return!1}parseRecursive(t,e){let i=t.getCurrentSymbol();for(;i.isTerminal();){let n=i.matches(this.lexer);if(t.addMatcher(n),n.state.equals(o.ParsingState.END_OF_INPUT)&&void 0!==e&&e.push(t),!n.state.equals(o.ParsingState.SUCCESSFUL))return t;if(t.incrementPosition(),this.lexer.fwd(n.parsed.length),this.lexer.isDone())return t;i=t.getCurrentSymbol()}let n,r=i,s=this.grammar.getProductions(r),l=this.lexer.getPosition();for(let i of s){let r=this.lexer.getPosition(),s=t.replaceCurrentSymbol(i),a=this.parseRecursive(s,e),h=a.getLastMatcher();if(void 0!==h){if(h.state.equals(o.ParsingState.SUCCESSFUL))return a;(void 0===n||h.isBetterThan(n.getLastMatcher()))&&(n=a,l=this.lexer.getPosition())}this.lexer.setPosition(r)}return void 0!==n&&this.lexer.setPosition(l),n}createParsedTree(t,e){const i=[],n=t.parsedMatchers.length;for(let e=0;e<t.sequence.length;e++){let r=t.sequence[e],l=e<n?t.parsedMatchers[e]:new s.Matcher(o.ParsingState.NOT_PARSED,0,""),a=this.parsedNodeFactory.createNode(l,r,void 0);i.push(a)}void 0!==e&&(e[0]=i[n-1]);let l=t;for(;void 0!==l.parent;){let t=l.parent,e=l.production;if(void 0===e)throw new Error("production may not be undefined at this point");let n=t.pos,r=e.getRight(),s=e.getLeft(),o=r.length,h=i.slice(n,n+o),c=a.matcherFromChildSequence(h),u=this.parsedNodeFactory.createNode(c,s,e);u.addChildren(...h),i.splice(n,o,u),l=l.parent}let h=i[0];if(!h.getSymbol().equals(r.BNF.ARTIFICIAL_START_SYMBOL))throw new Error("");return a.notifyExtensionListeners(h),h}static notifyExtensionListeners(t){const e=t.getProduction();if(void 0!==e){e.wasExtended(t,...t.getChildren());for(let e of t.getChildren())this.notifyExtensionListeners(e)}}static matcherFromChildSequence(t){let e=-1,i=o.ParsingState.NOT_PARSED,n="";for(let r of t){if(i.equals(o.ParsingState.END_OF_INPUT)||i.equals(o.ParsingState.FAILED))break;const t=r.getMatcher(),s=t.state;s.equals(o.ParsingState.NOT_PARSED)||(-1===e&&(e=t.pos),!i.equals(o.ParsingState.NOT_PARSED)&&s.isBetterThan(i)||(i=s)),n+=t.parsed}return-1===e&&(e=0),new s.Matcher(i,e,n)}}e.RDParser=a;class h{constructor(t,e,i){if(this.sequence=[],this.pos=0,this.parsedMatchers=[],void 0!==t){if(void 0!==e||void 0!==i)throw new Error("If 'start' is defined, parent and production should be undefined");this.sequence.push(t),this.parent=void 0,this.production=void 0}else{if(void 0===e||void 0===i)throw new Error("If 'start' is not defined, parent and production should be defined");this.sequence.push(...e.sequence),this.pos=e.pos,this.parent=e,this.production=i}}getLastMatcher(){return this.parsedMatchers.at(-1)}addMatcher(t){this.parsedMatchers.push(t)}getCurrentSymbol(){return this.sequence[this.pos]}replaceCurrentSymbol(t){let e=new h(void 0,this,t);e.parsedMatchers.push(...this.parsedMatchers),e.sequence.splice(this.pos,1);let i=t.getRight();return e.sequence.splice(this.pos,0,...i),e}incrementPosition(){this.pos++}toString(){let t="",e=0;for(let i of this.sequence)e++===this.pos&&(t+="."),t+=i+" -- ";return t}}e.SymbolSequence=h},8009:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0})},1548:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Sym=void 0;class i{constructor(t){this.symbol=t}getSymbol(){return this.symbol}getRepresentedSymbol(){return this}toString(){return this.symbol}equals(t){return t instanceof i&&this.symbol===t.symbol}}e.Sym=i},2940:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CharacterClass=e.Epsilon=e.Literal=e.Terminal=void 0;const n=i(4691),r=i(4004),s=i(5029),o=i(1548);class l extends o.Sym{static literal(t){return new u(t)}static characterClass(t){return new p(t)}constructor(t){super(t)}isTerminal(){return!0}isNonTerminal(){return!1}isEpsilon(){return!1}withName(t=void 0){return new n.Named(this,t)}}e.Terminal=l;class a extends l{constructor(){super("epsilon")}isEpsilon(){return!0}matches(t){return new r.Matcher(s.ParsingState.SUCCESSFUL,t.getPosition(),"")}evaluate(t){}}e.Epsilon=a;class h extends l{constructor(){super("EOI")}matches(t){const e=t.getPosition();return t.isAtEnd()?new r.Matcher(s.ParsingState.SUCCESSFUL,e," "):new r.Matcher(s.ParsingState.FAILED,e,"")}evaluate(t){}}class c extends l{constructor(){super("digit")}matches(t){const e=t.getPosition();if(t.isAtEnd())return new r.Matcher(s.ParsingState.END_OF_INPUT,e,"");const i=t.peek();return i.match(/[0-9]/)?new r.Matcher(s.ParsingState.SUCCESSFUL,e,i):new r.Matcher(s.ParsingState.FAILED,e,i)}evaluate(t){return t.parsed.charAt(0)}}class u extends l{constructor(t){super(t)}matches(t){const e=t.getPosition(),i=this.getSymbol();for(let n=0;n<i.length;n++){if(t.isAtEnd(n))return new r.Matcher(s.ParsingState.END_OF_INPUT,e,t.substring(e,e+n+1));if(t.peek(n)!==i.charAt(n))return new r.Matcher(s.ParsingState.FAILED,e,t.substring(e,e+n+1))}return new r.Matcher(s.ParsingState.SUCCESSFUL,e,i)}evaluate(t){return t.parsed}toString(){return`'${this.getSymbol()}'`}}e.Literal=u;class d extends l{constructor(){super("letter")}matches(t){const e=t.getPosition();if(t.isAtEnd())return new r.Matcher(s.ParsingState.END_OF_INPUT,e,"");const i=t.peek();return console.debug("Test if "+i+" is a letter"),i.match(/[a-zA-Z]/)?(console.debug("It is"),new r.Matcher(s.ParsingState.SUCCESSFUL,e,i)):(console.debug("it is not"),new r.Matcher(s.ParsingState.FAILED,e,i))}evaluate(t){return t.parsed.charAt(0)}}class f extends l{constructor(){super("whitespace")}matches(t){const e=t.getPosition();if(t.isAtEnd())return new r.Matcher(s.ParsingState.END_OF_INPUT,e,"");const i=t.peek();return" "===i||"\t"===i?new r.Matcher(s.ParsingState.SUCCESSFUL,e,i):new r.Matcher(s.ParsingState.FAILED,e,i)}evaluate(t){return t.parsed.charAt(0)}}class p extends l{constructor(t){super(t.trim());const e=t.trim();if(0===e.length)throw new Error("empty character class pattern");if("["!==e.charAt(0)||"]"!==e.charAt(e.length-1))throw new Error("Wrong character class format: "+t);let i=1,n=e.length-2;const r="^"===e.charAt(1);r&&i++,this.ranges=new v(r),"-"===e.charAt(i)&&(this.ranges.add(new g("-".charCodeAt(0))),i++),"-"===e.charAt(n)&&(this.ranges.add(new g("-".charCodeAt(0))),n--);let s=i;for(;s<=n;){const i=s+1,r=e.charAt(s);if(i<=n&&"-"===e.charAt(i)){const i=e.charAt(s+2);if("-"===r||"-"===i)throw new Error("Wrong character class format: "+t);this.ranges.add(new m(r.charCodeAt(0),i.charCodeAt(0))),s+=3}else this.ranges.add(new g(r.charCodeAt(0))),s++}}matches(t){const e=t.getPosition();if(t.isAtEnd())return new r.Matcher(s.ParsingState.END_OF_INPUT,e,"");const i=t.peek();return this.ranges.checkCharacter(i.charCodeAt(0))?new r.Matcher(s.ParsingState.SUCCESSFUL,e,i):new r.Matcher(s.ParsingState.FAILED,e,i)}evaluate(t){return t.parsed.charAt(0)}toString(){return super.toString()}}e.CharacterClass=p;class m{constructor(t,e){this.lower=t,this.upper=e}checkCharacter(t){return t>=this.lower&&t<=this.upper}equals(t){if(!(t instanceof m))return!1;const e=t;return this.lower===e.lower&&this.upper===e.upper}}class g extends m{constructor(t){super(t,t),this.number=t}checkCharacter(t){return t===this.number}}class v{constructor(t){this.ranges=[],this.negated=!1,this.negated=t}add(t){this.ranges.push(t)}checkCharacter(t){for(var e of this.ranges){let i=e.checkCharacter(t);if(!this.negated&&i)return!0;if(this.negated&&i)return!1}return this.negated}equals(t){if(!(t instanceof v))return!1;let e=(t,e)=>t.lower<e.lower?-1:t.lower>e.lower?1:t.upper<e.upper?-1:t.upper>e.upper?1:0,i=this.ranges.slice(),n=t.ranges.slice();return i.sort(e),n.sort(e),function(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(var i=0;i<t.length;++i)if(!t[i].equals(e[i]))return!1;return!0}(i,n)}}!function(t){t.EPSILON=new a,t.DIGIT=new c,t.LETTER=new d,t.WHITESPACE=new f,t.END_OF_INPUT=new h}(l||(e.Terminal=l={}))},6894:function(t,e,i){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i);var r=Object.getOwnPropertyDescriptor(e,i);r&&!("get"in r?!e.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,n,r)}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),r=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),r(i(2785),e),r(i(4912),e),r(i(3818),e),r(i(3188),e),r(i(4004),e),r(i(4691),e),r(i(2545),e),r(i(8823),e),r(i(5029),e),r(i(2671),e),r(i(1785),e),r(i(8009),e),r(i(1548),e),r(i(2940),e)},995:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.EBNF=void 0;const n=i(6970),r=i(2940),s=i(123),o=i(3460);class l extends o.EBNFCore{constructor(){super(),this.SIGN=this.makeSign(),this.INTEGER=this.makeInteger(),this.FLOAT=this.makeFloat(),this.MONTH=this.makeMonth(),this.WEEKDAY=this.makeWeekday(),this.WHITESPACE_STAR=this.makeWhitespaceStar(),this.WHITESPACE_PLUS=this.makeWhitespacePlus(),this.INTEGER_RANGE=this.makeIntegerRange(),this.TIME=this.makeTime(),this.DATE=this.makeDate(),this.DATETIME=this.makeDatetime(),this.COLOR=this.makeColor(),this.symbols.set(r.Terminal.DIGIT.getSymbol(),r.Terminal.DIGIT),this.symbols.set(r.Terminal.LETTER.getSymbol(),r.Terminal.LETTER)}makeSign(){return this.or(l.SIGN_NAME,r.Terminal.literal("-").withName(),r.Terminal.literal("+").withName())}makeInteger(){const t=this.sequence(l.INTEGER_NAME,this.optional(void 0,this.SIGN.withName("sign")).withName("optional"),this.plus(void 0,r.Terminal.DIGIT.withName("digit")).withName("plus"));return t.setEvaluator((t=>parseInt(t.getParsedString()))),t.setAutocompleter(n.Autocompleter.DEFAULT_INLINE_AUTOCOMPLETER),t}makeFloat(){const t=this.sequence(l.FLOAT_NAME,this.optional(void 0,this.SIGN.withName()).withName(),this.plus(void 0,r.Terminal.DIGIT.withName()).withName(),this.optional(void 0,this.sequence(void 0,r.Terminal.literal(".").withName(),this.star(void 0,r.Terminal.DIGIT.withName()).withName("star")).withName("sequence")).withName());return t.setEvaluator((t=>parseFloat(t.getParsedString()))),t.setAutocompleter(n.Autocompleter.DEFAULT_INLINE_AUTOCOMPLETER),t}makeWhitespaceStar(){const t=this.star(l.WHITESPACE_STAR_NAME,r.Terminal.WHITESPACE.withName());return t.setAutocompleter(new n.IfNothingYetEnteredAutocompleter(" ","")),t}makeWhitespacePlus(){const t=this.plus(l.WHITESPACE_PLUS_NAME,r.Terminal.WHITESPACE.withName());return t.setAutocompleter(new n.IfNothingYetEnteredAutocompleter(" ","")),t}makeIntegerRange(){const t=this.sequence(void 0,this.WHITESPACE_STAR.withName("ws*"),r.Terminal.literal("-").withName(),this.WHITESPACE_STAR.withName("ws*")),e=this.join(l.INTEGER_RANGE_NAME,this.INTEGER.withName(),void 0,void 0,t.getTarget(),!0,["from","to"]);return e.setEvaluator((t=>new s.IntRange(parseInt(t.evaluate(0)),parseInt(t.evaluate(1))))),e}makeColor(){const t=this.sequence(void 0,r.Terminal.literal("black").withName()).setEvaluator((t=>l.rgb2int(0,0,0))),e=this.sequence(void 0,r.Terminal.literal("white").withName()).setEvaluator((t=>l.rgb2int(255,255,255))),i=this.sequence(void 0,r.Terminal.literal("red").withName()).setEvaluator((t=>l.rgb2int(255,0,0))),n=this.sequence(void 0,r.Terminal.literal("orange").withName()).setEvaluator((t=>l.rgb2int(255,128,0))),s=this.sequence(void 0,r.Terminal.literal("yellow").withName()).setEvaluator((t=>l.rgb2int(255,255,0))),o=this.sequence(void 0,r.Terminal.literal("lawn green").withName()).setEvaluator((t=>l.rgb2int(128,255,0))),a=this.sequence(void 0,r.Terminal.literal("green").withName()).setEvaluator((t=>l.rgb2int(0,255,0))),h=this.sequence(void 0,r.Terminal.literal("spring green").withName()).setEvaluator((t=>l.rgb2int(0,255,180))),c=this.sequence(void 0,r.Terminal.literal("cyan").withName()).setEvaluator((t=>l.rgb2int(0,255,255))),u=this.sequence(void 0,r.Terminal.literal("azure").withName()).setEvaluator((t=>l.rgb2int(0,128,255))),d=this.sequence(void 0,r.Terminal.literal("blue").withName()).setEvaluator((t=>l.rgb2int(0,0,255))),f=this.sequence(void 0,r.Terminal.literal("violet").withName()).setEvaluator((t=>l.rgb2int(128,0,255))),p=this.sequence(void 0,r.Terminal.literal("magenta").withName()).setEvaluator((t=>l.rgb2int(255,0,255))),m=this.sequence(void 0,r.Terminal.literal("pink").withName()).setEvaluator((t=>l.rgb2int(255,0,128))),g=this.sequence(void 0,r.Terminal.literal("gray").withName()).setEvaluator((t=>l.rgb2int(128,128,128))),v=this.tuple(void 0,this.INTEGER.withName(),"red","green","blue");return this.or(l.COLOR_NAME,v.withName(),t.withName(),e.withName(),i.withName(),n.withName(),s.withName(),o.withName(),a.withName(),h.withName(),c.withName(),u.withName(),d.withName(),f.withName(),p.withName(),m.withName(),g.withName())}static rgb2int(t,e,i){return 255<<24|(255&t)<<16|(255&e)<<8|255&i}makeTime(){const t=this.sequence(void 0,this.optional(void 0,r.Terminal.DIGIT.withName()).withName(),r.Terminal.DIGIT.withName());t.setAutocompleter(n.Autocompleter.DEFAULT_INLINE_AUTOCOMPLETER);const e=this.sequence(void 0,r.Terminal.DIGIT.withName(),r.Terminal.DIGIT.withName());e.setAutocompleter(n.Autocompleter.DEFAULT_INLINE_AUTOCOMPLETER);const i=this.sequence(l.TIME_NAME,t.withName("HH"),r.Terminal.literal(":").withName(),e.withName("MM"));return i.setEvaluator((t=>l.parseTime(t.getParsedString()))),i.setAutocompleter(new n.EntireSequenceCompleter(this,new Map)),i}makeMonth(){return this.or(l.MONTH_NAME,this.sequence(void 0,r.Terminal.literal("January").withName()).setEvaluator((t=>0)).withName("january"),this.sequence(void 0,r.Terminal.literal("February").withName()).setEvaluator((t=>1)).withName("february"),this.sequence(void 0,r.Terminal.literal("March").withName()).setEvaluator((t=>2)).withName("march"),this.sequence(void 0,r.Terminal.literal("April").withName()).setEvaluator((t=>3)).withName("april"),this.sequence(void 0,r.Terminal.literal("May").withName()).setEvaluator((t=>4)).withName("may"),this.sequence(void 0,r.Terminal.literal("June").withName()).setEvaluator((t=>5)).withName("june"),this.sequence(void 0,r.Terminal.literal("July").withName()).setEvaluator((t=>6)).withName("july"),this.sequence(void 0,r.Terminal.literal("August").withName()).setEvaluator((t=>7)).withName("august"),this.sequence(void 0,r.Terminal.literal("September").withName()).setEvaluator((t=>8)).withName("september"),this.sequence(void 0,r.Terminal.literal("October").withName()).setEvaluator((t=>9)).withName("october"),this.sequence(void 0,r.Terminal.literal("November").withName()).setEvaluator((t=>10)).withName("november"),this.sequence(void 0,r.Terminal.literal("December").withName()).setEvaluator((t=>11)).withName("december"))}makeWeekday(){return this.or(l.WEEKDAY_NAME,this.sequence(void 0,r.Terminal.literal("Monday").withName()).setEvaluator((t=>0)).withName("monday"),this.sequence(void 0,r.Terminal.literal("Tuesday").withName()).setEvaluator((t=>1)).withName("tuesday"),this.sequence(void 0,r.Terminal.literal("Wednesday").withName()).setEvaluator((t=>2)).withName("wednesday"),this.sequence(void 0,r.Terminal.literal("Thursday").withName()).setEvaluator((t=>3)).withName("thursday"),this.sequence(void 0,r.Terminal.literal("Friday").withName()).setEvaluator((t=>4)).withName("friday"),this.sequence(void 0,r.Terminal.literal("Saturday").withName()).setEvaluator((t=>5)).withName("saturday"),this.sequence(void 0,r.Terminal.literal("Sunday").withName()).setEvaluator((t=>6)).withName("sunday"))}makeDate(){const t=this.sequence(void 0,this.optional(void 0,r.Terminal.DIGIT.withName()).withName(),r.Terminal.DIGIT.withName());t.setAutocompleter(n.Autocompleter.DEFAULT_INLINE_AUTOCOMPLETER),t.setEvaluator((t=>parseInt(t.getParsedString())));const e=this.sequence(void 0,r.Terminal.DIGIT.withName(),r.Terminal.DIGIT.withName(),r.Terminal.DIGIT.withName(),r.Terminal.DIGIT.withName());e.setAutocompleter(n.Autocompleter.DEFAULT_INLINE_AUTOCOMPLETER),e.setEvaluator((t=>parseInt(t.getParsedString())));const i=this.sequence(l.DATE_NAME,t.withName("day"),r.Terminal.literal(" ").withName(),this.MONTH.withName("month"),r.Terminal.literal(" ").withName(),e.withName("year"));return i.setEvaluator((t=>{const e=t.evaluate("day"),i=t.evaluate("month"),n=t.evaluate("year");let r=new Date;return r.setDate(e),r.setMonth(i),r.setFullYear(n),r.setHours(0,0,0,0),r})),i.setAutocompleter(new n.EntireSequenceCompleter(this,new Map)),i}makeDatetime(){const t=this.sequence(l.DATETIME_NAME,this.DATE.withName("date"),r.Terminal.literal(" ").withName(),this.TIME.withName("time"));return t.setEvaluator((t=>{let e=t.evaluate("date"),i=t.evaluate("time");return e.setHours(i.getHours()),e.setMinutes(i.getMinutes()),e.setSeconds(i.getSeconds()),e.setMilliseconds(i.getMilliseconds()),e})),t.setAutocompleter(new n.EntireSequenceCompleter(this,new Map)),t}static parseTime(t){const e=t.split(":");if(2!=e.length)throw new Error("Failed to parse "+t);const i=parseInt(e[0]),n=parseInt(e[1]);if(void 0===i||i<0||i>23)throw new Error("Failed to parse "+t);if(void 0===n||n<0||n>59)throw new Error("Failed to parse "+t);const r=new Date;return r.setHours(i),r.setMinutes(n),r.setSeconds(0),r.setMilliseconds(0),r}}e.EBNF=l,l.DIGIT_NAME=r.Terminal.DIGIT.getSymbol(),l.LETTER_NAME=r.Terminal.LETTER.getSymbol(),l.SIGN_NAME="sign",l.INTEGER_NAME="int",l.FLOAT_NAME="float",l.MONTH_NAME="month",l.WEEKDAY_NAME="weekday",l.WHITESPACE_STAR_NAME="whitespace-star",l.WHITESPACE_PLUS_NAME="whitespace-plus",l.INTEGER_RANGE_NAME="integer-range",l.PATH_NAME="path",l.TIME_NAME="time",l.DATE_NAME="date",l.DATETIME_NAME="date-time",l.COLOR_NAME="color"},3460:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.EBNFCore=void 0;const n=i(6970),r=i(4912),s=i(2545),o=i(2940),l=i(123),a=i(5152),h=i(1440),c=i(2597),u=i(7196),d=i(7667),f=i(1449),p=i(8872),m=i(3349),g=i(2785);class v{constructor(t){if(this.symbols=new Map,this.rules=[],this.bnf=new r.BNF,this.compiled=!1,void 0!==t){for(let[e,i]of t.symbols)this.symbols.set(e,i);this.rules.push(...t.rules),this.compiled=t.compiled}}getSymbol(t){return this.symbols.get(t)}compile(t){this.compiled=!1,this.removeRules(r.BNF.ARTIFICIAL_START_SYMBOL);const e=new f.Sequence(r.BNF.ARTIFICIAL_START_SYMBOL,t,r.BNF.ARTIFICIAL_STOP_SYMBOL);this.addRule(e),e.setEvaluator(m.Evaluator.FIRST_CHILD_EVALUATOR),this.bnf.reset();for(let t of this.rules)t.createBNF(this.bnf);this.compiled=!0}getBNF(){return this.bnf}getRules(t){return this.rules.filter((e=>e.getTarget().equals(t)))}plus(t,e){const i=this.newOrExistingNonTerminal(t),n=new u.Plus(i,e.getSymbol());return n.setParsedChildNames(e.getName()),this.addRule(n),n}star(t,e){const i=this.newOrExistingNonTerminal(t),n=new p.Star(i,e.getSymbol());return n.setParsedChildNames(e.getName()),this.addRule(n),n}or(t,...e){const i=this.newOrExistingNonTerminal(t),n=new c.Or(i,...v.getSymbols(...e));return n.setParsedChildNames(...v.getNames(...e)),this.addRule(n),n}optional(t,e){const i=this.newOrExistingNonTerminal(t),n=new h.Optional(i,e.getSymbol());return n.setParsedChildNames(e.getName()),this.addRule(n),n}repeat(t,e,i,n){const r=this.newOrExistingNonTerminal(t),s=new d.Repeat(r,e.getSymbol(),i,n);return s.setParsedChildNames(e.getName()),this.addRule(s),s}join(t,e,i,n,r,s,o){const h=this.newOrExistingNonTerminal(t);let c,u;o instanceof l.IntRange?(u=[e.getName()],c=o):(u=o,c=new l.IntRange(u.length,u.length));const d=new a.Join(h,e.getSymbol(),i,n,r,c);return d.setOnlyKeepEntries(s),d.setParsedChildNames(...u),this.addRule(d),d}list(t,e){const i=this.star(void 0,o.Terminal.WHITESPACE.withName()).withName("ws*"),r=this.sequence(void 0,i,o.Terminal.literal(",").withName(),i);return r.setAutocompleter(new n.IfNothingYetEnteredAutocompleter(", ","")),this.join(t,e,void 0,void 0,r.getTarget(),!0,l.IntRange.STAR)}tuple(t,e,...i){const n=this.star(void 0,o.Terminal.WHITESPACE.withName()).withName("ws*");n.get().setAutocompleter({getAutocompletion:(t,e)=>g.Autocompletion.literal(t,[""])});const r=this.sequence(void 0,o.Terminal.literal("(").withName("open"),n),s=this.sequence(void 0,n,o.Terminal.literal(")").withName("close")),l=this.sequence(void 0,n,o.Terminal.literal(",").withName("delimiter"),n),a=this.join(t,e,r.getTarget(),s.getTarget(),l.getTarget(),!0,i);return a.setAutocompleter({getAutocompletion:(t,n)=>{if(t.getParsedString().length>0)return;if(n)return g.Autocompletion.doesAutocomplete(t);const o=new g.Autocompletion.EntireSequence(t);o.addLiteral(r.getTarget(),"open","("),o.addParameterized(e.getSymbol(),i[0],i[0]);for(let t=1;t<i.length;t++)o.addLiteral(l.getTarget(),"delimiter",", "),o.addParameterized(e.getSymbol(),i[t],i[t]);return o.addLiteral(s.getTarget(),"close",")"),o.asArray()}}),a}sequence(t,...e){const i=this.newOrExistingNonTerminal(t),n=new f.Sequence(i,...v.getSymbols(...e));return n.setParsedChildNames(...v.getNames(...e)),this.addRule(n),n}static getSymbols(...t){const e=new Array(t.length);for(let i=0;i<t.length;i++)e[i]=t[i].getSymbol();return e}static getNames(...t){const e=new Array(t.length);for(let i=0;i<t.length;i++)e[i]=t[i].getName();return e}addRule(t){let e=t.getTarget();void 0===this.symbols.get(e.getSymbol())&&this.symbols.set(e.getSymbol(),e);for(let e of t.getChildren())e.isEpsilon()||void 0!==this.symbols.get(e.getSymbol())||this.symbols.set(e.getSymbol(),e);this.rules.push(t),this.compiled=!1}removeRules(t){for(let e=this.rules.length-1;e>=0;e--)this.rules[e].getTarget().equals(t)&&this.rules.splice(e,1);this.compiled=!1}newOrExistingNonTerminal(t){if(void 0===t)return;let e=this.symbols.get(t);return void 0===e&&(e=new s.NonTerminal(t)),e}}e.EBNFCore=v},5310:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.EBNFParsedNodeFactory=void 0;const n=i(9991);var r;!function(t){t.INSTANCE={createNode:(t,e,i)=>new n.ParsedNode(t,e,i)}}(r||(e.EBNFParsedNodeFactory=r={}))},3156:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.EBNFParser=void 0;const n=i(1785),r=i(5310);class s extends n.RDParser{constructor(t,e){super(t,e,r.EBNFParsedNodeFactory.INSTANCE),this.parseStartListeners=[]}createParsedTree(t,e){this.fireParsingStarted();let i=super.createParsedTree(t,e);return i.notifyListeners(),i}addParseStartListener(t){this.parseStartListeners.push(t)}removeParseStartListener(t){let e=this.parseStartListeners.indexOf(t);-1!==e&&this.parseStartListeners.splice(e,1)}fireParsingStarted(){for(let t of this.parseStartListeners)t()}}e.EBNFParser=s},1872:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.EBNFProduction=void 0;const n=i(2671);class r extends n.Production{constructor(t,e,...i){super(e,...i),this.rule=t}getRule(){return this.rule}}e.EBNFProduction=r},5152:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Join=void 0;const n=i(2545),r=i(2671),s=i(2940),o=i(3349),l=i(123),a=i(7667),h=i(5466),c=i(8872);class u extends h.Rule{constructor(t,e,i,n,r,s){super("join",t,e),this.onlyKeepEntries=!0,this.open=i,this.close=n,this.delimiter=r,this.cardinality=s,this.setEvaluator(o.Evaluator.ALL_CHILDREN_EVALUATOR)}getEntry(){return this.children[0]}getCardinality(){return this.cardinality}setCardinality(t){this.cardinality=t}setOnlyKeepEntries(t){this.onlyKeepEntries=t}createBNF(t){const e=this.children[0],i=new n.NonTerminal("next-"+n.NonTerminal.makeRandomSymbol()),o=void 0!==this.open&&!this.open.isEpsilon(),u=void 0!==this.close&&!this.close.isEpsilon(),d=void 0!==this.delimiter&&!this.delimiter.isEpsilon();if(o&&!u||!o&&u)throw new Error("Join must have either both open and close or neither");if(d){const n=h.Rule.addProduction(t,this,i,this.delimiter,e),s=this;n.onExtension(((t,...e)=>{const i=t.getNthEntryInParent()+1;e[0].setName("delimiter"),e[1].setName(s.getNameForChild(i))})),this.onlyKeepEntries?n.setAstBuilder(((t,...e)=>t.addChildren(e[1]))):n.setAstBuilder(r.AstBuilder.DEFAULT)}else{const n=h.Rule.addProduction(t,this,i,e),r=this;n.onExtension(((t,...e)=>{const i=t.getNthEntryInParent()+1;e[0].setName(r.getNameForChild(i))})),n.setAstBuilder(((t,...e)=>t.addChildren(e[0])))}const f=(t,...e)=>{t.addChildren(e[0]);for(let i of e[1].getChildren())t.addChildren(...i.getChildren())},p=new n.NonTerminal("repetition:"+n.NonTerminal.makeRandomSymbol());if(this.cardinality.equals(l.IntRange.PLUS)){const n=new c.Star(void 0,i);n.setParsedChildNames("next"),n.createBNF(t);const r=h.Rule.addProduction(t,this,p,e,n.getTarget()),s=this;r.onExtension(((t,...e)=>{e[0].setName(s.getNameForChild(0)),e[1].setName("star")})),r.setAstBuilder(f)}else if(this.cardinality.equals(l.IntRange.STAR)){const n=new c.Star(void 0,i);n.setParsedChildNames("next"),n.createBNF(t);const r=h.Rule.addProduction(t,this,p,e,n.getTarget()),o=h.Rule.addProduction(t,this,p,s.Terminal.EPSILON);r.setAstBuilder(f),o.setAstBuilder(((t,...e)=>{}));const l=this;r.onExtension(((t,...e)=>{e[0].setName(l.getNameForChild(0)),e[1].setName("star")}))}else if(this.cardinality.equals(l.IntRange.OPTIONAL)){const i=h.Rule.addProduction(t,this,p,e),n=this;i.onExtension(((t,...e)=>{e[0].setName(n.getNameForChild(0))})),h.Rule.addProduction(t,this,p,s.Terminal.EPSILON).setAstBuilder(((t,...e)=>{}))}else{const n=this.cardinality.getLower(),r=this.cardinality.getUpper();if(0===n&&0===r)h.Rule.addProduction(t,this,p,s.Terminal.EPSILON).setAstBuilder(((t,...e)=>{}));else if(1===n&&1===r){const i=h.Rule.addProduction(t,this,p,e),n=this;i.onExtension(((t,...e)=>{e[0].setName(n.getNameForChild(0))}))}else if(n<=0){const n=new a.Repeat(void 0,i,0,r-1);n.setParsedChildNames("next"),n.createBNF(t);const o=h.Rule.addProduction(t,this,p,e,n.getTarget()),l=this;o.setAstBuilder(f),o.onExtension(((t,...e)=>{e[0].setName(l.getNameForChild(0)),e[1].setName("repeat")})),h.Rule.addProduction(t,this,p,s.Terminal.EPSILON).setAstBuilder(((t,...e)=>{}))}else{const s=new a.Repeat(void 0,i,n-1,r-1);s.setParsedChildNames("next"),s.createBNF(t);const o=h.Rule.addProduction(t,this,p,e,s.getTarget()),l=this;o.setAstBuilder(f),o.onExtension(((t,...e)=>{e[0].setName(l.getNameForChild(0)),e[1].setName("repeat")}))}}if(o||u){const e=h.Rule.addProduction(t,this,this.tgt,this.open,p,this.close),i=this;e.onExtension(((t,...e)=>{i.onlyKeepEntries||e[0].setName("open"),e[1].setName("repetition"),i.onlyKeepEntries||e[2].setName("close")})),e.setAstBuilder(((t,...e)=>{i.onlyKeepEntries||t.addChildren(e[0]),t.addChildren(...e[1].getChildren()),i.onlyKeepEntries||t.addChildren(e[2])}))}else{const e=h.Rule.addProduction(t,this,this.tgt,p);e.onExtension(((t,...e)=>{e[0].setName("repetition")})),e.setAstBuilder(((t,...e)=>t.addChildren(...e[0].getChildren())))}}}e.Join=u},6353:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.NamedRule=void 0;const n=i(4691);class r extends n.Named{constructor(t,e=void 0){super(t,e)}onSuccessfulParsed(t){this.get().onSuccessfulParsed(t)}}e.NamedRule=r},1440:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Optional=void 0;const n=i(3349),r=i(5466),s=i(2671);class o extends r.Rule{constructor(t,e){super("optional",t,e),this.setEvaluator(n.Evaluator.ALL_CHILDREN_EVALUATOR)}getEntry(){return this.children[0]}createBNF(t){const e=r.Rule.addProduction(t,this,this.tgt,this.children[0]);r.Rule.addProduction(t,this,this.tgt);const i=this;e.onExtension(((t,...e)=>{let n=e[0];n.setNthEntryInParent(0),n.setName(i.getNameForChild(0))})),e.setAstBuilder(s.AstBuilder.DEFAULT)}}e.Optional=o},2597:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Or=void 0;const n=i(2671),r=i(3349),s=i(5466);class o extends s.Rule{constructor(t,...e){super("or",t,...e),this.setEvaluator(r.Evaluator.FIRST_CHILD_EVALUATOR)}createBNF(t){for(let e=0;e<this.children.length;e++){const i=e,r=this.children[e],o=s.Rule.addProduction(t,this,this.tgt,r),l=this;o.onExtension(((t,...e)=>{let n=e[0];n.setNthEntryInParent(i),n.setName(l.getNameForChild(i))})),o.setAstBuilder(n.AstBuilder.DEFAULT)}}}e.Or=o},6877:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0})},7196:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Plus=void 0;const n=i(3349),r=i(5466);class s extends r.Rule{constructor(t,e){super("plus",t,e),this.setEvaluator(n.Evaluator.ALL_CHILDREN_EVALUATOR)}getEntry(){return this.children[0]}createBNF(t){const e=r.Rule.addProduction(t,this,this.tgt,this.children[0],this.tgt),i=r.Rule.addProduction(t,this,this.tgt,this.children[0]),n=this;e.onExtension(((t,...e)=>{let i=t.getNthEntryInParent(),r=e[0],s=e[1];r.setNthEntryInParent(i),r.setName(n.getNameForChild(i)),s.setNthEntryInParent(i+1),s.setName(t.getName())})),i.onExtension(((t,...e)=>{let i=t.getNthEntryInParent(),r=e[0];r.setNthEntryInParent(i),r.setName(n.getNameForChild(i))})),e.setAstBuilder(((t,...e)=>{t.addChildren(e[0]),t.addChildren(...e[1].getChildren())})),i.setAstBuilder(((t,...e)=>{t.addChildren(e[0])}))}}e.Plus=s},7667:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Repeat=void 0;const n=i(2671),r=i(3349),s=i(5466);class o extends s.Rule{constructor(t,e,i,n){super("repeat",t,e),this.from=i,this.to=n,this.setEvaluator(r.Evaluator.ALL_CHILDREN_EVALUATOR)}getFrom(){return this.from}getTo(){return this.to}getEntry(){return this.children[0]}createBNF(t){for(let e=this.to;e>=this.from;e--){const i=[];for(let t=0;t<e;t++)i[t]=this.children[0];const r=s.Rule.addProduction(t,this,this.tgt,...i),o=this;r.onExtension(((t,...e)=>{for(let t=0;t<e.length;t++){let i=e[t];i.setNthEntryInParent(t),i.setName(o.getNameForChild(t))}})),r.setAstBuilder(n.AstBuilder.DEFAULT)}}}e.Repeat=o},5466:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Rule=void 0;const n=i(2545),r=i(1872),s=i(6353);e.Rule=class{constructor(t,e,...i){this.type=t,this.tgt=void 0!==e?e:new n.NonTerminal(t+":"+n.NonTerminal.makeRandomSymbol()),this.children=i}withName(t=void 0){return new s.NamedRule(this,t)}getTarget(){return this.tgt}getRepresentedSymbol(){return this.tgt}getChildren(){return this.children}getEvaluator(){return this.evaluator}setEvaluator(t){return this.evaluator=t,this}getAutocompleter(){return this.autocompleter}setAutocompleter(t){return this.autocompleter=t,this}onSuccessfulParsed(t){return this._onSuccessfulParsed=t,this}getOnSuccessfulParsed(){return this._onSuccessfulParsed}static addProduction(t,e,i,...n){let s=new r.EBNFProduction(e,i,...n);return t.addProduction(s),s}getNameForChild(t){if(void 0!==this.parsedChildNames)return 1==this.parsedChildNames.length?this.parsedChildNames[0]:t>=this.parsedChildNames.length?"no name":this.parsedChildNames[t]}setParsedChildNames(...t){this.parsedChildNames=t}}},1449:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Sequence=void 0;const n=i(2671),r=i(5466);class s extends r.Rule{constructor(t,...e){super("sequence",t,...e)}createBNF(t){const e=r.Rule.addProduction(t,this,this.tgt,...this.children),i=this;e.onExtension(((t,...e)=>{for(let t=0;t<e.length;t++){let n=e[t];n.setNthEntryInParent(t),n.setName(i.getNameForChild(t))}})),e.setAstBuilder(n.AstBuilder.DEFAULT)}}e.Sequence=s},8872:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Star=void 0;const n=i(3349),r=i(5466);class s extends r.Rule{constructor(t,e){super("star",t,e),this.setEvaluator(n.Evaluator.ALL_CHILDREN_EVALUATOR)}getEntry(){return this.children[0]}createBNF(t){const e=r.Rule.addProduction(t,this,this.tgt,this.children[0],this.tgt);r.Rule.addProduction(t,this,this.tgt);const i=this;e.onExtension(((t,...e)=>{let n=t.getNthEntryInParent(),r=e[0],s=e[1];r.setNthEntryInParent(n),r.setName(i.getNameForChild(n)),s.setNthEntryInParent(n+1),s.setName(t.getName())})),e.setAstBuilder(((t,...e)=>{t.addChildren(e[0]),t.addChildren(...e[1].getChildren())}))}}e.Star=s},6322:function(t,e,i){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i);var r=Object.getOwnPropertyDescriptor(e,i);r&&!("get"in r?!e.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,n,r)}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),r=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),r(i(995),e),r(i(3460),e),r(i(5310),e),r(i(3156),e),r(i(1872),e),r(i(5152),e),r(i(6353),e),r(i(1440),e),r(i(1440),e),r(i(2597),e),r(i(6877),e),r(i(7196),e),r(i(7667),e),r(i(5466),e),r(i(1449),e),r(i(8872),e)},8156:function(t,e,i){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i);var r=Object.getOwnPropertyDescriptor(e,i);r&&!("get"in r?!e.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,n,r)}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),r=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),i(7649),r(i(6894),e),r(i(6322),e),r(i(2857),e),r(i(6649),e),r(i(6427),e),r(i(6970),e),r(i(3349),e),r(i(9991),e),r(i(7649),e),r(i(738),e)},9928:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Interpolator=void 0,e.Interpolator=class{constructor(t,e,i,n){this.getter=t,this.setter=e,this.vTo=i,this.nCycles=n}initialize(){this.vFrom=this.getter()}interpolate(t){0===t&&this.initialize();const e=this.vFrom+(t+1)*(this.vTo-this.vFrom)/this.nCycles;this.setter(t,e)}}},7746:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.LanguageControl=void 0,e.makeMicroscopeParser=function(){let t=new n.Parser;const e=[],i=[];return t.addParseStartListener((()=>{e.length=0,i.length=0})),t.defineType("led","385nm",(t=>385)),t.defineType("led","470nm",(t=>470)),t.defineType("led","567nm",(t=>567)),t.defineType("led","625nm",(t=>625)),t.defineType("led-power","{<led-power>:int}%",(t=>t.evaluate("<led-power>")),!0),t.defineType("exposure-time","{<exposure-time>:int}ms",(t=>t.evaluate("<exposure-time>")),!0),t.defineType("led-setting","{led-power:led-power} at {wavelength:led}",(t=>{const e=t.evaluate("led-power");return{led:t.evaluate("wavelength"),power:e}}),!0),t.defineType("another-led-setting",", {led-setting:led-setting}",(t=>t.evaluate("led-setting")),!0),t.defineType("channel-name","'{<name>:[A-Za-z0-9]:+}'",(t=>t.getParsedString("<name>")),!0),t.defineSentence("Define channel {channel-name:channel-name}:{\n  }excite with {led-setting:led-setting}{another-led-setting:another-led-setting:0-3}{\n  }use an exposure time of {exposure-time:exposure-time}.",void 0).onSuccessfulParsed((t=>{e.push(t.getParsedString("channel-name"))})),t.defineType("region-name","'{<region-name>:[a-zA-Z0-9]:+}'",void 0,!0),t.defineType("region-dimensions","{<width>:float} x {<height>:float} x {<depth>:float} microns",void 0,!0),t.defineType("region-center","{<center>:tuple<float,x,y,z>} microns",void 0,!0),t.defineType("sentence","Define a position {region-name:region-name}:{\n  }{region-dimensions:region-dimensions}{\n  }centered at {region-center:region-center}.",void 0).onSuccessfulParsed((t=>{i.push(t.getParsedString("region-name"))})),t.defineType("defined-channels","'{channel:[A-Za-z0-9]:+}'",(t=>{}),{getAutocompletion:t=>l.Autocompletion.literal(t,e)}),t.defineType("defined-positions","'{position:[A-Za-z0-9]:+}'",(t=>t.getParsedString("position")),{getAutocompletion:t=>l.Autocompletion.literal(t,i)}),t.defineType("time-unit","second(s)",(t=>1)),t.defineType("time-unit","minute(s)",(t=>60)),t.defineType("time-unit","hour(s)",(t=>3600)),t.defineType("time-interval","{n:float} {time-unit:time-unit}",(t=>{const e=t.evaluate("n"),i=t.evaluate("time-unit");return Math.round(e*i)}),!0),t.defineType("repetition","once",(t=>[1,0])),t.defineType("repetition","every {interval:time-interval} for {duration:time-interval}",(t=>[t.evaluate("interval"),t.evaluate("duration")]),!0),t.defineType("z-distance","{z-distance:float} microns",void 0,!0),t.defineType("lens","5x lens",void 0),t.defineType("lens","20x lens",void 0),t.defineType("mag","0.5x magnification changer",void 0),t.defineType("mag","1.0x magnification changer",void 0),t.defineType("mag","2.0x magnification changer",void 0),t.defineType("binning","1 x 1",(t=>1)),t.defineType("binning","2 x 2",(t=>2)),t.defineType("binning","4 x 4",(t=>4)),t.defineType("binning","8 x 8",(t=>8)),t.defineType("temperature","{temperature:float}°C",void 0,!0),t.defineType("co2-concentration","{CO2 concentration:float}%",void 0,!0),t.defineType("incubation","set the temperature to {temperature:temperature}",void 0),t.defineType("incubation","set the CO2 concentration to {co2-concentration:co2-concentration}",void 0),t.defineType("acquisition","acquire...{\n  }every {interval:time-interval} for {duration:time-interval}{\n  }position(s) {positions:list<defined-positions>}{\n  }channel(s) {channels:list<defined-channels>}{\n  }with a plane distance of {dz:z-distance}{\n  }using the {lens:lens} with the {magnification:mag} and a binning of {binning:binning}",void 0),t.defineType("start","At the beginning",void 0),t.defineType("start","At {time:time}",void 0,!0),t.defineType("start","After {delay:time-interval}",void 0,!0),t.defineSentence("{start:start}, {acquisition:acquisition}.",void 0),t.defineSentence("{start:start}, {incubation:incubation}.",void 0),t};const n=i(7649),r=i(4085),s=i(5174),o=i(9928),l=i(2785);e.LanguageControl=class{constructor(t=void 0){this.timeline=new s.Timeline,this.microscope=void 0!==t?t:new r.Microscope}reset(){this.globalStart=new Date,this.timeline.clear(),this.microscope.reset()}getTimeline(){return this.timeline}getMicroscope(){return this.microscope}initParser(){const t=[],e=[];let i=new n.Parser;return i.addParseStartListener((()=>{t.length=0,e.length=0})),i.defineType("led","385nm",(t=>r.LED.LED_385)),i.defineType("led","470nm",(t=>r.LED.LED_470)),i.defineType("led","567nm",(t=>r.LED.LED_567)),i.defineType("led","625nm",(t=>r.LED.LED_625)),i.defineType("led-power","{<led-power>:int}%",(t=>t.evaluate("<led-power>")),!0),i.defineType("exposure-time","{<exposure-time>:int}ms",(t=>t.evaluate("<exposure-time>")),!0),i.defineType("led-setting","{led-power:led-power} at {wavelength:led}",(t=>{const e=t.evaluate("led-power"),i=t.evaluate("wavelength");return new r.LEDSetting(i,e)}),!0),i.defineType("another-led-setting",", {led-setting:led-setting}",(t=>t.evaluate("led-setting")),!0),i.defineType("channel-name","'{<name>:[A-Za-z0-9]:+}'",(t=>t.getParsedString("<name>")),!0),i.defineSentence("Define channel {channel-name:channel-name}:{\n  }excite with {led-setting:led-setting}{another-led-setting:another-led-setting:0-3}{\n  }use an exposure time of {exposure-time:exposure-time}.",(t=>{const e=t.evaluate("channel-name"),i=t.evaluate("led-setting"),n=t.evaluate("another-led-setting"),s=t.evaluate("exposure-time"),o=new r.Channel(e,i,n,s);this.microscope.addChannel(o)})).onSuccessfulParsed((e=>{t.push(e.getParsedString("channel-name"))})),i.defineType("region-name","'{<region-name>:[a-zA-Z0-9]:+}'",(t=>t.getParsedString("<region-name>")),!0),i.defineType("region-dimensions","{<width>:float} x {<height>:float} x {<depth>:float} microns",(t=>[t.evaluate("<width>"),t.evaluate("<height>"),t.evaluate("<depth>")]),!0),i.defineType("region-center","{<center>:tuple<float,x,y,z>} microns",(t=>t.evaluate("<center>")),!0),i.defineSentence("Define a position {region-name:region-name}:{\n  }{region-dimensions:region-dimensions}{\n  }centered at {region-center:region-center}.",(t=>{const e=t.evaluate("region-name"),i=t.evaluate("region-dimensions"),n=t.evaluate("region-center");this.microscope.addPosition(new r.Position(e,n,i))})).onSuccessfulParsed((t=>{e.push(t.getParsedString("region-name"))})),i.defineType("defined-channels","'{channel:[A-Za-z0-9]:+}'",(t=>t.getParsedString("channel")),{getAutocompletion:e=>l.Autocompletion.literal(e,t)}),i.defineType("defined-positions","'{position:[A-Za-z0-9]:+}'",(t=>t.getParsedString("position")),{getAutocompletion:t=>l.Autocompletion.literal(t,e)}),i.defineType("time-unit","second(s)",(t=>1)),i.defineType("time-unit","minute(s)",(t=>60)),i.defineType("time-unit","hour(s)",(t=>3600)),i.defineType("time-interval","{n:float} {time-unit:time-unit}",(t=>{const e=t.evaluate("n"),i=t.evaluate("time-unit");return Math.round(e*i)}),!0),i.defineType("repetition","once",(t=>[1,0])),i.defineType("repetition","every {interval:time-interval} for {duration:time-interval}",(t=>[t.evaluate("interval"),t.evaluate("duration")]),!0),i.defineType("z-distance","{z-distance:float} microns",(t=>t.evaluate("z-distance")),!0),i.defineType("lens","5x lens",(t=>r.Lens.FIVE)),i.defineType("lens","20x lens",(t=>r.Lens.TWENTY)),i.defineType("mag","0.5x magnification changer",(t=>r.MagnificationChanger.ZERO_FIVE)),i.defineType("mag","1.0x magnification changer",(t=>r.MagnificationChanger.ONE_ZERO)),i.defineType("mag","2.0x magnification changer",(t=>r.MagnificationChanger.TWO_ZERO)),i.defineType("binning","1 x 1",(t=>r.Binning.ONE)),i.defineType("binning","2 x 2",(t=>r.Binning.TWO)),i.defineType("binning","3 x 3",(t=>r.Binning.THREE)),i.defineType("binning","4 x 4",(t=>r.Binning.FOUR)),i.defineType("binning","5 x 5",(t=>r.Binning.FIVE)),i.defineType("start","At the beginning",(t=>this.globalStart)),i.defineType("start","At {time:time}",(t=>t.evaluate("time")),!0),i.defineType("start","After {delay:time-interval}",(t=>{const e=t.evaluate("delay"),i=new Date(this.globalStart);return i.setSeconds(i.getSeconds()+e),i}),!0),i.defineType("position-list","all positions",(t=>[r.ALL_POSITIONS])),i.defineType("position-list","position(s) {positions:list<defined-positions>}",(t=>t.evaluate("positions"))),i.defineType("channel-list","all channels",(t=>[r.ALL_CHANNELS])),i.defineType("channel-list","channel(s) {channels:list<defined-channels>}",(t=>t.evaluate("channels"))),i.defineSentence("{start:start}{, }acquire...{\n  }{repetition:repetition}{\n  }{position-list:position-list}{\n  }{channel-list:channel-list}{\n  }with a plane distance of {dz:z-distance}{\n  }using the {lens:lens} with the {magnification:mag} and a binning of {binning:binning}.",(t=>{t.evaluate("start");const e=t.evaluate("repetition"),i=e[0],n=e[1],r=t.evaluate("position-list"),s=t.evaluate("channel-list"),o=t.evaluate("lens"),l=t.evaluate("magnification"),a=t.evaluate("binning"),h=t.evaluate("dz"),c=new Date;c.setHours(this.globalStart.getHours()),c.setMinutes(this.globalStart.getMinutes()),c.setSeconds(this.globalStart.getSeconds()),c.setMilliseconds(this.globalStart.getMilliseconds()),this.globalStart.getTime()>c.getTime()&&c.setDate(c.getDate()+1);const u=n<i?1:Math.floor(n/i)+1;for(let t=0;t<u;t++){const e=new Date(c);e.setSeconds(c.getSeconds()+t*i),this.timeline.put(e,(()=>{this.microscope.setLens(o),this.microscope.setMagnificationChanger(l),this.microscope.setBinning(a),this.microscope.acquire(r,s,h)}))}})),i.defineSentence("{start:start}{, }adjust...{\n  }{repetition:repetition}{\n  }the power of the {led:led} led of channel {channel:defined-channels} to {power:led-power}.",(t=>{t.evaluate("start");const e=t.evaluate("repetition"),i=e[0],n=e[1],r=t.evaluate("led"),s=t.evaluate("channel"),l=t.evaluate("power"),a=new Date;a.setHours(this.globalStart.getHours()),a.setMinutes(this.globalStart.getMinutes()),a.setSeconds(this.globalStart.getSeconds()),a.setMilliseconds(this.globalStart.getMilliseconds()),this.globalStart.getTime()>a.getTime()&&a.setDate(a.getDate()+1);const h=n<i?1:Math.floor(n/i)+1,c=new o.Interpolator((()=>{var t,e;return null===(e=null===(t=this.microscope.getChannel(s))||void 0===t?void 0:t.getLEDSetting(r))||void 0===e?void 0:e.getIntensity()}),((t,e)=>{var i,n;return null===(n=null===(i=this.microscope.getChannel(s))||void 0===i?void 0:i.getLEDSetting(r))||void 0===n?void 0:n.setIntensity(Math.round(e))}),l,h);for(let t=0;t<h;t++){const e=t,n=new Date(a);n.setSeconds(a.getSeconds()+t*i),this.timeline.put(n,(()=>c.interpolate(e)))}})),i.defineSentence("{start:start}{, }adjust...{\n  }{repetition:repetition}{\n  }the exposure time of channel {channel:defined-channels} to {exposure-time:exposure-time}.",(t=>{t.evaluate("start");const e=t.evaluate("repetition"),i=e[0],n=e[1],r=t.evaluate("channel"),s=t.evaluate("exposure-time"),l=new Date;l.setHours(this.globalStart.getHours()),l.setMinutes(this.globalStart.getMinutes()),l.setSeconds(this.globalStart.getSeconds()),l.setMilliseconds(this.globalStart.getMilliseconds()),this.globalStart.getTime()>l.getTime()&&l.setDate(l.getDate()+1);const a=n<i?1:Math.floor(n/i)+1,h=new o.Interpolator((()=>{var t;return null===(t=this.microscope.getChannel(r))||void 0===t?void 0:t.getExposureTime()}),((t,e)=>{var i;return null===(i=this.microscope.getChannel(r))||void 0===i?void 0:i.setExposureTime(Math.round(e))}),s,a);for(let t=0;t<a;t++){const e=t,n=new Date(l);n.setSeconds(l.getSeconds()+t*i),this.timeline.put(n,(()=>h.interpolate(e)))}})),i.defineType("temperature","{temperature:float}°C",(t=>t.evaluate("temperature")),!0),i.defineType("co2-concentration","{CO2 concentration:float}%",(t=>t.evaluate("CO2 concentration")),!0),i.defineSentence("{start:start}{, }adjust...{\n  }{repetition:repetition}{\n  }the CO2 concentration to {co2-concentration:co2-concentration}.",(t=>{t.evaluate("start");const e=t.evaluate("repetition"),i=e[0],n=e[1],r=t.evaluate("co2-concentration"),s=new Date;s.setHours(this.globalStart.getHours()),s.setMinutes(this.globalStart.getMinutes()),s.setSeconds(this.globalStart.getSeconds()),s.setMilliseconds(this.globalStart.getMilliseconds()),this.globalStart.getTime()>s.getTime()&&s.setDate(s.getDate()+1);const l=n<i?1:Math.floor(n/i)+1,a=new o.Interpolator((()=>this.microscope.getCO2Concentration()),((t,e)=>this.microscope.setCO2Concentration(e)),r,l);for(let t=0;t<l;t++){const e=t,n=new Date(s);n.setSeconds(s.getSeconds()+t*i),this.timeline.put(n,(()=>a.interpolate(e)))}})),i.defineSentence("{start:start}{, }adjust...{\n  }{repetition:repetition}{\n  }the temperature to {temperature:temperature}.",(t=>{t.evaluate("start");const e=t.evaluate("repetition"),i=e[0],n=e[1],r=t.evaluate("temperature"),s=new Date;s.setHours(this.globalStart.getHours()),s.setMinutes(this.globalStart.getMinutes()),s.setSeconds(this.globalStart.getSeconds()),s.setMilliseconds(this.globalStart.getMilliseconds()),this.globalStart.getTime()>s.getTime()&&s.setDate(s.getDate()+1);const l=n<i?1:Math.floor(n/i)+1,a=new o.Interpolator((()=>this.microscope.getTemperature()),((t,e)=>this.microscope.setTemperature(e)),r,l);for(let t=0;t<l;t++){const e=t,n=new Date(s);n.setSeconds(s.getSeconds()+t*i),this.timeline.put(n,(()=>a.interpolate(e)))}})),i}}},4085:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Microscope=e.ALL_POSITIONS=e.ALL_CHANNELS=e.Position=e.Tuple3D=e.Binning=e.MAGNIFICATION_CHANGES=e.MagnificationChanger=e.LENSES=e.Lens=e.Channel=e.LEDSetting=e.LEDs=e.LED=void 0;class i{constructor(t){this.WAVELENGTH=t}}e.LED=i,i.LED_385=new i(385),i.LED_470=new i(470),i.LED_567=new i(567),i.LED_625=new i(625),e.LEDs=[i.LED_385,i.LED_470,i.LED_567,i.LED_625],e.LEDSetting=class{constructor(t,e){this.led=t,this.intensity=e}setIntensity(t){this.intensity=t}getIntensity(){return this.intensity}},e.Channel=class{constructor(t,e,i,n){this.name=t,this.ledSettings=[e],this.ledSettings.push(...i),this.exposureTime=n}getLEDSetting(t){return this.ledSettings.find((e=>e.led.WAVELENGTH===t.WAVELENGTH))}getExposureTime(){return this.exposureTime}setExposureTime(t){this.exposureTime=t}};class n{constructor(t,e){this.magnification=t,this.label=e}toString(){return this.label}}e.Lens=n,n.FIVE=new n(5,"5x"),n.TWENTY=new n(20,"20x"),e.LENSES=[n.FIVE,n.TWENTY];class r{constructor(t,e){this.magnification=t,this.label=e}toString(){return this.label}}e.MagnificationChanger=r,r.ZERO_FIVE=new r(.5,"0.5x"),r.ONE_ZERO=new r(1,"1.0x"),r.TWO_ZERO=new r(2,"2.0x"),e.MAGNIFICATION_CHANGES=[r.ZERO_FIVE,r.ONE_ZERO,r.TWO_ZERO];class s{constructor(t,e){this.binning=t,this.label=e}toString(){return this.label}}e.Binning=s,s.ONE=new s(1,"1x1"),s.TWO=new s(2,"2x2"),s.THREE=new s(3,"3x3"),s.FOUR=new s(4,"4x4"),s.FIVE=new s(5,"5x5");class o{constructor(t){this.x=t[0],this.y=t[1],this.z=t[2]}toString(){return"("+this.x+", "+this.y+", "+this.z+")"}}e.Tuple3D=o,e.Position=class{constructor(t,e,i){this.name=t,this.center=new o(e),this.extent=new o(i)}toString(){return this.name+" "+this.center.toString()}};class l{constructor(){this.temperature=20,this.co2Concentration=0}setTemperature(t){this.temperature=t}setCO2Concentration(t){this.co2Concentration=t}reset(){this.temperature=20,this.co2Concentration=0}}e.ALL_CHANNELS="ALL_CHANNELS",e.ALL_POSITIONS="ALL_POSITIONS",e.Microscope=class{constructor(){this.channels=[],this.positions=[],this.lens=n.FIVE,this.magnificationChanger=r.ONE_ZERO,this.binning=s.ONE,this.incubation=new l,this.onAcquire=this.acquireSinglePositionAndChannel}reset(){this.channels.length=0,this.positions.length=0,this.lens=n.FIVE,this.magnificationChanger=r.ONE_ZERO,this.binning=s.ONE,this.incubation.reset()}setOnAcquire(t){this.onAcquire=t}addChannel(t){this.channels.push(t)}getChannel(t){return this.channels.find((e=>e.name===t))}clearChannels(){this.channels.length=0}addPosition(t){this.positions.push(t)}getPosition(t){return this.positions.find((e=>e.name===t))}clearPositions(){this.positions.length=0}getTemperature(){return this.incubation.temperature}setTemperature(t){this.incubation.setTemperature(t)}getCO2Concentration(){return this.incubation.co2Concentration}setCO2Concentration(t){this.incubation.setCO2Concentration(t)}getLens(){return this.lens}setLens(t){this.lens=t}getMagnificationChanger(){return this.magnificationChanger}setMagnificationChanger(t){this.magnificationChanger=t}setBinning(t){this.binning=t}acquire(t,i,n){const r=i.length>0&&i[0]===e.ALL_CHANNELS?this.channels:i.map((t=>this.getChannel(t))),s=t.length>0&&t[0]===e.ALL_POSITIONS?this.positions:t.map((t=>this.getPosition(t)));this.acquirePositionsAndChannels(s,r,n)}acquirePositionsAndChannels(t,e,i){for(const i of t)for(const t of e)this.onAcquire(i,t)}acquireSinglePositionAndChannel(t,i){const n=(new Date).toLocaleString("en-us",{year:"numeric",month:"short",day:"numeric",hour12:!1,hour:"numeric",minute:"numeric",second:"numeric"});console.log(n),console.log("======================"),console.log("Stage position: "+t.name),console.log("  - "+t.center.toString()),console.log(),console.log("Channel settings: "+i.name),console.log("  - Exposure time: "+i.getExposureTime()+"ms");for(const t of e.LEDs){const e=i.getLEDSetting(t);void 0!==e&&console.log("  - LED "+t.WAVELENGTH+": "+e.getIntensity()+"%")}console.log(),console.log("Optics:"),console.log("  - Lens: "+this.lens),console.log("  - Mag.Changer: "+this.magnificationChanger),console.log("  - Binning: "+this.binning),console.log(),console.log("Incubation:"),console.log("  - Temperature: "+this.getTemperature()+"C"),console.log("  - CO2 concentration: "+this.getCO2Concentration()+"%"),console.log(),console.log("Acquire stack"),console.log(),console.log()}}},5174:function(t,e){"use strict";var i=this&&this.__awaiter||function(t,e,i,n){return new(i||(i=Promise))((function(r,s){function o(t){try{a(n.next(t))}catch(t){s(t)}}function l(t){try{a(n.throw(t))}catch(t){s(t)}}function a(t){var e;t.done?r(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,l)}a((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.Timeline=void 0,e.Timeline=class{constructor(){this.timeline=[],this.stop=!1,this.executor=null}put(t,e){this.timeline.push([t,[e]]),this.timeline.sort(((t,e)=>t[0].getTime()-e[0].getTime()))}runAndRemoveEntriesBefore(t,e){const i=[];for(let n=0;n<this.timeline.length;n++){const[r,s]=this.timeline[n];if(!(r<t))break;i.push(r);for(const t of s)e(t)}for(const t of i){const e=this.timeline.findIndex((([e])=>e===t));-1!==e&&this.timeline.splice(e,1)}}process(t){return i(this,void 0,void 0,(function*(){this.stop=!1,this.executor=new Promise((e=>i(this,void 0,void 0,(function*(){for(;!this.stop&&this.timeline.length>0;){if(this.runAndRemoveEntriesBefore(new Date,t),0===this.timeline.length)return void e();yield new Promise((t=>setTimeout(t,1e3)))}e()})))),yield this.executor}))}waitForProcessing(){return i(this,void 0,void 0,(function*(){this.executor&&(yield this.executor)}))}cancel(){this.stop=!0}clear(){this.timeline=[]}toString(){let t="";for(const[e,i]of this.timeline)t+=e+" -> "+i;return t}}},6649:function(t,e,i){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i);var r=Object.getOwnPropertyDescriptor(e,i);r&&!("get"in r?!e.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,n,r)}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),r=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),r(i(7746),e),r(i(4085),e),r(i(5174),e),r(i(9928),e)},1456:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ACCompleter=void 0;const n=i(2785),r=i(591);function s(t,e){let i=t.apply?t.apply:t.label;const n=document.createElement("span");return n.innerHTML=i,t.label="",n}e.ACCompleter=class{constructor(t){this.completions=[],this.view=t,this.autocompletionExtension=(0,r.autocompletion)({activateOnTyping:!1,defaultKeymap:!1,interactionDelay:0,closeOnBlur:!1,override:[t=>this.getCompletions(t)],addToOptions:[{render:s,position:0}]})}selectNext(){(0,r.moveCompletionSelection)(!0)(this.view)}selectPrevious(){(0,r.moveCompletionSelection)(!1)(this.view)}setCompletions(t){this.completions=t}getSelected(){const t=(0,r.selectedCompletion)(this.view.state);if(null===t)return;const e=(0,r.currentCompletions)(this.view.state).indexOf(t);return e<0||null===t?void 0:this.completions[e]}completionPrefix(){return this.completions[0].getAlreadyEntered()}hidePopup(){(0,r.closeCompletion)(this.view)}complete(){(0,r.startCompletion)(this.view)}isActive(){return null!==(0,r.completionStatus)(this.view.state)&&(0,r.currentCompletions)(this.view.state).length>1}getCompletions(t){let e;const i=this.completions.map((t=>{void 0===e&&(e=t.getAlreadyEntered().length);let i=t.getCompletion(n.Autocompletion.Purpose.FOR_MENU),r=i;return i=i.replaceAll("${","<b>").replaceAll("}","</b>"),(i.startsWith("\n")||i.startsWith("\r"))&&(i="&lt;new line&gt;"),""===i&&(i="&lt;empty&gt;"),{label:r,apply:i}}));return void 0===e&&(e=0),{from:t.pos-e,filter:!1,options:i}}}},7650:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ACEditor=void 0;const n=i(70),r=i(7720),s=i(8473),o=i(9064),l=i(2785),a=i(1456),h=i(738),c=i(2545),u=i(1506),d=i(9064),f=i(2533),p=i(9277),m=i(8539),g=i(591),v=i(4126),w=[(0,u.lineNumbers)(),(0,u.highlightActiveLineGutter)(),(0,u.highlightSpecialChars)(),(0,p.history)(),(0,f.foldGutter)(),(0,u.drawSelection)(),(0,u.dropCursor)(),d.EditorState.allowMultipleSelections.of(!0),(0,f.indentOnInput)(),(0,f.syntaxHighlighting)(f.defaultHighlightStyle,{fallback:!0}),(0,f.bracketMatching)(),(0,g.closeBrackets)(),(0,g.autocompletion)(),(0,u.rectangularSelection)(),(0,u.crosshairCursor)(),(0,u.highlightActiveLine)(),u.keymap.of([...g.closeBracketsKeymap,...p.defaultKeymap,...m.searchKeymap,...p.historyKeymap,...f.foldKeymap,...g.completionKeymap,...v.lintKeymap])];e.ACEditor=class{constructor(t,e){this.parameterizedCompletion=void 0,this.errorHighlight=void 0,this.onRun=()=>this.run(),this.beforeRun=()=>{},this.afterRun=()=>{},this.parser=t;const i=this,l=this.createEditorElement(e);this.outputElement=this.createOutputElement(e),this.createButton(e).onclick=()=>i.onRun(),this.editor=new n.EditorView({extensions:[],parent:l}),this.errorHighlight=new s.ErrorHighlight(this.editor),this.completer=new a.ACCompleter(this.editor),this.editor.dispatch({effects:o.StateEffect.reconfigure.of([n.EditorView.domEventHandlers({keydown:(t,e)=>i.handleKeyEvent(t,e)}),this.completer.autocompletionExtension,w,n.EditorView.lineWrapping,r.highlight_extension,s.error_highlight_extension])})}getSelectedLinesStart(){const t=this.editor.state.selection.main.from;return this.editor.state.doc.lineAt(t).from}getSelectedLinesEnd(){const t=this.editor.state.selection.main.to;return this.editor.state.doc.lineAt(t).to}getSelectedLines(){const t=this.getSelectedLinesStart(),e=this.getSelectedLinesEnd();return this.editor.state.sliceDoc(t,e)}setOnRun(t){this.onRun=t}setBeforeRun(t){this.beforeRun=t}setAfterRun(t){this.afterRun=t}createEditorElement(t){const e=document.createElement("div");return e.id="nls-editor",e.setAttribute("style","width: 100%; height: 300px; margin-bottom: 3px; border: 1px solid gray; flex-grow: 3; overflow: auto;"),t.appendChild(e),e}createOutputElement(t){const e=document.createElement("textarea");return e.id="nls-output",e.setAttribute("style","width: 100%; height: 100px; margin-top: 3px; border: 1px solid gray; flex-grow: 2; padding: 0px; resize: none; overflow: auto;"),e.setAttribute("readonly","true"),t.appendChild(e),e}createButton(t){const e=document.createElement("button");return e.id="nls-run",e.setAttribute("style","margin-top: 10px; margin-left: auto; margin-right: auto; display: block; margin-bottom: 10px;"),e.setAttribute("type","button"),e.innerText="Run",t.appendChild(e),e}run(t=!1){console.debug("running"),this.outputElement.textContent="";const e=this.editor.state.doc.toString();try{this.beforeRun();const i=t?this.getSelectedLines():e;this.parser.parse(i).evaluate(),this.afterRun()}catch(t){t instanceof Error?this.outputElement.textContent=t.message:this.outputElement.textContent=t.toString(),(console.error||console.log).call(console,t.stack||t)}}insertCompletion(t){if(!t)return;const e=this.editor.state.selection,i=e.main.head,n=this.editor.state.doc.toString(),s=i===n.length||0==n.substring(i).trim().length;e.main.empty&&this.editor.dispatch({selection:{anchor:i,head:i-this.completer.completionPrefix().length}});const o=t.getCompletion(l.Autocompletion.Purpose.FOR_INSERTION);o.indexOf("${")>=0?(this.cancelParameterizedCompletion(),this.parameterizedCompletion=new r.ParameterizedCompletion(this.editor),this.parameterizedCompletion.setParameterChangeListener(((t,e)=>this.parameterChanged(t,e))),this.parameterizedCompletion.replaceSelection(t)):(this.editor.dispatch(this.editor.state.replaceSelection(o)),this.completer.hidePopup(),s&&setTimeout((()=>this.autocomplete())))}parameterChanged(t,e){e?(this.cancelParameterizedCompletion(),this.autocomplete()):this.autocomplete(!1)}cancelParameterizedCompletion(){void 0!==this.parameterizedCompletion&&this.parameterizedCompletion.cancel(),this.parameterizedCompletion=void 0}handleKeyEvent(t,e){if(console.log("keydown",t.key,t),this.completer.isActive()){if("Enter"===t.key)return this.insertCompletion(this.completer.getSelected()),!0;if("ArrowUp"===t.key)return this.completer.selectPrevious(),!0;if("ArrowDown"===t.key)return this.completer.selectNext(),!0;if("Escape"===t.key)return this.completer.hidePopup(),!0;if("Tab"===t.key)return this.completer.hidePopup(),!0}else if(" "===t.key&&t.ctrlKey)return this.autocomplete(),!0;if(this.parameterizedCompletion){if("Escape"===t.key)return this.cancelParameterizedCompletion(),!0;if(this.parameterizedCompletion.handleKeyEvent(t),t.defaultPrevented)return!0}return!(1!==t.key.length||t.ctrlKey||t.metaKey||t.altKey||(e.dispatch(e.state.replaceSelection(t.key)),this.autocomplete(),0))}autocomplete(t=!0){var e,i;const n=this.editor.state.doc.toString(),s=this.editor.state.selection.main.anchor,o=n.substring(0,s);null===(e=this.errorHighlight)||void 0===e||e.clearError();const a=[];let u;try{u=this.parser.parse(o,a),console.log(u.getMatcher().state)}catch(t){if(t instanceof h.ParseException){const e=t.getFirstAutocompletingAncestorThatFailed().getMatcher();return void(null===(i=this.errorHighlight)||void 0===i||i.setError(e.pos,e.pos+e.parsed.length))}throw t}const d=this.parser.getTargetGrammar().getBNF();if(void 0!==this.parameterizedCompletion)if(a.length>0){let t=!1;for(let e of a){let i=e.forSymbol;if(e instanceof l.Autocompletion.EntireSequence){let t=[];r.ParameterizedCompletion.parseParameters(e,t,0),e=t[0].autocompletion,i=e.forSymbol}if(i.equals(this.parameterizedCompletion.getForAutocompletion().forSymbol)){t=!0;break}const n=this.parameterizedCompletion.getCurrentParameter();console.log("current param: "+(null==n?void 0:n.toString()));const s=null==n?void 0:n.autocompletion.forSymbol;if(i.equals(s)){t=!0;break}if(s instanceof c.NonTerminal&&s.uses(i,d)){t=!0;break}}if(!t)return void this.parameterizedCompletion.next()}else console.log("no completions");else console.log("parameterized completion == null");1===a.length?(t||g.autocompletion instanceof l.Autocompletion.Literal)&&(this.completer.setCompletions(a),this.insertCompletion(a[0]),this.completer.hidePopup()):a.length>1?(this.completer.setCompletions(a),this.completer.complete()):this.completer.hidePopup()}}},8473:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ErrorHighlight=e.error_highlight_extension=void 0;const n=i(9064),r=i(1506),s=i(70),o=n.StateEffect.define(),l=n.StateEffect.define();e.error_highlight_extension=n.StateField.define({create:()=>r.Decoration.none,update(t,e){t=t.map(e.changes);for(let i of e.effects)i.is(o)?t=t.update({add:i.value,sort:!0}):i.is(l)&&(t=t.update({filter:i.value}));return t},provide:t=>s.EditorView.decorations.from(t)});const a=r.Decoration.mark({inclusive:!0,attributes:{style:"/* background-color: #b7c1e8; border: red 1px solid; */ color: red; font-weight: bold; "},tagName:"span"});e.ErrorHighlight=class{constructor(t){this.parameterChangeListener=void 0,this.tc=t}setError(t,e){var i,n;this.clearError(),t===e&&e++,i=t,n=e,this.tc.dispatch({effects:o.of([a.range(i,n)])})}clearError(){this.tc.dispatch({effects:l.of((()=>!1))})}}},7720:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ParsedParam=e.ParameterizedCompletion=e.highlight_extension=void 0;const n=i(9064),r=i(1506),s=i(70),o=i(2785),l=n.StateEffect.define(),a=n.StateEffect.define();e.highlight_extension=n.StateField.define({create:()=>r.Decoration.none,update(t,e){t=t.map(e.changes);for(let i of e.effects)i.is(l)?t=t.update({add:i.value,sort:!0}):i.is(a)&&(t=t.update({filter:i.value}));return t},provide:t=>s.EditorView.decorations.from(t)});const h=r.Decoration.mark({inclusive:!0,attributes:{style:"/* background-color: #b7c1e8; */border: gray 1px solid;"},tagName:"span"});class c extends r.WidgetType{constructor(){super()}toDOM(t){let e=document.createElement("span");return e.setAttribute("style","border-right: gray 1px solid; margin-left: 1px;"),e}}const u=r.Decoration.widget({widget:new c,side:1e3});function d(t){t.dispatch({effects:a.of((()=>!1))})}class f{constructor(t){this.parameters=[],this.forAutocompletion=void 0,this.parameterChangeListener=void 0,this.tc=t}getForAutocompletion(){return this.forAutocompletion}setParameterChangeListener(t){this.parameterChangeListener=t}replaceSelection(t){this.forAutocompletion=t,this.parameters=[];const e=f.parseParameters(t,this.parameters),i=this.tc.state.selection.main.anchor;this.tc.dispatch(this.tc.state.replaceSelection(e)),d(this.tc);for(let t of this.parameters)n=this.tc,r=i+t.i0,s=i+t.i1,n.dispatch({effects:l.of([h.range(r,s)])});var n,r,s;const o=i+e.length;!function(t,e){t.dispatch({effects:l.of([u.range(e,e)])})}(this.tc,o),this.cycle(0)}next(){const t=this.tc.state.field(e.highlight_extension);let i=t.iter(0),n=this.tc.state.selection.main.head,r=0;for(;null!==i.value;){if(n<i.from||r===t.size-1)return void this.cycle(r);i.next(),r++}}getParamIndexForCursor(){let t=this.tc.state.field(e.highlight_extension).iter(0),i=this.tc.state.selection.main.head,n=0;for(;null!==t.value;){if(i>=t.from&&i<=t.to)return n;t.next(),n++}}getCurrentParameter(){const t=this.getParamIndexForCursor();if(void 0!==t)return this.parameters[t]}previous(){let t=this.tc.state.field(e.highlight_extension).iter(0),i=this.tc.state.selection.main.head,n=0;for(;null!==t.value;){if(i<=t.to)return void this.cycle(n-1);t.next(),n++}this.cycle(n-1)}cycle(t){const i=this.tc.state.field(e.highlight_extension),n=i.size;if(0===n)return;if(-1===t)return;let r=i.iter(0);for(let e=0;e<n&&e<t;e++)r.next();const s=t===n-1,o=r.from;this.tc.dispatch({selection:{anchor:o,head:r.to}}),void 0!==this.parameterChangeListener&&this.parameterChangeListener(t,s)}cancel(){d(this.tc),this.parameterChangeListener=void 0}handleKeyEvent(t){0!=this.tc.state.field(e.highlight_extension).size?"Tab"!==t.key&&"Enter"!==t.key||(t.preventDefault(),t.shiftKey?this.previous():this.next()):this.cancel()}static parseParameters(t,e,i=0){if(t instanceof o.Autocompletion.Literal)return t.getCompletion(o.Autocompletion.Purpose.FOR_INSERTION);if(t instanceof o.Autocompletion.Parameterized){const i=t.getParamName();return e.push(new p(i,0,i.length,t)),i}if(t instanceof o.Autocompletion.EntireSequence){const n=t.getSequenceOfCompletions(),r=t.getSequence();let s="";for(const[l,a]of n.entries()){const n=a.length;if(n>1){const t=r.getNameForChild(l),n=new o.Autocompletion.Parameterized(r.getChildren()[l],t,t),a=i+s.length,h=a+t.length;e.push(new p(t,a,h,n)),s+=t}else if(1===n){const n=a[0];if(n instanceof o.Autocompletion.Literal)s+=n.getCompletion(o.Autocompletion.Purpose.FOR_INSERTION);else if(n instanceof o.Autocompletion.Parameterized){const t=n,r=t.getParamName(),o=i+s.length,l=o+r.length;e.push(new p(r,o,l,t)),s+=r}else if(n instanceof o.Autocompletion.EntireSequence){const t=n,r=i+s.length;s+=f.parseParameters(t,e,r)}else console.log("Unknown completion type: "+typeof t)}}return s}throw new Error("Unexpected completion type: "+typeof t)}}e.ParameterizedCompletion=f;class p{constructor(t,e,i,n){this.name=t,this.i0=e,this.i1=i,this.autocompletion=n}toString(){return this.name}}e.ParsedParam=p},6427:function(t,e,i){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i);var r=Object.getOwnPropertyDescriptor(e,i);r&&!("get"in r?!e.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,n,r)}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),r=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),r(i(1456),e),r(i(7650),e),r(i(7720),e)},123:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.IntRange=void 0;class i{constructor(t,e){this.lower=t,this.upper=void 0!==e?e:t}getLower(){return this.lower}getUpper(){return this.upper}equals(t){if(!(t instanceof i))return!1;const e=t;return this.lower===e.lower&&this.upper===e.upper}toString(){return"["+this.lower+" - "+this.upper+"]"}}e.IntRange=i,i.MAX_INT=2147483647,i.STAR=new i(0,i.MAX_INT),i.PLUS=new i(1,i.MAX_INT),i.OPTIONAL=new i(0,1)},2857:function(t,e,i){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i);var r=Object.getOwnPropertyDescriptor(e,i);r&&!("get"in r?!e.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,n,r)}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),r=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),r(i(123),e)},591:(t,e,i)=>{"use strict";var n=i(9064),r=i(1506),s=i(2533);class o{constructor(t,e,i){this.state=t,this.pos=e,this.explicit=i,this.abortListeners=[]}tokenBefore(t){let e=s.syntaxTree(this.state).resolveInner(this.pos,-1);for(;e&&t.indexOf(e.name)<0;)e=e.parent;return e?{from:e.from,to:this.pos,text:this.state.sliceDoc(e.from,this.pos),type:e.type}:null}matchBefore(t){let e=this.state.doc.lineAt(this.pos),i=Math.max(e.from,this.pos-250),n=e.text.slice(i-e.from,this.pos-e.from),r=n.search(u(t,!1));return r<0?null:{from:i+r,to:this.pos,text:n.slice(r)}}get aborted(){return null==this.abortListeners}addEventListener(t,e){"abort"==t&&this.abortListeners&&this.abortListeners.push(e)}}function l(t){let e=Object.keys(t).join(""),i=/\w/.test(e);return i&&(e=e.replace(/\w/g,"")),`[${i?"\\w":""}${e.replace(/[^\w\s]/g,"\\$&")}]`}function a(t){let e=t.map((t=>"string"==typeof t?{label:t}:t)),[i,n]=e.every((t=>/^\w+$/.test(t.label)))?[/\w*$/,/\w+$/]:function(t){let e=Object.create(null),i=Object.create(null);for(let{label:n}of t){e[n[0]]=!0;for(let t=1;t<n.length;t++)i[n[t]]=!0}let n=l(e)+l(i)+"*$";return[new RegExp("^"+n),new RegExp(n)]}(e);return t=>{let r=t.matchBefore(n);return r||t.explicit?{from:r?r.from:t.pos,options:e,validFor:i}:null}}class h{constructor(t,e,i,n){this.completion=t,this.source=e,this.match=i,this.score=n}}function c(t){return t.selection.main.from}function u(t,e){var i;let{source:n}=t,r=e&&"^"!=n[0],s="$"!=n[n.length-1];return r||s?new RegExp(`${r?"^":""}(?:${n})${s?"$":""}`,null!==(i=t.flags)&&void 0!==i?i:t.ignoreCase?"i":""):t}const d=n.Annotation.define();function f(t,e,i,r){let{main:s}=t.selection,o=i-s.from,l=r-s.from;return Object.assign(Object.assign({},t.changeByRange((a=>a!=s&&i!=r&&t.sliceDoc(a.from+o,a.from+l)!=t.sliceDoc(i,r)?{range:a}:{changes:{from:a.from+o,to:r==s.from?a.to:a.from+l,insert:e},range:n.EditorSelection.cursor(a.from+o+e.length)}))),{scrollIntoView:!0,userEvent:"input.complete"})}const p=new WeakMap;function m(t){if(!Array.isArray(t))return t;let e=p.get(t);return e||p.set(t,e=a(t)),e}const g=n.StateEffect.define(),v=n.StateEffect.define();class w{constructor(t){this.pattern=t,this.chars=[],this.folded=[],this.any=[],this.precise=[],this.byWord=[],this.score=0,this.matched=[];for(let e=0;e<t.length;){let i=n.codePointAt(t,e),r=n.codePointSize(i);this.chars.push(i);let s=t.slice(e,e+r),o=s.toUpperCase();this.folded.push(n.codePointAt(o==s?s.toLowerCase():o,0)),e+=r}this.astral=t.length!=this.chars.length}ret(t,e){return this.score=t,this.matched=e,this}match(t){if(0==this.pattern.length)return this.ret(-100,[]);if(t.length<this.pattern.length)return null;let{chars:e,folded:i,any:r,precise:s,byWord:o}=this;if(1==e.length){let r=n.codePointAt(t,0),s=n.codePointSize(r),o=s==t.length?0:-100;if(r==e[0]);else{if(r!=i[0])return null;o+=-200}return this.ret(o,[0,s])}let l=t.indexOf(this.pattern);if(0==l)return this.ret(t.length==this.pattern.length?0:-100,[0,this.pattern.length]);let a=e.length,h=0;if(l<0){for(let s=0,o=Math.min(t.length,200);s<o&&h<a;){let o=n.codePointAt(t,s);o!=e[h]&&o!=i[h]||(r[h++]=s),s+=n.codePointSize(o)}if(h<a)return null}let c=0,u=0,d=!1,f=0,p=-1,m=-1,g=/[a-z]/.test(t),v=!0;for(let r=0,h=Math.min(t.length,200),w=0;r<h&&u<a;){let h=n.codePointAt(t,r);l<0&&(c<a&&h==e[c]&&(s[c++]=r),f<a&&(h==e[f]||h==i[f]?(0==f&&(p=r),m=r+1,f++):f=0));let y,b=h<255?h>=48&&h<=57||h>=97&&h<=122?2:h>=65&&h<=90?1:0:(y=n.fromCodePoint(h))!=y.toLowerCase()?1:y!=y.toUpperCase()?2:0;(!r||1==b&&g||0==w&&0!=b)&&(e[u]==h||i[u]==h&&(d=!0)?o[u++]=r:o.length&&(v=!1)),w=b,r+=n.codePointSize(h)}return u==a&&0==o[0]&&v?this.result((d?-200:0)-100,o,t):f==a&&0==p?this.ret(-200-t.length+(m==t.length?0:-100),[0,m]):l>-1?this.ret(-700-t.length,[l,l+this.pattern.length]):f==a?this.ret(-900-t.length,[p,m]):u==a?this.result((d?-200:0)-100-700+(v?0:-1100),o,t):2==e.length?null:this.result((r[0]?-700:0)-200-1100,r,t)}result(t,e,i){let r=[],s=0;for(let t of e){let e=t+(this.astral?n.codePointSize(n.codePointAt(i,t)):1);s&&r[s-1]==t?r[s-1]=e:(r[s++]=t,r[s++]=e)}return this.ret(t-i.length,r)}}class y{constructor(t){this.pattern=t,this.matched=[],this.score=0,this.folded=t.toLowerCase()}match(t){if(t.length<this.pattern.length)return null;let e=t.slice(0,this.pattern.length),i=e==this.pattern?0:e.toLowerCase()==this.folded?-200:null;return null==i?null:(this.matched=[0,e.length],this.score=i+(t.length==this.pattern.length?0:-100),this)}}const b=n.Facet.define({combine:t=>n.combineConfig(t,{activateOnTyping:!0,activateOnCompletion:()=>!1,activateOnTypingDelay:100,selectOnOpen:!0,override:null,closeOnBlur:!0,maxRenderedOptions:100,defaultKeymap:!0,tooltipClass:()=>"",optionClass:()=>"",aboveCursor:!1,icons:!0,addToOptions:[],positionInfo:x,filterStrict:!1,compareCompletions:(t,e)=>t.label.localeCompare(e.label),interactionDelay:75,updateSyncTime:100},{defaultKeymap:(t,e)=>t&&e,closeOnBlur:(t,e)=>t&&e,icons:(t,e)=>t&&e,tooltipClass:(t,e)=>i=>S(t(i),e(i)),optionClass:(t,e)=>i=>S(t(i),e(i)),addToOptions:(t,e)=>t.concat(e),filterStrict:(t,e)=>t||e})});function S(t,e){return t?e?t+" "+e:t:e}function x(t,e,i,n,s,o){let l,a,h=t.textDirection==r.Direction.RTL,c=h,u=!1,d="top",f=e.left-s.left,p=s.right-e.right,m=n.right-n.left,g=n.bottom-n.top;if(c&&f<Math.min(m,p)?c=!1:!c&&p<Math.min(m,f)&&(c=!0),m<=(c?f:p))l=Math.max(s.top,Math.min(i.top,s.bottom-g))-e.top,a=Math.min(400,c?f:p);else{u=!0,a=Math.min(400,(h?e.right:s.right-e.left)-30);let t=s.bottom-e.bottom;t>=g||t>e.top?l=i.bottom-e.top:(d="bottom",l=e.bottom-i.top)}return{style:`${d}: ${l/((e.bottom-e.top)/o.offsetHeight)}px; max-width: ${a/((e.right-e.left)/o.offsetWidth)}px`,class:"cm-completionInfo-"+(u?h?"left-narrow":"right-narrow":c?"left":"right")}}function C(t,e,i){if(t<=i)return{from:0,to:t};if(e<0&&(e=0),e<=t>>1){let t=Math.floor(e/i);return{from:t*i,to:(t+1)*i}}let n=Math.floor((t-e)/i);return{from:t-(n+1)*i,to:t-n*i}}class k{constructor(t,e,i){this.view=t,this.stateField=e,this.applyCompletion=i,this.info=null,this.infoDestroy=null,this.placeInfoReq={read:()=>this.measureInfo(),write:t=>this.placeInfo(t),key:this},this.space=null,this.currentClass="";let n=t.state.field(e),{options:r,selected:s}=n.open,o=t.state.facet(b);this.optionContent=function(t){let e=t.addToOptions.slice();return t.icons&&e.push({render(t){let e=document.createElement("div");return e.classList.add("cm-completionIcon"),t.type&&e.classList.add(...t.type.split(/\s+/g).map((t=>"cm-completionIcon-"+t))),e.setAttribute("aria-hidden","true"),e},position:20}),e.push({render(t,e,i,n){let r=document.createElement("span");r.className="cm-completionLabel";let s=t.displayLabel||t.label,o=0;for(let t=0;t<n.length;){let e=n[t++],i=n[t++];e>o&&r.appendChild(document.createTextNode(s.slice(o,e)));let l=r.appendChild(document.createElement("span"));l.appendChild(document.createTextNode(s.slice(e,i))),l.className="cm-completionMatchedText",o=i}return o<s.length&&r.appendChild(document.createTextNode(s.slice(o))),r},position:50},{render(t){if(!t.detail)return null;let e=document.createElement("span");return e.className="cm-completionDetail",e.textContent=t.detail,e},position:80}),e.sort(((t,e)=>t.position-e.position)).map((t=>t.render))}(o),this.optionClass=o.optionClass,this.tooltipClass=o.tooltipClass,this.range=C(r.length,s,o.maxRenderedOptions),this.dom=document.createElement("div"),this.dom.className="cm-tooltip-autocomplete",this.updateTooltipClass(t.state),this.dom.addEventListener("mousedown",(i=>{let{options:n}=t.state.field(e).open;for(let e,r=i.target;r&&r!=this.dom;r=r.parentNode)if("LI"==r.nodeName&&(e=/-(\d+)$/.exec(r.id))&&+e[1]<n.length)return this.applyCompletion(t,n[+e[1]]),void i.preventDefault()})),this.dom.addEventListener("focusout",(e=>{let i=t.state.field(this.stateField,!1);i&&i.tooltip&&t.state.facet(b).closeOnBlur&&e.relatedTarget!=t.contentDOM&&t.dispatch({effects:v.of(null)})})),this.showOptions(r,n.id)}mount(){this.updateSel()}showOptions(t,e){this.list&&this.list.remove(),this.list=this.dom.appendChild(this.createListBox(t,e,this.range)),this.list.addEventListener("scroll",(()=>{this.info&&this.view.requestMeasure(this.placeInfoReq)}))}update(t){var e;let i=t.state.field(this.stateField),n=t.startState.field(this.stateField);if(this.updateTooltipClass(t.state),i!=n){let{options:r,selected:s,disabled:o}=i.open;n.open&&n.open.options==r||(this.range=C(r.length,s,t.state.facet(b).maxRenderedOptions),this.showOptions(r,i.id)),this.updateSel(),o!=(null===(e=n.open)||void 0===e?void 0:e.disabled)&&this.dom.classList.toggle("cm-tooltip-autocomplete-disabled",!!o)}}updateTooltipClass(t){let e=this.tooltipClass(t);if(e!=this.currentClass){for(let t of this.currentClass.split(" "))t&&this.dom.classList.remove(t);for(let t of e.split(" "))t&&this.dom.classList.add(t);this.currentClass=e}}positioned(t){this.space=t,this.info&&this.view.requestMeasure(this.placeInfoReq)}updateSel(){let t=this.view.state.field(this.stateField),e=t.open;if((e.selected>-1&&e.selected<this.range.from||e.selected>=this.range.to)&&(this.range=C(e.options.length,e.selected,this.view.state.facet(b).maxRenderedOptions),this.showOptions(e.options,t.id)),this.updateSelectedOption(e.selected)){this.destroyInfo();let{completion:i}=e.options[e.selected],{info:n}=i;if(!n)return;let s="string"==typeof n?document.createTextNode(n):n(i);if(!s)return;"then"in s?s.then((e=>{e&&this.view.state.field(this.stateField,!1)==t&&this.addInfoPane(e,i)})).catch((t=>r.logException(this.view.state,t,"completion info"))):this.addInfoPane(s,i)}}addInfoPane(t,e){this.destroyInfo();let i=this.info=document.createElement("div");if(i.className="cm-tooltip cm-completionInfo",null!=t.nodeType)i.appendChild(t),this.infoDestroy=null;else{let{dom:e,destroy:n}=t;i.appendChild(e),this.infoDestroy=n||null}this.dom.appendChild(i),this.view.requestMeasure(this.placeInfoReq)}updateSelectedOption(t){let e=null;for(let i=this.list.firstChild,n=this.range.from;i;i=i.nextSibling,n++)"LI"==i.nodeName&&i.id?n==t?i.hasAttribute("aria-selected")||(i.setAttribute("aria-selected","true"),e=i):i.hasAttribute("aria-selected")&&i.removeAttribute("aria-selected"):n--;return e&&function(t,e){let i=t.getBoundingClientRect(),n=e.getBoundingClientRect(),r=i.height/t.offsetHeight;n.top<i.top?t.scrollTop-=(i.top-n.top)/r:n.bottom>i.bottom&&(t.scrollTop+=(n.bottom-i.bottom)/r)}(this.list,e),e}measureInfo(){let t=this.dom.querySelector("[aria-selected]");if(!t||!this.info)return null;let e=this.dom.getBoundingClientRect(),i=this.info.getBoundingClientRect(),n=t.getBoundingClientRect(),r=this.space;if(!r){let t=this.dom.ownerDocument.defaultView||window;r={left:0,top:0,right:t.innerWidth,bottom:t.innerHeight}}return n.top>Math.min(r.bottom,e.bottom)-10||n.bottom<Math.max(r.top,e.top)+10?null:this.view.state.facet(b).positionInfo(this.view,e,n,i,r,this.dom)}placeInfo(t){this.info&&(t?(t.style&&(this.info.style.cssText=t.style),this.info.className="cm-tooltip cm-completionInfo "+(t.class||"")):this.info.style.cssText="top: -1e6px")}createListBox(t,e,i){const n=document.createElement("ul");n.id=e,n.setAttribute("role","listbox"),n.setAttribute("aria-expanded","true"),n.setAttribute("aria-label",this.view.state.phrase("Completions"));let r=null;for(let s=i.from;s<i.to;s++){let{completion:o,match:l}=t[s],{section:a}=o;if(a){let t="string"==typeof a?a:a.name;t!=r&&(s>i.from||0==i.from)&&(r=t,"string"!=typeof a&&a.header?n.appendChild(a.header(a)):n.appendChild(document.createElement("completion-section")).textContent=t)}const h=n.appendChild(document.createElement("li"));h.id=e+"-"+s,h.setAttribute("role","option");let c=this.optionClass(o);c&&(h.className=c);for(let t of this.optionContent){let e=t(o,this.view.state,this.view,l);e&&h.appendChild(e)}}return i.from&&n.classList.add("cm-completionListIncompleteTop"),i.to<t.length&&n.classList.add("cm-completionListIncompleteBottom"),n}destroyInfo(){this.info&&(this.infoDestroy&&this.infoDestroy(),this.info.remove(),this.info=null)}destroy(){this.destroyInfo()}}function A(t){return 100*(t.boost||0)+(t.apply?10:0)+(t.info?5:0)+(t.type?1:0)}class E{constructor(t,e,i,n,r,s){this.options=t,this.attrs=e,this.tooltip=i,this.timestamp=n,this.selected=r,this.disabled=s}setSelected(t,e){return t==this.selected||t>=this.options.length?this:new E(this.options,P(e,t),this.tooltip,this.timestamp,t,this.disabled)}static build(t,e,i,n,r){let s=function(t,e){let i=[],n=null,r=t=>{i.push(t);let{section:e}=t.completion;if(e){n||(n=[]);let t="string"==typeof e?e:e.name;n.some((e=>e.name==t))||n.push("string"==typeof e?{name:t}:e)}},s=e.facet(b);for(let n of t)if(n.hasResult()){let t=n.result.getMatch;if(!1===n.result.filter)for(let e of n.result.options)r(new h(e,n.source,t?t(e):[],1e9-i.length));else{let i,o=e.sliceDoc(n.from,n.to),l=s.filterStrict?new y(o):new w(o);for(let e of n.result.options)if(i=l.match(e.label)){let s=e.displayLabel?t?t(e,i.matched):[]:i.matched;r(new h(e,n.source,s,i.score+(e.boost||0)))}}}if(n){let t=Object.create(null),e=0,r=(t,e)=>{var i,n;return(null!==(i=t.rank)&&void 0!==i?i:1e9)-(null!==(n=e.rank)&&void 0!==n?n:1e9)||(t.name<e.name?-1:1)};for(let i of n.sort(r))e-=1e5,t[i.name]=e;for(let e of i){let{section:i}=e.completion;i&&(e.score+=t["string"==typeof i?i:i.name])}}let o=[],l=null,a=s.compareCompletions;for(let t of i.sort(((t,e)=>e.score-t.score||a(t.completion,e.completion)))){let e=t.completion;!l||l.label!=e.label||l.detail!=e.detail||null!=l.type&&null!=e.type&&l.type!=e.type||l.apply!=e.apply||l.boost!=e.boost?o.push(t):A(t.completion)>A(l)&&(o[o.length-1]=t),l=t.completion}return o}(t,e);if(!s.length)return n&&t.some((t=>1==t.state))?new E(n.options,n.attrs,n.tooltip,n.timestamp,n.selected,!0):null;let o=e.facet(b).selectOnOpen?0:-1;if(n&&n.selected!=o&&-1!=n.selected){let t=n.options[n.selected].completion;for(let e=0;e<s.length;e++)if(s[e].completion==t){o=e;break}}return new E(s,P(i,o),{pos:t.reduce(((t,e)=>e.hasResult()?Math.min(t,e.from):t),1e8),create:q,above:r.aboveCursor},n?n.timestamp:Date.now(),o,!1)}map(t){return new E(this.options,this.attrs,Object.assign(Object.assign({},this.tooltip),{pos:t.mapPos(this.tooltip.pos)}),this.timestamp,this.selected,this.disabled)}}class T{constructor(t,e,i){this.active=t,this.id=e,this.open=i}static start(){return new T(O,"cm-ac-"+Math.floor(2e6*Math.random()).toString(36),null)}update(t){let{state:e}=t,i=e.facet(b),n=(i.override||e.languageDataAt("autocomplete",c(e)).map(m)).map((e=>(this.active.find((t=>t.source==e))||new L(e,this.active.some((t=>0!=t.state))?1:0)).update(t,i)));n.length==this.active.length&&n.every(((t,e)=>t==this.active[e]))&&(n=this.active);let r=this.open;r&&t.docChanged&&(r=r.map(t.changes)),t.selection||n.some((e=>e.hasResult()&&t.changes.touchesRange(e.from,e.to)))||!function(t,e){if(t==e)return!0;for(let i=0,n=0;;){for(;i<t.length&&!t[i].hasResult;)i++;for(;n<e.length&&!e[n].hasResult;)n++;let r=i==t.length,s=n==e.length;if(r||s)return r==s;if(t[i++].result!=e[n++].result)return!1}}(n,this.active)?r=E.build(n,e,this.id,r,i):r&&r.disabled&&!n.some((t=>1==t.state))&&(r=null),!r&&n.every((t=>1!=t.state))&&n.some((t=>t.hasResult()))&&(n=n.map((t=>t.hasResult()?new L(t.source,0):t)));for(let e of t.effects)e.is(B)&&(r=r&&r.setSelected(e.value,this.id));return n==this.active&&r==this.open?this:new T(n,this.id,r)}get tooltip(){return this.open?this.open.tooltip:null}get attrs(){return this.open?this.open.attrs:this.active.length?M:N}}const M={"aria-autocomplete":"list"},N={};function P(t,e){let i={"aria-autocomplete":"list","aria-haspopup":"listbox","aria-controls":t};return e>-1&&(i["aria-activedescendant"]=t+"-"+e),i}const O=[];function D(t,e){if(t.isUserEvent("input.complete")){let i=t.annotation(d);if(i&&e.activateOnCompletion(i))return"input"}return t.isUserEvent("input.type")?"input":t.isUserEvent("delete.backward")?"delete":null}class L{constructor(t,e,i=-1){this.source=t,this.state=e,this.explicitPos=i}hasResult(){return!1}update(t,e){let i=D(t,e),n=this;i?n=n.handleUserEvent(t,i,e):t.docChanged?n=n.handleChange(t):t.selection&&0!=n.state&&(n=new L(n.source,0));for(let e of t.effects)if(e.is(g))n=new L(n.source,1,e.value?c(t.state):-1);else if(e.is(v))n=new L(n.source,0);else if(e.is(I))for(let t of e.value)t.source==n.source&&(n=t);return n}handleUserEvent(t,e,i){return"delete"!=e&&i.activateOnTyping?new L(this.source,1):this.map(t.changes)}handleChange(t){return t.changes.touchesRange(c(t.startState))?new L(this.source,0):this.map(t.changes)}map(t){return t.empty||this.explicitPos<0?this:new L(this.source,this.state,t.mapPos(this.explicitPos))}}class R extends L{constructor(t,e,i,n,r){super(t,2,e),this.result=i,this.from=n,this.to=r}hasResult(){return!0}handleUserEvent(t,e,i){var n;let r=this.result;r.map&&!t.changes.empty&&(r=r.map(r,t.changes));let s=t.changes.mapPos(this.from),l=t.changes.mapPos(this.to,1),a=c(t.state);if((this.explicitPos<0?a<=s:a<this.from)||a>l||!r||"delete"==e&&c(t.startState)==this.from)return new L(this.source,"input"==e&&i.activateOnTyping?1:0);let h=this.explicitPos<0?-1:t.changes.mapPos(this.explicitPos);return function(t,e,i,n){if(!t)return!1;let r=e.sliceDoc(i,n);return"function"==typeof t?t(r,i,n,e):u(t,!0).test(r)}(r.validFor,t.state,s,l)?new R(this.source,h,r,s,l):r.update&&(r=r.update(r,s,l,new o(t.state,a,h>=0)))?new R(this.source,h,r,r.from,null!==(n=r.to)&&void 0!==n?n:c(t.state)):new L(this.source,1,h)}handleChange(t){return t.changes.touchesRange(this.from,this.to)?new L(this.source,0):this.map(t.changes)}map(t){return t.empty?this:(this.result.map?this.result.map(this.result,t):this.result)?new R(this.source,this.explicitPos<0?-1:t.mapPos(this.explicitPos),this.result,t.mapPos(this.from),t.mapPos(this.to,1)):new L(this.source,0)}}const I=n.StateEffect.define({map:(t,e)=>t.map((t=>t.map(e)))}),B=n.StateEffect.define(),F=n.StateField.define({create:()=>T.start(),update:(t,e)=>t.update(e),provide:t=>[r.showTooltip.from(t,(t=>t.tooltip)),r.EditorView.contentAttributes.from(t,(t=>t.attrs))]});function _(t,e){const i=e.completion.apply||e.completion.label;let n=t.state.field(F).active.find((t=>t.source==e.source));return n instanceof R&&("string"==typeof i?t.dispatch(Object.assign(Object.assign({},f(t.state,i,n.from,n.to)),{annotations:d.of(e.completion)})):i(t,e.completion,n.from,n.to),!0)}const q=function(t,e){return i=>new k(i,t,e)}(F,_);function V(t,e="option"){return i=>{let n=i.state.field(F,!1);if(!n||!n.open||n.open.disabled||Date.now()-n.open.timestamp<i.state.facet(b).interactionDelay)return!1;let s,o=1;"page"==e&&(s=r.getTooltip(i,n.open.tooltip))&&(o=Math.max(2,Math.floor(s.dom.offsetHeight/s.dom.querySelector("li").offsetHeight)-1));let{length:l}=n.open.options,a=n.open.selected>-1?n.open.selected+o*(t?1:-1):t?0:l-1;return a<0?a="page"==e?0:l-1:a>=l&&(a="page"==e?l-1:0),i.dispatch({effects:B.of(a)}),!0}}const H=t=>{let e=t.state.field(F,!1);return!(t.state.readOnly||!e||!e.open||e.open.selected<0||e.open.disabled||Date.now()-e.open.timestamp<t.state.facet(b).interactionDelay)&&_(t,e.open.options[e.open.selected])},W=t=>!!t.state.field(F,!1)&&(t.dispatch({effects:g.of(!0)}),!0),z=t=>{let e=t.state.field(F,!1);return!(!e||!e.active.some((t=>0!=t.state))||(t.dispatch({effects:v.of(null)}),0))};class j{constructor(t,e){this.active=t,this.context=e,this.time=Date.now(),this.updates=[],this.done=void 0}}const U=r.ViewPlugin.fromClass(class{constructor(t){this.view=t,this.debounceUpdate=-1,this.running=[],this.debounceAccept=-1,this.pendingStart=!1,this.composing=0;for(let e of t.state.field(F).active)1==e.state&&this.startQuery(e)}update(t){let e=t.state.field(F),i=t.state.facet(b);if(!t.selectionSet&&!t.docChanged&&t.startState.field(F)==e)return;let n=t.transactions.some((t=>(t.selection||t.docChanged)&&!D(t,i)));for(let e=0;e<this.running.length;e++){let i=this.running[e];if(n||i.updates.length+t.transactions.length>50&&Date.now()-i.time>1e3){for(let t of i.context.abortListeners)try{t()}catch(t){r.logException(this.view.state,t)}i.context.abortListeners=null,this.running.splice(e--,1)}else i.updates.push(...t.transactions)}this.debounceUpdate>-1&&clearTimeout(this.debounceUpdate),t.transactions.some((t=>t.effects.some((t=>t.is(g)))))&&(this.pendingStart=!0);let s=this.pendingStart?50:i.activateOnTypingDelay;if(this.debounceUpdate=e.active.some((t=>1==t.state&&!this.running.some((e=>e.active.source==t.source))))?setTimeout((()=>this.startUpdate()),s):-1,0!=this.composing)for(let e of t.transactions)"input"==D(e,i)?this.composing=2:2==this.composing&&e.selection&&(this.composing=3)}startUpdate(){this.debounceUpdate=-1,this.pendingStart=!1;let{state:t}=this.view,e=t.field(F);for(let t of e.active)1!=t.state||this.running.some((e=>e.active.source==t.source))||this.startQuery(t)}startQuery(t){let{state:e}=this.view,i=c(e),n=new o(e,i,t.explicitPos==i),s=new j(t,n);this.running.push(s),Promise.resolve(t.source(n)).then((t=>{s.context.aborted||(s.done=t||null,this.scheduleAccept())}),(t=>{this.view.dispatch({effects:v.of(null)}),r.logException(this.view.state,t)}))}scheduleAccept(){this.running.every((t=>void 0!==t.done))?this.accept():this.debounceAccept<0&&(this.debounceAccept=setTimeout((()=>this.accept()),this.view.state.facet(b).updateSyncTime))}accept(){var t;this.debounceAccept>-1&&clearTimeout(this.debounceAccept),this.debounceAccept=-1;let e=[],i=this.view.state.facet(b);for(let n=0;n<this.running.length;n++){let r=this.running[n];if(void 0===r.done)continue;if(this.running.splice(n--,1),r.done){let n=new R(r.active.source,r.active.explicitPos,r.done,r.done.from,null!==(t=r.done.to)&&void 0!==t?t:c(r.updates.length?r.updates[0].startState:this.view.state));for(let t of r.updates)n=n.update(t,i);if(n.hasResult()){e.push(n);continue}}let s=this.view.state.field(F).active.find((t=>t.source==r.active.source));if(s&&1==s.state)if(null==r.done){let t=new L(r.active.source,0);for(let e of r.updates)t=t.update(e,i);1!=t.state&&e.push(t)}else this.startQuery(s)}e.length&&this.view.dispatch({effects:I.of(e)})}},{eventHandlers:{blur(t){let e=this.view.state.field(F,!1);if(e&&e.tooltip&&this.view.state.facet(b).closeOnBlur){let i=e.open&&r.getTooltip(this.view,e.open.tooltip);i&&i.dom.contains(t.relatedTarget)||setTimeout((()=>this.view.dispatch({effects:v.of(null)})),10)}},compositionstart(){this.composing=1},compositionend(){3==this.composing&&setTimeout((()=>this.view.dispatch({effects:g.of(!1)})),20),this.composing=0}}}),K="object"==typeof navigator&&/Win/.test(navigator.platform),G=n.Prec.highest(r.EditorView.domEventHandlers({keydown(t,e){let i=e.state.field(F,!1);if(!i||!i.open||i.open.disabled||i.open.selected<0||t.key.length>1||t.ctrlKey&&(!K||!t.altKey)||t.metaKey)return!1;let n=i.open.options[i.open.selected],r=i.active.find((t=>t.source==n.source)),s=n.completion.commitCharacters||r.result.commitCharacters;return s&&s.indexOf(t.key)>-1&&_(e,n),!1}})),$=r.EditorView.baseTheme({".cm-tooltip.cm-tooltip-autocomplete":{"& > ul":{fontFamily:"monospace",whiteSpace:"nowrap",overflow:"hidden auto",maxWidth_fallback:"700px",maxWidth:"min(700px, 95vw)",minWidth:"250px",maxHeight:"10em",height:"100%",listStyle:"none",margin:0,padding:0,"& > li, & > completion-section":{padding:"1px 3px",lineHeight:1.2},"& > li":{overflowX:"hidden",textOverflow:"ellipsis",cursor:"pointer"},"& > completion-section":{display:"list-item",borderBottom:"1px solid silver",paddingLeft:"0.5em",opacity:.7}}},"&light .cm-tooltip-autocomplete ul li[aria-selected]":{background:"#17c",color:"white"},"&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]":{background:"#777"},"&dark .cm-tooltip-autocomplete ul li[aria-selected]":{background:"#347",color:"white"},"&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]":{background:"#444"},".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after":{content:'"···"',opacity:.5,display:"block",textAlign:"center"},".cm-tooltip.cm-completionInfo":{position:"absolute",padding:"3px 9px",width:"max-content",maxWidth:"400px",boxSizing:"border-box"},".cm-completionInfo.cm-completionInfo-left":{right:"100%"},".cm-completionInfo.cm-completionInfo-right":{left:"100%"},".cm-completionInfo.cm-completionInfo-left-narrow":{right:"30px"},".cm-completionInfo.cm-completionInfo-right-narrow":{left:"30px"},"&light .cm-snippetField":{backgroundColor:"#00000022"},"&dark .cm-snippetField":{backgroundColor:"#ffffff22"},".cm-snippetFieldPosition":{verticalAlign:"text-top",width:0,height:"1.15em",display:"inline-block",margin:"0 -0.7px -.7em",borderLeft:"1.4px dotted #888"},".cm-completionMatchedText":{textDecoration:"underline"},".cm-completionDetail":{marginLeft:"0.5em",fontStyle:"italic"},".cm-completionIcon":{fontSize:"90%",width:".8em",display:"inline-block",textAlign:"center",paddingRight:".6em",opacity:"0.6",boxSizing:"content-box"},".cm-completionIcon-function, .cm-completionIcon-method":{"&:after":{content:"'ƒ'"}},".cm-completionIcon-class":{"&:after":{content:"'○'"}},".cm-completionIcon-interface":{"&:after":{content:"'◌'"}},".cm-completionIcon-variable":{"&:after":{content:"'𝑥'"}},".cm-completionIcon-constant":{"&:after":{content:"'𝐶'"}},".cm-completionIcon-type":{"&:after":{content:"'𝑡'"}},".cm-completionIcon-enum":{"&:after":{content:"'∪'"}},".cm-completionIcon-property":{"&:after":{content:"'□'"}},".cm-completionIcon-keyword":{"&:after":{content:"'🔑︎'"}},".cm-completionIcon-namespace":{"&:after":{content:"'▢'"}},".cm-completionIcon-text":{"&:after":{content:"'abc'",fontSize:"50%",verticalAlign:"middle"}}});class Y{constructor(t,e,i,n){this.field=t,this.line=e,this.from=i,this.to=n}}class J{constructor(t,e,i){this.field=t,this.from=e,this.to=i}map(t){let e=t.mapPos(this.from,-1,n.MapMode.TrackDel),i=t.mapPos(this.to,1,n.MapMode.TrackDel);return null==e||null==i?null:new J(this.field,e,i)}}class X{constructor(t,e){this.lines=t,this.fieldPositions=e}instantiate(t,e){let i=[],n=[e],r=t.doc.lineAt(e),o=/^\s*/.exec(r.text)[0];for(let r of this.lines){if(i.length){let i=o,l=/^\t*/.exec(r)[0].length;for(let e=0;e<l;e++)i+=t.facet(s.indentUnit);n.push(e+i.length-l),r=i+r.slice(l)}i.push(r),e+=r.length+1}let l=this.fieldPositions.map((t=>new J(t.field,n[t.line]+t.from,n[t.line]+t.to)));return{text:i,ranges:l}}static parse(t){let e,i=[],n=[],r=[];for(let s of t.split(/\r\n?|\n/)){for(;e=/[#$]\{(?:(\d+)(?::([^}]*))?|((?:\\[{}]|[^}])*))\}/.exec(s);){let t=e[1]?+e[1]:null,o=e[2]||e[3]||"",l=-1,a=o.replace(/\\[{}]/g,(t=>t[1]));for(let e=0;e<i.length;e++)(null!=t?i[e].seq==t:a&&i[e].name==a)&&(l=e);if(l<0){let e=0;for(;e<i.length&&(null==t||null!=i[e].seq&&i[e].seq<t);)e++;i.splice(e,0,{seq:t,name:a}),l=e;for(let t of r)t.field>=l&&t.field++}r.push(new Y(l,n.length,e.index,e.index+a.length)),s=s.slice(0,e.index)+o+s.slice(e.index+e[0].length)}s=s.replace(/\\([{}])/g,((t,e,i)=>{for(let t of r)t.line==n.length&&t.from>i&&(t.from--,t.to--);return e})),n.push(s)}return new X(n,r)}}let Z=r.Decoration.widget({widget:new class extends r.WidgetType{toDOM(){let t=document.createElement("span");return t.className="cm-snippetFieldPosition",t}ignoreEvent(){return!1}}}),Q=r.Decoration.mark({class:"cm-snippetField"});class tt{constructor(t,e){this.ranges=t,this.active=e,this.deco=r.Decoration.set(t.map((t=>(t.from==t.to?Z:Q).range(t.from,t.to))))}map(t){let e=[];for(let i of this.ranges){let n=i.map(t);if(!n)return null;e.push(n)}return new tt(e,this.active)}selectionInsideField(t){return t.ranges.every((t=>this.ranges.some((e=>e.field==this.active&&e.from<=t.from&&e.to>=t.to))))}}const et=n.StateEffect.define({map:(t,e)=>t&&t.map(e)}),it=n.StateEffect.define(),nt=n.StateField.define({create:()=>null,update(t,e){for(let i of e.effects){if(i.is(et))return i.value;if(i.is(it)&&t)return new tt(t.ranges,i.value)}return t&&e.docChanged&&(t=t.map(e.changes)),t&&e.selection&&!t.selectionInsideField(e.selection)&&(t=null),t},provide:t=>r.EditorView.decorations.from(t,(t=>t?t.deco:r.Decoration.none))});function rt(t,e){return n.EditorSelection.create(t.filter((t=>t.field==e)).map((t=>n.EditorSelection.range(t.from,t.to))))}function st(t){let e=X.parse(t);return(t,i,r,s)=>{let{text:o,ranges:l}=e.instantiate(t.state,r),a={changes:{from:r,to:s,insert:n.Text.of(o)},scrollIntoView:!0,annotations:i?[d.of(i),n.Transaction.userEvent.of("input.complete")]:void 0};if(l.length&&(a.selection=rt(l,0)),l.some((t=>t.field>0))){let e=new tt(l,0),i=a.effects=[et.of(e)];void 0===t.state.field(nt,!1)&&i.push(n.StateEffect.appendConfig.of([nt,dt,ft,$]))}t.dispatch(t.state.update(a))}}function ot(t){return({state:e,dispatch:i})=>{let n=e.field(nt,!1);if(!n||t<0&&0==n.active)return!1;let r=n.active+t,s=t>0&&!n.ranges.some((e=>e.field==r+t));return i(e.update({selection:rt(n.ranges,r),effects:et.of(s?null:new tt(n.ranges,r)),scrollIntoView:!0})),!0}}const lt=({state:t,dispatch:e})=>!!t.field(nt,!1)&&(e(t.update({effects:et.of(null)})),!0),at=ot(1),ht=ot(-1),ct=[{key:"Tab",run:at,shift:ht},{key:"Escape",run:lt}],ut=n.Facet.define({combine:t=>t.length?t[0]:ct}),dt=n.Prec.highest(r.keymap.compute([ut],(t=>t.facet(ut)))),ft=r.EditorView.domEventHandlers({mousedown(t,e){let i,n=e.state.field(nt,!1);if(!n||null==(i=e.posAtCoords({x:t.clientX,y:t.clientY})))return!1;let r=n.ranges.find((t=>t.from<=i&&t.to>=i));return!(!r||r.field==n.active||(e.dispatch({selection:rt(n.ranges,r.field),effects:et.of(n.ranges.some((t=>t.field>r.field))?new tt(n.ranges,r.field):null),scrollIntoView:!0}),0))}});function pt(t,e){return new RegExp(e(t.source),t.unicode?"u":"")}const mt=Object.create(null);function gt(t,e,i,n,r){for(let s=t.iterLines(),o=0;!s.next().done;){let t,{value:l}=s;for(e.lastIndex=0;t=e.exec(l);)if(!n[t[0]]&&o+t.index!=r&&(i.push({type:"text",label:t[0]}),n[t[0]]=!0,i.length>=2e3))return;o+=l.length+1}}function vt(t,e,i,n,r){let s=t.length>=1e3,o=s&&e.get(t);if(o)return o;let l=[],a=Object.create(null);if(t.children){let s=0;for(let o of t.children){if(o.length>=1e3)for(let t of vt(o,e,i,n-s,r-s))a[t.label]||(a[t.label]=!0,l.push(t));else gt(o,i,l,a,r-s);s+=o.length+1}}else gt(t,i,l,a,r);return s&&l.length<2e3&&e.set(t,l),l}const wt={brackets:["(","[","{","'",'"'],before:")]}:;>",stringPrefixes:[]},yt=n.StateEffect.define({map(t,e){let i=e.mapPos(t,-1,n.MapMode.TrackAfter);return null==i?void 0:i}}),bt=new class extends n.RangeValue{};bt.startSide=1,bt.endSide=-1;const St=n.StateField.define({create:()=>n.RangeSet.empty,update(t,e){if(t=t.map(e.changes),e.selection){let i=e.state.doc.lineAt(e.selection.main.head);t=t.update({filter:t=>t>=i.from&&t<=i.to})}for(let i of e.effects)i.is(yt)&&(t=t.update({add:[bt.range(i.value,i.value+1)]}));return t}}),xt="()[]{}<>";function Ct(t){for(let e=0;e<xt.length;e+=2)if(xt.charCodeAt(e)==t)return xt.charAt(e+1);return n.fromCodePoint(t<128?t:t+1)}function kt(t,e){return t.languageDataAt("closeBrackets",e)[0]||wt}const At="object"==typeof navigator&&/Android\b/.test(navigator.userAgent),Et=r.EditorView.inputHandler.of(((t,e,i,r)=>{if((At?t.composing:t.compositionStarted)||t.state.readOnly)return!1;let s=t.state.selection.main;if(r.length>2||2==r.length&&1==n.codePointSize(n.codePointAt(r,0))||e!=s.from||i!=s.to)return!1;let o=Nt(t.state,r);return!!o&&(t.dispatch(o),!0)})),Tt=({state:t,dispatch:e})=>{if(t.readOnly)return!1;let i=kt(t,t.selection.main.head).brackets||wt.brackets,r=null,s=t.changeByRange((e=>{if(e.empty){let r=function(t,e){let i=t.sliceString(e-2,e);return n.codePointSize(n.codePointAt(i,0))==i.length?i:i.slice(1)}(t.doc,e.head);for(let s of i)if(s==r&&Ot(t.doc,e.head)==Ct(n.codePointAt(s,0)))return{changes:{from:e.head-s.length,to:e.head+s.length},range:n.EditorSelection.cursor(e.head-s.length)}}return{range:r=e}}));return r||e(t.update(s,{scrollIntoView:!0,userEvent:"delete.backward"})),!r},Mt=[{key:"Backspace",run:Tt}];function Nt(t,e){let i=kt(t,t.selection.main.head),r=i.brackets||wt.brackets;for(let s of r){let o=Ct(n.codePointAt(s,0));if(e==s)return o==s?Rt(t,s,r.indexOf(s+s+s)>-1,i):Dt(t,s,o,i.before||wt.before);if(e==o&&Pt(t,t.selection.main.from))return Lt(t,0,o)}return null}function Pt(t,e){let i=!1;return t.field(St).between(0,t.doc.length,(t=>{t==e&&(i=!0)})),i}function Ot(t,e){let i=t.sliceString(e,e+2);return i.slice(0,n.codePointSize(n.codePointAt(i,0)))}function Dt(t,e,i,r){let s=null,o=t.changeByRange((o=>{if(!o.empty)return{changes:[{insert:e,from:o.from},{insert:i,from:o.to}],effects:yt.of(o.to+e.length),range:n.EditorSelection.range(o.anchor+e.length,o.head+e.length)};let l=Ot(t.doc,o.head);return!l||/\s/.test(l)||r.indexOf(l)>-1?{changes:{insert:e+i,from:o.head},effects:yt.of(o.head+e.length),range:n.EditorSelection.cursor(o.head+e.length)}:{range:s=o}}));return s?null:t.update(o,{scrollIntoView:!0,userEvent:"input.type"})}function Lt(t,e,i){let r=null,s=t.changeByRange((e=>e.empty&&Ot(t.doc,e.head)==i?{changes:{from:e.head,to:e.head+i.length,insert:i},range:n.EditorSelection.cursor(e.head+i.length)}:r={range:e}));return r?null:t.update(s,{scrollIntoView:!0,userEvent:"input.type"})}function Rt(t,e,i,r){let o=r.stringPrefixes||wt.stringPrefixes,l=null,a=t.changeByRange((r=>{if(!r.empty)return{changes:[{insert:e,from:r.from},{insert:e,from:r.to}],effects:yt.of(r.to+e.length),range:n.EditorSelection.range(r.anchor+e.length,r.head+e.length)};let a,h=r.head,c=Ot(t.doc,h);if(c==e){if(It(t,h))return{changes:{insert:e+e,from:h},effects:yt.of(h+e.length),range:n.EditorSelection.cursor(h+e.length)};if(Pt(t,h)){let r=i&&t.sliceDoc(h,h+3*e.length)==e+e+e?e+e+e:e;return{changes:{from:h,to:h+r.length,insert:r},range:n.EditorSelection.cursor(h+r.length)}}}else{if(i&&t.sliceDoc(h-2*e.length,h)==e+e&&(a=Bt(t,h-2*e.length,o))>-1&&It(t,a))return{changes:{insert:e+e+e+e,from:h},effects:yt.of(h+e.length),range:n.EditorSelection.cursor(h+e.length)};if(t.charCategorizer(h)(c)!=n.CharCategory.Word&&Bt(t,h,o)>-1&&!function(t,e,i,n){let r=s.syntaxTree(t).resolveInner(e,-1),o=n.reduce(((t,e)=>Math.max(t,e.length)),0);for(let s=0;s<5;s++){let s=t.sliceDoc(r.from,Math.min(r.to,r.from+i.length+o)),l=s.indexOf(i);if(!l||l>-1&&n.indexOf(s.slice(0,l))>-1){let e=r.firstChild;for(;e&&e.from==r.from&&e.to-e.from>i.length+l;){if(t.sliceDoc(e.to-i.length,e.to)==i)return!1;e=e.firstChild}return!0}let a=r.to==e&&r.parent;if(!a)break;r=a}return!1}(t,h,e,o))return{changes:{insert:e+e,from:h},effects:yt.of(h+e.length),range:n.EditorSelection.cursor(h+e.length)}}return{range:l=r}}));return l?null:t.update(a,{scrollIntoView:!0,userEvent:"input.type"})}function It(t,e){let i=s.syntaxTree(t).resolveInner(e+1);return i.parent&&i.from==e}function Bt(t,e,i){let r=t.charCategorizer(e);if(r(t.sliceDoc(e-1,e))!=n.CharCategory.Word)return e;for(let s of i){let i=e-s.length;if(t.sliceDoc(i,e)==s&&r(t.sliceDoc(i-1,i))!=n.CharCategory.Word)return i}return-1}const Ft=[{key:"Ctrl-Space",run:W},{key:"Escape",run:z},{key:"ArrowDown",run:V(!0)},{key:"ArrowUp",run:V(!1)},{key:"PageDown",run:V(!0,"page")},{key:"PageUp",run:V(!1,"page")},{key:"Enter",run:H}],_t=n.Prec.highest(r.keymap.computeN([b],(t=>t.facet(b).defaultKeymap?[Ft]:[]))),qt=new WeakMap;e.CompletionContext=o,e.acceptCompletion=H,e.autocompletion=function(t={}){return[G,F,b.of(t),U,_t,$]},e.clearSnippet=lt,e.closeBrackets=function(){return[Et,St]},e.closeBracketsKeymap=Mt,e.closeCompletion=z,e.completeAnyWord=t=>{let e=t.state.languageDataAt("wordChars",t.pos).join(""),i=function(t){let e=t.replace(/[\]\-\\]/g,"\\$&");try{return new RegExp(`[\\p{Alphabetic}\\p{Number}_${e}]+`,"ug")}catch(t){return new RegExp(`[w${e}]`,"g")}}(e),n=t.matchBefore(pt(i,(t=>t+"$")));if(!n&&!t.explicit)return null;let r=n?n.from:t.pos,s=vt(t.state.doc,function(t){return mt[t]||(mt[t]=new WeakMap)}(e),i,5e4,r);return{from:r,options:s,validFor:pt(i,(t=>"^"+t))}},e.completeFromList=a,e.completionKeymap=Ft,e.completionStatus=function(t){let e=t.field(F,!1);return e&&e.active.some((t=>1==t.state))?"pending":e&&e.active.some((t=>0!=t.state))?"active":null},e.currentCompletions=function(t){var e;let i=null===(e=t.field(F,!1))||void 0===e?void 0:e.open;if(!i||i.disabled)return[];let n=qt.get(i.options);return n||qt.set(i.options,n=i.options.map((t=>t.completion))),n},e.deleteBracketPair=Tt,e.hasNextSnippetField=function(t){let e=t.field(nt,!1);return!(!e||!e.ranges.some((t=>t.field==e.active+1)))},e.hasPrevSnippetField=function(t){let e=t.field(nt,!1);return!!(e&&e.active>0)},e.ifIn=function(t,e){return i=>{for(let n=s.syntaxTree(i.state).resolveInner(i.pos,-1);n;n=n.parent){if(t.indexOf(n.name)>-1)return e(i);if(n.type.isTop)break}return null}},e.ifNotIn=function(t,e){return i=>{for(let e=s.syntaxTree(i.state).resolveInner(i.pos,-1);e;e=e.parent){if(t.indexOf(e.name)>-1)return null;if(e.type.isTop)break}return e(i)}},e.insertBracket=Nt,e.insertCompletionText=f,e.moveCompletionSelection=V,e.nextSnippetField=at,e.pickedCompletion=d,e.prevSnippetField=ht,e.selectedCompletion=function(t){var e;let i=null===(e=t.field(F,!1))||void 0===e?void 0:e.open;return i&&!i.disabled&&i.selected>=0?i.options[i.selected].completion:null},e.selectedCompletionIndex=function(t){var e;let i=null===(e=t.field(F,!1))||void 0===e?void 0:e.open;return i&&!i.disabled&&i.selected>=0?i.selected:null},e.setSelectedCompletion=function(t){return B.of(t)},e.snippet=st,e.snippetCompletion=function(t,e){return Object.assign(Object.assign({},e),{apply:st(t)})},e.snippetKeymap=ut,e.startCompletion=W},9277:(t,e,i)=>{"use strict";var n=i(9064),r=i(1506),s=i(2533),o=i(2696);const l=t=>{let{state:e}=t,i=e.doc.lineAt(e.selection.main.from),n=g(t.state,i.from);return n.line?h(t):!!n.block&&m(t)};function a(t,e){return({state:i,dispatch:n})=>{if(i.readOnly)return!1;let r=t(e,i);return!!r&&(n(i.update(r)),!0)}}const h=a(y,0),c=a(y,1),u=a(y,2),d=a(w,0),f=a(w,1),p=a(w,2),m=a(((t,e)=>w(t,e,function(t){let e=[];for(let i of t.selection.ranges){let n=t.doc.lineAt(i.from),r=i.to<=n.to?n:t.doc.lineAt(i.to),s=e.length-1;s>=0&&e[s].to>n.from?e[s].to=r.to:e.push({from:n.from+/^\s*/.exec(n.text)[0].length,to:r.to})}return e}(e))),0);function g(t,e){let i=t.languageDataAt("commentTokens",e);return i.length?i[0]:{}}const v=50;function w(t,e,i=e.selection.ranges){let n=i.map((t=>g(e,t.from).block));if(!n.every((t=>t)))return null;let r=i.map(((t,i)=>function(t,{open:e,close:i},n,r){let s,o,l=t.sliceDoc(n-v,n),a=t.sliceDoc(r,r+v),h=/\s*$/.exec(l)[0].length,c=/^\s*/.exec(a)[0].length,u=l.length-h;if(l.slice(u-e.length,u)==e&&a.slice(c,c+i.length)==i)return{open:{pos:n-h,margin:h&&1},close:{pos:r+c,margin:c&&1}};r-n<=2*v?s=o=t.sliceDoc(n,r):(s=t.sliceDoc(n,n+v),o=t.sliceDoc(r-v,r));let d=/^\s*/.exec(s)[0].length,f=/\s*$/.exec(o)[0].length,p=o.length-f-i.length;return s.slice(d,d+e.length)==e&&o.slice(p,p+i.length)==i?{open:{pos:n+d+e.length,margin:/\s/.test(s.charAt(d+e.length))?1:0},close:{pos:r-f-i.length,margin:/\s/.test(o.charAt(p-1))?1:0}}:null}(e,n[i],t.from,t.to)));if(2!=t&&!r.every((t=>t)))return{changes:e.changes(i.map(((t,e)=>r[e]?[]:[{from:t.from,insert:n[e].open+" "},{from:t.to,insert:" "+n[e].close}])))};if(1!=t&&r.some((t=>t))){let t=[];for(let e,i=0;i<r.length;i++)if(e=r[i]){let r=n[i],{open:s,close:o}=e;t.push({from:s.pos-r.open.length,to:s.pos+s.margin},{from:o.pos-o.margin,to:o.pos+r.close.length})}return{changes:t}}return null}function y(t,e,i=e.selection.ranges){let n=[],r=-1;for(let{from:t,to:s}of i){let i=n.length,o=1e9,l=g(e,t).line;if(l){for(let i=t;i<=s;){let a=e.doc.lineAt(i);if(a.from>r&&(t==s||s>a.from)){r=a.from;let t=/^\s*/.exec(a.text)[0].length,e=t==a.length,i=a.text.slice(t,t+l.length)==l?t:-1;t<a.text.length&&t<o&&(o=t),n.push({line:a,comment:i,token:l,indent:t,empty:e,single:!1})}i=a.to+1}if(o<1e9)for(let t=i;t<n.length;t++)n[t].indent<n[t].line.text.length&&(n[t].indent=o);n.length==i+1&&(n[i].single=!0)}}if(2!=t&&n.some((t=>t.comment<0&&(!t.empty||t.single)))){let t=[];for(let{line:e,token:i,indent:r,empty:s,single:o}of n)!o&&s||t.push({from:e.from+r,insert:i+" "});let i=e.changes(t);return{changes:i,selection:e.selection.map(i,1)}}if(1!=t&&n.some((t=>t.comment>=0))){let t=[];for(let{line:e,comment:i,token:r}of n)if(i>=0){let n=e.from+i,s=n+r.length;" "==e.text[s-e.from]&&s++,t.push({from:n,to:s})}return{changes:t}}return null}const b=n.Annotation.define(),S=n.Annotation.define(),x=n.Facet.define(),C=n.Facet.define({combine:t=>n.combineConfig(t,{minDepth:100,newGroupDelay:500,joinToEvent:(t,e)=>e},{minDepth:Math.max,newGroupDelay:Math.min,joinToEvent:(t,e)=>(i,n)=>t(i,n)||e(i,n)})}),k=n.StateField.define({create:()=>j.empty,update(t,e){let i=e.state.facet(C),r=e.annotation(b);if(r){let n=R.fromTransaction(e,r.selection),s=r.side,o=0==s?t.undone:t.done;return o=n?I(o,o.length,i.minDepth,n):q(o,e.startState.selection),new j(0==s?r.rest:o,0==s?o:r.rest)}let s=e.annotation(S);if("full"!=s&&"before"!=s||(t=t.isolate()),!1===e.annotation(n.Transaction.addToHistory))return e.changes.empty?t:t.addMapping(e.changes.desc);let o=R.fromTransaction(e),l=e.annotation(n.Transaction.time),a=e.annotation(n.Transaction.userEvent);return o?t=t.addChanges(o,l,a,i,e):e.selection&&(t=t.addSelection(e.startState.selection,l,a,i.newGroupDelay)),"full"!=s&&"after"!=s||(t=t.isolate()),t},toJSON:t=>({done:t.done.map((t=>t.toJSON())),undone:t.undone.map((t=>t.toJSON()))}),fromJSON:t=>new j(t.done.map(R.fromJSON),t.undone.map(R.fromJSON))}),A=k;function E(t,e){return function({state:i,dispatch:n}){if(!e&&i.readOnly)return!1;let r=i.field(k,!1);if(!r)return!1;let s=r.pop(t,i,e);return!!s&&(n(s),!0)}}const T=E(0,!1),M=E(1,!1),N=E(0,!0),P=E(1,!0);function O(t){return function(e){let i=e.field(k,!1);if(!i)return 0;let n=0==t?i.done:i.undone;return n.length-(n.length&&!n[0].changes?1:0)}}const D=O(0),L=O(1);class R{constructor(t,e,i,n,r){this.changes=t,this.effects=e,this.mapped=i,this.startSelection=n,this.selectionsAfter=r}setSelAfter(t){return new R(this.changes,this.effects,this.mapped,this.startSelection,t)}toJSON(){var t,e,i;return{changes:null===(t=this.changes)||void 0===t?void 0:t.toJSON(),mapped:null===(e=this.mapped)||void 0===e?void 0:e.toJSON(),startSelection:null===(i=this.startSelection)||void 0===i?void 0:i.toJSON(),selectionsAfter:this.selectionsAfter.map((t=>t.toJSON()))}}static fromJSON(t){return new R(t.changes&&n.ChangeSet.fromJSON(t.changes),[],t.mapped&&n.ChangeDesc.fromJSON(t.mapped),t.startSelection&&n.EditorSelection.fromJSON(t.startSelection),t.selectionsAfter.map(n.EditorSelection.fromJSON))}static fromTransaction(t,e){let i=F;for(let e of t.startState.facet(x)){let n=e(t);n.length&&(i=i.concat(n))}return!i.length&&t.changes.empty?null:new R(t.changes.invert(t.startState.doc),i,void 0,e||t.startState.selection,F)}static selection(t){return new R(void 0,F,void 0,void 0,t)}}function I(t,e,i,n){let r=e+1>i+20?e-i-1:0,s=t.slice(r,e);return s.push(n),s}function B(t,e){return t.length?e.length?t.concat(e):t:e}const F=[],_=200;function q(t,e){if(t.length){let i=t[t.length-1],n=i.selectionsAfter.slice(Math.max(0,i.selectionsAfter.length-_));return n.length&&n[n.length-1].eq(e)?t:(n.push(e),I(t,t.length-1,1e9,i.setSelAfter(n)))}return[R.selection([e])]}function V(t){let e=t[t.length-1],i=t.slice();return i[t.length-1]=e.setSelAfter(e.selectionsAfter.slice(0,e.selectionsAfter.length-1)),i}function H(t,e){if(!t.length)return t;let i=t.length,n=F;for(;i;){let r=W(t[i-1],e,n);if(r.changes&&!r.changes.empty||r.effects.length){let e=t.slice(0,i);return e[i-1]=r,e}e=r.mapped,i--,n=r.selectionsAfter}return n.length?[R.selection(n)]:F}function W(t,e,i){let r=B(t.selectionsAfter.length?t.selectionsAfter.map((t=>t.map(e))):F,i);if(!t.changes)return R.selection(r);let s=t.changes.map(e),o=e.mapDesc(t.changes,!0),l=t.mapped?t.mapped.composeDesc(o):o;return new R(s,n.StateEffect.mapEffects(t.effects,e),l,t.startSelection.map(o),r)}const z=/^(input\.type|delete)($|\.)/;class j{constructor(t,e,i=0,n=void 0){this.done=t,this.undone=e,this.prevTime=i,this.prevUserEvent=n}isolate(){return this.prevTime?new j(this.done,this.undone):this}addChanges(t,e,i,n,r){let s=this.done,o=s[s.length-1];return s=o&&o.changes&&!o.changes.empty&&t.changes&&(!i||z.test(i))&&(!o.selectionsAfter.length&&e-this.prevTime<n.newGroupDelay&&n.joinToEvent(r,function(t,e){let i=[],n=!1;return t.iterChangedRanges(((t,e)=>i.push(t,e))),e.iterChangedRanges(((t,e,r,s)=>{for(let t=0;t<i.length;){let e=i[t++],o=i[t++];s>=e&&r<=o&&(n=!0)}})),n}(o.changes,t.changes))||"input.type.compose"==i)?I(s,s.length-1,n.minDepth,new R(t.changes.compose(o.changes),B(t.effects,o.effects),o.mapped,o.startSelection,F)):I(s,s.length,n.minDepth,t),new j(s,F,e,i)}addSelection(t,e,i,n){let r=this.done.length?this.done[this.done.length-1].selectionsAfter:F;return r.length>0&&e-this.prevTime<n&&i==this.prevUserEvent&&i&&/^select($|\.)/.test(i)&&(s=r[r.length-1],o=t,s.ranges.length==o.ranges.length&&0===s.ranges.filter(((t,e)=>t.empty!=o.ranges[e].empty)).length)?this:new j(q(this.done,t),this.undone,e,i);var s,o}addMapping(t){return new j(H(this.done,t),H(this.undone,t),this.prevTime,this.prevUserEvent)}pop(t,e,i){let n=0==t?this.done:this.undone;if(0==n.length)return null;let r=n[n.length-1],s=r.selectionsAfter[0]||e.selection;if(i&&r.selectionsAfter.length)return e.update({selection:r.selectionsAfter[r.selectionsAfter.length-1],annotations:b.of({side:t,rest:V(n),selection:s}),userEvent:0==t?"select.undo":"select.redo",scrollIntoView:!0});if(r.changes){let i=1==n.length?F:n.slice(0,n.length-1);return r.mapped&&(i=H(i,r.mapped)),e.update({changes:r.changes,selection:r.startSelection,effects:r.effects,annotations:b.of({side:t,rest:i,selection:s}),filter:!1,userEvent:0==t?"undo":"redo",scrollIntoView:!0})}return null}}j.empty=new j(F,F);const U=[{key:"Mod-z",run:T,preventDefault:!0},{key:"Mod-y",mac:"Mod-Shift-z",run:M,preventDefault:!0},{linux:"Ctrl-Shift-z",run:M,preventDefault:!0},{key:"Mod-u",run:N,preventDefault:!0},{key:"Alt-u",mac:"Mod-Shift-u",run:P,preventDefault:!0}];function K(t,e){return n.EditorSelection.create(t.ranges.map(e),t.mainIndex)}function G(t,e){return t.update({selection:e,scrollIntoView:!0,userEvent:"select"})}function $({state:t,dispatch:e},i){let n=K(t.selection,i);return!n.eq(t.selection,!0)&&(e(G(t,n)),!0)}function Y(t,e){return n.EditorSelection.cursor(e?t.to:t.from)}function J(t,e){return $(t,(i=>i.empty?t.moveByChar(i,e):Y(i,e)))}function X(t){return t.textDirectionAt(t.state.selection.main.head)==r.Direction.LTR}const Z=t=>J(t,!X(t)),Q=t=>J(t,X(t));function tt(t,e){return $(t,(i=>i.empty?t.moveByGroup(i,e):Y(i,e)))}const et=t=>tt(t,!X(t)),it=t=>tt(t,X(t)),nt="undefined"!=typeof Intl&&Intl.Segmenter?new Intl.Segmenter(void 0,{granularity:"word"}):null;function rt(t,e,i){let r=t.state.charCategorizer(e.from),s=n.CharCategory.Space,o=e.from,l=0,a=!1,h=!1,c=!1,u=e=>{if(a)return!1;o+=i?e.length:-e.length;let u,d=r(e);if(d==n.CharCategory.Word&&e.charCodeAt(0)<128&&/[\W_]/.test(e)&&(d=-1),s==n.CharCategory.Space&&(s=d),s!=d)return!1;if(s==n.CharCategory.Word)if(e.toLowerCase()==e){if(!i&&h)return!1;c=!0}else if(c){if(i)return!1;a=!0}else{if(h&&i&&r(u=t.state.sliceDoc(o,o+1))==n.CharCategory.Word&&u.toLowerCase()==u)return!1;h=!0}return l++,!0},d=t.moveByChar(e,i,(t=>(u(t),u)));if(nt&&s==n.CharCategory.Word&&d.from==e.from+l*(i?1:-1)){let r=Math.min(e.head,d.head),s=Math.max(e.head,d.head),o=t.state.sliceDoc(r,s);if(o.length>1&&/[\u4E00-\uffff]/.test(o)){let t=Array.from(nt.segment(o));if(t.length>1)return i?n.EditorSelection.cursor(e.head+t[1].index,-1):n.EditorSelection.cursor(d.head+t[t.length-1].index,1)}}return d}function st(t,e){return $(t,(i=>i.empty?rt(t,i,e):Y(i,e)))}function ot(t,e,i){if(e.type.prop(i))return!0;let n=e.to-e.from;return n&&(n>2||/[^\s,.;:]/.test(t.sliceDoc(e.from,e.to)))||e.firstChild}function lt(t,e,i){let r,l,a=s.syntaxTree(t).resolveInner(e.head),h=i?o.NodeProp.closedBy:o.NodeProp.openedBy;for(let n=e.head;;){let e=i?a.childAfter(n):a.childBefore(n);if(!e)break;ot(t,e,h)?a=e:n=i?e.to:e.from}return l=a.type.prop(h)&&(r=i?s.matchBrackets(t,a.from,1):s.matchBrackets(t,a.to,-1))&&r.matched?i?r.end.to:r.end.from:i?a.to:a.from,n.EditorSelection.cursor(l,i?-1:1)}const at=t=>$(t,(e=>lt(t.state,e,!X(t)))),ht=t=>$(t,(e=>lt(t.state,e,X(t))));function ct(t,e){return $(t,(i=>{if(!i.empty)return Y(i,e);let n=t.moveVertically(i,e);return n.head!=i.head?n:t.moveToLineBoundary(i,e)}))}const ut=t=>ct(t,!1),dt=t=>ct(t,!0);function ft(t){let e,i=t.scrollDOM.clientHeight<t.scrollDOM.scrollHeight-2,n=0,s=0;if(i){for(let e of t.state.facet(r.EditorView.scrollMargins)){let i=e(t);(null==i?void 0:i.top)&&(n=Math.max(null==i?void 0:i.top,n)),(null==i?void 0:i.bottom)&&(s=Math.max(null==i?void 0:i.bottom,s))}e=t.scrollDOM.clientHeight-n-s}else e=(t.dom.ownerDocument.defaultView||window).innerHeight;return{marginTop:n,marginBottom:s,selfScroll:i,height:Math.max(t.defaultLineHeight,e-5)}}function pt(t,e){let i,n=ft(t),{state:s}=t,o=K(s.selection,(i=>i.empty?t.moveVertically(i,e,n.height):Y(i,e)));if(o.eq(s.selection))return!1;if(n.selfScroll){let e=t.coordsAtPos(s.selection.main.head),l=t.scrollDOM.getBoundingClientRect(),a=l.top+n.marginTop,h=l.bottom-n.marginBottom;e&&e.top>a&&e.bottom<h&&(i=r.EditorView.scrollIntoView(o.main.head,{y:"start",yMargin:e.top-a}))}return t.dispatch(G(s,o),{effects:i}),!0}const mt=t=>pt(t,!1),gt=t=>pt(t,!0);function vt(t,e,i){let r=t.lineBlockAt(e.head),s=t.moveToLineBoundary(e,i);if(s.head==e.head&&s.head!=(i?r.to:r.from)&&(s=t.moveToLineBoundary(e,i,!1)),!i&&s.head==r.from&&r.length){let i=/^\s*/.exec(t.state.sliceDoc(r.from,Math.min(r.from+100,r.to)))[0].length;i&&e.head!=r.from+i&&(s=n.EditorSelection.cursor(r.from+i))}return s}const wt=t=>$(t,(e=>vt(t,e,!0))),yt=t=>$(t,(e=>vt(t,e,!1))),bt=t=>$(t,(e=>vt(t,e,!X(t)))),St=t=>$(t,(e=>vt(t,e,X(t)))),xt=t=>$(t,(e=>n.EditorSelection.cursor(t.lineBlockAt(e.head).from,1))),Ct=t=>$(t,(e=>n.EditorSelection.cursor(t.lineBlockAt(e.head).to,-1)));function kt(t,e,i){let r=!1,o=K(t.selection,(e=>{let o=s.matchBrackets(t,e.head,-1)||s.matchBrackets(t,e.head,1)||e.head>0&&s.matchBrackets(t,e.head-1,1)||e.head<t.doc.length&&s.matchBrackets(t,e.head+1,-1);if(!o||!o.end)return e;r=!0;let l=o.start.from==e.head?o.end.to:o.end.from;return i?n.EditorSelection.range(e.anchor,l):n.EditorSelection.cursor(l)}));return!!r&&(e(G(t,o)),!0)}const At=({state:t,dispatch:e})=>kt(t,e,!1);function Et(t,e){let i=K(t.state.selection,(t=>{let i=e(t);return n.EditorSelection.range(t.anchor,i.head,i.goalColumn,i.bidiLevel||void 0)}));return!i.eq(t.state.selection)&&(t.dispatch(G(t.state,i)),!0)}function Tt(t,e){return Et(t,(i=>t.moveByChar(i,e)))}const Mt=t=>Tt(t,!X(t)),Nt=t=>Tt(t,X(t));function Pt(t,e){return Et(t,(i=>t.moveByGroup(i,e)))}const Ot=t=>Pt(t,!X(t)),Dt=t=>Pt(t,X(t));function Lt(t,e){return Et(t,(i=>rt(t,i,e)))}const Rt=t=>Et(t,(e=>lt(t.state,e,!X(t)))),It=t=>Et(t,(e=>lt(t.state,e,X(t))));function Bt(t,e){return Et(t,(i=>t.moveVertically(i,e)))}const Ft=t=>Bt(t,!1),_t=t=>Bt(t,!0);function qt(t,e){return Et(t,(i=>t.moveVertically(i,e,ft(t).height)))}const Vt=t=>qt(t,!1),Ht=t=>qt(t,!0),Wt=t=>Et(t,(e=>vt(t,e,!0))),zt=t=>Et(t,(e=>vt(t,e,!1))),jt=t=>Et(t,(e=>vt(t,e,!X(t)))),Ut=t=>Et(t,(e=>vt(t,e,X(t)))),Kt=t=>Et(t,(e=>n.EditorSelection.cursor(t.lineBlockAt(e.head).from))),Gt=t=>Et(t,(e=>n.EditorSelection.cursor(t.lineBlockAt(e.head).to))),$t=({state:t,dispatch:e})=>(e(G(t,{anchor:0})),!0),Yt=({state:t,dispatch:e})=>(e(G(t,{anchor:t.doc.length})),!0),Jt=({state:t,dispatch:e})=>(e(G(t,{anchor:t.selection.main.anchor,head:0})),!0),Xt=({state:t,dispatch:e})=>(e(G(t,{anchor:t.selection.main.anchor,head:t.doc.length})),!0),Zt=({state:t,dispatch:e})=>(e(t.update({selection:{anchor:0,head:t.doc.length},userEvent:"select"})),!0),Qt=({state:t,dispatch:e})=>{let i=me(t).map((({from:e,to:i})=>n.EditorSelection.range(e,Math.min(i+1,t.doc.length))));return e(t.update({selection:n.EditorSelection.create(i),userEvent:"select"})),!0},te=({state:t,dispatch:e})=>{let i=K(t.selection,(e=>{var i;for(let r=s.syntaxTree(t).resolveStack(e.from,1);r;r=r.next){let{node:t}=r;if((t.from<e.from&&t.to>=e.to||t.to>e.to&&t.from<=e.from)&&(null===(i=t.parent)||void 0===i?void 0:i.parent))return n.EditorSelection.range(t.to,t.from)}return e}));return e(G(t,i)),!0},ee=({state:t,dispatch:e})=>{let i=t.selection,r=null;return i.ranges.length>1?r=n.EditorSelection.create([i.main]):i.main.empty||(r=n.EditorSelection.create([n.EditorSelection.cursor(i.main.head)])),!!r&&(e(G(t,r)),!0)};function ie(t,e){if(t.state.readOnly)return!1;let i="delete.selection",{state:s}=t,o=s.changeByRange((r=>{let{from:s,to:o}=r;if(s==o){let n=e(r);n<s?(i="delete.backward",n=ne(t,n,!1)):n>s&&(i="delete.forward",n=ne(t,n,!0)),s=Math.min(s,n),o=Math.max(o,n)}else s=ne(t,s,!1),o=ne(t,o,!0);return s==o?{range:r}:{changes:{from:s,to:o},range:n.EditorSelection.cursor(s,s<r.head?-1:1)}}));return!o.changes.empty&&(t.dispatch(s.update(o,{scrollIntoView:!0,userEvent:i,effects:"delete.selection"==i?r.EditorView.announce.of(s.phrase("Selection deleted")):void 0})),!0)}function ne(t,e,i){if(t instanceof r.EditorView)for(let n of t.state.facet(r.EditorView.atomicRanges).map((e=>e(t))))n.between(e,e,((t,n)=>{t<e&&n>e&&(e=i?n:t)}));return e}const re=(t,e,i)=>ie(t,(r=>{let o,l,a=r.from,{state:h}=t,c=h.doc.lineAt(a);if(i&&!e&&a>c.from&&a<c.from+200&&!/[^ \t]/.test(o=c.text.slice(0,a-c.from))){if("\t"==o[o.length-1])return a-1;let t=n.countColumn(o,h.tabSize)%s.getIndentUnit(h)||s.getIndentUnit(h);for(let e=0;e<t&&" "==o[o.length-1-e];e++)a--;l=a}else l=n.findClusterBreak(c.text,a-c.from,e,e)+c.from,l==a&&c.number!=(e?h.doc.lines:1)?l+=e?1:-1:!e&&/[\ufe00-\ufe0f]/.test(c.text.slice(l-c.from,a-c.from))&&(l=n.findClusterBreak(c.text,l-c.from,!1,!1)+c.from);return l})),se=t=>re(t,!1,!0),oe=t=>re(t,!0,!1),le=(t,e)=>ie(t,(i=>{let r=i.head,{state:s}=t,o=s.doc.lineAt(r),l=s.charCategorizer(r);for(let t=null;;){if(r==(e?o.to:o.from)){r==i.head&&o.number!=(e?s.doc.lines:1)&&(r+=e?1:-1);break}let a=n.findClusterBreak(o.text,r-o.from,e)+o.from,h=o.text.slice(Math.min(r,a)-o.from,Math.max(r,a)-o.from),c=l(h);if(null!=t&&c!=t)break;" "==h&&r==i.head||(t=c),r=a}return r})),ae=t=>le(t,!1),he=t=>le(t,!0),ce=t=>ie(t,(e=>{let i=t.lineBlockAt(e.head).to;return e.head<i?i:Math.min(t.state.doc.length,e.head+1)})),ue=t=>ie(t,(e=>{let i=t.moveToLineBoundary(e,!1).head;return e.head>i?i:Math.max(0,e.head-1)})),de=t=>ie(t,(e=>{let i=t.moveToLineBoundary(e,!0).head;return e.head<i?i:Math.min(t.state.doc.length,e.head+1)})),fe=({state:t,dispatch:e})=>{if(t.readOnly)return!1;let i=t.changeByRange((t=>({changes:{from:t.from,to:t.to,insert:n.Text.of(["",""])},range:n.EditorSelection.cursor(t.from)})));return e(t.update(i,{scrollIntoView:!0,userEvent:"input"})),!0},pe=({state:t,dispatch:e})=>{if(t.readOnly)return!1;let i=t.changeByRange((e=>{if(!e.empty||0==e.from||e.from==t.doc.length)return{range:e};let i=e.from,r=t.doc.lineAt(i),s=i==r.from?i-1:n.findClusterBreak(r.text,i-r.from,!1)+r.from,o=i==r.to?i+1:n.findClusterBreak(r.text,i-r.from,!0)+r.from;return{changes:{from:s,to:o,insert:t.doc.slice(i,o).append(t.doc.slice(s,i))},range:n.EditorSelection.cursor(o)}}));return!i.changes.empty&&(e(t.update(i,{scrollIntoView:!0,userEvent:"move.character"})),!0)};function me(t){let e=[],i=-1;for(let n of t.selection.ranges){let r=t.doc.lineAt(n.from),s=t.doc.lineAt(n.to);if(n.empty||n.to!=s.from||(s=t.doc.lineAt(n.to-1)),i>=r.number){let t=e[e.length-1];t.to=s.to,t.ranges.push(n)}else e.push({from:r.from,to:s.to,ranges:[n]});i=s.number+1}return e}function ge(t,e,i){if(t.readOnly)return!1;let r=[],s=[];for(let e of me(t)){if(i?e.to==t.doc.length:0==e.from)continue;let o=t.doc.lineAt(i?e.to+1:e.from-1),l=o.length+1;if(i){r.push({from:e.to,to:o.to},{from:e.from,insert:o.text+t.lineBreak});for(let i of e.ranges)s.push(n.EditorSelection.range(Math.min(t.doc.length,i.anchor+l),Math.min(t.doc.length,i.head+l)))}else{r.push({from:o.from,to:e.from},{from:e.to,insert:t.lineBreak+o.text});for(let t of e.ranges)s.push(n.EditorSelection.range(t.anchor-l,t.head-l))}}return!!r.length&&(e(t.update({changes:r,scrollIntoView:!0,selection:n.EditorSelection.create(s,t.selection.mainIndex),userEvent:"move.line"})),!0)}const ve=({state:t,dispatch:e})=>ge(t,e,!1),we=({state:t,dispatch:e})=>ge(t,e,!0);function ye(t,e,i){if(t.readOnly)return!1;let n=[];for(let e of me(t))i?n.push({from:e.from,insert:t.doc.slice(e.from,e.to)+t.lineBreak}):n.push({from:e.to,insert:t.lineBreak+t.doc.slice(e.from,e.to)});return e(t.update({changes:n,scrollIntoView:!0,userEvent:"input.copyline"})),!0}const be=({state:t,dispatch:e})=>ye(t,e,!1),Se=({state:t,dispatch:e})=>ye(t,e,!0),xe=t=>{if(t.state.readOnly)return!1;let{state:e}=t,i=e.changes(me(e).map((({from:t,to:i})=>(t>0?t--:i<e.doc.length&&i++,{from:t,to:i})))),n=K(e.selection,(e=>{let i;if(t.lineWrapping){let n=t.lineBlockAt(e.head),r=t.coordsAtPos(e.head,e.assoc||1);r&&(i=n.bottom+t.documentTop-r.bottom+t.defaultLineHeight/2)}return t.moveVertically(e,!0,i)})).map(i);return t.dispatch({changes:i,selection:n,scrollIntoView:!0,userEvent:"delete.line"}),!0},Ce=Ae(!1),ke=Ae(!0);function Ae(t){return({state:e,dispatch:i})=>{if(e.readOnly)return!1;let r=e.changeByRange((i=>{let{from:r,to:l}=i,a=e.doc.lineAt(r),h=!t&&r==l&&function(t,e){if(/\(\)|\[\]|\{\}/.test(t.sliceDoc(e-1,e+1)))return{from:e,to:e};let i,n=s.syntaxTree(t).resolveInner(e),r=n.childBefore(e),l=n.childAfter(e);return r&&l&&r.to<=e&&l.from>=e&&(i=r.type.prop(o.NodeProp.closedBy))&&i.indexOf(l.name)>-1&&t.doc.lineAt(r.to).from==t.doc.lineAt(l.from).from&&!/\S/.test(t.sliceDoc(r.to,l.from))?{from:r.to,to:l.from}:null}(e,r);t&&(r=l=(l<=a.to?a:e.doc.lineAt(l)).to);let c=new s.IndentContext(e,{simulateBreak:r,simulateDoubleBreak:!!h}),u=s.getIndentation(c,r);for(null==u&&(u=n.countColumn(/^\s*/.exec(e.doc.lineAt(r).text)[0],e.tabSize));l<a.to&&/\s/.test(a.text[l-a.from]);)l++;h?({from:r,to:l}=h):r>a.from&&r<a.from+100&&!/\S/.test(a.text.slice(0,r))&&(r=a.from);let d=["",s.indentString(e,u)];return h&&d.push(s.indentString(e,c.lineIndent(a.from,-1))),{changes:{from:r,to:l,insert:n.Text.of(d)},range:n.EditorSelection.cursor(r+1+d[1].length)}}));return i(e.update(r,{scrollIntoView:!0,userEvent:"input"})),!0}}function Ee(t,e){let i=-1;return t.changeByRange((r=>{let s=[];for(let n=r.from;n<=r.to;){let o=t.doc.lineAt(n);o.number>i&&(r.empty||r.to>o.from)&&(e(o,s,r),i=o.number),n=o.to+1}let o=t.changes(s);return{changes:s,range:n.EditorSelection.range(o.mapPos(r.anchor,1),o.mapPos(r.head,1))}}))}const Te=({state:t,dispatch:e})=>{if(t.readOnly)return!1;let i=Object.create(null),n=new s.IndentContext(t,{overrideIndentation:t=>{let e=i[t];return null==e?-1:e}}),r=Ee(t,((e,r,o)=>{let l=s.getIndentation(n,e.from);if(null==l)return;/\S/.test(e.text)||(l=0);let a=/^\s*/.exec(e.text)[0],h=s.indentString(t,l);(a!=h||o.from<e.from+a.length)&&(i[e.from]=l,r.push({from:e.from,to:e.from+a.length,insert:h}))}));return r.changes.empty||e(t.update(r,{userEvent:"indent"})),!0},Me=({state:t,dispatch:e})=>!t.readOnly&&(e(t.update(Ee(t,((e,i)=>{i.push({from:e.from,insert:t.facet(s.indentUnit)})})),{userEvent:"input.indent"})),!0),Ne=({state:t,dispatch:e})=>!t.readOnly&&(e(t.update(Ee(t,((e,i)=>{let r=/^\s*/.exec(e.text)[0];if(!r)return;let o=n.countColumn(r,t.tabSize),l=0,a=s.indentString(t,Math.max(0,o-s.getIndentUnit(t)));for(;l<r.length&&l<a.length&&r.charCodeAt(l)==a.charCodeAt(l);)l++;i.push({from:e.from+l,to:e.from+r.length,insert:a.slice(l)})})),{userEvent:"delete.dedent"})),!0),Pe=t=>(t.setTabFocusMode(),!0),Oe=[{key:"Ctrl-b",run:Z,shift:Mt,preventDefault:!0},{key:"Ctrl-f",run:Q,shift:Nt},{key:"Ctrl-p",run:ut,shift:Ft},{key:"Ctrl-n",run:dt,shift:_t},{key:"Ctrl-a",run:xt,shift:Kt},{key:"Ctrl-e",run:Ct,shift:Gt},{key:"Ctrl-d",run:oe},{key:"Ctrl-h",run:se},{key:"Ctrl-k",run:ce},{key:"Ctrl-Alt-h",run:ae},{key:"Ctrl-o",run:fe},{key:"Ctrl-t",run:pe},{key:"Ctrl-v",run:gt}],De=[{key:"ArrowLeft",run:Z,shift:Mt,preventDefault:!0},{key:"Mod-ArrowLeft",mac:"Alt-ArrowLeft",run:et,shift:Ot,preventDefault:!0},{mac:"Cmd-ArrowLeft",run:bt,shift:jt,preventDefault:!0},{key:"ArrowRight",run:Q,shift:Nt,preventDefault:!0},{key:"Mod-ArrowRight",mac:"Alt-ArrowRight",run:it,shift:Dt,preventDefault:!0},{mac:"Cmd-ArrowRight",run:St,shift:Ut,preventDefault:!0},{key:"ArrowUp",run:ut,shift:Ft,preventDefault:!0},{mac:"Cmd-ArrowUp",run:$t,shift:Jt},{mac:"Ctrl-ArrowUp",run:mt,shift:Vt},{key:"ArrowDown",run:dt,shift:_t,preventDefault:!0},{mac:"Cmd-ArrowDown",run:Yt,shift:Xt},{mac:"Ctrl-ArrowDown",run:gt,shift:Ht},{key:"PageUp",run:mt,shift:Vt},{key:"PageDown",run:gt,shift:Ht},{key:"Home",run:yt,shift:zt,preventDefault:!0},{key:"Mod-Home",run:$t,shift:Jt},{key:"End",run:wt,shift:Wt,preventDefault:!0},{key:"Mod-End",run:Yt,shift:Xt},{key:"Enter",run:Ce},{key:"Mod-a",run:Zt},{key:"Backspace",run:se,shift:se},{key:"Delete",run:oe},{key:"Mod-Backspace",mac:"Alt-Backspace",run:ae},{key:"Mod-Delete",mac:"Alt-Delete",run:he},{mac:"Mod-Backspace",run:ue},{mac:"Mod-Delete",run:de}].concat(Oe.map((t=>({mac:t.key,run:t.run,shift:t.shift})))),Le=[{key:"Alt-ArrowLeft",mac:"Ctrl-ArrowLeft",run:at,shift:Rt},{key:"Alt-ArrowRight",mac:"Ctrl-ArrowRight",run:ht,shift:It},{key:"Alt-ArrowUp",run:ve},{key:"Shift-Alt-ArrowUp",run:be},{key:"Alt-ArrowDown",run:we},{key:"Shift-Alt-ArrowDown",run:Se},{key:"Escape",run:ee},{key:"Mod-Enter",run:ke},{key:"Alt-l",mac:"Ctrl-l",run:Qt},{key:"Mod-i",run:te,preventDefault:!0},{key:"Mod-[",run:Ne},{key:"Mod-]",run:Me},{key:"Mod-Alt-\\",run:Te},{key:"Shift-Mod-k",run:xe},{key:"Shift-Mod-\\",run:At},{key:"Mod-/",run:l},{key:"Alt-A",run:d},{key:"Ctrl-m",mac:"Shift-Alt-m",run:Pe}].concat(De),Re={key:"Tab",run:Me,shift:Ne};e.blockComment=f,e.blockUncomment=p,e.copyLineDown=Se,e.copyLineUp=be,e.cursorCharBackward=t=>J(t,!1),e.cursorCharForward=t=>J(t,!0),e.cursorCharLeft=Z,e.cursorCharRight=Q,e.cursorDocEnd=Yt,e.cursorDocStart=$t,e.cursorGroupBackward=t=>tt(t,!1),e.cursorGroupForward=t=>tt(t,!0),e.cursorGroupLeft=et,e.cursorGroupRight=it,e.cursorLineBoundaryBackward=yt,e.cursorLineBoundaryForward=wt,e.cursorLineBoundaryLeft=bt,e.cursorLineBoundaryRight=St,e.cursorLineDown=dt,e.cursorLineEnd=Ct,e.cursorLineStart=xt,e.cursorLineUp=ut,e.cursorMatchingBracket=At,e.cursorPageDown=gt,e.cursorPageUp=mt,e.cursorSubwordBackward=t=>st(t,!1),e.cursorSubwordForward=t=>st(t,!0),e.cursorSyntaxLeft=at,e.cursorSyntaxRight=ht,e.defaultKeymap=Le,e.deleteCharBackward=se,e.deleteCharBackwardStrict=t=>re(t,!1,!1),e.deleteCharForward=oe,e.deleteGroupBackward=ae,e.deleteGroupForward=he,e.deleteLine=xe,e.deleteLineBoundaryBackward=ue,e.deleteLineBoundaryForward=de,e.deleteToLineEnd=ce,e.deleteToLineStart=t=>ie(t,(e=>{let i=t.lineBlockAt(e.head).from;return e.head>i?i:Math.max(0,e.head-1)})),e.deleteTrailingWhitespace=({state:t,dispatch:e})=>{if(t.readOnly)return!1;let i=[];for(let e=0,n="",r=t.doc.iter();;){if(r.next(),r.lineBreak||r.done){let t=n.search(/\s+$/);if(t>-1&&i.push({from:e-(n.length-t),to:e}),r.done)break;n=""}else n=r.value;e+=r.value.length}return!!i.length&&(e(t.update({changes:i,userEvent:"delete"})),!0)},e.emacsStyleKeymap=Oe,e.history=function(t={}){return[k,C.of(t),r.EditorView.domEventHandlers({beforeinput(t,e){let i="historyUndo"==t.inputType?T:"historyRedo"==t.inputType?M:null;return!!i&&(t.preventDefault(),i(e))}})]},e.historyField=A,e.historyKeymap=U,e.indentLess=Ne,e.indentMore=Me,e.indentSelection=Te,e.indentWithTab=Re,e.insertBlankLine=ke,e.insertNewline=({state:t,dispatch:e})=>(e(t.update(t.replaceSelection(t.lineBreak),{scrollIntoView:!0,userEvent:"input"})),!0),e.insertNewlineAndIndent=Ce,e.insertNewlineKeepIndent=({state:t,dispatch:e})=>(e(t.update(t.changeByRange((e=>{let i=/^\s*/.exec(t.doc.lineAt(e.from).text)[0];return{changes:{from:e.from,to:e.to,insert:t.lineBreak+i},range:n.EditorSelection.cursor(e.from+i.length+1)}})),{scrollIntoView:!0,userEvent:"input"})),!0),e.insertTab=({state:t,dispatch:e})=>t.selection.ranges.some((t=>!t.empty))?Me({state:t,dispatch:e}):(e(t.update(t.replaceSelection("\t"),{scrollIntoView:!0,userEvent:"input"})),!0),e.invertedEffects=x,e.isolateHistory=S,e.lineComment=c,e.lineUncomment=u,e.moveLineDown=we,e.moveLineUp=ve,e.redo=M,e.redoDepth=L,e.redoSelection=P,e.selectAll=Zt,e.selectCharBackward=t=>Tt(t,!1),e.selectCharForward=t=>Tt(t,!0),e.selectCharLeft=Mt,e.selectCharRight=Nt,e.selectDocEnd=Xt,e.selectDocStart=Jt,e.selectGroupBackward=t=>Pt(t,!1),e.selectGroupForward=t=>Pt(t,!0),e.selectGroupLeft=Ot,e.selectGroupRight=Dt,e.selectLine=Qt,e.selectLineBoundaryBackward=zt,e.selectLineBoundaryForward=Wt,e.selectLineBoundaryLeft=jt,e.selectLineBoundaryRight=Ut,e.selectLineDown=_t,e.selectLineEnd=Gt,e.selectLineStart=Kt,e.selectLineUp=Ft,e.selectMatchingBracket=({state:t,dispatch:e})=>kt(t,e,!0),e.selectPageDown=Ht,e.selectPageUp=Vt,e.selectParentSyntax=te,e.selectSubwordBackward=t=>Lt(t,!1),e.selectSubwordForward=t=>Lt(t,!0),e.selectSyntaxLeft=Rt,e.selectSyntaxRight=It,e.simplifySelection=ee,e.splitLine=fe,e.standardKeymap=De,e.temporarilySetTabFocusMode=t=>(t.setTabFocusMode(2e3),!0),e.toggleBlockComment=d,e.toggleBlockCommentByLine=m,e.toggleComment=l,e.toggleLineComment=h,e.toggleTabFocusMode=Pe,e.transposeChars=pe,e.undo=T,e.undoDepth=D,e.undoSelection=N},2533:(t,e,i)=>{"use strict";var n,r=i(2696),s=i(9064),o=i(1506),l=i(7359),a=i(9172);const h=new r.NodeProp;function c(t){return s.Facet.define({combine:t?e=>e.concat(t):void 0})}const u=new r.NodeProp;class d{constructor(t,e,i=[],n=""){this.data=t,this.name=n,s.EditorState.prototype.hasOwnProperty("tree")||Object.defineProperty(s.EditorState.prototype,"tree",{get(){return m(this)}}),this.parser=e,this.extension=[A.of(this),s.EditorState.languageData.of(((t,e,i)=>{let n=f(t,e,i),r=n.type.prop(h);if(!r)return[];let s=t.facet(r),o=n.type.prop(u);if(o){let r=n.resolve(e-n.from,i);for(let e of o)if(e.test(r,t)){let i=t.facet(e.facet);return"replace"==e.type?i:i.concat(s)}}return s}))].concat(i)}isActiveAt(t,e,i=-1){return f(t,e,i).type.prop(h)==this.data}findRegions(t){let e=t.facet(A);if((null==e?void 0:e.data)==this.data)return[{from:0,to:t.doc.length}];if(!e||!e.allowsNesting)return[];let i=[],n=(t,e)=>{if(t.prop(h)==this.data)return void i.push({from:e,to:e+t.length});let s=t.prop(r.NodeProp.mounted);if(s){if(s.tree.prop(h)==this.data){if(s.overlay)for(let t of s.overlay)i.push({from:t.from+e,to:t.to+e});else i.push({from:e,to:e+t.length});return}if(s.overlay){let t=i.length;if(n(s.tree,s.overlay[0].from+e),i.length>t)return}}for(let i=0;i<t.children.length;i++){let s=t.children[i];s instanceof r.Tree&&n(s,t.positions[i]+e)}};return n(m(t),0),i}get allowsNesting(){return!0}}function f(t,e,i){let n=t.facet(A),s=m(t).topNode;if(!n||n.allowsNesting)for(let t=s;t;t=t.enter(e,i,r.IterMode.ExcludeBuffers))t.type.isTop&&(s=t);return s}d.setState=s.StateEffect.define();class p extends d{constructor(t,e,i){super(t,e,[],i),this.parser=e}static define(t){let e=c(t.languageData);return new p(e,t.parser.configure({props:[h.add((t=>t.isTop?e:void 0))]}),t.name)}configure(t,e){return new p(this.data,this.parser.configure(t),e||this.name)}get allowsNesting(){return this.parser.hasWrappers()}}function m(t){let e=t.field(d.state,!1);return e?e.tree:r.Tree.empty}function g(t,e,i=50){var n;let r=null===(n=t.field(d.state,!1))||void 0===n?void 0:n.context;if(!r)return null;let s=r.viewport;r.updateViewport({from:0,to:e});let o=r.isDone(e)||r.work(i,e)?r.tree:null;return r.updateViewport(s),o}class v{constructor(t){this.doc=t,this.cursorPos=0,this.string="",this.cursor=t.iter()}get length(){return this.doc.length}syncTo(t){return this.string=this.cursor.next(t-this.cursorPos).value,this.cursorPos=t+this.string.length,this.cursorPos-this.string.length}chunk(t){return this.syncTo(t),this.string}get lineChunks(){return!0}read(t,e){let i=this.cursorPos-this.string.length;return t<i||e>=this.cursorPos?this.doc.sliceString(t,e):this.string.slice(t-i,e-i)}}let w=null;class y{constructor(t,e,i=[],n,r,s,o,l){this.parser=t,this.state=e,this.fragments=i,this.tree=n,this.treeLen=r,this.viewport=s,this.skipped=o,this.scheduleOn=l,this.parse=null,this.tempSkipped=[]}static create(t,e,i){return new y(t,e,[],r.Tree.empty,0,i,[],null)}startParse(){return this.parser.startParse(new v(this.state.doc),this.fragments)}work(t,e){return null!=e&&e>=this.state.doc.length&&(e=void 0),this.tree!=r.Tree.empty&&this.isDone(null!=e?e:this.state.doc.length)?(this.takeTree(),!0):this.withContext((()=>{var i;if("number"==typeof t){let e=Date.now()+t;t=()=>Date.now()>e}for(this.parse||(this.parse=this.startParse()),null!=e&&(null==this.parse.stoppedAt||this.parse.stoppedAt>e)&&e<this.state.doc.length&&this.parse.stopAt(e);;){let n=this.parse.advance();if(n){if(this.fragments=this.withoutTempSkipped(r.TreeFragment.addTree(n,this.fragments,null!=this.parse.stoppedAt)),this.treeLen=null!==(i=this.parse.stoppedAt)&&void 0!==i?i:this.state.doc.length,this.tree=n,this.parse=null,!(this.treeLen<(null!=e?e:this.state.doc.length)))return!0;this.parse=this.startParse()}if(t())return!1}}))}takeTree(){let t,e;this.parse&&(t=this.parse.parsedPos)>=this.treeLen&&((null==this.parse.stoppedAt||this.parse.stoppedAt>t)&&this.parse.stopAt(t),this.withContext((()=>{for(;!(e=this.parse.advance()););})),this.treeLen=t,this.tree=e,this.fragments=this.withoutTempSkipped(r.TreeFragment.addTree(this.tree,this.fragments,!0)),this.parse=null)}withContext(t){let e=w;w=this;try{return t()}finally{w=e}}withoutTempSkipped(t){for(let e;e=this.tempSkipped.pop();)t=b(t,e.from,e.to);return t}changes(t,e){let{fragments:i,tree:n,treeLen:s,viewport:o,skipped:l}=this;if(this.takeTree(),!t.empty){let e=[];if(t.iterChangedRanges(((t,i,n,r)=>e.push({fromA:t,toA:i,fromB:n,toB:r}))),i=r.TreeFragment.applyChanges(i,e),n=r.Tree.empty,s=0,o={from:t.mapPos(o.from,-1),to:t.mapPos(o.to,1)},this.skipped.length){l=[];for(let e of this.skipped){let i=t.mapPos(e.from,1),n=t.mapPos(e.to,-1);i<n&&l.push({from:i,to:n})}}}return new y(this.parser,e,i,n,s,o,l,this.scheduleOn)}updateViewport(t){if(this.viewport.from==t.from&&this.viewport.to==t.to)return!1;this.viewport=t;let e=this.skipped.length;for(let e=0;e<this.skipped.length;e++){let{from:i,to:n}=this.skipped[e];i<t.to&&n>t.from&&(this.fragments=b(this.fragments,i,n),this.skipped.splice(e--,1))}return!(this.skipped.length>=e||(this.reset(),0))}reset(){this.parse&&(this.takeTree(),this.parse=null)}skipUntilInView(t,e){this.skipped.push({from:t,to:e})}static getSkippingParser(t){return new class extends r.Parser{createParse(e,i,n){let s=n[0].from,o=n[n.length-1].to;return{parsedPos:s,advance(){let e=w;if(e){for(let t of n)e.tempSkipped.push(t);t&&(e.scheduleOn=e.scheduleOn?Promise.all([e.scheduleOn,t]):t)}return this.parsedPos=o,new r.Tree(r.NodeType.none,[],[],o-s)},stoppedAt:null,stopAt(){}}}}}isDone(t){t=Math.min(t,this.state.doc.length);let e=this.fragments;return this.treeLen>=t&&e.length&&0==e[0].from&&e[0].to>=t}static get(){return w}}function b(t,e,i){return r.TreeFragment.applyChanges(t,[{fromA:e,toA:i,fromB:e,toB:i}])}class S{constructor(t){this.context=t,this.tree=t.tree}apply(t){if(!t.docChanged&&this.tree==this.context.tree)return this;let e=this.context.changes(t.changes,t.state),i=this.context.treeLen==t.startState.doc.length?void 0:Math.max(t.changes.mapPos(this.context.treeLen),e.viewport.to);return e.work(20,i)||e.takeTree(),new S(e)}static init(t){let e=Math.min(3e3,t.doc.length),i=y.create(t.facet(A).parser,t,{from:0,to:e});return i.work(20,e)||i.takeTree(),new S(i)}}d.state=s.StateField.define({create:S.init,update(t,e){for(let t of e.effects)if(t.is(d.setState))return t.value;return e.startState.facet(A)!=e.state.facet(A)?S.init(e.state):t.apply(e)}});let x=t=>{let e=setTimeout((()=>t()),500);return()=>clearTimeout(e)};"undefined"!=typeof requestIdleCallback&&(x=t=>{let e=-1,i=setTimeout((()=>{e=requestIdleCallback(t,{timeout:400})}),100);return()=>e<0?clearTimeout(i):cancelIdleCallback(e)});const C="undefined"!=typeof navigator&&(null===(n=navigator.scheduling)||void 0===n?void 0:n.isInputPending)?()=>navigator.scheduling.isInputPending():null,k=o.ViewPlugin.fromClass(class{constructor(t){this.view=t,this.working=null,this.workScheduled=0,this.chunkEnd=-1,this.chunkBudget=-1,this.work=this.work.bind(this),this.scheduleWork()}update(t){let e=this.view.state.field(d.state).context;(e.updateViewport(t.view.viewport)||this.view.viewport.to>e.treeLen)&&this.scheduleWork(),(t.docChanged||t.selectionSet)&&(this.view.hasFocus&&(this.chunkBudget+=50),this.scheduleWork()),this.checkAsyncSchedule(e)}scheduleWork(){if(this.working)return;let{state:t}=this.view,e=t.field(d.state);e.tree==e.context.tree&&e.context.isDone(t.doc.length)||(this.working=x(this.work))}work(t){this.working=null;let e=Date.now();if(this.chunkEnd<e&&(this.chunkEnd<0||this.view.hasFocus)&&(this.chunkEnd=e+3e4,this.chunkBudget=3e3),this.chunkBudget<=0)return;let{state:i,viewport:{to:n}}=this.view,r=i.field(d.state);if(r.tree==r.context.tree&&r.context.isDone(n+1e5))return;let s=Date.now()+Math.min(this.chunkBudget,100,t&&!C?Math.max(25,t.timeRemaining()-5):1e9),o=r.context.treeLen<n&&i.doc.length>n+1e3,l=r.context.work((()=>C&&C()||Date.now()>s),n+(o?0:1e5));this.chunkBudget-=Date.now()-e,(l||this.chunkBudget<=0)&&(r.context.takeTree(),this.view.dispatch({effects:d.setState.of(new S(r.context))})),this.chunkBudget>0&&(!l||o)&&this.scheduleWork(),this.checkAsyncSchedule(r.context)}checkAsyncSchedule(t){t.scheduleOn&&(this.workScheduled++,t.scheduleOn.then((()=>this.scheduleWork())).catch((t=>o.logException(this.view.state,t))).then((()=>this.workScheduled--)),t.scheduleOn=null)}destroy(){this.working&&this.working()}isWorking(){return!!(this.working||this.workScheduled>0)}},{eventHandlers:{focus(){this.scheduleWork()}}}),A=s.Facet.define({combine:t=>t.length?t[0]:null,enables:t=>[d.state,k,o.EditorView.contentAttributes.compute([t],(e=>{let i=e.facet(t);return i&&i.name?{"data-language":i.name}:{}}))]});class E{constructor(t,e,i,n,r,s=void 0){this.name=t,this.alias=e,this.extensions=i,this.filename=n,this.loadFunc=r,this.support=s,this.loading=null}load(){return this.loading||(this.loading=this.loadFunc().then((t=>this.support=t),(t=>{throw this.loading=null,t})))}static of(t){let{load:e,support:i}=t;if(!e){if(!i)throw new RangeError("Must pass either 'load' or 'support' to LanguageDescription.of");e=()=>Promise.resolve(i)}return new E(t.name,(t.alias||[]).concat(t.name).map((t=>t.toLowerCase())),t.extensions||[],t.filename,e,i)}static matchFilename(t,e){for(let i of t)if(i.filename&&i.filename.test(e))return i;let i=/\.([^.]+)$/.exec(e);if(i)for(let e of t)if(e.extensions.indexOf(i[1])>-1)return e;return null}static matchLanguageName(t,e,i=!0){e=e.toLowerCase();for(let i of t)if(i.alias.some((t=>t==e)))return i;if(i)for(let i of t)for(let t of i.alias){let n=e.indexOf(t);if(n>-1&&(t.length>2||!/\w/.test(e[n-1])&&!/\w/.test(e[n+t.length])))return i}return null}}const T=s.Facet.define(),M=s.Facet.define({combine:t=>{if(!t.length)return"  ";let e=t[0];if(!e||/\S/.test(e)||Array.from(e).some((t=>t!=e[0])))throw new Error("Invalid indent unit: "+JSON.stringify(t[0]));return e}});function N(t){let e=t.facet(M);return 9==e.charCodeAt(0)?t.tabSize*e.length:e.length}function P(t,e){let i="",n=t.tabSize,r=t.facet(M)[0];if("\t"==r){for(;e>=n;)i+="\t",e-=n;r=" "}for(let t=0;t<e;t++)i+=r;return i}function O(t,e){t instanceof s.EditorState&&(t=new D(t));for(let i of t.state.facet(T)){let n=i(t,e);if(void 0!==n)return n}let i=m(t.state);return i.length>=e?function(t,e,i){let n=e.resolveStack(i),r=n.node.enterUnfinishedNodesBefore(i);if(r!=n.node){let t=[];for(let e=r;e!=n.node;e=e.parent)t.push(e);for(let e=t.length-1;e>=0;e--)n={node:t[e],next:n}}return R(n,t,i)}(t,i,e):null}class D{constructor(t,e={}){this.state=t,this.options=e,this.unit=N(t)}lineAt(t,e=1){let i=this.state.doc.lineAt(t),{simulateBreak:n,simulateDoubleBreak:r}=this.options;return null!=n&&n>=i.from&&n<=i.to?r&&n==t?{text:"",from:t}:(e<0?n<t:n<=t)?{text:i.text.slice(n-i.from),from:n}:{text:i.text.slice(0,n-i.from),from:i.from}:i}textAfterPos(t,e=1){if(this.options.simulateDoubleBreak&&t==this.options.simulateBreak)return"";let{text:i,from:n}=this.lineAt(t,e);return i.slice(t-n,Math.min(i.length,t+100-n))}column(t,e=1){let{text:i,from:n}=this.lineAt(t,e),r=this.countColumn(i,t-n),s=this.options.overrideIndentation?this.options.overrideIndentation(n):-1;return s>-1&&(r+=s-this.countColumn(i,i.search(/\S|$/))),r}countColumn(t,e=t.length){return s.countColumn(t,this.state.tabSize,e)}lineIndent(t,e=1){let{text:i,from:n}=this.lineAt(t,e),r=this.options.overrideIndentation;if(r){let t=r(n);if(t>-1)return t}return this.countColumn(i,i.search(/\S|$/))}get simulatedBreak(){return this.options.simulateBreak||null}}const L=new r.NodeProp;function R(t,e,i){for(let n=t;n;n=n.next){let t=I(n.node);if(t)return t(F.create(e,i,n))}return 0}function I(t){let e=t.type.prop(L);if(e)return e;let i,n=t.firstChild;if(n&&(i=n.type.prop(r.NodeProp.closedBy))){let e=t.lastChild,n=e&&i.indexOf(e.name)>-1;return t=>q(t,!0,1,void 0,n&&!function(t){return t.pos==t.options.simulateBreak&&t.options.simulateDoubleBreak}(t)?e.from:void 0)}return null==t.parent?B:null}function B(){return 0}class F extends D{constructor(t,e,i){super(t.state,t.options),this.base=t,this.pos=e,this.context=i}get node(){return this.context.node}static create(t,e,i){return new F(t,e,i)}get textAfter(){return this.textAfterPos(this.pos)}get baseIndent(){return this.baseIndentFor(this.node)}baseIndentFor(t){let e=this.state.doc.lineAt(t.from);for(;;){let i=t.resolve(e.from);for(;i.parent&&i.parent.from==i.from;)i=i.parent;if(_(i,t))break;e=this.state.doc.lineAt(i.from)}return this.lineIndent(e.from)}continue(){return R(this.context.next,this.base,this.pos)}}function _(t,e){for(let i=e;i;i=i.parent)if(t==i)return!0;return!1}function q(t,e,i,n,r){let s=t.textAfter,o=s.match(/^\s*/)[0].length,l=n&&s.slice(o,o+n.length)==n||r==t.pos+o,a=e?function(t){let e=t.node,i=e.childAfter(e.from),n=e.lastChild;if(!i)return null;let r=t.options.simulateBreak,s=t.state.doc.lineAt(i.from),o=null==r||r<=s.from?s.to:Math.min(s.to,r);for(let t=i.to;;){let r=e.childAfter(t);if(!r||r==n)return null;if(!r.type.isSkipped)return r.from<o?i:null;t=r.to}}(t):null;return a?l?t.column(a.from):t.column(a.to):t.baseIndent+(l?0:t.unit*i)}const V=s.Facet.define(),H=new r.NodeProp;function W(t){let e=t.lastChild;return e&&e.to==t.to&&e.type.isError}function z(t,e,i){for(let n of t.facet(V)){let r=n(t,e,i);if(r)return r}return function(t,e,i){let n=m(t);if(n.length<i)return null;let r=null;for(let s=n.resolveStack(i,1);s;s=s.next){let o=s.node;if(o.to<=i||o.from>i)continue;if(r&&o.from<e)break;let l=o.type.prop(H);if(l&&(o.to<n.length-50||n.length==t.doc.length||!W(o))){let n=l(o,t);n&&n.from<=i&&n.from>=e&&n.to>i&&(r=n)}}return r}(t,e,i)}function j(t,e){let i=e.mapPos(t.from,1),n=e.mapPos(t.to,-1);return i>=n?void 0:{from:i,to:n}}const U=s.StateEffect.define({map:j}),K=s.StateEffect.define({map:j});function G(t){let e=[];for(let{head:i}of t.state.selection.ranges)e.some((t=>t.from<=i&&t.to>=i))||e.push(t.lineBlockAt(i));return e}const $=s.StateField.define({create:()=>o.Decoration.none,update(t,e){t=t.map(e.changes);for(let i of e.effects)if(i.is(U)&&!J(t,i.value.from,i.value.to)){let{preparePlaceholder:n}=e.state.facet(ot),r=n?o.Decoration.replace({widget:new ct(n(e.state,i.value))}):ht;t=t.update({add:[r.range(i.value.from,i.value.to)]})}else i.is(K)&&(t=t.update({filter:(t,e)=>i.value.from!=t||i.value.to!=e,filterFrom:i.value.from,filterTo:i.value.to}));if(e.selection){let i=!1,{head:n}=e.selection.main;t.between(n,n,((t,e)=>{t<n&&e>n&&(i=!0)})),i&&(t=t.update({filterFrom:n,filterTo:n,filter:(t,e)=>e<=n||t>=n}))}return t},provide:t=>o.EditorView.decorations.from(t),toJSON(t,e){let i=[];return t.between(0,e.doc.length,((t,e)=>{i.push(t,e)})),i},fromJSON(t){if(!Array.isArray(t)||t.length%2)throw new RangeError("Invalid JSON for fold state");let e=[];for(let i=0;i<t.length;){let n=t[i++],r=t[i++];if("number"!=typeof n||"number"!=typeof r)throw new RangeError("Invalid JSON for fold state");e.push(ht.range(n,r))}return o.Decoration.set(e,!0)}});function Y(t,e,i){var n;let r=null;return null===(n=t.field($,!1))||void 0===n||n.between(e,i,((t,e)=>{(!r||r.from>t)&&(r={from:t,to:e})})),r}function J(t,e,i){let n=!1;return t.between(e,e,((t,r)=>{t==e&&r==i&&(n=!0)})),n}function X(t,e){return t.field($,!1)?e:e.concat(s.StateEffect.appendConfig.of(lt()))}const Z=t=>{for(let e of G(t)){let i=z(t.state,e.from,e.to);if(i)return t.dispatch({effects:X(t.state,[U.of(i),tt(t,i)])}),!0}return!1},Q=t=>{if(!t.state.field($,!1))return!1;let e=[];for(let i of G(t)){let n=Y(t.state,i.from,i.to);n&&e.push(K.of(n),tt(t,n,!1))}return e.length&&t.dispatch({effects:e}),e.length>0};function tt(t,e,i=!0){let n=t.state.doc.lineAt(e.from).number,r=t.state.doc.lineAt(e.to).number;return o.EditorView.announce.of(`${t.state.phrase(i?"Folded lines":"Unfolded lines")} ${n} ${t.state.phrase("to")} ${r}.`)}const et=t=>{let{state:e}=t,i=[];for(let n=0;n<e.doc.length;){let r=t.lineBlockAt(n),s=z(e,r.from,r.to);s&&i.push(U.of(s)),n=(s?t.lineBlockAt(s.to):r).to+1}return i.length&&t.dispatch({effects:X(t.state,i)}),!!i.length},it=t=>{let e=t.state.field($,!1);if(!e||!e.size)return!1;let i=[];return e.between(0,t.state.doc.length,((t,e)=>{i.push(K.of({from:t,to:e}))})),t.dispatch({effects:i}),!0};function nt(t,e){for(let i=e;;){let n=z(t.state,i.from,i.to);if(n&&n.to>e.from)return n;if(!i.from)return null;i=t.lineBlockAt(i.from-1)}}const rt=[{key:"Ctrl-Shift-[",mac:"Cmd-Alt-[",run:Z},{key:"Ctrl-Shift-]",mac:"Cmd-Alt-]",run:Q},{key:"Ctrl-Alt-[",run:et},{key:"Ctrl-Alt-]",run:it}],st={placeholderDOM:null,preparePlaceholder:null,placeholderText:"…"},ot=s.Facet.define({combine:t=>s.combineConfig(t,st)});function lt(t){let e=[$,ft];return t&&e.push(ot.of(t)),e}function at(t,e){let{state:i}=t,n=i.facet(ot),r=e=>{let i=t.lineBlockAt(t.posAtDOM(e.target)),n=Y(t.state,i.from,i.to);n&&t.dispatch({effects:K.of(n)}),e.preventDefault()};if(n.placeholderDOM)return n.placeholderDOM(t,r,e);let s=document.createElement("span");return s.textContent=n.placeholderText,s.setAttribute("aria-label",i.phrase("folded code")),s.title=i.phrase("unfold"),s.className="cm-foldPlaceholder",s.onclick=r,s}const ht=o.Decoration.replace({widget:new class extends o.WidgetType{toDOM(t){return at(t,null)}}});class ct extends o.WidgetType{constructor(t){super(),this.value=t}eq(t){return this.value==t.value}toDOM(t){return at(t,this.value)}}const ut={openText:"⌄",closedText:"›",markerDOM:null,domEventHandlers:{},foldingChanged:()=>!1};class dt extends o.GutterMarker{constructor(t,e){super(),this.config=t,this.open=e}eq(t){return this.config==t.config&&this.open==t.open}toDOM(t){if(this.config.markerDOM)return this.config.markerDOM(this.open);let e=document.createElement("span");return e.textContent=this.open?this.config.openText:this.config.closedText,e.title=t.state.phrase(this.open?"Fold line":"Unfold line"),e}}const ft=o.EditorView.baseTheme({".cm-foldPlaceholder":{backgroundColor:"#eee",border:"1px solid #ddd",color:"#888",borderRadius:".2em",margin:"0 1px",padding:"0 1px",cursor:"pointer"},".cm-foldGutter span":{padding:"0 1px",cursor:"pointer"}});class pt{constructor(t,e){let i;function n(t){let e=a.StyleModule.newName();return(i||(i=Object.create(null)))["."+e]=t,e}this.specs=t;const r="string"==typeof e.all?e.all:e.all?n(e.all):void 0,s=e.scope;this.scope=s instanceof d?t=>t.prop(h)==s.data:s?t=>t==s:void 0,this.style=l.tagHighlighter(t.map((t=>({tag:t.tag,class:t.class||n(Object.assign({},t,{tag:null}))}))),{all:r}).style,this.module=i?new a.StyleModule(i):null,this.themeType=e.themeType}static define(t,e){return new pt(t,e||{})}}const mt=s.Facet.define(),gt=s.Facet.define({combine:t=>t.length?[t[0]]:null});function vt(t){let e=t.facet(mt);return e.length?e:t.facet(gt)}const wt=s.Prec.high(o.ViewPlugin.fromClass(class{constructor(t){this.markCache=Object.create(null),this.tree=m(t.state),this.decorations=this.buildDeco(t,vt(t.state)),this.decoratedTo=t.viewport.to}update(t){let e=m(t.state),i=vt(t.state),n=i!=vt(t.startState),{viewport:r}=t.view,s=t.changes.mapPos(this.decoratedTo,1);e.length<r.to&&!n&&e.type==this.tree.type&&s>=r.to?(this.decorations=this.decorations.map(t.changes),this.decoratedTo=s):(e!=this.tree||t.viewportChanged||n)&&(this.tree=e,this.decorations=this.buildDeco(t.view,i),this.decoratedTo=r.to)}buildDeco(t,e){if(!e||!this.tree.length)return o.Decoration.none;let i=new s.RangeSetBuilder;for(let{from:n,to:r}of t.visibleRanges)l.highlightTree(this.tree,e,((t,e,n)=>{i.add(t,e,this.markCache[n]||(this.markCache[n]=o.Decoration.mark({class:n})))}),n,r);return i.finish()}},{decorations:t=>t.decorations})),yt=pt.define([{tag:l.tags.meta,color:"#404740"},{tag:l.tags.link,textDecoration:"underline"},{tag:l.tags.heading,textDecoration:"underline",fontWeight:"bold"},{tag:l.tags.emphasis,fontStyle:"italic"},{tag:l.tags.strong,fontWeight:"bold"},{tag:l.tags.strikethrough,textDecoration:"line-through"},{tag:l.tags.keyword,color:"#708"},{tag:[l.tags.atom,l.tags.bool,l.tags.url,l.tags.contentSeparator,l.tags.labelName],color:"#219"},{tag:[l.tags.literal,l.tags.inserted],color:"#164"},{tag:[l.tags.string,l.tags.deleted],color:"#a11"},{tag:[l.tags.regexp,l.tags.escape,l.tags.special(l.tags.string)],color:"#e40"},{tag:l.tags.definition(l.tags.variableName),color:"#00f"},{tag:l.tags.local(l.tags.variableName),color:"#30a"},{tag:[l.tags.typeName,l.tags.namespace],color:"#085"},{tag:l.tags.className,color:"#167"},{tag:[l.tags.special(l.tags.variableName),l.tags.macroName],color:"#256"},{tag:l.tags.definition(l.tags.propertyName),color:"#00c"},{tag:l.tags.comment,color:"#940"},{tag:l.tags.invalid,color:"#f00"}]),bt=o.EditorView.baseTheme({"&.cm-focused .cm-matchingBracket":{backgroundColor:"#328c8252"},"&.cm-focused .cm-nonmatchingBracket":{backgroundColor:"#bb555544"}}),St="()[]{}",xt=s.Facet.define({combine:t=>s.combineConfig(t,{afterCursor:!0,brackets:St,maxScanDistance:1e4,renderMatch:At})}),Ct=o.Decoration.mark({class:"cm-matchingBracket"}),kt=o.Decoration.mark({class:"cm-nonmatchingBracket"});function At(t){let e=[],i=t.matched?Ct:kt;return e.push(i.range(t.start.from,t.start.to)),t.end&&e.push(i.range(t.end.from,t.end.to)),e}const Et=[s.StateField.define({create:()=>o.Decoration.none,update(t,e){if(!e.docChanged&&!e.selection)return t;let i=[],n=e.state.facet(xt);for(let t of e.state.selection.ranges){if(!t.empty)continue;let r=Pt(e.state,t.head,-1,n)||t.head>0&&Pt(e.state,t.head-1,1,n)||n.afterCursor&&(Pt(e.state,t.head,1,n)||t.head<e.state.doc.length&&Pt(e.state,t.head+1,-1,n));r&&(i=i.concat(n.renderMatch(r,e.state)))}return o.Decoration.set(i,!0)},provide:t=>o.EditorView.decorations.from(t)}),bt],Tt=new r.NodeProp;function Mt(t,e,i){let n=t.prop(e<0?r.NodeProp.openedBy:r.NodeProp.closedBy);if(n)return n;if(1==t.name.length){let n=i.indexOf(t.name);if(n>-1&&n%2==(e<0?1:0))return[i[n+e]]}return null}function Nt(t){let e=t.type.prop(Tt);return e?e(t.node):t}function Pt(t,e,i,n={}){let r=n.maxScanDistance||1e4,s=n.brackets||St,o=m(t),l=o.resolveInner(e,i);for(let t=l;t;t=t.parent){let n=Mt(t.type,i,s);if(n&&t.from<t.to){let r=Nt(t);if(r&&(i>0?e>=r.from&&e<r.to:e>r.from&&e<=r.to))return Ot(0,0,i,t,r,n,s)}}return function(t,e,i,n,r,s,o){let l=i<0?t.sliceDoc(e-1,e):t.sliceDoc(e,e+1),a=o.indexOf(l);if(a<0||a%2==0!=i>0)return null;let h={from:i<0?e-1:e,to:i>0?e+1:e},c=t.doc.iterRange(e,i>0?t.doc.length:0),u=0;for(let t=0;!c.next().done&&t<=s;){let s=c.value;i<0&&(t+=s.length);let l=e+t*i;for(let t=i>0?0:s.length-1,e=i>0?s.length:-1;t!=e;t+=i){let e=o.indexOf(s[t]);if(!(e<0||n.resolveInner(l+t,1).type!=r))if(e%2==0==i>0)u++;else{if(1==u)return{start:h,end:{from:l+t,to:l+t+1},matched:e>>1==a>>1};u--}}i>0&&(t+=s.length)}return c.done?{start:h,matched:!1}:null}(t,e,i,o,l.type,r,s)}function Ot(t,e,i,n,r,s,o){let l=n.parent,a={from:r.from,to:r.to},h=0,c=null==l?void 0:l.cursor();if(c&&(i<0?c.childBefore(n.from):c.childAfter(n.to)))do{if(i<0?c.to<=n.from:c.from>=n.to){if(0==h&&s.indexOf(c.type.name)>-1&&c.from<c.to){let t=Nt(c);return{start:a,end:t?{from:t.from,to:t.to}:void 0,matched:!0}}if(Mt(c.type,i,o))h++;else if(Mt(c.type,-i,o)){if(0==h){let t=Nt(c);return{start:a,end:t&&t.from<t.to?{from:t.from,to:t.to}:void 0,matched:!1}}h--}}}while(i<0?c.prevSibling():c.nextSibling());return{start:a,matched:!1}}function Dt(t,e,i,n=0,r=0){null==e&&-1==(e=t.search(/[^\s\u00a0]/))&&(e=t.length);let s=r;for(let r=n;r<e;r++)9==t.charCodeAt(r)?s+=i-s%i:s++;return s}class Lt{constructor(t,e,i,n){this.string=t,this.tabSize=e,this.indentUnit=i,this.overrideIndent=n,this.pos=0,this.start=0,this.lastColumnPos=0,this.lastColumnValue=0}eol(){return this.pos>=this.string.length}sol(){return 0==this.pos}peek(){return this.string.charAt(this.pos)||void 0}next(){if(this.pos<this.string.length)return this.string.charAt(this.pos++)}eat(t){let e,i=this.string.charAt(this.pos);if(e="string"==typeof t?i==t:i&&(t instanceof RegExp?t.test(i):t(i)),e)return++this.pos,i}eatWhile(t){let e=this.pos;for(;this.eat(t););return this.pos>e}eatSpace(){let t=this.pos;for(;/[\s\u00a0]/.test(this.string.charAt(this.pos));)++this.pos;return this.pos>t}skipToEnd(){this.pos=this.string.length}skipTo(t){let e=this.string.indexOf(t,this.pos);if(e>-1)return this.pos=e,!0}backUp(t){this.pos-=t}column(){return this.lastColumnPos<this.start&&(this.lastColumnValue=Dt(this.string,this.start,this.tabSize,this.lastColumnPos,this.lastColumnValue),this.lastColumnPos=this.start),this.lastColumnValue}indentation(){var t;return null!==(t=this.overrideIndent)&&void 0!==t?t:Dt(this.string,null,this.tabSize)}match(t,e,i){if("string"==typeof t){let n=t=>i?t.toLowerCase():t;return n(this.string.substr(this.pos,t.length))==n(t)?(!1!==e&&(this.pos+=t.length),!0):null}{let i=this.string.slice(this.pos).match(t);return i&&i.index>0?null:(i&&!1!==e&&(this.pos+=i[0].length),i)}}current(){return this.string.slice(this.start,this.pos)}}function Rt(t){if("object"!=typeof t)return t;let e={};for(let i in t){let n=t[i];e[i]=n instanceof Array?n.slice():n}return e}const It=new WeakMap;class Bt extends d{constructor(t){let e,i=c(t.languageData),n={name:(s=t).name||"",token:s.token,blankLine:s.blankLine||(()=>{}),startState:s.startState||(()=>!0),copyState:s.copyState||Rt,indent:s.indent||(()=>null),languageData:s.languageData||{},tokenTable:s.tokenTable||Ht};var s;super(i,new class extends r.Parser{createParse(t,i,n){return new qt(e,t,i,n)}},[T.of(((t,e)=>this.getIndent(t,e)))],t.name),this.topNode=function(t){let e=r.NodeType.define({id:Wt.length,name:"Document",props:[h.add((()=>t))],top:!0});return Wt.push(e),e}(i),e=this,this.streamParser=n,this.stateAfter=new r.NodeProp({perNode:!0}),this.tokenTable=t.tokenTable?new Gt(n.tokenTable):$t}static define(t){return new Bt(t)}getIndent(t,e){let i,n=m(t.state),r=n.resolve(e);for(;r&&r.type!=this.topNode;)r=r.parent;if(!r)return null;let{overrideIndentation:s}=t.options;s&&(i=It.get(t.state),null!=i&&i<e-1e4&&(i=void 0));let o,l,a=Ft(this,n,0,r.from,null!=i?i:e);if(a?(l=a.state,o=a.pos+1):(l=this.streamParser.startState(t.unit),o=0),e-o>1e4)return null;for(;o<e;){let i=t.state.doc.lineAt(o),n=Math.min(e,i.to);if(i.length){let e=s?s(i.from):-1,r=new Lt(i.text,t.state.tabSize,t.unit,e<0?void 0:e);for(;r.pos<n-i.from;)Vt(this.streamParser.token,r,l)}else this.streamParser.blankLine(l,t.unit);if(n==e)break;o=i.to+1}let h=t.lineAt(e);return s&&null==i&&It.set(t.state,h.from),this.streamParser.indent(l,/^\s*(.*)/.exec(h.text)[1],t)}get allowsNesting(){return!1}}function Ft(t,e,i,n,s){let o=i>=n&&i+e.length<=s&&e.prop(t.stateAfter);if(o)return{state:t.streamParser.copyState(o),pos:i+e.length};for(let o=e.children.length-1;o>=0;o--){let l=e.children[o],a=i+e.positions[o],h=l instanceof r.Tree&&a<s&&Ft(t,l,a,n,s);if(h)return h}return null}function _t(t,e,i,n,s){if(s&&i<=0&&n>=e.length)return e;s||e.type!=t.topNode||(s=!0);for(let o=e.children.length-1;o>=0;o--){let l,a=e.positions[o],h=e.children[o];if(a<n&&h instanceof r.Tree){if(!(l=_t(t,h,i-a,n-a,s)))break;return s?new r.Tree(e.type,e.children.slice(0,o).concat(l),e.positions.slice(0,o+1),a+l.length):l}}return null}class qt{constructor(t,e,i,n){this.lang=t,this.input=e,this.fragments=i,this.ranges=n,this.stoppedAt=null,this.chunks=[],this.chunkPos=[],this.chunk=[],this.chunkReused=void 0,this.rangeIndex=0,this.to=n[n.length-1].to;let s=y.get(),o=n[0].from,{state:l,tree:a}=function(t,e,i,n){for(let n of e){let e,r=n.from+(n.openStart?25:0),s=n.to-(n.openEnd?25:0),o=r<=i&&s>i&&Ft(t,n.tree,0-n.offset,i,s);if(o&&(e=_t(t,n.tree,i+n.offset,o.pos+n.offset,!1)))return{state:o.state,tree:e}}return{state:t.streamParser.startState(n?N(n):4),tree:r.Tree.empty}}(t,i,o,null==s?void 0:s.state);this.state=l,this.parsedPos=this.chunkStart=o+a.length;for(let t=0;t<a.children.length;t++)this.chunks.push(a.children[t]),this.chunkPos.push(a.positions[t]);s&&this.parsedPos<s.viewport.from-1e5&&(this.state=this.lang.streamParser.startState(N(s.state)),s.skipUntilInView(this.parsedPos,s.viewport.from),this.parsedPos=s.viewport.from),this.moveRangeIndex()}advance(){let t=y.get(),e=null==this.stoppedAt?this.to:Math.min(this.to,this.stoppedAt),i=Math.min(e,this.chunkStart+2048);for(t&&(i=Math.min(i,t.viewport.to));this.parsedPos<i;)this.parseLine(t);return this.chunkStart<this.parsedPos&&this.finishChunk(),this.parsedPos>=e?this.finish():t&&this.parsedPos>=t.viewport.to?(t.skipUntilInView(this.parsedPos,e),this.finish()):null}stopAt(t){this.stoppedAt=t}lineAfter(t){let e=this.input.chunk(t);if(this.input.lineChunks)"\n"==e&&(e="");else{let t=e.indexOf("\n");t>-1&&(e=e.slice(0,t))}return t+e.length<=this.to?e:e.slice(0,this.to-t)}nextLine(){let t=this.parsedPos,e=this.lineAfter(t),i=t+e.length;for(let t=this.rangeIndex;;){let n=this.ranges[t].to;if(n>=i)break;if(e=e.slice(0,n-(i-e.length)),t++,t==this.ranges.length)break;let r=this.ranges[t].from,s=this.lineAfter(r);e+=s,i=r+s.length}return{line:e,end:i}}skipGapsTo(t,e,i){for(;;){let n=this.ranges[this.rangeIndex].to,r=t+e;if(i>0?n>r:n>=r)break;e+=this.ranges[++this.rangeIndex].from-n}return e}moveRangeIndex(){for(;this.ranges[this.rangeIndex].to<this.parsedPos;)this.rangeIndex++}emitToken(t,e,i,n,r){if(this.ranges.length>1){e+=r=this.skipGapsTo(e,r,1);let t=this.chunk.length;i+=r=this.skipGapsTo(i,r,-1),n+=this.chunk.length-t}return this.chunk.push(t,e,i,n),r}parseLine(t){let{line:e,end:i}=this.nextLine(),n=0,{streamParser:r}=this.lang,s=new Lt(e,t?t.state.tabSize:4,t?N(t.state):2);if(s.eol())r.blankLine(this.state,s.indentUnit);else for(;!s.eol();){let t=Vt(r.token,s,this.state);if(t&&(n=this.emitToken(this.lang.tokenTable.resolve(t),this.parsedPos+s.start,this.parsedPos+s.pos,4,n)),s.start>1e4)break}this.parsedPos=i,this.moveRangeIndex(),this.parsedPos<this.to&&this.parsedPos++}finishChunk(){let t=r.Tree.build({buffer:this.chunk,start:this.chunkStart,length:this.parsedPos-this.chunkStart,nodeSet:zt,topID:0,maxBufferLength:2048,reused:this.chunkReused});t=new r.Tree(t.type,t.children,t.positions,t.length,[[this.lang.stateAfter,this.lang.streamParser.copyState(this.state)]]),this.chunks.push(t),this.chunkPos.push(this.chunkStart-this.ranges[0].from),this.chunk=[],this.chunkReused=void 0,this.chunkStart=this.parsedPos}finish(){return new r.Tree(this.lang.topNode,this.chunks,this.chunkPos,this.parsedPos-this.ranges[0].from).balance()}}function Vt(t,e,i){e.start=e.pos;for(let n=0;n<10;n++){let n=t(e,i);if(e.pos>e.start)return n}throw new Error("Stream parser failed to advance stream.")}const Ht=Object.create(null),Wt=[r.NodeType.none],zt=new r.NodeSet(Wt),jt=[],Ut=Object.create(null),Kt=Object.create(null);for(let[t,e]of[["variable","variableName"],["variable-2","variableName.special"],["string-2","string.special"],["def","variableName.definition"],["tag","tagName"],["attribute","attributeName"],["type","typeName"],["builtin","variableName.standard"],["qualifier","modifier"],["error","invalid"],["header","heading"],["property","propertyName"]])Kt[t]=Jt(Ht,e);class Gt{constructor(t){this.extra=t,this.table=Object.assign(Object.create(null),Kt)}resolve(t){return t?this.table[t]||(this.table[t]=Jt(this.extra,t)):0}}const $t=new Gt(Ht);function Yt(t,e){jt.indexOf(t)>-1||(jt.push(t),console.warn(e))}function Jt(t,e){let i=[];for(let n of e.split(" ")){let e=[];for(let i of n.split(".")){let n=t[i]||l.tags[i];n?"function"==typeof n?e.length?e=e.map(n):Yt(i,`Modifier ${i} used at start of tag`):e.length?Yt(i,`Tag ${i} used as modifier`):e=Array.isArray(n)?n:[n]:Yt(i,`Unknown highlighting tag ${i}`)}for(let t of e)i.push(t)}if(!i.length)return 0;let n=e.replace(/ /g,"_"),s=n+" "+i.map((t=>t.id)),o=Ut[s];if(o)return o.id;let a=Ut[s]=r.NodeType.define({id:Wt.length,name:n,props:[l.styleTags({[n]:i})]});return Wt.push(a),a.id}function Xt(t){return t.length<=4096&&/[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/.test(t)}function Zt(t){for(let e=t.iter();!e.next().done;)if(Xt(e.value))return!0;return!1}const Qt=s.Facet.define({combine:t=>t.some((t=>t))}),te=o.ViewPlugin.fromClass(class{constructor(t){this.always=t.state.facet(Qt)||t.textDirection!=o.Direction.LTR||t.state.facet(o.EditorView.perLineTextDirection),this.hasRTL=!this.always&&Zt(t.state.doc),this.tree=m(t.state),this.decorations=this.always||this.hasRTL?ee(t,this.tree,this.always):o.Decoration.none}update(t){let e=t.state.facet(Qt)||t.view.textDirection!=o.Direction.LTR||t.state.facet(o.EditorView.perLineTextDirection);if(e||this.hasRTL||!function(t){let e=!1;return t.iterChanges(((t,i,n,r,s)=>{!e&&Zt(s)&&(e=!0)})),e}(t.changes)||(this.hasRTL=!0),!e&&!this.hasRTL)return;let i=m(t.state);(e!=this.always||i!=this.tree||t.docChanged||t.viewportChanged)&&(this.tree=i,this.always=e,this.decorations=ee(t.view,i,e))}},{provide:t=>{function e(e){var i,n;return null!==(n=null===(i=e.plugin(t))||void 0===i?void 0:i.decorations)&&void 0!==n?n:o.Decoration.none}return[o.EditorView.outerDecorations.of(e),s.Prec.lowest(o.EditorView.bidiIsolatedRanges.of(e))]}});function ee(t,e,i){let n=new s.RangeSetBuilder,o=t.visibleRanges;i||(o=function(t,e){let i=e.iter(),n=0,r=[],s=null;for(let{from:e,to:o}of t)if(!(s&&s.to>e&&(e=s.to,e>=o)))for(n+i.value.length<e&&(i.next(e-(n+i.value.length)),n=e);;){let t=n,e=n+i.value.length;if(!i.lineBreak&&Xt(i.value)&&(s&&s.to>t-10?s.to=Math.min(o,e):r.push(s={from:t,to:Math.min(o,e)})),e>=o)break;n=e,i.next()}return r}(o,t.state.doc));for(let{from:t,to:i}of o)e.iterate({enter:t=>{let e=t.type.prop(r.NodeProp.isolate);e&&n.add(t.from,t.to,ie[e])},from:t,to:i});return n.finish()}const ie={rtl:o.Decoration.mark({class:"cm-iso",inclusive:!0,attributes:{dir:"rtl"},bidiIsolate:o.Direction.RTL}),ltr:o.Decoration.mark({class:"cm-iso",inclusive:!0,attributes:{dir:"ltr"},bidiIsolate:o.Direction.LTR}),auto:o.Decoration.mark({class:"cm-iso",inclusive:!0,attributes:{dir:"auto"},bidiIsolate:null})};e.DocInput=v,e.HighlightStyle=pt,e.IndentContext=D,e.LRLanguage=p,e.Language=d,e.LanguageDescription=E,e.LanguageSupport=class{constructor(t,e=[]){this.language=t,this.support=e,this.extension=[t,e]}},e.ParseContext=y,e.StreamLanguage=Bt,e.StringStream=Lt,e.TreeIndentContext=F,e.bidiIsolates=function(t={}){let e=[te];return t.alwaysIsolate&&e.push(Qt.of(!0)),e},e.bracketMatching=function(t={}){return[xt.of(t),Et]},e.bracketMatchingHandle=Tt,e.codeFolding=lt,e.continuedIndent=function({except:t,units:e=1}={}){return i=>{let n=t&&t.test(i.textAfter);return i.baseIndent+(n?0:e*i.unit)}},e.defaultHighlightStyle=yt,e.defineLanguageFacet=c,e.delimitedIndent=function({closing:t,align:e=!0,units:i=1}){return n=>q(n,e,i,t)},e.ensureSyntaxTree=g,e.flatIndent=t=>t.baseIndent,e.foldAll=et,e.foldCode=Z,e.foldEffect=U,e.foldGutter=function(t={}){let e=Object.assign(Object.assign({},ut),t),i=new dt(e,!0),n=new dt(e,!1),r=o.ViewPlugin.fromClass(class{constructor(t){this.from=t.viewport.from,this.markers=this.buildMarkers(t)}update(t){(t.docChanged||t.viewportChanged||t.startState.facet(A)!=t.state.facet(A)||t.startState.field($,!1)!=t.state.field($,!1)||m(t.startState)!=m(t.state)||e.foldingChanged(t))&&(this.markers=this.buildMarkers(t.view))}buildMarkers(t){let e=new s.RangeSetBuilder;for(let r of t.viewportLineBlocks){let s=Y(t.state,r.from,r.to)?n:z(t.state,r.from,r.to)?i:null;s&&e.add(r.from,r.from,s)}return e.finish()}}),{domEventHandlers:l}=e;return[r,o.gutter({class:"cm-foldGutter",markers(t){var e;return(null===(e=t.plugin(r))||void 0===e?void 0:e.markers)||s.RangeSet.empty},initialSpacer:()=>new dt(e,!1),domEventHandlers:Object.assign(Object.assign({},l),{click:(t,e,i)=>{if(l.click&&l.click(t,e,i))return!0;let n=Y(t.state,e.from,e.to);if(n)return t.dispatch({effects:K.of(n)}),!0;let r=z(t.state,e.from,e.to);return!!r&&(t.dispatch({effects:U.of(r)}),!0)}})}),lt()]},e.foldInside=function(t){let e=t.firstChild,i=t.lastChild;return e&&e.to<i.from?{from:e.to,to:i.type.isError?t.to:i.from}:null},e.foldKeymap=rt,e.foldNodeProp=H,e.foldService=V,e.foldState=$,e.foldable=z,e.foldedRanges=function(t){return t.field($,!1)||s.RangeSet.empty},e.forceParsing=function(t,e=t.viewport.to,i=100){let n=g(t.state,e,i);return n!=m(t.state)&&t.dispatch({}),!!n},e.getIndentUnit=N,e.getIndentation=O,e.highlightingFor=function(t,e,i){let n=vt(t),r=null;if(n)for(let t of n)if(!t.scope||i&&t.scope(i)){let i=t.style(e);i&&(r=r?r+" "+i:i)}return r},e.indentNodeProp=L,e.indentOnInput=function(){return s.EditorState.transactionFilter.of((t=>{if(!t.docChanged||!t.isUserEvent("input.type")&&!t.isUserEvent("input.complete"))return t;let e=t.startState.languageDataAt("indentOnInput",t.startState.selection.main.head);if(!e.length)return t;let i=t.newDoc,{head:n}=t.newSelection.main,r=i.lineAt(n);if(n>r.from+200)return t;let s=i.sliceString(r.from,n);if(!e.some((t=>t.test(s))))return t;let{state:o}=t,l=-1,a=[];for(let{head:t}of o.selection.ranges){let e=o.doc.lineAt(t);if(e.from==l)continue;l=e.from;let i=O(o,e.from);if(null==i)continue;let n=/^\s*/.exec(e.text)[0],r=P(o,i);n!=r&&a.push({from:e.from,to:e.from+n.length,insert:r})}return a.length?[t,{changes:a,sequential:!0}]:t}))},e.indentRange=function(t,e,i){let n=Object.create(null),r=new D(t,{overrideIndentation:t=>{var e;return null!==(e=n[t])&&void 0!==e?e:-1}}),s=[];for(let o=e;o<=i;){let e=t.doc.lineAt(o);o=e.to+1;let i=O(r,e.from);if(null==i)continue;/\S/.test(e.text)||(i=0);let l=/^\s*/.exec(e.text)[0],a=P(t,i);l!=a&&(n[e.from]=i,s.push({from:e.from,to:e.from+l.length,insert:a}))}return t.changes(s)},e.indentService=T,e.indentString=P,e.indentUnit=M,e.language=A,e.languageDataProp=h,e.matchBrackets=Pt,e.sublanguageProp=u,e.syntaxHighlighting=function(t,e){let i,n=[wt];return t instanceof pt&&(t.module&&n.push(o.EditorView.styleModule.of(t.module)),i=t.themeType),(null==e?void 0:e.fallback)?n.push(gt.of(t)):i?n.push(mt.computeN([o.EditorView.darkTheme],(e=>e.facet(o.EditorView.darkTheme)==("dark"==i)?[t]:[]))):n.push(mt.of(t)),n},e.syntaxParserRunning=function(t){var e;return(null===(e=t.plugin(k))||void 0===e?void 0:e.isWorking())||!1},e.syntaxTree=m,e.syntaxTreeAvailable=function(t,e=t.doc.length){var i;return(null===(i=t.field(d.state,!1))||void 0===i?void 0:i.context.isDone(e))||!1},e.toggleFold=t=>{let e=[];for(let i of G(t)){let n=Y(t.state,i.from,i.to);if(n)e.push(K.of(n),tt(t,n,!1));else{let n=nt(t,i);n&&e.push(U.of(n),tt(t,n))}}return e.length>0&&t.dispatch({effects:X(t.state,e)}),!!e.length},e.unfoldAll=it,e.unfoldCode=Q,e.unfoldEffect=K},4126:(t,e,i)=>{"use strict";var n=i(1506),r=i(9064),s=i(8748);class o{constructor(t,e,i){this.from=t,this.to=e,this.diagnostic=i}}class l{constructor(t,e,i){this.diagnostics=t,this.panel=e,this.selected=i}static init(t,e,i){let r=t,s=i.facet(C).markerFilter;s&&(r=s(r,i));let o=n.Decoration.set(r.map((t=>t.from==t.to||t.from==t.to-1&&i.doc.lineAt(t.from).to==t.from?n.Decoration.widget({widget:new E(t),diagnostic:t}).range(t.from):n.Decoration.mark({attributes:{class:"cm-lintRange cm-lintRange-"+t.severity+(t.markClass?" "+t.markClass:"")},diagnostic:t}).range(t.from,t.to))),!0);return new l(o,e,a(o))}}function a(t,e=null,i=0){let n=null;return t.between(i,1e9,((t,i,{spec:r})=>{if(!e||r.diagnostic==e)return n=new o(t,i,r.diagnostic),!1})),n}function h(t,e){let i=e.pos,n=e.end||i,r=t.state.facet(C).hideOn(t,i,n);if(null!=r)return r;let s=t.startState.doc.lineAt(e.pos);return!(!t.effects.some((t=>t.is(d)))&&!t.changes.touchesRange(s.from,Math.max(s.to,n)))}function c(t,e){return t.field(m,!1)?e:e.concat(r.StateEffect.appendConfig.of(V))}function u(t,e){return{effects:c(t,[d.of(e)])}}const d=r.StateEffect.define(),f=r.StateEffect.define(),p=r.StateEffect.define(),m=r.StateField.define({create:()=>new l(n.Decoration.none,null,null),update(t,e){if(e.docChanged&&t.diagnostics.size){let i=t.diagnostics.map(e.changes),n=null,r=t.panel;if(t.selected){let r=e.changes.mapPos(t.selected.from,1);n=a(i,t.selected.diagnostic,r)||a(i,null,r)}!i.size&&r&&e.state.facet(C).autoPanel&&(r=null),t=new l(i,r,n)}for(let i of e.effects)if(i.is(d)){let n=e.state.facet(C).autoPanel?i.value.length?M.open:null:t.panel;t=l.init(i.value,n,e.state)}else i.is(f)?t=new l(t.diagnostics,i.value?M.open:null,t.selected):i.is(p)&&(t=new l(t.diagnostics,t.panel,i.value));return t},provide:t=>[n.showPanel.from(t,(t=>t.panel)),n.EditorView.decorations.from(t,(t=>t.diagnostics))]}),g=n.Decoration.mark({class:"cm-lintRange cm-lintRange-active"});function v(t,e){return s("ul",{class:"cm-tooltip-lint"},e.map((e=>A(t,e,!1))))}const w=t=>{let e=t.state.field(m,!1);e&&e.panel||t.dispatch({effects:c(t.state,[f.of(!0)])});let i=n.getPanel(t,M.open);return i&&i.dom.querySelector(".cm-panel-lint ul").focus(),!0},y=t=>{let e=t.state.field(m,!1);return!(!e||!e.panel||(t.dispatch({effects:f.of(!1)}),0))},b=t=>{let e=t.state.field(m,!1);if(!e)return!1;let i=t.state.selection.main,n=e.diagnostics.iter(i.to+1);return!(!n.value&&(n=e.diagnostics.iter(0),!n.value||n.from==i.from&&n.to==i.to)||(t.dispatch({selection:{anchor:n.from,head:n.to},scrollIntoView:!0}),0))},S=[{key:"Mod-Shift-m",run:w,preventDefault:!0},{key:"F8",run:b}],x=n.ViewPlugin.fromClass(class{constructor(t){this.view=t,this.timeout=-1,this.set=!0;let{delay:e}=t.state.facet(C);this.lintTime=Date.now()+e,this.run=this.run.bind(this),this.timeout=setTimeout(this.run,e)}run(){clearTimeout(this.timeout);let t=Date.now();if(t<this.lintTime-10)this.timeout=setTimeout(this.run,this.lintTime-t);else{this.set=!1;let{state:t}=this.view,{sources:e}=t.facet(C);e.length&&Promise.all(e.map((t=>Promise.resolve(t(this.view))))).then((e=>{let i=e.reduce(((t,e)=>t.concat(e)));this.view.state.doc==t.doc&&this.view.dispatch(u(this.view.state,i))}),(t=>{n.logException(this.view.state,t)}))}}update(t){let e=t.state.facet(C);(t.docChanged||e!=t.startState.facet(C)||e.needsRefresh&&e.needsRefresh(t))&&(this.lintTime=Date.now()+e.delay,this.set||(this.set=!0,this.timeout=setTimeout(this.run,e.delay)))}force(){this.set&&(this.lintTime=Date.now(),this.run())}destroy(){clearTimeout(this.timeout)}}),C=r.Facet.define({combine:t=>Object.assign({sources:t.map((t=>t.source)).filter((t=>null!=t))},r.combineConfig(t.map((t=>t.config)),{delay:750,markerFilter:null,tooltipFilter:null,needsRefresh:null,hideOn:()=>null},{needsRefresh:(t,e)=>t?e?i=>t(i)||e(i):t:e}))});function k(t){let e=[];if(t)t:for(let{name:i}of t){for(let t=0;t<i.length;t++){let n=i[t];if(/[a-zA-Z]/.test(n)&&!e.some((t=>t.toLowerCase()==n.toLowerCase()))){e.push(n);continue t}}e.push("")}return e}function A(t,e,i){var n;let r=i?k(e.actions):[];return s("li",{class:"cm-diagnostic cm-diagnostic-"+e.severity},s("span",{class:"cm-diagnosticText"},e.renderMessage?e.renderMessage(t):e.message),null===(n=e.actions)||void 0===n?void 0:n.map(((i,n)=>{let o=!1,l=n=>{if(n.preventDefault(),o)return;o=!0;let r=a(t.state.field(m).diagnostics,e);r&&i.apply(t,r.from,r.to)},{name:h}=i,c=r[n]?h.indexOf(r[n]):-1,u=c<0?h:[h.slice(0,c),s("u",h.slice(c,c+1)),h.slice(c+1)];return s("button",{type:"button",class:"cm-diagnosticAction",onclick:l,onmousedown:l,"aria-label":` Action: ${h}${c<0?"":` (access key "${r[n]})"`}.`},u)})),e.source&&s("div",{class:"cm-diagnosticSource"},e.source))}class E extends n.WidgetType{constructor(t){super(),this.diagnostic=t}eq(t){return t.diagnostic==this.diagnostic}toDOM(){return s("span",{class:"cm-lintPoint cm-lintPoint-"+this.diagnostic.severity})}}class T{constructor(t,e){this.diagnostic=e,this.id="item_"+Math.floor(4294967295*Math.random()).toString(16),this.dom=A(t,e,!0),this.dom.id=this.id,this.dom.setAttribute("role","option")}}class M{constructor(t){this.view=t,this.items=[],this.list=s("ul",{tabIndex:0,role:"listbox","aria-label":this.view.state.phrase("Diagnostics"),onkeydown:e=>{if(27==e.keyCode)y(this.view),this.view.focus();else if(38==e.keyCode||33==e.keyCode)this.moveSelection((this.selectedIndex-1+this.items.length)%this.items.length);else if(40==e.keyCode||34==e.keyCode)this.moveSelection((this.selectedIndex+1)%this.items.length);else if(36==e.keyCode)this.moveSelection(0);else if(35==e.keyCode)this.moveSelection(this.items.length-1);else if(13==e.keyCode)this.view.focus();else{if(!(e.keyCode>=65&&e.keyCode<=90&&this.selectedIndex>=0))return;{let{diagnostic:i}=this.items[this.selectedIndex],n=k(i.actions);for(let r=0;r<n.length;r++)if(n[r].toUpperCase().charCodeAt(0)==e.keyCode){let e=a(this.view.state.field(m).diagnostics,i);e&&i.actions[r].apply(t,e.from,e.to)}}}e.preventDefault()},onclick:t=>{for(let e=0;e<this.items.length;e++)this.items[e].dom.contains(t.target)&&this.moveSelection(e)}}),this.dom=s("div",{class:"cm-panel-lint"},this.list,s("button",{type:"button",name:"close","aria-label":this.view.state.phrase("close"),onclick:()=>y(this.view)},"×")),this.update()}get selectedIndex(){let t=this.view.state.field(m).selected;if(!t)return-1;for(let e=0;e<this.items.length;e++)if(this.items[e].diagnostic==t.diagnostic)return e;return-1}update(){let{diagnostics:t,selected:e}=this.view.state.field(m),i=0,n=!1,r=null;for(t.between(0,this.view.state.doc.length,((t,s,{spec:o})=>{let l,a=-1;for(let t=i;t<this.items.length;t++)if(this.items[t].diagnostic==o.diagnostic){a=t;break}a<0?(l=new T(this.view,o.diagnostic),this.items.splice(i,0,l),n=!0):(l=this.items[a],a>i&&(this.items.splice(i,a-i),n=!0)),e&&l.diagnostic==e.diagnostic?l.dom.hasAttribute("aria-selected")||(l.dom.setAttribute("aria-selected","true"),r=l):l.dom.hasAttribute("aria-selected")&&l.dom.removeAttribute("aria-selected"),i++}));i<this.items.length&&!(1==this.items.length&&this.items[0].diagnostic.from<0);)n=!0,this.items.pop();0==this.items.length&&(this.items.push(new T(this.view,{from:-1,to:-1,severity:"info",message:this.view.state.phrase("No diagnostics")})),n=!0),r?(this.list.setAttribute("aria-activedescendant",r.id),this.view.requestMeasure({key:this,read:()=>({sel:r.dom.getBoundingClientRect(),panel:this.list.getBoundingClientRect()}),write:({sel:t,panel:e})=>{let i=e.height/this.list.offsetHeight;t.top<e.top?this.list.scrollTop-=(e.top-t.top)/i:t.bottom>e.bottom&&(this.list.scrollTop+=(t.bottom-e.bottom)/i)}})):this.selectedIndex<0&&this.list.removeAttribute("aria-activedescendant"),n&&this.sync()}sync(){let t=this.list.firstChild;function e(){let e=t;t=e.nextSibling,e.remove()}for(let i of this.items)if(i.dom.parentNode==this.list){for(;t!=i.dom;)e();t=i.dom.nextSibling}else this.list.insertBefore(i.dom,t);for(;t;)e()}moveSelection(t){if(this.selectedIndex<0)return;let e=a(this.view.state.field(m).diagnostics,this.items[t].diagnostic);e&&this.view.dispatch({selection:{anchor:e.from,head:e.to},scrollIntoView:!0,effects:p.of(e)})}static open(t){return new M(t)}}function N(t,e='viewBox="0 0 40 40"'){return`url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${e}>${encodeURIComponent(t)}</svg>')`}function P(t){return N(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${t}" fill="none" stroke-width=".7"/>`,'width="6" height="3"')}const O=n.EditorView.baseTheme({".cm-diagnostic":{padding:"3px 6px 3px 8px",marginLeft:"-1px",display:"block",whiteSpace:"pre-wrap"},".cm-diagnostic-error":{borderLeft:"5px solid #d11"},".cm-diagnostic-warning":{borderLeft:"5px solid orange"},".cm-diagnostic-info":{borderLeft:"5px solid #999"},".cm-diagnostic-hint":{borderLeft:"5px solid #66d"},".cm-diagnosticAction":{font:"inherit",border:"none",padding:"2px 4px",backgroundColor:"#444",color:"white",borderRadius:"3px",marginLeft:"8px",cursor:"pointer"},".cm-diagnosticSource":{fontSize:"70%",opacity:.7},".cm-lintRange":{backgroundPosition:"left bottom",backgroundRepeat:"repeat-x",paddingBottom:"0.7px"},".cm-lintRange-error":{backgroundImage:P("#d11")},".cm-lintRange-warning":{backgroundImage:P("orange")},".cm-lintRange-info":{backgroundImage:P("#999")},".cm-lintRange-hint":{backgroundImage:P("#66d")},".cm-lintRange-active":{backgroundColor:"#ffdd9980"},".cm-tooltip-lint":{padding:0,margin:0},".cm-lintPoint":{position:"relative","&:after":{content:'""',position:"absolute",bottom:0,left:"-2px",borderLeft:"3px solid transparent",borderRight:"3px solid transparent",borderBottom:"4px solid #d11"}},".cm-lintPoint-warning":{"&:after":{borderBottomColor:"orange"}},".cm-lintPoint-info":{"&:after":{borderBottomColor:"#999"}},".cm-lintPoint-hint":{"&:after":{borderBottomColor:"#66d"}},".cm-panel.cm-panel-lint":{position:"relative","& ul":{maxHeight:"100px",overflowY:"auto","& [aria-selected]":{backgroundColor:"#ddd","& u":{textDecoration:"underline"}},"&:focus [aria-selected]":{background_fallback:"#bdf",backgroundColor:"Highlight",color_fallback:"white",color:"HighlightText"},"& u":{textDecoration:"none"},padding:0,margin:0},"& [name=close]":{position:"absolute",top:"0",right:"2px",background:"inherit",border:"none",font:"inherit",padding:0,margin:0}}});function D(t){return"error"==t?4:"warning"==t?3:"info"==t?2:1}class L extends n.GutterMarker{constructor(t){super(),this.diagnostics=t,this.severity=t.reduce(((t,e)=>D(t)<D(e.severity)?e.severity:t),"hint")}toDOM(t){let e=document.createElement("div");e.className="cm-lint-marker cm-lint-marker-"+this.severity;let i=this.diagnostics,n=t.state.facet(H).tooltipFilter;return n&&(i=n(i,t.state)),i.length&&(e.onmouseover=()=>function(t,e,i){function n(){let n=t.elementAtHeight(e.getBoundingClientRect().top+5-t.documentTop);t.coordsAtPos(n.from)&&t.dispatch({effects:F.of({pos:n.from,above:!1,create:()=>({dom:v(t,i),getCoords:()=>e.getBoundingClientRect()})})}),e.onmouseout=e.onmousemove=null,function(t,e){let i=n=>{let r=e.getBoundingClientRect();if(!(n.clientX>r.left-10&&n.clientX<r.right+10&&n.clientY>r.top-10&&n.clientY<r.bottom+10)){for(let t=n.target;t;t=t.parentNode)if(1==t.nodeType&&t.classList.contains("cm-tooltip-lint"))return;window.removeEventListener("mousemove",i),t.state.field(_)&&t.dispatch({effects:F.of(null)})}};window.addEventListener("mousemove",i)}(t,e)}let{hoverTime:r}=t.state.facet(H),s=setTimeout(n,r);e.onmouseout=()=>{clearTimeout(s),e.onmouseout=e.onmousemove=null},e.onmousemove=()=>{clearTimeout(s),s=setTimeout(n,r)}}(t,e,i)),e}}function R(t,e){let i=Object.create(null);for(let n of e){let e=t.lineAt(n.from);(i[e.from]||(i[e.from]=[])).push(n)}let n=[];for(let t in i)n.push(new L(i[t]).range(+t));return r.RangeSet.of(n,!0)}const I=n.gutter({class:"cm-gutter-lint",markers:t=>t.state.field(B)}),B=r.StateField.define({create:()=>r.RangeSet.empty,update(t,e){t=t.map(e.changes);let i=e.state.facet(H).markerFilter;for(let n of e.effects)if(n.is(d)){let r=n.value;i&&(r=i(r||[],e.state)),t=R(e.state.doc,r.slice(0))}return t}}),F=r.StateEffect.define(),_=r.StateField.define({create:()=>null,update:(t,e)=>(t&&e.docChanged&&(t=h(e,t)?null:Object.assign(Object.assign({},t),{pos:e.changes.mapPos(t.pos)})),e.effects.reduce(((t,e)=>e.is(F)?e.value:t),t)),provide:t=>n.showTooltip.from(t)}),q=n.EditorView.baseTheme({".cm-gutter-lint":{width:"1.4em","& .cm-gutterElement":{padding:".2em"}},".cm-lint-marker":{width:"1em",height:"1em"},".cm-lint-marker-info":{content:N('<path fill="#aaf" stroke="#77e" stroke-width="6" stroke-linejoin="round" d="M5 5L35 5L35 35L5 35Z"/>')},".cm-lint-marker-warning":{content:N('<path fill="#fe8" stroke="#fd7" stroke-width="6" stroke-linejoin="round" d="M20 6L37 35L3 35Z"/>')},".cm-lint-marker-error":{content:N('<circle cx="20" cy="20" r="15" fill="#f87" stroke="#f43" stroke-width="6"/>')}}),V=[m,n.EditorView.decorations.compute([m],(t=>{let{selected:e,panel:i}=t.field(m);return e&&i&&e.from!=e.to?n.Decoration.set([g.range(e.from,e.to)]):n.Decoration.none})),n.hoverTooltip((function(t,e,i){let{diagnostics:n}=t.state.field(m),r=[],s=2e8,o=0;n.between(e-(i<0?1:0),e+(i>0?1:0),((t,n,{spec:l})=>{e>=t&&e<=n&&(t==n||(e>t||i>0)&&(e<n||i<0))&&(r.push(l.diagnostic),s=Math.min(t,s),o=Math.max(n,o))}));let l=t.state.facet(C).tooltipFilter;return l&&(r=l(r,t.state)),r.length?{pos:s,end:o,above:t.state.doc.lineAt(s).to<o,create:()=>({dom:v(t,r)})}:null}),{hideOn:h}),O],H=r.Facet.define({combine:t=>r.combineConfig(t,{hoverTime:300,markerFilter:null,tooltipFilter:null})});e.closeLintPanel=y,e.diagnosticCount=function(t){let e=t.field(m,!1);return e?e.diagnostics.size:0},e.forEachDiagnostic=function(t,e){let i=t.field(m,!1);if(i&&i.diagnostics.size)for(let t=r.RangeSet.iter([i.diagnostics]);t.value;t.next())e(t.value.spec.diagnostic,t.from,t.to)},e.forceLinting=function(t){let e=t.plugin(x);e&&e.force()},e.lintGutter=function(t={}){return[H.of(t),B,I,q,_]},e.lintKeymap=S,e.linter=function(t,e={}){return[C.of({source:t,config:e}),x,V]},e.nextDiagnostic=b,e.openLintPanel=w,e.previousDiagnostic=t=>{let{state:e}=t,i=e.field(m,!1);if(!i)return!1;let n,r,s,o,l=e.selection.main;return i.diagnostics.between(0,e.doc.length,((t,e)=>{e<l.to&&(null==n||n<t)&&(n=t,r=e),(null==s||t>s)&&(s=t,o=e)})),null!=s&&(null!=n||s!=l.from)&&(t.dispatch({selection:{anchor:null!=n?n:s,head:null!=r?r:o},scrollIntoView:!0}),!0)},e.setDiagnostics=u,e.setDiagnosticsEffect=d},8539:(t,e,i)=>{"use strict";var n=i(1506),r=i(9064),s=i(8748);const o="function"==typeof String.prototype.normalize?t=>t.normalize("NFKD"):t=>t;class l{constructor(t,e,i=0,n=t.length,r,s){this.test=s,this.value={from:0,to:0},this.done=!1,this.matches=[],this.buffer="",this.bufferPos=0,this.iter=t.iterRange(i,n),this.bufferStart=i,this.normalize=r?t=>r(o(t)):o,this.query=this.normalize(e)}peek(){if(this.bufferPos==this.buffer.length){if(this.bufferStart+=this.buffer.length,this.iter.next(),this.iter.done)return-1;this.bufferPos=0,this.buffer=this.iter.value}return r.codePointAt(this.buffer,this.bufferPos)}next(){for(;this.matches.length;)this.matches.pop();return this.nextOverlapping()}nextOverlapping(){for(;;){let t=this.peek();if(t<0)return this.done=!0,this;let e=r.fromCodePoint(t),i=this.bufferStart+this.bufferPos;this.bufferPos+=r.codePointSize(t);let n=this.normalize(e);for(let t=0,r=i;;t++){let s=n.charCodeAt(t),o=this.match(s,r,this.bufferPos+this.bufferStart);if(t==n.length-1){if(o)return this.value=o,this;break}r==i&&t<e.length&&e.charCodeAt(t)==s&&r++}}}match(t,e,i){let n=null;for(let e=0;e<this.matches.length;e+=2){let r=this.matches[e],s=!1;this.query.charCodeAt(r)==t&&(r==this.query.length-1?n={from:this.matches[e+1],to:i}:(this.matches[e]++,s=!0)),s||(this.matches.splice(e,2),e-=2)}return this.query.charCodeAt(0)==t&&(1==this.query.length?n={from:e,to:i}:this.matches.push(1,e)),n&&this.test&&!this.test(n.from,n.to,this.buffer,this.bufferStart)&&(n=null),n}}"undefined"!=typeof Symbol&&(l.prototype[Symbol.iterator]=function(){return this});const a={from:-1,to:-1,match:/.*/.exec("")},h="gm"+(null==/x/.unicode?"":"u");class c{constructor(t,e,i,n=0,r=t.length){if(this.text=t,this.to=r,this.curLine="",this.done=!1,this.value=a,/\\[sWDnr]|\n|\r|\[\^/.test(e))return new f(t,e,i,n,r);this.re=new RegExp(e,h+((null==i?void 0:i.ignoreCase)?"i":"")),this.test=null==i?void 0:i.test,this.iter=t.iter();let s=t.lineAt(n);this.curLineStart=s.from,this.matchPos=p(t,n),this.getLine(this.curLineStart)}getLine(t){this.iter.next(t),this.iter.lineBreak?this.curLine="":(this.curLine=this.iter.value,this.curLineStart+this.curLine.length>this.to&&(this.curLine=this.curLine.slice(0,this.to-this.curLineStart)),this.iter.next())}nextLine(){this.curLineStart=this.curLineStart+this.curLine.length+1,this.curLineStart>this.to?this.curLine="":this.getLine(0)}next(){for(let t=this.matchPos-this.curLineStart;;){this.re.lastIndex=t;let e=this.matchPos<=this.to&&this.re.exec(this.curLine);if(e){let i=this.curLineStart+e.index,n=i+e[0].length;if(this.matchPos=p(this.text,n+(i==n?1:0)),i==this.curLineStart+this.curLine.length&&this.nextLine(),(i<n||i>this.value.to)&&(!this.test||this.test(i,n,e)))return this.value={from:i,to:n,match:e},this;t=this.matchPos-this.curLineStart}else{if(!(this.curLineStart+this.curLine.length<this.to))return this.done=!0,this;this.nextLine(),t=0}}}}const u=new WeakMap;class d{constructor(t,e){this.from=t,this.text=e}get to(){return this.from+this.text.length}static get(t,e,i){let n=u.get(t);if(!n||n.from>=i||n.to<=e){let n=new d(e,t.sliceString(e,i));return u.set(t,n),n}if(n.from==e&&n.to==i)return n;let{text:r,from:s}=n;return s>e&&(r=t.sliceString(e,s)+r,s=e),n.to<i&&(r+=t.sliceString(n.to,i)),u.set(t,new d(s,r)),new d(e,r.slice(e-s,i-s))}}class f{constructor(t,e,i,n,r){this.text=t,this.to=r,this.done=!1,this.value=a,this.matchPos=p(t,n),this.re=new RegExp(e,h+((null==i?void 0:i.ignoreCase)?"i":"")),this.test=null==i?void 0:i.test,this.flat=d.get(t,n,this.chunkEnd(n+5e3))}chunkEnd(t){return t>=this.to?this.to:this.text.lineAt(t).to}next(){for(;;){let t=this.re.lastIndex=this.matchPos-this.flat.from,e=this.re.exec(this.flat.text);if(e&&!e[0]&&e.index==t&&(this.re.lastIndex=t+1,e=this.re.exec(this.flat.text)),e){let t=this.flat.from+e.index,i=t+e[0].length;if((this.flat.to>=this.to||e.index+e[0].length<=this.flat.text.length-10)&&(!this.test||this.test(t,i,e)))return this.value={from:t,to:i,match:e},this.matchPos=p(this.text,i+(t==i?1:0)),this}if(this.flat.to==this.to)return this.done=!0,this;this.flat=d.get(this.text,this.flat.from,this.chunkEnd(this.flat.from+2*this.flat.text.length))}}}function p(t,e){if(e>=t.length)return e;let i,n=t.lineAt(e);for(;e<n.to&&(i=n.text.charCodeAt(e-n.from))>=56320&&i<57344;)e++;return e}function m(t){let e=String(t.state.doc.lineAt(t.state.selection.main.head).number),i=s("input",{class:"cm-textfield",name:"line",value:e});function o(){let e=/^([+-])?(\d+)?(:\d+)?(%)?$/.exec(i.value);if(!e)return;let{state:s}=t,o=s.doc.lineAt(s.selection.main.head),[,l,a,h,c]=e,u=h?+h.slice(1):0,d=a?+a:o.number;if(a&&c){let t=d/100;l&&(t=t*("-"==l?-1:1)+o.number/s.doc.lines),d=Math.round(s.doc.lines*t)}else a&&l&&(d=d*("-"==l?-1:1)+o.number);let f=s.doc.line(Math.max(1,Math.min(s.doc.lines,d))),p=r.EditorSelection.cursor(f.from+Math.max(0,Math.min(u,f.length)));t.dispatch({effects:[g.of(!1),n.EditorView.scrollIntoView(p.from,{y:"center"})],selection:p}),t.focus()}return{dom:s("form",{class:"cm-gotoLine",onkeydown:e=>{27==e.keyCode?(e.preventDefault(),t.dispatch({effects:g.of(!1)}),t.focus()):13==e.keyCode&&(e.preventDefault(),o())},onsubmit:t=>{t.preventDefault(),o()}},s("label",t.state.phrase("Go to line"),": ",i)," ",s("button",{class:"cm-button",type:"submit"},t.state.phrase("go")))}}"undefined"!=typeof Symbol&&(c.prototype[Symbol.iterator]=f.prototype[Symbol.iterator]=function(){return this});const g=r.StateEffect.define(),v=r.StateField.define({create:()=>!0,update(t,e){for(let i of e.effects)i.is(g)&&(t=i.value);return t},provide:t=>n.showPanel.from(t,(t=>t?m:null))}),w=t=>{let e=n.getPanel(t,m);if(!e){let i=[g.of(!0)];null==t.state.field(v,!1)&&i.push(r.StateEffect.appendConfig.of([v,y])),t.dispatch({effects:i}),e=n.getPanel(t,m)}return e&&e.dom.querySelector("input").select(),!0},y=n.EditorView.baseTheme({".cm-panel.cm-gotoLine":{padding:"2px 6px 4px","& label":{fontSize:"80%"}}}),b={highlightWordAroundCursor:!1,minSelectionLength:1,maxMatches:100,wholeWords:!1},S=r.Facet.define({combine:t=>r.combineConfig(t,b,{highlightWordAroundCursor:(t,e)=>t||e,minSelectionLength:Math.min,maxMatches:Math.min})}),x=n.Decoration.mark({class:"cm-selectionMatch"}),C=n.Decoration.mark({class:"cm-selectionMatch cm-selectionMatch-main"});function k(t,e,i,n){return!(0!=i&&t(e.sliceDoc(i-1,i))==r.CharCategory.Word||n!=e.doc.length&&t(e.sliceDoc(n,n+1))==r.CharCategory.Word)}function A(t,e,i,n){return t(e.sliceDoc(i,i+1))==r.CharCategory.Word&&t(e.sliceDoc(n-1,n))==r.CharCategory.Word}const E=n.ViewPlugin.fromClass(class{constructor(t){this.decorations=this.getDeco(t)}update(t){(t.selectionSet||t.docChanged||t.viewportChanged)&&(this.decorations=this.getDeco(t.view))}getDeco(t){let e=t.state.facet(S),{state:i}=t,r=i.selection;if(r.ranges.length>1)return n.Decoration.none;let s,o=r.main,a=null;if(o.empty){if(!e.highlightWordAroundCursor)return n.Decoration.none;let t=i.wordAt(o.head);if(!t)return n.Decoration.none;a=i.charCategorizer(o.head),s=i.sliceDoc(t.from,t.to)}else{let t=o.to-o.from;if(t<e.minSelectionLength||t>200)return n.Decoration.none;if(e.wholeWords){if(s=i.sliceDoc(o.from,o.to),a=i.charCategorizer(o.head),!k(a,i,o.from,o.to)||!A(a,i,o.from,o.to))return n.Decoration.none}else if(s=i.sliceDoc(o.from,o.to),!s)return n.Decoration.none}let h=[];for(let r of t.visibleRanges){let t=new l(i.doc,s,r.from,r.to);for(;!t.next().done;){let{from:r,to:s}=t.value;if((!a||k(a,i,r,s))&&(o.empty&&r<=o.from&&s>=o.to?h.push(C.range(r,s)):(r>=o.to||s<=o.from)&&h.push(x.range(r,s)),h.length>e.maxMatches))return n.Decoration.none}}return n.Decoration.set(h)}},{decorations:t=>t.decorations}),T=n.EditorView.baseTheme({".cm-selectionMatch":{backgroundColor:"#99ff7780"},".cm-searchMatch .cm-selectionMatch":{backgroundColor:"transparent"}}),M=({state:t,dispatch:e})=>{let{ranges:i}=t.selection;if(i.some((t=>t.from===t.to)))return(({state:t,dispatch:e})=>{let{selection:i}=t,n=r.EditorSelection.create(i.ranges.map((e=>t.wordAt(e.head)||r.EditorSelection.cursor(e.head))),i.mainIndex);return!n.eq(i)&&(e(t.update({selection:n})),!0)})({state:t,dispatch:e});let s=t.sliceDoc(i[0].from,i[0].to);if(t.selection.ranges.some((e=>t.sliceDoc(e.from,e.to)!=s)))return!1;let o=function(t,e){let{main:i,ranges:n}=t.selection,r=t.wordAt(i.head),s=r&&r.from==i.from&&r.to==i.to;for(let i=!1,r=new l(t.doc,e,n[n.length-1].to);;){if(r.next(),!r.done){if(i&&n.some((t=>t.from==r.value.from)))continue;if(s){let e=t.wordAt(r.value.from);if(!e||e.from!=r.value.from||e.to!=r.value.to)continue}return r.value}if(i)return null;r=new l(t.doc,e,0,Math.max(0,n[n.length-1].from-1)),i=!0}}(t,s);return!!o&&(e(t.update({selection:t.selection.addRange(r.EditorSelection.range(o.from,o.to),!1),effects:n.EditorView.scrollIntoView(o.to)})),!0)},N=r.Facet.define({combine:t=>r.combineConfig(t,{top:!1,caseSensitive:!1,literal:!1,regexp:!1,wholeWord:!1,createPanel:t=>new lt(t),scrollToMatch:t=>n.EditorView.scrollIntoView(t)})});class P{constructor(t){this.search=t.search,this.caseSensitive=!!t.caseSensitive,this.literal=!!t.literal,this.regexp=!!t.regexp,this.replace=t.replace||"",this.valid=!!this.search&&(!this.regexp||function(t){try{return new RegExp(t,h),!0}catch(t){return!1}}(this.search)),this.unquoted=this.unquote(this.search),this.wholeWord=!!t.wholeWord}unquote(t){return this.literal?t:t.replace(/\\([nrt\\])/g,((t,e)=>"n"==e?"\n":"r"==e?"\r":"t"==e?"\t":"\\"))}eq(t){return this.search==t.search&&this.replace==t.replace&&this.caseSensitive==t.caseSensitive&&this.regexp==t.regexp&&this.wholeWord==t.wholeWord}create(){return this.regexp?new q(this):new R(this)}getCursor(t,e=0,i){let n=t.doc?t:r.EditorState.create({doc:t});return null==i&&(i=n.doc.length),this.regexp?I(this,n,e,i):D(this,n,e,i)}}class O{constructor(t){this.spec=t}}function D(t,e,i,n){return new l(e.doc,t.unquoted,i,n,t.caseSensitive?void 0:t=>t.toLowerCase(),t.wholeWord?L(e.doc,e.charCategorizer(e.selection.main.head)):void 0)}function L(t,e){return(i,n,s,o)=>((o>i||o+s.length<n)&&(o=Math.max(0,i-2),s=t.sliceString(o,Math.min(t.length,n+2))),!(e(B(s,i-o))==r.CharCategory.Word&&e(F(s,i-o))==r.CharCategory.Word||e(F(s,n-o))==r.CharCategory.Word&&e(B(s,n-o))==r.CharCategory.Word))}class R extends O{constructor(t){super(t)}nextMatch(t,e,i){let n=D(this.spec,t,i,t.doc.length).nextOverlapping();return n.done&&(n=D(this.spec,t,0,e).nextOverlapping()),n.done?null:n.value}prevMatchInRange(t,e,i){for(let n=i;;){let i=Math.max(e,n-1e4-this.spec.unquoted.length),r=D(this.spec,t,i,n),s=null;for(;!r.nextOverlapping().done;)s=r.value;if(s)return s;if(i==e)return null;n-=1e4}}prevMatch(t,e,i){return this.prevMatchInRange(t,0,e)||this.prevMatchInRange(t,i,t.doc.length)}getReplacement(t){return this.spec.unquote(this.spec.replace)}matchAll(t,e){let i=D(this.spec,t,0,t.doc.length),n=[];for(;!i.next().done;){if(n.length>=e)return null;n.push(i.value)}return n}highlight(t,e,i,n){let r=D(this.spec,t,Math.max(0,e-this.spec.unquoted.length),Math.min(i+this.spec.unquoted.length,t.doc.length));for(;!r.next().done;)n(r.value.from,r.value.to)}}function I(t,e,i,n){return new c(e.doc,t.search,{ignoreCase:!t.caseSensitive,test:t.wholeWord?_(e.charCategorizer(e.selection.main.head)):void 0},i,n)}function B(t,e){return t.slice(r.findClusterBreak(t,e,!1),e)}function F(t,e){return t.slice(e,r.findClusterBreak(t,e))}function _(t){return(e,i,n)=>!n[0].length||(t(B(n.input,n.index))!=r.CharCategory.Word||t(F(n.input,n.index))!=r.CharCategory.Word)&&(t(F(n.input,n.index+n[0].length))!=r.CharCategory.Word||t(B(n.input,n.index+n[0].length))!=r.CharCategory.Word)}class q extends O{nextMatch(t,e,i){let n=I(this.spec,t,i,t.doc.length).next();return n.done&&(n=I(this.spec,t,0,e).next()),n.done?null:n.value}prevMatchInRange(t,e,i){for(let n=1;;n++){let r=Math.max(e,i-1e4*n),s=I(this.spec,t,r,i),o=null;for(;!s.next().done;)o=s.value;if(o&&(r==e||o.from>r+10))return o;if(r==e)return null}}prevMatch(t,e,i){return this.prevMatchInRange(t,0,e)||this.prevMatchInRange(t,i,t.doc.length)}getReplacement(t){return this.spec.unquote(this.spec.replace).replace(/\$([$&\d+])/g,((e,i)=>"$"==i?"$":"&"==i?t.match[0]:"0"!=i&&+i<t.match.length?t.match[i]:e))}matchAll(t,e){let i=I(this.spec,t,0,t.doc.length),n=[];for(;!i.next().done;){if(n.length>=e)return null;n.push(i.value)}return n}highlight(t,e,i,n){let r=I(this.spec,t,Math.max(0,e-250),Math.min(i+250,t.doc.length));for(;!r.next().done;)n(r.value.from,r.value.to)}}const V=r.StateEffect.define(),H=r.StateEffect.define(),W=r.StateField.define({create:t=>new z(et(t).create(),null),update(t,e){for(let i of e.effects)i.is(V)?t=new z(i.value.create(),t.panel):i.is(H)&&(t=new z(t.query,i.value?tt:null));return t},provide:t=>n.showPanel.from(t,(t=>t.panel))});class z{constructor(t,e){this.query=t,this.panel=e}}const j=n.Decoration.mark({class:"cm-searchMatch"}),U=n.Decoration.mark({class:"cm-searchMatch cm-searchMatch-selected"}),K=n.ViewPlugin.fromClass(class{constructor(t){this.view=t,this.decorations=this.highlight(t.state.field(W))}update(t){let e=t.state.field(W);(e!=t.startState.field(W)||t.docChanged||t.selectionSet||t.viewportChanged)&&(this.decorations=this.highlight(e))}highlight({query:t,panel:e}){if(!e||!t.spec.valid)return n.Decoration.none;let{view:i}=this,s=new r.RangeSetBuilder;for(let e=0,n=i.visibleRanges,r=n.length;e<r;e++){let{from:o,to:l}=n[e];for(;e<r-1&&l>n[e+1].from-500;)l=n[++e].to;t.highlight(i.state,o,l,((t,e)=>{let n=i.state.selection.ranges.some((i=>i.from==t&&i.to==e));s.add(t,e,n?U:j)}))}return s.finish()}},{decorations:t=>t.decorations});function G(t){return e=>{let i=e.state.field(W,!1);return i&&i.query.spec.valid?t(e,i):rt(e)}}const $=G(((t,{query:e})=>{let{to:i}=t.state.selection.main,n=e.nextMatch(t.state,i,i);if(!n)return!1;let s=r.EditorSelection.single(n.from,n.to),o=t.state.facet(N);return t.dispatch({selection:s,effects:[ut(t,n),o.scrollToMatch(s.main,t)],userEvent:"select.search"}),nt(t),!0})),Y=G(((t,{query:e})=>{let{state:i}=t,{from:n}=i.selection.main,s=e.prevMatch(i,n,n);if(!s)return!1;let o=r.EditorSelection.single(s.from,s.to),l=t.state.facet(N);return t.dispatch({selection:o,effects:[ut(t,s),l.scrollToMatch(o.main,t)],userEvent:"select.search"}),nt(t),!0})),J=G(((t,{query:e})=>{let i=e.matchAll(t.state,1e3);return!(!i||!i.length||(t.dispatch({selection:r.EditorSelection.create(i.map((t=>r.EditorSelection.range(t.from,t.to)))),userEvent:"select.search.matches"}),0))})),X=({state:t,dispatch:e})=>{let i=t.selection;if(i.ranges.length>1||i.main.empty)return!1;let{from:n,to:s}=i.main,o=[],a=0;for(let e=new l(t.doc,t.sliceDoc(n,s));!e.next().done;){if(o.length>1e3)return!1;e.value.from==n&&(a=o.length),o.push(r.EditorSelection.range(e.value.from,e.value.to))}return e(t.update({selection:r.EditorSelection.create(o,a),userEvent:"select.search.matches"})),!0},Z=G(((t,{query:e})=>{let{state:i}=t,{from:s,to:o}=i.selection.main;if(i.readOnly)return!1;let l=e.nextMatch(i,s,s);if(!l)return!1;let a,h,c=[],u=[];if(l.from==s&&l.to==o&&(h=i.toText(e.getReplacement(l)),c.push({from:l.from,to:l.to,insert:h}),l=e.nextMatch(i,l.from,l.to),u.push(n.EditorView.announce.of(i.phrase("replaced match on line $",i.doc.lineAt(s).number)+"."))),l){let e=0==c.length||c[0].from>=l.to?0:l.to-l.from-h.length;a=r.EditorSelection.single(l.from-e,l.to-e),u.push(ut(t,l)),u.push(i.facet(N).scrollToMatch(a.main,t))}return t.dispatch({changes:c,selection:a,effects:u,userEvent:"input.replace"}),!0})),Q=G(((t,{query:e})=>{if(t.state.readOnly)return!1;let i=e.matchAll(t.state,1e9).map((t=>{let{from:i,to:n}=t;return{from:i,to:n,insert:e.getReplacement(t)}}));if(!i.length)return!1;let r=t.state.phrase("replaced $ matches",i.length)+".";return t.dispatch({changes:i,effects:n.EditorView.announce.of(r),userEvent:"input.replace.all"}),!0}));function tt(t){return t.state.facet(N).createPanel(t)}function et(t,e){var i,n,r,s,o;let l=t.selection.main,a=l.empty||l.to>l.from+100?"":t.sliceDoc(l.from,l.to);if(e&&!a)return e;let h=t.facet(N);return new P({search:(null!==(i=null==e?void 0:e.literal)&&void 0!==i?i:h.literal)?a:a.replace(/\n/g,"\\n"),caseSensitive:null!==(n=null==e?void 0:e.caseSensitive)&&void 0!==n?n:h.caseSensitive,literal:null!==(r=null==e?void 0:e.literal)&&void 0!==r?r:h.literal,regexp:null!==(s=null==e?void 0:e.regexp)&&void 0!==s?s:h.regexp,wholeWord:null!==(o=null==e?void 0:e.wholeWord)&&void 0!==o?o:h.wholeWord})}function it(t){let e=n.getPanel(t,tt);return e&&e.dom.querySelector("[main-field]")}function nt(t){let e=it(t);e&&e==t.root.activeElement&&e.select()}const rt=t=>{let e=t.state.field(W,!1);if(e&&e.panel){let i=it(t);if(i&&i!=t.root.activeElement){let n=et(t.state,e.query.spec);n.valid&&t.dispatch({effects:V.of(n)}),i.focus(),i.select()}}else t.dispatch({effects:[H.of(!0),e?V.of(et(t.state,e.query.spec)):r.StateEffect.appendConfig.of(ft)]});return!0},st=t=>{let e=t.state.field(W,!1);if(!e||!e.panel)return!1;let i=n.getPanel(t,tt);return i&&i.dom.contains(t.root.activeElement)&&t.focus(),t.dispatch({effects:H.of(!1)}),!0},ot=[{key:"Mod-f",run:rt,scope:"editor search-panel"},{key:"F3",run:$,shift:Y,scope:"editor search-panel",preventDefault:!0},{key:"Mod-g",run:$,shift:Y,scope:"editor search-panel",preventDefault:!0},{key:"Escape",run:st,scope:"editor search-panel"},{key:"Mod-Shift-l",run:X},{key:"Mod-Alt-g",run:w},{key:"Mod-d",run:M,preventDefault:!0}];class lt{constructor(t){this.view=t;let e=this.query=t.state.field(W).query.spec;function i(t,e,i){return s("button",{class:"cm-button",name:t,onclick:e,type:"button"},i)}this.commit=this.commit.bind(this),this.searchField=s("input",{value:e.search,placeholder:at(t,"Find"),"aria-label":at(t,"Find"),class:"cm-textfield",name:"search",form:"","main-field":"true",onchange:this.commit,onkeyup:this.commit}),this.replaceField=s("input",{value:e.replace,placeholder:at(t,"Replace"),"aria-label":at(t,"Replace"),class:"cm-textfield",name:"replace",form:"",onchange:this.commit,onkeyup:this.commit}),this.caseField=s("input",{type:"checkbox",name:"case",form:"",checked:e.caseSensitive,onchange:this.commit}),this.reField=s("input",{type:"checkbox",name:"re",form:"",checked:e.regexp,onchange:this.commit}),this.wordField=s("input",{type:"checkbox",name:"word",form:"",checked:e.wholeWord,onchange:this.commit}),this.dom=s("div",{onkeydown:t=>this.keydown(t),class:"cm-search"},[this.searchField,i("next",(()=>$(t)),[at(t,"next")]),i("prev",(()=>Y(t)),[at(t,"previous")]),i("select",(()=>J(t)),[at(t,"all")]),s("label",null,[this.caseField,at(t,"match case")]),s("label",null,[this.reField,at(t,"regexp")]),s("label",null,[this.wordField,at(t,"by word")]),...t.state.readOnly?[]:[s("br"),this.replaceField,i("replace",(()=>Z(t)),[at(t,"replace")]),i("replaceAll",(()=>Q(t)),[at(t,"replace all")])],s("button",{name:"close",onclick:()=>st(t),"aria-label":at(t,"close"),type:"button"},["×"])])}commit(){let t=new P({search:this.searchField.value,caseSensitive:this.caseField.checked,regexp:this.reField.checked,wholeWord:this.wordField.checked,replace:this.replaceField.value});t.eq(this.query)||(this.query=t,this.view.dispatch({effects:V.of(t)}))}keydown(t){n.runScopeHandlers(this.view,t,"search-panel")?t.preventDefault():13==t.keyCode&&t.target==this.searchField?(t.preventDefault(),(t.shiftKey?Y:$)(this.view)):13==t.keyCode&&t.target==this.replaceField&&(t.preventDefault(),Z(this.view))}update(t){for(let e of t.transactions)for(let t of e.effects)t.is(V)&&!t.value.eq(this.query)&&this.setQuery(t.value)}setQuery(t){this.query=t,this.searchField.value=t.search,this.replaceField.value=t.replace,this.caseField.checked=t.caseSensitive,this.reField.checked=t.regexp,this.wordField.checked=t.wholeWord}mount(){this.searchField.select()}get pos(){return 80}get top(){return this.view.state.facet(N).top}}function at(t,e){return t.state.phrase(e)}const ht=30,ct=/[\s\.,:;?!]/;function ut(t,{from:e,to:i}){let r=t.state.doc.lineAt(e),s=t.state.doc.lineAt(i).to,o=Math.max(r.from,e-ht),l=Math.min(s,i+ht),a=t.state.sliceDoc(o,l);if(o!=r.from)for(let t=0;t<ht;t++)if(!ct.test(a[t+1])&&ct.test(a[t])){a=a.slice(t);break}if(l!=s)for(let t=a.length-1;t>a.length-ht;t--)if(!ct.test(a[t-1])&&ct.test(a[t])){a=a.slice(0,t);break}return n.EditorView.announce.of(`${t.state.phrase("current match")}. ${a} ${t.state.phrase("on line")} ${r.number}.`)}const dt=n.EditorView.baseTheme({".cm-panel.cm-search":{padding:"2px 6px 4px",position:"relative","& [name=close]":{position:"absolute",top:"0",right:"4px",backgroundColor:"inherit",border:"none",font:"inherit",padding:0,margin:0},"& input, & button, & label":{margin:".2em .6em .2em 0"},"& input[type=checkbox]":{marginRight:".2em"},"& label":{fontSize:"80%",whiteSpace:"pre"}},"&light .cm-searchMatch":{backgroundColor:"#ffff0054"},"&dark .cm-searchMatch":{backgroundColor:"#00ffff8a"},"&light .cm-searchMatch-selected":{backgroundColor:"#ff6a0054"},"&dark .cm-searchMatch-selected":{backgroundColor:"#ff00ff8a"}}),ft=[W,r.Prec.low(K),dt];e.RegExpCursor=c,e.SearchCursor=l,e.SearchQuery=P,e.closeSearchPanel=st,e.findNext=$,e.findPrevious=Y,e.getSearchQuery=function(t){let e=t.field(W,!1);return e?e.query.spec:et(t)},e.gotoLine=w,e.highlightSelectionMatches=function(t){let e=[T,E];return t&&e.push(S.of(t)),e},e.openSearchPanel=rt,e.replaceAll=Q,e.replaceNext=Z,e.search=function(t){return t?[N.of(t),ft]:ft},e.searchKeymap=ot,e.searchPanelOpen=function(t){var e;return null!=(null===(e=t.field(W,!1))||void 0===e?void 0:e.panel)},e.selectMatches=J,e.selectNextOccurrence=M,e.selectSelectionMatches=X,e.setSearchQuery=V},9064:(t,e)=>{"use strict";class i{lineAt(t){if(t<0||t>this.length)throw new RangeError(`Invalid position ${t} in document of length ${this.length}`);return this.lineInner(t,!1,1,0)}line(t){if(t<1||t>this.lines)throw new RangeError(`Invalid line number ${t} in ${this.lines}-line document`);return this.lineInner(t,!0,1,0)}replace(t,e,i){[t,e]=u(this,t,e);let n=[];return this.decompose(0,t,n,2),i.length&&i.decompose(0,i.length,n,3),this.decompose(e,this.length,n,1),r.from(n,this.length-(e-t)+i.length)}append(t){return this.replace(this.length,this.length,t)}slice(t,e=this.length){[t,e]=u(this,t,e);let i=[];return this.decompose(t,e,i,0),r.from(i,e-t)}eq(t){if(t==this)return!0;if(t.length!=this.length||t.lines!=this.lines)return!1;let e=this.scanIdentical(t,1),i=this.length-this.scanIdentical(t,-1),n=new l(this),r=new l(t);for(let t=e,s=e;;){if(n.next(t),r.next(t),t=0,n.lineBreak!=r.lineBreak||n.done!=r.done||n.value!=r.value)return!1;if(s+=n.value.length,n.done||s>=i)return!0}}iter(t=1){return new l(this,t)}iterRange(t,e=this.length){return new a(this,t,e)}iterLines(t,e){let i;if(null==t)i=this.iter();else{null==e&&(e=this.lines+1);let n=this.line(t).from;i=this.iterRange(n,Math.max(n,e==this.lines+1?this.length:e<=1?0:this.line(e-1).to))}return new h(i)}toString(){return this.sliceString(0)}toJSON(){let t=[];return this.flatten(t),t}constructor(){}static of(t){if(0==t.length)throw new RangeError("A document must have at least one line");return 1!=t.length||t[0]?t.length<=32?new n(t):r.from(n.split(t,[])):i.empty}}class n extends i{constructor(t,e=function(t){let e=-1;for(let i of t)e+=i.length+1;return e}(t)){super(),this.text=t,this.length=e}get lines(){return this.text.length}get children(){return null}lineInner(t,e,i,n){for(let r=0;;r++){let s=this.text[r],o=n+s.length;if((e?i:o)>=t)return new c(n,o,i,s);n=o+1,i++}}decompose(t,e,i,r){let l=t<=0&&e>=this.length?this:new n(o(this.text,t,e),Math.min(e,this.length)-Math.max(0,t));if(1&r){let t=i.pop(),e=s(l.text,t.text.slice(),0,l.length);if(e.length<=32)i.push(new n(e,t.length+l.length));else{let t=e.length>>1;i.push(new n(e.slice(0,t)),new n(e.slice(t)))}}else i.push(l)}replace(t,e,i){if(!(i instanceof n))return super.replace(t,e,i);[t,e]=u(this,t,e);let l=s(this.text,s(i.text,o(this.text,0,t)),e),a=this.length+i.length-(e-t);return l.length<=32?new n(l,a):r.from(n.split(l,[]),a)}sliceString(t,e=this.length,i="\n"){[t,e]=u(this,t,e);let n="";for(let r=0,s=0;r<=e&&s<this.text.length;s++){let o=this.text[s],l=r+o.length;r>t&&s&&(n+=i),t<l&&e>r&&(n+=o.slice(Math.max(0,t-r),e-r)),r=l+1}return n}flatten(t){for(let e of this.text)t.push(e)}scanIdentical(){return 0}static split(t,e){let i=[],r=-1;for(let s of t)i.push(s),r+=s.length+1,32==i.length&&(e.push(new n(i,r)),i=[],r=-1);return r>-1&&e.push(new n(i,r)),e}}class r extends i{constructor(t,e){super(),this.children=t,this.length=e,this.lines=0;for(let e of t)this.lines+=e.lines}lineInner(t,e,i,n){for(let r=0;;r++){let s=this.children[r],o=n+s.length,l=i+s.lines-1;if((e?l:o)>=t)return s.lineInner(t,e,i,n);n=o+1,i=l+1}}decompose(t,e,i,n){for(let r=0,s=0;s<=e&&r<this.children.length;r++){let o=this.children[r],l=s+o.length;if(t<=l&&e>=s){let r=n&((s<=t?1:0)|(l>=e?2:0));s>=t&&l<=e&&!r?i.push(o):o.decompose(t-s,e-s,i,r)}s=l+1}}replace(t,e,i){if([t,e]=u(this,t,e),i.lines<this.lines)for(let n=0,s=0;n<this.children.length;n++){let o=this.children[n],l=s+o.length;if(t>=s&&e<=l){let a=o.replace(t-s,e-s,i),h=this.lines-o.lines+a.lines;if(a.lines<h>>4&&a.lines>h>>6){let s=this.children.slice();return s[n]=a,new r(s,this.length-(e-t)+i.length)}return super.replace(s,l,a)}s=l+1}return super.replace(t,e,i)}sliceString(t,e=this.length,i="\n"){[t,e]=u(this,t,e);let n="";for(let r=0,s=0;r<this.children.length&&s<=e;r++){let o=this.children[r],l=s+o.length;s>t&&r&&(n+=i),t<l&&e>s&&(n+=o.sliceString(t-s,e-s,i)),s=l+1}return n}flatten(t){for(let e of this.children)e.flatten(t)}scanIdentical(t,e){if(!(t instanceof r))return 0;let i=0,[n,s,o,l]=e>0?[0,0,this.children.length,t.children.length]:[this.children.length-1,t.children.length-1,-1,-1];for(;;n+=e,s+=e){if(n==o||s==l)return i;let r=this.children[n],a=t.children[s];if(r!=a)return i+r.scanIdentical(a,e);i+=r.length+1}}static from(t,e=t.reduce(((t,e)=>t+e.length+1),-1)){let i=0;for(let e of t)i+=e.lines;if(i<32){let i=[];for(let e of t)e.flatten(i);return new n(i,e)}let s=Math.max(32,i>>5),o=s<<1,l=s>>1,a=[],h=0,c=-1,u=[];function d(t){let e;if(t.lines>o&&t instanceof r)for(let e of t.children)d(e);else t.lines>l&&(h>l||!h)?(f(),a.push(t)):t instanceof n&&h&&(e=u[u.length-1])instanceof n&&t.lines+e.lines<=32?(h+=t.lines,c+=t.length+1,u[u.length-1]=new n(e.text.concat(t.text),e.length+1+t.length)):(h+t.lines>s&&f(),h+=t.lines,c+=t.length+1,u.push(t))}function f(){0!=h&&(a.push(1==u.length?u[0]:r.from(u,c)),c=-1,h=u.length=0)}for(let e of t)d(e);return f(),1==a.length?a[0]:new r(a,e)}}function s(t,e,i=0,n=1e9){for(let r=0,s=0,o=!0;s<t.length&&r<=n;s++){let l=t[s],a=r+l.length;a>=i&&(a>n&&(l=l.slice(0,n-r)),r<i&&(l=l.slice(i-r)),o?(e[e.length-1]+=l,o=!1):e.push(l)),r=a+1}return e}function o(t,e,i){return s(t,[""],e,i)}i.empty=new n([""],0);class l{constructor(t,e=1){this.dir=e,this.done=!1,this.lineBreak=!1,this.value="",this.nodes=[t],this.offsets=[e>0?1:(t instanceof n?t.text.length:t.children.length)<<1]}nextInner(t,e){for(this.done=this.lineBreak=!1;;){let i=this.nodes.length-1,r=this.nodes[i],s=this.offsets[i],o=s>>1,l=r instanceof n?r.text.length:r.children.length;if(o==(e>0?l:0)){if(0==i)return this.done=!0,this.value="",this;e>0&&this.offsets[i-1]++,this.nodes.pop(),this.offsets.pop()}else if((1&s)==(e>0?0:1)){if(this.offsets[i]+=e,0==t)return this.lineBreak=!0,this.value="\n",this;t--}else if(r instanceof n){let n=r.text[o+(e<0?-1:0)];if(this.offsets[i]+=e,n.length>Math.max(0,t))return this.value=0==t?n:e>0?n.slice(t):n.slice(0,n.length-t),this;t-=n.length}else{let s=r.children[o+(e<0?-1:0)];t>s.length?(t-=s.length,this.offsets[i]+=e):(e<0&&this.offsets[i]--,this.nodes.push(s),this.offsets.push(e>0?1:(s instanceof n?s.text.length:s.children.length)<<1))}}}next(t=0){return t<0&&(this.nextInner(-t,-this.dir),t=this.value.length),this.nextInner(t,this.dir)}}class a{constructor(t,e,i){this.value="",this.done=!1,this.cursor=new l(t,e>i?-1:1),this.pos=e>i?t.length:0,this.from=Math.min(e,i),this.to=Math.max(e,i)}nextInner(t,e){if(e<0?this.pos<=this.from:this.pos>=this.to)return this.value="",this.done=!0,this;t+=Math.max(0,e<0?this.pos-this.to:this.from-this.pos);let i=e<0?this.pos-this.from:this.to-this.pos;t>i&&(t=i),i-=t;let{value:n}=this.cursor.next(t);return this.pos+=(n.length+t)*e,this.value=n.length<=i?n:e<0?n.slice(n.length-i):n.slice(0,i),this.done=!this.value,this}next(t=0){return t<0?t=Math.max(t,this.from-this.pos):t>0&&(t=Math.min(t,this.to-this.pos)),this.nextInner(t,this.cursor.dir)}get lineBreak(){return this.cursor.lineBreak&&""!=this.value}}class h{constructor(t){this.inner=t,this.afterBreak=!0,this.value="",this.done=!1}next(t=0){let{done:e,lineBreak:i,value:n}=this.inner.next(t);return e&&this.afterBreak?(this.value="",this.afterBreak=!1):e?(this.done=!0,this.value=""):i?this.afterBreak?this.value="":(this.afterBreak=!0,this.next()):(this.value=n,this.afterBreak=!1),this}get lineBreak(){return!1}}"undefined"!=typeof Symbol&&(i.prototype[Symbol.iterator]=function(){return this.iter()},l.prototype[Symbol.iterator]=a.prototype[Symbol.iterator]=h.prototype[Symbol.iterator]=function(){return this});class c{constructor(t,e,i,n){this.from=t,this.to=e,this.number=i,this.text=n}get length(){return this.to-this.from}}function u(t,e,i){return[e=Math.max(0,Math.min(t.length,e)),Math.max(e,Math.min(t.length,i))]}let d="lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((t=>t?parseInt(t,36):1));for(let t=1;t<d.length;t++)d[t]+=d[t-1];function f(t){for(let e=1;e<d.length;e+=2)if(d[e]>t)return d[e-1]<=t;return!1}function p(t){return t>=127462&&t<=127487}const m=8205;function g(t,e,i=!0,n=!0){return(i?v:w)(t,e,n)}function v(t,e,i){if(e==t.length)return e;e&&y(t.charCodeAt(e))&&b(t.charCodeAt(e-1))&&e--;let n=S(t,e);for(e+=x(n);e<t.length;){let r=S(t,e);if(n==m||r==m||i&&f(r))e+=x(r),n=r;else{if(!p(r))break;{let i=0,n=e-2;for(;n>=0&&p(S(t,n));)i++,n-=2;if(i%2==0)break;e+=2}}}return e}function w(t,e,i){for(;e>0;){let n=v(t,e-2,i);if(n<e)return n;e--}return 0}function y(t){return t>=56320&&t<57344}function b(t){return t>=55296&&t<56320}function S(t,e){let i=t.charCodeAt(e);if(!b(i)||e+1==t.length)return i;let n=t.charCodeAt(e+1);return y(n)?n-56320+(i-55296<<10)+65536:i}function x(t){return t<65536?1:2}const C=/\r\n?|\n/;var k;e.MapMode=void 0,(k=e.MapMode||(e.MapMode={}))[k.Simple=0]="Simple",k[k.TrackDel=1]="TrackDel",k[k.TrackBefore=2]="TrackBefore",k[k.TrackAfter=3]="TrackAfter";class A{constructor(t){this.sections=t}get length(){let t=0;for(let e=0;e<this.sections.length;e+=2)t+=this.sections[e];return t}get newLength(){let t=0;for(let e=0;e<this.sections.length;e+=2){let i=this.sections[e+1];t+=i<0?this.sections[e]:i}return t}get empty(){return 0==this.sections.length||2==this.sections.length&&this.sections[1]<0}iterGaps(t){for(let e=0,i=0,n=0;e<this.sections.length;){let r=this.sections[e++],s=this.sections[e++];s<0?(t(i,n,r),n+=r):n+=s,i+=r}}iterChangedRanges(t,e=!1){N(this,t,e)}get invertedDesc(){let t=[];for(let e=0;e<this.sections.length;){let i=this.sections[e++],n=this.sections[e++];n<0?t.push(i,n):t.push(n,i)}return new A(t)}composeDesc(t){return this.empty?t:t.empty?this:O(this,t)}mapDesc(t,e=!1){return t.empty?this:P(this,t,e)}mapPos(t,i=-1,n=e.MapMode.Simple){let r=0,s=0;for(let o=0;o<this.sections.length;){let l=this.sections[o++],a=this.sections[o++],h=r+l;if(a<0){if(h>t)return s+(t-r);s+=l}else{if(n!=e.MapMode.Simple&&h>=t&&(n==e.MapMode.TrackDel&&r<t&&h>t||n==e.MapMode.TrackBefore&&r<t||n==e.MapMode.TrackAfter&&h>t))return null;if(h>t||h==t&&i<0&&!l)return t==r||i<0?s:s+a;s+=a}r=h}if(t>r)throw new RangeError(`Position ${t} is out of range for changeset of length ${r}`);return s}touchesRange(t,e=t){for(let i=0,n=0;i<this.sections.length&&n<=e;){let r=n+this.sections[i++];if(this.sections[i++]>=0&&n<=e&&r>=t)return!(n<t&&r>e)||"cover";n=r}return!1}toString(){let t="";for(let e=0;e<this.sections.length;){let i=this.sections[e++],n=this.sections[e++];t+=(t?" ":"")+i+(n>=0?":"+n:"")}return t}toJSON(){return this.sections}static fromJSON(t){if(!Array.isArray(t)||t.length%2||t.some((t=>"number"!=typeof t)))throw new RangeError("Invalid JSON representation of ChangeDesc");return new A(t)}static create(t){return new A(t)}}class E extends A{constructor(t,e){super(t),this.inserted=e}apply(t){if(this.length!=t.length)throw new RangeError("Applying change set to a document with the wrong length");return N(this,((e,i,n,r,s)=>t=t.replace(n,n+(i-e),s)),!1),t}mapDesc(t,e=!1){return P(this,t,e,!0)}invert(t){let e=this.sections.slice(),n=[];for(let r=0,s=0;r<e.length;r+=2){let o=e[r],l=e[r+1];if(l>=0){e[r]=l,e[r+1]=o;let a=r>>1;for(;n.length<a;)n.push(i.empty);n.push(o?t.slice(s,s+o):i.empty)}s+=o}return new E(e,n)}compose(t){return this.empty?t:t.empty?this:O(this,t,!0)}map(t,e=!1){return t.empty?this:P(this,t,e,!0)}iterChanges(t,e=!1){N(this,t,e)}get desc(){return A.create(this.sections)}filter(t){let e=[],i=[],n=[],r=new D(this);t:for(let s=0,o=0;;){let l=s==t.length?1e9:t[s++];for(;o<l||o==l&&0==r.len;){if(r.done)break t;let t=Math.min(r.len,l-o);T(n,t,-1);let s=-1==r.ins?-1:0==r.off?r.ins:0;T(e,t,s),s>0&&M(i,e,r.text),r.forward(t),o+=t}let a=t[s++];for(;o<a;){if(r.done)break t;let t=Math.min(r.len,a-o);T(e,t,-1),T(n,t,-1==r.ins?-1:0==r.off?r.ins:0),r.forward(t),o+=t}}return{changes:new E(e,i),filtered:A.create(n)}}toJSON(){let t=[];for(let e=0;e<this.sections.length;e+=2){let i=this.sections[e],n=this.sections[e+1];n<0?t.push(i):0==n?t.push([i]):t.push([i].concat(this.inserted[e>>1].toJSON()))}return t}static of(t,e,n){let r=[],s=[],o=0,l=null;function a(t=!1){if(!t&&!r.length)return;o<e&&T(r,e-o,-1);let i=new E(r,s);l=l?l.compose(i.map(l)):i,r=[],s=[],o=0}return function t(h){if(Array.isArray(h))for(let e of h)t(e);else if(h instanceof E){if(h.length!=e)throw new RangeError(`Mismatched change set length (got ${h.length}, expected ${e})`);a(),l=l?l.compose(h.map(l)):h}else{let{from:t,to:l=t,insert:c}=h;if(t>l||t<0||l>e)throw new RangeError(`Invalid change range ${t} to ${l} (in doc of length ${e})`);let u=c?"string"==typeof c?i.of(c.split(n||C)):c:i.empty,d=u.length;if(t==l&&0==d)return;t<o&&a(),t>o&&T(r,t-o,-1),T(r,l-t,d),M(s,r,u),o=l}}(t),a(!l),l}static empty(t){return new E(t?[t,-1]:[],[])}static fromJSON(t){if(!Array.isArray(t))throw new RangeError("Invalid JSON representation of ChangeSet");let e=[],n=[];for(let r=0;r<t.length;r++){let s=t[r];if("number"==typeof s)e.push(s,-1);else{if(!Array.isArray(s)||"number"!=typeof s[0]||s.some(((t,e)=>e&&"string"!=typeof t)))throw new RangeError("Invalid JSON representation of ChangeSet");if(1==s.length)e.push(s[0],0);else{for(;n.length<r;)n.push(i.empty);n[r]=i.of(s.slice(1)),e.push(s[0],n[r].length)}}}return new E(e,n)}static createSet(t,e){return new E(t,e)}}function T(t,e,i,n=!1){if(0==e&&i<=0)return;let r=t.length-2;r>=0&&i<=0&&i==t[r+1]?t[r]+=e:0==e&&0==t[r]?t[r+1]+=i:n?(t[r]+=e,t[r+1]+=i):t.push(e,i)}function M(t,e,n){if(0==n.length)return;let r=e.length-2>>1;if(r<t.length)t[t.length-1]=t[t.length-1].append(n);else{for(;t.length<r;)t.push(i.empty);t.push(n)}}function N(t,e,n){let r=t.inserted;for(let s=0,o=0,l=0;l<t.sections.length;){let a=t.sections[l++],h=t.sections[l++];if(h<0)s+=a,o+=a;else{let c=s,u=o,d=i.empty;for(;c+=a,u+=h,h&&r&&(d=d.append(r[l-2>>1])),!(n||l==t.sections.length||t.sections[l+1]<0);)a=t.sections[l++],h=t.sections[l++];e(s,c,o,u,d),s=c,o=u}}}function P(t,e,i,n=!1){let r=[],s=n?[]:null,o=new D(t),l=new D(e);for(let t=-1;;)if(-1==o.ins&&-1==l.ins){let t=Math.min(o.len,l.len);T(r,t,-1),o.forward(t),l.forward(t)}else if(l.ins>=0&&(o.ins<0||t==o.i||0==o.off&&(l.len<o.len||l.len==o.len&&!i))){let e=l.len;for(T(r,l.ins,-1);e;){let i=Math.min(o.len,e);o.ins>=0&&t<o.i&&o.len<=i&&(T(r,0,o.ins),s&&M(s,r,o.text),t=o.i),o.forward(i),e-=i}l.next()}else{if(!(o.ins>=0)){if(o.done&&l.done)return s?E.createSet(r,s):A.create(r);throw new Error("Mismatched change set lengths")}{let e=0,i=o.len;for(;i;)if(-1==l.ins){let t=Math.min(i,l.len);e+=t,i-=t,l.forward(t)}else{if(!(0==l.ins&&l.len<i))break;i-=l.len,l.next()}T(r,e,t<o.i?o.ins:0),s&&t<o.i&&M(s,r,o.text),t=o.i,o.forward(o.len-i)}}}function O(t,e,i=!1){let n=[],r=i?[]:null,s=new D(t),o=new D(e);for(let t=!1;;){if(s.done&&o.done)return r?E.createSet(n,r):A.create(n);if(0==s.ins)T(n,s.len,0,t),s.next();else if(0!=o.len||o.done){if(s.done||o.done)throw new Error("Mismatched change set lengths");{let e=Math.min(s.len2,o.len),i=n.length;if(-1==s.ins){let i=-1==o.ins?-1:o.off?0:o.ins;T(n,e,i,t),r&&i&&M(r,n,o.text)}else-1==o.ins?(T(n,s.off?0:s.len,e,t),r&&M(r,n,s.textBit(e))):(T(n,s.off?0:s.len,o.off?0:o.ins,t),r&&!o.off&&M(r,n,o.text));t=(s.ins>e||o.ins>=0&&o.len>e)&&(t||n.length>i),s.forward2(e),o.forward(e)}}else T(n,0,o.ins,t),r&&M(r,n,o.text),o.next()}}class D{constructor(t){this.set=t,this.i=0,this.next()}next(){let{sections:t}=this.set;this.i<t.length?(this.len=t[this.i++],this.ins=t[this.i++]):(this.len=0,this.ins=-2),this.off=0}get done(){return-2==this.ins}get len2(){return this.ins<0?this.len:this.ins}get text(){let{inserted:t}=this.set,e=this.i-2>>1;return e>=t.length?i.empty:t[e]}textBit(t){let{inserted:e}=this.set,n=this.i-2>>1;return n>=e.length&&!t?i.empty:e[n].slice(this.off,null==t?void 0:this.off+t)}forward(t){t==this.len?this.next():(this.len-=t,this.off+=t)}forward2(t){-1==this.ins?this.forward(t):t==this.ins?this.next():(this.ins-=t,this.off+=t)}}class L{constructor(t,e,i){this.from=t,this.to=e,this.flags=i}get anchor(){return 32&this.flags?this.to:this.from}get head(){return 32&this.flags?this.from:this.to}get empty(){return this.from==this.to}get assoc(){return 8&this.flags?-1:16&this.flags?1:0}get bidiLevel(){let t=7&this.flags;return 7==t?null:t}get goalColumn(){let t=this.flags>>6;return 16777215==t?void 0:t}map(t,e=-1){let i,n;return this.empty?i=n=t.mapPos(this.from,e):(i=t.mapPos(this.from,1),n=t.mapPos(this.to,-1)),i==this.from&&n==this.to?this:new L(i,n,this.flags)}extend(t,e=t){if(t<=this.anchor&&e>=this.anchor)return R.range(t,e);let i=Math.abs(t-this.anchor)>Math.abs(e-this.anchor)?t:e;return R.range(this.anchor,i)}eq(t,e=!1){return!(this.anchor!=t.anchor||this.head!=t.head||e&&this.empty&&this.assoc!=t.assoc)}toJSON(){return{anchor:this.anchor,head:this.head}}static fromJSON(t){if(!t||"number"!=typeof t.anchor||"number"!=typeof t.head)throw new RangeError("Invalid JSON representation for SelectionRange");return R.range(t.anchor,t.head)}static create(t,e,i){return new L(t,e,i)}}class R{constructor(t,e){this.ranges=t,this.mainIndex=e}map(t,e=-1){return t.empty?this:R.create(this.ranges.map((i=>i.map(t,e))),this.mainIndex)}eq(t,e=!1){if(this.ranges.length!=t.ranges.length||this.mainIndex!=t.mainIndex)return!1;for(let i=0;i<this.ranges.length;i++)if(!this.ranges[i].eq(t.ranges[i],e))return!1;return!0}get main(){return this.ranges[this.mainIndex]}asSingle(){return 1==this.ranges.length?this:new R([this.main],0)}addRange(t,e=!0){return R.create([t].concat(this.ranges),e?0:this.mainIndex+1)}replaceRange(t,e=this.mainIndex){let i=this.ranges.slice();return i[e]=t,R.create(i,this.mainIndex)}toJSON(){return{ranges:this.ranges.map((t=>t.toJSON())),main:this.mainIndex}}static fromJSON(t){if(!t||!Array.isArray(t.ranges)||"number"!=typeof t.main||t.main>=t.ranges.length)throw new RangeError("Invalid JSON representation for EditorSelection");return new R(t.ranges.map((t=>L.fromJSON(t))),t.main)}static single(t,e=t){return new R([R.range(t,e)],0)}static create(t,e=0){if(0==t.length)throw new RangeError("A selection needs at least one range");for(let i=0,n=0;n<t.length;n++){let r=t[n];if(r.empty?r.from<=i:r.from<i)return R.normalized(t.slice(),e);i=r.to}return new R(t,e)}static cursor(t,e=0,i,n){return L.create(t,t,(0==e?0:e<0?8:16)|(null==i?7:Math.min(6,i))|(null!=n?n:16777215)<<6)}static range(t,e,i,n){let r=(null!=i?i:16777215)<<6|(null==n?7:Math.min(6,n));return e<t?L.create(e,t,48|r):L.create(t,e,(e>t?8:0)|r)}static normalized(t,e=0){let i=t[e];t.sort(((t,e)=>t.from-e.from)),e=t.indexOf(i);for(let i=1;i<t.length;i++){let n=t[i],r=t[i-1];if(n.empty?n.from<=r.to:n.from<r.to){let s=r.from,o=Math.max(n.to,r.to);i<=e&&e--,t.splice(--i,2,n.anchor>n.head?R.range(o,s):R.range(s,o))}}return new R(t,e)}}function I(t,e){for(let i of t.ranges)if(i.to>e)throw new RangeError("Selection points outside of document")}let B=0;class F{constructor(t,e,i,n,r){this.combine=t,this.compareInput=e,this.compare=i,this.isStatic=n,this.id=B++,this.default=t([]),this.extensions="function"==typeof r?r(this):r}get reader(){return this}static define(t={}){return new F(t.combine||(t=>t),t.compareInput||((t,e)=>t===e),t.compare||(t.combine?(t,e)=>t===e:_),!!t.static,t.enables)}of(t){return new q([],this,0,t)}compute(t,e){if(this.isStatic)throw new Error("Can't compute a static facet");return new q(t,this,1,e)}computeN(t,e){if(this.isStatic)throw new Error("Can't compute a static facet");return new q(t,this,2,e)}from(t,e){return e||(e=t=>t),this.compute([t],(i=>e(i.field(t))))}}function _(t,e){return t==e||t.length==e.length&&t.every(((t,i)=>t===e[i]))}class q{constructor(t,e,i,n){this.dependencies=t,this.facet=e,this.type=i,this.value=n,this.id=B++}dynamicSlot(t){var e;let i=this.value,n=this.facet.compareInput,r=this.id,s=t[r]>>1,o=2==this.type,l=!1,a=!1,h=[];for(let i of this.dependencies)"doc"==i?l=!0:"selection"==i?a=!0:1&(null!==(e=t[i.id])&&void 0!==e?e:1)||h.push(t[i.id]);return{create:t=>(t.values[s]=i(t),1),update(t,e){if(l&&e.docChanged||a&&(e.docChanged||e.selection)||H(t,h)){let e=i(t);if(o?!V(e,t.values[s],n):!n(e,t.values[s]))return t.values[s]=e,1}return 0},reconfigure:(t,e)=>{let l,a=e.config.address[r];if(null!=a){let r=Z(e,a);if(this.dependencies.every((i=>i instanceof F?e.facet(i)===t.facet(i):!(i instanceof j)||e.field(i,!1)==t.field(i,!1)))||(o?V(l=i(t),r,n):n(l=i(t),r)))return t.values[s]=r,0}else l=i(t);return t.values[s]=l,1}}}}function V(t,e,i){if(t.length!=e.length)return!1;for(let n=0;n<t.length;n++)if(!i(t[n],e[n]))return!1;return!0}function H(t,e){let i=!1;for(let n of e)1&X(t,n)&&(i=!0);return i}function W(t,e,i){let n=i.map((e=>t[e.id])),r=i.map((t=>t.type)),s=n.filter((t=>!(1&t))),o=t[e.id]>>1;function l(t){let i=[];for(let e=0;e<n.length;e++){let s=Z(t,n[e]);if(2==r[e])for(let t of s)i.push(t);else i.push(s)}return e.combine(i)}return{create(t){for(let e of n)X(t,e);return t.values[o]=l(t),1},update(t,i){if(!H(t,s))return 0;let n=l(t);return e.compare(n,t.values[o])?0:(t.values[o]=n,1)},reconfigure(t,r){let s=H(t,n),a=r.config.facets[e.id],h=r.facet(e);if(a&&!s&&_(i,a))return t.values[o]=h,0;let c=l(t);return e.compare(c,h)?(t.values[o]=h,0):(t.values[o]=c,1)}}}const z=F.define({static:!0});class j{constructor(t,e,i,n,r){this.id=t,this.createF=e,this.updateF=i,this.compareF=n,this.spec=r,this.provides=void 0}static define(t){let e=new j(B++,t.create,t.update,t.compare||((t,e)=>t===e),t);return t.provide&&(e.provides=t.provide(e)),e}create(t){let e=t.facet(z).find((t=>t.field==this));return((null==e?void 0:e.create)||this.createF)(t)}slot(t){let e=t[this.id]>>1;return{create:t=>(t.values[e]=this.create(t),1),update:(t,i)=>{let n=t.values[e],r=this.updateF(n,i);return this.compareF(n,r)?0:(t.values[e]=r,1)},reconfigure:(t,i)=>null!=i.config.address[this.id]?(t.values[e]=i.field(this),0):(t.values[e]=this.create(t),1)}}init(t){return[this,z.of({field:this,create:t})]}get extension(){return this}}function U(t){return e=>new G(e,t)}const K={highest:U(0),high:U(1),default:U(2),low:U(3),lowest:U(4)};class G{constructor(t,e){this.inner=t,this.prec=e}}class ${of(t){return new Y(this,t)}reconfigure(t){return $.reconfigure.of({compartment:this,extension:t})}get(t){return t.config.compartments.get(this)}}class Y{constructor(t,e){this.compartment=t,this.inner=e}}class J{constructor(t,e,i,n,r,s){for(this.base=t,this.compartments=e,this.dynamicSlots=i,this.address=n,this.staticValues=r,this.facets=s,this.statusTemplate=[];this.statusTemplate.length<i.length;)this.statusTemplate.push(0)}staticFacet(t){let e=this.address[t.id];return null==e?t.default:this.staticValues[e>>1]}static resolve(t,e,i){let n=[],r=Object.create(null),s=new Map;for(let i of function(t,e,i){let n=[[],[],[],[],[]],r=new Map;return function t(s,o){let l=r.get(s);if(null!=l){if(l<=o)return;let t=n[l].indexOf(s);t>-1&&n[l].splice(t,1),s instanceof Y&&i.delete(s.compartment)}if(r.set(s,o),Array.isArray(s))for(let e of s)t(e,o);else if(s instanceof Y){if(i.has(s.compartment))throw new RangeError("Duplicate use of compartment in extensions");let n=e.get(s.compartment)||s.inner;i.set(s.compartment,n),t(n,o)}else if(s instanceof G)t(s.inner,s.prec);else if(s instanceof j)n[o].push(s),s.provides&&t(s.provides,o);else if(s instanceof q)n[o].push(s),s.facet.extensions&&t(s.facet.extensions,2);else{let e=s.extension;if(!e)throw new Error(`Unrecognized extension value in extension set (${s}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);t(e,o)}}(t,2),n.reduce(((t,e)=>t.concat(e)))}(t,e,s))i instanceof j?n.push(i):(r[i.facet.id]||(r[i.facet.id]=[])).push(i);let o=Object.create(null),l=[],a=[];for(let t of n)o[t.id]=a.length<<1,a.push((e=>t.slot(e)));let h=null==i?void 0:i.config.facets;for(let t in r){let e=r[t],n=e[0].facet,s=h&&h[t]||[];if(e.every((t=>0==t.type)))if(o[n.id]=l.length<<1|1,_(s,e))l.push(i.facet(n));else{let t=n.combine(e.map((t=>t.value)));l.push(i&&n.compare(t,i.facet(n))?i.facet(n):t)}else{for(let t of e)0==t.type?(o[t.id]=l.length<<1|1,l.push(t.value)):(o[t.id]=a.length<<1,a.push((e=>t.dynamicSlot(e))));o[n.id]=a.length<<1,a.push((t=>W(t,n,e)))}}let c=a.map((t=>t(o)));return new J(t,s,c,o,l,r)}}function X(t,e){if(1&e)return 2;let i=e>>1,n=t.status[i];if(4==n)throw new Error("Cyclic dependency between fields and/or facets");if(2&n)return n;t.status[i]=4;let r=t.computeSlot(t,t.config.dynamicSlots[i]);return t.status[i]=2|r}function Z(t,e){return 1&e?t.config.staticValues[e>>1]:t.values[e>>1]}const Q=F.define(),tt=F.define({combine:t=>t.some((t=>t)),static:!0}),et=F.define({combine:t=>t.length?t[0]:void 0,static:!0}),it=F.define(),nt=F.define(),rt=F.define(),st=F.define({combine:t=>!!t.length&&t[0]});class ot{constructor(t,e){this.type=t,this.value=e}static define(){return new lt}}class lt{of(t){return new ot(this,t)}}class at{constructor(t){this.map=t}of(t){return new ht(this,t)}}class ht{constructor(t,e){this.type=t,this.value=e}map(t){let e=this.type.map(this.value,t);return void 0===e?void 0:e==this.value?this:new ht(this.type,e)}is(t){return this.type==t}static define(t={}){return new at(t.map||(t=>t))}static mapEffects(t,e){if(!t.length)return t;let i=[];for(let n of t){let t=n.map(e);t&&i.push(t)}return i}}ht.reconfigure=ht.define(),ht.appendConfig=ht.define();class ct{constructor(t,e,i,n,r,s){this.startState=t,this.changes=e,this.selection=i,this.effects=n,this.annotations=r,this.scrollIntoView=s,this._doc=null,this._state=null,i&&I(i,e.newLength),r.some((t=>t.type==ct.time))||(this.annotations=r.concat(ct.time.of(Date.now())))}static create(t,e,i,n,r,s){return new ct(t,e,i,n,r,s)}get newDoc(){return this._doc||(this._doc=this.changes.apply(this.startState.doc))}get newSelection(){return this.selection||this.startState.selection.map(this.changes)}get state(){return this._state||this.startState.applyTransaction(this),this._state}annotation(t){for(let e of this.annotations)if(e.type==t)return e.value}get docChanged(){return!this.changes.empty}get reconfigured(){return this.startState.config!=this.state.config}isUserEvent(t){let e=this.annotation(ct.userEvent);return!(!e||!(e==t||e.length>t.length&&e.slice(0,t.length)==t&&"."==e[t.length]))}}function ut(t,e){let i=[];for(let n=0,r=0;;){let s,o;if(n<t.length&&(r==e.length||e[r]>=t[n]))s=t[n++],o=t[n++];else{if(!(r<e.length))return i;s=e[r++],o=e[r++]}!i.length||i[i.length-1]<s?i.push(s,o):i[i.length-1]<o&&(i[i.length-1]=o)}}function dt(t,e,i){var n;let r,s,o;return i?(r=e.changes,s=E.empty(e.changes.length),o=t.changes.compose(e.changes)):(r=e.changes.map(t.changes),s=t.changes.mapDesc(e.changes,!0),o=t.changes.compose(r)),{changes:o,selection:e.selection?e.selection.map(s):null===(n=t.selection)||void 0===n?void 0:n.map(r),effects:ht.mapEffects(t.effects,r).concat(ht.mapEffects(e.effects,s)),annotations:t.annotations.length?t.annotations.concat(e.annotations):e.annotations,scrollIntoView:t.scrollIntoView||e.scrollIntoView}}function ft(t,e,i){let n=e.selection,r=gt(e.annotations);return e.userEvent&&(r=r.concat(ct.userEvent.of(e.userEvent))),{changes:e.changes instanceof E?e.changes:E.of(e.changes||[],i,t.facet(et)),selection:n&&(n instanceof R?n:R.single(n.anchor,n.head)),effects:gt(e.effects),annotations:r,scrollIntoView:!!e.scrollIntoView}}function pt(t,e,i){let n=ft(t,e.length?e[0]:{},t.doc.length);e.length&&!1===e[0].filter&&(i=!1);for(let r=1;r<e.length;r++){!1===e[r].filter&&(i=!1);let s=!!e[r].sequential;n=dt(n,ft(t,e[r],s?n.changes.newLength:t.doc.length),s)}let r=ct.create(t,n.changes,n.selection,n.effects,n.annotations,n.scrollIntoView);return function(t){let e=t.startState,i=e.facet(rt),n=t;for(let r=i.length-1;r>=0;r--){let s=i[r](t);s&&Object.keys(s).length&&(n=dt(n,ft(e,s,t.changes.newLength),!0))}return n==t?t:ct.create(e,t.changes,t.selection,n.effects,n.annotations,n.scrollIntoView)}(i?function(t){let e=t.startState,i=!0;for(let n of e.facet(it)){let e=n(t);if(!1===e){i=!1;break}Array.isArray(e)&&(i=!0===i?e:ut(i,e))}if(!0!==i){let n,r;if(!1===i)r=t.changes.invertedDesc,n=E.empty(e.doc.length);else{let e=t.changes.filter(i);n=e.changes,r=e.filtered.mapDesc(e.changes).invertedDesc}t=ct.create(e,n,t.selection&&t.selection.map(r),ht.mapEffects(t.effects,r),t.annotations,t.scrollIntoView)}let n=e.facet(nt);for(let i=n.length-1;i>=0;i--){let r=n[i](t);t=r instanceof ct?r:Array.isArray(r)&&1==r.length&&r[0]instanceof ct?r[0]:pt(e,gt(r),!1)}return t}(r):r)}ct.time=ot.define(),ct.userEvent=ot.define(),ct.addToHistory=ot.define(),ct.remote=ot.define();const mt=[];function gt(t){return null==t?mt:Array.isArray(t)?t:[t]}var vt;e.CharCategory=void 0,(vt=e.CharCategory||(e.CharCategory={}))[vt.Word=0]="Word",vt[vt.Space=1]="Space",vt[vt.Other=2]="Other";const wt=/[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;let yt;try{yt=new RegExp("[\\p{Alphabetic}\\p{Number}_]","u")}catch(t){}class bt{constructor(t,e,i,n,r,s){this.config=t,this.doc=e,this.selection=i,this.values=n,this.status=t.statusTemplate.slice(),this.computeSlot=r,s&&(s._state=this);for(let t=0;t<this.config.dynamicSlots.length;t++)X(this,t<<1);this.computeSlot=null}field(t,e=!0){let i=this.config.address[t.id];if(null!=i)return X(this,i),Z(this,i);if(e)throw new RangeError("Field is not present in this state")}update(...t){return pt(this,t,!0)}applyTransaction(t){let e,i=this.config,{base:n,compartments:r}=i;for(let e of t.effects)e.is($.reconfigure)?(i&&(r=new Map,i.compartments.forEach(((t,e)=>r.set(e,t))),i=null),r.set(e.value.compartment,e.value.extension)):e.is(ht.reconfigure)?(i=null,n=e.value):e.is(ht.appendConfig)&&(i=null,n=gt(n).concat(e.value));i?e=t.startState.values.slice():(i=J.resolve(n,r,this),e=new bt(i,this.doc,this.selection,i.dynamicSlots.map((()=>null)),((t,e)=>e.reconfigure(t,this)),null).values);let s=t.startState.facet(tt)?t.newSelection:t.newSelection.asSingle();new bt(i,t.newDoc,s,e,((e,i)=>i.update(e,t)),t)}replaceSelection(t){return"string"==typeof t&&(t=this.toText(t)),this.changeByRange((e=>({changes:{from:e.from,to:e.to,insert:t},range:R.cursor(e.from+t.length)})))}changeByRange(t){let e=this.selection,i=t(e.ranges[0]),n=this.changes(i.changes),r=[i.range],s=gt(i.effects);for(let i=1;i<e.ranges.length;i++){let o=t(e.ranges[i]),l=this.changes(o.changes),a=l.map(n);for(let t=0;t<i;t++)r[t]=r[t].map(a);let h=n.mapDesc(l,!0);r.push(o.range.map(h)),n=n.compose(a),s=ht.mapEffects(s,a).concat(ht.mapEffects(gt(o.effects),h))}return{changes:n,selection:R.create(r,e.mainIndex),effects:s}}changes(t=[]){return t instanceof E?t:E.of(t,this.doc.length,this.facet(bt.lineSeparator))}toText(t){return i.of(t.split(this.facet(bt.lineSeparator)||C))}sliceDoc(t=0,e=this.doc.length){return this.doc.sliceString(t,e,this.lineBreak)}facet(t){let e=this.config.address[t.id];return null==e?t.default:(X(this,e),Z(this,e))}toJSON(t){let e={doc:this.sliceDoc(),selection:this.selection.toJSON()};if(t)for(let i in t){let n=t[i];n instanceof j&&null!=this.config.address[n.id]&&(e[i]=n.spec.toJSON(this.field(t[i]),this))}return e}static fromJSON(t,e={},i){if(!t||"string"!=typeof t.doc)throw new RangeError("Invalid JSON representation for EditorState");let n=[];if(i)for(let e in i)if(Object.prototype.hasOwnProperty.call(t,e)){let r=i[e],s=t[e];n.push(r.init((t=>r.spec.fromJSON(s,t))))}return bt.create({doc:t.doc,selection:R.fromJSON(t.selection),extensions:e.extensions?n.concat([e.extensions]):n})}static create(t={}){let e=J.resolve(t.extensions||[],new Map),n=t.doc instanceof i?t.doc:i.of((t.doc||"").split(e.staticFacet(bt.lineSeparator)||C)),r=t.selection?t.selection instanceof R?t.selection:R.single(t.selection.anchor,t.selection.head):R.single(0);return I(r,n.length),e.staticFacet(tt)||(r=r.asSingle()),new bt(e,n,r,e.dynamicSlots.map((()=>null)),((t,e)=>e.create(t)),null)}get tabSize(){return this.facet(bt.tabSize)}get lineBreak(){return this.facet(bt.lineSeparator)||"\n"}get readOnly(){return this.facet(st)}phrase(t,...e){for(let e of this.facet(bt.phrases))if(Object.prototype.hasOwnProperty.call(e,t)){t=e[t];break}return e.length&&(t=t.replace(/\$(\$|\d*)/g,((t,i)=>{if("$"==i)return"$";let n=+(i||1);return!n||n>e.length?t:e[n-1]}))),t}languageDataAt(t,e,i=-1){let n=[];for(let r of this.facet(Q))for(let s of r(this,e,i))Object.prototype.hasOwnProperty.call(s,t)&&n.push(s[t]);return n}charCategorizer(t){return i=this.languageDataAt("wordChars",t).join(""),t=>{if(!/\S/.test(t))return e.CharCategory.Space;if(function(t){if(yt)return yt.test(t);for(let e=0;e<t.length;e++){let i=t[e];if(/\w/.test(i)||i>""&&(i.toUpperCase()!=i.toLowerCase()||wt.test(i)))return!0}return!1}(t))return e.CharCategory.Word;for(let n=0;n<i.length;n++)if(t.indexOf(i[n])>-1)return e.CharCategory.Word;return e.CharCategory.Other};var i}wordAt(t){let{text:i,from:n,length:r}=this.doc.lineAt(t),s=this.charCategorizer(t),o=t-n,l=t-n;for(;o>0;){let t=g(i,o,!1);if(s(i.slice(t,o))!=e.CharCategory.Word)break;o=t}for(;l<r;){let t=g(i,l);if(s(i.slice(l,t))!=e.CharCategory.Word)break;l=t}return o==l?null:R.range(o+n,l+n)}}bt.allowMultipleSelections=tt,bt.tabSize=F.define({combine:t=>t.length?t[0]:4}),bt.lineSeparator=et,bt.readOnly=st,bt.phrases=F.define({compare(t,e){let i=Object.keys(t),n=Object.keys(e);return i.length==n.length&&i.every((i=>t[i]==e[i]))}}),bt.languageData=Q,bt.changeFilter=it,bt.transactionFilter=nt,bt.transactionExtender=rt,$.reconfigure=ht.define();class St{eq(t){return this==t}range(t,e=t){return xt.create(t,e,this)}}St.prototype.startSide=St.prototype.endSide=0,St.prototype.point=!1,St.prototype.mapMode=e.MapMode.TrackDel;class xt{constructor(t,e,i){this.from=t,this.to=e,this.value=i}static create(t,e,i){return new xt(t,e,i)}}function Ct(t,e){return t.from-e.from||t.value.startSide-e.value.startSide}class kt{constructor(t,e,i,n){this.from=t,this.to=e,this.value=i,this.maxPoint=n}get length(){return this.to[this.to.length-1]}findIndex(t,e,i,n=0){let r=i?this.to:this.from;for(let s=n,o=r.length;;){if(s==o)return s;let n=s+o>>1,l=r[n]-t||(i?this.value[n].endSide:this.value[n].startSide)-e;if(n==s)return l>=0?s:o;l>=0?o=n:s=n+1}}between(t,e,i,n){for(let r=this.findIndex(e,-1e9,!0),s=this.findIndex(i,1e9,!1,r);r<s;r++)if(!1===n(this.from[r]+t,this.to[r]+t,this.value[r]))return!1}map(t,e){let i=[],n=[],r=[],s=-1,o=-1;for(let l=0;l<this.value.length;l++){let a,h,c=this.value[l],u=this.from[l]+t,d=this.to[l]+t;if(u==d){let t=e.mapPos(u,c.startSide,c.mapMode);if(null==t)continue;if(a=h=t,c.startSide!=c.endSide&&(h=e.mapPos(u,c.endSide),h<a))continue}else if(a=e.mapPos(u,c.startSide),h=e.mapPos(d,c.endSide),a>h||a==h&&c.startSide>0&&c.endSide<=0)continue;(h-a||c.endSide-c.startSide)<0||(s<0&&(s=a),c.point&&(o=Math.max(o,h-a)),i.push(c),n.push(a-s),r.push(h-s))}return{mapped:i.length?new kt(n,r,i,o):null,pos:s}}}class At{constructor(t,e,i,n){this.chunkPos=t,this.chunk=e,this.nextLayer=i,this.maxPoint=n}static create(t,e,i,n){return new At(t,e,i,n)}get length(){let t=this.chunk.length-1;return t<0?0:Math.max(this.chunkEnd(t),this.nextLayer.length)}get size(){if(this.isEmpty)return 0;let t=this.nextLayer.size;for(let e of this.chunk)t+=e.value.length;return t}chunkEnd(t){return this.chunkPos[t]+this.chunk[t].length}update(t){let{add:e=[],sort:i=!1,filterFrom:n=0,filterTo:r=this.length}=t,s=t.filter;if(0==e.length&&!s)return this;if(i&&(e=e.slice().sort(Ct)),this.isEmpty)return e.length?At.of(e):this;let o=new Mt(this,null,-1).goto(0),l=0,a=[],h=new Et;for(;o.value||l<e.length;)if(l<e.length&&(o.from-e[l].from||o.startSide-e[l].value.startSide)>=0){let t=e[l++];h.addInner(t.from,t.to,t.value)||a.push(t)}else 1==o.rangeIndex&&o.chunkIndex<this.chunk.length&&(l==e.length||this.chunkEnd(o.chunkIndex)<e[l].from)&&(!s||n>this.chunkEnd(o.chunkIndex)||r<this.chunkPos[o.chunkIndex])&&h.addChunk(this.chunkPos[o.chunkIndex],this.chunk[o.chunkIndex])?o.nextChunk():((!s||n>o.to||r<o.from||s(o.from,o.to,o.value))&&(h.addInner(o.from,o.to,o.value)||a.push(xt.create(o.from,o.to,o.value))),o.next());return h.finishInner(this.nextLayer.isEmpty&&!a.length?At.empty:this.nextLayer.update({add:a,filter:s,filterFrom:n,filterTo:r}))}map(t){if(t.empty||this.isEmpty)return this;let e=[],i=[],n=-1;for(let r=0;r<this.chunk.length;r++){let s=this.chunkPos[r],o=this.chunk[r],l=t.touchesRange(s,s+o.length);if(!1===l)n=Math.max(n,o.maxPoint),e.push(o),i.push(t.mapPos(s));else if(!0===l){let{mapped:r,pos:l}=o.map(s,t);r&&(n=Math.max(n,r.maxPoint),e.push(r),i.push(l))}}let r=this.nextLayer.map(t);return 0==e.length?r:new At(i,e,r||At.empty,n)}between(t,e,i){if(!this.isEmpty){for(let n=0;n<this.chunk.length;n++){let r=this.chunkPos[n],s=this.chunk[n];if(e>=r&&t<=r+s.length&&!1===s.between(r,t-r,e-r,i))return}this.nextLayer.between(t,e,i)}}iter(t=0){return Nt.from([this]).goto(t)}get isEmpty(){return this.nextLayer==this}static iter(t,e=0){return Nt.from(t).goto(e)}static compare(t,e,i,n,r=-1){let s=t.filter((t=>t.maxPoint>0||!t.isEmpty&&t.maxPoint>=r)),o=e.filter((t=>t.maxPoint>0||!t.isEmpty&&t.maxPoint>=r)),l=Tt(s,o,i),a=new Ot(s,l,r),h=new Ot(o,l,r);i.iterGaps(((t,e,i)=>Dt(a,t,h,e,i,n))),i.empty&&0==i.length&&Dt(a,0,h,0,0,n)}static eq(t,e,i=0,n){null==n&&(n=999999999);let r=t.filter((t=>!t.isEmpty&&e.indexOf(t)<0)),s=e.filter((e=>!e.isEmpty&&t.indexOf(e)<0));if(r.length!=s.length)return!1;if(!r.length)return!0;let o=Tt(r,s),l=new Ot(r,o,0).goto(i),a=new Ot(s,o,0).goto(i);for(;;){if(l.to!=a.to||!Lt(l.active,a.active)||l.point&&(!a.point||!l.point.eq(a.point)))return!1;if(l.to>n)return!0;l.next(),a.next()}}static spans(t,e,i,n,r=-1){let s=new Ot(t,null,r).goto(e),o=e,l=s.openStart;for(;;){let t=Math.min(s.to,i);if(s.point){let i=s.activeForPoint(s.to),r=s.pointFrom<e?i.length+1:s.point.startSide<0?i.length:Math.min(i.length,l);n.point(o,t,s.point,i,r,s.pointRank),l=Math.min(s.openEnd(t),i.length)}else t>o&&(n.span(o,t,s.active,l),l=s.openEnd(t));if(s.to>i)return l+(s.point&&s.to>i?1:0);o=s.to,s.next()}}static of(t,e=!1){let i=new Et;for(let n of t instanceof xt?[t]:e?function(t){if(t.length>1)for(let e=t[0],i=1;i<t.length;i++){let n=t[i];if(Ct(e,n)>0)return t.slice().sort(Ct);e=n}return t}(t):t)i.add(n.from,n.to,n.value);return i.finish()}static join(t){if(!t.length)return At.empty;let e=t[t.length-1];for(let i=t.length-2;i>=0;i--)for(let n=t[i];n!=At.empty;n=n.nextLayer)e=new At(n.chunkPos,n.chunk,e,Math.max(n.maxPoint,e.maxPoint));return e}}At.empty=new At([],[],null,-1),At.empty.nextLayer=At.empty;class Et{finishChunk(t){this.chunks.push(new kt(this.from,this.to,this.value,this.maxPoint)),this.chunkPos.push(this.chunkStart),this.chunkStart=-1,this.setMaxPoint=Math.max(this.setMaxPoint,this.maxPoint),this.maxPoint=-1,t&&(this.from=[],this.to=[],this.value=[])}constructor(){this.chunks=[],this.chunkPos=[],this.chunkStart=-1,this.last=null,this.lastFrom=-1e9,this.lastTo=-1e9,this.from=[],this.to=[],this.value=[],this.maxPoint=-1,this.setMaxPoint=-1,this.nextLayer=null}add(t,e,i){this.addInner(t,e,i)||(this.nextLayer||(this.nextLayer=new Et)).add(t,e,i)}addInner(t,e,i){let n=t-this.lastTo||i.startSide-this.last.endSide;if(n<=0&&(t-this.lastFrom||i.startSide-this.last.startSide)<0)throw new Error("Ranges must be added sorted by `from` position and `startSide`");return!(n<0||(250==this.from.length&&this.finishChunk(!0),this.chunkStart<0&&(this.chunkStart=t),this.from.push(t-this.chunkStart),this.to.push(e-this.chunkStart),this.last=i,this.lastFrom=t,this.lastTo=e,this.value.push(i),i.point&&(this.maxPoint=Math.max(this.maxPoint,e-t)),0))}addChunk(t,e){if((t-this.lastTo||e.value[0].startSide-this.last.endSide)<0)return!1;this.from.length&&this.finishChunk(!0),this.setMaxPoint=Math.max(this.setMaxPoint,e.maxPoint),this.chunks.push(e),this.chunkPos.push(t);let i=e.value.length-1;return this.last=e.value[i],this.lastFrom=e.from[i]+t,this.lastTo=e.to[i]+t,!0}finish(){return this.finishInner(At.empty)}finishInner(t){if(this.from.length&&this.finishChunk(!1),0==this.chunks.length)return t;let e=At.create(this.chunkPos,this.chunks,this.nextLayer?this.nextLayer.finishInner(t):t,this.setMaxPoint);return this.from=null,e}}function Tt(t,e,i){let n=new Map;for(let e of t)for(let t=0;t<e.chunk.length;t++)e.chunk[t].maxPoint<=0&&n.set(e.chunk[t],e.chunkPos[t]);let r=new Set;for(let t of e)for(let e=0;e<t.chunk.length;e++){let s=n.get(t.chunk[e]);null==s||(i?i.mapPos(s):s)!=t.chunkPos[e]||(null==i?void 0:i.touchesRange(s,s+t.chunk[e].length))||r.add(t.chunk[e])}return r}class Mt{constructor(t,e,i,n=0){this.layer=t,this.skip=e,this.minPoint=i,this.rank=n}get startSide(){return this.value?this.value.startSide:0}get endSide(){return this.value?this.value.endSide:0}goto(t,e=-1e9){return this.chunkIndex=this.rangeIndex=0,this.gotoInner(t,e,!1),this}gotoInner(t,e,i){for(;this.chunkIndex<this.layer.chunk.length;){let e=this.layer.chunk[this.chunkIndex];if(!(this.skip&&this.skip.has(e)||this.layer.chunkEnd(this.chunkIndex)<t||e.maxPoint<this.minPoint))break;this.chunkIndex++,i=!1}if(this.chunkIndex<this.layer.chunk.length){let n=this.layer.chunk[this.chunkIndex].findIndex(t-this.layer.chunkPos[this.chunkIndex],e,!0);(!i||this.rangeIndex<n)&&this.setRangeIndex(n)}this.next()}forward(t,e){(this.to-t||this.endSide-e)<0&&this.gotoInner(t,e,!0)}next(){for(;;){if(this.chunkIndex==this.layer.chunk.length){this.from=this.to=1e9,this.value=null;break}{let t=this.layer.chunkPos[this.chunkIndex],e=this.layer.chunk[this.chunkIndex],i=t+e.from[this.rangeIndex];if(this.from=i,this.to=t+e.to[this.rangeIndex],this.value=e.value[this.rangeIndex],this.setRangeIndex(this.rangeIndex+1),this.minPoint<0||this.value.point&&this.to-this.from>=this.minPoint)break}}}setRangeIndex(t){if(t==this.layer.chunk[this.chunkIndex].value.length){if(this.chunkIndex++,this.skip)for(;this.chunkIndex<this.layer.chunk.length&&this.skip.has(this.layer.chunk[this.chunkIndex]);)this.chunkIndex++;this.rangeIndex=0}else this.rangeIndex=t}nextChunk(){this.chunkIndex++,this.rangeIndex=0,this.next()}compare(t){return this.from-t.from||this.startSide-t.startSide||this.rank-t.rank||this.to-t.to||this.endSide-t.endSide}}class Nt{constructor(t){this.heap=t}static from(t,e=null,i=-1){let n=[];for(let r=0;r<t.length;r++)for(let s=t[r];!s.isEmpty;s=s.nextLayer)s.maxPoint>=i&&n.push(new Mt(s,e,i,r));return 1==n.length?n[0]:new Nt(n)}get startSide(){return this.value?this.value.startSide:0}goto(t,e=-1e9){for(let i of this.heap)i.goto(t,e);for(let t=this.heap.length>>1;t>=0;t--)Pt(this.heap,t);return this.next(),this}forward(t,e){for(let i of this.heap)i.forward(t,e);for(let t=this.heap.length>>1;t>=0;t--)Pt(this.heap,t);(this.to-t||this.value.endSide-e)<0&&this.next()}next(){if(0==this.heap.length)this.from=this.to=1e9,this.value=null,this.rank=-1;else{let t=this.heap[0];this.from=t.from,this.to=t.to,this.value=t.value,this.rank=t.rank,t.value&&t.next(),Pt(this.heap,0)}}}function Pt(t,e){for(let i=t[e];;){let n=1+(e<<1);if(n>=t.length)break;let r=t[n];if(n+1<t.length&&r.compare(t[n+1])>=0&&(r=t[n+1],n++),i.compare(r)<0)break;t[n]=i,t[e]=r,e=n}}class Ot{constructor(t,e,i){this.minPoint=i,this.active=[],this.activeTo=[],this.activeRank=[],this.minActive=-1,this.point=null,this.pointFrom=0,this.pointRank=0,this.to=-1e9,this.endSide=0,this.openStart=-1,this.cursor=Nt.from(t,e,i)}goto(t,e=-1e9){return this.cursor.goto(t,e),this.active.length=this.activeTo.length=this.activeRank.length=0,this.minActive=-1,this.to=t,this.endSide=e,this.openStart=-1,this.next(),this}forward(t,e){for(;this.minActive>-1&&(this.activeTo[this.minActive]-t||this.active[this.minActive].endSide-e)<0;)this.removeActive(this.minActive);this.cursor.forward(t,e)}removeActive(t){Rt(this.active,t),Rt(this.activeTo,t),Rt(this.activeRank,t),this.minActive=Bt(this.active,this.activeTo)}addActive(t){let e=0,{value:i,to:n,rank:r}=this.cursor;for(;e<this.activeRank.length&&(r-this.activeRank[e]||n-this.activeTo[e])>0;)e++;It(this.active,e,i),It(this.activeTo,e,n),It(this.activeRank,e,r),t&&It(t,e,this.cursor.from),this.minActive=Bt(this.active,this.activeTo)}next(){let t=this.to,e=this.point;this.point=null;let i=this.openStart<0?[]:null;for(;;){let n=this.minActive;if(n>-1&&(this.activeTo[n]-this.cursor.from||this.active[n].endSide-this.cursor.startSide)<0){if(this.activeTo[n]>t){this.to=this.activeTo[n],this.endSide=this.active[n].endSide;break}this.removeActive(n),i&&Rt(i,n)}else{if(!this.cursor.value){this.to=this.endSide=1e9;break}if(this.cursor.from>t){this.to=this.cursor.from,this.endSide=this.cursor.startSide;break}{let t=this.cursor.value;if(t.point){if(!(e&&this.cursor.to==this.to&&this.cursor.from<this.cursor.to)){this.point=t,this.pointFrom=this.cursor.from,this.pointRank=this.cursor.rank,this.to=this.cursor.to,this.endSide=t.endSide,this.cursor.next(),this.forward(this.to,this.endSide);break}this.cursor.next()}else this.addActive(i),this.cursor.next()}}}if(i){this.openStart=0;for(let e=i.length-1;e>=0&&i[e]<t;e--)this.openStart++}}activeForPoint(t){if(!this.active.length)return this.active;let e=[];for(let i=this.active.length-1;i>=0&&!(this.activeRank[i]<this.pointRank);i--)(this.activeTo[i]>t||this.activeTo[i]==t&&this.active[i].endSide>=this.point.endSide)&&e.push(this.active[i]);return e.reverse()}openEnd(t){let e=0;for(let i=this.activeTo.length-1;i>=0&&this.activeTo[i]>t;i--)e++;return e}}function Dt(t,e,i,n,r,s){t.goto(e),i.goto(n);let o=n+r,l=n,a=n-e;for(;;){let e=t.to+a-i.to||t.endSide-i.endSide,n=e<0?t.to+a:i.to,r=Math.min(n,o);if(t.point||i.point?t.point&&i.point&&(t.point==i.point||t.point.eq(i.point))&&Lt(t.activeForPoint(t.to),i.activeForPoint(i.to))||s.comparePoint(l,r,t.point,i.point):r>l&&!Lt(t.active,i.active)&&s.compareRange(l,r,t.active,i.active),n>o)break;l=n,e<=0&&t.next(),e>=0&&i.next()}}function Lt(t,e){if(t.length!=e.length)return!1;for(let i=0;i<t.length;i++)if(t[i]!=e[i]&&!t[i].eq(e[i]))return!1;return!0}function Rt(t,e){for(let i=e,n=t.length-1;i<n;i++)t[i]=t[i+1];t.pop()}function It(t,e,i){for(let i=t.length-1;i>=e;i--)t[i+1]=t[i];t[e]=i}function Bt(t,e){let i=-1,n=1e9;for(let r=0;r<e.length;r++)(e[r]-n||t[r].endSide-t[i].endSide)<0&&(i=r,n=e[r]);return i}e.Annotation=ot,e.AnnotationType=lt,e.ChangeDesc=A,e.ChangeSet=E,e.Compartment=$,e.EditorSelection=R,e.EditorState=bt,e.Facet=F,e.Line=c,e.Prec=K,e.Range=xt,e.RangeSet=At,e.RangeSetBuilder=Et,e.RangeValue=St,e.SelectionRange=L,e.StateEffect=ht,e.StateEffectType=at,e.StateField=j,e.Text=i,e.Transaction=ct,e.codePointAt=S,e.codePointSize=x,e.combineConfig=function(t,e,i={}){let n={};for(let e of t)for(let t of Object.keys(e)){let r=e[t],s=n[t];if(void 0===s)n[t]=r;else if(s===r||void 0===r);else{if(!Object.hasOwnProperty.call(i,t))throw new Error("Config merge conflict for field "+t);n[t]=i[t](s,r)}}for(let t in e)void 0===n[t]&&(n[t]=e[t]);return n},e.countColumn=function(t,e,i=t.length){let n=0;for(let r=0;r<i;)9==t.charCodeAt(r)?(n+=e-n%e,r++):(n++,r=g(t,r));return n},e.findClusterBreak=g,e.findColumn=function(t,e,i,n){for(let n=0,r=0;;){if(r>=e)return n;if(n==t.length)break;r+=9==t.charCodeAt(n)?i-r%i:1,n=g(t,n)}return!0===n?-1:t.length},e.fromCodePoint=function(t){return t<=65535?String.fromCharCode(t):(t-=65536,String.fromCharCode(55296+(t>>10),56320+(1023&t)))}},1506:(t,e,i)=>{"use strict";var n=i(9064),r=i(9172),s=i(6237);function o(t){let e;return e=11==t.nodeType?t.getSelection?t:t.ownerDocument:t,e.getSelection()}function l(t,e){return!!e&&(t==e||t.contains(1!=e.nodeType?e.parentNode:e))}function a(t,e){if(!e.anchorNode)return!1;try{return l(t,e.anchorNode)}catch(t){return!1}}function h(t){return 3==t.nodeType?x(t,0,t.nodeValue.length).getClientRects():1==t.nodeType?t.getClientRects():[]}function c(t,e,i,n){return!!i&&(f(t,e,i,n,-1)||f(t,e,i,n,1))}function u(t){for(var e=0;;e++)if(!(t=t.previousSibling))return e}function d(t){return 1==t.nodeType&&/^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(t.nodeName)}function f(t,e,i,n,r){for(;;){if(t==i&&e==n)return!0;if(e==(r<0?0:p(t))){if("DIV"==t.nodeName)return!1;let i=t.parentNode;if(!i||1!=i.nodeType)return!1;e=u(t)+(r<0?0:1),t=i}else{if(1!=t.nodeType)return!1;if(1==(t=t.childNodes[e+(r<0?-1:0)]).nodeType&&"false"==t.contentEditable)return!1;e=r<0?p(t):0}}}function p(t){return 3==t.nodeType?t.nodeValue.length:t.childNodes.length}function m(t,e){let i=e?t.left:t.right;return{left:i,right:i,top:t.top,bottom:t.bottom}}function g(t){let e=t.visualViewport;return e?{left:0,right:e.width,top:0,bottom:e.height}:{left:0,right:t.innerWidth,top:0,bottom:t.innerHeight}}function v(t,e){let i=e.width/t.offsetWidth,n=e.height/t.offsetHeight;return(i>.995&&i<1.005||!isFinite(i)||Math.abs(e.width-t.offsetWidth)<1)&&(i=1),(n>.995&&n<1.005||!isFinite(n)||Math.abs(e.height-t.offsetHeight)<1)&&(n=1),{scaleX:i,scaleY:n}}class w{constructor(){this.anchorNode=null,this.anchorOffset=0,this.focusNode=null,this.focusOffset=0}eq(t){return this.anchorNode==t.anchorNode&&this.anchorOffset==t.anchorOffset&&this.focusNode==t.focusNode&&this.focusOffset==t.focusOffset}setRange(t){let{anchorNode:e,focusNode:i}=t;this.set(e,Math.min(t.anchorOffset,e?p(e):0),i,Math.min(t.focusOffset,i?p(i):0))}set(t,e,i,n){this.anchorNode=t,this.anchorOffset=e,this.focusNode=i,this.focusOffset=n}}let y,b=null;function S(t){if(t.setActive)return t.setActive();if(b)return t.focus(b);let e=[];for(let i=t;i&&(e.push(i,i.scrollTop,i.scrollLeft),i!=i.ownerDocument);i=i.parentNode);if(t.focus(null==b?{get preventScroll(){return b={preventScroll:!0},!0}}:void 0),!b){b=!1;for(let t=0;t<e.length;){let i=e[t++],n=e[t++],r=e[t++];i.scrollTop!=n&&(i.scrollTop=n),i.scrollLeft!=r&&(i.scrollLeft=r)}}}function x(t,e,i=e){let n=y||(y=document.createRange());return n.setEnd(t,i),n.setStart(t,e),n}function C(t,e,i,n){let r={key:e,code:e,keyCode:i,which:i,cancelable:!0};n&&({altKey:r.altKey,ctrlKey:r.ctrlKey,shiftKey:r.shiftKey,metaKey:r.metaKey}=n);let s=new KeyboardEvent("keydown",r);s.synthetic=!0,t.dispatchEvent(s);let o=new KeyboardEvent("keyup",r);return o.synthetic=!0,t.dispatchEvent(o),s.defaultPrevented||o.defaultPrevented}function k(t){for(;t.attributes.length;)t.removeAttributeNode(t.attributes[0])}function A(t){return t.scrollTop>Math.max(1,t.scrollHeight-t.clientHeight-4)}function E(t,e){for(let i=t,n=e;;){if(3==i.nodeType&&n>0)return{node:i,offset:n};if(1==i.nodeType&&n>0){if("false"==i.contentEditable)return null;i=i.childNodes[n-1],n=p(i)}else{if(!i.parentNode||d(i))return null;n=u(i),i=i.parentNode}}}function T(t,e){for(let i=t,n=e;;){if(3==i.nodeType&&n<i.nodeValue.length)return{node:i,offset:n};if(1==i.nodeType&&n<i.childNodes.length){if("false"==i.contentEditable)return null;i=i.childNodes[n],n=0}else{if(!i.parentNode||d(i))return null;n=u(i)+1,i=i.parentNode}}}class M{constructor(t,e,i=!0){this.node=t,this.offset=e,this.precise=i}static before(t,e){return new M(t.parentNode,u(t),e)}static after(t,e){return new M(t.parentNode,u(t)+1,e)}}const N=[];class P{constructor(){this.parent=null,this.dom=null,this.flags=2}get overrideDOMText(){return null}get posAtStart(){return this.parent?this.parent.posBefore(this):0}get posAtEnd(){return this.posAtStart+this.length}posBefore(t){let e=this.posAtStart;for(let i of this.children){if(i==t)return e;e+=i.length+i.breakAfter}throw new RangeError("Invalid child in posBefore")}posAfter(t){return this.posBefore(t)+t.length}sync(t,e){if(2&this.flags){let i,n=this.dom,r=null;for(let s of this.children){if(7&s.flags){if(!s.dom&&(i=r?r.nextSibling:n.firstChild)){let t=P.get(i);(!t||!t.parent&&t.canReuseDOM(s))&&s.reuseDOM(i)}s.sync(t,e),s.flags&=-8}if(i=r?r.nextSibling:n.firstChild,e&&!e.written&&e.node==n&&i!=s.dom&&(e.written=!0),s.dom.parentNode==n)for(;i&&i!=s.dom;)i=O(i);else n.insertBefore(s.dom,i);r=s.dom}for(i=r?r.nextSibling:n.firstChild,i&&e&&e.node==n&&(e.written=!0);i;)i=O(i)}else if(1&this.flags)for(let i of this.children)7&i.flags&&(i.sync(t,e),i.flags&=-8)}reuseDOM(t){}localPosFromDOM(t,e){let i;if(t==this.dom)i=this.dom.childNodes[e];else{let n=0==p(t)?0:0==e?-1:1;for(;;){let e=t.parentNode;if(e==this.dom)break;0==n&&e.firstChild!=e.lastChild&&(n=t==e.firstChild?-1:1),t=e}i=n<0?t:t.nextSibling}if(i==this.dom.firstChild)return 0;for(;i&&!P.get(i);)i=i.nextSibling;if(!i)return this.length;for(let t=0,e=0;;t++){let n=this.children[t];if(n.dom==i)return e;e+=n.length+n.breakAfter}}domBoundsAround(t,e,i=0){let n=-1,r=-1,s=-1,o=-1;for(let l=0,a=i,h=i;l<this.children.length;l++){let i=this.children[l],c=a+i.length;if(a<t&&c>e)return i.domBoundsAround(t,e,a);if(c>=t&&-1==n&&(n=l,r=a),a>e&&i.dom.parentNode==this.dom){s=l,o=h;break}h=c,a=c+i.breakAfter}return{from:r,to:o<0?i+this.length:o,startDOM:(n?this.children[n-1].dom.nextSibling:null)||this.dom.firstChild,endDOM:s<this.children.length&&s>=0?this.children[s].dom:null}}markDirty(t=!1){this.flags|=2,this.markParentsDirty(t)}markParentsDirty(t){for(let e=this.parent;e;e=e.parent){if(t&&(e.flags|=2),1&e.flags)return;e.flags|=1,t=!1}}setParent(t){this.parent!=t&&(this.parent=t,7&this.flags&&this.markParentsDirty(!0))}setDOM(t){this.dom!=t&&(this.dom&&(this.dom.cmView=null),this.dom=t,t.cmView=this)}get rootView(){for(let t=this;;){let e=t.parent;if(!e)return t;t=e}}replaceChildren(t,e,i=N){this.markDirty();for(let n=t;n<e;n++){let t=this.children[n];t.parent==this&&i.indexOf(t)<0&&t.destroy()}this.children.splice(t,e-t,...i);for(let t=0;t<i.length;t++)i[t].setParent(this)}ignoreMutation(t){return!1}ignoreEvent(t){return!1}childCursor(t=this.length){return new D(this.children,t,this.children.length)}childPos(t,e=1){return this.childCursor().findPos(t,e)}toString(){let t=this.constructor.name.replace("View","");return t+(this.children.length?"("+this.children.join()+")":this.length?"["+("Text"==t?this.text:this.length)+"]":"")+(this.breakAfter?"#":"")}static get(t){return t.cmView}get isEditable(){return!0}get isWidget(){return!1}get isHidden(){return!1}merge(t,e,i,n,r,s){return!1}become(t){return!1}canReuseDOM(t){return t.constructor==this.constructor&&!(8&(this.flags|t.flags))}getSide(){return 0}destroy(){for(let t of this.children)t.parent==this&&t.destroy();this.parent=null}}function O(t){let e=t.nextSibling;return t.parentNode.removeChild(t),e}P.prototype.breakAfter=0;class D{constructor(t,e,i){this.children=t,this.pos=e,this.i=i,this.off=0}findPos(t,e=1){for(;;){if(t>this.pos||t==this.pos&&(e>0||0==this.i||this.children[this.i-1].breakAfter))return this.off=t-this.pos,this;let i=this.children[--this.i];this.pos-=i.length+i.breakAfter}}}function L(t,e,i,n,r,s,o,l,a){let{children:h}=t,c=h.length?h[e]:null,u=s.length?s[s.length-1]:null,d=u?u.breakAfter:o;if(!(e==n&&c&&!o&&!d&&s.length<2&&c.merge(i,r,s.length?u:null,0==i,l,a))){if(n<h.length){let t=h[n];t&&(r<t.length||t.breakAfter&&(null==u?void 0:u.breakAfter))?(e==n&&(t=t.split(r),r=0),!d&&u&&t.merge(0,r,u,!0,0,a)?s[s.length-1]=t:((r||t.children.length&&!t.children[0].length)&&t.merge(0,r,null,!1,0,a),s.push(t))):(null==t?void 0:t.breakAfter)&&(u?u.breakAfter=1:o=1),n++}for(c&&(c.breakAfter=o,i>0&&(!o&&s.length&&c.merge(i,c.length,s[0],!1,l,0)?c.breakAfter=s.shift().breakAfter:(i<c.length||c.children.length&&0==c.children[c.children.length-1].length)&&c.merge(i,c.length,null,!1,l,0),e++));e<n&&s.length;)if(h[n-1].become(s[s.length-1]))n--,s.pop(),a=s.length?0:l;else{if(!h[e].become(s[0]))break;e++,s.shift(),l=s.length?0:a}!s.length&&e&&n<h.length&&!h[e-1].breakAfter&&h[n].merge(0,0,h[e-1],!1,l,a)&&e--,(e<n||s.length)&&t.replaceChildren(e,n,s)}}function R(t,e,i,n,r,s){let o=t.childCursor(),{i:l,off:a}=o.findPos(i,1),{i:h,off:c}=o.findPos(e,-1),u=e-i;for(let t of n)u+=t.length;t.length+=u,L(t,h,c,l,a,n,0,r,s)}let I="undefined"!=typeof navigator?navigator:{userAgent:"",vendor:"",platform:""},B="undefined"!=typeof document?document:{documentElement:{style:{}}};const F=/Edge\/(\d+)/.exec(I.userAgent),_=/MSIE \d/.test(I.userAgent),q=/Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(I.userAgent),V=!!(_||q||F),H=!V&&/gecko\/(\d+)/i.test(I.userAgent),W=!V&&/Chrome\/(\d+)/.exec(I.userAgent),z="webkitFontSmoothing"in B.documentElement.style,j=!V&&/Apple Computer/.test(I.vendor),U=j&&(/Mobile\/\w+/.test(I.userAgent)||I.maxTouchPoints>2);var K={mac:U||/Mac/.test(I.platform),windows:/Win/.test(I.platform),linux:/Linux|X11/.test(I.platform),ie:V,ie_version:_?B.documentMode||6:q?+q[1]:F?+F[1]:0,gecko:H,gecko_version:H?+(/Firefox\/(\d+)/.exec(I.userAgent)||[0,0])[1]:0,chrome:!!W,chrome_version:W?+W[1]:0,ios:U,android:/Android\b/.test(I.userAgent),webkit:z,safari:j,webkit_version:z?+(/\bAppleWebKit\/(\d+)/.exec(I.userAgent)||[0,0])[1]:0,tabSize:null!=B.documentElement.style.tabSize?"tab-size":"-moz-tab-size"};class G extends P{constructor(t){super(),this.text=t}get length(){return this.text.length}createDOM(t){this.setDOM(t||document.createTextNode(this.text))}sync(t,e){this.dom||this.createDOM(),this.dom.nodeValue!=this.text&&(e&&e.node==this.dom&&(e.written=!0),this.dom.nodeValue=this.text)}reuseDOM(t){3==t.nodeType&&this.createDOM(t)}merge(t,e,i){return!(8&this.flags||i&&(!(i instanceof G)||this.length-(e-t)+i.length>256||8&i.flags)||(this.text=this.text.slice(0,t)+(i?i.text:"")+this.text.slice(e),this.markDirty(),0))}split(t){let e=new G(this.text.slice(t));return this.text=this.text.slice(0,t),this.markDirty(),e.flags|=8&this.flags,e}localPosFromDOM(t,e){return t==this.dom?e:e?this.text.length:0}domAtPos(t){return new M(this.dom,t)}domBoundsAround(t,e,i){return{from:i,to:i+this.length,startDOM:this.dom,endDOM:this.dom.nextSibling}}coordsAt(t,e){return function(t,e,i){let n=t.nodeValue.length;e>n&&(e=n);let r=e,s=e,o=0;0==e&&i<0||e==n&&i>=0?K.chrome||K.gecko||(e?(r--,o=1):s<n&&(s++,o=-1)):i<0?r--:s<n&&s++;let l=x(t,r,s).getClientRects();if(!l.length)return null;let a=l[(o?o<0:i>=0)?0:l.length-1];return K.safari&&!o&&0==a.width&&(a=Array.prototype.find.call(l,(t=>t.width))||a),o?m(a,o<0):a||null}(this.dom,t,e)}}class $ extends P{constructor(t,e=[],i=0){super(),this.mark=t,this.children=e,this.length=i;for(let t of e)t.setParent(this)}setAttrs(t){if(k(t),this.mark.class&&(t.className=this.mark.class),this.mark.attrs)for(let e in this.mark.attrs)t.setAttribute(e,this.mark.attrs[e]);return t}canReuseDOM(t){return super.canReuseDOM(t)&&!(8&(this.flags|t.flags))}reuseDOM(t){t.nodeName==this.mark.tagName.toUpperCase()&&(this.setDOM(t),this.flags|=6)}sync(t,e){this.dom?4&this.flags&&this.setAttrs(this.dom):this.setDOM(this.setAttrs(document.createElement(this.mark.tagName))),super.sync(t,e)}merge(t,e,i,n,r,s){return!(i&&(!(i instanceof $&&i.mark.eq(this.mark))||t&&r<=0||e<this.length&&s<=0)||(R(this,t,e,i?i.children.slice():[],r-1,s-1),this.markDirty(),0))}split(t){let e=[],i=0,n=-1,r=0;for(let s of this.children){let o=i+s.length;o>t&&e.push(i<t?s.split(t-i):s),n<0&&i>=t&&(n=r),i=o,r++}let s=this.length-t;return this.length=t,n>-1&&(this.children.length=n,this.markDirty()),new $(this.mark,e,s)}domAtPos(t){return X(this,t)}coordsAt(t,e){return Q(this,t,e)}}class Y extends P{static create(t,e,i){return new Y(t,e,i)}constructor(t,e,i){super(),this.widget=t,this.length=e,this.side=i,this.prevWidget=null}split(t){let e=Y.create(this.widget,this.length-t,this.side);return this.length-=t,e}sync(t){this.dom&&this.widget.updateDOM(this.dom,t)||(this.dom&&this.prevWidget&&this.prevWidget.destroy(this.dom),this.prevWidget=null,this.setDOM(this.widget.toDOM(t)),this.widget.editable||(this.dom.contentEditable="false"))}getSide(){return this.side}merge(t,e,i,n,r,s){return!(i&&(!(i instanceof Y&&this.widget.compare(i.widget))||t>0&&r<=0||e<this.length&&s<=0)||(this.length=t+(i?i.length:0)+(this.length-e),0))}become(t){return t instanceof Y&&t.side==this.side&&this.widget.constructor==t.widget.constructor&&(this.widget.compare(t.widget)||this.markDirty(!0),this.dom&&!this.prevWidget&&(this.prevWidget=this.widget),this.widget=t.widget,this.length=t.length,!0)}ignoreMutation(){return!0}ignoreEvent(t){return this.widget.ignoreEvent(t)}get overrideDOMText(){if(0==this.length)return n.Text.empty;let t=this;for(;t.parent;)t=t.parent;let{view:e}=t,i=e&&e.state.doc,r=this.posAtStart;return i?i.slice(r,r+this.length):n.Text.empty}domAtPos(t){return(this.length?0==t:this.side>0)?M.before(this.dom):M.after(this.dom,t==this.length)}domBoundsAround(){return null}coordsAt(t,e){let i=this.widget.coordsAt(this.dom,t,e);if(i)return i;let n=this.dom.getClientRects(),r=null;if(!n.length)return null;let s=this.side?this.side<0:t>0;for(let e=s?n.length-1:0;r=n[e],!(t>0?0==e:e==n.length-1||r.top<r.bottom);e+=s?-1:1);return m(r,!s)}get isEditable(){return!1}get isWidget(){return!0}get isHidden(){return this.widget.isHidden}destroy(){super.destroy(),this.dom&&this.widget.destroy(this.dom)}}class J extends P{constructor(t){super(),this.side=t}get length(){return 0}merge(){return!1}become(t){return t instanceof J&&t.side==this.side}split(){return new J(this.side)}sync(){if(!this.dom){let t=document.createElement("img");t.className="cm-widgetBuffer",t.setAttribute("aria-hidden","true"),this.setDOM(t)}}getSide(){return this.side}domAtPos(t){return this.side>0?M.before(this.dom):M.after(this.dom)}localPosFromDOM(){return 0}domBoundsAround(){return null}coordsAt(t){return this.dom.getBoundingClientRect()}get overrideDOMText(){return n.Text.empty}get isHidden(){return!0}}function X(t,e){let i=t.dom,{children:n}=t,r=0;for(let t=0;r<n.length;r++){let s=n[r],o=t+s.length;if(!(o==t&&s.getSide()<=0)){if(e>t&&e<o&&s.dom.parentNode==i)return s.domAtPos(e-t);if(e<=t)break;t=o}}for(let t=r;t>0;t--){let e=n[t-1];if(e.dom.parentNode==i)return e.domAtPos(e.length)}for(let t=r;t<n.length;t++){let e=n[t];if(e.dom.parentNode==i)return e.domAtPos(0)}return new M(i,0)}function Z(t,e,i){let n,{children:r}=t;i>0&&e instanceof $&&r.length&&(n=r[r.length-1])instanceof $&&n.mark.eq(e.mark)?Z(n,e.children[0],i-1):(r.push(e),e.setParent(t)),t.length+=e.length}function Q(t,e,i){let n=null,r=-1,s=null,o=-1;!function t(e,l){for(let a=0,h=0;a<e.children.length&&h<=l;a++){let c=e.children[a],u=h+c.length;u>=l&&(c.children.length?t(c,l-h):(!s||s.isHidden&&i>0)&&(u>l||h==u&&c.getSide()>0)?(s=c,o=l-h):(h<l||h==u&&c.getSide()<0&&!c.isHidden)&&(n=c,r=l-h)),h=u}}(t,e);let l=(i<0?n:s)||n||s;return l?l.coordsAt(Math.max(0,l==n?r:o),i):function(t){let e=t.dom.lastChild;if(!e)return t.dom.getBoundingClientRect();let i=h(e);return i[i.length-1]||null}(t)}function tt(t,e){for(let i in t)"class"==i&&e.class?e.class+=" "+t.class:"style"==i&&e.style?e.style+=";"+t.style:e[i]=t[i];return e}G.prototype.children=Y.prototype.children=J.prototype.children=N;const et=Object.create(null);function it(t,e,i){if(t==e)return!0;t||(t=et),e||(e=et);let n=Object.keys(t),r=Object.keys(e);if(n.length-(i&&n.indexOf(i)>-1?1:0)!=r.length-(i&&r.indexOf(i)>-1?1:0))return!1;for(let s of n)if(s!=i&&(-1==r.indexOf(s)||t[s]!==e[s]))return!1;return!0}function nt(t,e,i){let n=!1;if(e)for(let r in e)i&&r in i||(n=!0,"style"==r?t.style.cssText="":t.removeAttribute(r));if(i)for(let r in i)e&&e[r]==i[r]||(n=!0,"style"==r?t.style.cssText=i[r]:t.setAttribute(r,i[r]));return n}function rt(t){let e=Object.create(null);for(let i=0;i<t.attributes.length;i++){let n=t.attributes[i];e[n.name]=n.value}return e}class st extends P{constructor(){super(...arguments),this.children=[],this.length=0,this.prevAttrs=void 0,this.attrs=null,this.breakAfter=0}merge(t,e,i,n,r,s){if(i){if(!(i instanceof st))return!1;this.dom||i.transferDOM(this)}return n&&this.setDeco(i?i.attrs:null),R(this,t,e,i?i.children.slice():[],r,s),!0}split(t){let e=new st;if(e.breakAfter=this.breakAfter,0==this.length)return e;let{i,off:n}=this.childPos(t);n&&(e.append(this.children[i].split(n),0),this.children[i].merge(n,this.children[i].length,null,!1,0,0),i++);for(let t=i;t<this.children.length;t++)e.append(this.children[t],0);for(;i>0&&0==this.children[i-1].length;)this.children[--i].destroy();return this.children.length=i,this.markDirty(),this.length=t,e}transferDOM(t){this.dom&&(this.markDirty(),t.setDOM(this.dom),t.prevAttrs=void 0===this.prevAttrs?this.attrs:this.prevAttrs,this.prevAttrs=void 0,this.dom=null)}setDeco(t){it(this.attrs,t)||(this.dom&&(this.prevAttrs=this.attrs,this.markDirty()),this.attrs=t)}append(t,e){Z(this,t,e)}addLineDeco(t){let e=t.spec.attributes,i=t.spec.class;e&&(this.attrs=tt(e,this.attrs||{})),i&&(this.attrs=tt({class:i},this.attrs||{}))}domAtPos(t){return X(this,t)}reuseDOM(t){"DIV"==t.nodeName&&(this.setDOM(t),this.flags|=6)}sync(t,e){var i;this.dom?4&this.flags&&(k(this.dom),this.dom.className="cm-line",this.prevAttrs=this.attrs?null:void 0):(this.setDOM(document.createElement("div")),this.dom.className="cm-line",this.prevAttrs=this.attrs?null:void 0),void 0!==this.prevAttrs&&(nt(this.dom,this.prevAttrs,this.attrs),this.dom.classList.add("cm-line"),this.prevAttrs=void 0),super.sync(t,e);let n=this.dom.lastChild;for(;n&&P.get(n)instanceof $;)n=n.lastChild;if(!(n&&this.length&&("BR"==n.nodeName||0!=(null===(i=P.get(n))||void 0===i?void 0:i.isEditable)||K.ios&&this.children.some((t=>t instanceof G))))){let t=document.createElement("BR");t.cmIgnore=!0,this.dom.appendChild(t)}}measureTextSize(){if(0==this.children.length||this.length>20)return null;let t,e=0;for(let i of this.children){if(!(i instanceof G)||/[^ -~]/.test(i.text))return null;let n=h(i.dom);if(1!=n.length)return null;e+=n[0].width,t=n[0].height}return e?{lineHeight:this.dom.getBoundingClientRect().height,charWidth:e/this.length,textHeight:t}:null}coordsAt(t,e){let i=Q(this,t,e);if(!this.children.length&&i&&this.parent){let{heightOracle:t}=this.parent.view.viewState,e=i.bottom-i.top;if(Math.abs(e-t.lineHeight)<2&&t.textHeight<e){let n=(e-t.textHeight)/2;return{top:i.top+n,bottom:i.bottom-n,left:i.left,right:i.left}}}return i}become(t){return t instanceof st&&0==this.children.length&&0==t.children.length&&it(this.attrs,t.attrs)&&this.breakAfter==t.breakAfter}covers(){return!0}static find(t,e){for(let i=0,n=0;i<t.children.length;i++){let r=t.children[i],s=n+r.length;if(s>=e){if(r instanceof st)return r;if(s>e)break}n=s+r.breakAfter}return null}}class ot extends P{constructor(t,e,i){super(),this.widget=t,this.length=e,this.deco=i,this.breakAfter=0,this.prevWidget=null}merge(t,e,i,n,r,s){return!(i&&(!(i instanceof ot&&this.widget.compare(i.widget))||t>0&&r<=0||e<this.length&&s<=0)||(this.length=t+(i?i.length:0)+(this.length-e),0))}domAtPos(t){return 0==t?M.before(this.dom):M.after(this.dom,t==this.length)}split(t){let e=this.length-t;this.length=t;let i=new ot(this.widget,e,this.deco);return i.breakAfter=this.breakAfter,i}get children(){return N}sync(t){this.dom&&this.widget.updateDOM(this.dom,t)||(this.dom&&this.prevWidget&&this.prevWidget.destroy(this.dom),this.prevWidget=null,this.setDOM(this.widget.toDOM(t)),this.widget.editable||(this.dom.contentEditable="false"))}get overrideDOMText(){return this.parent?this.parent.view.state.doc.slice(this.posAtStart,this.posAtEnd):n.Text.empty}domBoundsAround(){return null}become(t){return t instanceof ot&&t.widget.constructor==this.widget.constructor&&(t.widget.compare(this.widget)||this.markDirty(!0),this.dom&&!this.prevWidget&&(this.prevWidget=this.widget),this.widget=t.widget,this.length=t.length,this.deco=t.deco,this.breakAfter=t.breakAfter,!0)}ignoreMutation(){return!0}ignoreEvent(t){return this.widget.ignoreEvent(t)}get isEditable(){return!1}get isWidget(){return!0}coordsAt(t,e){return this.widget.coordsAt(this.dom,t,e)}destroy(){super.destroy(),this.dom&&this.widget.destroy(this.dom)}covers(t){let{startSide:e,endSide:i}=this.deco;return e!=i&&(t<0?e<0:i>0)}}class lt{eq(t){return!1}updateDOM(t,e){return!1}compare(t){return this==t||this.constructor==t.constructor&&this.eq(t)}get estimatedHeight(){return-1}get lineBreaks(){return 0}ignoreEvent(t){return!0}coordsAt(t,e,i){return null}get isHidden(){return!1}get editable(){return!1}destroy(t){}}var at,ht;e.BlockType=void 0,(at=e.BlockType||(e.BlockType={}))[at.Text=0]="Text",at[at.WidgetBefore=1]="WidgetBefore",at[at.WidgetAfter=2]="WidgetAfter",at[at.WidgetRange=3]="WidgetRange";class ct extends n.RangeValue{constructor(t,e,i,n){super(),this.startSide=t,this.endSide=e,this.widget=i,this.spec=n}get heightRelevant(){return!1}static mark(t){return new ut(t)}static widget(t){let e=Math.max(-1e4,Math.min(1e4,t.side||0)),i=!!t.block;return e+=i&&!t.inlineOrder?e>0?3e8:-4e8:e>0?1e8:-1e8,new ft(t,e,e,i,t.widget||null,!1)}static replace(t){let e,i,n=!!t.block;if(t.isBlockGap)e=-5e8,i=4e8;else{let{start:r,end:s}=pt(t,n);e=(r?n?-3e8:-1:5e8)-1,i=1+(s?n?2e8:1:-6e8)}return new ft(t,e,i,n,t.widget||null,!0)}static line(t){return new dt(t)}static set(t,e=!1){return n.RangeSet.of(t,e)}hasHeight(){return!!this.widget&&this.widget.estimatedHeight>-1}}ct.none=n.RangeSet.empty;class ut extends ct{constructor(t){let{start:e,end:i}=pt(t);super(e?-1:5e8,i?1:-6e8,null,t),this.tagName=t.tagName||"span",this.class=t.class||"",this.attrs=t.attributes||null}eq(t){var e,i;return this==t||t instanceof ut&&this.tagName==t.tagName&&(this.class||(null===(e=this.attrs)||void 0===e?void 0:e.class))==(t.class||(null===(i=t.attrs)||void 0===i?void 0:i.class))&&it(this.attrs,t.attrs,"class")}range(t,e=t){if(t>=e)throw new RangeError("Mark decorations may not be empty");return super.range(t,e)}}ut.prototype.point=!1;class dt extends ct{constructor(t){super(-2e8,-2e8,null,t)}eq(t){return t instanceof dt&&this.spec.class==t.spec.class&&it(this.spec.attributes,t.spec.attributes)}range(t,e=t){if(e!=t)throw new RangeError("Line decoration ranges must be zero-length");return super.range(t,e)}}dt.prototype.mapMode=n.MapMode.TrackBefore,dt.prototype.point=!0;class ft extends ct{constructor(t,e,i,r,s,o){super(e,i,s,t),this.block=r,this.isReplace=o,this.mapMode=r?e<=0?n.MapMode.TrackBefore:n.MapMode.TrackAfter:n.MapMode.TrackDel}get type(){return this.startSide!=this.endSide?e.BlockType.WidgetRange:this.startSide<=0?e.BlockType.WidgetBefore:e.BlockType.WidgetAfter}get heightRelevant(){return this.block||!!this.widget&&(this.widget.estimatedHeight>=5||this.widget.lineBreaks>0)}eq(t){return t instanceof ft&&((e=this.widget)==(i=t.widget)||!!(e&&i&&e.compare(i)))&&this.block==t.block&&this.startSide==t.startSide&&this.endSide==t.endSide;var e,i}range(t,e=t){if(this.isReplace&&(t>e||t==e&&this.startSide>0&&this.endSide<=0))throw new RangeError("Invalid range for replacement decoration");if(!this.isReplace&&e!=t)throw new RangeError("Widget decorations can only have zero-length ranges");return super.range(t,e)}}function pt(t,e=!1){let{inclusiveStart:i,inclusiveEnd:n}=t;return null==i&&(i=t.inclusive),null==n&&(n=t.inclusive),{start:null!=i?i:e,end:null!=n?n:e}}function mt(t,e,i,n=0){let r=i.length-1;r>=0&&i[r]+n>=t?i[r]=Math.max(i[r],e):i.push(t,e)}ft.prototype.point=!0;class gt{constructor(t,e,i,n){this.doc=t,this.pos=e,this.end=i,this.disallowBlockEffectsFor=n,this.content=[],this.curLine=null,this.breakAtStart=0,this.pendingBuffer=0,this.bufferMarks=[],this.atCursorPos=!0,this.openStart=-1,this.openEnd=-1,this.text="",this.textOff=0,this.cursor=t.iter(),this.skip=e}posCovered(){if(0==this.content.length)return!this.breakAtStart&&this.doc.lineAt(this.pos).from!=this.pos;let t=this.content[this.content.length-1];return!(t.breakAfter||t instanceof ot&&t.deco.endSide<0)}getLine(){return this.curLine||(this.content.push(this.curLine=new st),this.atCursorPos=!0),this.curLine}flushBuffer(t=this.bufferMarks){this.pendingBuffer&&(this.curLine.append(vt(new J(-1),t),t.length),this.pendingBuffer=0)}addBlockWidget(t){this.flushBuffer(),this.curLine=null,this.content.push(t)}finish(t){this.pendingBuffer&&t<=this.bufferMarks.length?this.flushBuffer():this.pendingBuffer=0,this.posCovered()||t&&this.content.length&&this.content[this.content.length-1]instanceof ot||this.getLine()}buildText(t,e,i){for(;t>0;){if(this.textOff==this.text.length){let{value:e,lineBreak:i,done:n}=this.cursor.next(this.skip);if(this.skip=0,n)throw new Error("Ran out of text content when drawing inline views");if(i){this.posCovered()||this.getLine(),this.content.length?this.content[this.content.length-1].breakAfter=1:this.breakAtStart=1,this.flushBuffer(),this.curLine=null,this.atCursorPos=!0,t--;continue}this.text=e,this.textOff=0}let n=Math.min(this.text.length-this.textOff,t,512);this.flushBuffer(e.slice(e.length-i)),this.getLine().append(vt(new G(this.text.slice(this.textOff,this.textOff+n)),e),i),this.atCursorPos=!0,this.textOff+=n,t-=n,i=0}}span(t,e,i,n){this.buildText(e-t,i,n),this.pos=e,this.openStart<0&&(this.openStart=n)}point(t,e,i,n,r,s){if(this.disallowBlockEffectsFor[s]&&i instanceof ft){if(i.block)throw new RangeError("Block decorations may not be specified via plugins");if(e>this.doc.lineAt(this.pos).to)throw new RangeError("Decorations that replace line breaks may not be specified via plugins")}let o=e-t;if(i instanceof ft)if(i.block)i.startSide>0&&!this.posCovered()&&this.getLine(),this.addBlockWidget(new ot(i.widget||wt.block,o,i));else{let s=Y.create(i.widget||wt.inline,o,o?0:i.startSide),l=this.atCursorPos&&!s.isEditable&&r<=n.length&&(t<e||i.startSide>0),a=!s.isEditable&&(t<e||r>n.length||i.startSide<=0),h=this.getLine();2!=this.pendingBuffer||l||s.isEditable||(this.pendingBuffer=0),this.flushBuffer(n),l&&(h.append(vt(new J(1),n),r),r=n.length+Math.max(0,r-n.length)),h.append(vt(s,n),r),this.atCursorPos=a,this.pendingBuffer=a?t<e||r>n.length?1:2:0,this.pendingBuffer&&(this.bufferMarks=n.slice())}else this.doc.lineAt(this.pos).from==this.pos&&this.getLine().addLineDeco(i);o&&(this.textOff+o<=this.text.length?this.textOff+=o:(this.skip+=o-(this.text.length-this.textOff),this.text="",this.textOff=0),this.pos=e),this.openStart<0&&(this.openStart=r)}static build(t,e,i,r,s){let o=new gt(t,e,i,s);return o.openEnd=n.RangeSet.spans(r,e,i,o),o.openStart<0&&(o.openStart=o.openEnd),o.finish(o.openEnd),o}}function vt(t,e){for(let i of e)t=new $(i,[t],t.length);return t}class wt extends lt{constructor(t){super(),this.tag=t}eq(t){return t.tag==this.tag}toDOM(){return document.createElement(this.tag)}updateDOM(t){return t.nodeName.toLowerCase()==this.tag}get isHidden(){return!0}}wt.inline=new wt("span"),wt.block=new wt("div"),e.Direction=void 0,(ht=e.Direction||(e.Direction={}))[ht.LTR=0]="LTR",ht[ht.RTL=1]="RTL";const yt=e.Direction.LTR,bt=e.Direction.RTL;function St(t){let e=[];for(let i=0;i<t.length;i++)e.push(1<<+t[i]);return e}const xt=St("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008"),Ct=St("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333"),kt=Object.create(null),At=[];for(let t of["()","[]","{}"]){let e=t.charCodeAt(0),i=t.charCodeAt(1);kt[e]=i,kt[i]=-e}function Et(t){return t<=247?xt[t]:1424<=t&&t<=1524?2:1536<=t&&t<=1785?Ct[t-1536]:1774<=t&&t<=2220?4:8192<=t&&t<=8204?256:64336<=t&&t<=65023?4:1}const Tt=/[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;class Mt{get dir(){return this.level%2?bt:yt}constructor(t,e,i){this.from=t,this.to=e,this.level=i}side(t,e){return this.dir==e==t?this.to:this.from}forward(t,e){return t==(this.dir==e)}static find(t,e,i,n){let r=-1;for(let s=0;s<t.length;s++){let o=t[s];if(o.from<=e&&o.to>=e){if(o.level==i)return s;(r<0||(0!=n?n<0?o.from<e:o.to>e:t[r].level>o.level))&&(r=s)}}if(r<0)throw new RangeError("Index out of range");return r}}function Nt(t,e){if(t.length!=e.length)return!1;for(let i=0;i<t.length;i++){let n=t[i],r=e[i];if(n.from!=r.from||n.to!=r.to||n.direction!=r.direction||!Nt(n.inner,r.inner))return!1}return!0}const Pt=[];function Ot(t,e,i,n,r,s,o){let l=n%2?2:1;if(n%2==r%2)for(let a=e,h=0;a<i;){let e=!0,c=!1;if(h==s.length||a<s[h].from){let t=Pt[a];t!=l&&(e=!1,c=16==t)}let u=e||1!=l?null:[],d=e?n:n+1,f=a;t:for(;;)if(h<s.length&&f==s[h].from){if(c)break t;let p=s[h];if(!e)for(let t=p.to,e=h+1;;){if(t==i)break t;if(!(e<s.length&&s[e].from==t)){if(Pt[t]==l)break t;break}t=s[e++].to}h++,u?u.push(p):(p.from>a&&o.push(new Mt(a,p.from,d)),Dt(t,p.direction==yt!=!(d%2)?n+1:n,r,p.inner,p.from,p.to,o),a=p.to),f=p.to}else{if(f==i||(e?Pt[f]!=l:Pt[f]==l))break;f++}u?Ot(t,a,f,n+1,r,u,o):a<f&&o.push(new Mt(a,f,d)),a=f}else for(let a=i,h=s.length;a>e;){let i=!0,c=!1;if(!h||a>s[h-1].to){let t=Pt[a-1];t!=l&&(i=!1,c=16==t)}let u=i||1!=l?null:[],d=i?n:n+1,f=a;t:for(;;)if(h&&f==s[h-1].to){if(c)break t;let p=s[--h];if(!i)for(let t=p.from,i=h;;){if(t==e)break t;if(!i||s[i-1].to!=t){if(Pt[t-1]==l)break t;break}t=s[--i].from}u?u.push(p):(p.to<a&&o.push(new Mt(p.to,a,d)),Dt(t,p.direction==yt!=!(d%2)?n+1:n,r,p.inner,p.from,p.to,o),a=p.from),f=p.from}else{if(f==e||(i?Pt[f-1]!=l:Pt[f-1]==l))break;f--}u?Ot(t,f,a,n+1,r,u,o):f<a&&o.push(new Mt(f,a,d)),a=f}}function Dt(t,e,i,n,r,s,o){let l=e%2?2:1;!function(t,e,i,n,r){for(let s=0;s<=n.length;s++){let o=s?n[s-1].to:e,l=s<n.length?n[s].from:i,a=s?256:r;for(let e=o,i=a,n=a;e<l;e++){let r=Et(t.charCodeAt(e));512==r?r=i:8==r&&4==n&&(r=16),Pt[e]=4==r?2:r,7&r&&(n=r),i=r}for(let t=o,e=a,n=a;t<l;t++){let r=Pt[t];if(128==r)t<l-1&&e==Pt[t+1]&&24&e?r=Pt[t]=e:Pt[t]=256;else if(64==r){let r=t+1;for(;r<l&&64==Pt[r];)r++;let s=t&&8==e||r<i&&8==Pt[r]?1==n?1:8:256;for(let e=t;e<r;e++)Pt[e]=s;t=r-1}else 8==r&&1==n&&(Pt[t]=1);e=r,7&r&&(n=r)}}}(t,r,s,n,l),function(t,e,i,n,r){let s=1==r?2:1;for(let o=0,l=0,a=0;o<=n.length;o++){let h=o?n[o-1].to:e,c=o<n.length?n[o].from:i;for(let e,i,n,o=h;o<c;o++)if(i=kt[e=t.charCodeAt(o)])if(i<0){for(let t=l-3;t>=0;t-=3)if(At[t+1]==-i){let e=At[t+2],i=2&e?r:4&e?1&e?s:r:0;i&&(Pt[o]=Pt[At[t]]=i),l=t;break}}else{if(189==At.length)break;At[l++]=o,At[l++]=e,At[l++]=a}else if(2==(n=Pt[o])||1==n){let t=n==r;a=t?0:1;for(let e=l-3;e>=0;e-=3){let i=At[e+2];if(2&i)break;if(t)At[e+2]|=2;else{if(4&i)break;At[e+2]|=4}}}}}(t,r,s,n,l),function(t,e,i,n){for(let r=0,s=n;r<=i.length;r++){let o=r?i[r-1].to:t,l=r<i.length?i[r].from:e;for(let a=o;a<l;){let o=Pt[a];if(256==o){let o=a+1;for(;;)if(o==l){if(r==i.length)break;o=i[r++].to,l=r<i.length?i[r].from:e}else{if(256!=Pt[o])break;o++}let h=1==s,c=h==(1==(o<e?Pt[o]:n))?h?1:2:n;for(let e=o,n=r,s=n?i[n-1].to:t;e>a;)e==s&&(e=i[--n].from,s=n?i[n-1].to:t),Pt[--e]=c;a=o}else s=o,a++}}}(r,s,n,l),Ot(t,r,s,e,i,n,o)}function Lt(t,e,i){if(!t)return[new Mt(0,0,e==bt?1:0)];if(e==yt&&!i.length&&!Tt.test(t))return Rt(t.length);if(i.length)for(;t.length>Pt.length;)Pt[Pt.length]=256;let n=[],r=e==yt?0:1;return Dt(t,r,r,i,0,t.length,n),n}function Rt(t){return[new Mt(0,t,0)]}let It="";function Bt(t,e,i,r,s){var o;let l=r.head-t.from,a=Mt.find(e,l,null!==(o=r.bidiLevel)&&void 0!==o?o:-1,r.assoc),h=e[a],c=h.side(s,i);if(l==c){let t=a+=s?1:-1;if(t<0||t>=e.length)return null;h=e[a=t],l=h.side(!s,i),c=h.side(s,i)}let u=n.findClusterBreak(t.text,l,h.forward(s,i));(u<h.from||u>h.to)&&(u=c),It=t.text.slice(Math.min(l,u),Math.max(l,u));let d=a==(s?e.length-1:0)?null:e[a+(s?1:-1)];return d&&u==c&&d.level+(s?0:1)<h.level?n.EditorSelection.cursor(d.side(!s,i)+t.from,d.forward(s,i)?1:-1,d.level):n.EditorSelection.cursor(u+t.from,h.forward(s,i)?-1:1,h.level)}function Ft(t,e,i){for(let n=e;n<i;n++){let e=Et(t.charCodeAt(n));if(1==e)return yt;if(2==e||4==e)return bt}return yt}const _t=n.Facet.define(),qt=n.Facet.define(),Vt=n.Facet.define(),Ht=n.Facet.define(),Wt=n.Facet.define(),zt=n.Facet.define(),jt=n.Facet.define(),Ut=n.Facet.define({combine:t=>t.some((t=>t))}),Kt=n.Facet.define({combine:t=>t.some((t=>t))}),Gt=n.Facet.define();class $t{constructor(t,e="nearest",i="nearest",n=5,r=5,s=!1){this.range=t,this.y=e,this.x=i,this.yMargin=n,this.xMargin=r,this.isSnapshot=s}map(t){return t.empty?this:new $t(this.range.map(t),this.y,this.x,this.yMargin,this.xMargin,this.isSnapshot)}clip(t){return this.range.to<=t.doc.length?this:new $t(n.EditorSelection.cursor(t.doc.length),this.y,this.x,this.yMargin,this.xMargin,this.isSnapshot)}}const Yt=n.StateEffect.define({map:(t,e)=>t.map(e)}),Jt=n.StateEffect.define();function Xt(t,e,i){let n=t.facet(Ht);n.length?n[0](e):window.onerror?window.onerror(String(e),i,void 0,void 0,e):i?console.error(i+":",e):console.error(e)}const Zt=n.Facet.define({combine:t=>!t.length||t[0]});let Qt=0;const te=n.Facet.define();class ee{constructor(t,e,i,n,r){this.id=t,this.create=e,this.domEventHandlers=i,this.domEventObservers=n,this.extension=r(this)}static define(t,e){const{eventHandlers:i,eventObservers:n,provide:r,decorations:s}=e||{};return new ee(Qt++,t,i,n,(t=>{let e=[te.of(t)];return s&&e.push(se.of((e=>{let i=e.plugin(t);return i?s(i):ct.none}))),r&&e.push(r(t)),e}))}static fromClass(t,e){return ee.define((e=>new t(e)),e)}}class ie{constructor(t){this.spec=t,this.mustUpdate=null,this.value=null}update(t){if(this.value){if(this.mustUpdate){let t=this.mustUpdate;if(this.mustUpdate=null,this.value.update)try{this.value.update(t)}catch(e){if(Xt(t.state,e,"CodeMirror plugin crashed"),this.value.destroy)try{this.value.destroy()}catch(t){}this.deactivate()}}}else if(this.spec)try{this.value=this.spec.create(t)}catch(e){Xt(t.state,e,"CodeMirror plugin crashed"),this.deactivate()}return this}destroy(t){var e;if(null===(e=this.value)||void 0===e?void 0:e.destroy)try{this.value.destroy()}catch(e){Xt(t.state,e,"CodeMirror plugin crashed")}}deactivate(){this.spec=this.value=null}}const ne=n.Facet.define(),re=n.Facet.define(),se=n.Facet.define(),oe=n.Facet.define(),le=n.Facet.define(),ae=n.Facet.define();function he(t,e){let i=t.state.facet(ae);if(!i.length)return i;let r=i.map((e=>e instanceof Function?e(t):e)),s=[];return n.RangeSet.spans(r,e.from,e.to,{point(){},span(t,i,n,r){let o=t-e.from,l=i-e.from,a=s;for(let t=n.length-1;t>=0;t--,r--){let i,s=n[t].spec.bidiIsolate;if(null==s&&(s=Ft(e.text,o,l)),r>0&&a.length&&(i=a[a.length-1]).to==o&&i.direction==s)i.to=l,a=i.inner;else{let t={from:o,to:l,direction:s,inner:[]};a.push(t),a=t.inner}}}}),s}const ce=n.Facet.define();function ue(t){let e=0,i=0,n=0,r=0;for(let s of t.state.facet(ce)){let o=s(t);o&&(null!=o.left&&(e=Math.max(e,o.left)),null!=o.right&&(i=Math.max(i,o.right)),null!=o.top&&(n=Math.max(n,o.top)),null!=o.bottom&&(r=Math.max(r,o.bottom)))}return{left:e,right:i,top:n,bottom:r}}const de=n.Facet.define();class fe{constructor(t,e,i,n){this.fromA=t,this.toA=e,this.fromB=i,this.toB=n}join(t){return new fe(Math.min(this.fromA,t.fromA),Math.max(this.toA,t.toA),Math.min(this.fromB,t.fromB),Math.max(this.toB,t.toB))}addToSet(t){let e=t.length,i=this;for(;e>0;e--){let n=t[e-1];if(!(n.fromA>i.toA)){if(n.toA<i.fromA)break;i=i.join(n),t.splice(e-1,1)}}return t.splice(e,0,i),t}static extendWithRanges(t,e){if(0==e.length)return t;let i=[];for(let n=0,r=0,s=0,o=0;;n++){let l=n==t.length?null:t[n],a=s-o,h=l?l.fromB:1e9;for(;r<e.length&&e[r]<h;){let t=e[r],n=e[r+1],s=Math.max(o,t),l=Math.min(h,n);if(s<=l&&new fe(s+a,l+a,s,l).addToSet(i),n>h)break;r+=2}if(!l)return i;new fe(l.fromA,l.toA,l.fromB,l.toB).addToSet(i),s=l.toA,o=l.toB}}}class pe{constructor(t,e,i){this.view=t,this.state=e,this.transactions=i,this.flags=0,this.startState=t.state,this.changes=n.ChangeSet.empty(this.startState.doc.length);for(let t of i)this.changes=this.changes.compose(t.changes);let r=[];this.changes.iterChangedRanges(((t,e,i,n)=>r.push(new fe(t,e,i,n)))),this.changedRanges=r}static create(t,e,i){return new pe(t,e,i)}get viewportChanged(){return(4&this.flags)>0}get heightChanged(){return(2&this.flags)>0}get geometryChanged(){return this.docChanged||(10&this.flags)>0}get focusChanged(){return(1&this.flags)>0}get docChanged(){return!this.changes.empty}get selectionSet(){return this.transactions.some((t=>t.selection))}get empty(){return 0==this.flags&&0==this.transactions.length}}class me extends P{get length(){return this.view.state.doc.length}constructor(t){super(),this.view=t,this.decorations=[],this.dynamicDecorationMap=[!1],this.domChanged=null,this.hasComposition=null,this.markedForComposition=new Set,this.editContextFormatting=ct.none,this.lastCompositionAfterCursor=!1,this.minWidth=0,this.minWidthFrom=0,this.minWidthTo=0,this.impreciseAnchor=null,this.impreciseHead=null,this.forceSelection=!1,this.lastUpdate=Date.now(),this.setDOM(t.contentDOM),this.children=[new st],this.children[0].setParent(this),this.updateDeco(),this.updateInner([new fe(0,0,0,t.state.doc.length)],0,null)}update(t){var e;let i=t.changedRanges;this.minWidth>0&&i.length&&(i.every((({fromA:t,toA:e})=>e<this.minWidthFrom||t>this.minWidthTo))?(this.minWidthFrom=t.changes.mapPos(this.minWidthFrom,1),this.minWidthTo=t.changes.mapPos(this.minWidthTo,1)):this.minWidth=this.minWidthFrom=this.minWidthTo=0),this.updateEditContextFormatting(t);let r=-1;this.view.inputState.composing>=0&&!this.view.observer.editContext&&((null===(e=this.domChanged)||void 0===e?void 0:e.newSel)?r=this.domChanged.newSel.head:function(t,e){let i=!1;return e&&t.iterChangedRanges(((t,n)=>{t<e.to&&n>e.from&&(i=!0)})),i}(t.changes,this.hasComposition)||t.selectionSet||(r=t.state.selection.main.head));let s=r>-1?function(t,e,i){let n=ve(t,i);if(!n)return null;let{node:r,from:s,to:o}=n,l=r.nodeValue;if(/[\n\r]/.test(l))return null;if(t.state.doc.sliceString(n.from,n.to)!=l)return null;let a=e.invertedDesc,h=new fe(a.mapPos(s),a.mapPos(o),s,o),c=[];for(let e=r.parentNode;;e=e.parentNode){let i=P.get(e);if(i instanceof $)c.push({node:e,deco:i.mark});else{if(i instanceof st||"DIV"==e.nodeName&&e.parentNode==t.contentDOM)return{range:h,text:r,marks:c,line:e};if(e==t.contentDOM)return null;c.push({node:e,deco:new ut({inclusive:!0,attributes:rt(e),tagName:e.tagName.toLowerCase()})})}}}(this.view,t.changes,r):null;if(this.domChanged=null,this.hasComposition){this.markedForComposition.clear();let{from:e,to:n}=this.hasComposition;i=new fe(e,n,t.changes.mapPos(e,-1),t.changes.mapPos(n,1)).addToSet(i.slice())}this.hasComposition=s?{from:s.range.fromB,to:s.range.toB}:null,(K.ie||K.chrome)&&!s&&t&&t.state.doc.lines!=t.startState.doc.lines&&(this.forceSelection=!0);let o=function(t,e,i){let r=new we;return n.RangeSet.compare(t,e,i,r),r.changes}(this.decorations,this.updateDeco(),t.changes);return i=fe.extendWithRanges(i,o),!!(7&this.flags||0!=i.length)&&(this.updateInner(i,t.startState.doc.length,s),t.transactions.length&&(this.lastUpdate=Date.now()),!0)}updateInner(t,e,i){this.view.viewState.mustMeasureContent=!0,this.updateChildren(t,e,i);let{observer:n}=this.view;n.ignore((()=>{this.dom.style.height=this.view.viewState.contentHeight/this.view.scaleY+"px",this.dom.style.flexBasis=this.minWidth?this.minWidth+"px":"";let t=K.chrome||K.ios?{node:n.selectionRange.focusNode,written:!1}:void 0;this.sync(this.view,t),this.flags&=-8,t&&(t.written||n.selectionRange.focusNode!=t.node)&&(this.forceSelection=!0),this.dom.style.height=""})),this.markedForComposition.forEach((t=>t.flags&=-9));let r=[];if(this.view.viewport.from||this.view.viewport.to<this.view.state.doc.length)for(let t of this.children)t instanceof ot&&t.widget instanceof ge&&r.push(t.dom);n.updateGaps(r)}updateChildren(t,e,i){let n=i?i.range.addToSet(t.slice()):t,r=this.childCursor(e);for(let t=n.length-1;;t--){let e=t>=0?n[t]:null;if(!e)break;let s,o,l,a,{fromA:h,toA:c,fromB:u,toB:d}=e;if(i&&i.range.fromB<d&&i.range.toB>u){let t=gt.build(this.view.state.doc,u,i.range.fromB,this.decorations,this.dynamicDecorationMap),e=gt.build(this.view.state.doc,i.range.toB,d,this.decorations,this.dynamicDecorationMap);o=t.breakAtStart,l=t.openStart,a=e.openEnd;let n=this.compositionView(i);e.breakAtStart?n.breakAfter=1:e.content.length&&n.merge(n.length,n.length,e.content[0],!1,e.openStart,0)&&(n.breakAfter=e.content[0].breakAfter,e.content.shift()),t.content.length&&n.merge(0,0,t.content[t.content.length-1],!0,0,t.openEnd)&&t.content.pop(),s=t.content.concat(n).concat(e.content)}else({content:s,breakAtStart:o,openStart:l,openEnd:a}=gt.build(this.view.state.doc,u,d,this.decorations,this.dynamicDecorationMap));let{i:f,off:p}=r.findPos(c,1),{i:m,off:g}=r.findPos(h,-1);L(this,m,g,f,p,s,o,l,a)}i&&this.fixCompositionDOM(i)}updateEditContextFormatting(t){this.editContextFormatting=this.editContextFormatting.map(t.changes);for(let e of t.transactions)for(let t of e.effects)t.is(Jt)&&(this.editContextFormatting=t.value)}compositionView(t){let e=new G(t.text.nodeValue);e.flags|=8;for(let{deco:i}of t.marks)e=new $(i,[e],e.length);let i=new st;return i.append(e,0),i}fixCompositionDOM(t){let e=(t,e)=>{e.flags|=8|(e.children.some((t=>7&t.flags))?1:0),this.markedForComposition.add(e);let i=P.get(t);i&&i!=e&&(i.dom=null),e.setDOM(t)},i=this.childPos(t.range.fromB,1),n=this.children[i.i];e(t.line,n);for(let r=t.marks.length-1;r>=-1;r--)i=n.childPos(i.off,1),n=n.children[i.i],e(r>=0?t.marks[r].node:t.text,n)}updateSelection(t=!1,e=!1){!t&&this.view.observer.selectionRange.focusNode||this.view.observer.readSelectionRange();let i=this.view.root.activeElement,n=i==this.dom,r=!n&&a(this.dom,this.view.observer.selectionRange)&&!(i&&this.dom.contains(i));if(!(n||e||r))return;let s=this.forceSelection;this.forceSelection=!1;let l=this.view.state.selection.main,h=this.moveToLine(this.domAtPos(l.anchor)),u=l.empty?h:this.moveToLine(this.domAtPos(l.head));if(K.gecko&&l.empty&&!this.hasComposition&&1==(d=h).node.nodeType&&d.node.firstChild&&(0==d.offset||"false"==d.node.childNodes[d.offset-1].contentEditable)&&(d.offset==d.node.childNodes.length||"false"==d.node.childNodes[d.offset].contentEditable)){let t=document.createTextNode("");this.view.observer.ignore((()=>h.node.insertBefore(t,h.node.childNodes[h.offset]||null))),h=u=new M(t,0),s=!0}var d;let f=this.view.observer.selectionRange;!s&&f.focusNode&&(c(h.node,h.offset,f.anchorNode,f.anchorOffset)&&c(u.node,u.offset,f.focusNode,f.focusOffset)||this.suppressWidgetCursorChange(f,l))||(this.view.observer.ignore((()=>{K.android&&K.chrome&&this.dom.contains(f.focusNode)&&function(t,e){for(let i=t;i&&i!=e;i=i.assignedSlot||i.parentNode)if(1==i.nodeType&&"false"==i.contentEditable)return!0;return!1}(f.focusNode,this.dom)&&(this.dom.blur(),this.dom.focus({preventScroll:!0}));let t=o(this.view.root);if(t)if(l.empty){if(K.gecko){let t=(e=h.node,n=h.offset,1!=e.nodeType?0:(n&&"false"==e.childNodes[n-1].contentEditable?1:0)|(n<e.childNodes.length&&"false"==e.childNodes[n].contentEditable?2:0));if(t&&3!=t){let e=(1==t?E:T)(h.node,h.offset);e&&(h=new M(e.node,e.offset))}}t.collapse(h.node,h.offset),null!=l.bidiLevel&&void 0!==t.caretBidiLevel&&(t.caretBidiLevel=l.bidiLevel)}else if(t.extend){t.collapse(h.node,h.offset);try{t.extend(u.node,u.offset)}catch(t){}}else{let e=document.createRange();l.anchor>l.head&&([h,u]=[u,h]),e.setEnd(u.node,u.offset),e.setStart(h.node,h.offset),t.removeAllRanges(),t.addRange(e)}var e,n;r&&this.view.root.activeElement==this.dom&&(this.dom.blur(),i&&i.focus())})),this.view.observer.setSelectionRange(h,u)),this.impreciseAnchor=h.precise?null:new M(f.anchorNode,f.anchorOffset),this.impreciseHead=u.precise?null:new M(f.focusNode,f.focusOffset)}suppressWidgetCursorChange(t,e){return this.hasComposition&&e.empty&&c(t.focusNode,t.focusOffset,t.anchorNode,t.anchorOffset)&&this.posFromDOM(t.focusNode,t.focusOffset)==e.head}enforceCursorAssoc(){if(this.hasComposition)return;let{view:t}=this,e=t.state.selection.main,i=o(t.root),{anchorNode:n,anchorOffset:r}=t.observer.selectionRange;if(!(i&&e.empty&&e.assoc&&i.modify))return;let s=st.find(this,e.head);if(!s)return;let l=s.posAtStart;if(e.head==l||e.head==l+s.length)return;let a=this.coordsAt(e.head,-1),h=this.coordsAt(e.head,1);if(!a||!h||a.bottom>h.top)return;let c=this.domAtPos(e.head+e.assoc);i.collapse(c.node,c.offset),i.modify("move",e.assoc<0?"forward":"backward","lineboundary"),t.observer.readSelectionRange();let u=t.observer.selectionRange;t.docView.posFromDOM(u.anchorNode,u.anchorOffset)!=e.from&&i.collapse(n,r)}moveToLine(t){let e,i=this.dom;if(t.node!=i)return t;for(let n=t.offset;!e&&n<i.childNodes.length;n++){let t=P.get(i.childNodes[n]);t instanceof st&&(e=t.domAtPos(0))}for(let n=t.offset-1;!e&&n>=0;n--){let t=P.get(i.childNodes[n]);t instanceof st&&(e=t.domAtPos(t.length))}return e?new M(e.node,e.offset,!0):t}nearest(t){for(let e=t;e;){let t=P.get(e);if(t&&t.rootView==this)return t;e=e.parentNode}return null}posFromDOM(t,e){let i=this.nearest(t);if(!i)throw new RangeError("Trying to find position for a DOM position outside of the document");return i.localPosFromDOM(t,e)+i.posAtStart}domAtPos(t){let{i:e,off:i}=this.childCursor().findPos(t,-1);for(;e<this.children.length-1;){let t=this.children[e];if(i<t.length||t instanceof st)break;e++,i=0}return this.children[e].domAtPos(i)}coordsAt(t,e){let i=null,n=0;for(let r=this.length,s=this.children.length-1;s>=0;s--){let o=this.children[s],l=r-o.breakAfter,a=l-o.length;if(l<t)break;if(a<=t&&(a<t||o.covers(-1))&&(l>t||o.covers(1))&&(!i||o instanceof st&&!(i instanceof st&&e>=0)))i=o,n=a;else if(i&&a==t&&l==t&&o instanceof ot&&Math.abs(e)<2){if(o.deco.startSide<0)break;s&&(i=null)}r=a}return i?i.coordsAt(t-n,e):null}coordsForChar(t){let{i:e,off:i}=this.childPos(t,1),r=this.children[e];if(!(r instanceof st))return null;for(;r.children.length;){let{i:t,off:e}=r.childPos(i,1);for(;;t++){if(t==r.children.length)return null;if((r=r.children[t]).length)break}i=e}if(!(r instanceof G))return null;let s=n.findClusterBreak(r.text,i);if(s==i)return null;let o=x(r.dom,i,s).getClientRects();for(let t=0;t<o.length;t++){let e=o[t];if(t==o.length-1||e.top<e.bottom&&e.left<e.right)return e}return null}measureVisibleLineHeights(t){let i=[],{from:n,to:r}=t,s=this.view.contentDOM.clientWidth,o=s>Math.max(this.view.scrollDOM.clientWidth,this.minWidth)+1,l=-1,a=this.view.textDirection==e.Direction.LTR;for(let t=0,e=0;e<this.children.length;e++){let c=this.children[e],u=t+c.length;if(u>r)break;if(t>=n){let e=c.dom.getBoundingClientRect();if(i.push(e.height),o){let i=c.dom.lastChild,n=i?h(i):[];if(n.length){let i=n[n.length-1],r=a?i.right-e.left:e.right-i.left;r>l&&(l=r,this.minWidth=s,this.minWidthFrom=t,this.minWidthTo=u)}}}t=u+c.breakAfter}return i}textDirectionAt(t){let{i}=this.childPos(t,1);return"rtl"==getComputedStyle(this.children[i].dom).direction?e.Direction.RTL:e.Direction.LTR}measureTextSize(){for(let t of this.children)if(t instanceof st){let e=t.measureTextSize();if(e)return e}let t,e,i,n=document.createElement("div");return n.className="cm-line",n.style.width="99999px",n.style.position="absolute",n.textContent="abc def ghi jkl mno pqr stu",this.view.observer.ignore((()=>{this.dom.appendChild(n);let r=h(n.firstChild)[0];t=n.getBoundingClientRect().height,e=r?r.width/27:7,i=r?r.height:t,n.remove()})),{lineHeight:t,charWidth:e,textHeight:i}}childCursor(t=this.length){let e=this.children.length;return e&&(t-=this.children[--e].length),new D(this.children,t,e)}computeBlockGapDeco(){let t=[],e=this.view.viewState;for(let i=0,n=0;;n++){let r=n==e.viewports.length?null:e.viewports[n],s=r?r.from-1:this.length;if(s>i){let n=(e.lineBlockAt(s).bottom-e.lineBlockAt(i).top)/this.view.scaleY;t.push(ct.replace({widget:new ge(n),block:!0,inclusive:!0,isBlockGap:!0}).range(i,s))}if(!r)break;i=r.to+1}return ct.set(t)}updateDeco(){let t=1,e=this.view.state.facet(se).map((e=>(this.dynamicDecorationMap[t++]="function"==typeof e)?e(this.view):e)),i=!1,r=this.view.state.facet(oe).map(((t,e)=>{let n="function"==typeof t;return n&&(i=!0),n?t(this.view):t}));for(r.length&&(this.dynamicDecorationMap[t++]=i,e.push(n.RangeSet.join(r))),this.decorations=[this.editContextFormatting,...e,this.computeBlockGapDeco(),this.view.viewState.lineGapDeco];t<this.decorations.length;)this.dynamicDecorationMap[t++]=!1;return this.decorations}scrollIntoView(t){if(t.isSnapshot){let e=this.view.viewState.lineBlockAt(t.range.head);return this.view.scrollDOM.scrollTop=e.top-t.yMargin,void(this.view.scrollDOM.scrollLeft=t.xMargin)}for(let e of this.view.state.facet(Gt))try{if(e(this.view,t.range,t))return!0}catch(t){Xt(this.view.state,t,"scroll handler")}let i,{range:n}=t,r=this.coordsAt(n.head,n.empty?n.assoc:n.head>n.anchor?-1:1);if(!r)return;!n.empty&&(i=this.coordsAt(n.anchor,n.anchor>n.head?-1:1))&&(r={left:Math.min(r.left,i.left),top:Math.min(r.top,i.top),right:Math.max(r.right,i.right),bottom:Math.max(r.bottom,i.bottom)});let s=ue(this.view),o={left:r.left-s.left,top:r.top-s.top,right:r.right+s.right,bottom:r.bottom+s.bottom},{offsetWidth:l,offsetHeight:a}=this.view.scrollDOM;!function(t,e,i,n,r,s,o,l){let a=t.ownerDocument,h=a.defaultView||window;for(let c=t,u=!1;c&&!u;)if(1==c.nodeType){let t,d=c==a.body,f=1,p=1;if(d)t=g(h);else{if(/^(fixed|sticky)$/.test(getComputedStyle(c).position)&&(u=!0),c.scrollHeight<=c.clientHeight&&c.scrollWidth<=c.clientWidth){c=c.assignedSlot||c.parentNode;continue}let e=c.getBoundingClientRect();({scaleX:f,scaleY:p}=v(c,e)),t={left:e.left,right:e.left+c.clientWidth*f,top:e.top,bottom:e.top+c.clientHeight*p}}let m=0,w=0;if("nearest"==r)e.top<t.top?(w=-(t.top-e.top+o),i>0&&e.bottom>t.bottom+w&&(w=e.bottom-t.bottom+w+o)):e.bottom>t.bottom&&(w=e.bottom-t.bottom+o,i<0&&e.top-w<t.top&&(w=-(t.top+w-e.top+o)));else{let n=e.bottom-e.top,s=t.bottom-t.top;w=("center"==r&&n<=s?e.top+n/2-s/2:"start"==r||"center"==r&&i<0?e.top-o:e.bottom-s+o)-t.top}if("nearest"==n?e.left<t.left?(m=-(t.left-e.left+s),i>0&&e.right>t.right+m&&(m=e.right-t.right+m+s)):e.right>t.right&&(m=e.right-t.right+s,i<0&&e.left<t.left+m&&(m=-(t.left+m-e.left+s))):m=("center"==n?e.left+(e.right-e.left)/2-(t.right-t.left)/2:"start"==n==l?e.left-s:e.right-(t.right-t.left)+s)-t.left,m||w)if(d)h.scrollBy(m,w);else{let t=0,i=0;if(w){let t=c.scrollTop;c.scrollTop+=w/p,i=(c.scrollTop-t)*p}if(m){let e=c.scrollLeft;c.scrollLeft+=m/f,t=(c.scrollLeft-e)*f}e={left:e.left-t,top:e.top-i,right:e.right-t,bottom:e.bottom-i},t&&Math.abs(t-m)<1&&(n="nearest"),i&&Math.abs(i-w)<1&&(r="nearest")}if(d)break;c=c.assignedSlot||c.parentNode}else{if(11!=c.nodeType)break;c=c.host}}(this.view.scrollDOM,o,n.head<n.anchor?-1:1,t.x,t.y,Math.max(Math.min(t.xMargin,l),-l),Math.max(Math.min(t.yMargin,a),-a),this.view.textDirection==e.Direction.LTR)}}class ge extends lt{constructor(t){super(),this.height=t}toDOM(){let t=document.createElement("div");return t.className="cm-gap",this.updateDOM(t),t}eq(t){return t.height==this.height}updateDOM(t){return t.style.height=this.height+"px",!0}get editable(){return!0}get estimatedHeight(){return this.height}ignoreEvent(){return!1}}function ve(t,e){let i=t.observer.selectionRange;if(!i.focusNode)return null;let n=E(i.focusNode,i.focusOffset),r=T(i.focusNode,i.focusOffset),s=n||r;if(r&&n&&r.node!=n.node){let e=P.get(r.node);if(!e||e instanceof G&&e.text!=r.node.nodeValue)s=r;else if(t.docView.lastCompositionAfterCursor){let t=P.get(n.node);!t||t instanceof G&&t.text!=n.node.nodeValue||(s=r)}}if(t.docView.lastCompositionAfterCursor=s!=n,!s)return null;let o=e-s.offset;return{from:o,to:o+s.node.nodeValue.length,node:s.node}}let we=class{constructor(){this.changes=[]}compareRange(t,e){mt(t,e,this.changes)}comparePoint(t,e){mt(t,e,this.changes)}};function ye(t,e){return e.left>t?e.left-t:Math.max(0,t-e.right)}function be(t,e){return e.top>t?e.top-t:Math.max(0,t-e.bottom)}function Se(t,e){return t.top<e.bottom-1&&t.bottom>e.top+1}function xe(t,e){return e<t.top?{top:e,left:t.left,right:t.right,bottom:t.bottom}:t}function Ce(t,e){return e>t.bottom?{top:t.top,left:t.left,right:t.right,bottom:e}:t}function ke(t,e,i){let n,r,s,o,l,a,c,u,d=!1;for(let f=t.firstChild;f;f=f.nextSibling){let t=h(f);for(let h=0;h<t.length;h++){let p=t[h];r&&Se(r,p)&&(p=xe(Ce(p,r.bottom),r.top));let m=ye(e,p),g=be(i,p);if(0==m&&0==g)return 3==f.nodeType?Ae(f,e,i):ke(f,e,i);if(!n||o>g||o==g&&s>m){n=f,r=p,s=m,o=g;let l=g?i<p.top?-1:1:m?e<p.left?-1:1:0;d=!l||(l>0?h<t.length-1:h>0)}0==m?i>p.bottom&&(!c||c.bottom<p.bottom)?(l=f,c=p):i<p.top&&(!u||u.top>p.top)&&(a=f,u=p):c&&Se(c,p)?c=Ce(c,p.bottom):u&&Se(u,p)&&(u=xe(u,p.top))}}if(c&&c.bottom>=i?(n=l,r=c):u&&u.top<=i&&(n=a,r=u),!n)return{node:t,offset:0};let f=Math.max(r.left,Math.min(r.right,e));return 3==n.nodeType?Ae(n,f,i):d&&"false"!=n.contentEditable?ke(n,f,i):{node:t,offset:Array.prototype.indexOf.call(t.childNodes,n)+(e>=(r.left+r.right)/2?1:0)}}function Ae(t,e,i){let n=t.nodeValue.length,r=-1,s=1e9,o=0;for(let l=0;l<n;l++){let n=x(t,l,l+1).getClientRects();for(let a=0;a<n.length;a++){let h=n[a];if(h.top==h.bottom)continue;o||(o=e-h.left);let c=(h.top>i?h.top-i:i-h.bottom)-1;if(h.left-1<=e&&h.right+1>=e&&c<s){let i=e>=(h.left+h.right)/2,n=i;if((K.chrome||K.gecko)&&x(t,l).getBoundingClientRect().left==h.right&&(n=!i),c<=0)return{node:t,offset:l+(n?1:0)};r=l+(n?1:0),s=c}}}return{node:t,offset:r>-1?r:o>0?t.nodeValue.length:0}}function Ee(t,i,n,r=-1){var s,o;let l,a=t.contentDOM.getBoundingClientRect(),h=a.top+t.viewState.paddingTop,{docHeight:c}=t.viewState,{x:u,y:d}=i,f=d-h;if(f<0)return 0;if(f>c)return t.state.doc.length;for(let i=t.viewState.heightOracle.textHeight/2,s=!1;l=t.elementAtHeight(f),l.type!=e.BlockType.Text;)for(;f=r>0?l.bottom+i:l.top-i,!(f>=0&&f<=c);){if(s)return n?null:0;s=!0,r=-r}d=h+f;let p=l.from;if(p<t.viewport.from)return 0==t.viewport.from?0:n?null:Te(t,a,l,u,d);if(p>t.viewport.to)return t.viewport.to==t.state.doc.length?t.state.doc.length:n?null:Te(t,a,l,u,d);let m=t.dom.ownerDocument,g=t.root.elementFromPoint?t.root:m,v=g.elementFromPoint(u,d);v&&!t.contentDOM.contains(v)&&(v=null),v||(u=Math.max(a.left+1,Math.min(a.right-1,u)),v=g.elementFromPoint(u,d),v&&!t.contentDOM.contains(v)&&(v=null));let w,y=-1;if(v&&0!=(null===(s=t.docView.nearest(v))||void 0===s?void 0:s.isEditable))if(m.caretPositionFromPoint){let t=m.caretPositionFromPoint(u,d);t&&({offsetNode:w,offset:y}=t)}else if(m.caretRangeFromPoint){let e=m.caretRangeFromPoint(u,d);e&&(({startContainer:w,startOffset:y}=e),(!t.contentDOM.contains(w)||K.safari&&function(t,e,i){let n;if(3!=t.nodeType||e!=(n=t.nodeValue.length))return!1;for(let e=t.nextSibling;e;e=e.nextSibling)if(1!=e.nodeType||"BR"!=e.nodeName)return!1;return x(t,n-1,n).getBoundingClientRect().left>i}(w,y,u)||K.chrome&&function(t,e,i){if(0!=e)return!1;for(let e=t;;){let t=e.parentNode;if(!t||1!=t.nodeType||t.firstChild!=e)return!1;if(t.classList.contains("cm-line"))break;e=t}return i-(1==t.nodeType?t.getBoundingClientRect():x(t,0,Math.max(t.nodeValue.length,1)).getBoundingClientRect()).left>5}(w,y,u))&&(w=void 0))}if(!w||!t.docView.dom.contains(w)){let e=st.find(t.docView,p);if(!e)return f>l.top+l.height/2?l.to:l.from;({node:w,offset:y}=ke(e.dom,u,d))}let b=t.docView.nearest(w);if(!b)return null;if(b.isWidget&&1==(null===(o=b.dom)||void 0===o?void 0:o.nodeType)){let t=b.dom.getBoundingClientRect();return i.y<t.top||i.y<=t.bottom&&i.x<=(t.left+t.right)/2?b.posAtStart:b.posAtEnd}return b.localPosFromDOM(w,y)+b.posAtStart}function Te(t,e,i,r,s){let o=Math.round((r-e.left)*t.defaultCharacterWidth);if(t.lineWrapping&&i.height>1.5*t.defaultLineHeight){let e=t.viewState.heightOracle.textHeight;o+=Math.floor((s-i.top-.5*(t.defaultLineHeight-e))/e)*t.viewState.heightOracle.lineLength}let l=t.state.sliceDoc(i.from,i.to);return i.from+n.findColumn(l,o,t.state.tabSize)}function Me(t,i){let n=t.lineBlockAt(i);if(Array.isArray(n.type))for(let t of n.type)if(t.to>i||t.to==i&&(t.to==n.to||t.type==e.BlockType.Text))return t;return n}function Ne(t,e,i,n){let r=t.state.doc.lineAt(e.head),s=t.bidiSpans(r),o=t.textDirectionAt(r.from);for(let l=e,a=null;;){let e=Bt(r,s,o,l,i),h=It;if(!e){if(r.number==(i?t.state.doc.lines:1))return l;h="\n",r=t.state.doc.line(r.number+(i?1:-1)),s=t.bidiSpans(r),e=t.visualLineSide(r,!i)}if(a){if(!a(h))return l}else{if(!n)return e;a=n(h)}l=e}}function Pe(t,e,i){for(;;){let n=0;for(let r of t)r.between(e-1,e+1,((t,r,s)=>{if(e>t&&e<r){let s=n||i||(e-t<r-e?-1:1);e=s<0?t:r,n=s}}));if(!n)return e}}function Oe(t,e,i){let r=Pe(t.state.facet(le).map((e=>e(t))),i.from,e.head>i.from?-1:1);return r==i.from?i:n.EditorSelection.cursor(r,r<i.from?1:-1)}class De{setSelectionOrigin(t){this.lastSelectionOrigin=t,this.lastSelectionTime=Date.now()}constructor(t){this.view=t,this.lastKeyCode=0,this.lastKeyTime=0,this.lastTouchTime=0,this.lastFocusTime=0,this.lastScrollTop=0,this.lastScrollLeft=0,this.pendingIOSKey=void 0,this.tabFocusMode=-1,this.lastSelectionOrigin=null,this.lastSelectionTime=0,this.lastContextMenu=0,this.scrollHandlers=[],this.handlers=Object.create(null),this.composing=-1,this.compositionFirstChange=null,this.compositionEndedAt=0,this.compositionPendingKey=!1,this.compositionPendingChange=!1,this.mouseSelection=null,this.draggedContent=null,this.handleEvent=this.handleEvent.bind(this),this.notifiedFocused=t.hasFocus,K.safari&&t.contentDOM.addEventListener("input",(()=>null)),K.gecko&&function(t){si.has(t)||(si.add(t),t.addEventListener("copy",(()=>{})),t.addEventListener("cut",(()=>{})))}(t.contentDOM.ownerDocument)}handleEvent(t){(function(t,e){if(!e.bubbles)return!0;if(e.defaultPrevented)return!1;for(let i,n=e.target;n!=t.contentDOM;n=n.parentNode)if(!n||11==n.nodeType||(i=P.get(n))&&i.ignoreEvent(e))return!1;return!0})(this.view,t)&&!this.ignoreDuringComposition(t)&&("keydown"==t.type&&this.keydown(t)||this.runHandlers(t.type,t))}runHandlers(t,e){let i=this.handlers[t];if(i){for(let t of i.observers)t(this.view,e);for(let t of i.handlers){if(e.defaultPrevented)break;if(t(this.view,e)){e.preventDefault();break}}}}ensureHandlers(t){let e=Re(t),i=this.handlers,n=this.view.contentDOM;for(let t in e)if("scroll"!=t){let r=!e[t].handlers.length,s=i[t];s&&r!=!s.handlers.length&&(n.removeEventListener(t,this.handleEvent),s=null),s||n.addEventListener(t,this.handleEvent,{passive:r})}for(let t in i)"scroll"==t||e[t]||n.removeEventListener(t,this.handleEvent);this.handlers=e}keydown(t){if(this.lastKeyCode=t.keyCode,this.lastKeyTime=Date.now(),9==t.keyCode&&this.tabFocusMode>-1&&(!this.tabFocusMode||Date.now()<=this.tabFocusMode))return!0;if(this.tabFocusMode>0&&27!=t.keyCode&&Fe.indexOf(t.keyCode)<0&&(this.tabFocusMode=-1),K.android&&K.chrome&&!t.synthetic&&(13==t.keyCode||8==t.keyCode))return this.view.observer.delayAndroidKey(t.key,t.keyCode),!0;let e;return!K.ios||t.synthetic||t.altKey||t.metaKey||!((e=Ie.find((e=>e.keyCode==t.keyCode)))&&!t.ctrlKey||Be.indexOf(t.key)>-1&&t.ctrlKey&&!t.shiftKey)?(229!=t.keyCode&&this.view.observer.forceFlush(),!1):(this.pendingIOSKey=e||t,setTimeout((()=>this.flushIOSKey()),250),!0)}flushIOSKey(t){let e=this.pendingIOSKey;return!!e&&!("Enter"==e.key&&t&&t.from<t.to&&/^\S+$/.test(t.insert.toString()))&&(this.pendingIOSKey=void 0,C(this.view.contentDOM,e.key,e.keyCode,e instanceof KeyboardEvent?e:void 0))}ignoreDuringComposition(t){return!!/^key/.test(t.type)&&(this.composing>0||!!(K.safari&&!K.ios&&this.compositionPendingKey&&Date.now()-this.compositionEndedAt<100)&&(this.compositionPendingKey=!1,!0))}startMouseSelection(t){this.mouseSelection&&this.mouseSelection.destroy(),this.mouseSelection=t}update(t){this.view.observer.update(t),this.mouseSelection&&this.mouseSelection.update(t),this.draggedContent&&t.docChanged&&(this.draggedContent=this.draggedContent.map(t.changes)),t.transactions.length&&(this.lastKeyCode=this.lastSelectionTime=0)}destroy(){this.mouseSelection&&this.mouseSelection.destroy()}}function Le(t,e){return(i,n)=>{try{return e.call(t,n,i)}catch(t){Xt(i.state,t)}}}function Re(t){let e=Object.create(null);function i(t){return e[t]||(e[t]={observers:[],handlers:[]})}for(let e of t){let t=e.spec;if(t&&t.domEventHandlers)for(let n in t.domEventHandlers){let r=t.domEventHandlers[n];r&&i(n).handlers.push(Le(e.value,r))}if(t&&t.domEventObservers)for(let n in t.domEventObservers){let r=t.domEventObservers[n];r&&i(n).observers.push(Le(e.value,r))}}for(let t in Ve)i(t).handlers.push(Ve[t]);for(let t in He)i(t).observers.push(He[t]);return e}const Ie=[{key:"Backspace",keyCode:8,inputType:"deleteContentBackward"},{key:"Enter",keyCode:13,inputType:"insertParagraph"},{key:"Enter",keyCode:13,inputType:"insertLineBreak"},{key:"Delete",keyCode:46,inputType:"deleteContentForward"}],Be="dthko",Fe=[16,17,18,20,91,92,224,225];function _e(t){return.7*Math.max(0,t)+8}class qe{constructor(t,e,i,r){this.view=t,this.startEvent=e,this.style=i,this.mustSelect=r,this.scrollSpeed={x:0,y:0},this.scrolling=-1,this.lastEvent=e,this.scrollParent=function(t){let e=t.ownerDocument;for(let i=t.parentNode;i&&i!=e.body;)if(1==i.nodeType){if(i.scrollHeight>i.clientHeight||i.scrollWidth>i.clientWidth)return i;i=i.assignedSlot||i.parentNode}else{if(11!=i.nodeType)break;i=i.host}return null}(t.contentDOM),this.atoms=t.state.facet(le).map((e=>e(t)));let s=t.contentDOM.ownerDocument;s.addEventListener("mousemove",this.move=this.move.bind(this)),s.addEventListener("mouseup",this.up=this.up.bind(this)),this.extend=e.shiftKey,this.multiple=t.state.facet(n.EditorState.allowMultipleSelections)&&function(t,e){let i=t.state.facet(_t);return i.length?i[0](e):K.mac?e.metaKey:e.ctrlKey}(t,e),this.dragging=!(!function(t,e){let{main:i}=t.state.selection;if(i.empty)return!1;let n=o(t.root);if(!n||0==n.rangeCount)return!0;let r=n.getRangeAt(0).getClientRects();for(let t=0;t<r.length;t++){let i=r[t];if(i.left<=e.clientX&&i.right>=e.clientX&&i.top<=e.clientY&&i.bottom>=e.clientY)return!0}return!1}(t,e)||1!=Qe(e))&&null}start(t){!1===this.dragging&&this.select(t)}move(t){var e,i,n;if(0==t.buttons)return this.destroy();if(this.dragging||null==this.dragging&&(i=this.startEvent,n=t,Math.max(Math.abs(i.clientX-n.clientX),Math.abs(i.clientY-n.clientY))<10))return;this.select(this.lastEvent=t);let r=0,s=0,o=(null===(e=this.scrollParent)||void 0===e?void 0:e.getBoundingClientRect())||{left:0,top:0,right:this.view.win.innerWidth,bottom:this.view.win.innerHeight},l=ue(this.view);t.clientX-l.left<=o.left+6?r=-_e(o.left-t.clientX):t.clientX+l.right>=o.right-6&&(r=_e(t.clientX-o.right)),t.clientY-l.top<=o.top+6?s=-_e(o.top-t.clientY):t.clientY+l.bottom>=o.bottom-6&&(s=_e(t.clientY-o.bottom)),this.setScrollSpeed(r,s)}up(t){null==this.dragging&&this.select(this.lastEvent),this.dragging||t.preventDefault(),this.destroy()}destroy(){this.setScrollSpeed(0,0);let t=this.view.contentDOM.ownerDocument;t.removeEventListener("mousemove",this.move),t.removeEventListener("mouseup",this.up),this.view.inputState.mouseSelection=this.view.inputState.draggedContent=null}setScrollSpeed(t,e){this.scrollSpeed={x:t,y:e},t||e?this.scrolling<0&&(this.scrolling=setInterval((()=>this.scroll()),50)):this.scrolling>-1&&(clearInterval(this.scrolling),this.scrolling=-1)}scroll(){this.scrollParent?(this.scrollParent.scrollLeft+=this.scrollSpeed.x,this.scrollParent.scrollTop+=this.scrollSpeed.y):this.view.win.scrollBy(this.scrollSpeed.x,this.scrollSpeed.y),!1===this.dragging&&this.select(this.lastEvent)}skipAtoms(t){let e=null;for(let i=0;i<t.ranges.length;i++){let r=t.ranges[i],s=null;if(r.empty){let t=Pe(this.atoms,r.from,0);t!=r.from&&(s=n.EditorSelection.cursor(t,-1))}else{let t=Pe(this.atoms,r.from,-1),e=Pe(this.atoms,r.to,1);t==r.from&&e==r.to||(s=n.EditorSelection.range(r.from==r.anchor?t:e,r.from==r.head?t:e))}s&&(e||(e=t.ranges.slice()),e[i]=s)}return e?n.EditorSelection.create(e,t.mainIndex):t}select(t){let{view:e}=this,i=this.skipAtoms(this.style.get(t,this.extend,this.multiple));!this.mustSelect&&i.eq(e.state.selection,!1===this.dragging)||this.view.dispatch({selection:i,userEvent:"select.pointer"}),this.mustSelect=!1}update(t){t.transactions.some((t=>t.isUserEvent("input.type")))?this.destroy():this.style.update(t)&&setTimeout((()=>this.select(this.lastEvent)),20)}}const Ve=Object.create(null),He=Object.create(null),We=K.ie&&K.ie_version<15||K.ios&&K.webkit_version<604;function ze(t,e){let i,{state:r}=t,s=1,o=r.toText(e),l=o.lines==r.selection.ranges.length;if(null!=ei&&r.selection.ranges.every((t=>t.empty))&&ei==o.toString()){let t=-1;i=r.changeByRange((i=>{let a=r.doc.lineAt(i.from);if(a.from==t)return{range:i};t=a.from;let h=r.toText((l?o.line(s++).text:e)+r.lineBreak);return{changes:{from:a.from,insert:h},range:n.EditorSelection.cursor(i.from+h.length)}}))}else i=l?r.changeByRange((t=>{let e=o.line(s++);return{changes:{from:t.from,to:t.to,insert:e.text},range:n.EditorSelection.cursor(t.from+e.length)}})):r.replaceSelection(o);t.dispatch(i,{userEvent:"input.paste",scrollIntoView:!0})}function je(t,e,i,r){if(1==r)return n.EditorSelection.cursor(e,i);if(2==r)return function(t,e,i=1){let r=t.charCategorizer(e),s=t.doc.lineAt(e),o=e-s.from;if(0==s.length)return n.EditorSelection.cursor(e);0==o?i=1:o==s.length&&(i=-1);let l=o,a=o;i<0?l=n.findClusterBreak(s.text,o,!1):a=n.findClusterBreak(s.text,o);let h=r(s.text.slice(l,a));for(;l>0;){let t=n.findClusterBreak(s.text,l,!1);if(r(s.text.slice(t,l))!=h)break;l=t}for(;a<s.length;){let t=n.findClusterBreak(s.text,a);if(r(s.text.slice(a,t))!=h)break;a=t}return n.EditorSelection.range(l+s.from,a+s.from)}(t.state,e,i);{let i=st.find(t.docView,e),r=t.state.doc.lineAt(i?i.posAtEnd:e),s=i?i.posAtStart:r.from,o=i?i.posAtEnd:r.to;return o<t.state.doc.length&&o==r.to&&o++,n.EditorSelection.range(s,o)}}He.scroll=t=>{t.inputState.lastScrollTop=t.scrollDOM.scrollTop,t.inputState.lastScrollLeft=t.scrollDOM.scrollLeft},Ve.keydown=(t,e)=>(t.inputState.setSelectionOrigin("select"),27==e.keyCode&&0!=t.inputState.tabFocusMode&&(t.inputState.tabFocusMode=Date.now()+2e3),!1),He.touchstart=(t,e)=>{t.inputState.lastTouchTime=Date.now(),t.inputState.setSelectionOrigin("select.pointer")},He.touchmove=t=>{t.inputState.setSelectionOrigin("select.pointer")},Ve.mousedown=(t,e)=>{if(t.observer.flush(),t.inputState.lastTouchTime>Date.now()-2e3)return!1;let i=null;for(let n of t.state.facet(Vt))if(i=n(t,e),i)break;if(i||0!=e.button||(i=function(t,e){let i=$e(t,e),r=Qe(e),s=t.state.selection;return{update(t){t.docChanged&&(i.pos=t.changes.mapPos(i.pos),s=s.map(t.changes))},get(e,o,l){let a,h=$e(t,e),c=je(t,h.pos,h.bias,r);if(i.pos!=h.pos&&!o){let e=je(t,i.pos,i.bias,r),s=Math.min(e.from,c.from),o=Math.max(e.to,c.to);c=s<c.from?n.EditorSelection.range(s,o):n.EditorSelection.range(o,s)}return o?s.replaceRange(s.main.extend(c.from,c.to)):l&&1==r&&s.ranges.length>1&&(a=function(t,e){for(let i=0;i<t.ranges.length;i++){let{from:r,to:s}=t.ranges[i];if(r<=e&&s>=e)return n.EditorSelection.create(t.ranges.slice(0,i).concat(t.ranges.slice(i+1)),t.mainIndex==i?0:t.mainIndex-(t.mainIndex>i?1:0))}return null}(s,h.pos))?a:l?s.addRange(c):n.EditorSelection.create([c])}}}(t,e)),i){let n=!t.hasFocus;t.inputState.startMouseSelection(new qe(t,e,i,n)),n&&t.observer.ignore((()=>{S(t.contentDOM);let e=t.root.activeElement;e&&!e.contains(t.contentDOM)&&e.blur()}));let r=t.inputState.mouseSelection;if(r)return r.start(e),!1===r.dragging}return!1};let Ue=(t,e)=>t>=e.top&&t<=e.bottom,Ke=(t,e,i)=>Ue(e,i)&&t>=i.left&&t<=i.right;function Ge(t,e,i,n){let r=st.find(t.docView,e);if(!r)return 1;let s=e-r.posAtStart;if(0==s)return 1;if(s==r.length)return-1;let o=r.coordsAt(s,-1);if(o&&Ke(i,n,o))return-1;let l=r.coordsAt(s,1);return l&&Ke(i,n,l)?1:o&&Ue(n,o)?-1:1}function $e(t,e){let i=t.posAtCoords({x:e.clientX,y:e.clientY},!1);return{pos:i,bias:Ge(t,i,e.clientX,e.clientY)}}const Ye=K.ie&&K.ie_version<=11;let Je=null,Xe=0,Ze=0;function Qe(t){if(!Ye)return t.detail;let e=Je,i=Ze;return Je=t,Ze=Date.now(),Xe=!e||i>Date.now()-400&&Math.abs(e.clientX-t.clientX)<2&&Math.abs(e.clientY-t.clientY)<2?(Xe+1)%3:1}function ti(t,e,i,n){if(!i)return;let r=t.posAtCoords({x:e.clientX,y:e.clientY},!1),{draggedContent:s}=t.inputState,o=n&&s&&function(t,e){let i=t.state.facet(qt);return i.length?i[0](e):K.mac?!e.altKey:!e.ctrlKey}(t,e)?{from:s.from,to:s.to}:null,l={from:r,insert:i},a=t.state.changes(o?[o,l]:l);t.focus(),t.dispatch({changes:a,selection:{anchor:a.mapPos(r,-1),head:a.mapPos(r,1)},userEvent:o?"move.drop":"input.drop"}),t.inputState.draggedContent=null}Ve.dragstart=(t,e)=>{let{selection:{main:i}}=t.state;if(e.target.draggable){let r=t.docView.nearest(e.target);if(r&&r.isWidget){let t=r.posAtStart,e=t+r.length;(t>=i.to||e<=i.from)&&(i=n.EditorSelection.range(t,e))}}let{inputState:r}=t;return r.mouseSelection&&(r.mouseSelection.dragging=!0),r.draggedContent=i,e.dataTransfer&&(e.dataTransfer.setData("Text",t.state.sliceDoc(i.from,i.to)),e.dataTransfer.effectAllowed="copyMove"),!1},Ve.dragend=t=>(t.inputState.draggedContent=null,!1),Ve.drop=(t,e)=>{if(!e.dataTransfer)return!1;if(t.state.readOnly)return!0;let i=e.dataTransfer.files;if(i&&i.length){let n=Array(i.length),r=0,s=()=>{++r==i.length&&ti(t,e,n.filter((t=>null!=t)).join(t.state.lineBreak),!1)};for(let t=0;t<i.length;t++){let e=new FileReader;e.onerror=s,e.onload=()=>{/[\x00-\x08\x0e-\x1f]{2}/.test(e.result)||(n[t]=e.result),s()},e.readAsText(i[t])}return!0}{let i=e.dataTransfer.getData("Text");if(i)return ti(t,e,i,!0),!0}return!1},Ve.paste=(t,e)=>{if(t.state.readOnly)return!0;t.observer.flush();let i=We?null:e.clipboardData;return i?(ze(t,i.getData("text/plain")||i.getData("text/uri-list")),!0):(function(t){let e=t.dom.parentNode;if(!e)return;let i=e.appendChild(document.createElement("textarea"));i.style.cssText="position: fixed; left: -10000px; top: 10px",i.focus(),setTimeout((()=>{t.focus(),i.remove(),ze(t,i.value)}),50)}(t),!1)};let ei=null;Ve.copy=Ve.cut=(t,e)=>{let{text:i,ranges:n,linewise:r}=function(t){let e=[],i=[],n=!1;for(let n of t.selection.ranges)n.empty||(e.push(t.sliceDoc(n.from,n.to)),i.push(n));if(!e.length){let r=-1;for(let{from:n}of t.selection.ranges){let s=t.doc.lineAt(n);s.number>r&&(e.push(s.text),i.push({from:s.from,to:Math.min(t.doc.length,s.to+1)})),r=s.number}n=!0}return{text:e.join(t.lineBreak),ranges:i,linewise:n}}(t.state);if(!i&&!r)return!1;ei=r?i:null,"cut"!=e.type||t.state.readOnly||t.dispatch({changes:n,scrollIntoView:!0,userEvent:"delete.cut"});let s=We?null:e.clipboardData;return s?(s.clearData(),s.setData("text/plain",i),!0):(function(t,e){let i=t.dom.parentNode;if(!i)return;let n=i.appendChild(document.createElement("textarea"));n.style.cssText="position: fixed; left: -10000px; top: 10px",n.value=e,n.focus(),n.selectionEnd=e.length,n.selectionStart=0,setTimeout((()=>{n.remove(),t.focus()}),50)}(t,i),!1)};const ii=n.Annotation.define();function ni(t,e){let i=[];for(let n of t.facet(jt)){let r=n(t,e);r&&i.push(r)}return i?t.update({effects:i,annotations:ii.of(!0)}):null}function ri(t){setTimeout((()=>{let e=t.hasFocus;if(e!=t.inputState.notifiedFocused){let i=ni(t.state,e);i?t.dispatch(i):t.update([])}}),10)}He.focus=t=>{t.inputState.lastFocusTime=Date.now(),t.scrollDOM.scrollTop||!t.inputState.lastScrollTop&&!t.inputState.lastScrollLeft||(t.scrollDOM.scrollTop=t.inputState.lastScrollTop,t.scrollDOM.scrollLeft=t.inputState.lastScrollLeft),ri(t)},He.blur=t=>{t.observer.clearSelectionRange(),ri(t)},He.compositionstart=He.compositionupdate=t=>{t.observer.editContext||(null==t.inputState.compositionFirstChange&&(t.inputState.compositionFirstChange=!0),t.inputState.composing<0&&(t.inputState.composing=0))},He.compositionend=t=>{t.observer.editContext||(t.inputState.composing=-1,t.inputState.compositionEndedAt=Date.now(),t.inputState.compositionPendingKey=!0,t.inputState.compositionPendingChange=t.observer.pendingRecords().length>0,t.inputState.compositionFirstChange=null,K.chrome&&K.android?t.observer.flushSoon():t.inputState.compositionPendingChange?Promise.resolve().then((()=>t.observer.flush())):setTimeout((()=>{t.inputState.composing<0&&t.docView.hasComposition&&t.update([])}),50))},He.contextmenu=t=>{t.inputState.lastContextMenu=Date.now()},Ve.beforeinput=(t,e)=>{var i;let n;if(K.chrome&&K.android&&(n=Ie.find((t=>t.inputType==e.inputType)))&&(t.observer.delayAndroidKey(n.key,n.keyCode),"Backspace"==n.key||"Delete"==n.key)){let e=(null===(i=window.visualViewport)||void 0===i?void 0:i.height)||0;setTimeout((()=>{var i;((null===(i=window.visualViewport)||void 0===i?void 0:i.height)||0)>e+10&&t.hasFocus&&(t.contentDOM.blur(),t.focus())}),100)}return K.ios&&"deleteContentForward"==e.inputType&&t.observer.flushSoon(),K.safari&&"insertText"==e.inputType&&t.inputState.composing>=0&&setTimeout((()=>He.compositionend(t,e)),20),!1};const si=new Set,oi=["pre-wrap","normal","pre-line","break-spaces"];class li{constructor(t){this.lineWrapping=t,this.doc=n.Text.empty,this.heightSamples={},this.lineHeight=14,this.charWidth=7,this.textHeight=14,this.lineLength=30,this.heightChanged=!1}heightForGap(t,e){let i=this.doc.lineAt(e).number-this.doc.lineAt(t).number+1;return this.lineWrapping&&(i+=Math.max(0,Math.ceil((e-t-i*this.lineLength*.5)/this.lineLength))),this.lineHeight*i}heightForLine(t){return this.lineWrapping?(1+Math.max(0,Math.ceil((t-this.lineLength)/(this.lineLength-5))))*this.lineHeight:this.lineHeight}setDoc(t){return this.doc=t,this}mustRefreshForWrapping(t){return oi.indexOf(t)>-1!=this.lineWrapping}mustRefreshForHeights(t){let e=!1;for(let i=0;i<t.length;i++){let n=t[i];n<0?i++:this.heightSamples[Math.floor(10*n)]||(e=!0,this.heightSamples[Math.floor(10*n)]=!0)}return e}refresh(t,e,i,n,r,s){let o=oi.indexOf(t)>-1,l=Math.round(e)!=Math.round(this.lineHeight)||this.lineWrapping!=o;if(this.lineWrapping=o,this.lineHeight=e,this.charWidth=i,this.textHeight=n,this.lineLength=r,l){this.heightSamples={};for(let t=0;t<s.length;t++){let e=s[t];e<0?t++:this.heightSamples[Math.floor(10*e)]=!0}}return l}}class ai{constructor(t,e){this.from=t,this.heights=e,this.index=0}get more(){return this.index<this.heights.length}}class hi{constructor(t,e,i,n,r){this.from=t,this.length=e,this.top=i,this.height=n,this._content=r}get type(){return"number"==typeof this._content?e.BlockType.Text:Array.isArray(this._content)?this._content:this._content.type}get to(){return this.from+this.length}get bottom(){return this.top+this.height}get widget(){return this._content instanceof ft?this._content.widget:null}get widgetLineBreaks(){return"number"==typeof this._content?this._content:0}join(t){let e=(Array.isArray(this._content)?this._content:[this]).concat(Array.isArray(t._content)?t._content:[t]);return new hi(this.from,this.length+t.length,this.top,this.height+t.height,e)}}var ci;!function(t){t[t.ByPos=0]="ByPos",t[t.ByHeight=1]="ByHeight",t[t.ByPosNoHeight=2]="ByPosNoHeight"}(ci||(ci={}));const ui=.001;class di{constructor(t,e,i=2){this.length=t,this.height=e,this.flags=i}get outdated(){return(2&this.flags)>0}set outdated(t){this.flags=(t?2:0)|-3&this.flags}setHeight(t,e){this.height!=e&&(Math.abs(this.height-e)>ui&&(t.heightChanged=!0),this.height=e)}replace(t,e,i){return di.of(i)}decomposeLeft(t,e){e.push(this)}decomposeRight(t,e){e.push(this)}applyChanges(t,e,i,n){let r=this,s=i.doc;for(let o=n.length-1;o>=0;o--){let{fromA:l,toA:a,fromB:h,toB:c}=n[o],u=r.lineAt(l,ci.ByPosNoHeight,i.setDoc(e),0,0),d=u.to>=a?u:r.lineAt(a,ci.ByPosNoHeight,i,0,0);for(c+=d.to-a,a=d.to;o>0&&u.from<=n[o-1].toA;)l=n[o-1].fromA,h=n[o-1].fromB,o--,l<u.from&&(u=r.lineAt(l,ci.ByPosNoHeight,i,0,0));h+=u.from-l,l=u.from;let f=wi.build(i.setDoc(s),t,h,c);r=r.replace(l,a,f)}return r.updateHeight(i,0)}static empty(){return new pi(0,0)}static of(t){if(1==t.length)return t[0];let e=0,i=t.length,n=0,r=0;for(;;)if(e==i)if(n>2*r){let r=t[e-1];r.break?t.splice(--e,1,r.left,null,r.right):t.splice(--e,1,r.left,r.right),i+=1+r.break,n-=r.size}else{if(!(r>2*n))break;{let e=t[i];e.break?t.splice(i,1,e.left,null,e.right):t.splice(i,1,e.left,e.right),i+=2+e.break,r-=e.size}}else if(n<r){let i=t[e++];i&&(n+=i.size)}else{let e=t[--i];e&&(r+=e.size)}let s=0;return null==t[e-1]?(s=1,e--):null==t[e]&&(s=1,i++),new gi(di.of(t.slice(0,e)),s,di.of(t.slice(i)))}}di.prototype.size=1;class fi extends di{constructor(t,e,i){super(t,e),this.deco=i}blockAt(t,e,i,n){return new hi(n,this.length,i,this.height,this.deco||0)}lineAt(t,e,i,n,r){return this.blockAt(0,i,n,r)}forEachLine(t,e,i,n,r,s){t<=r+this.length&&e>=r&&s(this.blockAt(0,i,n,r))}updateHeight(t,e=0,i=!1,n){return n&&n.from<=e&&n.more&&this.setHeight(t,n.heights[n.index++]),this.outdated=!1,this}toString(){return`block(${this.length})`}}class pi extends fi{constructor(t,e){super(t,e,null),this.collapsed=0,this.widgetHeight=0,this.breaks=0}blockAt(t,e,i,n){return new hi(n,this.length,i,this.height,this.breaks)}replace(t,e,i){let n=i[0];return 1==i.length&&(n instanceof pi||n instanceof mi&&4&n.flags)&&Math.abs(this.length-n.length)<10?(n instanceof mi?n=new pi(n.length,this.height):n.height=this.height,this.outdated||(n.outdated=!1),n):di.of(i)}updateHeight(t,e=0,i=!1,n){return n&&n.from<=e&&n.more?this.setHeight(t,n.heights[n.index++]):(i||this.outdated)&&this.setHeight(t,Math.max(this.widgetHeight,t.heightForLine(this.length-this.collapsed))+this.breaks*t.lineHeight),this.outdated=!1,this}toString(){return`line(${this.length}${this.collapsed?-this.collapsed:""}${this.widgetHeight?":"+this.widgetHeight:""})`}}class mi extends di{constructor(t){super(t,0)}heightMetrics(t,e){let i,n=t.doc.lineAt(e).number,r=t.doc.lineAt(e+this.length).number,s=r-n+1,o=0;if(t.lineWrapping){let e=Math.min(this.height,t.lineHeight*s);i=e/s,this.length>s+1&&(o=(this.height-e)/(this.length-s-1))}else i=this.height/s;return{firstLine:n,lastLine:r,perLine:i,perChar:o}}blockAt(t,e,i,n){let{firstLine:r,lastLine:s,perLine:o,perChar:l}=this.heightMetrics(e,n);if(e.lineWrapping){let r=n+(t<e.lineHeight?0:Math.round(Math.max(0,Math.min(1,(t-i)/this.height))*this.length)),s=e.doc.lineAt(r),a=o+s.length*l,h=Math.max(i,t-a/2);return new hi(s.from,s.length,h,a,0)}{let n=Math.max(0,Math.min(s-r,Math.floor((t-i)/o))),{from:l,length:a}=e.doc.line(r+n);return new hi(l,a,i+o*n,o,0)}}lineAt(t,e,i,n,r){if(e==ci.ByHeight)return this.blockAt(t,i,n,r);if(e==ci.ByPosNoHeight){let{from:e,to:n}=i.doc.lineAt(t);return new hi(e,n-e,0,0,0)}let{firstLine:s,perLine:o,perChar:l}=this.heightMetrics(i,r),a=i.doc.lineAt(t),h=o+a.length*l,c=a.number-s,u=n+o*c+l*(a.from-r-c);return new hi(a.from,a.length,Math.max(n,Math.min(u,n+this.height-h)),h,0)}forEachLine(t,e,i,n,r,s){t=Math.max(t,r),e=Math.min(e,r+this.length);let{firstLine:o,perLine:l,perChar:a}=this.heightMetrics(i,r);for(let h=t,c=n;h<=e;){let e=i.doc.lineAt(h);if(h==t){let i=e.number-o;c+=l*i+a*(t-r-i)}let n=l+a*e.length;s(new hi(e.from,e.length,c,n,0)),c+=n,h=e.to+1}}replace(t,e,i){let n=this.length-e;if(n>0){let t=i[i.length-1];t instanceof mi?i[i.length-1]=new mi(t.length+n):i.push(null,new mi(n-1))}if(t>0){let e=i[0];e instanceof mi?i[0]=new mi(t+e.length):i.unshift(new mi(t-1),null)}return di.of(i)}decomposeLeft(t,e){e.push(new mi(t-1),null)}decomposeRight(t,e){e.push(null,new mi(this.length-t-1))}updateHeight(t,e=0,i=!1,n){let r=e+this.length;if(n&&n.from<=e+this.length&&n.more){let i=[],s=Math.max(e,n.from),o=-1;for(n.from>e&&i.push(new mi(n.from-e-1).updateHeight(t,e));s<=r&&n.more;){let e=t.doc.lineAt(s).length;i.length&&i.push(null);let r=n.heights[n.index++];-1==o?o=r:Math.abs(r-o)>=ui&&(o=-2);let l=new pi(e,r);l.outdated=!1,i.push(l),s+=e+1}s<=r&&i.push(null,new mi(r-s).updateHeight(t,s));let l=di.of(i);return(o<0||Math.abs(l.height-this.height)>=ui||Math.abs(o-this.heightMetrics(t,e).perLine)>=ui)&&(t.heightChanged=!0),l}return(i||this.outdated)&&(this.setHeight(t,t.heightForGap(e,e+this.length)),this.outdated=!1),this}toString(){return`gap(${this.length})`}}class gi extends di{constructor(t,e,i){super(t.length+e+i.length,t.height+i.height,e|(t.outdated||i.outdated?2:0)),this.left=t,this.right=i,this.size=t.size+i.size}get break(){return 1&this.flags}blockAt(t,e,i,n){let r=i+this.left.height;return t<r?this.left.blockAt(t,e,i,n):this.right.blockAt(t,e,r,n+this.left.length+this.break)}lineAt(t,e,i,n,r){let s=n+this.left.height,o=r+this.left.length+this.break,l=e==ci.ByHeight?t<s:t<o,a=l?this.left.lineAt(t,e,i,n,r):this.right.lineAt(t,e,i,s,o);if(this.break||(l?a.to<o:a.from>o))return a;let h=e==ci.ByPosNoHeight?ci.ByPosNoHeight:ci.ByPos;return l?a.join(this.right.lineAt(o,h,i,s,o)):this.left.lineAt(o,h,i,n,r).join(a)}forEachLine(t,e,i,n,r,s){let o=n+this.left.height,l=r+this.left.length+this.break;if(this.break)t<l&&this.left.forEachLine(t,e,i,n,r,s),e>=l&&this.right.forEachLine(t,e,i,o,l,s);else{let a=this.lineAt(l,ci.ByPos,i,n,r);t<a.from&&this.left.forEachLine(t,a.from-1,i,n,r,s),a.to>=t&&a.from<=e&&s(a),e>a.to&&this.right.forEachLine(a.to+1,e,i,o,l,s)}}replace(t,e,i){let n=this.left.length+this.break;if(e<n)return this.balanced(this.left.replace(t,e,i),this.right);if(t>this.left.length)return this.balanced(this.left,this.right.replace(t-n,e-n,i));let r=[];t>0&&this.decomposeLeft(t,r);let s=r.length;for(let t of i)r.push(t);if(t>0&&vi(r,s-1),e<this.length){let t=r.length;this.decomposeRight(e,r),vi(r,t)}return di.of(r)}decomposeLeft(t,e){let i=this.left.length;if(t<=i)return this.left.decomposeLeft(t,e);e.push(this.left),this.break&&(i++,t>=i&&e.push(null)),t>i&&this.right.decomposeLeft(t-i,e)}decomposeRight(t,e){let i=this.left.length,n=i+this.break;if(t>=n)return this.right.decomposeRight(t-n,e);t<i&&this.left.decomposeRight(t,e),this.break&&t<n&&e.push(null),e.push(this.right)}balanced(t,e){return t.size>2*e.size||e.size>2*t.size?di.of(this.break?[t,null,e]:[t,e]):(this.left=t,this.right=e,this.height=t.height+e.height,this.outdated=t.outdated||e.outdated,this.size=t.size+e.size,this.length=t.length+this.break+e.length,this)}updateHeight(t,e=0,i=!1,n){let{left:r,right:s}=this,o=e+r.length+this.break,l=null;return n&&n.from<=e+r.length&&n.more?l=r=r.updateHeight(t,e,i,n):r.updateHeight(t,e,i),n&&n.from<=o+s.length&&n.more?l=s=s.updateHeight(t,o,i,n):s.updateHeight(t,o,i),l?this.balanced(r,s):(this.height=this.left.height+this.right.height,this.outdated=!1,this)}toString(){return this.left+(this.break?" ":"-")+this.right}}function vi(t,e){let i,n;null==t[e]&&(i=t[e-1])instanceof mi&&(n=t[e+1])instanceof mi&&t.splice(e-1,3,new mi(i.length+1+n.length))}class wi{constructor(t,e){this.pos=t,this.oracle=e,this.nodes=[],this.lineStart=-1,this.lineEnd=-1,this.covering=null,this.writtenTo=t}get isCovered(){return this.covering&&this.nodes[this.nodes.length-1]==this.covering}span(t,e){if(this.lineStart>-1){let t=Math.min(e,this.lineEnd),i=this.nodes[this.nodes.length-1];i instanceof pi?i.length+=t-this.pos:(t>this.pos||!this.isCovered)&&this.nodes.push(new pi(t-this.pos,-1)),this.writtenTo=t,e>t&&(this.nodes.push(null),this.writtenTo++,this.lineStart=-1)}this.pos=e}point(t,e,i){if(t<e||i.heightRelevant){let n=i.widget?i.widget.estimatedHeight:0,r=i.widget?i.widget.lineBreaks:0;n<0&&(n=this.oracle.lineHeight);let s=e-t;i.block?this.addBlock(new fi(s,n,i)):(s||r||n>=5)&&this.addLineDeco(n,r,s)}else e>t&&this.span(t,e);this.lineEnd>-1&&this.lineEnd<this.pos&&(this.lineEnd=this.oracle.doc.lineAt(this.pos).to)}enterLine(){if(this.lineStart>-1)return;let{from:t,to:e}=this.oracle.doc.lineAt(this.pos);this.lineStart=t,this.lineEnd=e,this.writtenTo<t&&((this.writtenTo<t-1||null==this.nodes[this.nodes.length-1])&&this.nodes.push(this.blankContent(this.writtenTo,t-1)),this.nodes.push(null)),this.pos>t&&this.nodes.push(new pi(this.pos-t,-1)),this.writtenTo=this.pos}blankContent(t,e){let i=new mi(e-t);return this.oracle.doc.lineAt(t).to==e&&(i.flags|=4),i}ensureLine(){this.enterLine();let t=this.nodes.length?this.nodes[this.nodes.length-1]:null;if(t instanceof pi)return t;let e=new pi(0,-1);return this.nodes.push(e),e}addBlock(t){this.enterLine();let e=t.deco;e&&e.startSide>0&&!this.isCovered&&this.ensureLine(),this.nodes.push(t),this.writtenTo=this.pos=this.pos+t.length,e&&e.endSide>0&&(this.covering=t)}addLineDeco(t,e,i){let n=this.ensureLine();n.length+=i,n.collapsed+=i,n.widgetHeight=Math.max(n.widgetHeight,t),n.breaks+=e,this.writtenTo=this.pos=this.pos+i}finish(t){let e=0==this.nodes.length?null:this.nodes[this.nodes.length-1];!(this.lineStart>-1)||e instanceof pi||this.isCovered?(this.writtenTo<this.pos||null==e)&&this.nodes.push(this.blankContent(this.writtenTo,this.pos)):this.nodes.push(new pi(0,-1));let i=t;for(let t of this.nodes)t instanceof pi&&t.updateHeight(this.oracle,i),i+=t?t.length:1;return this.nodes}static build(t,e,i,r){let s=new wi(i,t);return n.RangeSet.spans(e,i,r,s,0),s.finish(i)}}class yi{constructor(){this.changes=[]}compareRange(){}comparePoint(t,e,i,n){(t<e||i&&i.heightRelevant||n&&n.heightRelevant)&&mt(t,e,this.changes,5)}}function bi(t,e){let i=t.getBoundingClientRect(),n=t.ownerDocument,r=n.defaultView||window,s=Math.max(0,i.left),o=Math.min(r.innerWidth,i.right),l=Math.max(0,i.top),a=Math.min(r.innerHeight,i.bottom);for(let e=t.parentNode;e&&e!=n.body;)if(1==e.nodeType){let i=e,n=window.getComputedStyle(i);if((i.scrollHeight>i.clientHeight||i.scrollWidth>i.clientWidth)&&"visible"!=n.overflow){let n=i.getBoundingClientRect();s=Math.max(s,n.left),o=Math.min(o,n.right),l=Math.max(l,n.top),a=e==t.parentNode?n.bottom:Math.min(a,n.bottom)}e="absolute"==n.position||"fixed"==n.position?i.offsetParent:i.parentNode}else{if(11!=e.nodeType)break;e=e.host}return{left:s-i.left,right:Math.max(s,o)-i.left,top:l-(i.top+e),bottom:Math.max(l,a)-(i.top+e)}}function Si(t,e){let i=t.getBoundingClientRect();return{left:0,right:i.right-i.left,top:e,bottom:i.bottom-(i.top+e)}}class xi{constructor(t,e,i){this.from=t,this.to=e,this.size=i}static same(t,e){if(t.length!=e.length)return!1;for(let i=0;i<t.length;i++){let n=t[i],r=e[i];if(n.from!=r.from||n.to!=r.to||n.size!=r.size)return!1}return!0}draw(t,e){return ct.replace({widget:new Ci(this.size*(e?t.scaleY:t.scaleX),e)}).range(this.from,this.to)}}class Ci extends lt{constructor(t,e){super(),this.size=t,this.vertical=e}eq(t){return t.size==this.size&&t.vertical==this.vertical}toDOM(){let t=document.createElement("div");return this.vertical?t.style.height=this.size+"px":(t.style.width=this.size+"px",t.style.height="2px",t.style.display="inline-block"),t}get estimatedHeight(){return this.vertical?this.size:-1}}class ki{constructor(t){this.state=t,this.pixelViewport={left:0,right:window.innerWidth,top:0,bottom:0},this.inView=!0,this.paddingTop=0,this.paddingBottom=0,this.contentDOMWidth=0,this.contentDOMHeight=0,this.editorHeight=0,this.editorWidth=0,this.scrollTop=0,this.scrolledToBottom=!1,this.scaleX=1,this.scaleY=1,this.scrollAnchorPos=0,this.scrollAnchorHeight=-1,this.scaler=Mi,this.scrollTarget=null,this.printing=!1,this.mustMeasureContent=!0,this.defaultTextDirection=e.Direction.LTR,this.visibleRanges=[],this.mustEnforceCursorAssoc=!1;let i=t.facet(re).some((t=>"function"!=typeof t&&"cm-lineWrapping"==t.class));this.heightOracle=new li(i),this.stateDeco=t.facet(se).filter((t=>"function"!=typeof t)),this.heightMap=di.empty().applyChanges(this.stateDeco,n.Text.empty,this.heightOracle.setDoc(t.doc),[new fe(0,0,0,t.doc.length)]);for(let t=0;t<2&&(this.viewport=this.getViewport(0,null),this.updateForViewport());t++);this.updateViewportLines(),this.lineGaps=this.ensureLineGaps([]),this.lineGapDeco=ct.set(this.lineGaps.map((t=>t.draw(this,!1)))),this.computeVisibleRanges()}updateForViewport(){let t=[this.viewport],{main:e}=this.state.selection;for(let i=0;i<=1;i++){let n=i?e.head:e.anchor;if(!t.some((({from:t,to:e})=>n>=t&&n<=e))){let{from:e,to:i}=this.lineBlockAt(n);t.push(new Ai(e,i))}}return this.viewports=t.sort(((t,e)=>t.from-e.from)),this.updateScaler()}updateScaler(){let t=this.scaler;return this.scaler=this.heightMap.height<=7e6?Mi:new Ni(this.heightOracle,this.heightMap,this.viewports),t.eq(this.scaler)?0:2}updateViewportLines(){this.viewportLines=[],this.heightMap.forEachLine(this.viewport.from,this.viewport.to,this.heightOracle.setDoc(this.state.doc),0,0,(t=>{this.viewportLines.push(Pi(t,this.scaler))}))}update(t,e=null){this.state=t.state;let i=this.stateDeco;this.stateDeco=this.state.facet(se).filter((t=>"function"!=typeof t));let r=t.changedRanges,s=fe.extendWithRanges(r,function(t,e,i){let r=new yi;return n.RangeSet.compare(t,e,i,r,0),r.changes}(i,this.stateDeco,t?t.changes:n.ChangeSet.empty(this.state.doc.length))),o=this.heightMap.height,l=this.scrolledToBottom?null:this.scrollAnchorAt(this.scrollTop);this.heightMap=this.heightMap.applyChanges(this.stateDeco,t.startState.doc,this.heightOracle.setDoc(this.state.doc),s),this.heightMap.height!=o&&(t.flags|=2),l?(this.scrollAnchorPos=t.changes.mapPos(l.from,-1),this.scrollAnchorHeight=l.top):(this.scrollAnchorPos=-1,this.scrollAnchorHeight=this.heightMap.height);let a=s.length?this.mapViewport(this.viewport,t.changes):this.viewport;(e&&(e.range.head<a.from||e.range.head>a.to)||!this.viewportIsAppropriate(a))&&(a=this.getViewport(0,e));let h=a.from!=this.viewport.from||a.to!=this.viewport.to;this.viewport=a,t.flags|=this.updateForViewport(),(h||!t.changes.empty||2&t.flags)&&this.updateViewportLines(),(this.lineGaps.length||this.viewport.to-this.viewport.from>4e3)&&this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps,t.changes))),t.flags|=this.computeVisibleRanges(),e&&(this.scrollTarget=e),!this.mustEnforceCursorAssoc&&t.selectionSet&&t.view.lineWrapping&&t.state.selection.main.empty&&t.state.selection.main.assoc&&!t.state.facet(Kt)&&(this.mustEnforceCursorAssoc=!0)}measure(t){let i=t.contentDOM,r=window.getComputedStyle(i),s=this.heightOracle,o=r.whiteSpace;this.defaultTextDirection="rtl"==r.direction?e.Direction.RTL:e.Direction.LTR;let l=this.heightOracle.mustRefreshForWrapping(o),a=i.getBoundingClientRect(),h=l||this.mustMeasureContent||this.contentDOMHeight!=a.height;this.contentDOMHeight=a.height,this.mustMeasureContent=!1;let c=0,u=0;if(a.width&&a.height){let{scaleX:t,scaleY:e}=v(i,a);(t>.005&&Math.abs(this.scaleX-t)>.005||e>.005&&Math.abs(this.scaleY-e)>.005)&&(this.scaleX=t,this.scaleY=e,c|=8,l=h=!0)}let d=(parseInt(r.paddingTop)||0)*this.scaleY,f=(parseInt(r.paddingBottom)||0)*this.scaleY;this.paddingTop==d&&this.paddingBottom==f||(this.paddingTop=d,this.paddingBottom=f,c|=10),this.editorWidth!=t.scrollDOM.clientWidth&&(s.lineWrapping&&(h=!0),this.editorWidth=t.scrollDOM.clientWidth,c|=8);let p=t.scrollDOM.scrollTop*this.scaleY;this.scrollTop!=p&&(this.scrollAnchorHeight=-1,this.scrollTop=p),this.scrolledToBottom=A(t.scrollDOM);let m=(this.printing?Si:bi)(i,this.paddingTop),g=m.top-this.pixelViewport.top,w=m.bottom-this.pixelViewport.bottom;this.pixelViewport=m;let y=this.pixelViewport.bottom>this.pixelViewport.top&&this.pixelViewport.right>this.pixelViewport.left;if(y!=this.inView&&(this.inView=y,y&&(h=!0)),!this.inView&&!this.scrollTarget)return 0;let b=a.width;if(this.contentDOMWidth==b&&this.editorHeight==t.scrollDOM.clientHeight||(this.contentDOMWidth=a.width,this.editorHeight=t.scrollDOM.clientHeight,c|=8),h){let e=t.docView.measureVisibleLineHeights(this.viewport);if(s.mustRefreshForHeights(e)&&(l=!0),l||s.lineWrapping&&Math.abs(b-this.contentDOMWidth)>s.charWidth){let{lineHeight:i,charWidth:n,textHeight:r}=t.docView.measureTextSize();l=i>0&&s.refresh(o,i,n,r,b/n,e),l&&(t.docView.minWidth=0,c|=8)}g>0&&w>0?u=Math.max(g,w):g<0&&w<0&&(u=Math.min(g,w)),s.heightChanged=!1;for(let i of this.viewports){let r=i.from==this.viewport.from?e:t.docView.measureVisibleLineHeights(i);this.heightMap=(l?di.empty().applyChanges(this.stateDeco,n.Text.empty,this.heightOracle,[new fe(0,0,0,t.state.doc.length)]):this.heightMap).updateHeight(s,0,l,new ai(i.from,r))}s.heightChanged&&(c|=2)}let S=!this.viewportIsAppropriate(this.viewport,u)||this.scrollTarget&&(this.scrollTarget.range.head<this.viewport.from||this.scrollTarget.range.head>this.viewport.to);return S&&(2&c&&(c|=this.updateScaler()),this.viewport=this.getViewport(u,this.scrollTarget),c|=this.updateForViewport()),(2&c||S)&&this.updateViewportLines(),(this.lineGaps.length||this.viewport.to-this.viewport.from>4e3)&&this.updateLineGaps(this.ensureLineGaps(l?[]:this.lineGaps,t)),c|=this.computeVisibleRanges(),this.mustEnforceCursorAssoc&&(this.mustEnforceCursorAssoc=!1,t.docView.enforceCursorAssoc()),c}get visibleTop(){return this.scaler.fromDOM(this.pixelViewport.top)}get visibleBottom(){return this.scaler.fromDOM(this.pixelViewport.bottom)}getViewport(t,e){let i=.5-Math.max(-.5,Math.min(.5,t/1e3/2)),n=this.heightMap,r=this.heightOracle,{visibleTop:s,visibleBottom:o}=this,l=new Ai(n.lineAt(s-1e3*i,ci.ByHeight,r,0,0).from,n.lineAt(o+1e3*(1-i),ci.ByHeight,r,0,0).to);if(e){let{head:t}=e.range;if(t<l.from||t>l.to){let i,s=Math.min(this.editorHeight,this.pixelViewport.bottom-this.pixelViewport.top),o=n.lineAt(t,ci.ByPos,r,0,0);i="center"==e.y?(o.top+o.bottom)/2-s/2:"start"==e.y||"nearest"==e.y&&t<l.from?o.top:o.bottom-s,l=new Ai(n.lineAt(i-500,ci.ByHeight,r,0,0).from,n.lineAt(i+s+500,ci.ByHeight,r,0,0).to)}}return l}mapViewport(t,e){let i=e.mapPos(t.from,-1),n=e.mapPos(t.to,1);return new Ai(this.heightMap.lineAt(i,ci.ByPos,this.heightOracle,0,0).from,this.heightMap.lineAt(n,ci.ByPos,this.heightOracle,0,0).to)}viewportIsAppropriate({from:t,to:e},i=0){if(!this.inView)return!0;let{top:n}=this.heightMap.lineAt(t,ci.ByPos,this.heightOracle,0,0),{bottom:r}=this.heightMap.lineAt(e,ci.ByPos,this.heightOracle,0,0),{visibleTop:s,visibleBottom:o}=this;return(0==t||n<=s-Math.max(10,Math.min(-i,250)))&&(e==this.state.doc.length||r>=o+Math.max(10,Math.min(i,250)))&&n>s-2e3&&r<o+2e3}mapLineGaps(t,e){if(!t.length||e.empty)return t;let i=[];for(let n of t)e.touchesRange(n.from,n.to)||i.push(new xi(e.mapPos(n.from),e.mapPos(n.to),n.size));return i}ensureLineGaps(t,i){let r=this.heightOracle.lineWrapping,s=r?1e4:2e3,o=s>>1,l=s<<1;if(this.defaultTextDirection!=e.Direction.LTR&&!r)return[];let a=[],h=(e,s,l,c)=>{if(s-e<o)return;let u=this.state.selection.main,d=[u.from];u.empty||d.push(u.to);for(let t of d)if(t>e&&t<s)return h(e,t-10,l,c),void h(t+10,s,l,c);let f=function(t,e){for(let i of t)if(e(i))return i}(t,(t=>t.from>=l.from&&t.to<=l.to&&Math.abs(t.from-e)<o&&Math.abs(t.to-s)<o&&!d.some((e=>t.from<e&&t.to>e))));if(!f){if(s<l.to&&i&&r&&i.visibleRanges.some((t=>t.from<=s&&t.to>=s))){let t=i.moveToLineBoundary(n.EditorSelection.cursor(s),!1,!0).head;t>e&&(s=t)}f=new xi(e,s,this.gapSize(l,e,s,c))}a.push(f)},c=t=>{if(t.length<l||t.type!=e.BlockType.Text)return;let i=function(t,e,i){let r=[],s=t,o=0;return n.RangeSet.spans(i,t,e,{span(){},point(t,e){t>s&&(r.push({from:s,to:t}),o+=t-s),s=e}},20),s<e&&(r.push({from:s,to:e}),o+=e-s),{total:o,ranges:r}}(t.from,t.to,this.stateDeco);if(i.total<l)return;let o,a,c=this.scrollTarget?this.scrollTarget.range.head:null;if(r){let e,n,r=s/this.heightOracle.lineLength*this.heightOracle.lineHeight;if(null!=c){let s=Ti(i,c),o=((this.visibleBottom-this.visibleTop)/2+r)/t.height;e=s-o,n=s+o}else e=(this.visibleTop-t.top-r)/t.height,n=(this.visibleBottom-t.top+r)/t.height;o=Ei(i,e),a=Ei(i,n)}else{let t,e,n=i.total*this.heightOracle.charWidth,r=s*this.heightOracle.charWidth;if(null!=c){let s=Ti(i,c),o=((this.pixelViewport.right-this.pixelViewport.left)/2+r)/n;t=s-o,e=s+o}else t=(this.pixelViewport.left-r)/n,e=(this.pixelViewport.right+r)/n;o=Ei(i,t),a=Ei(i,e)}o>t.from&&h(t.from,o,t,i),a<t.to&&h(a,t.to,t,i)};for(let t of this.viewportLines)Array.isArray(t.type)?t.type.forEach(c):c(t);return a}gapSize(t,e,i,n){let r=Ti(n,i)-Ti(n,e);return this.heightOracle.lineWrapping?t.height*r:n.total*this.heightOracle.charWidth*r}updateLineGaps(t){xi.same(t,this.lineGaps)||(this.lineGaps=t,this.lineGapDeco=ct.set(t.map((t=>t.draw(this,this.heightOracle.lineWrapping)))))}computeVisibleRanges(){let t=this.stateDeco;this.lineGaps.length&&(t=t.concat(this.lineGapDeco));let e=[];n.RangeSet.spans(t,this.viewport.from,this.viewport.to,{span(t,i){e.push({from:t,to:i})},point(){}},20);let i=e.length!=this.visibleRanges.length||this.visibleRanges.some(((t,i)=>t.from!=e[i].from||t.to!=e[i].to));return this.visibleRanges=e,i?4:0}lineBlockAt(t){return t>=this.viewport.from&&t<=this.viewport.to&&this.viewportLines.find((e=>e.from<=t&&e.to>=t))||Pi(this.heightMap.lineAt(t,ci.ByPos,this.heightOracle,0,0),this.scaler)}lineBlockAtHeight(t){return t>=this.viewportLines[0].top&&t<=this.viewportLines[this.viewportLines.length-1].bottom&&this.viewportLines.find((e=>e.top<=t&&e.bottom>=t))||Pi(this.heightMap.lineAt(this.scaler.fromDOM(t),ci.ByHeight,this.heightOracle,0,0),this.scaler)}scrollAnchorAt(t){let e=this.lineBlockAtHeight(t+8);return e.from>=this.viewport.from||this.viewportLines[0].top-t>200?e:this.viewportLines[0]}elementAtHeight(t){return Pi(this.heightMap.blockAt(this.scaler.fromDOM(t),this.heightOracle,0,0),this.scaler)}get docHeight(){return this.scaler.toDOM(this.heightMap.height)}get contentHeight(){return this.docHeight+this.paddingTop+this.paddingBottom}}class Ai{constructor(t,e){this.from=t,this.to=e}}function Ei({total:t,ranges:e},i){if(i<=0)return e[0].from;if(i>=1)return e[e.length-1].to;let n=Math.floor(t*i);for(let t=0;;t++){let{from:i,to:r}=e[t],s=r-i;if(n<=s)return i+n;n-=s}}function Ti(t,e){let i=0;for(let{from:n,to:r}of t.ranges){if(e<=r){i+=e-n;break}i+=r-n}return i/t.total}const Mi={toDOM:t=>t,fromDOM:t=>t,scale:1,eq(t){return t==this}};class Ni{constructor(t,e,i){let n=0,r=0,s=0;this.viewports=i.map((({from:i,to:r})=>{let s=e.lineAt(i,ci.ByPos,t,0,0).top,o=e.lineAt(r,ci.ByPos,t,0,0).bottom;return n+=o-s,{from:i,to:r,top:s,bottom:o,domTop:0,domBottom:0}})),this.scale=(7e6-n)/(e.height-n);for(let t of this.viewports)t.domTop=s+(t.top-r)*this.scale,s=t.domBottom=t.domTop+(t.bottom-t.top),r=t.bottom}toDOM(t){for(let e=0,i=0,n=0;;e++){let r=e<this.viewports.length?this.viewports[e]:null;if(!r||t<r.top)return n+(t-i)*this.scale;if(t<=r.bottom)return r.domTop+(t-r.top);i=r.bottom,n=r.domBottom}}fromDOM(t){for(let e=0,i=0,n=0;;e++){let r=e<this.viewports.length?this.viewports[e]:null;if(!r||t<r.domTop)return i+(t-n)/this.scale;if(t<=r.domBottom)return r.top+(t-r.domTop);i=r.bottom,n=r.domBottom}}eq(t){return t instanceof Ni&&this.scale==t.scale&&this.viewports.length==t.viewports.length&&this.viewports.every(((e,i)=>e.from==t.viewports[i].from&&e.to==t.viewports[i].to))}}function Pi(t,e){if(1==e.scale)return t;let i=e.toDOM(t.top),n=e.toDOM(t.bottom);return new hi(t.from,t.length,i,n-i,Array.isArray(t._content)?t._content.map((t=>Pi(t,e))):t._content)}const Oi=n.Facet.define({combine:t=>t.join(" ")}),Di=n.Facet.define({combine:t=>t.indexOf(!0)>-1}),Li=r.StyleModule.newName(),Ri=r.StyleModule.newName(),Ii=r.StyleModule.newName(),Bi={"&light":"."+Ri,"&dark":"."+Ii};function Fi(t,e,i){return new r.StyleModule(e,{finish:e=>/&/.test(e)?e.replace(/&\w*/,(e=>{if("&"==e)return t;if(!i||!i[e])throw new RangeError(`Unsupported selector: ${e}`);return i[e]})):t+" "+e})}const _i=Fi("."+Li,{"&":{position:"relative !important",boxSizing:"border-box","&.cm-focused":{outline:"1px dotted #212121"},display:"flex !important",flexDirection:"column"},".cm-scroller":{display:"flex !important",alignItems:"flex-start !important",fontFamily:"monospace",lineHeight:1.4,height:"100%",overflowX:"auto",position:"relative",zIndex:0},".cm-content":{margin:0,flexGrow:2,flexShrink:0,display:"block",whiteSpace:"pre",wordWrap:"normal",boxSizing:"border-box",minHeight:"100%",padding:"4px 0",outline:"none","&[contenteditable=true]":{WebkitUserModify:"read-write-plaintext-only"}},".cm-lineWrapping":{whiteSpace_fallback:"pre-wrap",whiteSpace:"break-spaces",wordBreak:"break-word",overflowWrap:"anywhere",flexShrink:1},"&light .cm-content":{caretColor:"black"},"&dark .cm-content":{caretColor:"white"},".cm-line":{display:"block",padding:"0 2px 0 6px"},".cm-layer":{position:"absolute",left:0,top:0,contain:"size style","& > *":{position:"absolute"}},"&light .cm-selectionBackground":{background:"#d9d9d9"},"&dark .cm-selectionBackground":{background:"#222"},"&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground":{background:"#d7d4f0"},"&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground":{background:"#233"},".cm-cursorLayer":{pointerEvents:"none"},"&.cm-focused > .cm-scroller > .cm-cursorLayer":{animation:"steps(1) cm-blink 1.2s infinite"},"@keyframes cm-blink":{"0%":{},"50%":{opacity:0},"100%":{}},"@keyframes cm-blink2":{"0%":{},"50%":{opacity:0},"100%":{}},".cm-cursor, .cm-dropCursor":{borderLeft:"1.2px solid black",marginLeft:"-0.6px",pointerEvents:"none"},".cm-cursor":{display:"none"},"&dark .cm-cursor":{borderLeftColor:"#444"},".cm-dropCursor":{position:"absolute"},"&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor":{display:"block"},".cm-iso":{unicodeBidi:"isolate"},".cm-announced":{position:"fixed",top:"-10000px"},"@media print":{".cm-announced":{display:"none"}},"&light .cm-activeLine":{backgroundColor:"#cceeff44"},"&dark .cm-activeLine":{backgroundColor:"#99eeff33"},"&light .cm-specialChar":{color:"red"},"&dark .cm-specialChar":{color:"#f78"},".cm-gutters":{flexShrink:0,display:"flex",height:"100%",boxSizing:"border-box",insetInlineStart:0,zIndex:200},"&light .cm-gutters":{backgroundColor:"#f5f5f5",color:"#6c6c6c",borderRight:"1px solid #ddd"},"&dark .cm-gutters":{backgroundColor:"#333338",color:"#ccc"},".cm-gutter":{display:"flex !important",flexDirection:"column",flexShrink:0,boxSizing:"border-box",minHeight:"100%",overflow:"hidden"},".cm-gutterElement":{boxSizing:"border-box"},".cm-lineNumbers .cm-gutterElement":{padding:"0 3px 0 5px",minWidth:"20px",textAlign:"right",whiteSpace:"nowrap"},"&light .cm-activeLineGutter":{backgroundColor:"#e2f2ff"},"&dark .cm-activeLineGutter":{backgroundColor:"#222227"},".cm-panels":{boxSizing:"border-box",position:"sticky",left:0,right:0},"&light .cm-panels":{backgroundColor:"#f5f5f5",color:"black"},"&light .cm-panels-top":{borderBottom:"1px solid #ddd"},"&light .cm-panels-bottom":{borderTop:"1px solid #ddd"},"&dark .cm-panels":{backgroundColor:"#333338",color:"white"},".cm-tab":{display:"inline-block",overflow:"hidden",verticalAlign:"bottom"},".cm-widgetBuffer":{verticalAlign:"text-top",height:"1em",width:0,display:"inline"},".cm-placeholder":{color:"#888",display:"inline-block",verticalAlign:"top"},".cm-highlightSpace:before":{content:"attr(data-display)",position:"absolute",pointerEvents:"none",color:"#888"},".cm-highlightTab":{backgroundImage:'url(\'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>\')',backgroundSize:"auto 100%",backgroundPosition:"right 90%",backgroundRepeat:"no-repeat"},".cm-trailingSpace":{backgroundColor:"#ff332255"},".cm-button":{verticalAlign:"middle",color:"inherit",fontSize:"70%",padding:".2em 1em",borderRadius:"1px"},"&light .cm-button":{backgroundImage:"linear-gradient(#eff1f5, #d9d9df)",border:"1px solid #888","&:active":{backgroundImage:"linear-gradient(#b4b4b4, #d0d3d6)"}},"&dark .cm-button":{backgroundImage:"linear-gradient(#393939, #111)",border:"1px solid #888","&:active":{backgroundImage:"linear-gradient(#111, #333)"}},".cm-textfield":{verticalAlign:"middle",color:"inherit",fontSize:"70%",border:"1px solid silver",padding:".2em .5em"},"&light .cm-textfield":{backgroundColor:"white"},"&dark .cm-textfield":{border:"1px solid #555",backgroundColor:"inherit"}},Bi),qi="￿";class Vi{constructor(t,e){this.points=t,this.text="",this.lineSeparator=e.facet(n.EditorState.lineSeparator)}append(t){this.text+=t}lineBreak(){this.text+=qi}readRange(t,e){if(!t)return this;let i=t.parentNode;for(let n=t;;){this.findPointBefore(i,n);let t=this.text.length;this.readNode(n);let r=n.nextSibling;if(r==e)break;let s=P.get(n),o=P.get(r);(s&&o?s.breakAfter:(s?s.breakAfter:d(n))||d(r)&&("BR"!=n.nodeName||n.cmIgnore)&&this.text.length>t)&&this.lineBreak(),n=r}return this.findPointBefore(i,e),this}readTextNode(t){let e=t.nodeValue;for(let i of this.points)i.node==t&&(i.pos=this.text.length+Math.min(i.offset,e.length));for(let i=0,n=this.lineSeparator?null:/\r\n?|\n/g;;){let r,s=-1,o=1;if(this.lineSeparator?(s=e.indexOf(this.lineSeparator,i),o=this.lineSeparator.length):(r=n.exec(e))&&(s=r.index,o=r[0].length),this.append(e.slice(i,s<0?e.length:s)),s<0)break;if(this.lineBreak(),o>1)for(let e of this.points)e.node==t&&e.pos>this.text.length&&(e.pos-=o-1);i=s+o}}readNode(t){if(t.cmIgnore)return;let e=P.get(t),i=e&&e.overrideDOMText;if(null!=i){this.findPointInside(t,i.length);for(let t=i.iter();!t.next().done;)t.lineBreak?this.lineBreak():this.append(t.value)}else 3==t.nodeType?this.readTextNode(t):"BR"==t.nodeName?t.nextSibling&&this.lineBreak():1==t.nodeType&&this.readRange(t.firstChild,null)}findPointBefore(t,e){for(let i of this.points)i.node==t&&t.childNodes[i.offset]==e&&(i.pos=this.text.length)}findPointInside(t,e){for(let i of this.points)(3==t.nodeType?i.node==t:t.contains(i.node))&&(i.pos=this.text.length+(Hi(t,i.node,i.offset)?e:0))}}function Hi(t,e,i){for(;;){if(!e||i<p(e))return!1;if(e==t)return!0;i=u(e)+1,e=e.parentNode}}class Wi{constructor(t,e){this.node=t,this.offset=e,this.pos=-1}}class zi{constructor(t,e,i,r){this.typeOver=r,this.bounds=null,this.text="",this.domChanged=e>-1;let{impreciseHead:s,impreciseAnchor:o}=t.docView;if(t.state.readOnly&&e>-1)this.newSel=null;else if(e>-1&&(this.bounds=t.docView.domBoundsAround(e,i,0))){let e=s||o?[]:function(t){let e=[];if(t.root.activeElement!=t.contentDOM)return e;let{anchorNode:i,anchorOffset:n,focusNode:r,focusOffset:s}=t.observer.selectionRange;return i&&(e.push(new Wi(i,n)),r==i&&s==n||e.push(new Wi(r,s))),e}(t),i=new Vi(e,t.state);i.readRange(this.bounds.startDOM,this.bounds.endDOM),this.text=i.text,this.newSel=function(t,e){if(0==t.length)return null;let i=t[0].pos,r=2==t.length?t[1].pos:i;return i>-1&&r>-1?n.EditorSelection.single(i+e,r+e):null}(e,this.bounds.from)}else{let e=t.observer.selectionRange,i=s&&s.node==e.focusNode&&s.offset==e.focusOffset||!l(t.contentDOM,e.focusNode)?t.state.selection.main.head:t.docView.posFromDOM(e.focusNode,e.focusOffset),r=o&&o.node==e.anchorNode&&o.offset==e.anchorOffset||!l(t.contentDOM,e.anchorNode)?t.state.selection.main.anchor:t.docView.posFromDOM(e.anchorNode,e.anchorOffset),a=t.viewport;if((K.ios||K.chrome)&&t.state.selection.main.empty&&i!=r&&(a.from>0||a.to<t.state.doc.length)){let e=Math.min(i,r),n=Math.max(i,r),s=a.from-e,o=a.to-n;0!=s&&1!=s&&0!=e||0!=o&&-1!=o&&n!=t.state.doc.length||(i=0,r=t.state.doc.length)}this.newSel=n.EditorSelection.single(r,i)}}}function ji(t,e){let i,{newSel:r}=e,s=t.state.selection.main,o=t.inputState.lastKeyTime>Date.now()-100?t.inputState.lastKeyCode:-1;if(e.bounds){let{from:r,to:l}=e.bounds,a=s.from,h=null;(8===o||K.android&&e.text.length<l-r)&&(a=s.to,h="end");let c=function(t,e,i,n){let r=Math.min(t.length,e.length),s=0;for(;s<r&&t.charCodeAt(s)==e.charCodeAt(s);)s++;if(s==r&&t.length==e.length)return null;let o=t.length,l=e.length;for(;o>0&&l>0&&t.charCodeAt(o-1)==e.charCodeAt(l-1);)o--,l--;return"end"==n&&(i-=o+Math.max(0,s-Math.min(o,l))-s),o<s&&t.length<e.length?(s-=i<=s&&i>=o?s-i:0,l=s+(l-o),o=s):l<s&&(s-=i<=s&&i>=l?s-i:0,o=s+(o-l),l=s),{from:s,toA:o,toB:l}}(t.state.doc.sliceString(r,l,qi),e.text,a-r,h);c&&(K.chrome&&13==o&&c.toB==c.from+2&&e.text.slice(c.from,c.toB)==qi+qi&&c.toB--,i={from:r+c.from,to:r+c.toA,insert:n.Text.of(e.text.slice(c.from,c.toB).split(qi))})}else r&&(!t.hasFocus&&t.state.facet(Zt)||r.main.eq(s))&&(r=null);if(!i&&!r)return!1;if(!i&&e.typeOver&&!s.empty&&r&&r.main.empty?i={from:s.from,to:s.to,insert:t.state.doc.slice(s.from,s.to)}:i&&i.from>=s.from&&i.to<=s.to&&(i.from!=s.from||i.to!=s.to)&&s.to-s.from-(i.to-i.from)<=4?i={from:s.from,to:s.to,insert:t.state.doc.slice(s.from,i.from).append(i.insert).append(t.state.doc.slice(i.to,s.to))}:(K.mac||K.android)&&i&&i.from==i.to&&i.from==s.head-1&&/^\. ?$/.test(i.insert.toString())&&"off"==t.contentDOM.getAttribute("autocorrect")?(r&&2==i.insert.length&&(r=n.EditorSelection.single(r.main.anchor-1,r.main.head-1)),i={from:s.from,to:s.to,insert:n.Text.of([" "])}):K.chrome&&i&&i.from==i.to&&i.from==s.head&&"\n "==i.insert.toString()&&t.lineWrapping&&(r&&(r=n.EditorSelection.single(r.main.anchor-1,r.main.head-1)),i={from:s.from,to:s.to,insert:n.Text.of([" "])}),i)return Ui(t,i,r,o);if(r&&!r.main.eq(s)){let e=!1,i="select";return t.inputState.lastSelectionTime>Date.now()-50&&("select"==t.inputState.lastSelectionOrigin&&(e=!0),i=t.inputState.lastSelectionOrigin),t.dispatch({selection:r,scrollIntoView:e,userEvent:i}),!0}return!1}function Ui(t,e,i,r=-1){if(K.ios&&t.inputState.flushIOSKey(e))return!0;let s=t.state.selection.main;if(K.android&&(e.to==s.to&&(e.from==s.from||e.from==s.from-1&&" "==t.state.sliceDoc(e.from,s.from))&&1==e.insert.length&&2==e.insert.lines&&C(t.contentDOM,"Enter",13)||(e.from==s.from-1&&e.to==s.to&&0==e.insert.length||8==r&&e.insert.length<e.to-e.from&&e.to>s.head)&&C(t.contentDOM,"Backspace",8)||e.from==s.from&&e.to==s.to+1&&0==e.insert.length&&C(t.contentDOM,"Delete",46)))return!0;let o,l=e.insert.toString();t.inputState.composing>=0&&t.inputState.composing++;let a=()=>o||(o=function(t,e,i){let r,s=t.state,o=s.selection.main;if(e.from>=o.from&&e.to<=o.to&&e.to-e.from>=(o.to-o.from)/3&&(!i||i.main.empty&&i.main.from==e.from+e.insert.length)&&t.inputState.composing<0){let i=o.from<e.from?s.sliceDoc(o.from,e.from):"",n=o.to>e.to?s.sliceDoc(e.to,o.to):"";r=s.replaceSelection(t.state.toText(i+e.insert.sliceString(0,void 0,t.state.lineBreak)+n))}else{let l=s.changes(e),a=i&&i.main.to<=l.newLength?i.main:void 0;if(s.selection.ranges.length>1&&t.inputState.composing>=0&&e.to<=o.to&&e.to>=o.to-10){let h,c=t.state.sliceDoc(e.from,e.to),u=i&&ve(t,i.main.head);if(u){let t=e.insert.length-(e.to-e.from);h={from:u.from,to:u.to-t}}else h=t.state.doc.lineAt(o.head);let d=o.to-e.to,f=o.to-o.from;r=s.changeByRange((i=>{if(i.from==o.from&&i.to==o.to)return{changes:l,range:a||i.map(l)};let r=i.to-d,u=r-c.length;if(i.to-i.from!=f||t.state.sliceDoc(u,r)!=c||i.to>=h.from&&i.from<=h.to)return{range:i};let p=s.changes({from:u,to:r,insert:e.insert}),m=i.to-o.to;return{changes:p,range:a?n.EditorSelection.range(Math.max(0,a.anchor+m),Math.max(0,a.head+m)):i.map(p)}}))}else r={changes:l,selection:a&&s.selection.replaceRange(a)}}let l="input.type";return(t.composing||t.inputState.compositionPendingChange&&t.inputState.compositionEndedAt>Date.now()-50)&&(t.inputState.compositionPendingChange=!1,l+=".compose",t.inputState.compositionFirstChange&&(l+=".start",t.inputState.compositionFirstChange=!1)),s.update(r,{userEvent:l,scrollIntoView:!0})}(t,e,i));return t.state.facet(zt).some((i=>i(t,e.from,e.to,l,a)))||t.dispatch(a()),!0}const Ki={childList:!0,characterData:!0,subtree:!0,attributes:!0,characterDataOldValue:!0},Gi=K.ie&&K.ie_version<=11;class $i{constructor(t){this.view=t,this.active=!1,this.editContext=null,this.selectionRange=new w,this.selectionChanged=!1,this.delayedFlush=-1,this.resizeTimeout=-1,this.queue=[],this.delayedAndroidKey=null,this.flushingAndroidKey=-1,this.lastChange=0,this.scrollTargets=[],this.intersection=null,this.resizeScroll=null,this.intersecting=!1,this.gapIntersection=null,this.gaps=[],this.printQuery=null,this.parentCheck=-1,this.dom=t.contentDOM,this.observer=new MutationObserver((e=>{for(let t of e)this.queue.push(t);(K.ie&&K.ie_version<=11||K.ios&&t.composing)&&e.some((t=>"childList"==t.type&&t.removedNodes.length||"characterData"==t.type&&t.oldValue.length>t.target.nodeValue.length))?this.flushSoon():this.flush()})),!window.EditContext||!1===t.constructor.EDIT_CONTEXT||K.chrome&&K.chrome_version<126||(this.editContext=new Xi(t),t.state.facet(Zt)&&(t.contentDOM.editContext=this.editContext.editContext)),Gi&&(this.onCharData=t=>{this.queue.push({target:t.target,type:"characterData",oldValue:t.prevValue}),this.flushSoon()}),this.onSelectionChange=this.onSelectionChange.bind(this),this.onResize=this.onResize.bind(this),this.onPrint=this.onPrint.bind(this),this.onScroll=this.onScroll.bind(this),window.matchMedia&&(this.printQuery=window.matchMedia("print")),"function"==typeof ResizeObserver&&(this.resizeScroll=new ResizeObserver((()=>{var t;(null===(t=this.view.docView)||void 0===t?void 0:t.lastUpdate)<Date.now()-75&&this.onResize()})),this.resizeScroll.observe(t.scrollDOM)),this.addWindowListeners(this.win=t.win),this.start(),"function"==typeof IntersectionObserver&&(this.intersection=new IntersectionObserver((t=>{this.parentCheck<0&&(this.parentCheck=setTimeout(this.listenForScroll.bind(this),1e3)),t.length>0&&t[t.length-1].intersectionRatio>0!=this.intersecting&&(this.intersecting=!this.intersecting,this.intersecting!=this.view.inView&&this.onScrollChanged(document.createEvent("Event")))}),{threshold:[0,.001]}),this.intersection.observe(this.dom),this.gapIntersection=new IntersectionObserver((t=>{t.length>0&&t[t.length-1].intersectionRatio>0&&this.onScrollChanged(document.createEvent("Event"))}),{})),this.listenForScroll(),this.readSelectionRange()}onScrollChanged(t){this.view.inputState.runHandlers("scroll",t),this.intersecting&&this.view.measure()}onScroll(t){this.intersecting&&this.flush(!1),this.editContext&&this.view.requestMeasure(this.editContext.measureReq),this.onScrollChanged(t)}onResize(){this.resizeTimeout<0&&(this.resizeTimeout=setTimeout((()=>{this.resizeTimeout=-1,this.view.requestMeasure()}),50))}onPrint(t){("change"!=t.type||t.matches)&&(this.view.viewState.printing=!0,this.view.measure(),setTimeout((()=>{this.view.viewState.printing=!1,this.view.requestMeasure()}),500))}updateGaps(t){if(this.gapIntersection&&(t.length!=this.gaps.length||this.gaps.some(((e,i)=>e!=t[i])))){this.gapIntersection.disconnect();for(let e of t)this.gapIntersection.observe(e);this.gaps=t}}onSelectionChange(t){let e=this.selectionChanged;if(!this.readSelectionRange()||this.delayedAndroidKey)return;let{view:i}=this,n=this.selectionRange;if(i.state.facet(Zt)?i.root.activeElement!=this.dom:!a(i.dom,n))return;let r=n.anchorNode&&i.docView.nearest(n.anchorNode);r&&r.ignoreEvent(t)?e||(this.selectionChanged=!1):(K.ie&&K.ie_version<=11||K.android&&K.chrome)&&!i.state.selection.main.empty&&n.focusNode&&c(n.focusNode,n.focusOffset,n.anchorNode,n.anchorOffset)?this.flushSoon():this.flush(!1)}readSelectionRange(){let{view:t}=this,e=o(t.root);if(!e)return!1;let i=K.safari&&11==t.root.nodeType&&function(t){let e=t.activeElement;for(;e&&e.shadowRoot;)e=e.shadowRoot.activeElement;return e}(this.dom.ownerDocument)==this.dom&&function(t,e){if(e.getComposedRanges){let i=e.getComposedRanges(t.root)[0];if(i)return Ji(t,i)}let i=null;function n(t){t.preventDefault(),t.stopImmediatePropagation(),i=t.getTargetRanges()[0]}return t.contentDOM.addEventListener("beforeinput",n,!0),t.dom.ownerDocument.execCommand("indent"),t.contentDOM.removeEventListener("beforeinput",n,!0),i?Ji(t,i):null}(this.view,e)||e;if(!i||this.selectionRange.eq(i))return!1;let n=a(this.dom,i);return n&&!this.selectionChanged&&t.inputState.lastFocusTime>Date.now()-200&&t.inputState.lastTouchTime<Date.now()-300&&function(t,e){let i=e.focusNode,n=e.focusOffset;if(!i||e.anchorNode!=i||e.anchorOffset!=n)return!1;for(n=Math.min(n,p(i));;)if(n){if(1!=i.nodeType)return!1;let t=i.childNodes[n-1];"false"==t.contentEditable?n--:(i=t,n=p(i))}else{if(i==t)return!0;n=u(i),i=i.parentNode}}(this.dom,i)?(this.view.inputState.lastFocusTime=0,t.docView.updateSelection(),!1):(this.selectionRange.setRange(i),n&&(this.selectionChanged=!0),!0)}setSelectionRange(t,e){this.selectionRange.set(t.node,t.offset,e.node,e.offset),this.selectionChanged=!1}clearSelectionRange(){this.selectionRange.set(null,0,null,0)}listenForScroll(){this.parentCheck=-1;let t=0,e=null;for(let i=this.dom;i;)if(1==i.nodeType)!e&&t<this.scrollTargets.length&&this.scrollTargets[t]==i?t++:e||(e=this.scrollTargets.slice(0,t)),e&&e.push(i),i=i.assignedSlot||i.parentNode;else{if(11!=i.nodeType)break;i=i.host}if(t<this.scrollTargets.length&&!e&&(e=this.scrollTargets.slice(0,t)),e){for(let t of this.scrollTargets)t.removeEventListener("scroll",this.onScroll);for(let t of this.scrollTargets=e)t.addEventListener("scroll",this.onScroll)}}ignore(t){if(!this.active)return t();try{return this.stop(),t()}finally{this.start(),this.clear()}}start(){this.active||(this.observer.observe(this.dom,Ki),Gi&&this.dom.addEventListener("DOMCharacterDataModified",this.onCharData),this.active=!0)}stop(){this.active&&(this.active=!1,this.observer.disconnect(),Gi&&this.dom.removeEventListener("DOMCharacterDataModified",this.onCharData))}clear(){this.processRecords(),this.queue.length=0,this.selectionChanged=!1}delayAndroidKey(t,e){var i;if(!this.delayedAndroidKey){let t=()=>{let t=this.delayedAndroidKey;t&&(this.clearDelayedAndroidKey(),this.view.inputState.lastKeyCode=t.keyCode,this.view.inputState.lastKeyTime=Date.now(),!this.flush()&&t.force&&C(this.dom,t.key,t.keyCode))};this.flushingAndroidKey=this.view.win.requestAnimationFrame(t)}this.delayedAndroidKey&&"Enter"!=t||(this.delayedAndroidKey={key:t,keyCode:e,force:this.lastChange<Date.now()-50||!!(null===(i=this.delayedAndroidKey)||void 0===i?void 0:i.force)})}clearDelayedAndroidKey(){this.win.cancelAnimationFrame(this.flushingAndroidKey),this.delayedAndroidKey=null,this.flushingAndroidKey=-1}flushSoon(){this.delayedFlush<0&&(this.delayedFlush=this.view.win.requestAnimationFrame((()=>{this.delayedFlush=-1,this.flush()})))}forceFlush(){this.delayedFlush>=0&&(this.view.win.cancelAnimationFrame(this.delayedFlush),this.delayedFlush=-1),this.flush()}pendingRecords(){for(let t of this.observer.takeRecords())this.queue.push(t);return this.queue}processRecords(){let t=this.pendingRecords();t.length&&(this.queue=[]);let e=-1,i=-1,n=!1;for(let r of t){let t=this.readMutation(r);t&&(t.typeOver&&(n=!0),-1==e?({from:e,to:i}=t):(e=Math.min(t.from,e),i=Math.max(t.to,i)))}return{from:e,to:i,typeOver:n}}readChange(){let{from:t,to:e,typeOver:i}=this.processRecords(),n=this.selectionChanged&&a(this.dom,this.selectionRange);if(t<0&&!n)return null;t>-1&&(this.lastChange=Date.now()),this.view.inputState.lastFocusTime=0,this.selectionChanged=!1;let r=new zi(this.view,t,e,i);return this.view.docView.domChanged={newSel:r.newSel?r.newSel.main:null},r}flush(t=!0){if(this.delayedFlush>=0||this.delayedAndroidKey)return!1;t&&this.readSelectionRange();let e=this.readChange();if(!e)return this.view.requestMeasure(),!1;let i=this.view.state,n=ji(this.view,e);return this.view.state==i&&(e.domChanged||e.newSel&&!e.newSel.main.eq(this.view.state.selection.main))&&this.view.update([]),n}readMutation(t){let e=this.view.docView.nearest(t.target);if(!e||e.ignoreMutation(t))return null;if(e.markDirty("attributes"==t.type),"attributes"==t.type&&(e.flags|=4),"childList"==t.type){let i=Yi(e,t.previousSibling||t.target.previousSibling,-1),n=Yi(e,t.nextSibling||t.target.nextSibling,1);return{from:i?e.posAfter(i):e.posAtStart,to:n?e.posBefore(n):e.posAtEnd,typeOver:!1}}return"characterData"==t.type?{from:e.posAtStart,to:e.posAtEnd,typeOver:t.target.nodeValue==t.oldValue}:null}setWindow(t){t!=this.win&&(this.removeWindowListeners(this.win),this.win=t,this.addWindowListeners(this.win))}addWindowListeners(t){t.addEventListener("resize",this.onResize),this.printQuery?this.printQuery.addEventListener("change",this.onPrint):t.addEventListener("beforeprint",this.onPrint),t.addEventListener("scroll",this.onScroll),t.document.addEventListener("selectionchange",this.onSelectionChange)}removeWindowListeners(t){t.removeEventListener("scroll",this.onScroll),t.removeEventListener("resize",this.onResize),this.printQuery?this.printQuery.removeEventListener("change",this.onPrint):t.removeEventListener("beforeprint",this.onPrint),t.document.removeEventListener("selectionchange",this.onSelectionChange)}update(t){this.editContext&&(this.editContext.update(t),t.startState.facet(Zt)!=t.state.facet(Zt)&&(t.view.contentDOM.editContext=t.state.facet(Zt)?this.editContext.editContext:null))}destroy(){var t,e,i;this.stop(),null===(t=this.intersection)||void 0===t||t.disconnect(),null===(e=this.gapIntersection)||void 0===e||e.disconnect(),null===(i=this.resizeScroll)||void 0===i||i.disconnect();for(let t of this.scrollTargets)t.removeEventListener("scroll",this.onScroll);this.removeWindowListeners(this.win),clearTimeout(this.parentCheck),clearTimeout(this.resizeTimeout),this.win.cancelAnimationFrame(this.delayedFlush),this.win.cancelAnimationFrame(this.flushingAndroidKey)}}function Yi(t,e,i){for(;e;){let n=P.get(e);if(n&&n.parent==t)return n;let r=e.parentNode;e=r!=t.dom?r:i>0?e.nextSibling:e.previousSibling}return null}function Ji(t,e){let i=e.startContainer,n=e.startOffset,r=e.endContainer,s=e.endOffset,o=t.docView.domAtPos(t.state.selection.main.anchor);return c(o.node,o.offset,r,s)&&([i,n,r,s]=[r,s,i,n]),{anchorNode:i,anchorOffset:n,focusNode:r,focusOffset:s}}class Xi{constructor(t){this.from=0,this.to=0,this.pendingContextChange=null,this.resetRange(t.state);let e=this.editContext=new window.EditContext({text:t.state.doc.sliceString(this.from,this.to),selectionStart:this.toContextPos(Math.max(this.from,Math.min(this.to,t.state.selection.main.anchor))),selectionEnd:this.toContextPos(t.state.selection.main.head)});e.addEventListener("textupdate",(e=>{let{anchor:i}=t.state.selection.main,r={from:this.toEditorPos(e.updateRangeStart),to:this.toEditorPos(e.updateRangeEnd),insert:n.Text.of(e.text.split("\n"))};r.from==this.from&&i<this.from?r.from=i:r.to==this.to&&i>this.to&&(r.to=i),(r.from!=r.to||r.insert.length)&&(this.pendingContextChange=r,Ui(t,r,n.EditorSelection.single(this.toEditorPos(e.selectionStart),this.toEditorPos(e.selectionEnd))),this.pendingContextChange&&this.revertPending(t.state))})),e.addEventListener("characterboundsupdate",(i=>{let n=[],r=null;for(let e=this.toEditorPos(i.rangeStart),s=this.toEditorPos(i.rangeEnd);e<s;e++){let i=t.coordsForChar(e);r=i&&new DOMRect(i.left,i.top,i.right-i.left,i.bottom-i.top)||r||new DOMRect,n.push(r)}e.updateCharacterBounds(i.rangeStart,n)})),e.addEventListener("textformatupdate",(e=>{let i=[];for(let t of e.getTextFormats()){let e=t.underlineStyle,n=t.underlineThickness;if("None"!=e&&"None"!=n){let r=`text-decoration: underline ${"Dashed"==e?"dashed ":"Squiggle"==e?"wavy ":""}${"Thin"==n?1:2}px`;i.push(ct.mark({attributes:{style:r}}).range(this.toEditorPos(t.rangeStart),this.toEditorPos(t.rangeEnd)))}}t.dispatch({effects:Jt.of(ct.set(i))})})),e.addEventListener("compositionstart",(()=>{t.inputState.composing<0&&(t.inputState.composing=0,t.inputState.compositionFirstChange=!0)})),e.addEventListener("compositionend",(()=>{t.inputState.composing=-1,t.inputState.compositionFirstChange=null})),this.measureReq={read:t=>{this.editContext.updateControlBounds(t.contentDOM.getBoundingClientRect());let e=o(t.root);e&&e.rangeCount&&this.editContext.updateSelectionBounds(e.getRangeAt(0).getBoundingClientRect())}}}applyEdits(t){let e=0,i=!1,n=this.pendingContextChange;return t.changes.iterChanges(((r,s,o,l,a)=>{if(i)return;let h=a.length-(s-r);if(n&&s>=n.to){if(n.from==r&&n.to==s&&n.insert.eq(a))return n=this.pendingContextChange=null,void(e+=h);n=null,this.revertPending(t.state)}if(r+=e,(s+=e)<=this.from)this.from+=h,this.to+=h;else if(r<this.to){if(r<this.from||s>this.to||this.to-this.from+a.length>3e4)return void(i=!0);this.editContext.updateText(this.toContextPos(r),this.toContextPos(s),a.toString()),this.to+=h}e+=h})),n&&!i&&this.revertPending(t.state),!i}update(t){this.applyEdits(t)&&this.rangeIsValid(t.state)?(t.docChanged||t.selectionSet)&&this.setSelection(t.state):(this.pendingContextChange=null,this.resetRange(t.state),this.editContext.updateText(0,this.editContext.text.length,t.state.doc.sliceString(this.from,this.to)),this.setSelection(t.state)),(t.geometryChanged||t.docChanged||t.selectionSet)&&t.view.requestMeasure(this.measureReq)}resetRange(t){let{head:e}=t.selection.main;this.from=Math.max(0,e-1e4),this.to=Math.min(t.doc.length,e+1e4)}revertPending(t){let e=this.pendingContextChange;this.pendingContextChange=null,this.editContext.updateText(this.toContextPos(e.from),this.toContextPos(e.to+e.insert.length),t.doc.sliceString(e.from,e.to))}setSelection(t){let{main:e}=t.selection,i=this.toContextPos(Math.max(this.from,Math.min(this.to,e.anchor))),n=this.toContextPos(e.head);this.editContext.selectionStart==i&&this.editContext.selectionEnd==n||this.editContext.updateSelection(i,n)}rangeIsValid(t){let{head:e}=t.selection.main;return!(this.from>0&&e-this.from<500||this.to<t.doc.length&&this.to-e<500||this.to-this.from>3e4)}toEditorPos(t){return t+this.from}toContextPos(t){return t-this.from}}class Zi{get state(){return this.viewState.state}get viewport(){return this.viewState.viewport}get visibleRanges(){return this.viewState.visibleRanges}get inView(){return this.viewState.inView}get composing(){return this.inputState.composing>0}get compositionStarted(){return this.inputState.composing>=0}get root(){return this._root}get win(){return this.dom.ownerDocument.defaultView||window}constructor(t={}){this.plugins=[],this.pluginMap=new Map,this.editorAttrs={},this.contentAttrs={},this.bidiCache=[],this.destroyed=!1,this.updateState=2,this.measureScheduled=-1,this.measureRequests=[],this.contentDOM=document.createElement("div"),this.scrollDOM=document.createElement("div"),this.scrollDOM.tabIndex=-1,this.scrollDOM.className="cm-scroller",this.scrollDOM.appendChild(this.contentDOM),this.announceDOM=document.createElement("div"),this.announceDOM.className="cm-announced",this.announceDOM.setAttribute("aria-live","polite"),this.dom=document.createElement("div"),this.dom.appendChild(this.announceDOM),this.dom.appendChild(this.scrollDOM),t.parent&&t.parent.appendChild(this.dom);let{dispatch:e}=t;this.dispatchTransactions=t.dispatchTransactions||e&&(t=>t.forEach((t=>e(t,this))))||(t=>this.update(t)),this.dispatch=this.dispatch.bind(this),this._root=t.root||function(t){for(;t;){if(t&&(9==t.nodeType||11==t.nodeType&&t.host))return t;t=t.assignedSlot||t.parentNode}return null}(t.parent)||document,this.viewState=new ki(t.state||n.EditorState.create(t)),t.scrollTo&&t.scrollTo.is(Yt)&&(this.viewState.scrollTarget=t.scrollTo.value.clip(this.viewState.state)),this.plugins=this.state.facet(te).map((t=>new ie(t)));for(let t of this.plugins)t.update(this);this.observer=new $i(this),this.inputState=new De(this),this.inputState.ensureHandlers(this.plugins),this.docView=new me(this),this.mountStyles(),this.updateAttrs(),this.updateState=0,this.requestMeasure()}dispatch(...t){let e=1==t.length&&t[0]instanceof n.Transaction?t:1==t.length&&Array.isArray(t[0])?t[0]:[this.state.update(...t)];this.dispatchTransactions(e,this)}update(t){if(0!=this.updateState)throw new Error("Calls to EditorView.update are not allowed while an update is in progress");let e,i=!1,r=!1,s=this.state;for(let e of t){if(e.startState!=s)throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");s=e.state}if(this.destroyed)return void(this.viewState.state=s);let o=this.hasFocus,l=0,a=null;t.some((t=>t.annotation(ii)))?(this.inputState.notifiedFocused=o,l=1):o!=this.inputState.notifiedFocused&&(this.inputState.notifiedFocused=o,a=ni(s,o),a||(l=1));let h=this.observer.delayedAndroidKey,c=null;if(h?(this.observer.clearDelayedAndroidKey(),c=this.observer.readChange(),(c&&!this.state.doc.eq(s.doc)||!this.state.selection.eq(s.selection))&&(c=null)):this.observer.clear(),s.facet(n.EditorState.phrases)!=this.state.facet(n.EditorState.phrases))return this.setState(s);e=pe.create(this,s,t),e.flags|=l;let u=this.viewState.scrollTarget;try{this.updateState=2;for(let e of t){if(u&&(u=u.map(e.changes)),e.scrollIntoView){let{main:t}=e.state.selection;u=new $t(t.empty?t:n.EditorSelection.cursor(t.head,t.head>t.anchor?-1:1))}for(let t of e.effects)t.is(Yt)&&(u=t.value.clip(this.state))}this.viewState.update(e,u),this.bidiCache=en.update(this.bidiCache,e.changes),e.empty||(this.updatePlugins(e),this.inputState.update(e)),i=this.docView.update(e),this.state.facet(de)!=this.styleModules&&this.mountStyles(),r=this.updateAttrs(),this.showAnnouncements(t),this.docView.updateSelection(i,t.some((t=>t.isUserEvent("select.pointer"))))}finally{this.updateState=0}if(e.startState.facet(Oi)!=e.state.facet(Oi)&&(this.viewState.mustMeasureContent=!0),(i||r||u||this.viewState.mustEnforceCursorAssoc||this.viewState.mustMeasureContent)&&this.requestMeasure(),i&&this.docViewUpdate(),!e.empty)for(let t of this.state.facet(Wt))try{t(e)}catch(t){Xt(this.state,t,"update listener")}(a||c)&&Promise.resolve().then((()=>{a&&this.state==a.startState&&this.dispatch(a),c&&!ji(this,c)&&h.force&&C(this.contentDOM,h.key,h.keyCode)}))}setState(t){if(0!=this.updateState)throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");if(this.destroyed)return void(this.viewState.state=t);this.updateState=2;let e=this.hasFocus;try{for(let t of this.plugins)t.destroy(this);this.viewState=new ki(t),this.plugins=t.facet(te).map((t=>new ie(t))),this.pluginMap.clear();for(let t of this.plugins)t.update(this);this.docView.destroy(),this.docView=new me(this),this.inputState.ensureHandlers(this.plugins),this.mountStyles(),this.updateAttrs(),this.bidiCache=[]}finally{this.updateState=0}e&&this.focus(),this.requestMeasure()}updatePlugins(t){let e=t.startState.facet(te),i=t.state.facet(te);if(e!=i){let n=[];for(let r of i){let i=e.indexOf(r);if(i<0)n.push(new ie(r));else{let e=this.plugins[i];e.mustUpdate=t,n.push(e)}}for(let e of this.plugins)e.mustUpdate!=t&&e.destroy(this);this.plugins=n,this.pluginMap.clear()}else for(let e of this.plugins)e.mustUpdate=t;for(let t=0;t<this.plugins.length;t++)this.plugins[t].update(this);e!=i&&this.inputState.ensureHandlers(this.plugins)}docViewUpdate(){for(let t of this.plugins){let e=t.value;if(e&&e.docViewUpdate)try{e.docViewUpdate(this)}catch(t){Xt(this.state,t,"doc view update listener")}}}measure(t=!0){if(this.destroyed)return;if(this.measureScheduled>-1&&this.win.cancelAnimationFrame(this.measureScheduled),this.observer.delayedAndroidKey)return this.measureScheduled=-1,void this.requestMeasure();this.measureScheduled=0,t&&this.observer.forceFlush();let e=null,i=this.scrollDOM,n=i.scrollTop*this.scaleY,{scrollAnchorPos:r,scrollAnchorHeight:s}=this.viewState;Math.abs(n-this.viewState.scrollTop)>1&&(s=-1),this.viewState.scrollAnchorHeight=-1;try{for(let t=0;;t++){if(s<0)if(A(i))r=-1,s=this.viewState.heightMap.height;else{let t=this.viewState.scrollAnchorAt(n);r=t.from,s=t.top}this.updateState=1;let o=this.viewState.measure(this);if(!o&&!this.measureRequests.length&&null==this.viewState.scrollTarget)break;if(t>5){console.warn(this.measureRequests.length?"Measure loop restarted more than 5 times":"Viewport failed to stabilize");break}let l=[];4&o||([this.measureRequests,l]=[l,this.measureRequests]);let a=l.map((t=>{try{return t.read(this)}catch(t){return Xt(this.state,t),tn}})),h=pe.create(this,this.state,[]),c=!1;h.flags|=o,e?e.flags|=o:e=h,this.updateState=2,h.empty||(this.updatePlugins(h),this.inputState.update(h),this.updateAttrs(),c=this.docView.update(h),c&&this.docViewUpdate());for(let t=0;t<l.length;t++)if(a[t]!=tn)try{let e=l[t];e.write&&e.write(a[t],this)}catch(t){Xt(this.state,t)}if(c&&this.docView.updateSelection(!0),!h.viewportChanged&&0==this.measureRequests.length){if(this.viewState.editorHeight){if(this.viewState.scrollTarget){this.docView.scrollIntoView(this.viewState.scrollTarget),this.viewState.scrollTarget=null,s=-1;continue}{let t=(r<0?this.viewState.heightMap.height:this.viewState.lineBlockAt(r).top)-s;if(t>1||t<-1){n+=t,i.scrollTop=n/this.scaleY,s=-1;continue}}}break}}}finally{this.updateState=0,this.measureScheduled=-1}if(e&&!e.empty)for(let t of this.state.facet(Wt))t(e)}get themeClasses(){return Li+" "+(this.state.facet(Di)?Ii:Ri)+" "+this.state.facet(Oi)}updateAttrs(){let t=nn(this,ne,{class:"cm-editor"+(this.hasFocus?" cm-focused ":" ")+this.themeClasses}),e={spellcheck:"false",autocorrect:"off",autocapitalize:"off",translate:"no",contenteditable:this.state.facet(Zt)?"true":"false",class:"cm-content",style:`${K.tabSize}: ${this.state.tabSize}`,role:"textbox","aria-multiline":"true"};this.state.readOnly&&(e["aria-readonly"]="true"),nn(this,re,e);let i=this.observer.ignore((()=>{let i=nt(this.contentDOM,this.contentAttrs,e),n=nt(this.dom,this.editorAttrs,t);return i||n}));return this.editorAttrs=t,this.contentAttrs=e,i}showAnnouncements(t){let e=!0;for(let i of t)for(let t of i.effects)t.is(Zi.announce)&&(e&&(this.announceDOM.textContent=""),e=!1,this.announceDOM.appendChild(document.createElement("div")).textContent=t.value)}mountStyles(){this.styleModules=this.state.facet(de);let t=this.state.facet(Zi.cspNonce);r.StyleModule.mount(this.root,this.styleModules.concat(_i).reverse(),t?{nonce:t}:void 0)}readMeasured(){if(2==this.updateState)throw new Error("Reading the editor layout isn't allowed during an update");0==this.updateState&&this.measureScheduled>-1&&this.measure(!1)}requestMeasure(t){if(this.measureScheduled<0&&(this.measureScheduled=this.win.requestAnimationFrame((()=>this.measure()))),t){if(this.measureRequests.indexOf(t)>-1)return;if(null!=t.key)for(let e=0;e<this.measureRequests.length;e++)if(this.measureRequests[e].key===t.key)return void(this.measureRequests[e]=t);this.measureRequests.push(t)}}plugin(t){let e=this.pluginMap.get(t);return(void 0===e||e&&e.spec!=t)&&this.pluginMap.set(t,e=this.plugins.find((e=>e.spec==t))||null),e&&e.update(this).value}get documentTop(){return this.contentDOM.getBoundingClientRect().top+this.viewState.paddingTop}get documentPadding(){return{top:this.viewState.paddingTop,bottom:this.viewState.paddingBottom}}get scaleX(){return this.viewState.scaleX}get scaleY(){return this.viewState.scaleY}elementAtHeight(t){return this.readMeasured(),this.viewState.elementAtHeight(t)}lineBlockAtHeight(t){return this.readMeasured(),this.viewState.lineBlockAtHeight(t)}get viewportLineBlocks(){return this.viewState.viewportLines}lineBlockAt(t){return this.viewState.lineBlockAt(t)}get contentHeight(){return this.viewState.contentHeight}moveByChar(t,e,i){return Oe(this,t,Ne(this,t,e,i))}moveByGroup(t,e){return Oe(this,t,Ne(this,t,e,(e=>function(t,e,i){let r=t.state.charCategorizer(e),s=r(i);return t=>{let e=r(t);return s==n.CharCategory.Space&&(s=e),s==e}}(this,t.head,e))))}visualLineSide(t,e){let i=this.bidiSpans(t),r=this.textDirectionAt(t.from),s=i[e?i.length-1:0];return n.EditorSelection.cursor(s.side(e,r)+t.from,s.forward(!e,r)?1:-1)}moveToLineBoundary(t,i,r=!0){return function(t,i,r,s){let o=Me(t,i.head),l=s&&o.type==e.BlockType.Text&&(t.lineWrapping||o.widgetLineBreaks)?t.coordsAtPos(i.assoc<0&&i.head>o.from?i.head-1:i.head):null;if(l){let i=t.dom.getBoundingClientRect(),s=t.textDirectionAt(o.from),a=t.posAtCoords({x:r==(s==e.Direction.LTR)?i.right-1:i.left+1,y:(l.top+l.bottom)/2});if(null!=a)return n.EditorSelection.cursor(a,r?-1:1)}return n.EditorSelection.cursor(r?o.to:o.from,r?-1:1)}(this,t,i,r)}moveVertically(t,e,i){return Oe(this,t,function(t,e,i,r){let s=e.head,o=i?1:-1;if(s==(i?t.state.doc.length:0))return n.EditorSelection.cursor(s,e.assoc);let l,a=e.goalColumn,h=t.contentDOM.getBoundingClientRect(),c=t.coordsAtPos(s,e.assoc||-1),u=t.documentTop;if(c)null==a&&(a=c.left-h.left),l=o<0?c.top:c.bottom;else{let e=t.viewState.lineBlockAt(s);null==a&&(a=Math.min(h.right-h.left,t.defaultCharacterWidth*(s-e.from))),l=(o<0?e.top:e.bottom)+u}let d=h.left+a,f=null!=r?r:t.viewState.heightOracle.textHeight>>1;for(let e=0;;e+=10){let i=l+(f+e)*o,r=Ee(t,{x:d,y:i},!1,o);if(i<h.top||i>h.bottom||(o<0?r<s:r>s)){let e=t.docView.coordsForChar(r),s=!e||i<e.top?-1:1;return n.EditorSelection.cursor(r,s,void 0,a)}}}(this,t,e,i))}domAtPos(t){return this.docView.domAtPos(t)}posAtDOM(t,e=0){return this.docView.posFromDOM(t,e)}posAtCoords(t,e=!0){return this.readMeasured(),Ee(this,t,e)}coordsAtPos(t,i=1){this.readMeasured();let n=this.docView.coordsAt(t,i);if(!n||n.left==n.right)return n;let r=this.state.doc.lineAt(t),s=this.bidiSpans(r);return m(n,s[Mt.find(s,t-r.from,-1,i)].dir==e.Direction.LTR==i>0)}coordsForChar(t){return this.readMeasured(),this.docView.coordsForChar(t)}get defaultCharacterWidth(){return this.viewState.heightOracle.charWidth}get defaultLineHeight(){return this.viewState.heightOracle.lineHeight}get textDirection(){return this.viewState.defaultTextDirection}textDirectionAt(t){return!this.state.facet(Ut)||t<this.viewport.from||t>this.viewport.to?this.textDirection:(this.readMeasured(),this.docView.textDirectionAt(t))}get lineWrapping(){return this.viewState.heightOracle.lineWrapping}bidiSpans(t){if(t.length>Qi)return Rt(t.length);let e,i=this.textDirectionAt(t.from);for(let n of this.bidiCache)if(n.from==t.from&&n.dir==i&&(n.fresh||Nt(n.isolates,e=he(this,t))))return n.order;e||(e=he(this,t));let n=Lt(t.text,i,e);return this.bidiCache.push(new en(t.from,t.to,i,e,!0,n)),n}get hasFocus(){var t;return(this.dom.ownerDocument.hasFocus()||K.safari&&(null===(t=this.inputState)||void 0===t?void 0:t.lastContextMenu)>Date.now()-3e4)&&this.root.activeElement==this.contentDOM}focus(){this.observer.ignore((()=>{S(this.contentDOM),this.docView.updateSelection()}))}setRoot(t){this._root!=t&&(this._root=t,this.observer.setWindow((9==t.nodeType?t:t.ownerDocument).defaultView||window),this.mountStyles())}destroy(){this.root.activeElement==this.contentDOM&&this.contentDOM.blur();for(let t of this.plugins)t.destroy(this);this.plugins=[],this.inputState.destroy(),this.docView.destroy(),this.dom.remove(),this.observer.destroy(),this.measureScheduled>-1&&this.win.cancelAnimationFrame(this.measureScheduled),this.destroyed=!0}static scrollIntoView(t,e={}){return Yt.of(new $t("number"==typeof t?n.EditorSelection.cursor(t):t,e.y,e.x,e.yMargin,e.xMargin))}scrollSnapshot(){let{scrollTop:t,scrollLeft:e}=this.scrollDOM,i=this.viewState.scrollAnchorAt(t);return Yt.of(new $t(n.EditorSelection.cursor(i.from),"start","start",i.top-t,e,!0))}setTabFocusMode(t){null==t?this.inputState.tabFocusMode=this.inputState.tabFocusMode<0?0:-1:"boolean"==typeof t?this.inputState.tabFocusMode=t?0:-1:0!=this.inputState.tabFocusMode&&(this.inputState.tabFocusMode=Date.now()+t)}static domEventHandlers(t){return ee.define((()=>({})),{eventHandlers:t})}static domEventObservers(t){return ee.define((()=>({})),{eventObservers:t})}static theme(t,e){let i=r.StyleModule.newName(),n=[Oi.of(i),de.of(Fi(`.${i}`,t))];return e&&e.dark&&n.push(Di.of(!0)),n}static baseTheme(t){return n.Prec.lowest(de.of(Fi("."+Li,t,Bi)))}static findFromDOM(t){var e;let i=t.querySelector(".cm-content"),n=i&&P.get(i)||P.get(t);return(null===(e=null==n?void 0:n.rootView)||void 0===e?void 0:e.view)||null}}Zi.styleModule=de,Zi.inputHandler=zt,Zi.scrollHandler=Gt,Zi.focusChangeEffect=jt,Zi.perLineTextDirection=Ut,Zi.exceptionSink=Ht,Zi.updateListener=Wt,Zi.editable=Zt,Zi.mouseSelectionStyle=Vt,Zi.dragMovesSelection=qt,Zi.clickAddsSelectionRange=_t,Zi.decorations=se,Zi.outerDecorations=oe,Zi.atomicRanges=le,Zi.bidiIsolatedRanges=ae,Zi.scrollMargins=ce,Zi.darkTheme=Di,Zi.cspNonce=n.Facet.define({combine:t=>t.length?t[0]:""}),Zi.contentAttributes=re,Zi.editorAttributes=ne,Zi.lineWrapping=Zi.contentAttributes.of({class:"cm-lineWrapping"}),Zi.announce=n.StateEffect.define();const Qi=4096,tn={};class en{constructor(t,e,i,n,r,s){this.from=t,this.to=e,this.dir=i,this.isolates=n,this.fresh=r,this.order=s}static update(t,i){if(i.empty&&!t.some((t=>t.fresh)))return t;let n=[],r=t.length?t[t.length-1].dir:e.Direction.LTR;for(let e=Math.max(0,t.length-10);e<t.length;e++){let s=t[e];s.dir!=r||i.touchesRange(s.from,s.to)||n.push(new en(i.mapPos(s.from,1),i.mapPos(s.to,-1),s.dir,s.isolates,!1,s.order))}return n}}function nn(t,e,i){for(let n=t.state.facet(e),r=n.length-1;r>=0;r--){let e=n[r],s="function"==typeof e?e(t):e;s&&tt(s,i)}return i}const rn=K.mac?"mac":K.windows?"win":K.linux?"linux":"key";function sn(t,e,i){return e.altKey&&(t="Alt-"+t),e.ctrlKey&&(t="Ctrl-"+t),e.metaKey&&(t="Meta-"+t),!1!==i&&e.shiftKey&&(t="Shift-"+t),t}const on=n.Prec.default(Zi.domEventHandlers({keydown:(t,e)=>fn(hn(e.state),t,e,"editor")})),ln=n.Facet.define({enables:on}),an=new WeakMap;function hn(t){let e=t.facet(ln),i=an.get(e);return i||an.set(e,i=function(t,e=rn){let i=Object.create(null),n=Object.create(null),r=(t,e)=>{let i=n[t];if(null==i)n[t]=e;else if(i!=e)throw new Error("Key binding "+t+" is used both as a regular binding and as a multi-stroke prefix")},s=(t,n,s,o,l)=>{var a,h;let c=i[t]||(i[t]=Object.create(null)),u=n.split(/ (?!$)/).map((t=>function(t,e){const i=t.split(/-(?!$)/);let n,r,s,o,l=i[i.length-1];"Space"==l&&(l=" ");for(let t=0;t<i.length-1;++t){const l=i[t];if(/^(cmd|meta|m)$/i.test(l))o=!0;else if(/^a(lt)?$/i.test(l))n=!0;else if(/^(c|ctrl|control)$/i.test(l))r=!0;else if(/^s(hift)?$/i.test(l))s=!0;else{if(!/^mod$/i.test(l))throw new Error("Unrecognized modifier name: "+l);"mac"==e?o=!0:r=!0}}return n&&(l="Alt-"+l),r&&(l="Ctrl-"+l),o&&(l="Meta-"+l),s&&(l="Shift-"+l),l}(t,e)));for(let e=1;e<u.length;e++){let i=u.slice(0,e).join(" ");r(i,!0),c[i]||(c[i]={preventDefault:!0,stopPropagation:!1,run:[e=>{let n=cn={view:e,prefix:i,scope:t};return setTimeout((()=>{cn==n&&(cn=null)}),un),!0}]})}let d=u.join(" ");r(d,!1);let f=c[d]||(c[d]={preventDefault:!1,stopPropagation:!1,run:(null===(h=null===(a=c._any)||void 0===a?void 0:a.run)||void 0===h?void 0:h.slice())||[]});s&&f.run.push(s),o&&(f.preventDefault=!0),l&&(f.stopPropagation=!0)};for(let n of t){let t=n.scope?n.scope.split(" "):["editor"];if(n.any)for(let e of t){let t=i[e]||(i[e]=Object.create(null));t._any||(t._any={preventDefault:!1,stopPropagation:!1,run:[]});let{any:r}=n;for(let e in t)t[e].run.push((t=>r(t,dn)))}let r=n[e]||n.key;if(r)for(let e of t)s(e,r,n.run,n.preventDefault,n.stopPropagation),n.shift&&s(e,"Shift-"+r,n.shift,n.preventDefault,n.stopPropagation)}return i}(e.reduce(((t,e)=>t.concat(e)),[]))),i}let cn=null;const un=4e3;let dn=null;function fn(t,e,i,r){dn=e;let o=s.keyName(e),l=n.codePointAt(o,0),a=n.codePointSize(l)==o.length&&" "!=o,h="",c=!1,u=!1,d=!1;cn&&cn.view==i&&cn.scope==r&&(h=cn.prefix+" ",Fe.indexOf(e.keyCode)<0&&(u=!0,cn=null));let f,p,m=new Set,g=t=>{if(t){for(let e of t.run)if(!m.has(e)&&(m.add(e),e(i)))return t.stopPropagation&&(d=!0),!0;t.preventDefault&&(t.stopPropagation&&(d=!0),u=!0)}return!1},v=t[r];return v&&(g(v[h+sn(o,e,!a)])?c=!0:a&&(e.altKey||e.metaKey||e.ctrlKey)&&!(K.windows&&e.ctrlKey&&e.altKey)&&(f=s.base[e.keyCode])&&f!=o?(g(v[h+sn(f,e,!0)])||e.shiftKey&&(p=s.shift[e.keyCode])!=o&&p!=f&&g(v[h+sn(p,e,!1)]))&&(c=!0):a&&e.shiftKey&&g(v[h+sn(o,e,!0)])&&(c=!0),!c&&g(v._any)&&(c=!0)),u&&(c=!0),c&&d&&e.stopPropagation(),dn=null,c}class pn{constructor(t,e,i,n,r){this.className=t,this.left=e,this.top=i,this.width=n,this.height=r}draw(){let t=document.createElement("div");return t.className=this.className,this.adjust(t),t}update(t,e){return e.className==this.className&&(this.adjust(t),!0)}adjust(t){t.style.left=this.left+"px",t.style.top=this.top+"px",null!=this.width&&(t.style.width=this.width+"px"),t.style.height=this.height+"px"}eq(t){return this.left==t.left&&this.top==t.top&&this.width==t.width&&this.height==t.height&&this.className==t.className}static forRange(t,i,n){if(n.empty){let e=t.coordsAtPos(n.head,n.assoc||1);if(!e)return[];let r=mn(t);return[new pn(i,e.left-r.left,e.top-r.top,null,e.bottom-e.top)]}return function(t,i,n){if(n.to<=t.viewport.from||n.from>=t.viewport.to)return[];let r=Math.max(n.from,t.viewport.from),s=Math.min(n.to,t.viewport.to),o=t.textDirection==e.Direction.LTR,l=t.contentDOM,a=l.getBoundingClientRect(),h=mn(t),c=l.querySelector(".cm-line"),u=c&&window.getComputedStyle(c),d=a.left+(u?parseInt(u.paddingLeft)+Math.min(0,parseInt(u.textIndent)):0),f=a.right-(u?parseInt(u.paddingRight):0),p=Me(t,r),m=Me(t,s),g=p.type==e.BlockType.Text?p:null,v=m.type==e.BlockType.Text?m:null;if(g&&(t.lineWrapping||p.widgetLineBreaks)&&(g=gn(t,r,1,g)),v&&(t.lineWrapping||m.widgetLineBreaks)&&(v=gn(t,s,-1,v)),g&&v&&g.from==v.from&&g.to==v.to)return y(b(n.from,n.to,g));{let i=g?b(n.from,null,g):S(p,!1),r=v?b(null,n.to,v):S(m,!0),s=[];return(g||p).to<(v||m).from-(g&&v?1:0)||p.widgetLineBreaks>1&&i.bottom+t.defaultLineHeight/2<r.top?s.push(w(d,i.bottom,f,r.top)):i.bottom<r.top&&t.elementAtHeight((i.bottom+r.top)/2).type==e.BlockType.Text&&(i.bottom=r.top=(i.bottom+r.top)/2),y(i).concat(s).concat(y(r))}function w(t,e,n,r){return new pn(i,t-h.left,e-h.top-.01,n-t,r-e+.01)}function y({top:t,bottom:e,horizontal:i}){let n=[];for(let r=0;r<i.length;r+=2)n.push(w(i[r],t,i[r+1],e));return n}function b(i,n,r){let s=1e9,l=-1e9,a=[];function h(i,n,h,c,u){let p=t.coordsAtPos(i,i==r.to?-2:2),m=t.coordsAtPos(h,h==r.from?2:-2);p&&m&&(s=Math.min(p.top,m.top,s),l=Math.max(p.bottom,m.bottom,l),u==e.Direction.LTR?a.push(o&&n?d:p.left,o&&c?f:m.right):a.push(!o&&c?d:m.left,!o&&n?f:p.right))}let c=null!=i?i:r.from,u=null!=n?n:r.to;for(let e of t.visibleRanges)if(e.to>c&&e.from<u)for(let r=Math.max(e.from,c),s=Math.min(e.to,u);;){let e=t.state.doc.lineAt(r);for(let o of t.bidiSpans(e)){let t=o.from+e.from,l=o.to+e.from;if(t>=s)break;l>r&&h(Math.max(t,r),null==i&&t<=c,Math.min(l,s),null==n&&l>=u,o.dir)}if(r=e.to+1,r>=s)break}return 0==a.length&&h(c,null==i,u,null==n,t.textDirection),{top:s,bottom:l,horizontal:a}}function S(t,e){let i=a.top+(e?t.top:t.bottom);return{top:i,bottom:i,horizontal:[]}}}(t,i,n)}}function mn(t){let i=t.scrollDOM.getBoundingClientRect();return{left:(t.textDirection==e.Direction.LTR?i.left:i.right-t.scrollDOM.clientWidth*t.scaleX)-t.scrollDOM.scrollLeft*t.scaleX,top:i.top-t.scrollDOM.scrollTop*t.scaleY}}function gn(t,e,i,n){let r=t.coordsAtPos(e,2*i);if(!r)return n;let s=t.dom.getBoundingClientRect(),o=(r.top+r.bottom)/2,l=t.posAtCoords({x:s.left+1,y:o}),a=t.posAtCoords({x:s.right-1,y:o});return null==l||null==a?n:{from:Math.max(n.from,Math.min(l,a)),to:Math.min(n.to,Math.max(l,a))}}class vn{constructor(t,e){this.view=t,this.layer=e,this.drawn=[],this.scaleX=1,this.scaleY=1,this.measureReq={read:this.measure.bind(this),write:this.draw.bind(this)},this.dom=t.scrollDOM.appendChild(document.createElement("div")),this.dom.classList.add("cm-layer"),e.above&&this.dom.classList.add("cm-layer-above"),e.class&&this.dom.classList.add(e.class),this.scale(),this.dom.setAttribute("aria-hidden","true"),this.setOrder(t.state),t.requestMeasure(this.measureReq),e.mount&&e.mount(this.dom,t)}update(t){t.startState.facet(wn)!=t.state.facet(wn)&&this.setOrder(t.state),(this.layer.update(t,this.dom)||t.geometryChanged)&&(this.scale(),t.view.requestMeasure(this.measureReq))}docViewUpdate(t){!1!==this.layer.updateOnDocViewUpdate&&t.requestMeasure(this.measureReq)}setOrder(t){let e=0,i=t.facet(wn);for(;e<i.length&&i[e]!=this.layer;)e++;this.dom.style.zIndex=String((this.layer.above?150:-1)-e)}measure(){return this.layer.markers(this.view)}scale(){let{scaleX:t,scaleY:e}=this.view;t==this.scaleX&&e==this.scaleY||(this.scaleX=t,this.scaleY=e,this.dom.style.transform=`scale(${1/t}, ${1/e})`)}draw(t){if(t.length!=this.drawn.length||t.some(((t,e)=>{return i=t,n=this.drawn[e],!(i.constructor==n.constructor&&i.eq(n));var i,n}))){let e=this.dom.firstChild,i=0;for(let n of t)n.update&&e&&n.constructor&&this.drawn[i].constructor&&n.update(e,this.drawn[i])?(e=e.nextSibling,i++):this.dom.insertBefore(n.draw(),e);for(;e;){let t=e.nextSibling;e.remove(),e=t}this.drawn=t}}destroy(){this.layer.destroy&&this.layer.destroy(this.dom,this.view),this.dom.remove()}}const wn=n.Facet.define();function yn(t){return[ee.define((e=>new vn(e,t))),wn.of(t)]}const bn=!K.ios,Sn=n.Facet.define({combine:t=>n.combineConfig(t,{cursorBlinkRate:1200,drawRangeCursor:!0},{cursorBlinkRate:(t,e)=>Math.min(t,e),drawRangeCursor:(t,e)=>t||e})});function xn(t){return t.startState.facet(Sn)!=t.state.facet(Sn)}const Cn=yn({above:!0,markers(t){let{state:e}=t,i=e.facet(Sn),r=[];for(let s of e.selection.ranges){let o=s==e.selection.main;if(s.empty?!o||bn:i.drawRangeCursor){let e=o?"cm-cursor cm-cursor-primary":"cm-cursor cm-cursor-secondary",i=s.empty?s:n.EditorSelection.cursor(s.head,s.head>s.anchor?-1:1);for(let n of pn.forRange(t,e,i))r.push(n)}}return r},update(t,e){t.transactions.some((t=>t.selection))&&(e.style.animationName="cm-blink"==e.style.animationName?"cm-blink2":"cm-blink");let i=xn(t);return i&&kn(t.state,e),t.docChanged||t.selectionSet||i},mount(t,e){kn(e.state,t)},class:"cm-cursorLayer"});function kn(t,e){e.style.animationDuration=t.facet(Sn).cursorBlinkRate+"ms"}const An=yn({above:!1,markers:t=>t.state.selection.ranges.map((e=>e.empty?[]:pn.forRange(t,"cm-selectionBackground",e))).reduce(((t,e)=>t.concat(e))),update:(t,e)=>t.docChanged||t.selectionSet||t.viewportChanged||xn(t),class:"cm-selectionLayer"}),En={".cm-line":{"& ::selection, &::selection":{backgroundColor:"transparent !important"}},".cm-content":{"& :focus":{caretColor:"initial !important","&::selection, & ::selection":{backgroundColor:"Highlight !important"}}}};bn&&(En[".cm-line"].caretColor=En[".cm-content"].caretColor="transparent !important");const Tn=n.Prec.highest(Zi.theme(En)),Mn=n.StateEffect.define({map:(t,e)=>null==t?null:e.mapPos(t)}),Nn=n.StateField.define({create:()=>null,update:(t,e)=>(null!=t&&(t=e.changes.mapPos(t)),e.effects.reduce(((t,e)=>e.is(Mn)?e.value:t),t))}),Pn=ee.fromClass(class{constructor(t){this.view=t,this.cursor=null,this.measureReq={read:this.readPos.bind(this),write:this.drawCursor.bind(this)}}update(t){var e;let i=t.state.field(Nn);null==i?null!=this.cursor&&(null===(e=this.cursor)||void 0===e||e.remove(),this.cursor=null):(this.cursor||(this.cursor=this.view.scrollDOM.appendChild(document.createElement("div")),this.cursor.className="cm-dropCursor"),(t.startState.field(Nn)!=i||t.docChanged||t.geometryChanged)&&this.view.requestMeasure(this.measureReq))}readPos(){let{view:t}=this,e=t.state.field(Nn),i=null!=e&&t.coordsAtPos(e);if(!i)return null;let n=t.scrollDOM.getBoundingClientRect();return{left:i.left-n.left+t.scrollDOM.scrollLeft*t.scaleX,top:i.top-n.top+t.scrollDOM.scrollTop*t.scaleY,height:i.bottom-i.top}}drawCursor(t){if(this.cursor){let{scaleX:e,scaleY:i}=this.view;t?(this.cursor.style.left=t.left/e+"px",this.cursor.style.top=t.top/i+"px",this.cursor.style.height=t.height/i+"px"):this.cursor.style.left="-100000px"}}destroy(){this.cursor&&this.cursor.remove()}setDropPos(t){this.view.state.field(Nn)!=t&&this.view.dispatch({effects:Mn.of(t)})}},{eventObservers:{dragover(t){this.setDropPos(this.view.posAtCoords({x:t.clientX,y:t.clientY}))},dragleave(t){t.target!=this.view.contentDOM&&this.view.contentDOM.contains(t.relatedTarget)||this.setDropPos(null)},dragend(){this.setDropPos(null)},drop(){this.setDropPos(null)}}});function On(t,e,i,n,r){e.lastIndex=0;for(let s,o=t.iterRange(i,n),l=i;!o.next().done;l+=o.value.length)if(!o.lineBreak)for(;s=e.exec(o.value);)r(l+s.index,s)}class Dn{constructor(t){const{regexp:e,decoration:i,decorate:n,boundary:r,maxLength:s=1e3}=t;if(!e.global)throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");if(this.regexp=e,n)this.addMatch=(t,e,i,r)=>n(r,i,i+t[0].length,t,e);else if("function"==typeof i)this.addMatch=(t,e,n,r)=>{let s=i(t,e,n);s&&r(n,n+t[0].length,s)};else{if(!i)throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");this.addMatch=(t,e,n,r)=>r(n,n+t[0].length,i)}this.boundary=r,this.maxLength=s}createDeco(t){let e=new n.RangeSetBuilder,i=e.add.bind(e);for(let{from:e,to:n}of function(t,e){let i=t.visibleRanges;if(1==i.length&&i[0].from==t.viewport.from&&i[0].to==t.viewport.to)return i;let n=[];for(let{from:r,to:s}of i)r=Math.max(t.state.doc.lineAt(r).from,r-e),s=Math.min(t.state.doc.lineAt(s).to,s+e),n.length&&n[n.length-1].to>=r?n[n.length-1].to=s:n.push({from:r,to:s});return n}(t,this.maxLength))On(t.state.doc,this.regexp,e,n,((e,n)=>this.addMatch(n,t,e,i)));return e.finish()}updateDeco(t,e){let i=1e9,n=-1;return t.docChanged&&t.changes.iterChanges(((e,r,s,o)=>{o>t.view.viewport.from&&s<t.view.viewport.to&&(i=Math.min(s,i),n=Math.max(o,n))})),t.viewportChanged||n-i>1e3?this.createDeco(t.view):n>-1?this.updateRange(t.view,e.map(t.changes),i,n):e}updateRange(t,e,i,n){for(let r of t.visibleRanges){let s=Math.max(r.from,i),o=Math.min(r.to,n);if(o>s){let i=t.state.doc.lineAt(s),n=i.to<o?t.state.doc.lineAt(o):i,l=Math.max(r.from,i.from),a=Math.min(r.to,n.to);if(this.boundary){for(;s>i.from;s--)if(this.boundary.test(i.text[s-1-i.from])){l=s;break}for(;o<n.to;o++)if(this.boundary.test(n.text[o-n.from])){a=o;break}}let h,c=[],u=(t,e,i)=>c.push(i.range(t,e));if(i==n)for(this.regexp.lastIndex=l-i.from;(h=this.regexp.exec(i.text))&&h.index<a-i.from;)this.addMatch(h,t,h.index+i.from,u);else On(t.state.doc,this.regexp,l,a,((e,i)=>this.addMatch(i,t,e,u)));e=e.update({filterFrom:l,filterTo:a,filter:(t,e)=>t<l||e>a,add:c})}}return e}}const Ln=null!=/x/.unicode?"gu":"g",Rn=new RegExp("[\0-\b\n--­؜​‎‏\u2028\u2029‭‮⁦⁧⁩\ufeff￹-￼]",Ln),In={0:"null",7:"bell",8:"backspace",10:"newline",11:"vertical tab",13:"carriage return",27:"escape",8203:"zero width space",8204:"zero width non-joiner",8205:"zero width joiner",8206:"left-to-right mark",8207:"right-to-left mark",8232:"line separator",8237:"left-to-right override",8238:"right-to-left override",8294:"left-to-right isolate",8295:"right-to-left isolate",8297:"pop directional isolate",8233:"paragraph separator",65279:"zero width no-break space",65532:"object replacement"};let Bn=null;const Fn=n.Facet.define({combine(t){let e=n.combineConfig(t,{render:null,specialChars:Rn,addSpecialChars:null});return(e.replaceTabs=!function(){var t;if(null==Bn&&"undefined"!=typeof document&&document.body){let e=document.body.style;Bn=null!=(null!==(t=e.tabSize)&&void 0!==t?t:e.MozTabSize)}return Bn||!1}())&&(e.specialChars=new RegExp("\t|"+e.specialChars.source,Ln)),e.addSpecialChars&&(e.specialChars=new RegExp(e.specialChars.source+"|"+e.addSpecialChars.source,Ln)),e}});let _n=null;class qn extends lt{constructor(t,e){super(),this.options=t,this.code=e}eq(t){return t.code==this.code}toDOM(t){let e=(i=this.code)>=32?"•":10==i?"␤":String.fromCharCode(9216+i);var i;let n=t.state.phrase("Control character")+" "+(In[this.code]||"0x"+this.code.toString(16)),r=this.options.render&&this.options.render(this.code,n,e);if(r)return r;let s=document.createElement("span");return s.textContent=e,s.title=n,s.setAttribute("aria-label",n),s.className="cm-specialChar",s}ignoreEvent(){return!1}}class Vn extends lt{constructor(t){super(),this.width=t}eq(t){return t.width==this.width}toDOM(){let t=document.createElement("span");return t.textContent="\t",t.className="cm-tab",t.style.width=this.width+"px",t}ignoreEvent(){return!1}}const Hn=ee.fromClass(class{constructor(){this.height=1e3,this.attrs={style:"padding-bottom: 1000px"}}update(t){let{view:e}=t,i=e.viewState.editorHeight-e.defaultLineHeight-e.documentPadding.top-.5;i>=0&&i!=this.height&&(this.height=i,this.attrs={style:`padding-bottom: ${i}px`})}}),Wn=ct.line({class:"cm-activeLine"}),zn=ee.fromClass(class{constructor(t){this.decorations=this.getDeco(t)}update(t){(t.docChanged||t.selectionSet)&&(this.decorations=this.getDeco(t.view))}getDeco(t){let e=-1,i=[];for(let n of t.state.selection.ranges){let r=t.lineBlockAt(n.head);r.from>e&&(i.push(Wn.range(r.from)),e=r.from)}return ct.set(i)}},{decorations:t=>t.decorations});class jn extends lt{constructor(t){super(),this.content=t}toDOM(){let t=document.createElement("span");return t.className="cm-placeholder",t.style.pointerEvents="none",t.appendChild("string"==typeof this.content?document.createTextNode(this.content):this.content),"string"==typeof this.content?t.setAttribute("aria-label","placeholder "+this.content):t.setAttribute("aria-hidden","true"),t}coordsAt(t){let e=t.firstChild?h(t.firstChild):[];if(!e.length)return null;let i=window.getComputedStyle(t.parentNode),n=m(e[0],"rtl"!=i.direction),r=parseInt(i.lineHeight);return n.bottom-n.top>1.5*r?{left:n.left,right:n.right,top:n.top,bottom:n.top+r}:n}ignoreEvent(){return!1}}const Un=2e3;function Kn(t,e){let i=t.posAtCoords({x:e.clientX,y:e.clientY},!1),r=t.state.doc.lineAt(i),s=i-r.from,o=s>Un?-1:s==r.length?function(t,e){let i=t.coordsAtPos(t.viewport.from);return i?Math.round(Math.abs((i.left-e)/t.defaultCharacterWidth)):-1}(t,e.clientX):n.countColumn(r.text,t.state.tabSize,i-r.from);return{line:r.number,col:o,off:s}}const Gn={Alt:[18,t=>!!t.altKey],Control:[17,t=>!!t.ctrlKey],Shift:[16,t=>!!t.shiftKey],Meta:[91,t=>!!t.metaKey]},$n={style:"cursor: crosshair"},Yn="-10000px";class Jn{constructor(t,e,i,n){this.facet=e,this.createTooltipView=i,this.removeTooltipView=n,this.input=t.state.facet(e),this.tooltips=this.input.filter((t=>t));let r=null;this.tooltipViews=this.tooltips.map((t=>r=i(t,r)))}update(t,e){var i;let n=t.state.facet(this.facet),r=n.filter((t=>t));if(n===this.input){for(let e of this.tooltipViews)e.update&&e.update(t);return!1}let s=[],o=e?[]:null;for(let i=0;i<r.length;i++){let n=r[i],l=-1;if(n){for(let t=0;t<this.tooltips.length;t++){let e=this.tooltips[t];e&&e.create==n.create&&(l=t)}if(l<0)s[i]=this.createTooltipView(n,i?s[i-1]:null),o&&(o[i]=!!n.above);else{let n=s[i]=this.tooltipViews[l];o&&(o[i]=e[l]),n.update&&n.update(t)}}}for(let t of this.tooltipViews)s.indexOf(t)<0&&(this.removeTooltipView(t),null===(i=t.destroy)||void 0===i||i.call(t));return e&&(o.forEach(((t,i)=>e[i]=t)),e.length=o.length),this.input=n,this.tooltips=r,this.tooltipViews=s,!0}}function Xn(t){let{win:e}=t;return{top:0,left:0,bottom:e.innerHeight,right:e.innerWidth}}const Zn=n.Facet.define({combine:t=>{var e,i,n;return{position:K.ios?"absolute":(null===(e=t.find((t=>t.position)))||void 0===e?void 0:e.position)||"fixed",parent:(null===(i=t.find((t=>t.parent)))||void 0===i?void 0:i.parent)||null,tooltipSpace:(null===(n=t.find((t=>t.tooltipSpace)))||void 0===n?void 0:n.tooltipSpace)||Xn}}}),Qn=new WeakMap,tr=ee.fromClass(class{constructor(t){this.view=t,this.above=[],this.inView=!0,this.madeAbsolute=!1,this.lastTransaction=0,this.measureTimeout=-1;let e=t.state.facet(Zn);this.position=e.position,this.parent=e.parent,this.classes=t.themeClasses,this.createContainer(),this.measureReq={read:this.readMeasure.bind(this),write:this.writeMeasure.bind(this),key:this},this.resizeObserver="function"==typeof ResizeObserver?new ResizeObserver((()=>this.measureSoon())):null,this.manager=new Jn(t,nr,((t,e)=>this.createTooltip(t,e)),(t=>{this.resizeObserver&&this.resizeObserver.unobserve(t.dom),t.dom.remove()})),this.above=this.manager.tooltips.map((t=>!!t.above)),this.intersectionObserver="function"==typeof IntersectionObserver?new IntersectionObserver((t=>{Date.now()>this.lastTransaction-50&&t.length>0&&t[t.length-1].intersectionRatio<1&&this.measureSoon()}),{threshold:[1]}):null,this.observeIntersection(),t.win.addEventListener("resize",this.measureSoon=this.measureSoon.bind(this)),this.maybeMeasure()}createContainer(){this.parent?(this.container=document.createElement("div"),this.container.style.position="relative",this.container.className=this.view.themeClasses,this.parent.appendChild(this.container)):this.container=this.view.dom}observeIntersection(){if(this.intersectionObserver){this.intersectionObserver.disconnect();for(let t of this.manager.tooltipViews)this.intersectionObserver.observe(t.dom)}}measureSoon(){this.measureTimeout<0&&(this.measureTimeout=setTimeout((()=>{this.measureTimeout=-1,this.maybeMeasure()}),50))}update(t){t.transactions.length&&(this.lastTransaction=Date.now());let e=this.manager.update(t,this.above);e&&this.observeIntersection();let i=e||t.geometryChanged,n=t.state.facet(Zn);if(n.position!=this.position&&!this.madeAbsolute){this.position=n.position;for(let t of this.manager.tooltipViews)t.dom.style.position=this.position;i=!0}if(n.parent!=this.parent){this.parent&&this.container.remove(),this.parent=n.parent,this.createContainer();for(let t of this.manager.tooltipViews)this.container.appendChild(t.dom);i=!0}else this.parent&&this.view.themeClasses!=this.classes&&(this.classes=this.container.className=this.view.themeClasses);i&&this.maybeMeasure()}createTooltip(t,e){let i=t.create(this.view),n=e?e.dom:null;if(i.dom.classList.add("cm-tooltip"),t.arrow&&!i.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")){let t=document.createElement("div");t.className="cm-tooltip-arrow",i.dom.appendChild(t)}return i.dom.style.position=this.position,i.dom.style.top=Yn,i.dom.style.left="0px",this.container.insertBefore(i.dom,n),i.mount&&i.mount(this.view),this.resizeObserver&&this.resizeObserver.observe(i.dom),i}destroy(){var t,e,i;this.view.win.removeEventListener("resize",this.measureSoon);for(let e of this.manager.tooltipViews)e.dom.remove(),null===(t=e.destroy)||void 0===t||t.call(e);this.parent&&this.container.remove(),null===(e=this.resizeObserver)||void 0===e||e.disconnect(),null===(i=this.intersectionObserver)||void 0===i||i.disconnect(),clearTimeout(this.measureTimeout)}readMeasure(){let t=this.view.dom.getBoundingClientRect(),e=1,i=1,n=!1;if("fixed"==this.position&&this.manager.tooltipViews.length){let{dom:t}=this.manager.tooltipViews[0];if(K.gecko)n=t.offsetParent!=this.container.ownerDocument.body;else if(t.style.top==Yn&&"0px"==t.style.left){let e=t.getBoundingClientRect();n=Math.abs(e.top+1e4)>1||Math.abs(e.left)>1}}if(n||"absolute"==this.position)if(this.parent){let t=this.parent.getBoundingClientRect();t.width&&t.height&&(e=t.width/this.parent.offsetWidth,i=t.height/this.parent.offsetHeight)}else({scaleX:e,scaleY:i}=this.view.viewState);return{editor:t,parent:this.parent?this.container.getBoundingClientRect():t,pos:this.manager.tooltips.map(((t,e)=>{let i=this.manager.tooltipViews[e];return i.getCoords?i.getCoords(t.pos):this.view.coordsAtPos(t.pos)})),size:this.manager.tooltipViews.map((({dom:t})=>t.getBoundingClientRect())),space:this.view.state.facet(Zn).tooltipSpace(this.view),scaleX:e,scaleY:i,makeAbsolute:n}}writeMeasure(t){var i;if(t.makeAbsolute){this.madeAbsolute=!0,this.position="absolute";for(let t of this.manager.tooltipViews)t.dom.style.position="absolute"}let{editor:n,space:r,scaleX:s,scaleY:o}=t,l=[];for(let a=0;a<this.manager.tooltips.length;a++){let h=this.manager.tooltips[a],c=this.manager.tooltipViews[a],{dom:u}=c,d=t.pos[a],f=t.size[a];if(!d||d.bottom<=Math.max(n.top,r.top)||d.top>=Math.min(n.bottom,r.bottom)||d.right<Math.max(n.left,r.left)-.1||d.left>Math.min(n.right,r.right)+.1){u.style.top=Yn;continue}let p=h.arrow?c.dom.querySelector(".cm-tooltip-arrow"):null,m=p?7:0,g=f.right-f.left,v=null!==(i=Qn.get(c))&&void 0!==i?i:f.bottom-f.top,w=c.offset||ir,y=this.view.textDirection==e.Direction.LTR,b=f.width>r.right-r.left?y?r.left:r.right-f.width:y?Math.min(d.left-(p?14:0)+w.x,r.right-g):Math.max(r.left,d.left-g+(p?14:0)-w.x),S=this.above[a];!h.strictSide&&(S?d.top-(f.bottom-f.top)-w.y<r.top:d.bottom+(f.bottom-f.top)+w.y>r.bottom)&&S==r.bottom-d.bottom>d.top-r.top&&(S=this.above[a]=!S);let x=(S?d.top-r.top:r.bottom-d.bottom)-m;if(x<v&&!1!==c.resize){if(x<this.view.defaultLineHeight){u.style.top=Yn;continue}Qn.set(c,v),u.style.height=(v=x)/o+"px"}else u.style.height&&(u.style.height="");let C=S?d.top-v-m-w.y:d.bottom+m+w.y,k=b+g;if(!0!==c.overlap)for(let t of l)t.left<k&&t.right>b&&t.top<C+v&&t.bottom>C&&(C=S?t.top-v-2-m:t.bottom+m+2);if("absolute"==this.position?(u.style.top=(C-t.parent.top)/o+"px",u.style.left=(b-t.parent.left)/s+"px"):(u.style.top=C/o+"px",u.style.left=b/s+"px"),p){let t=d.left+(y?w.x:-w.x)-(b+14-7);p.style.left=t/s+"px"}!0!==c.overlap&&l.push({left:b,top:C,right:k,bottom:C+v}),u.classList.toggle("cm-tooltip-above",S),u.classList.toggle("cm-tooltip-below",!S),c.positioned&&c.positioned(t.space)}}maybeMeasure(){if(this.manager.tooltips.length&&(this.view.inView&&this.view.requestMeasure(this.measureReq),this.inView!=this.view.inView&&(this.inView=this.view.inView,!this.inView)))for(let t of this.manager.tooltipViews)t.dom.style.top=Yn}},{eventObservers:{scroll(){this.maybeMeasure()}}}),er=Zi.baseTheme({".cm-tooltip":{zIndex:100,boxSizing:"border-box"},"&light .cm-tooltip":{border:"1px solid #bbb",backgroundColor:"#f5f5f5"},"&light .cm-tooltip-section:not(:first-child)":{borderTop:"1px solid #bbb"},"&dark .cm-tooltip":{backgroundColor:"#333338",color:"white"},".cm-tooltip-arrow":{height:"7px",width:"14px",position:"absolute",zIndex:-1,overflow:"hidden","&:before, &:after":{content:"''",position:"absolute",width:0,height:0,borderLeft:"7px solid transparent",borderRight:"7px solid transparent"},".cm-tooltip-above &":{bottom:"-7px","&:before":{borderTop:"7px solid #bbb"},"&:after":{borderTop:"7px solid #f5f5f5",bottom:"1px"}},".cm-tooltip-below &":{top:"-7px","&:before":{borderBottom:"7px solid #bbb"},"&:after":{borderBottom:"7px solid #f5f5f5",top:"1px"}}},"&dark .cm-tooltip .cm-tooltip-arrow":{"&:before":{borderTopColor:"#333338",borderBottomColor:"#333338"},"&:after":{borderTopColor:"transparent",borderBottomColor:"transparent"}}}),ir={x:0,y:0},nr=n.Facet.define({enables:[tr,er]}),rr=n.Facet.define({combine:t=>t.reduce(((t,e)=>t.concat(e)),[])});class sr{static create(t){return new sr(t)}constructor(t){this.view=t,this.mounted=!1,this.dom=document.createElement("div"),this.dom.classList.add("cm-tooltip-hover"),this.manager=new Jn(t,rr,((t,e)=>this.createHostedView(t,e)),(t=>t.dom.remove()))}createHostedView(t,e){let i=t.create(this.view);return i.dom.classList.add("cm-tooltip-section"),this.dom.insertBefore(i.dom,e?e.dom.nextSibling:this.dom.firstChild),this.mounted&&i.mount&&i.mount(this.view),i}mount(t){for(let e of this.manager.tooltipViews)e.mount&&e.mount(t);this.mounted=!0}positioned(t){for(let e of this.manager.tooltipViews)e.positioned&&e.positioned(t)}update(t){this.manager.update(t)}destroy(){var t;for(let e of this.manager.tooltipViews)null===(t=e.destroy)||void 0===t||t.call(e)}passProp(t){let e;for(let i of this.manager.tooltipViews){let n=i[t];if(void 0!==n)if(void 0===e)e=n;else if(e!==n)return}return e}get offset(){return this.passProp("offset")}get getCoords(){return this.passProp("getCoords")}get overlap(){return this.passProp("overlap")}get resize(){return this.passProp("resize")}}const or=nr.compute([rr],(t=>{let e=t.facet(rr);return 0===e.length?null:{pos:Math.min(...e.map((t=>t.pos))),end:Math.max(...e.map((t=>{var e;return null!==(e=t.end)&&void 0!==e?e:t.pos}))),create:sr.create,above:e[0].above,arrow:e.some((t=>t.arrow))}}));class lr{constructor(t,e,i,n,r){this.view=t,this.source=e,this.field=i,this.setHover=n,this.hoverTime=r,this.hoverTimeout=-1,this.restartTimeout=-1,this.pending=null,this.lastMove={x:0,y:0,target:t.dom,time:0},this.checkHover=this.checkHover.bind(this),t.dom.addEventListener("mouseleave",this.mouseleave=this.mouseleave.bind(this)),t.dom.addEventListener("mousemove",this.mousemove=this.mousemove.bind(this))}update(){this.pending&&(this.pending=null,clearTimeout(this.restartTimeout),this.restartTimeout=setTimeout((()=>this.startHover()),20))}get active(){return this.view.state.field(this.field)}checkHover(){if(this.hoverTimeout=-1,this.active.length)return;let t=Date.now()-this.lastMove.time;t<this.hoverTime?this.hoverTimeout=setTimeout(this.checkHover,this.hoverTime-t):this.startHover()}startHover(){clearTimeout(this.restartTimeout);let{view:t,lastMove:i}=this,n=t.docView.nearest(i.target);if(!n)return;let r,s=1;if(n instanceof Y)r=n.posAtStart;else{if(r=t.posAtCoords(i),null==r)return;let n=t.coordsAtPos(r);if(!n||i.y<n.top||i.y>n.bottom||i.x<n.left-t.defaultCharacterWidth||i.x>n.right+t.defaultCharacterWidth)return;let o=t.bidiSpans(t.state.doc.lineAt(r)).find((t=>t.from<=r&&t.to>=r)),l=o&&o.dir==e.Direction.RTL?-1:1;s=i.x<n.left?-l:l}let o=this.source(t,r,s);if(null==o?void 0:o.then){let e=this.pending={pos:r};o.then((i=>{this.pending==e&&(this.pending=null,!i||Array.isArray(i)&&!i.length||t.dispatch({effects:this.setHover.of(Array.isArray(i)?i:[i])}))}),(e=>Xt(t.state,e,"hover tooltip")))}else!o||Array.isArray(o)&&!o.length||t.dispatch({effects:this.setHover.of(Array.isArray(o)?o:[o])})}get tooltip(){let t=this.view.plugin(tr),e=t?t.manager.tooltips.findIndex((t=>t.create==sr.create)):-1;return e>-1?t.manager.tooltipViews[e]:null}mousemove(t){var e,i;this.lastMove={x:t.clientX,y:t.clientY,target:t.target,time:Date.now()},this.hoverTimeout<0&&(this.hoverTimeout=setTimeout(this.checkHover,this.hoverTime));let{active:n,tooltip:r}=this;if(n.length&&r&&!function(t,e){let i=t.getBoundingClientRect();return e.clientX>=i.left-ar&&e.clientX<=i.right+ar&&e.clientY>=i.top-ar&&e.clientY<=i.bottom+ar}(r.dom,t)||this.pending){let{pos:r}=n[0]||this.pending,s=null!==(i=null===(e=n[0])||void 0===e?void 0:e.end)&&void 0!==i?i:r;(r==s?this.view.posAtCoords(this.lastMove)==r:function(t,e,i,n,r,s){let o=t.scrollDOM.getBoundingClientRect(),l=t.documentTop+t.documentPadding.top+t.contentHeight;if(o.left>n||o.right<n||o.top>r||Math.min(o.bottom,l)<r)return!1;let a=t.posAtCoords({x:n,y:r},!1);return a>=e&&a<=i}(this.view,r,s,t.clientX,t.clientY))||(this.view.dispatch({effects:this.setHover.of([])}),this.pending=null)}}mouseleave(t){clearTimeout(this.hoverTimeout),this.hoverTimeout=-1;let{active:e}=this;if(e.length){let{tooltip:e}=this;e&&e.dom.contains(t.relatedTarget)?this.watchTooltipLeave(e.dom):this.view.dispatch({effects:this.setHover.of([])})}}watchTooltipLeave(t){let e=i=>{t.removeEventListener("mouseleave",e),this.active.length&&!this.view.dom.contains(i.relatedTarget)&&this.view.dispatch({effects:this.setHover.of([])})};t.addEventListener("mouseleave",e)}destroy(){clearTimeout(this.hoverTimeout),this.view.dom.removeEventListener("mouseleave",this.mouseleave),this.view.dom.removeEventListener("mousemove",this.mousemove)}}const ar=4,hr=n.StateEffect.define(),cr=hr.of(null),ur=n.Facet.define({combine(t){let e,i;for(let n of t)e=e||n.topContainer,i=i||n.bottomContainer;return{topContainer:e,bottomContainer:i}}}),dr=ee.fromClass(class{constructor(t){this.input=t.state.facet(mr),this.specs=this.input.filter((t=>t)),this.panels=this.specs.map((e=>e(t)));let e=t.state.facet(ur);this.top=new fr(t,!0,e.topContainer),this.bottom=new fr(t,!1,e.bottomContainer),this.top.sync(this.panels.filter((t=>t.top))),this.bottom.sync(this.panels.filter((t=>!t.top)));for(let t of this.panels)t.dom.classList.add("cm-panel"),t.mount&&t.mount()}update(t){let e=t.state.facet(ur);this.top.container!=e.topContainer&&(this.top.sync([]),this.top=new fr(t.view,!0,e.topContainer)),this.bottom.container!=e.bottomContainer&&(this.bottom.sync([]),this.bottom=new fr(t.view,!1,e.bottomContainer)),this.top.syncClasses(),this.bottom.syncClasses();let i=t.state.facet(mr);if(i!=this.input){let e=i.filter((t=>t)),n=[],r=[],s=[],o=[];for(let i of e){let e,l=this.specs.indexOf(i);l<0?(e=i(t.view),o.push(e)):(e=this.panels[l],e.update&&e.update(t)),n.push(e),(e.top?r:s).push(e)}this.specs=e,this.panels=n,this.top.sync(r),this.bottom.sync(s);for(let t of o)t.dom.classList.add("cm-panel"),t.mount&&t.mount()}else for(let e of this.panels)e.update&&e.update(t)}destroy(){this.top.sync([]),this.bottom.sync([])}},{provide:t=>Zi.scrollMargins.of((e=>{let i=e.plugin(t);return i&&{top:i.top.scrollMargin(),bottom:i.bottom.scrollMargin()}}))});class fr{constructor(t,e,i){this.view=t,this.top=e,this.container=i,this.dom=void 0,this.classes="",this.panels=[],this.syncClasses()}sync(t){for(let e of this.panels)e.destroy&&t.indexOf(e)<0&&e.destroy();this.panels=t,this.syncDOM()}syncDOM(){if(0==this.panels.length)return void(this.dom&&(this.dom.remove(),this.dom=void 0));if(!this.dom){this.dom=document.createElement("div"),this.dom.className=this.top?"cm-panels cm-panels-top":"cm-panels cm-panels-bottom",this.dom.style[this.top?"top":"bottom"]="0";let t=this.container||this.view.dom;t.insertBefore(this.dom,this.top?t.firstChild:null)}let t=this.dom.firstChild;for(let e of this.panels)if(e.dom.parentNode==this.dom){for(;t!=e.dom;)t=pr(t);t=t.nextSibling}else this.dom.insertBefore(e.dom,t);for(;t;)t=pr(t)}scrollMargin(){return!this.dom||this.container?0:Math.max(0,this.top?this.dom.getBoundingClientRect().bottom-Math.max(0,this.view.scrollDOM.getBoundingClientRect().top):Math.min(innerHeight,this.view.scrollDOM.getBoundingClientRect().bottom)-this.dom.getBoundingClientRect().top)}syncClasses(){if(this.container&&this.classes!=this.view.themeClasses){for(let t of this.classes.split(" "))t&&this.container.classList.remove(t);for(let t of(this.classes=this.view.themeClasses).split(" "))t&&this.container.classList.add(t)}}}function pr(t){let e=t.nextSibling;return t.remove(),e}const mr=n.Facet.define({enables:dr});class gr extends n.RangeValue{compare(t){return this==t||this.constructor==t.constructor&&this.eq(t)}eq(t){return!1}destroy(t){}}gr.prototype.elementClass="",gr.prototype.toDOM=void 0,gr.prototype.mapMode=n.MapMode.TrackBefore,gr.prototype.startSide=gr.prototype.endSide=-1,gr.prototype.point=!0;const vr=n.Facet.define(),wr={class:"",renderEmptyElements:!1,elementStyle:"",markers:()=>n.RangeSet.empty,lineMarker:()=>null,widgetMarker:()=>null,lineMarkerChange:null,initialSpacer:null,updateSpacer:null,domEventHandlers:{}},yr=n.Facet.define(),br=n.Facet.define({combine:t=>t.some((t=>t))});function Sr(t){let e=[xr];return t&&!1===t.fixed&&e.push(br.of(!0)),e}const xr=ee.fromClass(class{constructor(t){this.view=t,this.prevViewport=t.viewport,this.dom=document.createElement("div"),this.dom.className="cm-gutters",this.dom.setAttribute("aria-hidden","true"),this.dom.style.minHeight=this.view.contentHeight/this.view.scaleY+"px",this.gutters=t.state.facet(yr).map((e=>new Er(t,e)));for(let t of this.gutters)this.dom.appendChild(t.dom);this.fixed=!t.state.facet(br),this.fixed&&(this.dom.style.position="sticky"),this.syncGutters(!1),t.scrollDOM.insertBefore(this.dom,t.contentDOM)}update(t){if(this.updateGutters(t)){let e=this.prevViewport,i=t.view.viewport,n=Math.min(e.to,i.to)-Math.max(e.from,i.from);this.syncGutters(n<.8*(i.to-i.from))}t.geometryChanged&&(this.dom.style.minHeight=this.view.contentHeight/this.view.scaleY+"px"),this.view.state.facet(br)!=!this.fixed&&(this.fixed=!this.fixed,this.dom.style.position=this.fixed?"sticky":""),this.prevViewport=t.view.viewport}syncGutters(t){let i=this.dom.nextSibling;t&&this.dom.remove();let r=n.RangeSet.iter(this.view.state.facet(vr),this.view.viewport.from),s=[],o=this.gutters.map((t=>new Ar(t,this.view.viewport,-this.view.documentPadding.top)));for(let t of this.view.viewportLineBlocks)if(s.length&&(s=[]),Array.isArray(t.type)){let i=!0;for(let n of t.type)if(n.type==e.BlockType.Text&&i){kr(r,s,n.from);for(let t of o)t.line(this.view,n,s);i=!1}else if(n.widget)for(let t of o)t.widget(this.view,n)}else if(t.type==e.BlockType.Text){kr(r,s,t.from);for(let e of o)e.line(this.view,t,s)}else if(t.widget)for(let e of o)e.widget(this.view,t);for(let t of o)t.finish();t&&this.view.scrollDOM.insertBefore(this.dom,i)}updateGutters(t){let e=t.startState.facet(yr),i=t.state.facet(yr),r=t.docChanged||t.heightChanged||t.viewportChanged||!n.RangeSet.eq(t.startState.facet(vr),t.state.facet(vr),t.view.viewport.from,t.view.viewport.to);if(e==i)for(let e of this.gutters)e.update(t)&&(r=!0);else{r=!0;let n=[];for(let r of i){let i=e.indexOf(r);i<0?n.push(new Er(this.view,r)):(this.gutters[i].update(t),n.push(this.gutters[i]))}for(let t of this.gutters)t.dom.remove(),n.indexOf(t)<0&&t.destroy();for(let t of n)this.dom.appendChild(t.dom);this.gutters=n}return r}destroy(){for(let t of this.gutters)t.destroy();this.dom.remove()}},{provide:t=>Zi.scrollMargins.of((i=>{let n=i.plugin(t);return n&&0!=n.gutters.length&&n.fixed?i.textDirection==e.Direction.LTR?{left:n.dom.offsetWidth*i.scaleX}:{right:n.dom.offsetWidth*i.scaleX}:null}))});function Cr(t){return Array.isArray(t)?t:[t]}function kr(t,e,i){for(;t.value&&t.from<=i;)t.from==i&&e.push(t.value),t.next()}class Ar{constructor(t,e,i){this.gutter=t,this.height=i,this.i=0,this.cursor=n.RangeSet.iter(t.markers,e.from)}addElement(t,e,i){let{gutter:n}=this,r=(e.top-this.height)/t.scaleY,s=e.height/t.scaleY;if(this.i==n.elements.length){let e=new Tr(t,s,r,i);n.elements.push(e),n.dom.appendChild(e.dom)}else n.elements[this.i].update(t,s,r,i);this.height=e.bottom,this.i++}line(t,e,i){let n=[];kr(this.cursor,n,e.from),i.length&&(n=n.concat(i));let r=this.gutter.config.lineMarker(t,e,n);r&&n.unshift(r);let s=this.gutter;(0!=n.length||s.config.renderEmptyElements)&&this.addElement(t,e,n)}widget(t,e){let i=this.gutter.config.widgetMarker(t,e.widget,e);i&&this.addElement(t,e,[i])}finish(){let t=this.gutter;for(;t.elements.length>this.i;){let e=t.elements.pop();t.dom.removeChild(e.dom),e.destroy()}}}class Er{constructor(t,e){this.view=t,this.config=e,this.elements=[],this.spacer=null,this.dom=document.createElement("div"),this.dom.className="cm-gutter"+(this.config.class?" "+this.config.class:"");for(let i in e.domEventHandlers)this.dom.addEventListener(i,(n=>{let r,s=n.target;if(s!=this.dom&&this.dom.contains(s)){for(;s.parentNode!=this.dom;)s=s.parentNode;let t=s.getBoundingClientRect();r=(t.top+t.bottom)/2}else r=n.clientY;let o=t.lineBlockAtHeight(r-t.documentTop);e.domEventHandlers[i](t,o,n)&&n.preventDefault()}));this.markers=Cr(e.markers(t)),e.initialSpacer&&(this.spacer=new Tr(t,0,0,[e.initialSpacer(t)]),this.dom.appendChild(this.spacer.dom),this.spacer.dom.style.cssText+="visibility: hidden; pointer-events: none")}update(t){let e=this.markers;if(this.markers=Cr(this.config.markers(t.view)),this.spacer&&this.config.updateSpacer){let e=this.config.updateSpacer(this.spacer.markers[0],t);e!=this.spacer.markers[0]&&this.spacer.update(t.view,0,0,[e])}let i=t.view.viewport;return!n.RangeSet.eq(this.markers,e,i.from,i.to)||!!this.config.lineMarkerChange&&this.config.lineMarkerChange(t)}destroy(){for(let t of this.elements)t.destroy()}}class Tr{constructor(t,e,i,n){this.height=-1,this.above=0,this.markers=[],this.dom=document.createElement("div"),this.dom.className="cm-gutterElement",this.update(t,e,i,n)}update(t,e,i,n){this.height!=e&&(this.height=e,this.dom.style.height=e+"px"),this.above!=i&&(this.dom.style.marginTop=(this.above=i)?i+"px":""),function(t,e){if(t.length!=e.length)return!1;for(let i=0;i<t.length;i++)if(!t[i].compare(e[i]))return!1;return!0}(this.markers,n)||this.setMarkers(t,n)}setMarkers(t,e){let i="cm-gutterElement",n=this.dom.firstChild;for(let r=0,s=0;;){let o=s,l=r<e.length?e[r++]:null,a=!1;if(l){let t=l.elementClass;t&&(i+=" "+t);for(let t=s;t<this.markers.length;t++)if(this.markers[t].compare(l)){o=t,a=!0;break}}else o=this.markers.length;for(;s<o;){let t=this.markers[s++];if(t.toDOM){t.destroy(n);let e=n.nextSibling;n.remove(),n=e}}if(!l)break;l.toDOM&&(a?n=n.nextSibling:this.dom.insertBefore(l.toDOM(t),n)),a&&s++}this.dom.className=i,this.markers=e}destroy(){this.setMarkers(null,[])}}const Mr=n.Facet.define(),Nr=n.Facet.define({combine:t=>n.combineConfig(t,{formatNumber:String,domEventHandlers:{}},{domEventHandlers(t,e){let i=Object.assign({},t);for(let t in e){let n=i[t],r=e[t];i[t]=n?(t,e,i)=>n(t,e,i)||r(t,e,i):r}return i}})});class Pr extends gr{constructor(t){super(),this.number=t}eq(t){return this.number==t.number}toDOM(){return document.createTextNode(this.number)}}function Or(t,e){return t.state.facet(Nr).formatNumber(e,t.state)}const Dr=yr.compute([Nr],(t=>({class:"cm-lineNumbers",renderEmptyElements:!1,markers:t=>t.state.facet(Mr),lineMarker:(t,e,i)=>i.some((t=>t.toDOM))?null:new Pr(Or(t,t.state.doc.lineAt(e.from).number)),widgetMarker:()=>null,lineMarkerChange:t=>t.startState.facet(Nr)!=t.state.facet(Nr),initialSpacer:t=>new Pr(Or(t,Lr(t.state.doc.lines))),updateSpacer(t,e){let i=Or(e.view,Lr(e.view.state.doc.lines));return i==t.number?t:new Pr(i)},domEventHandlers:t.facet(Nr).domEventHandlers})));function Lr(t){let e=9;for(;e<t;)e=10*e+9;return e}const Rr=new class extends gr{constructor(){super(...arguments),this.elementClass="cm-activeLineGutter"}},Ir=vr.compute(["selection"],(t=>{let e=[],i=-1;for(let n of t.selection.ranges){let r=t.doc.lineAt(n.head).from;r>i&&(i=r,e.push(Rr.range(r)))}return n.RangeSet.of(e)})),Br=new Map;function Fr(t){return ee.define((e=>({decorations:t.createDeco(e),update(e){this.decorations=t.updateDeco(e,this.decorations)}})),{decorations:t=>t.decorations})}const _r=Fr(new Dn({regexp:/\t| +/g,decoration:t=>function(t){let e=Br.get(t);return e||Br.set(t,e=ct.mark({attributes:"\t"===t?{class:"cm-highlightTab"}:{class:"cm-highlightSpace","data-display":t.replace(/ /g,"·")}})),e}(t[0]),boundary:/\S/})),qr=Fr(new Dn({regexp:/\s+$/g,decoration:ct.mark({class:"cm-trailingSpace"}),boundary:/\S/})),Vr={HeightMap:di,HeightOracle:li,MeasuredHeights:ai,QueryType:ci,ChangedRange:fe,computeOrder:Lt,moveVisually:Bt};e.BidiSpan=Mt,e.BlockInfo=hi,e.Decoration=ct,e.EditorView=Zi,e.GutterMarker=gr,e.MatchDecorator=Dn,e.RectangleMarker=pn,e.ViewPlugin=ee,e.ViewUpdate=pe,e.WidgetType=lt,e.__test=Vr,e.closeHoverTooltips=cr,e.crosshairCursor=function(t={}){let[e,i]=Gn[t.key||"Alt"],n=ee.fromClass(class{constructor(t){this.view=t,this.isDown=!1}set(t){this.isDown!=t&&(this.isDown=t,this.view.update([]))}},{eventObservers:{keydown(t){this.set(t.keyCode==e||i(t))},keyup(t){t.keyCode!=e&&i(t)||this.set(!1)},mousemove(t){this.set(i(t))}}});return[n,Zi.contentAttributes.of((t=>{var e;return(null===(e=t.plugin(n))||void 0===e?void 0:e.isDown)?$n:null}))]},e.drawSelection=function(t={}){return[Sn.of(t),Cn,An,Tn,Kt.of(!0)]},e.dropCursor=function(){return[Nn,Pn]},e.getDrawSelectionConfig=function(t){return t.facet(Sn)},e.getPanel=function(t,e){let i=t.plugin(dr),n=i?i.specs.indexOf(e):-1;return n>-1?i.panels[n]:null},e.getTooltip=function(t,e){let i=t.plugin(tr);if(!i)return null;let n=i.manager.tooltips.indexOf(e);return n<0?null:i.manager.tooltipViews[n]},e.gutter=function(t){return[Sr(),yr.of(Object.assign(Object.assign({},wr),t))]},e.gutterLineClass=vr,e.gutters=Sr,e.hasHoverTooltips=function(t){return t.facet(rr).some((t=>t))},e.highlightActiveLine=function(){return zn},e.highlightActiveLineGutter=function(){return Ir},e.highlightSpecialChars=function(t={}){return[Fn.of(t),_n||(_n=ee.fromClass(class{constructor(t){this.view=t,this.decorations=ct.none,this.decorationCache=Object.create(null),this.decorator=this.makeDecorator(t.state.facet(Fn)),this.decorations=this.decorator.createDeco(t)}makeDecorator(t){return new Dn({regexp:t.specialChars,decoration:(e,i,r)=>{let{doc:s}=i.state,o=n.codePointAt(e[0],0);if(9==o){let t=s.lineAt(r),e=i.state.tabSize,o=n.countColumn(t.text,e,r-t.from);return ct.replace({widget:new Vn((e-o%e)*this.view.defaultCharacterWidth/this.view.scaleX)})}return this.decorationCache[o]||(this.decorationCache[o]=ct.replace({widget:new qn(t,o)}))},boundary:t.replaceTabs?void 0:/[^]/})}update(t){let e=t.state.facet(Fn);t.startState.facet(Fn)!=e?(this.decorator=this.makeDecorator(e),this.decorations=this.decorator.createDeco(t.view)):this.decorations=this.decorator.updateDeco(t,this.decorations)}},{decorations:t=>t.decorations}))]},e.highlightTrailingWhitespace=function(){return qr},e.highlightWhitespace=function(){return _r},e.hoverTooltip=function(t,e={}){let i=n.StateEffect.define(),r=n.StateField.define({create:()=>[],update(t,r){if(t.length&&(e.hideOnChange&&(r.docChanged||r.selection)?t=[]:e.hideOn&&(t=t.filter((t=>!e.hideOn(r,t)))),r.docChanged)){let e=[];for(let i of t){let t=r.changes.mapPos(i.pos,-1,n.MapMode.TrackDel);if(null!=t){let n=Object.assign(Object.create(null),i);n.pos=t,null!=n.end&&(n.end=r.changes.mapPos(n.end)),e.push(n)}}t=e}for(let e of r.effects)e.is(i)&&(t=e.value),e.is(hr)&&(t=[]);return t},provide:t=>rr.from(t)});return[r,ee.define((n=>new lr(n,t,r,i,e.hoverTime||300))),or]},e.keymap=ln,e.layer=yn,e.lineNumberMarkers=Mr,e.lineNumbers=function(t={}){return[Nr.of(t),Sr(),Dr]},e.logException=Xt,e.panels=function(t){return t?[ur.of(t)]:[]},e.placeholder=function(t){return ee.fromClass(class{constructor(e){this.view=e,this.placeholder=t?ct.set([ct.widget({widget:new jn(t),side:1}).range(0)]):ct.none}get decorations(){return this.view.state.doc.length?ct.none:this.placeholder}},{decorations:t=>t.decorations})},e.rectangularSelection=function(t){let e=(null==t?void 0:t.eventFilter)||(t=>t.altKey&&0==t.button);return Zi.mouseSelectionStyle.of(((t,i)=>e(i)?function(t,e){let i=Kn(t,e),r=t.state.selection;return i?{update(t){if(t.docChanged){let e=t.changes.mapPos(t.startState.doc.line(i.line).from),n=t.state.doc.lineAt(e);i={line:n.number,col:i.col,off:Math.min(i.off,n.length)},r=r.map(t.changes)}},get(e,s,o){let l=Kn(t,e);if(!l)return r;let a=function(t,e,i){let r=Math.min(e.line,i.line),s=Math.max(e.line,i.line),o=[];if(e.off>Un||i.off>Un||e.col<0||i.col<0){let l=Math.min(e.off,i.off),a=Math.max(e.off,i.off);for(let e=r;e<=s;e++){let i=t.doc.line(e);i.length<=a&&o.push(n.EditorSelection.range(i.from+l,i.to+a))}}else{let l=Math.min(e.col,i.col),a=Math.max(e.col,i.col);for(let e=r;e<=s;e++){let i=t.doc.line(e),r=n.findColumn(i.text,l,t.tabSize,!0);if(r<0)o.push(n.EditorSelection.cursor(i.to));else{let e=n.findColumn(i.text,a,t.tabSize);o.push(n.EditorSelection.range(i.from+r,i.from+e))}}}return o}(t.state,i,l);return a.length?o?n.EditorSelection.create(a.concat(r.ranges)):n.EditorSelection.create(a):r}}:null}(t,i):null))},e.repositionTooltips=function(t){let e=t.plugin(tr);e&&e.maybeMeasure()},e.runScopeHandlers=function(t,e,i){return fn(hn(t.state),e,t,i)},e.scrollPastEnd=function(){return[Hn,re.of((t=>{var e;return(null===(e=t.plugin(Hn))||void 0===e?void 0:e.attrs)||null}))]},e.showPanel=mr,e.showTooltip=nr,e.tooltips=function(t={}){return Zn.of(t)}},2696:(t,e)=>{"use strict";const i=1024;let n=0;class r{constructor(t,e){this.from=t,this.to=e}}class s{constructor(t={}){this.id=n++,this.perNode=!!t.perNode,this.deserialize=t.deserialize||(()=>{throw new Error("This node type doesn't define a deserialize function")})}add(t){if(this.perNode)throw new RangeError("Can't add per-node props to node types");return"function"!=typeof t&&(t=a.match(t)),e=>{let i=t(e);return void 0===i?null:[this,i]}}}s.closedBy=new s({deserialize:t=>t.split(" ")}),s.openedBy=new s({deserialize:t=>t.split(" ")}),s.group=new s({deserialize:t=>t.split(" ")}),s.isolate=new s({deserialize:t=>{if(t&&"rtl"!=t&&"ltr"!=t&&"auto"!=t)throw new RangeError("Invalid value for isolate: "+t);return t||"auto"}}),s.contextHash=new s({perNode:!0}),s.lookAhead=new s({perNode:!0}),s.mounted=new s({perNode:!0});class o{constructor(t,e,i){this.tree=t,this.overlay=e,this.parser=i}static get(t){return t&&t.props&&t.props[s.mounted.id]}}const l=Object.create(null);class a{constructor(t,e,i,n=0){this.name=t,this.props=e,this.id=i,this.flags=n}static define(t){let e=t.props&&t.props.length?Object.create(null):l,i=(t.top?1:0)|(t.skipped?2:0)|(t.error?4:0)|(null==t.name?8:0),n=new a(t.name||"",e,t.id,i);if(t.props)for(let i of t.props)if(Array.isArray(i)||(i=i(n)),i){if(i[0].perNode)throw new RangeError("Can't store a per-node prop on a node type");e[i[0].id]=i[1]}return n}prop(t){return this.props[t.id]}get isTop(){return(1&this.flags)>0}get isSkipped(){return(2&this.flags)>0}get isError(){return(4&this.flags)>0}get isAnonymous(){return(8&this.flags)>0}is(t){if("string"==typeof t){if(this.name==t)return!0;let e=this.prop(s.group);return!!e&&e.indexOf(t)>-1}return this.id==t}static match(t){let e=Object.create(null);for(let i in t)for(let n of i.split(" "))e[n]=t[i];return t=>{for(let i=t.prop(s.group),n=-1;n<(i?i.length:0);n++){let r=e[n<0?t.name:i[n]];if(r)return r}}}}a.none=new a("",Object.create(null),0,8);class h{constructor(t){this.types=t;for(let e=0;e<t.length;e++)if(t[e].id!=e)throw new RangeError("Node type ids should correspond to array positions when creating a node set")}extend(...t){let e=[];for(let i of this.types){let n=null;for(let e of t){let t=e(i);t&&(n||(n=Object.assign({},i.props)),n[t[0].id]=t[1])}e.push(n?new a(i.name,n,i.id,i.flags):i)}return new h(e)}}const c=new WeakMap,u=new WeakMap;var d;e.IterMode=void 0,(d=e.IterMode||(e.IterMode={}))[d.ExcludeBuffers=1]="ExcludeBuffers",d[d.IncludeAnonymous=2]="IncludeAnonymous",d[d.IgnoreMounts=4]="IgnoreMounts",d[d.IgnoreOverlays=8]="IgnoreOverlays";class f{constructor(t,e,i,n,r){if(this.type=t,this.children=e,this.positions=i,this.length=n,this.props=null,r&&r.length){this.props=Object.create(null);for(let[t,e]of r)this.props["number"==typeof t?t:t.id]=e}}toString(){let t=o.get(this);if(t&&!t.overlay)return t.tree.toString();let e="";for(let t of this.children){let i=t.toString();i&&(e&&(e+=","),e+=i)}return this.type.name?(/\W/.test(this.type.name)&&!this.type.isError?JSON.stringify(this.type.name):this.type.name)+(e.length?"("+e+")":""):e}cursor(t=0){return new E(this.topNode,t)}cursorAt(t,e=0,i=0){let n=c.get(this)||this.topNode,r=new E(n);return r.moveTo(t,e),c.set(this,r._tree),r}get topNode(){return new y(this,0,0,null)}resolve(t,e=0){let i=v(c.get(this)||this.topNode,t,e,!1);return c.set(this,i),i}resolveInner(t,e=0){let i=v(u.get(this)||this.topNode,t,e,!0);return u.set(this,i),i}resolveStack(t,e=0){return function(t,e,i){let n=t.resolveInner(e,i),r=null;for(let t=n instanceof y?n:n.context.parent;t;t=t.parent)if(t.index<0){let s=t.parent;(r||(r=[n])).push(s.resolve(e,i)),t=s}else{let s=o.get(t.tree);if(s&&s.overlay&&s.overlay[0].from<=e&&s.overlay[s.overlay.length-1].to>=e){let o=new y(s.tree,s.overlay[0].from+t.from,-1,t);(r||(r=[n])).push(v(o,e,i,!1))}}return r?k(r):n}(this,t,e)}iterate(t){let{enter:i,leave:n,from:r=0,to:s=this.length}=t,o=t.mode||0,l=(o&e.IterMode.IncludeAnonymous)>0;for(let t=this.cursor(o|e.IterMode.IncludeAnonymous);;){let e=!1;if(t.from<=s&&t.to>=r&&(!l&&t.type.isAnonymous||!1!==i(t))){if(t.firstChild())continue;e=!0}for(;e&&n&&(l||!t.type.isAnonymous)&&n(t),!t.nextSibling();){if(!t.parent())return;e=!0}}}prop(t){return t.perNode?this.props?this.props[t.id]:void 0:this.type.prop(t)}get propValues(){let t=[];if(this.props)for(let e in this.props)t.push([+e,this.props[e]]);return t}balance(t={}){return this.children.length<=8?this:P(a.none,this.children,this.positions,0,this.children.length,0,this.length,((t,e,i)=>new f(this.type,t,e,i,this.propValues)),t.makeTree||((t,e,i)=>new f(a.none,t,e,i)))}static build(t){return function(t){var e;let{buffer:n,nodeSet:r,maxBufferLength:o=i,reused:l=[],minRepeatType:a=r.types.length}=t,h=Array.isArray(n)?new p(n,n.length):n,c=r.types,u=0,d=0;function g(t,e,i,n,p,S){let{id:x,start:C,end:k,size:A}=h,E=d;for(;A<0;){if(h.next(),-1==A){let e=l[x];return i.push(e),void n.push(C-t)}if(-3==A)return void(u=x);if(-4==A)return void(d=x);throw new RangeError(`Unrecognized record size: ${A}`)}let T,M,N=c[x],O=C-t;if(k-C<=o&&(M=function(t,e){let i=h.fork(),n=0,r=0,s=0,l=i.end-o,c={size:0,start:0,skip:0};t:for(let o=i.pos-t;i.pos>o;){let t=i.size;if(i.id==e&&t>=0){c.size=n,c.start=r,c.skip=s,s+=4,n+=4,i.next();continue}let h=i.pos-t;if(t<0||h<o||i.start<l)break;let u=i.id>=a?4:0,d=i.start;for(i.next();i.pos>h;){if(i.size<0){if(-3!=i.size)break t;u+=4}else i.id>=a&&(u+=4);i.next()}r=d,n+=t,s+=u}return(e<0||n==t)&&(c.size=n,c.start=r,c.skip=s),c.size>4?c:void 0}(h.pos-e,p))){let e=new Uint16Array(M.size-M.skip),i=h.pos-M.size,n=e.length;for(;h.pos>i;)n=b(M.start,e,n);T=new m(e,k-M.start,r),O=M.start-t}else{let t=h.pos-A;h.next();let e=[],i=[],n=x>=a?x:-1,r=0,l=k;for(;h.pos>t;)n>=0&&h.id==n&&h.size>=0?(h.end<=l-o&&(w(e,i,C,r,h.end,l,n,E),r=e.length,l=h.end),h.next()):S>2500?v(C,t,e,i):g(C,t,e,i,n,S+1);if(n>=0&&r>0&&r<e.length&&w(e,i,C,r,C,l,n,E),e.reverse(),i.reverse(),n>-1&&r>0){let t=function(t){return(e,i,n)=>{let r,o,l=0,a=e.length-1;if(a>=0&&(r=e[a])instanceof f){if(!a&&r.type==t&&r.length==n)return r;(o=r.prop(s.lookAhead))&&(l=i[a]+r.length+o)}return y(t,e,i,n,l)}}(N);T=P(N,e,i,0,e.length,0,k-C,t,t)}else T=y(N,e,i,k-C,E-k)}i.push(T),n.push(O)}function v(t,e,i,n){let s=[],l=0,a=-1;for(;h.pos>e;){let{id:t,start:e,end:i,size:n}=h;if(n>4)h.next();else{if(a>-1&&e<a)break;a<0&&(a=i-o),s.push(t,e,i),l++,h.next()}}if(l){let e=new Uint16Array(4*l),o=s[s.length-2];for(let t=s.length-3,i=0;t>=0;t-=3)e[i++]=s[t],e[i++]=s[t+1]-o,e[i++]=s[t+2]-o,e[i++]=i;i.push(new m(e,s[2]-o,r)),n.push(o-t)}}function w(t,e,i,n,s,o,l,a){let h=[],c=[];for(;t.length>n;)h.push(t.pop()),c.push(e.pop()+i-s);t.push(y(r.types[l],h,c,o-s,a-o)),e.push(s-i)}function y(t,e,i,n,r=0,o){if(u){let t=[s.contextHash,u];o=o?[t].concat(o):[t]}if(r>25){let t=[s.lookAhead,r];o=o?[t].concat(o):[t]}return new f(t,e,i,n,o)}function b(t,e,i){let{id:n,start:r,end:s,size:o}=h;if(h.next(),o>=0&&n<a){let l=i;if(o>4){let n=h.pos-(o-4);for(;h.pos>n;)i=b(t,e,i)}e[--i]=l,e[--i]=s-t,e[--i]=r-t,e[--i]=n}else-3==o?u=n:-4==o&&(d=n);return i}let S=[],x=[];for(;h.pos>0;)g(t.start||0,t.bufferStart||0,S,x,-1,0);let C=null!==(e=t.length)&&void 0!==e?e:S.length?x[0]+S[0].length:0;return new f(c[t.topID],S.reverse(),x.reverse(),C)}(t)}}f.empty=new f(a.none,[],[],0);class p{constructor(t,e){this.buffer=t,this.index=e}get id(){return this.buffer[this.index-4]}get start(){return this.buffer[this.index-3]}get end(){return this.buffer[this.index-2]}get size(){return this.buffer[this.index-1]}get pos(){return this.index}next(){this.index-=4}fork(){return new p(this.buffer,this.index)}}class m{constructor(t,e,i){this.buffer=t,this.length=e,this.set=i}get type(){return a.none}toString(){let t=[];for(let e=0;e<this.buffer.length;)t.push(this.childString(e)),e=this.buffer[e+3];return t.join(",")}childString(t){let e=this.buffer[t],i=this.buffer[t+3],n=this.set.types[e],r=n.name;if(/\W/.test(r)&&!n.isError&&(r=JSON.stringify(r)),i==(t+=4))return r;let s=[];for(;t<i;)s.push(this.childString(t)),t=this.buffer[t+3];return r+"("+s.join(",")+")"}findChild(t,e,i,n,r){let{buffer:s}=this,o=-1;for(let l=t;l!=e&&!(g(r,n,s[l+1],s[l+2])&&(o=l,i>0));l=s[l+3]);return o}slice(t,e,i){let n=this.buffer,r=new Uint16Array(e-t),s=0;for(let o=t,l=0;o<e;){r[l++]=n[o++],r[l++]=n[o++]-i;let e=r[l++]=n[o++]-i;r[l++]=n[o++]-t,s=Math.max(s,e)}return new m(r,s,this.set)}}function g(t,e,i,n){switch(t){case-2:return i<e;case-1:return n>=e&&i<e;case 0:return i<e&&n>e;case 1:return i<=e&&n>e;case 2:return n>e;case 4:return!0}}function v(t,i,n,r){for(var s;t.from==t.to||(n<1?t.from>=i:t.from>i)||(n>-1?t.to<=i:t.to<i);){let e=!r&&t instanceof y&&t.index<0?null:t.parent;if(!e)return t;t=e}let o=r?0:e.IterMode.IgnoreOverlays;if(r)for(let e=t,r=e.parent;r;e=r,r=e.parent)e instanceof y&&e.index<0&&(null===(s=r.enter(i,n,o))||void 0===s?void 0:s.from)!=e.from&&(t=r);for(;;){let e=t.enter(i,n,o);if(!e)return t;t=e}}class w{cursor(t=0){return new E(this,t)}getChild(t,e=null,i=null){let n=b(this,t,e,i);return n.length?n[0]:null}getChildren(t,e=null,i=null){return b(this,t,e,i)}resolve(t,e=0){return v(this,t,e,!1)}resolveInner(t,e=0){return v(this,t,e,!0)}matchContext(t){return S(this,t)}enterUnfinishedNodesBefore(t){let e=this.childBefore(t),i=this;for(;e;){let t=e.lastChild;if(!t||t.to!=e.to)break;t.type.isError&&t.from==t.to?(i=e,e=t.prevSibling):e=t}return i}get node(){return this}get next(){return this.parent}}class y extends w{constructor(t,e,i,n){super(),this._tree=t,this.from=e,this.index=i,this._parent=n}get type(){return this._tree.type}get name(){return this._tree.type.name}get to(){return this.from+this._tree.length}nextChild(t,i,n,r,s=0){for(let l=this;;){for(let{children:a,positions:h}=l._tree,c=i>0?a.length:-1;t!=c;t+=i){let c=a[t],u=h[t]+l.from;if(g(r,n,u,u+c.length))if(c instanceof m){if(s&e.IterMode.ExcludeBuffers)continue;let o=c.findChild(0,c.buffer.length,i,n-u,r);if(o>-1)return new C(new x(l,c,t,u),null,o)}else if(s&e.IterMode.IncludeAnonymous||!c.type.isAnonymous||T(c)){let a;if(!(s&e.IterMode.IgnoreMounts)&&(a=o.get(c))&&!a.overlay)return new y(a.tree,u,t,l);let h=new y(c,u,t,l);return s&e.IterMode.IncludeAnonymous||!h.type.isAnonymous?h:h.nextChild(i<0?c.children.length-1:0,i,n,r)}}if(s&e.IterMode.IncludeAnonymous||!l.type.isAnonymous)return null;if(t=l.index>=0?l.index+i:i<0?-1:l._parent._tree.children.length,l=l._parent,!l)return null}}get firstChild(){return this.nextChild(0,1,0,4)}get lastChild(){return this.nextChild(this._tree.children.length-1,-1,0,4)}childAfter(t){return this.nextChild(0,1,t,2)}childBefore(t){return this.nextChild(this._tree.children.length-1,-1,t,-2)}enter(t,i,n=0){let r;if(!(n&e.IterMode.IgnoreOverlays)&&(r=o.get(this._tree))&&r.overlay){let e=t-this.from;for(let{from:t,to:n}of r.overlay)if((i>0?t<=e:t<e)&&(i<0?n>=e:n>e))return new y(r.tree,r.overlay[0].from+this.from,-1,this)}return this.nextChild(0,1,t,i,n)}nextSignificantParent(){let t=this;for(;t.type.isAnonymous&&t._parent;)t=t._parent;return t}get parent(){return this._parent?this._parent.nextSignificantParent():null}get nextSibling(){return this._parent&&this.index>=0?this._parent.nextChild(this.index+1,1,0,4):null}get prevSibling(){return this._parent&&this.index>=0?this._parent.nextChild(this.index-1,-1,0,4):null}get tree(){return this._tree}toTree(){return this._tree}toString(){return this._tree.toString()}}function b(t,e,i,n){let r=t.cursor(),s=[];if(!r.firstChild())return s;if(null!=i)for(let t=!1;!t;)if(t=r.type.is(i),!r.nextSibling())return s;for(;;){if(null!=n&&r.type.is(n))return s;if(r.type.is(e)&&s.push(r.node),!r.nextSibling())return null==n?s:[]}}function S(t,e,i=e.length-1){for(let n=t.parent;i>=0;n=n.parent){if(!n)return!1;if(!n.type.isAnonymous){if(e[i]&&e[i]!=n.name)return!1;i--}}return!0}class x{constructor(t,e,i,n){this.parent=t,this.buffer=e,this.index=i,this.start=n}}class C extends w{get name(){return this.type.name}get from(){return this.context.start+this.context.buffer.buffer[this.index+1]}get to(){return this.context.start+this.context.buffer.buffer[this.index+2]}constructor(t,e,i){super(),this.context=t,this._parent=e,this.index=i,this.type=t.buffer.set.types[t.buffer.buffer[i]]}child(t,e,i){let{buffer:n}=this.context,r=n.findChild(this.index+4,n.buffer[this.index+3],t,e-this.context.start,i);return r<0?null:new C(this.context,this,r)}get firstChild(){return this.child(1,0,4)}get lastChild(){return this.child(-1,0,4)}childAfter(t){return this.child(1,t,2)}childBefore(t){return this.child(-1,t,-2)}enter(t,i,n=0){if(n&e.IterMode.ExcludeBuffers)return null;let{buffer:r}=this.context,s=r.findChild(this.index+4,r.buffer[this.index+3],i>0?1:-1,t-this.context.start,i);return s<0?null:new C(this.context,this,s)}get parent(){return this._parent||this.context.parent.nextSignificantParent()}externalSibling(t){return this._parent?null:this.context.parent.nextChild(this.context.index+t,t,0,4)}get nextSibling(){let{buffer:t}=this.context,e=t.buffer[this.index+3];return e<(this._parent?t.buffer[this._parent.index+3]:t.buffer.length)?new C(this.context,this._parent,e):this.externalSibling(1)}get prevSibling(){let{buffer:t}=this.context,e=this._parent?this._parent.index+4:0;return this.index==e?this.externalSibling(-1):new C(this.context,this._parent,t.findChild(e,this.index,-1,0,4))}get tree(){return null}toTree(){let t=[],e=[],{buffer:i}=this.context,n=this.index+4,r=i.buffer[this.index+3];if(r>n){let s=i.buffer[this.index+1];t.push(i.slice(n,r,s)),e.push(0)}return new f(this.type,t,e,this.to-this.from)}toString(){return this.context.buffer.childString(this.index)}}function k(t){if(!t.length)return null;let e=0,i=t[0];for(let n=1;n<t.length;n++){let r=t[n];(r.from>i.from||r.to<i.to)&&(i=r,e=n)}let n=i instanceof y&&i.index<0?null:i.parent,r=t.slice();return n?r[e]=n:r.splice(e,1),new A(r,i)}class A{constructor(t,e){this.heads=t,this.node=e}get next(){return k(this.heads)}}class E{get name(){return this.type.name}constructor(t,e=0){if(this.mode=e,this.buffer=null,this.stack=[],this.index=0,this.bufferNode=null,t instanceof y)this.yieldNode(t);else{this._tree=t.context.parent,this.buffer=t.context;for(let e=t._parent;e;e=e._parent)this.stack.unshift(e.index);this.bufferNode=t,this.yieldBuf(t.index)}}yieldNode(t){return!!t&&(this._tree=t,this.type=t.type,this.from=t.from,this.to=t.to,!0)}yieldBuf(t,e){this.index=t;let{start:i,buffer:n}=this.buffer;return this.type=e||n.set.types[n.buffer[t]],this.from=i+n.buffer[t+1],this.to=i+n.buffer[t+2],!0}yield(t){return!!t&&(t instanceof y?(this.buffer=null,this.yieldNode(t)):(this.buffer=t.context,this.yieldBuf(t.index,t.type)))}toString(){return this.buffer?this.buffer.buffer.childString(this.index):this._tree.toString()}enterChild(t,e,i){if(!this.buffer)return this.yield(this._tree.nextChild(t<0?this._tree._tree.children.length-1:0,t,e,i,this.mode));let{buffer:n}=this.buffer,r=n.findChild(this.index+4,n.buffer[this.index+3],t,e-this.buffer.start,i);return!(r<0)&&(this.stack.push(this.index),this.yieldBuf(r))}firstChild(){return this.enterChild(1,0,4)}lastChild(){return this.enterChild(-1,0,4)}childAfter(t){return this.enterChild(1,t,2)}childBefore(t){return this.enterChild(-1,t,-2)}enter(t,i,n=this.mode){return this.buffer?!(n&e.IterMode.ExcludeBuffers)&&this.enterChild(1,t,i):this.yield(this._tree.enter(t,i,n))}parent(){if(!this.buffer)return this.yieldNode(this.mode&e.IterMode.IncludeAnonymous?this._tree._parent:this._tree.parent);if(this.stack.length)return this.yieldBuf(this.stack.pop());let t=this.mode&e.IterMode.IncludeAnonymous?this.buffer.parent:this.buffer.parent.nextSignificantParent();return this.buffer=null,this.yieldNode(t)}sibling(t){if(!this.buffer)return!!this._tree._parent&&this.yield(this._tree.index<0?null:this._tree._parent.nextChild(this._tree.index+t,t,0,4,this.mode));let{buffer:e}=this.buffer,i=this.stack.length-1;if(t<0){let t=i<0?0:this.stack[i]+4;if(this.index!=t)return this.yieldBuf(e.findChild(t,this.index,-1,0,4))}else{let t=e.buffer[this.index+3];if(t<(i<0?e.buffer.length:e.buffer[this.stack[i]+3]))return this.yieldBuf(t)}return i<0&&this.yield(this.buffer.parent.nextChild(this.buffer.index+t,t,0,4,this.mode))}nextSibling(){return this.sibling(1)}prevSibling(){return this.sibling(-1)}atLastNode(t){let i,n,{buffer:r}=this;if(r){if(t>0){if(this.index<r.buffer.buffer.length)return!1}else for(let t=0;t<this.index;t++)if(r.buffer.buffer[t+3]<this.index)return!1;({index:i,parent:n}=r)}else({index:i,_parent:n}=this._tree);for(;n;({index:i,_parent:n}=n))if(i>-1)for(let r=i+t,s=t<0?-1:n._tree.children.length;r!=s;r+=t){let t=n._tree.children[r];if(this.mode&e.IterMode.IncludeAnonymous||t instanceof m||!t.type.isAnonymous||T(t))return!1}return!0}move(t,e){if(e&&this.enterChild(t,0,4))return!0;for(;;){if(this.sibling(t))return!0;if(this.atLastNode(t)||!this.parent())return!1}}next(t=!0){return this.move(1,t)}prev(t=!0){return this.move(-1,t)}moveTo(t,e=0){for(;(this.from==this.to||(e<1?this.from>=t:this.from>t)||(e>-1?this.to<=t:this.to<t))&&this.parent(););for(;this.enterChild(1,t,e););return this}get node(){if(!this.buffer)return this._tree;let t=this.bufferNode,e=null,i=0;if(t&&t.context==this.buffer)t:for(let n=this.index,r=this.stack.length;r>=0;){for(let s=t;s;s=s._parent)if(s.index==n){if(n==this.index)return s;e=s,i=r+1;break t}n=this.stack[--r]}for(let t=i;t<this.stack.length;t++)e=new C(this.buffer,e,this.stack[t]);return this.bufferNode=new C(this.buffer,e,this.index)}get tree(){return this.buffer?null:this._tree._tree}iterate(t,e){for(let i=0;;){let n=!1;if(this.type.isAnonymous||!1!==t(this)){if(this.firstChild()){i++;continue}this.type.isAnonymous||(n=!0)}for(;n&&e&&e(this),n=this.type.isAnonymous,!this.nextSibling();){if(!i)return;this.parent(),i--,n=!0}}}matchContext(t){if(!this.buffer)return S(this.node,t);let{buffer:e}=this.buffer,{types:i}=e.set;for(let n=t.length-1,r=this.stack.length-1;n>=0;r--){if(r<0)return S(this.node,t,n);let s=i[e.buffer[this.stack[r]]];if(!s.isAnonymous){if(t[n]&&t[n]!=s.name)return!1;n--}}return!0}}function T(t){return t.children.some((t=>t instanceof m||!t.type.isAnonymous||T(t)))}const M=new WeakMap;function N(t,e){if(!t.isAnonymous||e instanceof m||e.type!=t)return 1;let i=M.get(e);if(null==i){i=1;for(let n of e.children){if(n.type!=t||!(n instanceof f)){i=1;break}i+=N(t,n)}M.set(e,i)}return i}function P(t,e,i,n,r,s,o,l,a){let h=0;for(let i=n;i<r;i++)h+=N(t,e[i]);let c=Math.ceil(1.5*h/8),u=[],d=[];return function e(i,n,r,o,l){for(let h=r;h<o;){let r=h,f=n[h],p=N(t,i[h]);for(h++;h<o;h++){let e=N(t,i[h]);if(p+e>=c)break;p+=e}if(h==r+1){if(p>c){let t=i[r];e(t.children,t.positions,0,t.children.length,n[r]+l);continue}u.push(i[r])}else{let e=n[h-1]+i[h-1].length-f;u.push(P(t,i,n,r,h,f,e,null,a))}d.push(f+l-s)}}(e,i,n,r,0),(l||a)(u,d,o)}class O{constructor(t,e,i,n,r=!1,s=!1){this.from=t,this.to=e,this.tree=i,this.offset=n,this.open=(r?1:0)|(s?2:0)}get openStart(){return(1&this.open)>0}get openEnd(){return(2&this.open)>0}static addTree(t,e=[],i=!1){let n=[new O(0,t.length,t,0,!1,i)];for(let i of e)i.to>t.length&&n.push(i);return n}static applyChanges(t,e,i=128){if(!e.length)return t;let n=[],r=1,s=t.length?t[0]:null;for(let o=0,l=0,a=0;;o++){let h=o<e.length?e[o]:null,c=h?h.fromA:1e9;if(c-l>=i)for(;s&&s.from<c;){let e=s;if(l>=e.from||c<=e.to||a){let t=Math.max(e.from,l)-a,i=Math.min(e.to,c)-a;e=t>=i?null:new O(t,i,e.tree,e.offset+a,o>0,!!h)}if(e&&n.push(e),s.to>c)break;s=r<t.length?t[r++]:null}if(!h)break;l=h.toA,a=h.toA-h.toB}return n}}class D{constructor(t){this.string=t}get length(){return this.string.length}chunk(t){return this.string.slice(t)}get lineChunks(){return!1}read(t,e){return this.string.slice(t,e)}}class L{constructor(t,e,i,n,r){this.parser=t,this.parse=e,this.overlay=i,this.target=n,this.from=r}}function R(t){if(!t.length||t.some((t=>t.from>=t.to)))throw new RangeError("Invalid inner parse ranges given: "+JSON.stringify(t))}class I{constructor(t,e,i,n,r,s,o){this.parser=t,this.predicate=e,this.mounts=i,this.index=n,this.start=r,this.target=s,this.prev=o,this.depth=0,this.ranges=[]}}const B=new s({perNode:!0});class F{constructor(t,e,i,n,r){this.nest=e,this.input=i,this.fragments=n,this.ranges=r,this.inner=[],this.innerDone=0,this.baseTree=null,this.stoppedAt=null,this.baseParse=t}advance(){if(this.baseParse){let t=this.baseParse.advance();if(!t)return null;if(this.baseParse=null,this.baseTree=t,this.startInner(),null!=this.stoppedAt)for(let t of this.inner)t.parse.stopAt(this.stoppedAt)}if(this.innerDone==this.inner.length){let t=this.baseTree;return null!=this.stoppedAt&&(t=new f(t.type,t.children,t.positions,t.length,t.propValues.concat([[B,this.stoppedAt]]))),t}let t=this.inner[this.innerDone],e=t.parse.advance();if(e){this.innerDone++;let i=Object.assign(Object.create(null),t.target.props);i[s.mounted.id]=new o(e,t.overlay,t.parser),t.target.props=i}return null}get parsedPos(){if(this.baseParse)return 0;let t=this.input.length;for(let e=this.innerDone;e<this.inner.length;e++)this.inner[e].from<t&&(t=Math.min(t,this.inner[e].parse.parsedPos));return t}stopAt(t){if(this.stoppedAt=t,this.baseParse)this.baseParse.stopAt(t);else for(let e=this.innerDone;e<this.inner.length;e++)this.inner[e].parse.stopAt(t)}startInner(){let t=new W(this.fragments),i=null,n=null,s=new E(new y(this.baseTree,this.ranges[0].from,0,null),e.IterMode.IncludeAnonymous|e.IterMode.IgnoreMounts);t:for(let e,o;;){let l,a=!0;if(null!=this.stoppedAt&&s.from>=this.stoppedAt)a=!1;else if(t.hasNode(s)){if(i){let t=i.mounts.find((t=>t.frag.from<=s.from&&t.frag.to>=s.to&&t.mount.overlay));if(t)for(let e of t.mount.overlay){let n=e.from+t.pos,r=e.to+t.pos;n>=s.from&&r<=s.to&&!i.ranges.some((t=>t.from<r&&t.to>n))&&i.ranges.push({from:n,to:r})}}a=!1}else if(n&&(o=_(n.ranges,s.from,s.to)))a=2!=o;else if(!s.type.isAnonymous&&(e=this.nest(s,this.input))&&(s.from<s.to||!e.overlay)){s.tree||V(s);let o=t.findMounts(s.from,e.parser);if("function"==typeof e.overlay)i=new I(e.parser,e.overlay,o,this.inner.length,s.from,s.tree,i);else{let t=z(this.ranges,e.overlay||(s.from<s.to?[new r(s.from,s.to)]:[]));t.length&&R(t),!t.length&&e.overlay||this.inner.push(new L(e.parser,t.length?e.parser.startParse(this.input,U(o,t),t):e.parser.startParse(""),e.overlay?e.overlay.map((t=>new r(t.from-s.from,t.to-s.from))):null,s.tree,t.length?t[0].from:s.from)),e.overlay?t.length&&(n={ranges:t,depth:0,prev:n}):a=!1}}else i&&(l=i.predicate(s))&&(!0===l&&(l=new r(s.from,s.to)),l.from<l.to&&i.ranges.push(l));if(a&&s.firstChild())i&&i.depth++,n&&n.depth++;else for(;!s.nextSibling();){if(!s.parent())break t;if(i&&! --i.depth){let t=z(this.ranges,i.ranges);t.length&&(R(t),this.inner.splice(i.index,0,new L(i.parser,i.parser.startParse(this.input,U(i.mounts,t),t),i.ranges.map((t=>new r(t.from-i.start,t.to-i.start))),i.target,t[0].from))),i=i.prev}n&&! --n.depth&&(n=n.prev)}}}}function _(t,e,i){for(let n of t){if(n.from>=i)break;if(n.to>e)return n.from<=e&&n.to>=i?2:1}return 0}function q(t,e,i,n,r,s){if(e<i){let o=t.buffer[e+1];n.push(t.slice(e,i,o)),r.push(o-s)}}function V(t){let{node:e}=t,i=[],n=e.context.buffer;do{i.push(t.index),t.parent()}while(!t.tree);let r=t.tree,s=r.children.indexOf(n),o=r.children[s],l=o.buffer,h=[s];r.children[s]=function t(n,r,s,a,c,u){let d=i[u],p=[],m=[];q(o,n,d,p,m,a);let g=l[d+1],v=l[d+2];h.push(p.length);let w=u?t(d+4,l[d+3],o.set.types[l[d]],g,v-g,u-1):e.toTree();return p.push(w),m.push(g-a),q(o,l[d+3],r,p,m,a),new f(s,p,m,c)}(0,l.length,a.none,0,o.length,i.length-1);for(let e of h){let i=t.tree.children[e],n=t.tree.positions[e];t.yield(new y(i,n+t.from,e,t._tree))}}class H{constructor(t,i){this.offset=i,this.done=!1,this.cursor=t.cursor(e.IterMode.IncludeAnonymous|e.IterMode.IgnoreMounts)}moveTo(t){let{cursor:i}=this,n=t-this.offset;for(;!this.done&&i.from<n;)i.to>=t&&i.enter(n,1,e.IterMode.IgnoreOverlays|e.IterMode.ExcludeBuffers)||i.next(!1)||(this.done=!0)}hasNode(t){if(this.moveTo(t.from),!this.done&&this.cursor.from+this.offset==t.from&&this.cursor.tree)for(let e=this.cursor.tree;;){if(e==t.tree)return!0;if(!(e.children.length&&0==e.positions[0]&&e.children[0]instanceof f))break;e=e.children[0]}return!1}}class W{constructor(t){var e;if(this.fragments=t,this.curTo=0,this.fragI=0,t.length){let i=this.curFrag=t[0];this.curTo=null!==(e=i.tree.prop(B))&&void 0!==e?e:i.to,this.inner=new H(i.tree,-i.offset)}else this.curFrag=this.inner=null}hasNode(t){for(;this.curFrag&&t.from>=this.curTo;)this.nextFrag();return this.curFrag&&this.curFrag.from<=t.from&&this.curTo>=t.to&&this.inner.hasNode(t)}nextFrag(){var t;if(this.fragI++,this.fragI==this.fragments.length)this.curFrag=this.inner=null;else{let e=this.curFrag=this.fragments[this.fragI];this.curTo=null!==(t=e.tree.prop(B))&&void 0!==t?t:e.to,this.inner=new H(e.tree,-e.offset)}}findMounts(t,e){var i;let n=[];if(this.inner){this.inner.cursor.moveTo(t,1);for(let t=this.inner.cursor.node;t;t=t.parent){let r=null===(i=t.tree)||void 0===i?void 0:i.prop(s.mounted);if(r&&r.parser==e)for(let e=this.fragI;e<this.fragments.length;e++){let i=this.fragments[e];if(i.from>=t.to)break;i.tree==this.curFrag.tree&&n.push({frag:i,pos:t.from-i.offset,mount:r})}}}return n}}function z(t,e){let i=null,n=e;for(let s=1,o=0;s<t.length;s++){let l=t[s-1].to,a=t[s].from;for(;o<n.length;o++){let t=n[o];if(t.from>=a)break;t.to<=l||(i||(n=i=e.slice()),t.from<l?(i[o]=new r(t.from,l),t.to>a&&i.splice(o+1,0,new r(a,t.to))):t.to>a?i[o--]=new r(a,t.to):i.splice(o--,1))}}return n}function j(t,e,i,n){let s=0,o=0,l=!1,a=!1,h=-1e9,c=[];for(;;){let u=s==t.length?1e9:l?t[s].to:t[s].from,d=o==e.length?1e9:a?e[o].to:e[o].from;if(l!=a){let t=Math.max(h,i),e=Math.min(u,d,n);t<e&&c.push(new r(t,e))}if(h=Math.min(u,d),1e9==h)break;u==h&&(l?(l=!1,s++):l=!0),d==h&&(a?(a=!1,o++):a=!0)}return c}function U(t,e){let i=[];for(let{pos:n,mount:s,frag:o}of t){let t=n+(s.overlay?s.overlay[0].from:0),l=t+s.tree.length,a=Math.max(o.from,t),h=Math.min(o.to,l);if(s.overlay){let l=j(e,s.overlay.map((t=>new r(t.from+n,t.to+n))),a,h);for(let e=0,n=a;;e++){let r=e==l.length,a=r?h:l[e].from;if(a>n&&i.push(new O(n,a,s.tree,-t,o.from>=n||o.openStart,o.to<=a||o.openEnd)),r)break;n=l[e].to}}else i.push(new O(a,h,s.tree,-t,o.from>=t||o.openStart,o.to<=l||o.openEnd))}return i}e.DefaultBufferLength=i,e.MountedTree=o,e.NodeProp=s,e.NodeSet=h,e.NodeType=a,e.NodeWeakMap=class{constructor(){this.map=new WeakMap}setBuffer(t,e,i){let n=this.map.get(t);n||this.map.set(t,n=new Map),n.set(e,i)}getBuffer(t,e){let i=this.map.get(t);return i&&i.get(e)}set(t,e){t instanceof C?this.setBuffer(t.context.buffer,t.index,e):t instanceof y&&this.map.set(t.tree,e)}get(t){return t instanceof C?this.getBuffer(t.context.buffer,t.index):t instanceof y?this.map.get(t.tree):void 0}cursorSet(t,e){t.buffer?this.setBuffer(t.buffer.buffer,t.index,e):this.map.set(t.tree,e)}cursorGet(t){return t.buffer?this.getBuffer(t.buffer.buffer,t.index):this.map.get(t.tree)}},e.Parser=class{startParse(t,e,i){return"string"==typeof t&&(t=new D(t)),i=i?i.length?i.map((t=>new r(t.from,t.to))):[new r(0,0)]:[new r(0,t.length)],this.createParse(t,e||[],i)}parse(t,e,i){let n=this.startParse(t,e,i);for(;;){let t=n.advance();if(t)return t}}},e.Tree=f,e.TreeBuffer=m,e.TreeCursor=E,e.TreeFragment=O,e.parseMixed=function(t){return(e,i,n,r)=>new F(e,t,i,n,r)}},7359:(t,e,i)=>{"use strict";var n=i(2696);let r=0;class s{constructor(t,e,i){this.set=t,this.base=e,this.modified=i,this.id=r++}static define(t){if(null==t?void 0:t.base)throw new Error("Can not derive from a modified tag");let e=new s([],null,[]);if(e.set.push(e),t)for(let i of t.set)e.set.push(i);return e}static defineModifier(){let t=new l;return e=>e.modified.indexOf(t)>-1?e:l.get(e.base||e,e.modified.concat(t).sort(((t,e)=>t.id-e.id)))}}let o=0;class l{constructor(){this.instances=[],this.id=o++}static get(t,e){if(!e.length)return t;let i=e[0].instances.find((i=>{return i.base==t&&(n=e,r=i.modified,n.length==r.length&&n.every(((t,e)=>t==r[e])));var n,r}));if(i)return i;let n=[],r=new s(n,t,e);for(let t of e)t.instances.push(r);let o=function(t){let e=[[]];for(let i=0;i<t.length;i++)for(let n=0,r=e.length;n<r;n++)e.push(e[n].concat(t[i]));return e.sort(((t,e)=>e.length-t.length))}(e);for(let e of t.set)if(!e.modified.length)for(let t of o)n.push(l.get(e,t));return r}}const a=new n.NodeProp;class h{constructor(t,e,i,n){this.tags=t,this.mode=e,this.context=i,this.next=n}get opaque(){return 0==this.mode}get inherit(){return 1==this.mode}sort(t){return!t||t.depth<this.depth?(this.next=t,this):(t.next=this.sort(t.next),t)}get depth(){return this.context?this.context.length:0}}function c(t,e){let i=Object.create(null);for(let e of t)if(Array.isArray(e.tag))for(let t of e.tag)i[t.id]=e.class;else i[e.tag.id]=e.class;let{scope:n,all:r=null}=e||{};return{style:t=>{let e=r;for(let n of t)for(let t of n.set){let n=i[t.id];if(n){e=e?e+" "+n:n;break}}return e},scope:n}}function u(t,e,i,n=0,r=t.length){let s=new d(n,Array.isArray(e)?e:[e],i);s.highlightRange(t.cursor(),n,r,"",s.highlighters),s.flush(r)}h.empty=new h([],2,null);class d{constructor(t,e,i){this.at=t,this.highlighters=e,this.span=i,this.class=""}startSpan(t,e){e!=this.class&&(this.flush(t),t>this.at&&(this.at=t),this.class=e)}flush(t){t>this.at&&this.class&&this.span(this.at,t,this.class)}highlightRange(t,e,i,r,s){let{type:o,from:l,to:a}=t;if(l>=i||a<=e)return;o.isTop&&(s=this.highlighters.filter((t=>!t.scope||t.scope(o))));let c=r,u=f(t)||h.empty,d=function(t,e){let i=null;for(let n of t){let t=n.style(e);t&&(i=i?i+" "+t:t)}return i}(s,u.tags);if(d&&(c&&(c+=" "),c+=d,1==u.mode&&(r+=(r?" ":"")+d)),this.startSpan(Math.max(e,l),c),u.opaque)return;let p=t.tree&&t.tree.prop(n.NodeProp.mounted);if(p&&p.overlay){let n=t.node.enter(p.overlay[0].from+l,1),o=this.highlighters.filter((t=>!t.scope||t.scope(p.tree.type))),h=t.firstChild();for(let u=0,d=l;;u++){let f=u<p.overlay.length?p.overlay[u]:null,m=f?f.from+l:a,g=Math.max(e,d),v=Math.min(i,m);if(g<v&&h)for(;t.from<v&&(this.highlightRange(t,g,v,r,s),this.startSpan(Math.min(v,t.to),c),!(t.to>=m)&&t.nextSibling()););if(!f||m>i)break;d=f.to+l,d>e&&(this.highlightRange(n.cursor(),Math.max(e,f.from+l),Math.min(i,d),"",o),this.startSpan(Math.min(i,d),c))}h&&t.parent()}else if(t.firstChild()){p&&(r="");do{if(!(t.to<=e)){if(t.from>=i)break;this.highlightRange(t,e,i,r,s),this.startSpan(Math.min(i,t.to),c)}}while(t.nextSibling());t.parent()}}}function f(t){let e=t.type.prop(a);for(;e&&e.context&&!t.matchContext(e.context);)e=e.next;return e||null}const p=s.define,m=p(),g=p(),v=p(g),w=p(g),y=p(),b=p(y),S=p(y),x=p(),C=p(x),k=p(),A=p(),E=p(),T=p(E),M=p(),N={comment:m,lineComment:p(m),blockComment:p(m),docComment:p(m),name:g,variableName:p(g),typeName:v,tagName:p(v),propertyName:w,attributeName:p(w),className:p(g),labelName:p(g),namespace:p(g),macroName:p(g),literal:y,string:b,docString:p(b),character:p(b),attributeValue:p(b),number:S,integer:p(S),float:p(S),bool:p(y),regexp:p(y),escape:p(y),color:p(y),url:p(y),keyword:k,self:p(k),null:p(k),atom:p(k),unit:p(k),modifier:p(k),operatorKeyword:p(k),controlKeyword:p(k),definitionKeyword:p(k),moduleKeyword:p(k),operator:A,derefOperator:p(A),arithmeticOperator:p(A),logicOperator:p(A),bitwiseOperator:p(A),compareOperator:p(A),updateOperator:p(A),definitionOperator:p(A),typeOperator:p(A),controlOperator:p(A),punctuation:E,separator:p(E),bracket:T,angleBracket:p(T),squareBracket:p(T),paren:p(T),brace:p(T),content:x,heading:C,heading1:p(C),heading2:p(C),heading3:p(C),heading4:p(C),heading5:p(C),heading6:p(C),contentSeparator:p(x),list:p(x),quote:p(x),emphasis:p(x),strong:p(x),link:p(x),monospace:p(x),strikethrough:p(x),inserted:p(),deleted:p(),changed:p(),invalid:p(),meta:M,documentMeta:p(M),annotation:p(M),processingInstruction:p(M),definition:s.defineModifier(),constant:s.defineModifier(),function:s.defineModifier(),standard:s.defineModifier(),local:s.defineModifier(),special:s.defineModifier()},P=c([{tag:N.link,class:"tok-link"},{tag:N.heading,class:"tok-heading"},{tag:N.emphasis,class:"tok-emphasis"},{tag:N.strong,class:"tok-strong"},{tag:N.keyword,class:"tok-keyword"},{tag:N.atom,class:"tok-atom"},{tag:N.bool,class:"tok-bool"},{tag:N.url,class:"tok-url"},{tag:N.labelName,class:"tok-labelName"},{tag:N.inserted,class:"tok-inserted"},{tag:N.deleted,class:"tok-deleted"},{tag:N.literal,class:"tok-literal"},{tag:N.string,class:"tok-string"},{tag:N.number,class:"tok-number"},{tag:[N.regexp,N.escape,N.special(N.string)],class:"tok-string2"},{tag:N.variableName,class:"tok-variableName"},{tag:N.local(N.variableName),class:"tok-variableName tok-local"},{tag:N.definition(N.variableName),class:"tok-variableName tok-definition"},{tag:N.special(N.variableName),class:"tok-variableName2"},{tag:N.definition(N.propertyName),class:"tok-propertyName tok-definition"},{tag:N.typeName,class:"tok-typeName"},{tag:N.namespace,class:"tok-namespace"},{tag:N.className,class:"tok-className"},{tag:N.macroName,class:"tok-macroName"},{tag:N.propertyName,class:"tok-propertyName"},{tag:N.operator,class:"tok-operator"},{tag:N.comment,class:"tok-comment"},{tag:N.meta,class:"tok-meta"},{tag:N.invalid,class:"tok-invalid"},{tag:N.punctuation,class:"tok-punctuation"}]);e.Tag=s,e.classHighlighter=P,e.getStyleTags=f,e.highlightCode=function(t,e,i,n,r,s=0,o=t.length){let l=s;function a(e,i){if(!(e<=l)){for(let s=t.slice(l,e),o=0;;){let t=s.indexOf("\n",o),e=t<0?s.length:t;if(e>o&&n(s.slice(o,e),i),t<0)break;r(),o=t+1}l=e}}u(e,i,((t,e,i)=>{a(t,""),a(e,i)}),s,o),a(o,"")},e.highlightTree=u,e.styleTags=function(t){let e=Object.create(null);for(let i in t){let n=t[i];Array.isArray(n)||(n=[n]);for(let t of i.split(" "))if(t){let i=[],r=2,s=t;for(let e=0;;){if("..."==s&&e>0&&e+3==t.length){r=1;break}let n=/^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(s);if(!n)throw new RangeError("Invalid path: "+t);if(i.push("*"==n[0]?"":'"'==n[0][0]?JSON.parse(n[0]):n[0]),e+=n[0].length,e==t.length)break;let o=t[e++];if(e==t.length&&"!"==o){r=0;break}if("/"!=o)throw new RangeError("Invalid path: "+t);s=t.slice(e)}let o=i.length-1,l=i[o];if(!l)throw new RangeError("Invalid path: "+t);let a=new h(n,r,o>0?i.slice(0,o):null);e[l]=a.sort(e[l])}}return a.add(e)},e.tagHighlighter=c,e.tags=N},70:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=i(1506),r=i(9064),s=i(2533),o=i(9277),l=i(8539),a=i(591),h=i(4126);const c=[n.lineNumbers(),n.highlightActiveLineGutter(),n.highlightSpecialChars(),o.history(),s.foldGutter(),n.drawSelection(),n.dropCursor(),r.EditorState.allowMultipleSelections.of(!0),s.indentOnInput(),s.syntaxHighlighting(s.defaultHighlightStyle,{fallback:!0}),s.bracketMatching(),a.closeBrackets(),a.autocompletion(),n.rectangularSelection(),n.crosshairCursor(),n.highlightActiveLine(),l.highlightSelectionMatches(),n.keymap.of([...a.closeBracketsKeymap,...o.defaultKeymap,...l.searchKeymap,...o.historyKeymap,...s.foldKeymap,...a.completionKeymap,...h.lintKeymap])],u=[n.highlightSpecialChars(),o.history(),n.drawSelection(),s.syntaxHighlighting(s.defaultHighlightStyle,{fallback:!0}),n.keymap.of([...o.defaultKeymap,...o.historyKeymap])];Object.defineProperty(e,"EditorView",{enumerable:!0,get:function(){return n.EditorView}}),e.basicSetup=c,e.minimalSetup=u},8748:t=>{"use strict";function e(t,i){if("string"==typeof i)t.appendChild(document.createTextNode(i));else if(null==i);else if(null!=i.nodeType)t.appendChild(i);else{if(!Array.isArray(i))throw new RangeError("Unsupported child node: "+i);for(var n=0;n<i.length;n++)e(t,i[n])}}t.exports=function(){var t=arguments[0];"string"==typeof t&&(t=document.createElement(t));var i=1,n=arguments[1];if(n&&"object"==typeof n&&null==n.nodeType&&!Array.isArray(n)){for(var r in n)if(Object.prototype.hasOwnProperty.call(n,r)){var s=n[r];"string"==typeof s?t.setAttribute(r,s):null!=s&&(t[r]=s)}i++}for(;i<arguments.length;i++)e(t,arguments[i]);return t}},9172:(t,e)=>{var i="undefined"==typeof Symbol?"__ͼ":Symbol.for("ͼ"),n="undefined"==typeof Symbol?"__styleSet"+Math.floor(1e8*Math.random()):Symbol("styleSet"),r="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:{},s=e.StyleModule=function(t,e){this.rules=[];var i=(e||{}).finish;function n(t){return/^@/.test(t)?[t]:t.split(/,\s*/)}function r(t,e,s,o){var l=[],a=/^@(\w+)\b/.exec(t[0]),h=a&&"keyframes"==a[1];if(a&&null==e)return s.push(t[0]+";");for(var c in e){var u=e[c];if(/&/.test(c))r(c.split(/,\s*/).map((function(e){return t.map((function(t){return e.replace(/&/,t)}))})).reduce((function(t,e){return t.concat(e)})),u,s);else if(u&&"object"==typeof u){if(!a)throw new RangeError("The value of a property ("+c+") should be a primitive value.");r(n(c),u,l,h)}else null!=u&&l.push(c.replace(/_.*/,"").replace(/[A-Z]/g,(function(t){return"-"+t.toLowerCase()}))+": "+u+";")}(l.length||h)&&s.push((!i||a||o?t:t.map(i)).join(", ")+" {"+l.join(" ")+"}")}for(var s in t)r(n(s),t[s],this.rules)};s.prototype.getRules=function(){return this.rules.join("\n")},s.newName=function(){var t=r[i]||1;return r[i]=t+1,"ͼ"+t.toString(36)},s.mount=function(t,e,i){var r=t[n],s=i&&i.nonce;r?s&&r.setNonce(s):r=new l(t,s),r.mount(Array.isArray(e)?e:[e],t)};var o=new Map,l=function(t,e){var i=t.ownerDocument||t,r=i.defaultView;if(!t.head&&t.adoptedStyleSheets&&r.CSSStyleSheet){var s=o.get(i);if(s)return t[n]=s;this.sheet=new r.CSSStyleSheet,o.set(i,this)}else this.styleTag=i.createElement("style"),e&&this.styleTag.setAttribute("nonce",e);this.modules=[],t[n]=this};l.prototype.mount=function(t,e){for(var i=this.sheet,n=0,r=0,s=0;s<t.length;s++){var o=t[s],l=this.modules.indexOf(o);if(l<r&&l>-1&&(this.modules.splice(l,1),r--,l=-1),-1==l){if(this.modules.splice(r++,0,o),i)for(var a=0;a<o.rules.length;a++)i.insertRule(o.rules[a],n++)}else{for(;r<l;)n+=this.modules[r++].rules.length;n+=o.rules.length,r++}}if(i)e.adoptedStyleSheets.indexOf(this.sheet)<0&&(e.adoptedStyleSheets=[this.sheet].concat(e.adoptedStyleSheets));else{for(var h="",c=0;c<this.modules.length;c++)h+=this.modules[c].getRules()+"\n";this.styleTag.textContent=h;var u=e.head||e;this.styleTag.parentNode!=u&&u.insertBefore(this.styleTag,u.firstChild)}},l.prototype.setNonce=function(t){this.styleTag&&this.styleTag.getAttribute("nonce")!=t&&this.styleTag.setAttribute("nonce",t)}},6237:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});for(var i={8:"Backspace",9:"Tab",10:"Enter",12:"NumLock",13:"Enter",16:"Shift",17:"Control",18:"Alt",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",44:"PrintScreen",45:"Insert",46:"Delete",59:";",61:"=",91:"Meta",92:"Meta",106:"*",107:"+",108:",",109:"-",110:".",111:"/",144:"NumLock",145:"ScrollLock",160:"Shift",161:"Shift",162:"Control",163:"Control",164:"Alt",165:"Alt",173:"-",186:";",187:"=",188:",",189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'"},n={48:")",49:"!",50:"@",51:"#",52:"$",53:"%",54:"^",55:"&",56:"*",57:"(",59:":",61:"+",173:"_",186:":",187:"+",188:"<",189:"_",190:">",191:"?",192:"~",219:"{",220:"|",221:"}",222:'"'},r="undefined"!=typeof navigator&&/Mac/.test(navigator.platform),s="undefined"!=typeof navigator&&/MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent),o=0;o<10;o++)i[48+o]=i[96+o]=String(o);for(o=1;o<=24;o++)i[o+111]="F"+o;for(o=65;o<=90;o++)i[o]=String.fromCharCode(o+32),n[o]=String.fromCharCode(o);for(var l in i)n.hasOwnProperty(l)||(n[l]=i[l]);e.base=i,e.keyName=function(t){var e=!(r&&t.metaKey&&t.shiftKey&&!t.ctrlKey&&!t.altKey||s&&t.shiftKey&&t.key&&1==t.key.length||"Unidentified"==t.key)&&t.key||(t.shiftKey?n:i)[t.keyCode]||t.key||"Unidentified";return"Esc"==e&&(e="Escape"),"Del"==e&&(e="Delete"),"Left"==e&&(e="ArrowLeft"),"Up"==e&&(e="ArrowUp"),"Right"==e&&(e="ArrowRight"),"Down"==e&&(e="ArrowDown"),e},e.shift=n}},e={},function i(n){var r=e[n];if(void 0!==r)return r.exports;var s=e[n]={exports:{}};return t[n].call(s.exports,s,s.exports,i),s.exports}(8156);var t,e}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,