!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.nlScript=e():t.nlScript=e()}(this,(()=>{return t={2015:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.IfNothingYetEnteredAutocompleter=e.EntireSequenceCompleter=e.Autocompleter=void 0;const n=i(9636),r=i(9631),s=i(695),o=i(4998),a=i(2412),l=i(3365),h=i(304);var c;e.IfNothingYetEnteredAutocompleter=class{constructor(t,e){this.ifNothingYetEntered=t,this.otherwise=e}getAutocompletion(t,e){return 0===t.getParsedString().length?n.Autocompletion.literal(t,[this.ifNothingYetEntered]):void 0!==this.otherwise?n.Autocompletion.literal(t,[this.otherwise]):void 0}},e.EntireSequenceCompleter=class{constructor(t,e){this.ebnf=t,this.symbol2Autocompletion=e}getAutocompletion(t,e){const i=t.getParsedString(),c=t.getRule(),u=c.getChildren(),d=new n.Autocompletion.EntireSequence(t);for(let t=0;t<u.length;t++){let e=u[t].getSymbol()+":"+c.getNameForChild(t),i=this.symbol2Autocompletion.get(e);if(void 0!==i){d.add(i);continue}const n=new r.BNF(this.ebnf.getBNF()),f=new h.Sequence(void 0,u[t]);f.setParsedChildNames(c.getNameForChild(t)),f.createBNF(n),n.removeStartProduction(),n.addProduction(new o.Production(r.BNF.ARTIFICIAL_START_SYMBOL,f.getTarget())),i=[],new a.RDParser(n,new s.Lexer(""),l.EBNFParsedNodeFactory.INSTANCE).parse(i),this.symbol2Autocompletion.set(e,i),d.add(i)}if(0===i.length)return d.asArray();const f=d.getCompletion(n.Autocompletion.Purpose.FOR_INSERTION).indexOf("${");return void 0!==f&&f>=0&&i.length>f?void 0:d.asArray()}},function(t){t.DEFAULT_INLINE_AUTOCOMPLETER={getAutocompletion(t,e){if(t.getParsedString().length>0)return n.Autocompletion.veto(t);let i=t.getName();return void 0===i&&(i=t.getSymbol().getSymbol()),void 0!==i?n.Autocompletion.parameterized(t,i):void 0}}}(c||(e.Autocompleter=c={}))},2684:(t,e)=>{"use strict";var i;Object.defineProperty(e,"__esModule",{value:!0}),e.Evaluator=void 0,function(t){t.FIRST_CHILD_EVALUATOR={evaluate:t=>t.evaluate(0)},t.ALL_CHILDREN_EVALUATOR={evaluate:t=>0===t.getChildren().length?[]:t.getChildren().map((t=>t.evaluate()))},t.DEFAULT_EVALUATOR={evaluate:t=>t.getParsedString()}}(i||(e.Evaluator=i={}))},6557:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ParseException=void 0;const n=i(9636),r=i(695),s=i(2412);class o extends Error{constructor(t,e,i){super(),this.root=t,this.failedTerminal=e,this.parser=i;let n=e;for(;null!=n&&!n.doesAutocomplete();)n=n.getParent();this.firstAutocompletingAncestorThatFailed=n,this.message=this.getError()}getRoot(){return this.root}getFailedTerminal(){return this.failedTerminal}getFirstAutocompletingAncestorThatFailed(){return this.firstAutocompletingAncestorThatFailed}getError(){const t=this.parser.getLexer(),e=this.parser.getGrammar(),i=this.failedTerminal.getMatcher().pos+this.failedTerminal.getMatcher().parsed.length-1,o=t.substring(0,this.failedTerminal.getMatcher().pos),a=new r.Lexer(o),l=new s.RDParser(e,a,this.parser.getParsedNodeFactory()),h=[];try{l.parse(h)}catch(t){return"Error at position "+i}const c=t.substring(0,i+1).split(/\r?\n|\r/),u=c.length-1,d=c[u].length-1;let f="";f+="Error at position "+i+" in line "+u+":\n",f+=c[u]+"\n";for(let t=0;t<d;t++)f+=" ";return f+="^\n",f+="Expected "+h.map((t=>t.getCompletion(n.Autocompletion.Purpose.FOR_INSERTION))).toString(),f}}e.ParseException=o},2004:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ParsedNode=void 0;const n=i(6025),r=i(9312),s=i(5781);class o extends n.DefaultParsedNode{constructor(t,e,i){super(t,e,i),this.nthEntryInParent=0}setNthEntryInParent(t){this.nthEntryInParent=t}getNthEntryInParent(){return this.nthEntryInParent}getRule(){let t=this.getProduction();if(void 0!==t&&t instanceof s.EBNFProduction)return t.getRule()}parentHasSameRule(){let t=this.getRule();if(void 0===t)return!1;let e=this.getParent();if(void 0===e)return!1;let i=e.getRule();return void 0!==i&&t===i}getAutocompletion(t){var e;let i=this.getRule();return void 0===i||void 0===i.getAutocompleter()||this.parentHasSameRule()?super.getAutocompletion(t):null===(e=i.getAutocompleter())||void 0===e?void 0:e.getAutocompletion(this,t)}notifyListeners(){for(let t=0;t<this.numChildren();t++)this.getChild(t).notifyListeners();const t=this.getMatcher().state;if(!t.equals(r.ParsingState.SUCCESSFUL)&&!t.equals(r.ParsingState.END_OF_INPUT))return;let e=this.getRule();if(void 0!==e&&!this.parentHasSameRule()){let t=e.getOnSuccessfulParsed();void 0!==t&&t(this)}}evaluate(...t){if(t.length>0)return super.evaluate(...t);let e=this.getRule();return void 0!==e&&void 0!==e.getEvaluator()?e.getEvaluator().evaluate(this):super.evaluate()}}e.ParsedNode=o},8666:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Parser=void 0;const n=i(2015),r=i(695),s=i(3938),o=i(9312),a=i(2412),l=i(645),h=i(7418),c=i(3365),u=i(509),d=i(2684),f=i(7106),p=i(6581);e.Parser=class{constructor(){this.grammar=new h.EBNF,this.LINEBREAK=l.Terminal.literal("\n"),this.targetGrammar=new h.EBNF,this.symbol2Autocompletion=new Map,this.compiled=!1,this.parseStartListeners=[],this.QUANTIFIER=this.quantifier(),this.IDENTIFIER=this.identifier("identifier"),this.VARIABLE_NAME=this.variableName(),this.ENTRY_NAME=this.entryName(),this.LIST=this.list(),this.TUPLE=this.tuple(),this.CHARACTER_CLASS=this.characterClass(),this.TYPE=this.type(),this.VARIABLE=this.variable(),this.NO_VARIABLE=this.noVariable(),this.EXPRESSION=this.expression(),this.LINEBREAK_STAR=this.targetGrammar.star("linebreak-star",this.LINEBREAK.withName()),this.program()}getGrammar(){return this.grammar}getTargetGrammar(){return this.targetGrammar}defineSentence(t,e,i){let r;return r=void 0===i?void 0:"boolean"==typeof i?i?new n.EntireSequenceCompleter(this.targetGrammar,this.symbol2Autocompletion):n.Autocompleter.DEFAULT_INLINE_AUTOCOMPLETER:i,this.defineType("sentence",t,e,r)}defineType(t,e,i,s){let l;l=void 0===s?void 0:"boolean"==typeof s?s?new n.EntireSequenceCompleter(this.targetGrammar,this.symbol2Autocompletion):n.Autocompleter.DEFAULT_INLINE_AUTOCOMPLETER:s,this.grammar.compile(this.EXPRESSION.getTarget());let h=new a.RDParser(this.grammar.getBNF(),new r.Lexer(e),c.EBNFParsedNodeFactory.INSTANCE).parse();if(!h.getMatcher().state.equals(o.ParsingState.SUCCESSFUL))throw new Error("Parsing failed");const u=h.evaluate(),d=this.targetGrammar.sequence(t,...u);return void 0!==i&&d.setEvaluator(i),void 0!==l&&d.setAutocompleter(l),d.withName(t)}compile(t){void 0===t&&(t=this.targetGrammar.getSymbol("program")),this.targetGrammar.compile(t),this.compiled=!0}undefineType(t){const e=this.targetGrammar.getSymbol(t);this.targetGrammar.removeRules(e),this.compiled=!1}parse(t,e){this.compiled||this.compile(),this.symbol2Autocompletion.clear();const i=this.targetGrammar.getBNF(),n=new u.EBNFParser(i,new r.Lexer(t));return n.addParseStartListener((()=>this.fireParsingStarted())),n.parse(e)}quantifier(){const t=this.grammar;return t.or("quantifier",t.sequence(void 0,l.Terminal.literal("?").withName()).setEvaluator((t=>f.IntRange.OPTIONAL)).withName("optional"),t.sequence(void 0,l.Terminal.literal("+").withName()).setEvaluator((t=>f.IntRange.PLUS)).withName("plus"),t.sequence(void 0,l.Terminal.literal("*").withName()).setEvaluator((t=>f.IntRange.STAR)).withName("star"),t.sequence(void 0,t.INTEGER_RANGE.withName("range")).setEvaluator((t=>t.evaluate(0))).withName("range"),t.sequence(void 0,t.INTEGER.withName("int")).setEvaluator((t=>new f.IntRange(t.evaluate(0)))).withName("fixed"))}identifier(t){void 0===t&&(t="identifier");const e=this.grammar;return e.sequence(t,l.Terminal.characterClass("[A-Za-z_]").withName(),e.optional(void 0,e.sequence(void 0,e.star(void 0,l.Terminal.characterClass("[A-Za-z0-9_-]").withName()).withName("star"),l.Terminal.characterClass("[A-Za-z0-9_]").withName()).withName("seq")).withName("opt"))}variableName(){return this.grammar.plus("var-name",l.Terminal.characterClass("[^:{}]").withName()).setEvaluator(d.Evaluator.DEFAULT_EVALUATOR)}entryName(){return this.identifier("entry-name")}list(){const t=this.grammar;return t.sequence("list",l.Terminal.literal("list").withName(),t.WHITESPACE_STAR.withName("ws*"),l.Terminal.literal("<").withName(),t.WHITESPACE_STAR.withName("ws*"),this.IDENTIFIER.withName("type"),t.WHITESPACE_STAR.withName("ws*"),l.Terminal.literal(">").withName()).setEvaluator((t=>{const e=t.evaluate("type"),i=this.targetGrammar.getSymbol(e);if(void 0===i)throw new Error("Could not find "+e+" in the target grammar.");const n=(l.Terminal,i.withName(e));return this.targetGrammar.list(void 0,n)}))}tuple(){const t=this.grammar;return t.sequence("tuple",l.Terminal.literal("tuple").withName(),t.WHITESPACE_STAR.withName("ws*"),l.Terminal.literal("<").withName(),t.WHITESPACE_STAR.withName("ws*"),this.IDENTIFIER.withName("type"),t.plus(void 0,t.sequence(void 0,t.WHITESPACE_STAR.withName("ws*"),l.Terminal.literal(",").withName(),t.WHITESPACE_STAR.withName("ws*"),this.ENTRY_NAME.withName("entry-name"),t.WHITESPACE_STAR.withName("ws*")).withName("sequence-names")).withName("plus-names"),l.Terminal.literal(">").withName()).setEvaluator((t=>{const e=t.evaluate("type"),i=t.getChild("plus-names"),n=i.numChildren(),r=new Array(n);for(let t=0;t<n;t++)r[t]=i.getChild(t).evaluate("entry-name");const s=this.targetGrammar.getSymbol(e);if(void 0===s)throw new Error("Could not find "+e+" in the target grammar.");const o=(l.Terminal,s.withName());return this.targetGrammar.tuple(void 0,o,...r).getTarget()}))}characterClass(){return this.grammar.sequence("character-class",l.Terminal.literal("[").withName(),this.grammar.plus(void 0,this.grammar.or(void 0,l.Terminal.characterClass("[^]]").withName(),l.Terminal.literal("\\]").withName()).withName()).withName("plus"),l.Terminal.literal("]").withName()).setEvaluator((t=>{const e=t.getParsedString();return l.Terminal.characterClass(e)}))}type(){const t=this.grammar;return t.or("type",t.sequence(void 0,this.IDENTIFIER.withName("identifier")).setEvaluator((t=>{const e=t.getParsedString(),i=this.targetGrammar.getSymbol(e);if(void 0===i)throw new Error("Unknown type '"+e+"'");return i})).withName("type"),this.LIST.withName("list"),this.TUPLE.withName("tuple"),this.CHARACTER_CLASS.withName("character-class"))}variable(){const t=this.grammar;return t.sequence("variable",l.Terminal.literal("{").withName(),this.VARIABLE_NAME.withName("variable-name"),t.optional(void 0,t.sequence(void 0,l.Terminal.literal(":").withName(),this.TYPE.withName("type")).withName("seq-type")).withName("opt-type"),t.optional(void 0,t.sequence(void 0,l.Terminal.literal(":").withName(),this.QUANTIFIER.withName("quantifier")).withName("seq-quantifier")).withName("opt-quantifier"),l.Terminal.literal("}").withName()).setEvaluator((t=>{const e=t.evaluate("variable-name"),i=t.evaluate("opt-type","seq-type","type"),r=t.evaluate("opt-quantifier","seq-quantifier","quantifier");if(i instanceof p.Join){const t=i;return null!=r&&t.setCardinality(r),t.getTarget().withName(e)}let s=void 0===i?l.Terminal.literal(e):i,o=(l.Terminal,s.withName(e));if(void 0!==r){let t;i instanceof l.Terminal&&(t=n.Autocompleter.DEFAULT_INLINE_AUTOCOMPLETER);const a=r;s=a.equals(f.IntRange.STAR)?this.targetGrammar.star(void 0,o).setAutocompleter(t).getTarget():a.equals(f.IntRange.PLUS)?this.targetGrammar.plus(void 0,o).setAutocompleter(t).getTarget():a.equals(f.IntRange.OPTIONAL)?this.targetGrammar.optional(void 0,o).setAutocompleter(t).getTarget():this.targetGrammar.repeat(void 0,o,a.getLower(),a.getUpper()).setAutocompleter(t).getTarget(),o=s.withName(e)}return o}))}noVariable(){const t=this.grammar;return t.sequence("no-variable",l.Terminal.characterClass("[^ \t\n{]").withName(),t.optional(void 0,t.sequence(void 0,t.star(void 0,l.Terminal.characterClass("[^{\n]").withName()).withName("middle"),l.Terminal.characterClass("[^ \t\n{]").withName()).withName("seq")).withName("tail")).setEvaluator((t=>l.Terminal.literal(t.getParsedString()).withName()))}expression(){const t=this.grammar;return t.join("expression",t.or(void 0,this.NO_VARIABLE.withName("no-variable"),this.VARIABLE.withName("variable")).withName("or"),void 0,void 0,t.WHITESPACE_STAR.getTarget(),!1,f.IntRange.PLUS).setEvaluator((t=>{const e=t.numChildren(),i=[];i.push(t.evaluate(0));for(let n=1;n<e;n++){const e=t.getChild(n);n%2==0?i.push(e.evaluate()):e.numChildren()>0&&i.push(this.targetGrammar.WHITESPACE_PLUS.withName("ws+"))}return i}))}program(){return this.targetGrammar.join("program",new s.NonTerminal("sentence").withName("sentence"),this.LINEBREAK_STAR.getTarget(),this.LINEBREAK_STAR.getTarget(),this.LINEBREAK_STAR.getTarget(),!0,f.IntRange.STAR)}addParseStartListener(t){this.parseStartListeners.push(t)}removeParseStartListener(t){const e=this.parseStartListeners.indexOf(t);-1!==e&&this.parseStartListeners.splice(e,1)}fireParsingStarted(){for(let t of this.parseStartListeners)t()}}},9636:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Autocompletion=void 0;const n=i(4360);class r{constructor(t,e){if(void 0!==e)this.forSymbol=t,this.symbolName=e;else{const e=t;this.forSymbol=e.getSymbol(),this.symbolName=e.getName()}}isEmptyLiteral(){return this instanceof r.Literal&&0==this.getCompletion(r.Purpose.FOR_INSERTION).length}static literal(t,e,i,n){return void 0===i&&(i=""),void 0===n&&(n=""),e.map((e=>new r.Literal(t,i+e+n)))}static parameterized(t,e){return new r.Parameterized(t,e).asArray()}static veto(t){return new r.Veto(t).asArray()}static doesAutocomplete(t){return new r.DoesAutocomplete(t).asArray()}getAlreadyEntered(){return this.alreadyEntered}setAlreadyEntered(t){this.alreadyEntered=t}asArray(){return[this]}}e.Autocompletion=r,function(t){class e extends t{constructor(t,e,i){void 0!==i?(super(t,e),this.literal=i):(super(t),this.literal=e)}getCompletion(t){return this.literal}}t.Literal=e;class i extends t{constructor(t,e,i){void 0!==i?(super(t,e),this.paramName=i):(super(t),this.paramName=e)}getCompletion(t){return"${"+this.paramName+"}"}getParamName(){return this.paramName}}t.Parameterized=i;class r extends t{getCompletion(t){return r.VETO}}let s;r.VETO="VETO",t.Veto=r,t.DoesAutocomplete=class extends t{getCompletion(t){return"Something"}},t.EntireSequence=class extends t{constructor(t,e,i){void 0!==e&&null!=i?(super(t,e),this.sequence=i):(super(t),this.sequence=t.getRule()),this.sequenceOfCompletions=[]}add(t){this.sequenceOfCompletions.push(t)}getSequenceOfCompletions(){return this.sequenceOfCompletions}getSequence(){return this.sequence}addLiteral(t,i,n){this.add([new e(t,i,n)])}addParameterized(t,e,n){this.add([new i(t,e,n)])}getCompletion(t){let i="";for(let r=0;r<this.sequenceOfCompletions.length;r++){const o=this.sequenceOfCompletions[r],a=o.length;if(a>1)i+="${"+this.sequence.getNameForChild(r)+"}";else if(1==a)if(t===s.FOR_MENU){let t;const a=o[0];t=a instanceof e?a.getCompletion(s.FOR_INSERTION):"${"+this.sequence.getNameForChild(r)+"}",void 0!==t&&t!==n.Named.UNNAMED||(t="${"+this.sequence.getChildren()[r].getSymbol()+"}"),i+=t}else t===s.FOR_INSERTION&&(i+=o[0].getCompletion(t))}return i}},function(t){t[t.FOR_MENU=0]="FOR_MENU",t[t.FOR_INSERTION=1]="FOR_INSERTION"}(s=t.Purpose||(t.Purpose={}))}(r||(e.Autocompletion=r={}))},9631:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BNF=void 0;const n=i(645),r=i(3938);class s{constructor(t){if(this.symbols=new Map,this.productions=[],void 0!==t){for(let[e,i]of t.symbols)this.symbols.set(e,i);this.productions.push(...t.productions)}}reset(){this.symbols.clear(),this.productions.length=0}removeStartProduction(){for(var t=this.productions.length;t--;)if(this.productions[t].getLeft().equals(s.ARTIFICIAL_START_SYMBOL)){this.productions.splice(t,1);break}}addProduction(t){let e=this.productions.findIndex((e=>e.equals(t)));if(-1!=e)return console.log("Production already exists: "+t),this.productions[e];this.productions.push(t),this.symbols.set(t.getLeft().getSymbol(),t.getLeft());for(let e of t.getRight())e.isEpsilon()||this.symbols.set(e.getSymbol(),e);return t}getSymbol(t){let e=this.symbols.get(t);if(void 0===e)throw new Error("Could not find symbol "+t);return e}getProductions(t){return this.productions.filter((e=>e.getLeft().equals(t)))}toString(){let t="";for(let e of this.productions)t+=e.toString()+"\n";return t}}e.BNF=s,s.ARTIFICIAL_START_SYMBOL=new r.NonTerminal("S'"),s.ARTIFICIAL_STOP_SYMBOL=n.Terminal.END_OF_INPUT},6025:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DefaultParsedNode=void 0;const n=i(645),r=i(4360),s=i(9636);e.DefaultParsedNode=class{constructor(t,e,i){this.parent=void 0,this.children=[],this.matcher=t,this.symbol=e,this.production=i}getSymbol(){return this.symbol}getName(){return void 0!==this.name?this.name:this.symbol.getSymbol()}setName(t){this.name=t}getProduction(){return this.production}getMatcher(){return this.matcher}doesAutocomplete(){return null!=this.getAutocompletion(!0)}getAutocompletion(t){if(null===this.symbol||void 0===this.symbol)return;if(this.symbol instanceof n.Literal)return s.Autocompletion.literal(this,[this.symbol.getSymbol()]);let e=this.getName();return e===r.Named.UNNAMED&&(e=this.symbol.getSymbol()),this.symbol.isTerminal()?this.getParsedString().length>0?s.Autocompletion.veto(this):s.Autocompletion.parameterized(this,e):void 0}numChildren(){return this.children.length}getChildren(){return this.children}getChild(t){return"number"==typeof t?this.children[t]:"string"==typeof t?this.children.find((e=>e.getName()===t)):void 0}addChildren(...t){this.children.push(...t);for(let e of t)e.parent=this}getParent(){return this.parent}removeAllChildren(){for(let t of this.children)t.parent=void 0;this.children.length=0}evaluate(...t){if(0===t.length)return this.symbol.isTerminal()?this.symbol.evaluate(this.getMatcher()):this.getParsedString();if("number"==typeof t[0])return this.children[t].evaluate();if("string"==typeof t[0]){let e=this;for(let i of t)if(e=e.getChild(i),null==e)return;return e.evaluate()}}getParsedString(...t){let e=this;for(let i of t)if(e=e.getChild(i),void 0===e)return"";return e.getMatcher().parsed}toString(){return this.getMatcher().parsed}}},695:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Lexer=void 0,e.Lexer=class{constructor(t){this.pos=0,this.input=t}getPosition(){return this.pos}setPosition(t){this.pos=t}fwd(t){this.pos+=t}peek(t=0){let e=this.pos+t;return e<this.input.length?this.input.charAt(e):"$"}substring(t,e){return void 0!==e&&e>this.input.length&&(e=this.input.length),this.input.substring(t,e)}isDone(){return this.pos>this.input.length}isAtEnd(t=0){return this.pos+t===this.input.length}toString(){return this.input.substring(0,this.pos)+" -- "+this.input.substring(this.pos)}}},7591:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Matcher=void 0,e.Matcher=class{constructor(t,e,i){this.state=t,this.pos=e,this.parsed=i}isBetterThan(t){return null==t||!!this.state.isBetterThan(t.state)||!t.state.isBetterThan(this.state)&&this.pos+this.parsed.length>=t.pos+t.parsed.length}toString(){return`${this.state.toString()}: '${this.parsed}' (${this.pos})`}}},4360:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Named=void 0;class i{constructor(t,e=void 0){this.object=t,this.name=void 0!==e?e:i.UNNAMED}getName(){return this.name}get(){return this.object}getSymbol(){return this.object.getRepresentedSymbol()}}e.Named=i,i.UNNAMED="UNNAMED"},3938:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.NonTerminal=void 0;const n=i(4360),r=i(8177);class s extends r.Sym{constructor(t){super(t)}isTerminal(){return!1}isNonTerminal(){return!0}isEpsilon(){return!1}withName(t=void 0){return new n.Named(this,t)}uses(t,e,i){void 0===i&&(i=new Set);const n=e.getProductions(this);for(const r of n){if(r.toString()in i)continue;i.add(r.toString());const n=r.getRight();for(const r of n){if(r.equals(t))return!0;if(r instanceof s&&r.uses(t,e,i))return!0}}return!1}toString(){return"<"+this.getSymbol()+">"}static makeRandomSymbol(){let t="";for(let e=0;e<8;e++)t+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".charAt(Math.floor(62*Math.random()));return t}}e.NonTerminal=s},8396:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ParsedNodeFactory=void 0;const n=i(6025);var r;!function(t){t.DEFAULT={createNode:(t,e,i)=>new n.DefaultParsedNode(t,e,i)}}(r||(e.ParsedNodeFactory=r={}))},9312:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ParsingState=void 0;class i{constructor(t,e){this.ordinal=t,this.label=e}isBetterThan(t){return this.ordinal<t.ordinal}toString(){return this.label}equals(t){return t instanceof i&&this.ordinal===t.ordinal}}e.ParsingState=i,i.SUCCESSFUL=new i(0,"SUCCESSFUL"),i.END_OF_INPUT=new i(1,"END_OF_INPUT"),i.FAILED=new i(2,"FAILED"),i.NOT_PARSED=new i(3,"NOT_PARSED")},4998:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AstBuilder=e.Production=void 0;const n=i(645);var r;!function(t){t.DEFAULT=(t,...e)=>t.addChildren(...e)}(r||(e.AstBuilder=r={}));class s{constructor(t,...e){this.astBuilder=void 0,this.extensionListener=void 0,this.left=t,this.right=s.removeEpsilon(e)}static removeEpsilon(t){return t.filter((t=>!t.equals(n.Terminal.EPSILON)))}getLeft(){return this.left}getRight(){return this.right}setAstBuilder(t){this.astBuilder=t}builtAST(t,...e){void 0===this.astBuilder?t.addChildren(...e):this.astBuilder(t,...e)}wasExtended(t,...e){void 0!==this.extensionListener&&this.extensionListener(t,...e)}onExtension(t){if(void 0!==this.extensionListener)throw new Error("ExtensionListener cannot be overwritten");this.extensionListener=t}toString(){let t=this.getLeft().toString(),e="";for(let i=0;i<50-t.length;i++)e+=" ";e+=t,e+=" -> ";let i=this.getRight();for(let t of i)e+=t+" ";return e}equals(t){if(!(t instanceof s))return!1;const e=t;return this.left.equals(e.left)&&s.arraysEqual(this.right,e.right)}static arraysEqual(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(var i=0;i<t.length;++i)if(!t[i].equals(e[i]))return!1;return!0}}e.Production=s},2412:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SymbolSequence=e.RDParser=void 0;const n=i(9636),r=i(9631),s=i(7591),o=i(9312),a=i(6557);class l{constructor(t,e,i){this.grammar=t,this.lexer=e,this.parsedNodeFactory=i}getLexer(){return this.lexer}getGrammar(){return this.grammar}getParsedNodeFactory(){return this.parsedNodeFactory}parse(t){let e=new h(r.BNF.ARTIFICIAL_START_SYMBOL,void 0,void 0),i=[],n=this.parseRecursive(e,i);void 0!==t&&this.collectAutocompletions(i,t);let s=[],l=this.createParsedTree(n,s);if(l=this.buildAst(l),l.getMatcher().state===o.ParsingState.FAILED)throw new a.ParseException(l,s[0],this);return l}buildAst(t){let e=[];for(let i=0;i<t.numChildren();i++)e.push(this.buildAst(t.getChild(i)));t.removeAllChildren();let i=t.getProduction();return void 0!==i&&i.builtAST(t,...e),t}collectAutocompletions(t,e){if(null==e)throw new Error("autocompletions should be defined at this point");const i=[];for(const e of t)this.collectAutocompletingParents(e,i);const n=new Set;for(const t of i){const i=t.getProduction();let r;if(void 0!==i){r=i.getLeft().getSymbol()+":";for(const t of i.getRight())r+=t.getSymbol()}else r=t.getSymbol().getSymbol();if(!n.has(r)){const i=this.addAutocompletions(t,e);if(n.add(r),i)break}}}collectAutocompletingParents(t,e){let i=[];this.createParsedTree(t,i);let n,r=[],s=i[0];for(;void 0!==s;)r.push(s),s=s.getParent();for(let t=r.length-1;t>=0;t--){let e=r[t];if(e.doesAutocomplete()){n=e;break}}void 0!==n&&e.push(n)}addAutocompletions(t,e){let i=t.getMatcher().pos,r=this.lexer.substring(i),s=t.getAutocompletion(!1);if(void 0!==s)for(let t of s){if(void 0===t||t.isEmptyLiteral())continue;if(t instanceof n.Autocompletion.Veto)return e.length=0,!0;t.setAlreadyEntered(r);const i=t.getCompletion(n.Autocompletion.Purpose.FOR_MENU);e.some((t=>(null==t?void 0:t.getCompletion(n.Autocompletion.Purpose.FOR_MENU))===i))||e.push(t)}return!1}parseRecursive(t,e){let i=t.getCurrentSymbol();for(;i.isTerminal();){let n=i.matches(this.lexer);if(t.addMatcher(n),n.state.equals(o.ParsingState.END_OF_INPUT)&&void 0!==e&&e.push(t),!n.state.equals(o.ParsingState.SUCCESSFUL))return t;if(t.incrementPosition(),this.lexer.fwd(n.parsed.length),this.lexer.isDone())return t;i=t.getCurrentSymbol()}let n,r=i,s=this.grammar.getProductions(r),a=this.lexer.getPosition();for(let i of s){let r=this.lexer.getPosition(),s=t.replaceCurrentSymbol(i),l=this.parseRecursive(s,e),h=l.getLastMatcher();if(void 0!==h){if(h.state.equals(o.ParsingState.SUCCESSFUL))return l;(void 0===n||h.isBetterThan(n.getLastMatcher()))&&(n=l,a=this.lexer.getPosition())}this.lexer.setPosition(r)}return void 0!==n&&this.lexer.setPosition(a),n}createParsedTree(t,e){const i=[],n=t.parsedMatchers.length;for(let e=0;e<t.sequence.length;e++){let r=t.sequence[e],a=e<n?t.parsedMatchers[e]:new s.Matcher(o.ParsingState.NOT_PARSED,0,""),l=this.parsedNodeFactory.createNode(a,r,void 0);i.push(l)}void 0!==e&&(e[0]=i[n-1]);let a=t;for(;void 0!==a.parent;){let t=a.parent,e=a.production;if(void 0===e)throw new Error("production may not be undefined at this point");let n=t.pos,r=e.getRight(),s=e.getLeft(),o=r.length,h=i.slice(n,n+o),c=l.matcherFromChildSequence(h),u=this.parsedNodeFactory.createNode(c,s,e);u.addChildren(...h),i.splice(n,o,u),a=a.parent}let h=i[0];if(!h.getSymbol().equals(r.BNF.ARTIFICIAL_START_SYMBOL))throw new Error("");return l.notifyExtensionListeners(h),h}static notifyExtensionListeners(t){const e=t.getProduction();if(void 0!==e){e.wasExtended(t,...t.getChildren());for(let e of t.getChildren())this.notifyExtensionListeners(e)}}static matcherFromChildSequence(t){let e=-1,i=o.ParsingState.NOT_PARSED,n="";for(let r of t){if(i.equals(o.ParsingState.END_OF_INPUT)||i.equals(o.ParsingState.FAILED))break;const t=r.getMatcher(),s=t.state;s.equals(o.ParsingState.NOT_PARSED)||(-1===e&&(e=t.pos),!i.equals(o.ParsingState.NOT_PARSED)&&s.isBetterThan(i)||(i=s)),n+=t.parsed}return-1===e&&(e=0),new s.Matcher(i,e,n)}}e.RDParser=l;class h{constructor(t,e,i){if(this.sequence=[],this.pos=0,this.parsedMatchers=[],void 0!==t){if(void 0!==e||void 0!==i)throw new Error("If 'start' is defined, parent and production should be undefined");this.sequence.push(t),this.parent=void 0,this.production=void 0}else{if(void 0===e||void 0===i)throw new Error("If 'start' is not defined, parent and production should be defined");this.sequence.push(...e.sequence),this.pos=e.pos,this.parent=e,this.production=i}}getLastMatcher(){return this.parsedMatchers.at(-1)}addMatcher(t){this.parsedMatchers.push(t)}getCurrentSymbol(){return this.sequence[this.pos]}replaceCurrentSymbol(t){let e=new h(void 0,this,t);e.parsedMatchers.push(...this.parsedMatchers),e.sequence.splice(this.pos,1);let i=t.getRight();return e.sequence.splice(this.pos,0,...i),e}incrementPosition(){this.pos++}toString(){let t="",e=0;for(let i of this.sequence)e++===this.pos&&(t+="."),t+=i+" -- ";return t}}e.SymbolSequence=h},1824:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0})},8177:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Sym=void 0;class i{constructor(t){this.symbol=t}getSymbol(){return this.symbol}getRepresentedSymbol(){return this}toString(){return this.symbol}equals(t){return t instanceof i&&this.symbol===t.symbol}}e.Sym=i},645:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CharacterClass=e.Epsilon=e.Literal=e.Terminal=void 0;const n=i(4360),r=i(7591),s=i(9312),o=i(8177);class a extends o.Sym{static literal(t){return new u(t)}static characterClass(t){return new p(t)}constructor(t){super(t)}isTerminal(){return!0}isNonTerminal(){return!1}isEpsilon(){return!1}withName(t=void 0){return new n.Named(this,t)}}e.Terminal=a;class l extends a{constructor(){super("epsilon")}isEpsilon(){return!0}matches(t){return new r.Matcher(s.ParsingState.SUCCESSFUL,t.getPosition(),"")}evaluate(t){}}e.Epsilon=l;class h extends a{constructor(){super("EOI")}matches(t){const e=t.getPosition();return t.isAtEnd()?new r.Matcher(s.ParsingState.SUCCESSFUL,e," "):new r.Matcher(s.ParsingState.FAILED,e,"")}evaluate(t){}}class c extends a{constructor(){super("digit")}matches(t){const e=t.getPosition();if(t.isAtEnd())return new r.Matcher(s.ParsingState.END_OF_INPUT,e,"");const i=t.peek();return i.match(/[0-9]/)?new r.Matcher(s.ParsingState.SUCCESSFUL,e,i):new r.Matcher(s.ParsingState.FAILED,e,i)}evaluate(t){return t.parsed.charAt(0)}}class u extends a{constructor(t){super(t)}matches(t){const e=t.getPosition(),i=this.getSymbol();for(let n=0;n<i.length;n++){if(t.isAtEnd(n))return new r.Matcher(s.ParsingState.END_OF_INPUT,e,t.substring(e,e+n+1));if(t.peek(n)!==i.charAt(n))return new r.Matcher(s.ParsingState.FAILED,e,t.substring(e,e+n+1))}return new r.Matcher(s.ParsingState.SUCCESSFUL,e,i)}evaluate(t){return t.parsed}toString(){return`'${this.getSymbol()}'`}}e.Literal=u;class d extends a{constructor(){super("letter")}matches(t){const e=t.getPosition();if(t.isAtEnd())return new r.Matcher(s.ParsingState.END_OF_INPUT,e,"");const i=t.peek();return console.debug("Test if "+i+" is a letter"),i.match(/[a-zA-Z]/)?(console.debug("It is"),new r.Matcher(s.ParsingState.SUCCESSFUL,e,i)):(console.debug("it is not"),new r.Matcher(s.ParsingState.FAILED,e,i))}evaluate(t){return t.parsed.charAt(0)}}class f extends a{constructor(){super("whitespace")}matches(t){const e=t.getPosition();if(t.isAtEnd())return new r.Matcher(s.ParsingState.END_OF_INPUT,e,"");const i=t.peek();return" "===i||"\t"===i?new r.Matcher(s.ParsingState.SUCCESSFUL,e,i):new r.Matcher(s.ParsingState.FAILED,e,i)}evaluate(t){return t.parsed.charAt(0)}}class p extends a{constructor(t){super(t.trim());const e=t.trim();if(0===e.length)throw new Error("empty character class pattern");if("["!==e.charAt(0)||"]"!==e.charAt(e.length-1))throw new Error("Wrong character class format: "+t);let i=1,n=e.length-2;const r="^"===e.charAt(1);r&&i++,this.ranges=new v(r),"-"===e.charAt(i)&&(this.ranges.add(new g("-".charCodeAt(0))),i++),"-"===e.charAt(n)&&(this.ranges.add(new g("-".charCodeAt(0))),n--);let s=i;for(;s<=n;){const i=s+1,r=e.charAt(s);if(i<=n&&"-"===e.charAt(i)){const i=e.charAt(s+2);if("-"===r||"-"===i)throw new Error("Wrong character class format: "+t);this.ranges.add(new m(r.charCodeAt(0),i.charCodeAt(0))),s+=3}else this.ranges.add(new g(r.charCodeAt(0))),s++}}matches(t){const e=t.getPosition();if(t.isAtEnd())return new r.Matcher(s.ParsingState.END_OF_INPUT,e,"");const i=t.peek();return this.ranges.checkCharacter(i.charCodeAt(0))?new r.Matcher(s.ParsingState.SUCCESSFUL,e,i):new r.Matcher(s.ParsingState.FAILED,e,i)}evaluate(t){return t.parsed.charAt(0)}toString(){return super.toString()}}e.CharacterClass=p;class m{constructor(t,e){this.lower=t,this.upper=e}checkCharacter(t){return t>=this.lower&&t<=this.upper}equals(t){if(!(t instanceof m))return!1;const e=t;return this.lower===e.lower&&this.upper===e.upper}}class g extends m{constructor(t){super(t,t),this.number=t}checkCharacter(t){return t===this.number}}class v{constructor(t){this.ranges=[],this.negated=!1,this.negated=t}add(t){this.ranges.push(t)}checkCharacter(t){for(var e of this.ranges){let i=e.checkCharacter(t);if(!this.negated&&i)return!0;if(this.negated&&i)return!1}return this.negated}equals(t){if(!(t instanceof v))return!1;let e=(t,e)=>t.lower<e.lower?-1:t.lower>e.lower?1:t.upper<e.upper?-1:t.upper>e.upper?1:0,i=this.ranges.slice(),n=t.ranges.slice();return i.sort(e),n.sort(e),function(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(var i=0;i<t.length;++i)if(!t[i].equals(e[i]))return!1;return!0}(i,n)}}!function(t){t.EPSILON=new l,t.DIGIT=new c,t.LETTER=new d,t.WHITESPACE=new f,t.END_OF_INPUT=new h}(a||(e.Terminal=a={}))},9297:function(t,e,i){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i);var r=Object.getOwnPropertyDescriptor(e,i);r&&!("get"in r?!e.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,n,r)}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),r=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),r(i(9636),e),r(i(9631),e),r(i(6025),e),r(i(695),e),r(i(7591),e),r(i(4360),e),r(i(3938),e),r(i(8396),e),r(i(9312),e),r(i(4998),e),r(i(2412),e),r(i(1824),e),r(i(8177),e),r(i(645),e)},7418:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.EBNF=void 0;const n=i(2015),r=i(645),s=i(7106),o=i(9705);class a extends o.EBNFCore{constructor(){super(),this.SIGN=this.makeSign(),this.INTEGER=this.makeInteger(),this.FLOAT=this.makeFloat(),this.MONTH=this.makeMonth(),this.WEEKDAY=this.makeWeekday(),this.WHITESPACE_STAR=this.makeWhitespaceStar(),this.WHITESPACE_PLUS=this.makeWhitespacePlus(),this.INTEGER_RANGE=this.makeIntegerRange(),this.TIME=this.makeTime(),this.DATE=this.makeDate(),this.DATETIME=this.makeDatetime(),this.COLOR=this.makeColor(),this.symbols.set(r.Terminal.DIGIT.getSymbol(),r.Terminal.DIGIT),this.symbols.set(r.Terminal.LETTER.getSymbol(),r.Terminal.LETTER)}makeSign(){return this.or(a.SIGN_NAME,r.Terminal.literal("-").withName(),r.Terminal.literal("+").withName())}makeInteger(){const t=this.sequence(a.INTEGER_NAME,this.optional(void 0,this.SIGN.withName("sign")).withName("optional"),this.plus(void 0,r.Terminal.DIGIT.withName("digit")).withName("plus"));return t.setEvaluator((t=>parseInt(t.getParsedString()))),t.setAutocompleter(n.Autocompleter.DEFAULT_INLINE_AUTOCOMPLETER),t}makeFloat(){const t=this.sequence(a.FLOAT_NAME,this.optional(void 0,this.SIGN.withName()).withName(),this.plus(void 0,r.Terminal.DIGIT.withName()).withName(),this.optional(void 0,this.sequence(void 0,r.Terminal.literal(".").withName(),this.star(void 0,r.Terminal.DIGIT.withName()).withName("star")).withName("sequence")).withName());return t.setEvaluator((t=>parseFloat(t.getParsedString()))),t.setAutocompleter(n.Autocompleter.DEFAULT_INLINE_AUTOCOMPLETER),t}makeWhitespaceStar(){const t=this.star(a.WHITESPACE_STAR_NAME,r.Terminal.WHITESPACE.withName());return t.setAutocompleter(new n.IfNothingYetEnteredAutocompleter(" ","")),t}makeWhitespacePlus(){const t=this.plus(a.WHITESPACE_PLUS_NAME,r.Terminal.WHITESPACE.withName());return t.setAutocompleter(new n.IfNothingYetEnteredAutocompleter(" ","")),t}makeIntegerRange(){const t=this.sequence(void 0,this.WHITESPACE_STAR.withName("ws*"),r.Terminal.literal("-").withName(),this.WHITESPACE_STAR.withName("ws*")),e=this.join(a.INTEGER_RANGE_NAME,this.INTEGER.withName(),void 0,void 0,t.getTarget(),!0,["from","to"]);return e.setEvaluator((t=>new s.IntRange(parseInt(t.evaluate(0)),parseInt(t.evaluate(1))))),e}makeColor(){const t=this.sequence(void 0,r.Terminal.literal("black").withName()).setEvaluator((t=>a.rgb2int(0,0,0))),e=this.sequence(void 0,r.Terminal.literal("white").withName()).setEvaluator((t=>a.rgb2int(255,255,255))),i=this.sequence(void 0,r.Terminal.literal("red").withName()).setEvaluator((t=>a.rgb2int(255,0,0))),n=this.sequence(void 0,r.Terminal.literal("orange").withName()).setEvaluator((t=>a.rgb2int(255,128,0))),s=this.sequence(void 0,r.Terminal.literal("yellow").withName()).setEvaluator((t=>a.rgb2int(255,255,0))),o=this.sequence(void 0,r.Terminal.literal("lawn green").withName()).setEvaluator((t=>a.rgb2int(128,255,0))),l=this.sequence(void 0,r.Terminal.literal("green").withName()).setEvaluator((t=>a.rgb2int(0,255,0))),h=this.sequence(void 0,r.Terminal.literal("spring green").withName()).setEvaluator((t=>a.rgb2int(0,255,180))),c=this.sequence(void 0,r.Terminal.literal("cyan").withName()).setEvaluator((t=>a.rgb2int(0,255,255))),u=this.sequence(void 0,r.Terminal.literal("azure").withName()).setEvaluator((t=>a.rgb2int(0,128,255))),d=this.sequence(void 0,r.Terminal.literal("blue").withName()).setEvaluator((t=>a.rgb2int(0,0,255))),f=this.sequence(void 0,r.Terminal.literal("violet").withName()).setEvaluator((t=>a.rgb2int(128,0,255))),p=this.sequence(void 0,r.Terminal.literal("magenta").withName()).setEvaluator((t=>a.rgb2int(255,0,255))),m=this.sequence(void 0,r.Terminal.literal("pink").withName()).setEvaluator((t=>a.rgb2int(255,0,128))),g=this.sequence(void 0,r.Terminal.literal("gray").withName()).setEvaluator((t=>a.rgb2int(128,128,128))),v=this.tuple(void 0,this.INTEGER.withName(),"red","green","blue");return this.or(a.COLOR_NAME,v.withName(),t.withName(),e.withName(),i.withName(),n.withName(),s.withName(),o.withName(),l.withName(),h.withName(),c.withName(),u.withName(),d.withName(),f.withName(),p.withName(),m.withName(),g.withName())}static rgb2int(t,e,i){return 255<<24|(255&t)<<16|(255&e)<<8|255&i}makeTime(){const t=this.sequence(void 0,this.optional(void 0,r.Terminal.DIGIT.withName()).withName(),r.Terminal.DIGIT.withName());t.setAutocompleter(n.Autocompleter.DEFAULT_INLINE_AUTOCOMPLETER);const e=this.sequence(void 0,r.Terminal.DIGIT.withName(),r.Terminal.DIGIT.withName());e.setAutocompleter(n.Autocompleter.DEFAULT_INLINE_AUTOCOMPLETER);const i=this.sequence(a.TIME_NAME,t.withName("HH"),r.Terminal.literal(":").withName(),e.withName("MM"));return i.setEvaluator((t=>a.parseTime(t.getParsedString()))),i.setAutocompleter(new n.EntireSequenceCompleter(this,new Map)),i}makeMonth(){return this.or(a.MONTH_NAME,this.sequence(void 0,r.Terminal.literal("January").withName()).setEvaluator((t=>0)).withName("january"),this.sequence(void 0,r.Terminal.literal("February").withName()).setEvaluator((t=>1)).withName("february"),this.sequence(void 0,r.Terminal.literal("March").withName()).setEvaluator((t=>2)).withName("march"),this.sequence(void 0,r.Terminal.literal("April").withName()).setEvaluator((t=>3)).withName("april"),this.sequence(void 0,r.Terminal.literal("May").withName()).setEvaluator((t=>4)).withName("may"),this.sequence(void 0,r.Terminal.literal("June").withName()).setEvaluator((t=>5)).withName("june"),this.sequence(void 0,r.Terminal.literal("July").withName()).setEvaluator((t=>6)).withName("july"),this.sequence(void 0,r.Terminal.literal("August").withName()).setEvaluator((t=>7)).withName("august"),this.sequence(void 0,r.Terminal.literal("September").withName()).setEvaluator((t=>8)).withName("september"),this.sequence(void 0,r.Terminal.literal("October").withName()).setEvaluator((t=>9)).withName("october"),this.sequence(void 0,r.Terminal.literal("November").withName()).setEvaluator((t=>10)).withName("november"),this.sequence(void 0,r.Terminal.literal("December").withName()).setEvaluator((t=>11)).withName("december"))}makeWeekday(){return this.or(a.WEEKDAY_NAME,this.sequence(void 0,r.Terminal.literal("Monday").withName()).setEvaluator((t=>0)).withName("monday"),this.sequence(void 0,r.Terminal.literal("Tuesday").withName()).setEvaluator((t=>1)).withName("tuesday"),this.sequence(void 0,r.Terminal.literal("Wednesday").withName()).setEvaluator((t=>2)).withName("wednesday"),this.sequence(void 0,r.Terminal.literal("Thursday").withName()).setEvaluator((t=>3)).withName("thursday"),this.sequence(void 0,r.Terminal.literal("Friday").withName()).setEvaluator((t=>4)).withName("friday"),this.sequence(void 0,r.Terminal.literal("Saturday").withName()).setEvaluator((t=>5)).withName("saturday"),this.sequence(void 0,r.Terminal.literal("Sunday").withName()).setEvaluator((t=>6)).withName("sunday"))}makeDate(){const t=this.sequence(void 0,this.optional(void 0,r.Terminal.DIGIT.withName()).withName(),r.Terminal.DIGIT.withName());t.setAutocompleter(n.Autocompleter.DEFAULT_INLINE_AUTOCOMPLETER),t.setEvaluator((t=>parseInt(t.getParsedString())));const e=this.sequence(void 0,r.Terminal.DIGIT.withName(),r.Terminal.DIGIT.withName(),r.Terminal.DIGIT.withName(),r.Terminal.DIGIT.withName());e.setAutocompleter(n.Autocompleter.DEFAULT_INLINE_AUTOCOMPLETER),e.setEvaluator((t=>parseInt(t.getParsedString())));const i=this.sequence(a.DATE_NAME,t.withName("day"),r.Terminal.literal(" ").withName(),this.MONTH.withName("month"),r.Terminal.literal(" ").withName(),e.withName("year"));return i.setEvaluator((t=>{const e=t.evaluate("day"),i=t.evaluate("month"),n=t.evaluate("year");let r=new Date;return r.setDate(e),r.setMonth(i),r.setFullYear(n),r.setHours(0,0,0,0),r})),i.setAutocompleter(new n.EntireSequenceCompleter(this,new Map)),i}makeDatetime(){const t=this.sequence(a.DATETIME_NAME,this.DATE.withName("date"),r.Terminal.literal(" ").withName(),this.TIME.withName("time"));return t.setEvaluator((t=>{let e=t.evaluate("date"),i=t.evaluate("time");return e.setHours(i.getHours()),e.setMinutes(i.getMinutes()),e.setSeconds(i.getSeconds()),e.setMilliseconds(i.getMilliseconds()),e})),t.setAutocompleter(new n.EntireSequenceCompleter(this,new Map)),t}static parseTime(t){const e=t.split(":");if(2!=e.length)throw new Error("Failed to parse "+t);const i=parseInt(e[0]),n=parseInt(e[1]);if(void 0===i||i<0||i>23)throw new Error("Failed to parse "+t);if(void 0===n||n<0||n>59)throw new Error("Failed to parse "+t);const r=new Date;return r.setHours(i),r.setMinutes(n),r.setSeconds(0),r.setMilliseconds(0),r}}e.EBNF=a,a.DIGIT_NAME=r.Terminal.DIGIT.getSymbol(),a.LETTER_NAME=r.Terminal.LETTER.getSymbol(),a.SIGN_NAME="sign",a.INTEGER_NAME="int",a.FLOAT_NAME="float",a.MONTH_NAME="month",a.WEEKDAY_NAME="weekday",a.WHITESPACE_STAR_NAME="whitespace-star",a.WHITESPACE_PLUS_NAME="whitespace-plus",a.INTEGER_RANGE_NAME="integer-range",a.PATH_NAME="path",a.TIME_NAME="time",a.DATE_NAME="date",a.DATETIME_NAME="date-time",a.COLOR_NAME="color"},9705:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.EBNFCore=void 0;const n=i(2015),r=i(9631),s=i(3938),o=i(645),a=i(7106),l=i(6581),h=i(3481),c=i(5936),u=i(8613),d=i(3746),f=i(304),p=i(9965),m=i(2684),g=i(9636);class v{constructor(t){if(this.symbols=new Map,this.rules=[],this.bnf=new r.BNF,this.compiled=!1,void 0!==t){for(let[e,i]of t.symbols)this.symbols.set(e,i);this.rules.push(...t.rules),this.compiled=t.compiled}}getSymbol(t){return this.symbols.get(t)}compile(t){this.compiled=!1,this.removeRules(r.BNF.ARTIFICIAL_START_SYMBOL);const e=new f.Sequence(r.BNF.ARTIFICIAL_START_SYMBOL,t,r.BNF.ARTIFICIAL_STOP_SYMBOL);this.addRule(e),e.setEvaluator(m.Evaluator.FIRST_CHILD_EVALUATOR),this.bnf.reset();for(let t of this.rules)t.createBNF(this.bnf);this.compiled=!0}getBNF(){return this.bnf}getRules(t){return this.rules.filter((e=>e.getTarget().equals(t)))}plus(t,e){const i=this.newOrExistingNonTerminal(t),n=new u.Plus(i,e.getSymbol());return n.setParsedChildNames(e.getName()),this.addRule(n),n}star(t,e){const i=this.newOrExistingNonTerminal(t),n=new p.Star(i,e.getSymbol());return n.setParsedChildNames(e.getName()),this.addRule(n),n}or(t,...e){const i=this.newOrExistingNonTerminal(t),n=new c.Or(i,...v.getSymbols(...e));return n.setParsedChildNames(...v.getNames(...e)),this.addRule(n),n}optional(t,e){const i=this.newOrExistingNonTerminal(t),n=new h.Optional(i,e.getSymbol());return n.setParsedChildNames(e.getName()),this.addRule(n),n}repeat(t,e,i,n){const r=this.newOrExistingNonTerminal(t),s=new d.Repeat(r,e.getSymbol(),i,n);return s.setParsedChildNames(e.getName()),this.addRule(s),s}join(t,e,i,n,r,s,o){const h=this.newOrExistingNonTerminal(t);let c,u;o instanceof a.IntRange?(u=[e.getName()],c=o):(u=o,c=new a.IntRange(u.length,u.length));const d=new l.Join(h,e.getSymbol(),i,n,r,c);return d.setOnlyKeepEntries(s),d.setParsedChildNames(...u),this.addRule(d),d}list(t,e){const i=this.star(void 0,o.Terminal.WHITESPACE.withName()).withName("ws*"),r=this.sequence(void 0,i,o.Terminal.literal(",").withName(),i);return r.setAutocompleter(new n.IfNothingYetEnteredAutocompleter(", ","")),this.join(t,e,void 0,void 0,r.getTarget(),!0,a.IntRange.STAR)}tuple(t,e,...i){const n=this.star(void 0,o.Terminal.WHITESPACE.withName()).withName("ws*");n.get().setAutocompleter(((t,e)=>g.Autocompletion.literal(t,[""])));const r=this.sequence(void 0,o.Terminal.literal("(").withName("open"),n),s=this.sequence(void 0,n,o.Terminal.literal(")").withName("close")),a=this.sequence(void 0,n,o.Terminal.literal(",").withName("delimiter"),n),l=this.join(t,e,r.getTarget(),s.getTarget(),a.getTarget(),!0,i);return l.setAutocompleter(((t,n)=>{if(t.getParsedString().length>0)return;if(n)return g.Autocompletion.doesAutocomplete(t);const o=new g.Autocompletion.EntireSequence(t);o.addLiteral(r.getTarget(),"open","("),o.addParameterized(e.getSymbol(),i[0],i[0]);for(let t=1;t<i.length;t++)o.addLiteral(a.getTarget(),"delimiter",", "),o.addParameterized(e.getSymbol(),i[t],i[t]);return o.addLiteral(s.getTarget(),"close",")"),o.asArray()})),l}sequence(t,...e){const i=this.newOrExistingNonTerminal(t),n=new f.Sequence(i,...v.getSymbols(...e));return n.setParsedChildNames(...v.getNames(...e)),this.addRule(n),n}static getSymbols(...t){const e=new Array(t.length);for(let i=0;i<t.length;i++)e[i]=t[i].getSymbol();return e}static getNames(...t){const e=new Array(t.length);for(let i=0;i<t.length;i++)e[i]=t[i].getName();return e}addRule(t){let e=t.getTarget();void 0===this.symbols.get(e.getSymbol())&&this.symbols.set(e.getSymbol(),e);for(let e of t.getChildren())e.isEpsilon()||void 0!==this.symbols.get(e.getSymbol())||this.symbols.set(e.getSymbol(),e);this.rules.push(t),this.compiled=!1}removeRules(t){for(let e=this.rules.length-1;e>=0;e--)this.rules[e].getTarget().equals(t)&&this.rules.splice(e,1);this.compiled=!1}newOrExistingNonTerminal(t){if(void 0===t)return;let e=this.symbols.get(t);return void 0===e&&(e=new s.NonTerminal(t)),e}}e.EBNFCore=v},3365:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.EBNFParsedNodeFactory=void 0;const n=i(2004);var r;!function(t){t.INSTANCE={createNode:(t,e,i)=>new n.ParsedNode(t,e,i)}}(r||(e.EBNFParsedNodeFactory=r={}))},509:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.EBNFParser=void 0;const n=i(2412),r=i(3365);class s extends n.RDParser{constructor(t,e){super(t,e,r.EBNFParsedNodeFactory.INSTANCE),this.parseStartListeners=[]}createParsedTree(t,e){this.fireParsingStarted();let i=super.createParsedTree(t,e);return i.notifyListeners(),i}addParseStartListener(t){this.parseStartListeners.push(t)}removeParseStartListener(t){let e=this.parseStartListeners.indexOf(t);-1!==e&&this.parseStartListeners.splice(e,1)}fireParsingStarted(){for(let t of this.parseStartListeners)t()}}e.EBNFParser=s},5781:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.EBNFProduction=void 0;const n=i(4998);class r extends n.Production{constructor(t,e,...i){super(e,...i),this.rule=t}getRule(){return this.rule}}e.EBNFProduction=r},6581:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Join=void 0;const n=i(3938),r=i(4998),s=i(645),o=i(2684),a=i(7106),l=i(3746),h=i(9987),c=i(9965);class u extends h.Rule{constructor(t,e,i,n,r,s){super("join",t,e),this.onlyKeepEntries=!0,this.open=i,this.close=n,this.delimiter=r,this.cardinality=s,this.setEvaluator(o.Evaluator.ALL_CHILDREN_EVALUATOR)}getEntry(){return this.children[0]}getCardinality(){return this.cardinality}setCardinality(t){this.cardinality=t}setOnlyKeepEntries(t){this.onlyKeepEntries=t}createBNF(t){const e=this.children[0],i=new n.NonTerminal("next-"+n.NonTerminal.makeRandomSymbol()),o=void 0!==this.open&&!this.open.isEpsilon(),u=void 0!==this.close&&!this.close.isEpsilon(),d=void 0!==this.delimiter&&!this.delimiter.isEpsilon();if(o&&!u||!o&&u)throw new Error("Join must have either both open and close or neither");if(d){const n=h.Rule.addProduction(t,this,i,this.delimiter,e),s=this;n.onExtension(((t,...e)=>{const i=t.getNthEntryInParent()+1;e[0].setName("delimiter"),e[1].setName(s.getNameForChild(i))})),this.onlyKeepEntries?n.setAstBuilder(((t,...e)=>t.addChildren(e[1]))):n.setAstBuilder(r.AstBuilder.DEFAULT)}else{const n=h.Rule.addProduction(t,this,i,e),r=this;n.onExtension(((t,...e)=>{const i=t.getNthEntryInParent()+1;e[0].setName(r.getNameForChild(i))})),n.setAstBuilder(((t,...e)=>t.addChildren(e[0])))}const f=(t,...e)=>{t.addChildren(e[0]);for(let i of e[1].getChildren())t.addChildren(...i.getChildren())},p=new n.NonTerminal("repetition:"+n.NonTerminal.makeRandomSymbol());if(this.cardinality.equals(a.IntRange.PLUS)){const n=new c.Star(void 0,i);n.setParsedChildNames("next"),n.createBNF(t);const r=h.Rule.addProduction(t,this,p,e,n.getTarget()),s=this;r.onExtension(((t,...e)=>{e[0].setName(s.getNameForChild(0)),e[1].setName("star")})),r.setAstBuilder(f)}else if(this.cardinality.equals(a.IntRange.STAR)){const n=new c.Star(void 0,i);n.setParsedChildNames("next"),n.createBNF(t);const r=h.Rule.addProduction(t,this,p,e,n.getTarget()),o=h.Rule.addProduction(t,this,p,s.Terminal.EPSILON);r.setAstBuilder(f),o.setAstBuilder(((t,...e)=>{}));const a=this;r.onExtension(((t,...e)=>{e[0].setName(a.getNameForChild(0)),e[1].setName("star")}))}else if(this.cardinality.equals(a.IntRange.OPTIONAL)){const i=h.Rule.addProduction(t,this,p,e),n=this;i.onExtension(((t,...e)=>{e[0].setName(n.getNameForChild(0))})),h.Rule.addProduction(t,this,p,s.Terminal.EPSILON).setAstBuilder(((t,...e)=>{}))}else{const n=this.cardinality.getLower(),r=this.cardinality.getUpper();if(0===n&&0===r)h.Rule.addProduction(t,this,p,s.Terminal.EPSILON).setAstBuilder(((t,...e)=>{}));else if(1===n&&1===r){const i=h.Rule.addProduction(t,this,p,e),n=this;i.onExtension(((t,...e)=>{e[0].setName(n.getNameForChild(0))}))}else if(n<=0){const n=new l.Repeat(void 0,i,0,r-1);n.setParsedChildNames("next"),n.createBNF(t);const o=h.Rule.addProduction(t,this,p,e,n.getTarget()),a=this;o.setAstBuilder(f),o.onExtension(((t,...e)=>{e[0].setName(a.getNameForChild(0)),e[1].setName("repeat")})),h.Rule.addProduction(t,this,p,s.Terminal.EPSILON).setAstBuilder(((t,...e)=>{}))}else{const s=new l.Repeat(void 0,i,n-1,r-1);s.setParsedChildNames("next"),s.createBNF(t);const o=h.Rule.addProduction(t,this,p,e,s.getTarget()),a=this;o.setAstBuilder(f),o.onExtension(((t,...e)=>{e[0].setName(a.getNameForChild(0)),e[1].setName("repeat")}))}}if(o||u){const e=h.Rule.addProduction(t,this,this.tgt,this.open,p,this.close),i=this;e.onExtension(((t,...e)=>{i.onlyKeepEntries||e[0].setName("open"),e[1].setName("repetition"),i.onlyKeepEntries||e[2].setName("close")})),e.setAstBuilder(((t,...e)=>{i.onlyKeepEntries||t.addChildren(e[0]),t.addChildren(...e[1].getChildren()),i.onlyKeepEntries||t.addChildren(e[2])}))}else{const e=h.Rule.addProduction(t,this,this.tgt,p);e.onExtension(((t,...e)=>{e[0].setName("repetition")})),e.setAstBuilder(((t,...e)=>t.addChildren(...e[0].getChildren())))}}}e.Join=u},7902:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.NamedRule=void 0;const n=i(4360);class r extends n.Named{constructor(t,e=void 0){super(t,e)}onSuccessfulParsed(t){this.get().onSuccessfulParsed(t)}}e.NamedRule=r},3481:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Optional=void 0;const n=i(2684),r=i(9987),s=i(4998);class o extends r.Rule{constructor(t,e){super("optional",t,e),this.setEvaluator(n.Evaluator.ALL_CHILDREN_EVALUATOR)}getEntry(){return this.children[0]}createBNF(t){const e=r.Rule.addProduction(t,this,this.tgt,this.children[0]);r.Rule.addProduction(t,this,this.tgt);const i=this;e.onExtension(((t,...e)=>{let n=e[0];n.setNthEntryInParent(0),n.setName(i.getNameForChild(0))})),e.setAstBuilder(s.AstBuilder.DEFAULT)}}e.Optional=o},5936:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Or=void 0;const n=i(4998),r=i(2684),s=i(9987);class o extends s.Rule{constructor(t,...e){super("or",t,...e),this.setEvaluator(r.Evaluator.FIRST_CHILD_EVALUATOR)}createBNF(t){for(let e=0;e<this.children.length;e++){const i=e,r=this.children[e],o=s.Rule.addProduction(t,this,this.tgt,r),a=this;o.onExtension(((t,...e)=>{let n=e[0];n.setNthEntryInParent(i),n.setName(a.getNameForChild(i))})),o.setAstBuilder(n.AstBuilder.DEFAULT)}}}e.Or=o},2066:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0})},8613:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Plus=void 0;const n=i(2684),r=i(9987);class s extends r.Rule{constructor(t,e){super("plus",t,e),this.setEvaluator(n.Evaluator.ALL_CHILDREN_EVALUATOR)}getEntry(){return this.children[0]}createBNF(t){const e=r.Rule.addProduction(t,this,this.tgt,this.children[0],this.tgt),i=r.Rule.addProduction(t,this,this.tgt,this.children[0]),n=this;e.onExtension(((t,...e)=>{let i=t.getNthEntryInParent(),r=e[0],s=e[1];r.setNthEntryInParent(i),r.setName(n.getNameForChild(i)),s.setNthEntryInParent(i+1),s.setName(t.getName())})),i.onExtension(((t,...e)=>{let i=t.getNthEntryInParent(),r=e[0];r.setNthEntryInParent(i),r.setName(n.getNameForChild(i))})),e.setAstBuilder(((t,...e)=>{t.addChildren(e[0]),t.addChildren(...e[1].getChildren())})),i.setAstBuilder(((t,...e)=>{t.addChildren(e[0])}))}}e.Plus=s},3746:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Repeat=void 0;const n=i(4998),r=i(2684),s=i(9987);class o extends s.Rule{constructor(t,e,i,n){super("repeat",t,e),this.from=i,this.to=n,this.setEvaluator(r.Evaluator.ALL_CHILDREN_EVALUATOR)}getFrom(){return this.from}getTo(){return this.to}getEntry(){return this.children[0]}createBNF(t){for(let e=this.to;e>=this.from;e--){const i=[];for(let t=0;t<e;t++)i[t]=this.children[0];const r=s.Rule.addProduction(t,this,this.tgt,...i),o=this;r.onExtension(((t,...e)=>{for(let t=0;t<e.length;t++){let i=e[t];i.setNthEntryInParent(t),i.setName(o.getNameForChild(t))}})),r.setAstBuilder(n.AstBuilder.DEFAULT)}}}e.Repeat=o},9987:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Rule=void 0;const n=i(3938),r=i(5781),s=i(7902);e.Rule=class{constructor(t,e,...i){this.type=t,this.tgt=void 0!==e?e:new n.NonTerminal(t+":"+n.NonTerminal.makeRandomSymbol()),this.children=i}withName(t=void 0){return new s.NamedRule(this,t)}getTarget(){return this.tgt}getRepresentedSymbol(){return this.tgt}getChildren(){return this.children}getEvaluator(){return this.evaluator}setEvaluator(t){return"function"==typeof t&&(t={evaluate:t}),this.evaluator=t,this}getAutocompleter(){return this.autocompleter}setAutocompleter(t){return"function"==typeof t&&(t={getAutocompletion:t}),this.autocompleter=t,this}onSuccessfulParsed(t){return this._onSuccessfulParsed=t,this}getOnSuccessfulParsed(){return this._onSuccessfulParsed}static addProduction(t,e,i,...n){let s=new r.EBNFProduction(e,i,...n);return t.addProduction(s),s}getNameForChild(t){if(void 0!==this.parsedChildNames)return 1==this.parsedChildNames.length?this.parsedChildNames[0]:t>=this.parsedChildNames.length?"no name":this.parsedChildNames[t]}setParsedChildNames(...t){this.parsedChildNames=t}}},304:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Sequence=void 0;const n=i(4998),r=i(9987);class s extends r.Rule{constructor(t,...e){super("sequence",t,...e)}createBNF(t){const e=r.Rule.addProduction(t,this,this.tgt,...this.children),i=this;e.onExtension(((t,...e)=>{for(let t=0;t<e.length;t++){let n=e[t];n.setNthEntryInParent(t),n.setName(i.getNameForChild(t))}})),e.setAstBuilder(n.AstBuilder.DEFAULT)}}e.Sequence=s},9965:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Star=void 0;const n=i(2684),r=i(9987);class s extends r.Rule{constructor(t,e){super("star",t,e),this.setEvaluator(n.Evaluator.ALL_CHILDREN_EVALUATOR)}getEntry(){return this.children[0]}createBNF(t){const e=r.Rule.addProduction(t,this,this.tgt,this.children[0],this.tgt);r.Rule.addProduction(t,this,this.tgt);const i=this;e.onExtension(((t,...e)=>{let n=t.getNthEntryInParent(),r=e[0],s=e[1];r.setNthEntryInParent(n),r.setName(i.getNameForChild(n)),s.setNthEntryInParent(n+1),s.setName(t.getName())})),e.setAstBuilder(((t,...e)=>{t.addChildren(e[0]),t.addChildren(...e[1].getChildren())}))}}e.Star=s},5137:function(t,e,i){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i);var r=Object.getOwnPropertyDescriptor(e,i);r&&!("get"in r?!e.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,n,r)}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),r=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),r(i(7418),e),r(i(9705),e),r(i(3365),e),r(i(509),e),r(i(5781),e),r(i(6581),e),r(i(7902),e),r(i(3481),e),r(i(3481),e),r(i(5936),e),r(i(2066),e),r(i(8613),e),r(i(3746),e),r(i(9987),e),r(i(304),e),r(i(9965),e)},7729:function(t,e,i){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i);var r=Object.getOwnPropertyDescriptor(e,i);r&&!("get"in r?!e.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,n,r)}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),r=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),i(8666),r(i(9297),e),r(i(5137),e),r(i(6450),e),r(i(902),e),r(i(1536),e),r(i(2015),e),r(i(2684),e),r(i(2004),e),r(i(8666),e),r(i(6557),e)},7137:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Interpolator=void 0,e.Interpolator=class{constructor(t,e,i,n){this.getter=t,this.setter=e,this.vTo=i,this.nCycles=n}initialize(){this.vFrom=this.getter()}interpolate(t){0===t&&this.initialize();const e=this.vFrom+(t+1)*(this.vTo-this.vFrom)/this.nCycles;this.setter(t,e)}}},3329:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.LanguageControl=void 0,e.makeMicroscopeParser=function(){let t=new n.Parser;const e=[],i=[];return t.addParseStartListener((()=>{e.length=0,i.length=0})),t.defineType("led","385nm",(t=>385)),t.defineType("led","470nm",(t=>470)),t.defineType("led","567nm",(t=>567)),t.defineType("led","625nm",(t=>625)),t.defineType("led-power","{<led-power>:int}%",(t=>t.evaluate("<led-power>")),!0),t.defineType("exposure-time","{<exposure-time>:int}ms",(t=>t.evaluate("<exposure-time>")),!0),t.defineType("led-setting","{led-power:led-power} at {wavelength:led}",(t=>{const e=t.evaluate("led-power");return{led:t.evaluate("wavelength"),power:e}}),!0),t.defineType("another-led-setting",", {led-setting:led-setting}",(t=>t.evaluate("led-setting")),!0),t.defineType("channel-name","'{<name>:[A-Za-z0-9]:+}'",(t=>t.getParsedString("<name>")),!0),t.defineSentence("Define channel {channel-name:channel-name}:{\n  }excite with {led-setting:led-setting}{another-led-setting:another-led-setting:0-3}{\n  }use an exposure time of {exposure-time:exposure-time}.",void 0).onSuccessfulParsed((t=>{e.push(t.getParsedString("channel-name"))})),t.defineType("region-name","'{<region-name>:[a-zA-Z0-9]:+}'",void 0,!0),t.defineType("region-dimensions","{<width>:float} x {<height>:float} x {<depth>:float} microns",void 0,!0),t.defineType("region-center","{<center>:tuple<float,x,y,z>} microns",void 0,!0),t.defineType("sentence","Define a position {region-name:region-name}:{\n  }{region-dimensions:region-dimensions}{\n  }centered at {region-center:region-center}.",void 0).onSuccessfulParsed((t=>{i.push(t.getParsedString("region-name"))})),t.defineType("defined-channels","'{channel:[A-Za-z0-9]:+}'",(t=>{}),(t=>a.Autocompletion.literal(t,e))),t.defineType("defined-positions","'{position:[A-Za-z0-9]:+}'",(t=>t.getParsedString("position")),(t=>a.Autocompletion.literal(t,i))),t.defineType("time-unit","second(s)",(t=>1)),t.defineType("time-unit","minute(s)",(t=>60)),t.defineType("time-unit","hour(s)",(t=>3600)),t.defineType("time-interval","{n:float} {time-unit:time-unit}",(t=>{const e=t.evaluate("n"),i=t.evaluate("time-unit");return Math.round(e*i)}),!0),t.defineType("repetition","once",(t=>[1,0])),t.defineType("repetition","every {interval:time-interval} for {duration:time-interval}",(t=>[t.evaluate("interval"),t.evaluate("duration")]),!0),t.defineType("z-distance","{z-distance:float} microns",void 0,!0),t.defineType("lens","5x lens",void 0),t.defineType("lens","20x lens",void 0),t.defineType("mag","0.5x magnification changer",void 0),t.defineType("mag","1.0x magnification changer",void 0),t.defineType("mag","2.0x magnification changer",void 0),t.defineType("binning","1 x 1",(t=>1)),t.defineType("binning","2 x 2",(t=>2)),t.defineType("binning","4 x 4",(t=>4)),t.defineType("binning","8 x 8",(t=>8)),t.defineType("temperature","{temperature:float}°C",void 0,!0),t.defineType("co2-concentration","{CO2 concentration:float}%",void 0,!0),t.defineType("incubation","set the temperature to {temperature:temperature}",void 0),t.defineType("incubation","set the CO2 concentration to {co2-concentration:co2-concentration}",void 0),t.defineType("acquisition","acquire...{\n  }every {interval:time-interval} for {duration:time-interval}{\n  }position(s) {positions:list<defined-positions>}{\n  }channel(s) {channels:list<defined-channels>}{\n  }with a plane distance of {dz:z-distance}{\n  }using the {lens:lens} with the {magnification:mag} and a binning of {binning:binning}",void 0),t.defineType("start","At the beginning",void 0),t.defineType("start","At {time:time}",void 0,!0),t.defineType("start","After {delay:time-interval}",void 0,!0),t.defineSentence("{start:start}, {acquisition:acquisition}.",void 0),t.defineSentence("{start:start}, {incubation:incubation}.",void 0),t};const n=i(8666),r=i(6060),s=i(8083),o=i(7137),a=i(9636);e.LanguageControl=class{constructor(t=void 0){this.timeline=new s.Timeline,this.microscope=void 0!==t?t:new r.Microscope}reset(){this.globalStart=new Date,this.timeline.clear(),this.microscope.reset()}getTimeline(){return this.timeline}getMicroscope(){return this.microscope}initParser(){const t=[],e=[];let i=new n.Parser;return i.addParseStartListener((()=>{t.length=0,e.length=0})),i.defineType("led","385nm",(t=>r.LED.LED_385)),i.defineType("led","470nm",(t=>r.LED.LED_470)),i.defineType("led","567nm",(t=>r.LED.LED_567)),i.defineType("led","625nm",(t=>r.LED.LED_625)),i.defineType("led-power","{<led-power>:int}%",(t=>t.evaluate("<led-power>")),!0),i.defineType("exposure-time","{<exposure-time>:int}ms",(t=>t.evaluate("<exposure-time>")),!0),i.defineType("led-setting","{led-power:led-power} at {wavelength:led}",(t=>{const e=t.evaluate("led-power"),i=t.evaluate("wavelength");return new r.LEDSetting(i,e)}),!0),i.defineType("another-led-setting",", {led-setting:led-setting}",(t=>t.evaluate("led-setting")),!0),i.defineType("channel-name","'{<name>:[A-Za-z0-9]:+}'",(t=>t.getParsedString("<name>")),!0),i.defineSentence("Define channel {channel-name:channel-name}:{\n  }excite with {led-setting:led-setting}{another-led-setting:another-led-setting:0-3}{\n  }use an exposure time of {exposure-time:exposure-time}.",(t=>{const e=t.evaluate("channel-name"),i=t.evaluate("led-setting"),n=t.evaluate("another-led-setting"),s=t.evaluate("exposure-time"),o=new r.Channel(e,i,n,s);this.microscope.addChannel(o)})).onSuccessfulParsed((e=>{t.push(e.getParsedString("channel-name"))})),i.defineType("region-name","'{<region-name>:[a-zA-Z0-9]:+}'",(t=>t.getParsedString("<region-name>")),!0),i.defineType("region-dimensions","{<width>:float} x {<height>:float} x {<depth>:float} microns",(t=>[t.evaluate("<width>"),t.evaluate("<height>"),t.evaluate("<depth>")]),!0),i.defineType("region-center","{<center>:tuple<float,x,y,z>} microns",(t=>t.evaluate("<center>")),!0),i.defineSentence("Define a position {region-name:region-name}:{\n  }{region-dimensions:region-dimensions}{\n  }centered at {region-center:region-center}.",(t=>{const e=t.evaluate("region-name"),i=t.evaluate("region-dimensions"),n=t.evaluate("region-center");this.microscope.addPosition(new r.Position(e,n,i))})).onSuccessfulParsed((t=>{e.push(t.getParsedString("region-name"))})),i.defineType("defined-channels","'{channel:[A-Za-z0-9]:+}'",(t=>t.getParsedString("channel")),(e=>a.Autocompletion.literal(e,t))),i.defineType("defined-positions","'{position:[A-Za-z0-9]:+}'",(t=>t.getParsedString("position")),(t=>a.Autocompletion.literal(t,e))),i.defineType("time-unit","second(s)",(t=>1)),i.defineType("time-unit","minute(s)",(t=>60)),i.defineType("time-unit","hour(s)",(t=>3600)),i.defineType("time-interval","{n:float} {time-unit:time-unit}",(t=>{const e=t.evaluate("n"),i=t.evaluate("time-unit");return Math.round(e*i)}),!0),i.defineType("repetition","once",(t=>[1,0])),i.defineType("repetition","every {interval:time-interval} for {duration:time-interval}",(t=>[t.evaluate("interval"),t.evaluate("duration")]),!0),i.defineType("z-distance","{z-distance:float} microns",(t=>t.evaluate("z-distance")),!0),i.defineType("lens","5x lens",(t=>r.Lens.FIVE)),i.defineType("lens","20x lens",(t=>r.Lens.TWENTY)),i.defineType("mag","0.5x magnification changer",(t=>r.MagnificationChanger.ZERO_FIVE)),i.defineType("mag","1.0x magnification changer",(t=>r.MagnificationChanger.ONE_ZERO)),i.defineType("mag","2.0x magnification changer",(t=>r.MagnificationChanger.TWO_ZERO)),i.defineType("binning","1 x 1",(t=>r.Binning.ONE)),i.defineType("binning","2 x 2",(t=>r.Binning.TWO)),i.defineType("binning","3 x 3",(t=>r.Binning.THREE)),i.defineType("binning","4 x 4",(t=>r.Binning.FOUR)),i.defineType("binning","5 x 5",(t=>r.Binning.FIVE)),i.defineType("start","At the beginning",(t=>this.globalStart)),i.defineType("start","At {time:time}",(t=>t.evaluate("time")),!0),i.defineType("start","After {delay:time-interval}",(t=>{const e=t.evaluate("delay"),i=new Date(this.globalStart);return i.setSeconds(i.getSeconds()+e),i}),!0),i.defineType("position-list","all positions",(t=>[r.ALL_POSITIONS])),i.defineType("position-list","position(s) {positions:list<defined-positions>}",(t=>t.evaluate("positions"))),i.defineType("channel-list","all channels",(t=>[r.ALL_CHANNELS])),i.defineType("channel-list","channel(s) {channels:list<defined-channels>}",(t=>t.evaluate("channels"))),i.defineSentence("{start:start}{, }acquire...{\n  }{repetition:repetition}{\n  }{position-list:position-list}{\n  }{channel-list:channel-list}{\n  }with a plane distance of {dz:z-distance}{\n  }using the {lens:lens} with the {magnification:mag} and a binning of {binning:binning}.",(t=>{t.evaluate("start");const e=t.evaluate("repetition"),i=e[0],n=e[1],r=t.evaluate("position-list"),s=t.evaluate("channel-list"),o=t.evaluate("lens"),a=t.evaluate("magnification"),l=t.evaluate("binning"),h=t.evaluate("dz"),c=new Date;c.setHours(this.globalStart.getHours()),c.setMinutes(this.globalStart.getMinutes()),c.setSeconds(this.globalStart.getSeconds()),c.setMilliseconds(this.globalStart.getMilliseconds()),this.globalStart.getTime()>c.getTime()&&c.setDate(c.getDate()+1);const u=n<i?1:Math.floor(n/i)+1;for(let t=0;t<u;t++){const e=new Date(c);e.setSeconds(c.getSeconds()+t*i),this.timeline.put(e,(()=>{this.microscope.setLens(o),this.microscope.setMagnificationChanger(a),this.microscope.setBinning(l),this.microscope.acquire(r,s,h)}))}})),i.defineSentence("{start:start}{, }adjust...{\n  }{repetition:repetition}{\n  }the power of the {led:led} led of channel {channel:defined-channels} to {power:led-power}.",(t=>{t.evaluate("start");const e=t.evaluate("repetition"),i=e[0],n=e[1],r=t.evaluate("led"),s=t.evaluate("channel"),a=t.evaluate("power"),l=new Date;l.setHours(this.globalStart.getHours()),l.setMinutes(this.globalStart.getMinutes()),l.setSeconds(this.globalStart.getSeconds()),l.setMilliseconds(this.globalStart.getMilliseconds()),this.globalStart.getTime()>l.getTime()&&l.setDate(l.getDate()+1);const h=n<i?1:Math.floor(n/i)+1,c=new o.Interpolator((()=>{var t,e;return null===(e=null===(t=this.microscope.getChannel(s))||void 0===t?void 0:t.getLEDSetting(r))||void 0===e?void 0:e.getIntensity()}),((t,e)=>{var i,n;return null===(n=null===(i=this.microscope.getChannel(s))||void 0===i?void 0:i.getLEDSetting(r))||void 0===n?void 0:n.setIntensity(Math.round(e))}),a,h);for(let t=0;t<h;t++){const e=t,n=new Date(l);n.setSeconds(l.getSeconds()+t*i),this.timeline.put(n,(()=>c.interpolate(e)))}})),i.defineSentence("{start:start}{, }adjust...{\n  }{repetition:repetition}{\n  }the exposure time of channel {channel:defined-channels} to {exposure-time:exposure-time}.",(t=>{t.evaluate("start");const e=t.evaluate("repetition"),i=e[0],n=e[1],r=t.evaluate("channel"),s=t.evaluate("exposure-time"),a=new Date;a.setHours(this.globalStart.getHours()),a.setMinutes(this.globalStart.getMinutes()),a.setSeconds(this.globalStart.getSeconds()),a.setMilliseconds(this.globalStart.getMilliseconds()),this.globalStart.getTime()>a.getTime()&&a.setDate(a.getDate()+1);const l=n<i?1:Math.floor(n/i)+1,h=new o.Interpolator((()=>{var t;return null===(t=this.microscope.getChannel(r))||void 0===t?void 0:t.getExposureTime()}),((t,e)=>{var i;return null===(i=this.microscope.getChannel(r))||void 0===i?void 0:i.setExposureTime(Math.round(e))}),s,l);for(let t=0;t<l;t++){const e=t,n=new Date(a);n.setSeconds(a.getSeconds()+t*i),this.timeline.put(n,(()=>h.interpolate(e)))}})),i.defineType("temperature","{temperature:float}°C",(t=>t.evaluate("temperature")),!0),i.defineType("co2-concentration","{CO2 concentration:float}%",(t=>t.evaluate("CO2 concentration")),!0),i.defineSentence("{start:start}{, }adjust...{\n  }{repetition:repetition}{\n  }the CO2 concentration to {co2-concentration:co2-concentration}.",(t=>{t.evaluate("start");const e=t.evaluate("repetition"),i=e[0],n=e[1],r=t.evaluate("co2-concentration"),s=new Date;s.setHours(this.globalStart.getHours()),s.setMinutes(this.globalStart.getMinutes()),s.setSeconds(this.globalStart.getSeconds()),s.setMilliseconds(this.globalStart.getMilliseconds()),this.globalStart.getTime()>s.getTime()&&s.setDate(s.getDate()+1);const a=n<i?1:Math.floor(n/i)+1,l=new o.Interpolator((()=>this.microscope.getCO2Concentration()),((t,e)=>this.microscope.setCO2Concentration(e)),r,a);for(let t=0;t<a;t++){const e=t,n=new Date(s);n.setSeconds(s.getSeconds()+t*i),this.timeline.put(n,(()=>l.interpolate(e)))}})),i.defineSentence("{start:start}{, }adjust...{\n  }{repetition:repetition}{\n  }the temperature to {temperature:temperature}.",(t=>{t.evaluate("start");const e=t.evaluate("repetition"),i=e[0],n=e[1],r=t.evaluate("temperature"),s=new Date;s.setHours(this.globalStart.getHours()),s.setMinutes(this.globalStart.getMinutes()),s.setSeconds(this.globalStart.getSeconds()),s.setMilliseconds(this.globalStart.getMilliseconds()),this.globalStart.getTime()>s.getTime()&&s.setDate(s.getDate()+1);const a=n<i?1:Math.floor(n/i)+1,l=new o.Interpolator((()=>this.microscope.getTemperature()),((t,e)=>this.microscope.setTemperature(e)),r,a);for(let t=0;t<a;t++){const e=t,n=new Date(s);n.setSeconds(s.getSeconds()+t*i),this.timeline.put(n,(()=>l.interpolate(e)))}})),i}}},6060:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Microscope=e.ALL_POSITIONS=e.ALL_CHANNELS=e.Position=e.Tuple3D=e.Binning=e.MAGNIFICATION_CHANGES=e.MagnificationChanger=e.LENSES=e.Lens=e.Channel=e.LEDSetting=e.LEDs=e.LED=void 0;class i{constructor(t){this.WAVELENGTH=t}}e.LED=i,i.LED_385=new i(385),i.LED_470=new i(470),i.LED_567=new i(567),i.LED_625=new i(625),e.LEDs=[i.LED_385,i.LED_470,i.LED_567,i.LED_625],e.LEDSetting=class{constructor(t,e){this.led=t,this.intensity=e}setIntensity(t){this.intensity=t}getIntensity(){return this.intensity}},e.Channel=class{constructor(t,e,i,n){this.name=t,this.ledSettings=[e],this.ledSettings.push(...i),this.exposureTime=n}getLEDSetting(t){return this.ledSettings.find((e=>e.led.WAVELENGTH===t.WAVELENGTH))}getExposureTime(){return this.exposureTime}setExposureTime(t){this.exposureTime=t}};class n{constructor(t,e){this.magnification=t,this.label=e}toString(){return this.label}}e.Lens=n,n.FIVE=new n(5,"5x"),n.TWENTY=new n(20,"20x"),e.LENSES=[n.FIVE,n.TWENTY];class r{constructor(t,e){this.magnification=t,this.label=e}toString(){return this.label}}e.MagnificationChanger=r,r.ZERO_FIVE=new r(.5,"0.5x"),r.ONE_ZERO=new r(1,"1.0x"),r.TWO_ZERO=new r(2,"2.0x"),e.MAGNIFICATION_CHANGES=[r.ZERO_FIVE,r.ONE_ZERO,r.TWO_ZERO];class s{constructor(t,e){this.binning=t,this.label=e}toString(){return this.label}}e.Binning=s,s.ONE=new s(1,"1x1"),s.TWO=new s(2,"2x2"),s.THREE=new s(3,"3x3"),s.FOUR=new s(4,"4x4"),s.FIVE=new s(5,"5x5");class o{constructor(t){this.x=t[0],this.y=t[1],this.z=t[2]}toString(){return"("+this.x+", "+this.y+", "+this.z+")"}}e.Tuple3D=o,e.Position=class{constructor(t,e,i){this.name=t,this.center=new o(e),this.extent=new o(i)}toString(){return this.name+" "+this.center.toString()}};class a{constructor(){this.temperature=20,this.co2Concentration=0}setTemperature(t){this.temperature=t}setCO2Concentration(t){this.co2Concentration=t}reset(){this.temperature=20,this.co2Concentration=0}}e.ALL_CHANNELS="ALL_CHANNELS",e.ALL_POSITIONS="ALL_POSITIONS",e.Microscope=class{constructor(){this.channels=[],this.positions=[],this.lens=n.FIVE,this.magnificationChanger=r.ONE_ZERO,this.binning=s.ONE,this.incubation=new a,this.onAcquire=this.acquireSinglePositionAndChannel}reset(){this.channels.length=0,this.positions.length=0,this.lens=n.FIVE,this.magnificationChanger=r.ONE_ZERO,this.binning=s.ONE,this.incubation.reset()}setOnAcquire(t){this.onAcquire=t}addChannel(t){this.channels.push(t)}getChannel(t){return this.channels.find((e=>e.name===t))}clearChannels(){this.channels.length=0}addPosition(t){this.positions.push(t)}getPosition(t){return this.positions.find((e=>e.name===t))}clearPositions(){this.positions.length=0}getTemperature(){return this.incubation.temperature}setTemperature(t){this.incubation.setTemperature(t)}getCO2Concentration(){return this.incubation.co2Concentration}setCO2Concentration(t){this.incubation.setCO2Concentration(t)}getLens(){return this.lens}setLens(t){this.lens=t}getMagnificationChanger(){return this.magnificationChanger}setMagnificationChanger(t){this.magnificationChanger=t}setBinning(t){this.binning=t}acquire(t,i,n){const r=i.length>0&&i[0]===e.ALL_CHANNELS?this.channels:i.map((t=>this.getChannel(t))),s=t.length>0&&t[0]===e.ALL_POSITIONS?this.positions:t.map((t=>this.getPosition(t)));this.acquirePositionsAndChannels(s,r,n)}acquirePositionsAndChannels(t,e,i){for(const i of t)for(const t of e)this.onAcquire(i,t)}acquireSinglePositionAndChannel(t,i){const n=(new Date).toLocaleString("en-us",{year:"numeric",month:"short",day:"numeric",hour12:!1,hour:"numeric",minute:"numeric",second:"numeric"});console.log(n),console.log("======================"),console.log("Stage position: "+t.name),console.log("  - "+t.center.toString()),console.log(),console.log("Channel settings: "+i.name),console.log("  - Exposure time: "+i.getExposureTime()+"ms");for(const t of e.LEDs){const e=i.getLEDSetting(t);void 0!==e&&console.log("  - LED "+t.WAVELENGTH+": "+e.getIntensity()+"%")}console.log(),console.log("Optics:"),console.log("  - Lens: "+this.lens),console.log("  - Mag.Changer: "+this.magnificationChanger),console.log("  - Binning: "+this.binning),console.log(),console.log("Incubation:"),console.log("  - Temperature: "+this.getTemperature()+"C"),console.log("  - CO2 concentration: "+this.getCO2Concentration()+"%"),console.log(),console.log("Acquire stack"),console.log(),console.log()}}},8083:function(t,e){"use strict";var i=this&&this.__awaiter||function(t,e,i,n){return new(i||(i=Promise))((function(r,s){function o(t){try{l(n.next(t))}catch(t){s(t)}}function a(t){try{l(n.throw(t))}catch(t){s(t)}}function l(t){var e;t.done?r(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}l((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.Timeline=void 0,e.Timeline=class{constructor(){this.timeline=[],this.stop=!1,this.executor=null}put(t,e){this.timeline.push([t,[e]]),this.timeline.sort(((t,e)=>t[0].getTime()-e[0].getTime()))}runAndRemoveEntriesBefore(t,e){const i=[];for(let n=0;n<this.timeline.length;n++){const[r,s]=this.timeline[n];if(!(r<t))break;i.push(r);for(const t of s)e(t)}for(const t of i){const e=this.timeline.findIndex((([e])=>e===t));-1!==e&&this.timeline.splice(e,1)}}process(t){return i(this,void 0,void 0,(function*(){this.stop=!1,this.executor=new Promise((e=>i(this,void 0,void 0,(function*(){for(;!this.stop&&this.timeline.length>0;){if(this.runAndRemoveEntriesBefore(new Date,t),0===this.timeline.length)return void e();yield new Promise((t=>setTimeout(t,1e3)))}e()})))),yield this.executor}))}waitForProcessing(){return i(this,void 0,void 0,(function*(){this.executor&&(yield this.executor)}))}cancel(){this.stop=!0}clear(){this.timeline=[]}toString(){let t="";for(const[e,i]of this.timeline)t+=e+" -> "+i;return t}}},902:function(t,e,i){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i);var r=Object.getOwnPropertyDescriptor(e,i);r&&!("get"in r?!e.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,n,r)}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),r=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),r(i(3329),e),r(i(6060),e),r(i(8083),e),r(i(7137),e)},5475:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ACCompleter=void 0;const n=i(9636),r=i(591);function s(t,e){let i=t.apply?t.apply:t.label;const n=document.createElement("span");return n.innerHTML=i,t.label="",n}e.ACCompleter=class{constructor(t){this.completions=[],this.view=t,this.autocompletionExtension=(0,r.autocompletion)({activateOnTyping:!1,defaultKeymap:!1,interactionDelay:0,closeOnBlur:!1,override:[t=>this.getCompletions(t)],addToOptions:[{render:s,position:0}]})}selectNext(){(0,r.moveCompletionSelection)(!0)(this.view)}selectPrevious(){(0,r.moveCompletionSelection)(!1)(this.view)}setCompletions(t){this.completions=t}getSelected(){const t=(0,r.selectedCompletion)(this.view.state);if(null===t)return;const e=(0,r.currentCompletions)(this.view.state).indexOf(t);return e<0||null===t?void 0:this.completions[e]}completionPrefix(){return this.completions[0].getAlreadyEntered()}hidePopup(){(0,r.closeCompletion)(this.view)}complete(){(0,r.startCompletion)(this.view)}isActive(){return null!==(0,r.completionStatus)(this.view.state)&&(0,r.currentCompletions)(this.view.state).length>1}getCompletions(t){let e;const i=this.completions.map((t=>{void 0===e&&(e=t.getAlreadyEntered().length);let i=t.getCompletion(n.Autocompletion.Purpose.FOR_MENU),r=i;return i=i.replaceAll("${","<b>").replaceAll("}","</b>"),(i.startsWith("\n")||i.startsWith("\r"))&&(i="&lt;new line&gt;"),""===i&&(i="&lt;empty&gt;"),{label:r,apply:i}}));return void 0===e&&(e=0),{from:t.pos-e,filter:!1,options:i}}}},2939:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ACEditor=void 0;const n=i(535),r=i(5432),s=i(9064),o=i(9636),a=i(5475),l=i(6557),h=i(3938),c=i(1506),u=i(9064),d=i(2533),f=i(9277),p=i(8539),m=i(591),g=i(4126),v=[(0,c.lineNumbers)(),(0,c.highlightActiveLineGutter)(),(0,c.highlightSpecialChars)(),(0,f.history)(),(0,d.foldGutter)(),(0,c.drawSelection)(),(0,c.dropCursor)(),u.EditorState.allowMultipleSelections.of(!0),(0,d.indentOnInput)(),(0,d.syntaxHighlighting)(d.defaultHighlightStyle,{fallback:!0}),(0,d.bracketMatching)(),(0,m.closeBrackets)(),(0,m.autocompletion)(),(0,c.rectangularSelection)(),(0,c.crosshairCursor)(),(0,c.highlightActiveLine)(),c.keymap.of([...m.closeBracketsKeymap,...f.defaultKeymap,...p.searchKeymap,...f.historyKeymap,...d.foldKeymap,...m.completionKeymap,...g.lintKeymap])];e.ACEditor=class{constructor(t,e){this.parameterizedCompletion=void 0,this.errorHighlight=void 0,this.onRun=()=>this.run(),this.beforeRun=()=>{},this.afterRun=()=>{},this.parser=t;const i=this,o=this.createEditorElement(e);this.outputElement=this.createOutputElement(e),this.createButton(e).onclick=()=>i.onRun(),this.editor=new c.EditorView({extensions:[],parent:o}),this.errorHighlight=new r.ErrorHighlight(this.editor),this.completer=new a.ACCompleter(this.editor),this.editor.dispatch({effects:s.StateEffect.reconfigure.of([c.EditorView.domEventHandlers({keydown:(t,e)=>i.handleKeyEvent(t,e)}),this.completer.autocompletionExtension,v,c.EditorView.lineWrapping,n.highlight_extension,r.error_highlight_extension])})}getSelectedLinesStart(){const t=this.editor.state.selection.main.from;return this.editor.state.doc.lineAt(t).from}getSelectedLinesEnd(){const t=this.editor.state.selection.main.to;return this.editor.state.doc.lineAt(t).to}getSelectedLines(){const t=this.getSelectedLinesStart(),e=this.getSelectedLinesEnd();return this.editor.state.sliceDoc(t,e)}setOnRun(t){this.onRun=t}setBeforeRun(t){this.beforeRun=t}setAfterRun(t){this.afterRun=t}createEditorElement(t){const e=document.createElement("div");return e.id="nls-editor",e.setAttribute("style","width: 100%; height: 300px; margin-bottom: 3px; border: 1px solid gray; flex-grow: 3; overflow: auto;"),t.appendChild(e),e}createOutputElement(t){const e=document.createElement("textarea");return e.id="nls-output",e.setAttribute("style","width: 100%; height: 100px; margin-top: 3px; border: 1px solid gray; flex-grow: 2; padding: 0px; resize: none; overflow: auto;"),e.setAttribute("readonly","true"),t.appendChild(e),e}createButton(t){const e=document.createElement("button");return e.id="nls-run",e.setAttribute("style","margin-top: 10px; margin-left: auto; margin-right: auto; display: block; margin-bottom: 10px;"),e.setAttribute("type","button"),e.innerText="Run",t.appendChild(e),e}run(t=!1){console.debug("running"),this.outputElement.textContent="";const e=this.editor.state.doc.toString();try{this.beforeRun();const i=t?this.getSelectedLines():e;this.parser.parse(i).evaluate(),this.afterRun()}catch(t){t instanceof Error?this.outputElement.textContent=t.message:this.outputElement.textContent=t.toString(),(console.error||console.log).call(console,t.stack||t)}}insertCompletion(t){if(!t)return;const e=this.editor.state.selection,i=e.main.head,r=this.editor.state.doc.toString(),s=i===r.length||0==r.substring(i).trim().length;e.main.empty&&this.editor.dispatch({selection:{anchor:i,head:i-this.completer.completionPrefix().length}});const a=t.getCompletion(o.Autocompletion.Purpose.FOR_INSERTION);a.indexOf("${")>=0?(this.cancelParameterizedCompletion(),this.parameterizedCompletion=new n.ParameterizedCompletion(this.editor),this.parameterizedCompletion.setParameterChangeListener(((t,e)=>this.parameterChanged(t,e))),this.parameterizedCompletion.replaceSelection(t)):(this.editor.dispatch(this.editor.state.replaceSelection(a)),this.completer.hidePopup(),s&&setTimeout((()=>this.autocomplete())))}parameterChanged(t,e){e?(this.cancelParameterizedCompletion(),this.autocomplete()):this.autocomplete(!1)}cancelParameterizedCompletion(){void 0!==this.parameterizedCompletion&&this.parameterizedCompletion.cancel(),this.parameterizedCompletion=void 0}handleKeyEvent(t,e){if(console.log("keydown",t.key,t),this.completer.isActive()){if("Enter"===t.key)return this.insertCompletion(this.completer.getSelected()),!0;if("ArrowUp"===t.key)return this.completer.selectPrevious(),!0;if("ArrowDown"===t.key)return this.completer.selectNext(),!0;if("Escape"===t.key)return this.completer.hidePopup(),!0;if("Tab"===t.key)return this.completer.hidePopup(),!0}else if(" "===t.key&&t.ctrlKey)return this.autocomplete(),!0;if(this.parameterizedCompletion){if("Escape"===t.key)return this.cancelParameterizedCompletion(),!0;if(this.parameterizedCompletion.handleKeyEvent(t),t.defaultPrevented)return!0}return!(1!==t.key.length||t.ctrlKey||t.metaKey||t.altKey||(e.dispatch(e.state.replaceSelection(t.key)),this.autocomplete(),0))}autocomplete(t=!0){var e,i;const r=this.editor.state.doc.toString(),s=this.editor.state.selection.main.anchor,a=r.substring(0,s);null===(e=this.errorHighlight)||void 0===e||e.clearError();const c=[];let u;try{u=this.parser.parse(a,c),console.log(u.getMatcher().state)}catch(t){if(t instanceof l.ParseException){const e=t.getFirstAutocompletingAncestorThatFailed().getMatcher();return void(null===(i=this.errorHighlight)||void 0===i||i.setError(e.pos,e.pos+e.parsed.length))}throw t}const d=this.parser.getTargetGrammar().getBNF();if(void 0!==this.parameterizedCompletion)if(c.length>0){let t=!1;for(let e of c){let i=e.forSymbol;if(e instanceof o.Autocompletion.EntireSequence){let t=[];n.ParameterizedCompletion.parseParameters(e,t,0),e=t[0].autocompletion,i=e.forSymbol}if(i.equals(this.parameterizedCompletion.getForAutocompletion().forSymbol)){t=!0;break}const r=this.parameterizedCompletion.getCurrentParameter();console.log("current param: "+(null==r?void 0:r.toString()));const s=null==r?void 0:r.autocompletion.forSymbol;if(i.equals(s)){t=!0;break}if(s instanceof h.NonTerminal&&s.uses(i,d)){t=!0;break}}if(!t)return void this.parameterizedCompletion.next()}else console.log("no completions");else console.log("parameterized completion == null");1===c.length?(t||m.autocompletion instanceof o.Autocompletion.Literal)&&(this.completer.setCompletions(c),this.insertCompletion(c[0]),this.completer.hidePopup()):c.length>1?(this.completer.setCompletions(c),this.completer.complete()):this.completer.hidePopup()}}},5432:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ErrorHighlight=e.error_highlight_extension=void 0;const n=i(9064),r=i(1506),s=n.StateEffect.define(),o=n.StateEffect.define();e.error_highlight_extension=n.StateField.define({create:()=>r.Decoration.none,update(t,e){t=t.map(e.changes);for(let i of e.effects)i.is(s)?t=t.update({add:i.value,sort:!0}):i.is(o)&&(t=t.update({filter:i.value}));return t},provide:t=>r.EditorView.decorations.from(t)});const a=r.Decoration.mark({inclusive:!0,attributes:{style:"/* background-color: #b7c1e8; border: red 1px solid; */ color: red; font-weight: bold; "},tagName:"span"});e.ErrorHighlight=class{constructor(t){this.parameterChangeListener=void 0,this.tc=t}setError(t,e){var i,n;this.clearError(),t===e&&e++,i=t,n=e,this.tc.dispatch({effects:s.of([a.range(i,n)])})}clearError(){this.tc.dispatch({effects:o.of((()=>!1))})}}},535:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ParsedParam=e.ParameterizedCompletion=e.highlight_extension=void 0;const n=i(9064),r=i(1506),s=i(9636),o=n.StateEffect.define(),a=n.StateEffect.define();e.highlight_extension=n.StateField.define({create:()=>r.Decoration.none,update(t,e){t=t.map(e.changes);for(let i of e.effects)i.is(o)?t=t.update({add:i.value,sort:!0}):i.is(a)&&(t=t.update({filter:i.value}));return t},provide:t=>r.EditorView.decorations.from(t)});const l=r.Decoration.mark({inclusive:!0,attributes:{style:"/* background-color: #b7c1e8; */border: gray 1px solid;"},tagName:"span"});class h extends r.WidgetType{constructor(){super()}toDOM(t){let e=document.createElement("span");return e.setAttribute("style","border-right: gray 1px solid; margin-left: 1px;"),e}}const c=r.Decoration.widget({widget:new h,side:1e3});function u(t){t.dispatch({effects:a.of((()=>!1))})}class d{constructor(t){this.parameters=[],this.forAutocompletion=void 0,this.parameterChangeListener=void 0,this.tc=t}getForAutocompletion(){return this.forAutocompletion}setParameterChangeListener(t){this.parameterChangeListener=t}replaceSelection(t){this.forAutocompletion=t,this.parameters=[];const e=d.parseParameters(t,this.parameters),i=this.tc.state.selection.main.anchor;this.tc.dispatch(this.tc.state.replaceSelection(e)),u(this.tc);for(let t of this.parameters)n=this.tc,r=i+t.i0,s=i+t.i1,n.dispatch({effects:o.of([l.range(r,s)])});var n,r,s;const a=i+e.length;!function(t,e){t.dispatch({effects:o.of([c.range(e,e)])})}(this.tc,a),this.cycle(0)}next(){const t=this.tc.state.field(e.highlight_extension);let i=t.iter(0),n=this.tc.state.selection.main.head,r=0;for(;null!==i.value;){if(n<i.from||r===t.size-1)return void this.cycle(r);i.next(),r++}}getParamIndexForCursor(){let t=this.tc.state.field(e.highlight_extension).iter(0),i=this.tc.state.selection.main.head,n=0;for(;null!==t.value;){if(i>=t.from&&i<=t.to)return n;t.next(),n++}}getCurrentParameter(){const t=this.getParamIndexForCursor();if(void 0!==t)return this.parameters[t]}previous(){let t=this.tc.state.field(e.highlight_extension).iter(0),i=this.tc.state.selection.main.head,n=0;for(;null!==t.value;){if(i<=t.to)return void this.cycle(n-1);t.next(),n++}this.cycle(n-1)}cycle(t){const i=this.tc.state.field(e.highlight_extension),n=i.size;if(0===n)return;if(-1===t)return;let r=i.iter(0);for(let e=0;e<n&&e<t;e++)r.next();const s=t===n-1,o=r.from;this.tc.dispatch({selection:{anchor:o,head:r.to}}),void 0!==this.parameterChangeListener&&this.parameterChangeListener(t,s)}cancel(){u(this.tc),this.parameterChangeListener=void 0}handleKeyEvent(t){0!=this.tc.state.field(e.highlight_extension).size?"Tab"!==t.key&&"Enter"!==t.key||(t.preventDefault(),t.shiftKey?this.previous():this.next()):this.cancel()}static parseParameters(t,e,i=0){if(t instanceof s.Autocompletion.Literal)return t.getCompletion(s.Autocompletion.Purpose.FOR_INSERTION);if(t instanceof s.Autocompletion.Parameterized){const i=t.getParamName();return e.push(new f(i,0,i.length,t)),i}if(t instanceof s.Autocompletion.EntireSequence){const n=t.getSequenceOfCompletions(),r=t.getSequence();let o="";for(const[a,l]of n.entries()){const n=l.length;if(n>1){const t=r.getNameForChild(a),n=new s.Autocompletion.Parameterized(r.getChildren()[a],t,t),l=i+o.length,h=l+t.length;e.push(new f(t,l,h,n)),o+=t}else if(1===n){const n=l[0];if(n instanceof s.Autocompletion.Literal)o+=n.getCompletion(s.Autocompletion.Purpose.FOR_INSERTION);else if(n instanceof s.Autocompletion.Parameterized){const t=n,r=t.getParamName(),s=i+o.length,a=s+r.length;e.push(new f(r,s,a,t)),o+=r}else if(n instanceof s.Autocompletion.EntireSequence){const t=n,r=i+o.length;o+=d.parseParameters(t,e,r)}else console.log("Unknown completion type: "+typeof t)}}return o}throw new Error("Unexpected completion type: "+typeof t)}}e.ParameterizedCompletion=d;class f{constructor(t,e,i,n){this.name=t,this.i0=e,this.i1=i,this.autocompletion=n}toString(){return this.name}}e.ParsedParam=f},1536:function(t,e,i){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i);var r=Object.getOwnPropertyDescriptor(e,i);r&&!("get"in r?!e.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,n,r)}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),r=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),r(i(5475),e),r(i(2939),e),r(i(535),e)},7106:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.IntRange=void 0;class i{constructor(t,e){this.lower=t,this.upper=void 0!==e?e:t}getLower(){return this.lower}getUpper(){return this.upper}equals(t){if(!(t instanceof i))return!1;const e=t;return this.lower===e.lower&&this.upper===e.upper}toString(){return"["+this.lower+" - "+this.upper+"]"}}e.IntRange=i,i.MAX_INT=2147483647,i.STAR=new i(0,i.MAX_INT),i.PLUS=new i(1,i.MAX_INT),i.OPTIONAL=new i(0,1)},6450:function(t,e,i){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i);var r=Object.getOwnPropertyDescriptor(e,i);r&&!("get"in r?!e.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,n,r)}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),r=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),r(i(7106),e)},591:(t,e,i)=>{"use strict";var n=i(9064),r=i(1506),s=i(2533);class o{constructor(t,e,i){this.state=t,this.pos=e,this.explicit=i,this.abortListeners=[]}tokenBefore(t){let e=s.syntaxTree(this.state).resolveInner(this.pos,-1);for(;e&&t.indexOf(e.name)<0;)e=e.parent;return e?{from:e.from,to:this.pos,text:this.state.sliceDoc(e.from,this.pos),type:e.type}:null}matchBefore(t){let e=this.state.doc.lineAt(this.pos),i=Math.max(e.from,this.pos-250),n=e.text.slice(i-e.from,this.pos-e.from),r=n.search(u(t,!1));return r<0?null:{from:i+r,to:this.pos,text:n.slice(r)}}get aborted(){return null==this.abortListeners}addEventListener(t,e){"abort"==t&&this.abortListeners&&this.abortListeners.push(e)}}function a(t){let e=Object.keys(t).join(""),i=/\w/.test(e);return i&&(e=e.replace(/\w/g,"")),`[${i?"\\w":""}${e.replace(/[^\w\s]/g,"\\$&")}]`}function l(t){let e=t.map((t=>"string"==typeof t?{label:t}:t)),[i,n]=e.every((t=>/^\w+$/.test(t.label)))?[/\w*$/,/\w+$/]:function(t){let e=Object.create(null),i=Object.create(null);for(let{label:n}of t){e[n[0]]=!0;for(let t=1;t<n.length;t++)i[n[t]]=!0}let n=a(e)+a(i)+"*$";return[new RegExp("^"+n),new RegExp(n)]}(e);return t=>{let r=t.matchBefore(n);return r||t.explicit?{from:r?r.from:t.pos,options:e,validFor:i}:null}}class h{constructor(t,e,i,n){this.completion=t,this.source=e,this.match=i,this.score=n}}function c(t){return t.selection.main.from}function u(t,e){var i;let{source:n}=t,r=e&&"^"!=n[0],s="$"!=n[n.length-1];return r||s?new RegExp(`${r?"^":""}(?:${n})${s?"$":""}`,null!==(i=t.flags)&&void 0!==i?i:t.ignoreCase?"i":""):t}const d=n.Annotation.define();function f(t,e,i,r){let{main:s}=t.selection,o=i-s.from,a=r-s.from;return Object.assign(Object.assign({},t.changeByRange((l=>l!=s&&i!=r&&t.sliceDoc(l.from+o,l.from+a)!=t.sliceDoc(i,r)?{range:l}:{changes:{from:l.from+o,to:r==s.from?l.to:l.from+a,insert:e},range:n.EditorSelection.cursor(l.from+o+e.length)}))),{scrollIntoView:!0,userEvent:"input.complete"})}const p=new WeakMap;function m(t){if(!Array.isArray(t))return t;let e=p.get(t);return e||p.set(t,e=l(t)),e}const g=n.StateEffect.define(),v=n.StateEffect.define();class w{constructor(t){this.pattern=t,this.chars=[],this.folded=[],this.any=[],this.precise=[],this.byWord=[],this.score=0,this.matched=[];for(let e=0;e<t.length;){let i=n.codePointAt(t,e),r=n.codePointSize(i);this.chars.push(i);let s=t.slice(e,e+r),o=s.toUpperCase();this.folded.push(n.codePointAt(o==s?s.toLowerCase():o,0)),e+=r}this.astral=t.length!=this.chars.length}ret(t,e){return this.score=t,this.matched=e,this}match(t){if(0==this.pattern.length)return this.ret(-100,[]);if(t.length<this.pattern.length)return null;let{chars:e,folded:i,any:r,precise:s,byWord:o}=this;if(1==e.length){let r=n.codePointAt(t,0),s=n.codePointSize(r),o=s==t.length?0:-100;if(r==e[0]);else{if(r!=i[0])return null;o+=-200}return this.ret(o,[0,s])}let a=t.indexOf(this.pattern);if(0==a)return this.ret(t.length==this.pattern.length?0:-100,[0,this.pattern.length]);let l=e.length,h=0;if(a<0){for(let s=0,o=Math.min(t.length,200);s<o&&h<l;){let o=n.codePointAt(t,s);o!=e[h]&&o!=i[h]||(r[h++]=s),s+=n.codePointSize(o)}if(h<l)return null}let c=0,u=0,d=!1,f=0,p=-1,m=-1,g=/[a-z]/.test(t),v=!0;for(let r=0,h=Math.min(t.length,200),w=0;r<h&&u<l;){let h=n.codePointAt(t,r);a<0&&(c<l&&h==e[c]&&(s[c++]=r),f<l&&(h==e[f]||h==i[f]?(0==f&&(p=r),m=r+1,f++):f=0));let y,b=h<255?h>=48&&h<=57||h>=97&&h<=122?2:h>=65&&h<=90?1:0:(y=n.fromCodePoint(h))!=y.toLowerCase()?1:y!=y.toUpperCase()?2:0;(!r||1==b&&g||0==w&&0!=b)&&(e[u]==h||i[u]==h&&(d=!0)?o[u++]=r:o.length&&(v=!1)),w=b,r+=n.codePointSize(h)}return u==l&&0==o[0]&&v?this.result((d?-200:0)-100,o,t):f==l&&0==p?this.ret(-200-t.length+(m==t.length?0:-100),[0,m]):a>-1?this.ret(-700-t.length,[a,a+this.pattern.length]):f==l?this.ret(-900-t.length,[p,m]):u==l?this.result((d?-200:0)-100-700+(v?0:-1100),o,t):2==e.length?null:this.result((r[0]?-700:0)-200-1100,r,t)}result(t,e,i){let r=[],s=0;for(let t of e){let e=t+(this.astral?n.codePointSize(n.codePointAt(i,t)):1);s&&r[s-1]==t?r[s-1]=e:(r[s++]=t,r[s++]=e)}return this.ret(t-i.length,r)}}class y{constructor(t){this.pattern=t,this.matched=[],this.score=0,this.folded=t.toLowerCase()}match(t){if(t.length<this.pattern.length)return null;let e=t.slice(0,this.pattern.length),i=e==this.pattern?0:e.toLowerCase()==this.folded?-200:null;return null==i?null:(this.matched=[0,e.length],this.score=i+(t.length==this.pattern.length?0:-100),this)}}const b=n.Facet.define({combine:t=>n.combineConfig(t,{activateOnTyping:!0,activateOnCompletion:()=>!1,activateOnTypingDelay:100,selectOnOpen:!0,override:null,closeOnBlur:!0,maxRenderedOptions:100,defaultKeymap:!0,tooltipClass:()=>"",optionClass:()=>"",aboveCursor:!1,icons:!0,addToOptions:[],positionInfo:x,filterStrict:!1,compareCompletions:(t,e)=>t.label.localeCompare(e.label),interactionDelay:75,updateSyncTime:100},{defaultKeymap:(t,e)=>t&&e,closeOnBlur:(t,e)=>t&&e,icons:(t,e)=>t&&e,tooltipClass:(t,e)=>i=>S(t(i),e(i)),optionClass:(t,e)=>i=>S(t(i),e(i)),addToOptions:(t,e)=>t.concat(e),filterStrict:(t,e)=>t||e})});function S(t,e){return t?e?t+" "+e:t:e}function x(t,e,i,n,s,o){let a,l,h=t.textDirection==r.Direction.RTL,c=h,u=!1,d="top",f=e.left-s.left,p=s.right-e.right,m=n.right-n.left,g=n.bottom-n.top;if(c&&f<Math.min(m,p)?c=!1:!c&&p<Math.min(m,f)&&(c=!0),m<=(c?f:p))a=Math.max(s.top,Math.min(i.top,s.bottom-g))-e.top,l=Math.min(400,c?f:p);else{u=!0,l=Math.min(400,(h?e.right:s.right-e.left)-30);let t=s.bottom-e.bottom;t>=g||t>e.top?a=i.bottom-e.top:(d="bottom",a=e.bottom-i.top)}return{style:`${d}: ${a/((e.bottom-e.top)/o.offsetHeight)}px; max-width: ${l/((e.right-e.left)/o.offsetWidth)}px`,class:"cm-completionInfo-"+(u?h?"left-narrow":"right-narrow":c?"left":"right")}}function C(t,e,i){if(t<=i)return{from:0,to:t};if(e<0&&(e=0),e<=t>>1){let t=Math.floor(e/i);return{from:t*i,to:(t+1)*i}}let n=Math.floor((t-e)/i);return{from:t-(n+1)*i,to:t-n*i}}class E{constructor(t,e,i){this.view=t,this.stateField=e,this.applyCompletion=i,this.info=null,this.infoDestroy=null,this.placeInfoReq={read:()=>this.measureInfo(),write:t=>this.placeInfo(t),key:this},this.space=null,this.currentClass="";let n=t.state.field(e),{options:r,selected:s}=n.open,o=t.state.facet(b);this.optionContent=function(t){let e=t.addToOptions.slice();return t.icons&&e.push({render(t){let e=document.createElement("div");return e.classList.add("cm-completionIcon"),t.type&&e.classList.add(...t.type.split(/\s+/g).map((t=>"cm-completionIcon-"+t))),e.setAttribute("aria-hidden","true"),e},position:20}),e.push({render(t,e,i,n){let r=document.createElement("span");r.className="cm-completionLabel";let s=t.displayLabel||t.label,o=0;for(let t=0;t<n.length;){let e=n[t++],i=n[t++];e>o&&r.appendChild(document.createTextNode(s.slice(o,e)));let a=r.appendChild(document.createElement("span"));a.appendChild(document.createTextNode(s.slice(e,i))),a.className="cm-completionMatchedText",o=i}return o<s.length&&r.appendChild(document.createTextNode(s.slice(o))),r},position:50},{render(t){if(!t.detail)return null;let e=document.createElement("span");return e.className="cm-completionDetail",e.textContent=t.detail,e},position:80}),e.sort(((t,e)=>t.position-e.position)).map((t=>t.render))}(o),this.optionClass=o.optionClass,this.tooltipClass=o.tooltipClass,this.range=C(r.length,s,o.maxRenderedOptions),this.dom=document.createElement("div"),this.dom.className="cm-tooltip-autocomplete",this.updateTooltipClass(t.state),this.dom.addEventListener("mousedown",(i=>{let{options:n}=t.state.field(e).open;for(let e,r=i.target;r&&r!=this.dom;r=r.parentNode)if("LI"==r.nodeName&&(e=/-(\d+)$/.exec(r.id))&&+e[1]<n.length)return this.applyCompletion(t,n[+e[1]]),void i.preventDefault()})),this.dom.addEventListener("focusout",(e=>{let i=t.state.field(this.stateField,!1);i&&i.tooltip&&t.state.facet(b).closeOnBlur&&e.relatedTarget!=t.contentDOM&&t.dispatch({effects:v.of(null)})})),this.showOptions(r,n.id)}mount(){this.updateSel()}showOptions(t,e){this.list&&this.list.remove(),this.list=this.dom.appendChild(this.createListBox(t,e,this.range)),this.list.addEventListener("scroll",(()=>{this.info&&this.view.requestMeasure(this.placeInfoReq)}))}update(t){var e;let i=t.state.field(this.stateField),n=t.startState.field(this.stateField);if(this.updateTooltipClass(t.state),i!=n){let{options:r,selected:s,disabled:o}=i.open;n.open&&n.open.options==r||(this.range=C(r.length,s,t.state.facet(b).maxRenderedOptions),this.showOptions(r,i.id)),this.updateSel(),o!=(null===(e=n.open)||void 0===e?void 0:e.disabled)&&this.dom.classList.toggle("cm-tooltip-autocomplete-disabled",!!o)}}updateTooltipClass(t){let e=this.tooltipClass(t);if(e!=this.currentClass){for(let t of this.currentClass.split(" "))t&&this.dom.classList.remove(t);for(let t of e.split(" "))t&&this.dom.classList.add(t);this.currentClass=e}}positioned(t){this.space=t,this.info&&this.view.requestMeasure(this.placeInfoReq)}updateSel(){let t=this.view.state.field(this.stateField),e=t.open;if((e.selected>-1&&e.selected<this.range.from||e.selected>=this.range.to)&&(this.range=C(e.options.length,e.selected,this.view.state.facet(b).maxRenderedOptions),this.showOptions(e.options,t.id)),this.updateSelectedOption(e.selected)){this.destroyInfo();let{completion:i}=e.options[e.selected],{info:n}=i;if(!n)return;let s="string"==typeof n?document.createTextNode(n):n(i);if(!s)return;"then"in s?s.then((e=>{e&&this.view.state.field(this.stateField,!1)==t&&this.addInfoPane(e,i)})).catch((t=>r.logException(this.view.state,t,"completion info"))):this.addInfoPane(s,i)}}addInfoPane(t,e){this.destroyInfo();let i=this.info=document.createElement("div");if(i.className="cm-tooltip cm-completionInfo",null!=t.nodeType)i.appendChild(t),this.infoDestroy=null;else{let{dom:e,destroy:n}=t;i.appendChild(e),this.infoDestroy=n||null}this.dom.appendChild(i),this.view.requestMeasure(this.placeInfoReq)}updateSelectedOption(t){let e=null;for(let i=this.list.firstChild,n=this.range.from;i;i=i.nextSibling,n++)"LI"==i.nodeName&&i.id?n==t?i.hasAttribute("aria-selected")||(i.setAttribute("aria-selected","true"),e=i):i.hasAttribute("aria-selected")&&i.removeAttribute("aria-selected"):n--;return e&&function(t,e){let i=t.getBoundingClientRect(),n=e.getBoundingClientRect(),r=i.height/t.offsetHeight;n.top<i.top?t.scrollTop-=(i.top-n.top)/r:n.bottom>i.bottom&&(t.scrollTop+=(n.bottom-i.bottom)/r)}(this.list,e),e}measureInfo(){let t=this.dom.querySelector("[aria-selected]");if(!t||!this.info)return null;let e=this.dom.getBoundingClientRect(),i=this.info.getBoundingClientRect(),n=t.getBoundingClientRect(),r=this.space;if(!r){let t=this.dom.ownerDocument.defaultView||window;r={left:0,top:0,right:t.innerWidth,bottom:t.innerHeight}}return n.top>Math.min(r.bottom,e.bottom)-10||n.bottom<Math.max(r.top,e.top)+10?null:this.view.state.facet(b).positionInfo(this.view,e,n,i,r,this.dom)}placeInfo(t){this.info&&(t?(t.style&&(this.info.style.cssText=t.style),this.info.className="cm-tooltip cm-completionInfo "+(t.class||"")):this.info.style.cssText="top: -1e6px")}createListBox(t,e,i){const n=document.createElement("ul");n.id=e,n.setAttribute("role","listbox"),n.setAttribute("aria-expanded","true"),n.setAttribute("aria-label",this.view.state.phrase("Completions"));let r=null;for(let s=i.from;s<i.to;s++){let{completion:o,match:a}=t[s],{section:l}=o;if(l){let t="string"==typeof l?l:l.name;t!=r&&(s>i.from||0==i.from)&&(r=t,"string"!=typeof l&&l.header?n.appendChild(l.header(l)):n.appendChild(document.createElement("completion-section")).textContent=t)}const h=n.appendChild(document.createElement("li"));h.id=e+"-"+s,h.setAttribute("role","option");let c=this.optionClass(o);c&&(h.className=c);for(let t of this.optionContent){let e=t(o,this.view.state,this.view,a);e&&h.appendChild(e)}}return i.from&&n.classList.add("cm-completionListIncompleteTop"),i.to<t.length&&n.classList.add("cm-completionListIncompleteBottom"),n}destroyInfo(){this.info&&(this.infoDestroy&&this.infoDestroy(),this.info.remove(),this.info=null)}destroy(){this.destroyInfo()}}function k(t){return 100*(t.boost||0)+(t.apply?10:0)+(t.info?5:0)+(t.type?1:0)}class A{constructor(t,e,i,n,r,s){this.options=t,this.attrs=e,this.tooltip=i,this.timestamp=n,this.selected=r,this.disabled=s}setSelected(t,e){return t==this.selected||t>=this.options.length?this:new A(this.options,P(e,t),this.tooltip,this.timestamp,t,this.disabled)}static build(t,e,i,n,r){let s=function(t,e){let i=[],n=null,r=t=>{i.push(t);let{section:e}=t.completion;if(e){n||(n=[]);let t="string"==typeof e?e:e.name;n.some((e=>e.name==t))||n.push("string"==typeof e?{name:t}:e)}},s=e.facet(b);for(let n of t)if(n.hasResult()){let t=n.result.getMatch;if(!1===n.result.filter)for(let e of n.result.options)r(new h(e,n.source,t?t(e):[],1e9-i.length));else{let i,o=e.sliceDoc(n.from,n.to),a=s.filterStrict?new y(o):new w(o);for(let e of n.result.options)if(i=a.match(e.label)){let s=e.displayLabel?t?t(e,i.matched):[]:i.matched;r(new h(e,n.source,s,i.score+(e.boost||0)))}}}if(n){let t=Object.create(null),e=0,r=(t,e)=>{var i,n;return(null!==(i=t.rank)&&void 0!==i?i:1e9)-(null!==(n=e.rank)&&void 0!==n?n:1e9)||(t.name<e.name?-1:1)};for(let i of n.sort(r))e-=1e5,t[i.name]=e;for(let e of i){let{section:i}=e.completion;i&&(e.score+=t["string"==typeof i?i:i.name])}}let o=[],a=null,l=s.compareCompletions;for(let t of i.sort(((t,e)=>e.score-t.score||l(t.completion,e.completion)))){let e=t.completion;!a||a.label!=e.label||a.detail!=e.detail||null!=a.type&&null!=e.type&&a.type!=e.type||a.apply!=e.apply||a.boost!=e.boost?o.push(t):k(t.completion)>k(a)&&(o[o.length-1]=t),a=t.completion}return o}(t,e);if(!s.length)return n&&t.some((t=>1==t.state))?new A(n.options,n.attrs,n.tooltip,n.timestamp,n.selected,!0):null;let o=e.facet(b).selectOnOpen?0:-1;if(n&&n.selected!=o&&-1!=n.selected){let t=n.options[n.selected].completion;for(let e=0;e<s.length;e++)if(s[e].completion==t){o=e;break}}return new A(s,P(i,o),{pos:t.reduce(((t,e)=>e.hasResult()?Math.min(t,e.from):t),1e8),create:q,above:r.aboveCursor},n?n.timestamp:Date.now(),o,!1)}map(t){return new A(this.options,this.attrs,Object.assign(Object.assign({},this.tooltip),{pos:t.mapPos(this.tooltip.pos)}),this.timestamp,this.selected,this.disabled)}}class T{constructor(t,e,i){this.active=t,this.id=e,this.open=i}static start(){return new T(O,"cm-ac-"+Math.floor(2e6*Math.random()).toString(36),null)}update(t){let{state:e}=t,i=e.facet(b),n=(i.override||e.languageDataAt("autocomplete",c(e)).map(m)).map((e=>(this.active.find((t=>t.source==e))||new R(e,this.active.some((t=>0!=t.state))?1:0)).update(t,i)));n.length==this.active.length&&n.every(((t,e)=>t==this.active[e]))&&(n=this.active);let r=this.open;r&&t.docChanged&&(r=r.map(t.changes)),t.selection||n.some((e=>e.hasResult()&&t.changes.touchesRange(e.from,e.to)))||!function(t,e){if(t==e)return!0;for(let i=0,n=0;;){for(;i<t.length&&!t[i].hasResult;)i++;for(;n<e.length&&!e[n].hasResult;)n++;let r=i==t.length,s=n==e.length;if(r||s)return r==s;if(t[i++].result!=e[n++].result)return!1}}(n,this.active)?r=A.build(n,e,this.id,r,i):r&&r.disabled&&!n.some((t=>1==t.state))&&(r=null),!r&&n.every((t=>1!=t.state))&&n.some((t=>t.hasResult()))&&(n=n.map((t=>t.hasResult()?new R(t.source,0):t)));for(let e of t.effects)e.is(B)&&(r=r&&r.setSelected(e.value,this.id));return n==this.active&&r==this.open?this:new T(n,this.id,r)}get tooltip(){return this.open?this.open.tooltip:null}get attrs(){return this.open?this.open.attrs:this.active.length?M:N}}const M={"aria-autocomplete":"list"},N={};function P(t,e){let i={"aria-autocomplete":"list","aria-haspopup":"listbox","aria-controls":t};return e>-1&&(i["aria-activedescendant"]=t+"-"+e),i}const O=[];function D(t,e){if(t.isUserEvent("input.complete")){let i=t.annotation(d);if(i&&e.activateOnCompletion(i))return"input"}return t.isUserEvent("input.type")?"input":t.isUserEvent("delete.backward")?"delete":null}class R{constructor(t,e,i=-1){this.source=t,this.state=e,this.explicitPos=i}hasResult(){return!1}update(t,e){let i=D(t,e),n=this;i?n=n.handleUserEvent(t,i,e):t.docChanged?n=n.handleChange(t):t.selection&&0!=n.state&&(n=new R(n.source,0));for(let e of t.effects)if(e.is(g))n=new R(n.source,1,e.value?c(t.state):-1);else if(e.is(v))n=new R(n.source,0);else if(e.is(I))for(let t of e.value)t.source==n.source&&(n=t);return n}handleUserEvent(t,e,i){return"delete"!=e&&i.activateOnTyping?new R(this.source,1):this.map(t.changes)}handleChange(t){return t.changes.touchesRange(c(t.startState))?new R(this.source,0):this.map(t.changes)}map(t){return t.empty||this.explicitPos<0?this:new R(this.source,this.state,t.mapPos(this.explicitPos))}}class L extends R{constructor(t,e,i,n,r){super(t,2,e),this.result=i,this.from=n,this.to=r}hasResult(){return!0}handleUserEvent(t,e,i){var n;let r=this.result;r.map&&!t.changes.empty&&(r=r.map(r,t.changes));let s=t.changes.mapPos(this.from),a=t.changes.mapPos(this.to,1),l=c(t.state);if((this.explicitPos<0?l<=s:l<this.from)||l>a||!r||"delete"==e&&c(t.startState)==this.from)return new R(this.source,"input"==e&&i.activateOnTyping?1:0);let h=this.explicitPos<0?-1:t.changes.mapPos(this.explicitPos);return function(t,e,i,n){if(!t)return!1;let r=e.sliceDoc(i,n);return"function"==typeof t?t(r,i,n,e):u(t,!0).test(r)}(r.validFor,t.state,s,a)?new L(this.source,h,r,s,a):r.update&&(r=r.update(r,s,a,new o(t.state,l,h>=0)))?new L(this.source,h,r,r.from,null!==(n=r.to)&&void 0!==n?n:c(t.state)):new R(this.source,1,h)}handleChange(t){return t.changes.touchesRange(this.from,this.to)?new R(this.source,0):this.map(t.changes)}map(t){return t.empty?this:(this.result.map?this.result.map(this.result,t):this.result)?new L(this.source,this.explicitPos<0?-1:t.mapPos(this.explicitPos),this.result,t.mapPos(this.from),t.mapPos(this.to,1)):new R(this.source,0)}}const I=n.StateEffect.define({map:(t,e)=>t.map((t=>t.map(e)))}),B=n.StateEffect.define(),F=n.StateField.define({create:()=>T.start(),update:(t,e)=>t.update(e),provide:t=>[r.showTooltip.from(t,(t=>t.tooltip)),r.EditorView.contentAttributes.from(t,(t=>t.attrs))]});function _(t,e){const i=e.completion.apply||e.completion.label;let n=t.state.field(F).active.find((t=>t.source==e.source));return n instanceof L&&("string"==typeof i?t.dispatch(Object.assign(Object.assign({},f(t.state,i,n.from,n.to)),{annotations:d.of(e.completion)})):i(t,e.completion,n.from,n.to),!0)}const q=function(t,e){return i=>new E(i,t,e)}(F,_);function V(t,e="option"){return i=>{let n=i.state.field(F,!1);if(!n||!n.open||n.open.disabled||Date.now()-n.open.timestamp<i.state.facet(b).interactionDelay)return!1;let s,o=1;"page"==e&&(s=r.getTooltip(i,n.open.tooltip))&&(o=Math.max(2,Math.floor(s.dom.offsetHeight/s.dom.querySelector("li").offsetHeight)-1));let{length:a}=n.open.options,l=n.open.selected>-1?n.open.selected+o*(t?1:-1):t?0:a-1;return l<0?l="page"==e?0:a-1:l>=a&&(l="page"==e?a-1:0),i.dispatch({effects:B.of(l)}),!0}}const H=t=>{let e=t.state.field(F,!1);return!(t.state.readOnly||!e||!e.open||e.open.selected<0||e.open.disabled||Date.now()-e.open.timestamp<t.state.facet(b).interactionDelay)&&_(t,e.open.options[e.open.selected])},W=t=>!!t.state.field(F,!1)&&(t.dispatch({effects:g.of(!0)}),!0),z=t=>{let e=t.state.field(F,!1);return!(!e||!e.active.some((t=>0!=t.state))||(t.dispatch({effects:v.of(null)}),0))};class j{constructor(t,e){this.active=t,this.context=e,this.time=Date.now(),this.updates=[],this.done=void 0}}const U=r.ViewPlugin.fromClass(class{constructor(t){this.view=t,this.debounceUpdate=-1,this.running=[],this.debounceAccept=-1,this.pendingStart=!1,this.composing=0;for(let e of t.state.field(F).active)1==e.state&&this.startQuery(e)}update(t){let e=t.state.field(F),i=t.state.facet(b);if(!t.selectionSet&&!t.docChanged&&t.startState.field(F)==e)return;let n=t.transactions.some((t=>(t.selection||t.docChanged)&&!D(t,i)));for(let e=0;e<this.running.length;e++){let i=this.running[e];if(n||i.updates.length+t.transactions.length>50&&Date.now()-i.time>1e3){for(let t of i.context.abortListeners)try{t()}catch(t){r.logException(this.view.state,t)}i.context.abortListeners=null,this.running.splice(e--,1)}else i.updates.push(...t.transactions)}this.debounceUpdate>-1&&clearTimeout(this.debounceUpdate),t.transactions.some((t=>t.effects.some((t=>t.is(g)))))&&(this.pendingStart=!0);let s=this.pendingStart?50:i.activateOnTypingDelay;if(this.debounceUpdate=e.active.some((t=>1==t.state&&!this.running.some((e=>e.active.source==t.source))))?setTimeout((()=>this.startUpdate()),s):-1,0!=this.composing)for(let e of t.transactions)"input"==D(e,i)?this.composing=2:2==this.composing&&e.selection&&(this.composing=3)}startUpdate(){this.debounceUpdate=-1,this.pendingStart=!1;let{state:t}=this.view,e=t.field(F);for(let t of e.active)1!=t.state||this.running.some((e=>e.active.source==t.source))||this.startQuery(t)}startQuery(t){let{state:e}=this.view,i=c(e),n=new o(e,i,t.explicitPos==i),s=new j(t,n);this.running.push(s),Promise.resolve(t.source(n)).then((t=>{s.context.aborted||(s.done=t||null,this.scheduleAccept())}),(t=>{this.view.dispatch({effects:v.of(null)}),r.logException(this.view.state,t)}))}scheduleAccept(){this.running.every((t=>void 0!==t.done))?this.accept():this.debounceAccept<0&&(this.debounceAccept=setTimeout((()=>this.accept()),this.view.state.facet(b).updateSyncTime))}accept(){var t;this.debounceAccept>-1&&clearTimeout(this.debounceAccept),this.debounceAccept=-1;let e=[],i=this.view.state.facet(b);for(let n=0;n<this.running.length;n++){let r=this.running[n];if(void 0===r.done)continue;if(this.running.splice(n--,1),r.done){let n=new L(r.active.source,r.active.explicitPos,r.done,r.done.from,null!==(t=r.done.to)&&void 0!==t?t:c(r.updates.length?r.updates[0].startState:this.view.state));for(let t of r.updates)n=n.update(t,i);if(n.hasResult()){e.push(n);continue}}let s=this.view.state.field(F).active.find((t=>t.source==r.active.source));if(s&&1==s.state)if(null==r.done){let t=new R(r.active.source,0);for(let e of r.updates)t=t.update(e,i);1!=t.state&&e.push(t)}else this.startQuery(s)}e.length&&this.view.dispatch({effects:I.of(e)})}},{eventHandlers:{blur(t){let e=this.view.state.field(F,!1);if(e&&e.tooltip&&this.view.state.facet(b).closeOnBlur){let i=e.open&&r.getTooltip(this.view,e.open.tooltip);i&&i.dom.contains(t.relatedTarget)||setTimeout((()=>this.view.dispatch({effects:v.of(null)})),10)}},compositionstart(){this.composing=1},compositionend(){3==this.composing&&setTimeout((()=>this.view.dispatch({effects:g.of(!1)})),20),this.composing=0}}}),K="object"==typeof navigator&&/Win/.test(navigator.platform),G=n.Prec.highest(r.EditorView.domEventHandlers({keydown(t,e){let i=e.state.field(F,!1);if(!i||!i.open||i.open.disabled||i.open.selected<0||t.key.length>1||t.ctrlKey&&(!K||!t.altKey)||t.metaKey)return!1;let n=i.open.options[i.open.selected],r=i.active.find((t=>t.source==n.source)),s=n.completion.commitCharacters||r.result.commitCharacters;return s&&s.indexOf(t.key)>-1&&_(e,n),!1}})),$=r.EditorView.baseTheme({".cm-tooltip.cm-tooltip-autocomplete":{"& > ul":{fontFamily:"monospace",whiteSpace:"nowrap",overflow:"hidden auto",maxWidth_fallback:"700px",maxWidth:"min(700px, 95vw)",minWidth:"250px",maxHeight:"10em",height:"100%",listStyle:"none",margin:0,padding:0,"& > li, & > completion-section":{padding:"1px 3px",lineHeight:1.2},"& > li":{overflowX:"hidden",textOverflow:"ellipsis",cursor:"pointer"},"& > completion-section":{display:"list-item",borderBottom:"1px solid silver",paddingLeft:"0.5em",opacity:.7}}},"&light .cm-tooltip-autocomplete ul li[aria-selected]":{background:"#17c",color:"white"},"&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]":{background:"#777"},"&dark .cm-tooltip-autocomplete ul li[aria-selected]":{background:"#347",color:"white"},"&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]":{background:"#444"},".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after":{content:'"···"',opacity:.5,display:"block",textAlign:"center"},".cm-tooltip.cm-completionInfo":{position:"absolute",padding:"3px 9px",width:"max-content",maxWidth:"400px",boxSizing:"border-box"},".cm-completionInfo.cm-completionInfo-left":{right:"100%"},".cm-completionInfo.cm-completionInfo-right":{left:"100%"},".cm-completionInfo.cm-completionInfo-left-narrow":{right:"30px"},".cm-completionInfo.cm-completionInfo-right-narrow":{left:"30px"},"&light .cm-snippetField":{backgroundColor:"#00000022"},"&dark .cm-snippetField":{backgroundColor:"#ffffff22"},".cm-snippetFieldPosition":{verticalAlign:"text-top",width:0,height:"1.15em",display:"inline-block",margin:"0 -0.7px -.7em",borderLeft:"1.4px dotted #888"},".cm-completionMatchedText":{textDecoration:"underline"},".cm-completionDetail":{marginLeft:"0.5em",fontStyle:"italic"},".cm-completionIcon":{fontSize:"90%",width:".8em",display:"inline-block",textAlign:"center",paddingRight:".6em",opacity:"0.6",boxSizing:"content-box"},".cm-completionIcon-function, .cm-completionIcon-method":{"&:after":{content:"'ƒ'"}},".cm-completionIcon-class":{"&:after":{content:"'○'"}},".cm-completionIcon-interface":{"&:after":{content:"'◌'"}},".cm-completionIcon-variable":{"&:after":{content:"'𝑥'"}},".cm-completionIcon-constant":{"&:after":{content:"'𝐶'"}},".cm-completionIcon-type":{"&:after":{content:"'𝑡'"}},".cm-completionIcon-enum":{"&:after":{content:"'∪'"}},".cm-completionIcon-property":{"&:after":{content:"'□'"}},".cm-completionIcon-keyword":{"&:after":{content:"'🔑︎'"}},".cm-completionIcon-namespace":{"&:after":{content:"'▢'"}},".cm-completionIcon-text":{"&:after":{content:"'abc'",fontSize:"50%",verticalAlign:"middle"}}});class Y{constructor(t,e,i,n){this.field=t,this.line=e,this.from=i,this.to=n}}class J{constructor(t,e,i){this.field=t,this.from=e,this.to=i}map(t){let e=t.mapPos(this.from,-1,n.MapMode.TrackDel),i=t.mapPos(this.to,1,n.MapMode.TrackDel);return null==e||null==i?null:new J(this.field,e,i)}}class X{constructor(t,e){this.lines=t,this.fieldPositions=e}instantiate(t,e){let i=[],n=[e],r=t.doc.lineAt(e),o=/^\s*/.exec(r.text)[0];for(let r of this.lines){if(i.length){let i=o,a=/^\t*/.exec(r)[0].length;for(let e=0;e<a;e++)i+=t.facet(s.indentUnit);n.push(e+i.length-a),r=i+r.slice(a)}i.push(r),e+=r.length+1}let a=this.fieldPositions.map((t=>new J(t.field,n[t.line]+t.from,n[t.line]+t.to)));return{text:i,ranges:a}}static parse(t){let e,i=[],n=[],r=[];for(let s of t.split(/\r\n?|\n/)){for(;e=/[#$]\{(?:(\d+)(?::([^}]*))?|((?:\\[{}]|[^}])*))\}/.exec(s);){let t=e[1]?+e[1]:null,o=e[2]||e[3]||"",a=-1,l=o.replace(/\\[{}]/g,(t=>t[1]));for(let e=0;e<i.length;e++)(null!=t?i[e].seq==t:l&&i[e].name==l)&&(a=e);if(a<0){let e=0;for(;e<i.length&&(null==t||null!=i[e].seq&&i[e].seq<t);)e++;i.splice(e,0,{seq:t,name:l}),a=e;for(let t of r)t.field>=a&&t.field++}r.push(new Y(a,n.length,e.index,e.index+l.length)),s=s.slice(0,e.index)+o+s.slice(e.index+e[0].length)}s=s.replace(/\\([{}])/g,((t,e,i)=>{for(let t of r)t.line==n.length&&t.from>i&&(t.from--,t.to--);return e})),n.push(s)}return new X(n,r)}}let Z=r.Decoration.widget({widget:new class extends r.WidgetType{toDOM(){let t=document.createElement("span");return t.className="cm-snippetFieldPosition",t}ignoreEvent(){return!1}}}),Q=r.Decoration.mark({class:"cm-snippetField"});class tt{constructor(t,e){this.ranges=t,this.active=e,this.deco=r.Decoration.set(t.map((t=>(t.from==t.to?Z:Q).range(t.from,t.to))))}map(t){let e=[];for(let i of this.ranges){let n=i.map(t);if(!n)return null;e.push(n)}return new tt(e,this.active)}selectionInsideField(t){return t.ranges.every((t=>this.ranges.some((e=>e.field==this.active&&e.from<=t.from&&e.to>=t.to))))}}const et=n.StateEffect.define({map:(t,e)=>t&&t.map(e)}),it=n.StateEffect.define(),nt=n.StateField.define({create:()=>null,update(t,e){for(let i of e.effects){if(i.is(et))return i.value;if(i.is(it)&&t)return new tt(t.ranges,i.value)}return t&&e.docChanged&&(t=t.map(e.changes)),t&&e.selection&&!t.selectionInsideField(e.selection)&&(t=null),t},provide:t=>r.EditorView.decorations.from(t,(t=>t?t.deco:r.Decoration.none))});function rt(t,e){return n.EditorSelection.create(t.filter((t=>t.field==e)).map((t=>n.EditorSelection.range(t.from,t.to))))}function st(t){let e=X.parse(t);return(t,i,r,s)=>{let{text:o,ranges:a}=e.instantiate(t.state,r),l={changes:{from:r,to:s,insert:n.Text.of(o)},scrollIntoView:!0,annotations:i?[d.of(i),n.Transaction.userEvent.of("input.complete")]:void 0};if(a.length&&(l.selection=rt(a,0)),a.some((t=>t.field>0))){let e=new tt(a,0),i=l.effects=[et.of(e)];void 0===t.state.field(nt,!1)&&i.push(n.StateEffect.appendConfig.of([nt,dt,ft,$]))}t.dispatch(t.state.update(l))}}function ot(t){return({state:e,dispatch:i})=>{let n=e.field(nt,!1);if(!n||t<0&&0==n.active)return!1;let r=n.active+t,s=t>0&&!n.ranges.some((e=>e.field==r+t));return i(e.update({selection:rt(n.ranges,r),effects:et.of(s?null:new tt(n.ranges,r)),scrollIntoView:!0})),!0}}const at=({state:t,dispatch:e})=>!!t.field(nt,!1)&&(e(t.update({effects:et.of(null)})),!0),lt=ot(1),ht=ot(-1),ct=[{key:"Tab",run:lt,shift:ht},{key:"Escape",run:at}],ut=n.Facet.define({combine:t=>t.length?t[0]:ct}),dt=n.Prec.highest(r.keymap.compute([ut],(t=>t.facet(ut)))),ft=r.EditorView.domEventHandlers({mousedown(t,e){let i,n=e.state.field(nt,!1);if(!n||null==(i=e.posAtCoords({x:t.clientX,y:t.clientY})))return!1;let r=n.ranges.find((t=>t.from<=i&&t.to>=i));return!(!r||r.field==n.active||(e.dispatch({selection:rt(n.ranges,r.field),effects:et.of(n.ranges.some((t=>t.field>r.field))?new tt(n.ranges,r.field):null),scrollIntoView:!0}),0))}});function pt(t,e){return new RegExp(e(t.source),t.unicode?"u":"")}const mt=Object.create(null);function gt(t,e,i,n,r){for(let s=t.iterLines(),o=0;!s.next().done;){let t,{value:a}=s;for(e.lastIndex=0;t=e.exec(a);)if(!n[t[0]]&&o+t.index!=r&&(i.push({type:"text",label:t[0]}),n[t[0]]=!0,i.length>=2e3))return;o+=a.length+1}}function vt(t,e,i,n,r){let s=t.length>=1e3,o=s&&e.get(t);if(o)return o;let a=[],l=Object.create(null);if(t.children){let s=0;for(let o of t.children){if(o.length>=1e3)for(let t of vt(o,e,i,n-s,r-s))l[t.label]||(l[t.label]=!0,a.push(t));else gt(o,i,a,l,r-s);s+=o.length+1}}else gt(t,i,a,l,r);return s&&a.length<2e3&&e.set(t,a),a}const wt={brackets:["(","[","{","'",'"'],before:")]}:;>",stringPrefixes:[]},yt=n.StateEffect.define({map(t,e){let i=e.mapPos(t,-1,n.MapMode.TrackAfter);return null==i?void 0:i}}),bt=new class extends n.RangeValue{};bt.startSide=1,bt.endSide=-1;const St=n.StateField.define({create:()=>n.RangeSet.empty,update(t,e){if(t=t.map(e.changes),e.selection){let i=e.state.doc.lineAt(e.selection.main.head);t=t.update({filter:t=>t>=i.from&&t<=i.to})}for(let i of e.effects)i.is(yt)&&(t=t.update({add:[bt.range(i.value,i.value+1)]}));return t}}),xt="()[]{}<>";function Ct(t){for(let e=0;e<xt.length;e+=2)if(xt.charCodeAt(e)==t)return xt.charAt(e+1);return n.fromCodePoint(t<128?t:t+1)}function Et(t,e){return t.languageDataAt("closeBrackets",e)[0]||wt}const kt="object"==typeof navigator&&/Android\b/.test(navigator.userAgent),At=r.EditorView.inputHandler.of(((t,e,i,r)=>{if((kt?t.composing:t.compositionStarted)||t.state.readOnly)return!1;let s=t.state.selection.main;if(r.length>2||2==r.length&&1==n.codePointSize(n.codePointAt(r,0))||e!=s.from||i!=s.to)return!1;let o=Nt(t.state,r);return!!o&&(t.dispatch(o),!0)})),Tt=({state:t,dispatch:e})=>{if(t.readOnly)return!1;let i=Et(t,t.selection.main.head).brackets||wt.brackets,r=null,s=t.changeByRange((e=>{if(e.empty){let r=function(t,e){let i=t.sliceString(e-2,e);return n.codePointSize(n.codePointAt(i,0))==i.length?i:i.slice(1)}(t.doc,e.head);for(let s of i)if(s==r&&Ot(t.doc,e.head)==Ct(n.codePointAt(s,0)))return{changes:{from:e.head-s.length,to:e.head+s.length},range:n.EditorSelection.cursor(e.head-s.length)}}return{range:r=e}}));return r||e(t.update(s,{scrollIntoView:!0,userEvent:"delete.backward"})),!r},Mt=[{key:"Backspace",run:Tt}];function Nt(t,e){let i=Et(t,t.selection.main.head),r=i.brackets||wt.brackets;for(let s of r){let o=Ct(n.codePointAt(s,0));if(e==s)return o==s?Lt(t,s,r.indexOf(s+s+s)>-1,i):Dt(t,s,o,i.before||wt.before);if(e==o&&Pt(t,t.selection.main.from))return Rt(t,0,o)}return null}function Pt(t,e){let i=!1;return t.field(St).between(0,t.doc.length,(t=>{t==e&&(i=!0)})),i}function Ot(t,e){let i=t.sliceString(e,e+2);return i.slice(0,n.codePointSize(n.codePointAt(i,0)))}function Dt(t,e,i,r){let s=null,o=t.changeByRange((o=>{if(!o.empty)return{changes:[{insert:e,from:o.from},{insert:i,from:o.to}],effects:yt.of(o.to+e.length),range:n.EditorSelection.range(o.anchor+e.length,o.head+e.length)};let a=Ot(t.doc,o.head);return!a||/\s/.test(a)||r.indexOf(a)>-1?{changes:{insert:e+i,from:o.head},effects:yt.of(o.head+e.length),range:n.EditorSelection.cursor(o.head+e.length)}:{range:s=o}}));return s?null:t.update(o,{scrollIntoView:!0,userEvent:"input.type"})}function Rt(t,e,i){let r=null,s=t.changeByRange((e=>e.empty&&Ot(t.doc,e.head)==i?{changes:{from:e.head,to:e.head+i.length,insert:i},range:n.EditorSelection.cursor(e.head+i.length)}:r={range:e}));return r?null:t.update(s,{scrollIntoView:!0,userEvent:"input.type"})}function Lt(t,e,i,r){let o=r.stringPrefixes||wt.stringPrefixes,a=null,l=t.changeByRange((r=>{if(!r.empty)return{changes:[{insert:e,from:r.from},{insert:e,from:r.to}],effects:yt.of(r.to+e.length),range:n.EditorSelection.range(r.anchor+e.length,r.head+e.length)};let l,h=r.head,c=Ot(t.doc,h);if(c==e){if(It(t,h))return{changes:{insert:e+e,from:h},effects:yt.of(h+e.length),range:n.EditorSelection.cursor(h+e.length)};if(Pt(t,h)){let r=i&&t.sliceDoc(h,h+3*e.length)==e+e+e?e+e+e:e;return{changes:{from:h,to:h+r.length,insert:r},range:n.EditorSelection.cursor(h+r.length)}}}else{if(i&&t.sliceDoc(h-2*e.length,h)==e+e&&(l=Bt(t,h-2*e.length,o))>-1&&It(t,l))return{changes:{insert:e+e+e+e,from:h},effects:yt.of(h+e.length),range:n.EditorSelection.cursor(h+e.length)};if(t.charCategorizer(h)(c)!=n.CharCategory.Word&&Bt(t,h,o)>-1&&!function(t,e,i,n){let r=s.syntaxTree(t).resolveInner(e,-1),o=n.reduce(((t,e)=>Math.max(t,e.length)),0);for(let s=0;s<5;s++){let s=t.sliceDoc(r.from,Math.min(r.to,r.from+i.length+o)),a=s.indexOf(i);if(!a||a>-1&&n.indexOf(s.slice(0,a))>-1){let e=r.firstChild;for(;e&&e.from==r.from&&e.to-e.from>i.length+a;){if(t.sliceDoc(e.to-i.length,e.to)==i)return!1;e=e.firstChild}return!0}let l=r.to==e&&r.parent;if(!l)break;r=l}return!1}(t,h,e,o))return{changes:{insert:e+e,from:h},effects:yt.of(h+e.length),range:n.EditorSelection.cursor(h+e.length)}}return{range:a=r}}));return a?null:t.update(l,{scrollIntoView:!0,userEvent:"input.type"})}function It(t,e){let i=s.syntaxTree(t).resolveInner(e+1);return i.parent&&i.from==e}function Bt(t,e,i){let r=t.charCategorizer(e);if(r(t.sliceDoc(e-1,e))!=n.CharCategory.Word)return e;for(let s of i){let i=e-s.length;if(t.sliceDoc(i,e)==s&&r(t.sliceDoc(i-1,i))!=n.CharCategory.Word)return i}return-1}const Ft=[{key:"Ctrl-Space",run:W},{key:"Escape",run:z},{key:"ArrowDown",run:V(!0)},{key:"ArrowUp",run:V(!1)},{key:"PageDown",run:V(!0,"page")},{key:"PageUp",run:V(!1,"page")},{key:"Enter",run:H}],_t=n.Prec.highest(r.keymap.computeN([b],(t=>t.facet(b).defaultKeymap?[Ft]:[]))),qt=new WeakMap;e.CompletionContext=o,e.acceptCompletion=H,e.autocompletion=function(t={}){return[G,F,b.of(t),U,_t,$]},e.clearSnippet=at,e.closeBrackets=function(){return[At,St]},e.closeBracketsKeymap=Mt,e.closeCompletion=z,e.completeAnyWord=t=>{let e=t.state.languageDataAt("wordChars",t.pos).join(""),i=function(t){let e=t.replace(/[\]\-\\]/g,"\\$&");try{return new RegExp(`[\\p{Alphabetic}\\p{Number}_${e}]+`,"ug")}catch(t){return new RegExp(`[w${e}]`,"g")}}(e),n=t.matchBefore(pt(i,(t=>t+"$")));if(!n&&!t.explicit)return null;let r=n?n.from:t.pos,s=vt(t.state.doc,function(t){return mt[t]||(mt[t]=new WeakMap)}(e),i,5e4,r);return{from:r,options:s,validFor:pt(i,(t=>"^"+t))}},e.completeFromList=l,e.completionKeymap=Ft,e.completionStatus=function(t){let e=t.field(F,!1);return e&&e.active.some((t=>1==t.state))?"pending":e&&e.active.some((t=>0!=t.state))?"active":null},e.currentCompletions=function(t){var e;let i=null===(e=t.field(F,!1))||void 0===e?void 0:e.open;if(!i||i.disabled)return[];let n=qt.get(i.options);return n||qt.set(i.options,n=i.options.map((t=>t.completion))),n},e.deleteBracketPair=Tt,e.hasNextSnippetField=function(t){let e=t.field(nt,!1);return!(!e||!e.ranges.some((t=>t.field==e.active+1)))},e.hasPrevSnippetField=function(t){let e=t.field(nt,!1);return!!(e&&e.active>0)},e.ifIn=function(t,e){return i=>{for(let n=s.syntaxTree(i.state).resolveInner(i.pos,-1);n;n=n.parent){if(t.indexOf(n.name)>-1)return e(i);if(n.type.isTop)break}return null}},e.ifNotIn=function(t,e){return i=>{for(let e=s.syntaxTree(i.state).resolveInner(i.pos,-1);e;e=e.parent){if(t.indexOf(e.name)>-1)return null;if(e.type.isTop)break}return e(i)}},e.insertBracket=Nt,e.insertCompletionText=f,e.moveCompletionSelection=V,e.nextSnippetField=lt,e.pickedCompletion=d,e.prevSnippetField=ht,e.selectedCompletion=function(t){var e;let i=null===(e=t.field(F,!1))||void 0===e?void 0:e.open;return i&&!i.disabled&&i.selected>=0?i.options[i.selected].completion:null},e.selectedCompletionIndex=function(t){var e;let i=null===(e=t.field(F,!1))||void 0===e?void 0:e.open;return i&&!i.disabled&&i.selected>=0?i.selected:null},e.setSelectedCompletion=function(t){return B.of(t)},e.snippet=st,e.snippetCompletion=function(t,e){return Object.assign(Object.assign({},e),{apply:st(t)})},e.snippetKeymap=ut,e.startCompletion=W},9277:(t,e,i)=>{"use strict";var n=i(9064),r=i(1506),s=i(2533),o=i(2696);const a=t=>{let{state:e}=t,i=e.doc.lineAt(e.selection.main.from),n=g(t.state,i.from);return n.line?h(t):!!n.block&&m(t)};function l(t,e){return({state:i,dispatch:n})=>{if(i.readOnly)return!1;let r=t(e,i);return!!r&&(n(i.update(r)),!0)}}const h=l(y,0),c=l(y,1),u=l(y,2),d=l(w,0),f=l(w,1),p=l(w,2),m=l(((t,e)=>w(t,e,function(t){let e=[];for(let i of t.selection.ranges){let n=t.doc.lineAt(i.from),r=i.to<=n.to?n:t.doc.lineAt(i.to),s=e.length-1;s>=0&&e[s].to>n.from?e[s].to=r.to:e.push({from:n.from+/^\s*/.exec(n.text)[0].length,to:r.to})}return e}(e))),0);function g(t,e){let i=t.languageDataAt("commentTokens",e);return i.length?i[0]:{}}const v=50;function w(t,e,i=e.selection.ranges){let n=i.map((t=>g(e,t.from).block));if(!n.every((t=>t)))return null;let r=i.map(((t,i)=>function(t,{open:e,close:i},n,r){let s,o,a=t.sliceDoc(n-v,n),l=t.sliceDoc(r,r+v),h=/\s*$/.exec(a)[0].length,c=/^\s*/.exec(l)[0].length,u=a.length-h;if(a.slice(u-e.length,u)==e&&l.slice(c,c+i.length)==i)return{open:{pos:n-h,margin:h&&1},close:{pos:r+c,margin:c&&1}};r-n<=2*v?s=o=t.sliceDoc(n,r):(s=t.sliceDoc(n,n+v),o=t.sliceDoc(r-v,r));let d=/^\s*/.exec(s)[0].length,f=/\s*$/.exec(o)[0].length,p=o.length-f-i.length;return s.slice(d,d+e.length)==e&&o.slice(p,p+i.length)==i?{open:{pos:n+d+e.length,margin:/\s/.test(s.charAt(d+e.length))?1:0},close:{pos:r-f-i.length,margin:/\s/.test(o.charAt(p-1))?1:0}}:null}(e,n[i],t.from,t.to)));if(2!=t&&!r.every((t=>t)))return{changes:e.changes(i.map(((t,e)=>r[e]?[]:[{from:t.from,insert:n[e].open+" "},{from:t.to,insert:" "+n[e].close}])))};if(1!=t&&r.some((t=>t))){let t=[];for(let e,i=0;i<r.length;i++)if(e=r[i]){let r=n[i],{open:s,close:o}=e;t.push({from:s.pos-r.open.length,to:s.pos+s.margin},{from:o.pos-o.margin,to:o.pos+r.close.length})}return{changes:t}}return null}function y(t,e,i=e.selection.ranges){let n=[],r=-1;for(let{from:t,to:s}of i){let i=n.length,o=1e9,a=g(e,t).line;if(a){for(let i=t;i<=s;){let l=e.doc.lineAt(i);if(l.from>r&&(t==s||s>l.from)){r=l.from;let t=/^\s*/.exec(l.text)[0].length,e=t==l.length,i=l.text.slice(t,t+a.length)==a?t:-1;t<l.text.length&&t<o&&(o=t),n.push({line:l,comment:i,token:a,indent:t,empty:e,single:!1})}i=l.to+1}if(o<1e9)for(let t=i;t<n.length;t++)n[t].indent<n[t].line.text.length&&(n[t].indent=o);n.length==i+1&&(n[i].single=!0)}}if(2!=t&&n.some((t=>t.comment<0&&(!t.empty||t.single)))){let t=[];for(let{line:e,token:i,indent:r,empty:s,single:o}of n)!o&&s||t.push({from:e.from+r,insert:i+" "});let i=e.changes(t);return{changes:i,selection:e.selection.map(i,1)}}if(1!=t&&n.some((t=>t.comment>=0))){let t=[];for(let{line:e,comment:i,token:r}of n)if(i>=0){let n=e.from+i,s=n+r.length;" "==e.text[s-e.from]&&s++,t.push({from:n,to:s})}return{changes:t}}return null}const b=n.Annotation.define(),S=n.Annotation.define(),x=n.Facet.define(),C=n.Facet.define({combine:t=>n.combineConfig(t,{minDepth:100,newGroupDelay:500,joinToEvent:(t,e)=>e},{minDepth:Math.max,newGroupDelay:Math.min,joinToEvent:(t,e)=>(i,n)=>t(i,n)||e(i,n)})}),E=n.StateField.define({create:()=>j.empty,update(t,e){let i=e.state.facet(C),r=e.annotation(b);if(r){let n=L.fromTransaction(e,r.selection),s=r.side,o=0==s?t.undone:t.done;return o=n?I(o,o.length,i.minDepth,n):q(o,e.startState.selection),new j(0==s?r.rest:o,0==s?o:r.rest)}let s=e.annotation(S);if("full"!=s&&"before"!=s||(t=t.isolate()),!1===e.annotation(n.Transaction.addToHistory))return e.changes.empty?t:t.addMapping(e.changes.desc);let o=L.fromTransaction(e),a=e.annotation(n.Transaction.time),l=e.annotation(n.Transaction.userEvent);return o?t=t.addChanges(o,a,l,i,e):e.selection&&(t=t.addSelection(e.startState.selection,a,l,i.newGroupDelay)),"full"!=s&&"after"!=s||(t=t.isolate()),t},toJSON:t=>({done:t.done.map((t=>t.toJSON())),undone:t.undone.map((t=>t.toJSON()))}),fromJSON:t=>new j(t.done.map(L.fromJSON),t.undone.map(L.fromJSON))}),k=E;function A(t,e){return function({state:i,dispatch:n}){if(!e&&i.readOnly)return!1;let r=i.field(E,!1);if(!r)return!1;let s=r.pop(t,i,e);return!!s&&(n(s),!0)}}const T=A(0,!1),M=A(1,!1),N=A(0,!0),P=A(1,!0);function O(t){return function(e){let i=e.field(E,!1);if(!i)return 0;let n=0==t?i.done:i.undone;return n.length-(n.length&&!n[0].changes?1:0)}}const D=O(0),R=O(1);class L{constructor(t,e,i,n,r){this.changes=t,this.effects=e,this.mapped=i,this.startSelection=n,this.selectionsAfter=r}setSelAfter(t){return new L(this.changes,this.effects,this.mapped,this.startSelection,t)}toJSON(){var t,e,i;return{changes:null===(t=this.changes)||void 0===t?void 0:t.toJSON(),mapped:null===(e=this.mapped)||void 0===e?void 0:e.toJSON(),startSelection:null===(i=this.startSelection)||void 0===i?void 0:i.toJSON(),selectionsAfter:this.selectionsAfter.map((t=>t.toJSON()))}}static fromJSON(t){return new L(t.changes&&n.ChangeSet.fromJSON(t.changes),[],t.mapped&&n.ChangeDesc.fromJSON(t.mapped),t.startSelection&&n.EditorSelection.fromJSON(t.startSelection),t.selectionsAfter.map(n.EditorSelection.fromJSON))}static fromTransaction(t,e){let i=F;for(let e of t.startState.facet(x)){let n=e(t);n.length&&(i=i.concat(n))}return!i.length&&t.changes.empty?null:new L(t.changes.invert(t.startState.doc),i,void 0,e||t.startState.selection,F)}static selection(t){return new L(void 0,F,void 0,void 0,t)}}function I(t,e,i,n){let r=e+1>i+20?e-i-1:0,s=t.slice(r,e);return s.push(n),s}function B(t,e){return t.length?e.length?t.concat(e):t:e}const F=[],_=200;function q(t,e){if(t.length){let i=t[t.length-1],n=i.selectionsAfter.slice(Math.max(0,i.selectionsAfter.length-_));return n.length&&n[n.length-1].eq(e)?t:(n.push(e),I(t,t.length-1,1e9,i.setSelAfter(n)))}return[L.selection([e])]}function V(t){let e=t[t.length-1],i=t.slice();return i[t.length-1]=e.setSelAfter(e.selectionsAfter.slice(0,e.selectionsAfter.length-1)),i}function H(t,e){if(!t.length)return t;let i=t.length,n=F;for(;i;){let r=W(t[i-1],e,n);if(r.changes&&!r.changes.empty||r.effects.length){let e=t.slice(0,i);return e[i-1]=r,e}e=r.mapped,i--,n=r.selectionsAfter}return n.length?[L.selection(n)]:F}function W(t,e,i){let r=B(t.selectionsAfter.length?t.selectionsAfter.map((t=>t.map(e))):F,i);if(!t.changes)return L.selection(r);let s=t.changes.map(e),o=e.mapDesc(t.changes,!0),a=t.mapped?t.mapped.composeDesc(o):o;return new L(s,n.StateEffect.mapEffects(t.effects,e),a,t.startSelection.map(o),r)}const z=/^(input\.type|delete)($|\.)/;class j{constructor(t,e,i=0,n=void 0){this.done=t,this.undone=e,this.prevTime=i,this.prevUserEvent=n}isolate(){return this.prevTime?new j(this.done,this.undone):this}addChanges(t,e,i,n,r){let s=this.done,o=s[s.length-1];return s=o&&o.changes&&!o.changes.empty&&t.changes&&(!i||z.test(i))&&(!o.selectionsAfter.length&&e-this.prevTime<n.newGroupDelay&&n.joinToEvent(r,function(t,e){let i=[],n=!1;return t.iterChangedRanges(((t,e)=>i.push(t,e))),e.iterChangedRanges(((t,e,r,s)=>{for(let t=0;t<i.length;){let e=i[t++],o=i[t++];s>=e&&r<=o&&(n=!0)}})),n}(o.changes,t.changes))||"input.type.compose"==i)?I(s,s.length-1,n.minDepth,new L(t.changes.compose(o.changes),B(t.effects,o.effects),o.mapped,o.startSelection,F)):I(s,s.length,n.minDepth,t),new j(s,F,e,i)}addSelection(t,e,i,n){let r=this.done.length?this.done[this.done.length-1].selectionsAfter:F;return r.length>0&&e-this.prevTime<n&&i==this.prevUserEvent&&i&&/^select($|\.)/.test(i)&&(s=r[r.length-1],o=t,s.ranges.length==o.ranges.length&&0===s.ranges.filter(((t,e)=>t.empty!=o.ranges[e].empty)).length)?this:new j(q(this.done,t),this.undone,e,i);var s,o}addMapping(t){return new j(H(this.done,t),H(this.undone,t),this.prevTime,this.prevUserEvent)}pop(t,e,i){let n=0==t?this.done:this.undone;if(0==n.length)return null;let r=n[n.length-1],s=r.selectionsAfter[0]||e.selection;if(i&&r.selectionsAfter.length)return e.update({selection:r.selectionsAfter[r.selectionsAfter.length-1],annotations:b.of({side:t,rest:V(n),selection:s}),userEvent:0==t?"select.undo":"select.redo",scrollIntoView:!0});if(r.changes){let i=1==n.length?F:n.slice(0,n.length-1);return r.mapped&&(i=H(i,r.mapped)),e.update({changes:r.changes,selection:r.startSelection,effects:r.effects,annotations:b.of({side:t,rest:i,selection:s}),filter:!1,userEvent:0==t?"undo":"redo",scrollIntoView:!0})}return null}}j.empty=new j(F,F);const U=[{key:"Mod-z",run:T,preventDefault:!0},{key:"Mod-y",mac:"Mod-Shift-z",run:M,preventDefault:!0},{linux:"Ctrl-Shift-z",run:M,preventDefault:!0},{key:"Mod-u",run:N,preventDefault:!0},{key:"Alt-u",mac:"Mod-Shift-u",run:P,preventDefault:!0}];function K(t,e){return n.EditorSelection.create(t.ranges.map(e),t.mainIndex)}function G(t,e){return t.update({selection:e,scrollIntoView:!0,userEvent:"select"})}function $({state:t,dispatch:e},i){let n=K(t.selection,i);return!n.eq(t.selection,!0)&&(e(G(t,n)),!0)}function Y(t,e){return n.EditorSelection.cursor(e?t.to:t.from)}function J(t,e){return $(t,(i=>i.empty?t.moveByChar(i,e):Y(i,e)))}function X(t){return t.textDirectionAt(t.state.selection.main.head)==r.Direction.LTR}const Z=t=>J(t,!X(t)),Q=t=>J(t,X(t));function tt(t,e){return $(t,(i=>i.empty?t.moveByGroup(i,e):Y(i,e)))}const et=t=>tt(t,!X(t)),it=t=>tt(t,X(t)),nt="undefined"!=typeof Intl&&Intl.Segmenter?new Intl.Segmenter(void 0,{granularity:"word"}):null;function rt(t,e,i){let r=t.state.charCategorizer(e.from),s=n.CharCategory.Space,o=e.from,a=0,l=!1,h=!1,c=!1,u=e=>{if(l)return!1;o+=i?e.length:-e.length;let u,d=r(e);if(d==n.CharCategory.Word&&e.charCodeAt(0)<128&&/[\W_]/.test(e)&&(d=-1),s==n.CharCategory.Space&&(s=d),s!=d)return!1;if(s==n.CharCategory.Word)if(e.toLowerCase()==e){if(!i&&h)return!1;c=!0}else if(c){if(i)return!1;l=!0}else{if(h&&i&&r(u=t.state.sliceDoc(o,o+1))==n.CharCategory.Word&&u.toLowerCase()==u)return!1;h=!0}return a++,!0},d=t.moveByChar(e,i,(t=>(u(t),u)));if(nt&&s==n.CharCategory.Word&&d.from==e.from+a*(i?1:-1)){let r=Math.min(e.head,d.head),s=Math.max(e.head,d.head),o=t.state.sliceDoc(r,s);if(o.length>1&&/[\u4E00-\uffff]/.test(o)){let t=Array.from(nt.segment(o));if(t.length>1)return i?n.EditorSelection.cursor(e.head+t[1].index,-1):n.EditorSelection.cursor(d.head+t[t.length-1].index,1)}}return d}function st(t,e){return $(t,(i=>i.empty?rt(t,i,e):Y(i,e)))}function ot(t,e,i){if(e.type.prop(i))return!0;let n=e.to-e.from;return n&&(n>2||/[^\s,.;:]/.test(t.sliceDoc(e.from,e.to)))||e.firstChild}function at(t,e,i){let r,a,l=s.syntaxTree(t).resolveInner(e.head),h=i?o.NodeProp.closedBy:o.NodeProp.openedBy;for(let n=e.head;;){let e=i?l.childAfter(n):l.childBefore(n);if(!e)break;ot(t,e,h)?l=e:n=i?e.to:e.from}return a=l.type.prop(h)&&(r=i?s.matchBrackets(t,l.from,1):s.matchBrackets(t,l.to,-1))&&r.matched?i?r.end.to:r.end.from:i?l.to:l.from,n.EditorSelection.cursor(a,i?-1:1)}const lt=t=>$(t,(e=>at(t.state,e,!X(t)))),ht=t=>$(t,(e=>at(t.state,e,X(t))));function ct(t,e){return $(t,(i=>{if(!i.empty)return Y(i,e);let n=t.moveVertically(i,e);return n.head!=i.head?n:t.moveToLineBoundary(i,e)}))}const ut=t=>ct(t,!1),dt=t=>ct(t,!0);function ft(t){let e,i=t.scrollDOM.clientHeight<t.scrollDOM.scrollHeight-2,n=0,s=0;if(i){for(let e of t.state.facet(r.EditorView.scrollMargins)){let i=e(t);(null==i?void 0:i.top)&&(n=Math.max(null==i?void 0:i.top,n)),(null==i?void 0:i.bottom)&&(s=Math.max(null==i?void 0:i.bottom,s))}e=t.scrollDOM.clientHeight-n-s}else e=(t.dom.ownerDocument.defaultView||window).innerHeight;return{marginTop:n,marginBottom:s,selfScroll:i,height:Math.max(t.defaultLineHeight,e-5)}}function pt(t,e){let i,n=ft(t),{state:s}=t,o=K(s.selection,(i=>i.empty?t.moveVertically(i,e,n.height):Y(i,e)));if(o.eq(s.selection))return!1;if(n.selfScroll){let e=t.coordsAtPos(s.selection.main.head),a=t.scrollDOM.getBoundingClientRect(),l=a.top+n.marginTop,h=a.bottom-n.marginBottom;e&&e.top>l&&e.bottom<h&&(i=r.EditorView.scrollIntoView(o.main.head,{y:"start",yMargin:e.top-l}))}return t.dispatch(G(s,o),{effects:i}),!0}const mt=t=>pt(t,!1),gt=t=>pt(t,!0);function vt(t,e,i){let r=t.lineBlockAt(e.head),s=t.moveToLineBoundary(e,i);if(s.head==e.head&&s.head!=(i?r.to:r.from)&&(s=t.moveToLineBoundary(e,i,!1)),!i&&s.head==r.from&&r.length){let i=/^\s*/.exec(t.state.sliceDoc(r.from,Math.min(r.from+100,r.to)))[0].length;i&&e.head!=r.from+i&&(s=n.EditorSelection.cursor(r.from+i))}return s}const wt=t=>$(t,(e=>vt(t,e,!0))),yt=t=>$(t,(e=>vt(t,e,!1))),bt=t=>$(t,(e=>vt(t,e,!X(t)))),St=t=>$(t,(e=>vt(t,e,X(t)))),xt=t=>$(t,(e=>n.EditorSelection.cursor(t.lineBlockAt(e.head).from,1))),Ct=t=>$(t,(e=>n.EditorSelection.cursor(t.lineBlockAt(e.head).to,-1)));function Et(t,e,i){let r=!1,o=K(t.selection,(e=>{let o=s.matchBrackets(t,e.head,-1)||s.matchBrackets(t,e.head,1)||e.head>0&&s.matchBrackets(t,e.head-1,1)||e.head<t.doc.length&&s.matchBrackets(t,e.head+1,-1);if(!o||!o.end)return e;r=!0;let a=o.start.from==e.head?o.end.to:o.end.from;return i?n.EditorSelection.range(e.anchor,a):n.EditorSelection.cursor(a)}));return!!r&&(e(G(t,o)),!0)}const kt=({state:t,dispatch:e})=>Et(t,e,!1);function At(t,e){let i=K(t.state.selection,(t=>{let i=e(t);return n.EditorSelection.range(t.anchor,i.head,i.goalColumn,i.bidiLevel||void 0)}));return!i.eq(t.state.selection)&&(t.dispatch(G(t.state,i)),!0)}function Tt(t,e){return At(t,(i=>t.moveByChar(i,e)))}const Mt=t=>Tt(t,!X(t)),Nt=t=>Tt(t,X(t));function Pt(t,e){return At(t,(i=>t.moveByGroup(i,e)))}const Ot=t=>Pt(t,!X(t)),Dt=t=>Pt(t,X(t));function Rt(t,e){return At(t,(i=>rt(t,i,e)))}const Lt=t=>At(t,(e=>at(t.state,e,!X(t)))),It=t=>At(t,(e=>at(t.state,e,X(t))));function Bt(t,e){return At(t,(i=>t.moveVertically(i,e)))}const Ft=t=>Bt(t,!1),_t=t=>Bt(t,!0);function qt(t,e){return At(t,(i=>t.moveVertically(i,e,ft(t).height)))}const Vt=t=>qt(t,!1),Ht=t=>qt(t,!0),Wt=t=>At(t,(e=>vt(t,e,!0))),zt=t=>At(t,(e=>vt(t,e,!1))),jt=t=>At(t,(e=>vt(t,e,!X(t)))),Ut=t=>At(t,(e=>vt(t,e,X(t)))),Kt=t=>At(t,(e=>n.EditorSelection.cursor(t.lineBlockAt(e.head).from))),Gt=t=>At(t,(e=>n.EditorSelection.cursor(t.lineBlockAt(e.head).to))),$t=({state:t,dispatch:e})=>(e(G(t,{anchor:0})),!0),Yt=({state:t,dispatch:e})=>(e(G(t,{anchor:t.doc.length})),!0),Jt=({state:t,dispatch:e})=>(e(G(t,{anchor:t.selection.main.anchor,head:0})),!0),Xt=({state:t,dispatch:e})=>(e(G(t,{anchor:t.selection.main.anchor,head:t.doc.length})),!0),Zt=({state:t,dispatch:e})=>(e(t.update({selection:{anchor:0,head:t.doc.length},userEvent:"select"})),!0),Qt=({state:t,dispatch:e})=>{let i=me(t).map((({from:e,to:i})=>n.EditorSelection.range(e,Math.min(i+1,t.doc.length))));return e(t.update({selection:n.EditorSelection.create(i),userEvent:"select"})),!0},te=({state:t,dispatch:e})=>{let i=K(t.selection,(e=>{var i;for(let r=s.syntaxTree(t).resolveStack(e.from,1);r;r=r.next){let{node:t}=r;if((t.from<e.from&&t.to>=e.to||t.to>e.to&&t.from<=e.from)&&(null===(i=t.parent)||void 0===i?void 0:i.parent))return n.EditorSelection.range(t.to,t.from)}return e}));return e(G(t,i)),!0},ee=({state:t,dispatch:e})=>{let i=t.selection,r=null;return i.ranges.length>1?r=n.EditorSelection.create([i.main]):i.main.empty||(r=n.EditorSelection.create([n.EditorSelection.cursor(i.main.head)])),!!r&&(e(G(t,r)),!0)};function ie(t,e){if(t.state.readOnly)return!1;let i="delete.selection",{state:s}=t,o=s.changeByRange((r=>{let{from:s,to:o}=r;if(s==o){let n=e(r);n<s?(i="delete.backward",n=ne(t,n,!1)):n>s&&(i="delete.forward",n=ne(t,n,!0)),s=Math.min(s,n),o=Math.max(o,n)}else s=ne(t,s,!1),o=ne(t,o,!0);return s==o?{range:r}:{changes:{from:s,to:o},range:n.EditorSelection.cursor(s,s<r.head?-1:1)}}));return!o.changes.empty&&(t.dispatch(s.update(o,{scrollIntoView:!0,userEvent:i,effects:"delete.selection"==i?r.EditorView.announce.of(s.phrase("Selection deleted")):void 0})),!0)}function ne(t,e,i){if(t instanceof r.EditorView)for(let n of t.state.facet(r.EditorView.atomicRanges).map((e=>e(t))))n.between(e,e,((t,n)=>{t<e&&n>e&&(e=i?n:t)}));return e}const re=(t,e,i)=>ie(t,(r=>{let o,a,l=r.from,{state:h}=t,c=h.doc.lineAt(l);if(i&&!e&&l>c.from&&l<c.from+200&&!/[^ \t]/.test(o=c.text.slice(0,l-c.from))){if("\t"==o[o.length-1])return l-1;let t=n.countColumn(o,h.tabSize)%s.getIndentUnit(h)||s.getIndentUnit(h);for(let e=0;e<t&&" "==o[o.length-1-e];e++)l--;a=l}else a=n.findClusterBreak(c.text,l-c.from,e,e)+c.from,a==l&&c.number!=(e?h.doc.lines:1)?a+=e?1:-1:!e&&/[\ufe00-\ufe0f]/.test(c.text.slice(a-c.from,l-c.from))&&(a=n.findClusterBreak(c.text,a-c.from,!1,!1)+c.from);return a})),se=t=>re(t,!1,!0),oe=t=>re(t,!0,!1),ae=(t,e)=>ie(t,(i=>{let r=i.head,{state:s}=t,o=s.doc.lineAt(r),a=s.charCategorizer(r);for(let t=null;;){if(r==(e?o.to:o.from)){r==i.head&&o.number!=(e?s.doc.lines:1)&&(r+=e?1:-1);break}let l=n.findClusterBreak(o.text,r-o.from,e)+o.from,h=o.text.slice(Math.min(r,l)-o.from,Math.max(r,l)-o.from),c=a(h);if(null!=t&&c!=t)break;" "==h&&r==i.head||(t=c),r=l}return r})),le=t=>ae(t,!1),he=t=>ae(t,!0),ce=t=>ie(t,(e=>{let i=t.lineBlockAt(e.head).to;return e.head<i?i:Math.min(t.state.doc.length,e.head+1)})),ue=t=>ie(t,(e=>{let i=t.moveToLineBoundary(e,!1).head;return e.head>i?i:Math.max(0,e.head-1)})),de=t=>ie(t,(e=>{let i=t.moveToLineBoundary(e,!0).head;return e.head<i?i:Math.min(t.state.doc.length,e.head+1)})),fe=({state:t,dispatch:e})=>{if(t.readOnly)return!1;let i=t.changeByRange((t=>({changes:{from:t.from,to:t.to,insert:n.Text.of(["",""])},range:n.EditorSelection.cursor(t.from)})));return e(t.update(i,{scrollIntoView:!0,userEvent:"input"})),!0},pe=({state:t,dispatch:e})=>{if(t.readOnly)return!1;let i=t.changeByRange((e=>{if(!e.empty||0==e.from||e.from==t.doc.length)return{range:e};let i=e.from,r=t.doc.lineAt(i),s=i==r.from?i-1:n.findClusterBreak(r.text,i-r.from,!1)+r.from,o=i==r.to?i+1:n.findClusterBreak(r.text,i-r.from,!0)+r.from;return{changes:{from:s,to:o,insert:t.doc.slice(i,o).append(t.doc.slice(s,i))},range:n.EditorSelection.cursor(o)}}));return!i.changes.empty&&(e(t.update(i,{scrollIntoView:!0,userEvent:"move.character"})),!0)};function me(t){let e=[],i=-1;for(let n of t.selection.ranges){let r=t.doc.lineAt(n.from),s=t.doc.lineAt(n.to);if(n.empty||n.to!=s.from||(s=t.doc.lineAt(n.to-1)),i>=r.number){let t=e[e.length-1];t.to=s.to,t.ranges.push(n)}else e.push({from:r.from,to:s.to,ranges:[n]});i=s.number+1}return e}function ge(t,e,i){if(t.readOnly)return!1;let r=[],s=[];for(let e of me(t)){if(i?e.to==t.doc.length:0==e.from)continue;let o=t.doc.lineAt(i?e.to+1:e.from-1),a=o.length+1;if(i){r.push({from:e.to,to:o.to},{from:e.from,insert:o.text+t.lineBreak});for(let i of e.ranges)s.push(n.EditorSelection.range(Math.min(t.doc.length,i.anchor+a),Math.min(t.doc.length,i.head+a)))}else{r.push({from:o.from,to:e.from},{from:e.to,insert:t.lineBreak+o.text});for(let t of e.ranges)s.push(n.EditorSelection.range(t.anchor-a,t.head-a))}}return!!r.length&&(e(t.update({changes:r,scrollIntoView:!0,selection:n.EditorSelection.create(s,t.selection.mainIndex),userEvent:"move.line"})),!0)}const ve=({state:t,dispatch:e})=>ge(t,e,!1),we=({state:t,dispatch:e})=>ge(t,e,!0);function ye(t,e,i){if(t.readOnly)return!1;let n=[];for(let e of me(t))i?n.push({from:e.from,insert:t.doc.slice(e.from,e.to)+t.lineBreak}):n.push({from:e.to,insert:t.lineBreak+t.doc.slice(e.from,e.to)});return e(t.update({changes:n,scrollIntoView:!0,userEvent:"input.copyline"})),!0}const be=({state:t,dispatch:e})=>ye(t,e,!1),Se=({state:t,dispatch:e})=>ye(t,e,!0),xe=t=>{if(t.state.readOnly)return!1;let{state:e}=t,i=e.changes(me(e).map((({from:t,to:i})=>(t>0?t--:i<e.doc.length&&i++,{from:t,to:i})))),n=K(e.selection,(e=>{let i;if(t.lineWrapping){let n=t.lineBlockAt(e.head),r=t.coordsAtPos(e.head,e.assoc||1);r&&(i=n.bottom+t.documentTop-r.bottom+t.defaultLineHeight/2)}return t.moveVertically(e,!0,i)})).map(i);return t.dispatch({changes:i,selection:n,scrollIntoView:!0,userEvent:"delete.line"}),!0},Ce=ke(!1),Ee=ke(!0);function ke(t){return({state:e,dispatch:i})=>{if(e.readOnly)return!1;let r=e.changeByRange((i=>{let{from:r,to:a}=i,l=e.doc.lineAt(r),h=!t&&r==a&&function(t,e){if(/\(\)|\[\]|\{\}/.test(t.sliceDoc(e-1,e+1)))return{from:e,to:e};let i,n=s.syntaxTree(t).resolveInner(e),r=n.childBefore(e),a=n.childAfter(e);return r&&a&&r.to<=e&&a.from>=e&&(i=r.type.prop(o.NodeProp.closedBy))&&i.indexOf(a.name)>-1&&t.doc.lineAt(r.to).from==t.doc.lineAt(a.from).from&&!/\S/.test(t.sliceDoc(r.to,a.from))?{from:r.to,to:a.from}:null}(e,r);t&&(r=a=(a<=l.to?l:e.doc.lineAt(a)).to);let c=new s.IndentContext(e,{simulateBreak:r,simulateDoubleBreak:!!h}),u=s.getIndentation(c,r);for(null==u&&(u=n.countColumn(/^\s*/.exec(e.doc.lineAt(r).text)[0],e.tabSize));a<l.to&&/\s/.test(l.text[a-l.from]);)a++;h?({from:r,to:a}=h):r>l.from&&r<l.from+100&&!/\S/.test(l.text.slice(0,r))&&(r=l.from);let d=["",s.indentString(e,u)];return h&&d.push(s.indentString(e,c.lineIndent(l.from,-1))),{changes:{from:r,to:a,insert:n.Text.of(d)},range:n.EditorSelection.cursor(r+1+d[1].length)}}));return i(e.update(r,{scrollIntoView:!0,userEvent:"input"})),!0}}function Ae(t,e){let i=-1;return t.changeByRange((r=>{let s=[];for(let n=r.from;n<=r.to;){let o=t.doc.lineAt(n);o.number>i&&(r.empty||r.to>o.from)&&(e(o,s,r),i=o.number),n=o.to+1}let o=t.changes(s);return{changes:s,range:n.EditorSelection.range(o.mapPos(r.anchor,1),o.mapPos(r.head,1))}}))}const Te=({state:t,dispatch:e})=>{if(t.readOnly)return!1;let i=Object.create(null),n=new s.IndentContext(t,{overrideIndentation:t=>{let e=i[t];return null==e?-1:e}}),r=Ae(t,((e,r,o)=>{let a=s.getIndentation(n,e.from);if(null==a)return;/\S/.test(e.text)||(a=0);let l=/^\s*/.exec(e.text)[0],h=s.indentString(t,a);(l!=h||o.from<e.from+l.length)&&(i[e.from]=a,r.push({from:e.from,to:e.from+l.length,insert:h}))}));return r.changes.empty||e(t.update(r,{userEvent:"indent"})),!0},Me=({state:t,dispatch:e})=>!t.readOnly&&(e(t.update(Ae(t,((e,i)=>{i.push({from:e.from,insert:t.facet(s.indentUnit)})})),{userEvent:"input.indent"})),!0),Ne=({state:t,dispatch:e})=>!t.readOnly&&(e(t.update(Ae(t,((e,i)=>{let r=/^\s*/.exec(e.text)[0];if(!r)return;let o=n.countColumn(r,t.tabSize),a=0,l=s.indentString(t,Math.max(0,o-s.getIndentUnit(t)));for(;a<r.length&&a<l.length&&r.charCodeAt(a)==l.charCodeAt(a);)a++;i.push({from:e.from+a,to:e.from+r.length,insert:l.slice(a)})})),{userEvent:"delete.dedent"})),!0),Pe=t=>(t.setTabFocusMode(),!0),Oe=[{key:"Ctrl-b",run:Z,shift:Mt,preventDefault:!0},{key:"Ctrl-f",run:Q,shift:Nt},{key:"Ctrl-p",run:ut,shift:Ft},{key:"Ctrl-n",run:dt,shift:_t},{key:"Ctrl-a",run:xt,shift:Kt},{key:"Ctrl-e",run:Ct,shift:Gt},{key:"Ctrl-d",run:oe},{key:"Ctrl-h",run:se},{key:"Ctrl-k",run:ce},{key:"Ctrl-Alt-h",run:le},{key:"Ctrl-o",run:fe},{key:"Ctrl-t",run:pe},{key:"Ctrl-v",run:gt}],De=[{key:"ArrowLeft",run:Z,shift:Mt,preventDefault:!0},{key:"Mod-ArrowLeft",mac:"Alt-ArrowLeft",run:et,shift:Ot,preventDefault:!0},{mac:"Cmd-ArrowLeft",run:bt,shift:jt,preventDefault:!0},{key:"ArrowRight",run:Q,shift:Nt,preventDefault:!0},{key:"Mod-ArrowRight",mac:"Alt-ArrowRight",run:it,shift:Dt,preventDefault:!0},{mac:"Cmd-ArrowRight",run:St,shift:Ut,preventDefault:!0},{key:"ArrowUp",run:ut,shift:Ft,preventDefault:!0},{mac:"Cmd-ArrowUp",run:$t,shift:Jt},{mac:"Ctrl-ArrowUp",run:mt,shift:Vt},{key:"ArrowDown",run:dt,shift:_t,preventDefault:!0},{mac:"Cmd-ArrowDown",run:Yt,shift:Xt},{mac:"Ctrl-ArrowDown",run:gt,shift:Ht},{key:"PageUp",run:mt,shift:Vt},{key:"PageDown",run:gt,shift:Ht},{key:"Home",run:yt,shift:zt,preventDefault:!0},{key:"Mod-Home",run:$t,shift:Jt},{key:"End",run:wt,shift:Wt,preventDefault:!0},{key:"Mod-End",run:Yt,shift:Xt},{key:"Enter",run:Ce},{key:"Mod-a",run:Zt},{key:"Backspace",run:se,shift:se},{key:"Delete",run:oe},{key:"Mod-Backspace",mac:"Alt-Backspace",run:le},{key:"Mod-Delete",mac:"Alt-Delete",run:he},{mac:"Mod-Backspace",run:ue},{mac:"Mod-Delete",run:de}].concat(Oe.map((t=>({mac:t.key,run:t.run,shift:t.shift})))),Re=[{key:"Alt-ArrowLeft",mac:"Ctrl-ArrowLeft",run:lt,shift:Lt},{key:"Alt-ArrowRight",mac:"Ctrl-ArrowRight",run:ht,shift:It},{key:"Alt-ArrowUp",run:ve},{key:"Shift-Alt-ArrowUp",run:be},{key:"Alt-ArrowDown",run:we},{key:"Shift-Alt-ArrowDown",run:Se},{key:"Escape",run:ee},{key:"Mod-Enter",run:Ee},{key:"Alt-l",mac:"Ctrl-l",run:Qt},{key:"Mod-i",run:te,preventDefault:!0},{key:"Mod-[",run:Ne},{key:"Mod-]",run:Me},{key:"Mod-Alt-\\",run:Te},{key:"Shift-Mod-k",run:xe},{key:"Shift-Mod-\\",run:kt},{key:"Mod-/",run:a},{key:"Alt-A",run:d},{key:"Ctrl-m",mac:"Shift-Alt-m",run:Pe}].concat(De),Le={key:"Tab",run:Me,shift:Ne};e.blockComment=f,e.blockUncomment=p,e.copyLineDown=Se,e.copyLineUp=be,e.cursorCharBackward=t=>J(t,!1),e.cursorCharForward=t=>J(t,!0),e.cursorCharLeft=Z,e.cursorCharRight=Q,e.cursorDocEnd=Yt,e.cursorDocStart=$t,e.cursorGroupBackward=t=>tt(t,!1),e.cursorGroupForward=t=>tt(t,!0),e.cursorGroupLeft=et,e.cursorGroupRight=it,e.cursorLineBoundaryBackward=yt,e.cursorLineBoundaryForward=wt,e.cursorLineBoundaryLeft=bt,e.cursorLineBoundaryRight=St,e.cursorLineDown=dt,e.cursorLineEnd=Ct,e.cursorLineStart=xt,e.cursorLineUp=ut,e.cursorMatchingBracket=kt,e.cursorPageDown=gt,e.cursorPageUp=mt,e.cursorSubwordBackward=t=>st(t,!1),e.cursorSubwordForward=t=>st(t,!0),e.cursorSyntaxLeft=lt,e.cursorSyntaxRight=ht,e.defaultKeymap=Re,e.deleteCharBackward=se,e.deleteCharBackwardStrict=t=>re(t,!1,!1),e.deleteCharForward=oe,e.deleteGroupBackward=le,e.deleteGroupForward=he,e.deleteLine=xe,e.deleteLineBoundaryBackward=ue,e.deleteLineBoundaryForward=de,e.deleteToLineEnd=ce,e.deleteToLineStart=t=>ie(t,(e=>{let i=t.lineBlockAt(e.head).from;return e.head>i?i:Math.max(0,e.head-1)})),e.deleteTrailingWhitespace=({state:t,dispatch:e})=>{if(t.readOnly)return!1;let i=[];for(let e=0,n="",r=t.doc.iter();;){if(r.next(),r.lineBreak||r.done){let t=n.search(/\s+$/);if(t>-1&&i.push({from:e-(n.length-t),to:e}),r.done)break;n=""}else n=r.value;e+=r.value.length}return!!i.length&&(e(t.update({changes:i,userEvent:"delete"})),!0)},e.emacsStyleKeymap=Oe,e.history=function(t={}){return[E,C.of(t),r.EditorView.domEventHandlers({beforeinput(t,e){let i="historyUndo"==t.inputType?T:"historyRedo"==t.inputType?M:null;return!!i&&(t.preventDefault(),i(e))}})]},e.historyField=k,e.historyKeymap=U,e.indentLess=Ne,e.indentMore=Me,e.indentSelection=Te,e.indentWithTab=Le,e.insertBlankLine=Ee,e.insertNewline=({state:t,dispatch:e})=>(e(t.update(t.replaceSelection(t.lineBreak),{scrollIntoView:!0,userEvent:"input"})),!0),e.insertNewlineAndIndent=Ce,e.insertNewlineKeepIndent=({state:t,dispatch:e})=>(e(t.update(t.changeByRange((e=>{let i=/^\s*/.exec(t.doc.lineAt(e.from).text)[0];return{changes:{from:e.from,to:e.to,insert:t.lineBreak+i},range:n.EditorSelection.cursor(e.from+i.length+1)}})),{scrollIntoView:!0,userEvent:"input"})),!0),e.insertTab=({state:t,dispatch:e})=>t.selection.ranges.some((t=>!t.empty))?Me({state:t,dispatch:e}):(e(t.update(t.replaceSelection("\t"),{scrollIntoView:!0,userEvent:"input"})),!0),e.invertedEffects=x,e.isolateHistory=S,e.lineComment=c,e.lineUncomment=u,e.moveLineDown=we,e.moveLineUp=ve,e.redo=M,e.redoDepth=R,e.redoSelection=P,e.selectAll=Zt,e.selectCharBackward=t=>Tt(t,!1),e.selectCharForward=t=>Tt(t,!0),e.selectCharLeft=Mt,e.selectCharRight=Nt,e.selectDocEnd=Xt,e.selectDocStart=Jt,e.selectGroupBackward=t=>Pt(t,!1),e.selectGroupForward=t=>Pt(t,!0),e.selectGroupLeft=Ot,e.selectGroupRight=Dt,e.selectLine=Qt,e.selectLineBoundaryBackward=zt,e.selectLineBoundaryForward=Wt,e.selectLineBoundaryLeft=jt,e.selectLineBoundaryRight=Ut,e.selectLineDown=_t,e.selectLineEnd=Gt,e.selectLineStart=Kt,e.selectLineUp=Ft,e.selectMatchingBracket=({state:t,dispatch:e})=>Et(t,e,!0),e.selectPageDown=Ht,e.selectPageUp=Vt,e.selectParentSyntax=te,e.selectSubwordBackward=t=>Rt(t,!1),e.selectSubwordForward=t=>Rt(t,!0),e.selectSyntaxLeft=Lt,e.selectSyntaxRight=It,e.simplifySelection=ee,e.splitLine=fe,e.standardKeymap=De,e.temporarilySetTabFocusMode=t=>(t.setTabFocusMode(2e3),!0),e.toggleBlockComment=d,e.toggleBlockCommentByLine=m,e.toggleComment=a,e.toggleLineComment=h,e.toggleTabFocusMode=Pe,e.transposeChars=pe,e.undo=T,e.undoDepth=D,e.undoSelection=N},2533:(t,e,i)=>{"use strict";var n,r=i(2696),s=i(9064),o=i(1506),a=i(7359),l=i(9172);const h=new r.NodeProp;function c(t){return s.Facet.define({combine:t?e=>e.concat(t):void 0})}const u=new r.NodeProp;class d{constructor(t,e,i=[],n=""){this.data=t,this.name=n,s.EditorState.prototype.hasOwnProperty("tree")||Object.defineProperty(s.EditorState.prototype,"tree",{get(){return m(this)}}),this.parser=e,this.extension=[k.of(this),s.EditorState.languageData.of(((t,e,i)=>{let n=f(t,e,i),r=n.type.prop(h);if(!r)return[];let s=t.facet(r),o=n.type.prop(u);if(o){let r=n.resolve(e-n.from,i);for(let e of o)if(e.test(r,t)){let i=t.facet(e.facet);return"replace"==e.type?i:i.concat(s)}}return s}))].concat(i)}isActiveAt(t,e,i=-1){return f(t,e,i).type.prop(h)==this.data}findRegions(t){let e=t.facet(k);if((null==e?void 0:e.data)==this.data)return[{from:0,to:t.doc.length}];if(!e||!e.allowsNesting)return[];let i=[],n=(t,e)=>{if(t.prop(h)==this.data)return void i.push({from:e,to:e+t.length});let s=t.prop(r.NodeProp.mounted);if(s){if(s.tree.prop(h)==this.data){if(s.overlay)for(let t of s.overlay)i.push({from:t.from+e,to:t.to+e});else i.push({from:e,to:e+t.length});return}if(s.overlay){let t=i.length;if(n(s.tree,s.overlay[0].from+e),i.length>t)return}}for(let i=0;i<t.children.length;i++){let s=t.children[i];s instanceof r.Tree&&n(s,t.positions[i]+e)}};return n(m(t),0),i}get allowsNesting(){return!0}}function f(t,e,i){let n=t.facet(k),s=m(t).topNode;if(!n||n.allowsNesting)for(let t=s;t;t=t.enter(e,i,r.IterMode.ExcludeBuffers))t.type.isTop&&(s=t);return s}d.setState=s.StateEffect.define();class p extends d{constructor(t,e,i){super(t,e,[],i),this.parser=e}static define(t){let e=c(t.languageData);return new p(e,t.parser.configure({props:[h.add((t=>t.isTop?e:void 0))]}),t.name)}configure(t,e){return new p(this.data,this.parser.configure(t),e||this.name)}get allowsNesting(){return this.parser.hasWrappers()}}function m(t){let e=t.field(d.state,!1);return e?e.tree:r.Tree.empty}function g(t,e,i=50){var n;let r=null===(n=t.field(d.state,!1))||void 0===n?void 0:n.context;if(!r)return null;let s=r.viewport;r.updateViewport({from:0,to:e});let o=r.isDone(e)||r.work(i,e)?r.tree:null;return r.updateViewport(s),o}class v{constructor(t){this.doc=t,this.cursorPos=0,this.string="",this.cursor=t.iter()}get length(){return this.doc.length}syncTo(t){return this.string=this.cursor.next(t-this.cursorPos).value,this.cursorPos=t+this.string.length,this.cursorPos-this.string.length}chunk(t){return this.syncTo(t),this.string}get lineChunks(){return!0}read(t,e){let i=this.cursorPos-this.string.length;return t<i||e>=this.cursorPos?this.doc.sliceString(t,e):this.string.slice(t-i,e-i)}}let w=null;class y{constructor(t,e,i=[],n,r,s,o,a){this.parser=t,this.state=e,this.fragments=i,this.tree=n,this.treeLen=r,this.viewport=s,this.skipped=o,this.scheduleOn=a,this.parse=null,this.tempSkipped=[]}static create(t,e,i){return new y(t,e,[],r.Tree.empty,0,i,[],null)}startParse(){return this.parser.startParse(new v(this.state.doc),this.fragments)}work(t,e){return null!=e&&e>=this.state.doc.length&&(e=void 0),this.tree!=r.Tree.empty&&this.isDone(null!=e?e:this.state.doc.length)?(this.takeTree(),!0):this.withContext((()=>{var i;if("number"==typeof t){let e=Date.now()+t;t=()=>Date.now()>e}for(this.parse||(this.parse=this.startParse()),null!=e&&(null==this.parse.stoppedAt||this.parse.stoppedAt>e)&&e<this.state.doc.length&&this.parse.stopAt(e);;){let n=this.parse.advance();if(n){if(this.fragments=this.withoutTempSkipped(r.TreeFragment.addTree(n,this.fragments,null!=this.parse.stoppedAt)),this.treeLen=null!==(i=this.parse.stoppedAt)&&void 0!==i?i:this.state.doc.length,this.tree=n,this.parse=null,!(this.treeLen<(null!=e?e:this.state.doc.length)))return!0;this.parse=this.startParse()}if(t())return!1}}))}takeTree(){let t,e;this.parse&&(t=this.parse.parsedPos)>=this.treeLen&&((null==this.parse.stoppedAt||this.parse.stoppedAt>t)&&this.parse.stopAt(t),this.withContext((()=>{for(;!(e=this.parse.advance()););})),this.treeLen=t,this.tree=e,this.fragments=this.withoutTempSkipped(r.TreeFragment.addTree(this.tree,this.fragments,!0)),this.parse=null)}withContext(t){let e=w;w=this;try{return t()}finally{w=e}}withoutTempSkipped(t){for(let e;e=this.tempSkipped.pop();)t=b(t,e.from,e.to);return t}changes(t,e){let{fragments:i,tree:n,treeLen:s,viewport:o,skipped:a}=this;if(this.takeTree(),!t.empty){let e=[];if(t.iterChangedRanges(((t,i,n,r)=>e.push({fromA:t,toA:i,fromB:n,toB:r}))),i=r.TreeFragment.applyChanges(i,e),n=r.Tree.empty,s=0,o={from:t.mapPos(o.from,-1),to:t.mapPos(o.to,1)},this.skipped.length){a=[];for(let e of this.skipped){let i=t.mapPos(e.from,1),n=t.mapPos(e.to,-1);i<n&&a.push({from:i,to:n})}}}return new y(this.parser,e,i,n,s,o,a,this.scheduleOn)}updateViewport(t){if(this.viewport.from==t.from&&this.viewport.to==t.to)return!1;this.viewport=t;let e=this.skipped.length;for(let e=0;e<this.skipped.length;e++){let{from:i,to:n}=this.skipped[e];i<t.to&&n>t.from&&(this.fragments=b(this.fragments,i,n),this.skipped.splice(e--,1))}return!(this.skipped.length>=e||(this.reset(),0))}reset(){this.parse&&(this.takeTree(),this.parse=null)}skipUntilInView(t,e){this.skipped.push({from:t,to:e})}static getSkippingParser(t){return new class extends r.Parser{createParse(e,i,n){let s=n[0].from,o=n[n.length-1].to;return{parsedPos:s,advance(){let e=w;if(e){for(let t of n)e.tempSkipped.push(t);t&&(e.scheduleOn=e.scheduleOn?Promise.all([e.scheduleOn,t]):t)}return this.parsedPos=o,new r.Tree(r.NodeType.none,[],[],o-s)},stoppedAt:null,stopAt(){}}}}}isDone(t){t=Math.min(t,this.state.doc.length);let e=this.fragments;return this.treeLen>=t&&e.length&&0==e[0].from&&e[0].to>=t}static get(){return w}}function b(t,e,i){return r.TreeFragment.applyChanges(t,[{fromA:e,toA:i,fromB:e,toB:i}])}class S{constructor(t){this.context=t,this.tree=t.tree}apply(t){if(!t.docChanged&&this.tree==this.context.tree)return this;let e=this.context.changes(t.changes,t.state),i=this.context.treeLen==t.startState.doc.length?void 0:Math.max(t.changes.mapPos(this.context.treeLen),e.viewport.to);return e.work(20,i)||e.takeTree(),new S(e)}static init(t){let e=Math.min(3e3,t.doc.length),i=y.create(t.facet(k).parser,t,{from:0,to:e});return i.work(20,e)||i.takeTree(),new S(i)}}d.state=s.StateField.define({create:S.init,update(t,e){for(let t of e.effects)if(t.is(d.setState))return t.value;return e.startState.facet(k)!=e.state.facet(k)?S.init(e.state):t.apply(e)}});let x=t=>{let e=setTimeout((()=>t()),500);return()=>clearTimeout(e)};"undefined"!=typeof requestIdleCallback&&(x=t=>{let e=-1,i=setTimeout((()=>{e=requestIdleCallback(t,{timeout:400})}),100);return()=>e<0?clearTimeout(i):cancelIdleCallback(e)});const C="undefined"!=typeof navigator&&(null===(n=navigator.scheduling)||void 0===n?void 0:n.isInputPending)?()=>navigator.scheduling.isInputPending():null,E=o.ViewPlugin.fromClass(class{constructor(t){this.view=t,this.working=null,this.workScheduled=0,this.chunkEnd=-1,this.chunkBudget=-1,this.work=this.work.bind(this),this.scheduleWork()}update(t){let e=this.view.state.field(d.state).context;(e.updateViewport(t.view.viewport)||this.view.viewport.to>e.treeLen)&&this.scheduleWork(),(t.docChanged||t.selectionSet)&&(this.view.hasFocus&&(this.chunkBudget+=50),this.scheduleWork()),this.checkAsyncSchedule(e)}scheduleWork(){if(this.working)return;let{state:t}=this.view,e=t.field(d.state);e.tree==e.context.tree&&e.context.isDone(t.doc.length)||(this.working=x(this.work))}work(t){this.working=null;let e=Date.now();if(this.chunkEnd<e&&(this.chunkEnd<0||this.view.hasFocus)&&(this.chunkEnd=e+3e4,this.chunkBudget=3e3),this.chunkBudget<=0)return;let{state:i,viewport:{to:n}}=this.view,r=i.field(d.state);if(r.tree==r.context.tree&&r.context.isDone(n+1e5))return;let s=Date.now()+Math.min(this.chunkBudget,100,t&&!C?Math.max(25,t.timeRemaining()-5):1e9),o=r.context.treeLen<n&&i.doc.length>n+1e3,a=r.context.work((()=>C&&C()||Date.now()>s),n+(o?0:1e5));this.chunkBudget-=Date.now()-e,(a||this.chunkBudget<=0)&&(r.context.takeTree(),this.view.dispatch({effects:d.setState.of(new S(r.context))})),this.chunkBudget>0&&(!a||o)&&this.scheduleWork(),this.checkAsyncSchedule(r.context)}checkAsyncSchedule(t){t.scheduleOn&&(this.workScheduled++,t.scheduleOn.then((()=>this.scheduleWork())).catch((t=>o.logException(this.view.state,t))).then((()=>this.workScheduled--)),t.scheduleOn=null)}destroy(){this.working&&this.working()}isWorking(){return!!(this.working||this.workScheduled>0)}},{eventHandlers:{focus(){this.scheduleWork()}}}),k=s.Facet.define({combine:t=>t.length?t[0]:null,enables:t=>[d.state,E,o.EditorView.contentAttributes.compute([t],(e=>{let i=e.facet(t);return i&&i.name?{"data-language":i.name}:{}}))]});class A{constructor(t,e,i,n,r,s=void 0){this.name=t,this.alias=e,this.extensions=i,this.filename=n,this.loadFunc=r,this.support=s,this.loading=null}load(){return this.loading||(this.loading=this.loadFunc().then((t=>this.support=t),(t=>{throw this.loading=null,t})))}static of(t){let{load:e,support:i}=t;if(!e){if(!i)throw new RangeError("Must pass either 'load' or 'support' to LanguageDescription.of");e=()=>Promise.resolve(i)}return new A(t.name,(t.alias||[]).concat(t.name).map((t=>t.toLowerCase())),t.extensions||[],t.filename,e,i)}static matchFilename(t,e){for(let i of t)if(i.filename&&i.filename.test(e))return i;let i=/\.([^.]+)$/.exec(e);if(i)for(let e of t)if(e.extensions.indexOf(i[1])>-1)return e;return null}static matchLanguageName(t,e,i=!0){e=e.toLowerCase();for(let i of t)if(i.alias.some((t=>t==e)))return i;if(i)for(let i of t)for(let t of i.alias){let n=e.indexOf(t);if(n>-1&&(t.length>2||!/\w/.test(e[n-1])&&!/\w/.test(e[n+t.length])))return i}return null}}const T=s.Facet.define(),M=s.Facet.define({combine:t=>{if(!t.length)return"  ";let e=t[0];if(!e||/\S/.test(e)||Array.from(e).some((t=>t!=e[0])))throw new Error("Invalid indent unit: "+JSON.stringify(t[0]));return e}});function N(t){let e=t.facet(M);return 9==e.charCodeAt(0)?t.tabSize*e.length:e.length}function P(t,e){let i="",n=t.tabSize,r=t.facet(M)[0];if("\t"==r){for(;e>=n;)i+="\t",e-=n;r=" "}for(let t=0;t<e;t++)i+=r;return i}function O(t,e){t instanceof s.EditorState&&(t=new D(t));for(let i of t.state.facet(T)){let n=i(t,e);if(void 0!==n)return n}let i=m(t.state);return i.length>=e?function(t,e,i){let n=e.resolveStack(i),r=n.node.enterUnfinishedNodesBefore(i);if(r!=n.node){let t=[];for(let e=r;e!=n.node;e=e.parent)t.push(e);for(let e=t.length-1;e>=0;e--)n={node:t[e],next:n}}return L(n,t,i)}(t,i,e):null}class D{constructor(t,e={}){this.state=t,this.options=e,this.unit=N(t)}lineAt(t,e=1){let i=this.state.doc.lineAt(t),{simulateBreak:n,simulateDoubleBreak:r}=this.options;return null!=n&&n>=i.from&&n<=i.to?r&&n==t?{text:"",from:t}:(e<0?n<t:n<=t)?{text:i.text.slice(n-i.from),from:n}:{text:i.text.slice(0,n-i.from),from:i.from}:i}textAfterPos(t,e=1){if(this.options.simulateDoubleBreak&&t==this.options.simulateBreak)return"";let{text:i,from:n}=this.lineAt(t,e);return i.slice(t-n,Math.min(i.length,t+100-n))}column(t,e=1){let{text:i,from:n}=this.lineAt(t,e),r=this.countColumn(i,t-n),s=this.options.overrideIndentation?this.options.overrideIndentation(n):-1;return s>-1&&(r+=s-this.countColumn(i,i.search(/\S|$/))),r}countColumn(t,e=t.length){return s.countColumn(t,this.state.tabSize,e)}lineIndent(t,e=1){let{text:i,from:n}=this.lineAt(t,e),r=this.options.overrideIndentation;if(r){let t=r(n);if(t>-1)return t}return this.countColumn(i,i.search(/\S|$/))}get simulatedBreak(){return this.options.simulateBreak||null}}const R=new r.NodeProp;function L(t,e,i){for(let n=t;n;n=n.next){let t=I(n.node);if(t)return t(F.create(e,i,n))}return 0}function I(t){let e=t.type.prop(R);if(e)return e;let i,n=t.firstChild;if(n&&(i=n.type.prop(r.NodeProp.closedBy))){let e=t.lastChild,n=e&&i.indexOf(e.name)>-1;return t=>q(t,!0,1,void 0,n&&!function(t){return t.pos==t.options.simulateBreak&&t.options.simulateDoubleBreak}(t)?e.from:void 0)}return null==t.parent?B:null}function B(){return 0}class F extends D{constructor(t,e,i){super(t.state,t.options),this.base=t,this.pos=e,this.context=i}get node(){return this.context.node}static create(t,e,i){return new F(t,e,i)}get textAfter(){return this.textAfterPos(this.pos)}get baseIndent(){return this.baseIndentFor(this.node)}baseIndentFor(t){let e=this.state.doc.lineAt(t.from);for(;;){let i=t.resolve(e.from);for(;i.parent&&i.parent.from==i.from;)i=i.parent;if(_(i,t))break;e=this.state.doc.lineAt(i.from)}return this.lineIndent(e.from)}continue(){return L(this.context.next,this.base,this.pos)}}function _(t,e){for(let i=e;i;i=i.parent)if(t==i)return!0;return!1}function q(t,e,i,n,r){let s=t.textAfter,o=s.match(/^\s*/)[0].length,a=n&&s.slice(o,o+n.length)==n||r==t.pos+o,l=e?function(t){let e=t.node,i=e.childAfter(e.from),n=e.lastChild;if(!i)return null;let r=t.options.simulateBreak,s=t.state.doc.lineAt(i.from),o=null==r||r<=s.from?s.to:Math.min(s.to,r);for(let t=i.to;;){let r=e.childAfter(t);if(!r||r==n)return null;if(!r.type.isSkipped)return r.from<o?i:null;t=r.to}}(t):null;return l?a?t.column(l.from):t.column(l.to):t.baseIndent+(a?0:t.unit*i)}const V=s.Facet.define(),H=new r.NodeProp;function W(t){let e=t.lastChild;return e&&e.to==t.to&&e.type.isError}function z(t,e,i){for(let n of t.facet(V)){let r=n(t,e,i);if(r)return r}return function(t,e,i){let n=m(t);if(n.length<i)return null;let r=null;for(let s=n.resolveStack(i,1);s;s=s.next){let o=s.node;if(o.to<=i||o.from>i)continue;if(r&&o.from<e)break;let a=o.type.prop(H);if(a&&(o.to<n.length-50||n.length==t.doc.length||!W(o))){let n=a(o,t);n&&n.from<=i&&n.from>=e&&n.to>i&&(r=n)}}return r}(t,e,i)}function j(t,e){let i=e.mapPos(t.from,1),n=e.mapPos(t.to,-1);return i>=n?void 0:{from:i,to:n}}const U=s.StateEffect.define({map:j}),K=s.StateEffect.define({map:j});function G(t){let e=[];for(let{head:i}of t.state.selection.ranges)e.some((t=>t.from<=i&&t.to>=i))||e.push(t.lineBlockAt(i));return e}const $=s.StateField.define({create:()=>o.Decoration.none,update(t,e){t=t.map(e.changes);for(let i of e.effects)if(i.is(U)&&!J(t,i.value.from,i.value.to)){let{preparePlaceholder:n}=e.state.facet(ot),r=n?o.Decoration.replace({widget:new ct(n(e.state,i.value))}):ht;t=t.update({add:[r.range(i.value.from,i.value.to)]})}else i.is(K)&&(t=t.update({filter:(t,e)=>i.value.from!=t||i.value.to!=e,filterFrom:i.value.from,filterTo:i.value.to}));if(e.selection){let i=!1,{head:n}=e.selection.main;t.between(n,n,((t,e)=>{t<n&&e>n&&(i=!0)})),i&&(t=t.update({filterFrom:n,filterTo:n,filter:(t,e)=>e<=n||t>=n}))}return t},provide:t=>o.EditorView.decorations.from(t),toJSON(t,e){let i=[];return t.between(0,e.doc.length,((t,e)=>{i.push(t,e)})),i},fromJSON(t){if(!Array.isArray(t)||t.length%2)throw new RangeError("Invalid JSON for fold state");let e=[];for(let i=0;i<t.length;){let n=t[i++],r=t[i++];if("number"!=typeof n||"number"!=typeof r)throw new RangeError("Invalid JSON for fold state");e.push(ht.range(n,r))}return o.Decoration.set(e,!0)}});function Y(t,e,i){var n;let r=null;return null===(n=t.field($,!1))||void 0===n||n.between(e,i,((t,e)=>{(!r||r.from>t)&&(r={from:t,to:e})})),r}function J(t,e,i){let n=!1;return t.between(e,e,((t,r)=>{t==e&&r==i&&(n=!0)})),n}function X(t,e){return t.field($,!1)?e:e.concat(s.StateEffect.appendConfig.of(at()))}const Z=t=>{for(let e of G(t)){let i=z(t.state,e.from,e.to);if(i)return t.dispatch({effects:X(t.state,[U.of(i),tt(t,i)])}),!0}return!1},Q=t=>{if(!t.state.field($,!1))return!1;let e=[];for(let i of G(t)){let n=Y(t.state,i.from,i.to);n&&e.push(K.of(n),tt(t,n,!1))}return e.length&&t.dispatch({effects:e}),e.length>0};function tt(t,e,i=!0){let n=t.state.doc.lineAt(e.from).number,r=t.state.doc.lineAt(e.to).number;return o.EditorView.announce.of(`${t.state.phrase(i?"Folded lines":"Unfolded lines")} ${n} ${t.state.phrase("to")} ${r}.`)}const et=t=>{let{state:e}=t,i=[];for(let n=0;n<e.doc.length;){let r=t.lineBlockAt(n),s=z(e,r.from,r.to);s&&i.push(U.of(s)),n=(s?t.lineBlockAt(s.to):r).to+1}return i.length&&t.dispatch({effects:X(t.state,i)}),!!i.length},it=t=>{let e=t.state.field($,!1);if(!e||!e.size)return!1;let i=[];return e.between(0,t.state.doc.length,((t,e)=>{i.push(K.of({from:t,to:e}))})),t.dispatch({effects:i}),!0};function nt(t,e){for(let i=e;;){let n=z(t.state,i.from,i.to);if(n&&n.to>e.from)return n;if(!i.from)return null;i=t.lineBlockAt(i.from-1)}}const rt=[{key:"Ctrl-Shift-[",mac:"Cmd-Alt-[",run:Z},{key:"Ctrl-Shift-]",mac:"Cmd-Alt-]",run:Q},{key:"Ctrl-Alt-[",run:et},{key:"Ctrl-Alt-]",run:it}],st={placeholderDOM:null,preparePlaceholder:null,placeholderText:"…"},ot=s.Facet.define({combine:t=>s.combineConfig(t,st)});function at(t){let e=[$,ft];return t&&e.push(ot.of(t)),e}function lt(t,e){let{state:i}=t,n=i.facet(ot),r=e=>{let i=t.lineBlockAt(t.posAtDOM(e.target)),n=Y(t.state,i.from,i.to);n&&t.dispatch({effects:K.of(n)}),e.preventDefault()};if(n.placeholderDOM)return n.placeholderDOM(t,r,e);let s=document.createElement("span");return s.textContent=n.placeholderText,s.setAttribute("aria-label",i.phrase("folded code")),s.title=i.phrase("unfold"),s.className="cm-foldPlaceholder",s.onclick=r,s}const ht=o.Decoration.replace({widget:new class extends o.WidgetType{toDOM(t){return lt(t,null)}}});class ct extends o.WidgetType{constructor(t){super(),this.value=t}eq(t){return this.value==t.value}toDOM(t){return lt(t,this.value)}}const ut={openText:"⌄",closedText:"›",markerDOM:null,domEventHandlers:{},foldingChanged:()=>!1};class dt extends o.GutterMarker{constructor(t,e){super(),this.config=t,this.open=e}eq(t){return this.config==t.config&&this.open==t.open}toDOM(t){if(this.config.markerDOM)return this.config.markerDOM(this.open);let e=document.createElement("span");return e.textContent=this.open?this.config.openText:this.config.closedText,e.title=t.state.phrase(this.open?"Fold line":"Unfold line"),e}}const ft=o.EditorView.baseTheme({".cm-foldPlaceholder":{backgroundColor:"#eee",border:"1px solid #ddd",color:"#888",borderRadius:".2em",margin:"0 1px",padding:"0 1px",cursor:"pointer"},".cm-foldGutter span":{padding:"0 1px",cursor:"pointer"}});class pt{constructor(t,e){let i;function n(t){let e=l.StyleModule.newName();return(i||(i=Object.create(null)))["."+e]=t,e}this.specs=t;const r="string"==typeof e.all?e.all:e.all?n(e.all):void 0,s=e.scope;this.scope=s instanceof d?t=>t.prop(h)==s.data:s?t=>t==s:void 0,this.style=a.tagHighlighter(t.map((t=>({tag:t.tag,class:t.class||n(Object.assign({},t,{tag:null}))}))),{all:r}).style,this.module=i?new l.StyleModule(i):null,this.themeType=e.themeType}static define(t,e){return new pt(t,e||{})}}const mt=s.Facet.define(),gt=s.Facet.define({combine:t=>t.length?[t[0]]:null});function vt(t){let e=t.facet(mt);return e.length?e:t.facet(gt)}const wt=s.Prec.high(o.ViewPlugin.fromClass(class{constructor(t){this.markCache=Object.create(null),this.tree=m(t.state),this.decorations=this.buildDeco(t,vt(t.state)),this.decoratedTo=t.viewport.to}update(t){let e=m(t.state),i=vt(t.state),n=i!=vt(t.startState),{viewport:r}=t.view,s=t.changes.mapPos(this.decoratedTo,1);e.length<r.to&&!n&&e.type==this.tree.type&&s>=r.to?(this.decorations=this.decorations.map(t.changes),this.decoratedTo=s):(e!=this.tree||t.viewportChanged||n)&&(this.tree=e,this.decorations=this.buildDeco(t.view,i),this.decoratedTo=r.to)}buildDeco(t,e){if(!e||!this.tree.length)return o.Decoration.none;let i=new s.RangeSetBuilder;for(let{from:n,to:r}of t.visibleRanges)a.highlightTree(this.tree,e,((t,e,n)=>{i.add(t,e,this.markCache[n]||(this.markCache[n]=o.Decoration.mark({class:n})))}),n,r);return i.finish()}},{decorations:t=>t.decorations})),yt=pt.define([{tag:a.tags.meta,color:"#404740"},{tag:a.tags.link,textDecoration:"underline"},{tag:a.tags.heading,textDecoration:"underline",fontWeight:"bold"},{tag:a.tags.emphasis,fontStyle:"italic"},{tag:a.tags.strong,fontWeight:"bold"},{tag:a.tags.strikethrough,textDecoration:"line-through"},{tag:a.tags.keyword,color:"#708"},{tag:[a.tags.atom,a.tags.bool,a.tags.url,a.tags.contentSeparator,a.tags.labelName],color:"#219"},{tag:[a.tags.literal,a.tags.inserted],color:"#164"},{tag:[a.tags.string,a.tags.deleted],color:"#a11"},{tag:[a.tags.regexp,a.tags.escape,a.tags.special(a.tags.string)],color:"#e40"},{tag:a.tags.definition(a.tags.variableName),color:"#00f"},{tag:a.tags.local(a.tags.variableName),color:"#30a"},{tag:[a.tags.typeName,a.tags.namespace],color:"#085"},{tag:a.tags.className,color:"#167"},{tag:[a.tags.special(a.tags.variableName),a.tags.macroName],color:"#256"},{tag:a.tags.definition(a.tags.propertyName),color:"#00c"},{tag:a.tags.comment,color:"#940"},{tag:a.tags.invalid,color:"#f00"}]),bt=o.EditorView.baseTheme({"&.cm-focused .cm-matchingBracket":{backgroundColor:"#328c8252"},"&.cm-focused .cm-nonmatchingBracket":{backgroundColor:"#bb555544"}}),St="()[]{}",xt=s.Facet.define({combine:t=>s.combineConfig(t,{afterCursor:!0,brackets:St,maxScanDistance:1e4,renderMatch:kt})}),Ct=o.Decoration.mark({class:"cm-matchingBracket"}),Et=o.Decoration.mark({class:"cm-nonmatchingBracket"});function kt(t){let e=[],i=t.matched?Ct:Et;return e.push(i.range(t.start.from,t.start.to)),t.end&&e.push(i.range(t.end.from,t.end.to)),e}const At=[s.StateField.define({create:()=>o.Decoration.none,update(t,e){if(!e.docChanged&&!e.selection)return t;let i=[],n=e.state.facet(xt);for(let t of e.state.selection.ranges){if(!t.empty)continue;let r=Pt(e.state,t.head,-1,n)||t.head>0&&Pt(e.state,t.head-1,1,n)||n.afterCursor&&(Pt(e.state,t.head,1,n)||t.head<e.state.doc.length&&Pt(e.state,t.head+1,-1,n));r&&(i=i.concat(n.renderMatch(r,e.state)))}return o.Decoration.set(i,!0)},provide:t=>o.EditorView.decorations.from(t)}),bt],Tt=new r.NodeProp;function Mt(t,e,i){let n=t.prop(e<0?r.NodeProp.openedBy:r.NodeProp.closedBy);if(n)return n;if(1==t.name.length){let n=i.indexOf(t.name);if(n>-1&&n%2==(e<0?1:0))return[i[n+e]]}return null}function Nt(t){let e=t.type.prop(Tt);return e?e(t.node):t}function Pt(t,e,i,n={}){let r=n.maxScanDistance||1e4,s=n.brackets||St,o=m(t),a=o.resolveInner(e,i);for(let t=a;t;t=t.parent){let n=Mt(t.type,i,s);if(n&&t.from<t.to){let r=Nt(t);if(r&&(i>0?e>=r.from&&e<r.to:e>r.from&&e<=r.to))return Ot(0,0,i,t,r,n,s)}}return function(t,e,i,n,r,s,o){let a=i<0?t.sliceDoc(e-1,e):t.sliceDoc(e,e+1),l=o.indexOf(a);if(l<0||l%2==0!=i>0)return null;let h={from:i<0?e-1:e,to:i>0?e+1:e},c=t.doc.iterRange(e,i>0?t.doc.length:0),u=0;for(let t=0;!c.next().done&&t<=s;){let s=c.value;i<0&&(t+=s.length);let a=e+t*i;for(let t=i>0?0:s.length-1,e=i>0?s.length:-1;t!=e;t+=i){let e=o.indexOf(s[t]);if(!(e<0||n.resolveInner(a+t,1).type!=r))if(e%2==0==i>0)u++;else{if(1==u)return{start:h,end:{from:a+t,to:a+t+1},matched:e>>1==l>>1};u--}}i>0&&(t+=s.length)}return c.done?{start:h,matched:!1}:null}(t,e,i,o,a.type,r,s)}function Ot(t,e,i,n,r,s,o){let a=n.parent,l={from:r.from,to:r.to},h=0,c=null==a?void 0:a.cursor();if(c&&(i<0?c.childBefore(n.from):c.childAfter(n.to)))do{if(i<0?c.to<=n.from:c.from>=n.to){if(0==h&&s.indexOf(c.type.name)>-1&&c.from<c.to){let t=Nt(c);return{start:l,end:t?{from:t.from,to:t.to}:void 0,matched:!0}}if(Mt(c.type,i,o))h++;else if(Mt(c.type,-i,o)){if(0==h){let t=Nt(c);return{start:l,end:t&&t.from<t.to?{from:t.from,to:t.to}:void 0,matched:!1}}h--}}}while(i<0?c.prevSibling():c.nextSibling());return{start:l,matched:!1}}function Dt(t,e,i,n=0,r=0){null==e&&-1==(e=t.search(/[^\s\u00a0]/))&&(e=t.length);let s=r;for(let r=n;r<e;r++)9==t.charCodeAt(r)?s+=i-s%i:s++;return s}class Rt{constructor(t,e,i,n){this.string=t,this.tabSize=e,this.indentUnit=i,this.overrideIndent=n,this.pos=0,this.start=0,this.lastColumnPos=0,this.lastColumnValue=0}eol(){return this.pos>=this.string.length}sol(){return 0==this.pos}peek(){return this.string.charAt(this.pos)||void 0}next(){if(this.pos<this.string.length)return this.string.charAt(this.pos++)}eat(t){let e,i=this.string.charAt(this.pos);if(e="string"==typeof t?i==t:i&&(t instanceof RegExp?t.test(i):t(i)),e)return++this.pos,i}eatWhile(t){let e=this.pos;for(;this.eat(t););return this.pos>e}eatSpace(){let t=this.pos;for(;/[\s\u00a0]/.test(this.string.charAt(this.pos));)++this.pos;return this.pos>t}skipToEnd(){this.pos=this.string.length}skipTo(t){let e=this.string.indexOf(t,this.pos);if(e>-1)return this.pos=e,!0}backUp(t){this.pos-=t}column(){return this.lastColumnPos<this.start&&(this.lastColumnValue=Dt(this.string,this.start,this.tabSize,this.lastColumnPos,this.lastColumnValue),this.lastColumnPos=this.start),this.lastColumnValue}indentation(){var t;return null!==(t=this.overrideIndent)&&void 0!==t?t:Dt(this.string,null,this.tabSize)}match(t,e,i){if("string"==typeof t){let n=t=>i?t.toLowerCase():t;return n(this.string.substr(this.pos,t.length))==n(t)?(!1!==e&&(this.pos+=t.length),!0):null}{let i=this.string.slice(this.pos).match(t);return i&&i.index>0?null:(i&&!1!==e&&(this.pos+=i[0].length),i)}}current(){return this.string.slice(this.start,this.pos)}}function Lt(t){if("object"!=typeof t)return t;let e={};for(let i in t){let n=t[i];e[i]=n instanceof Array?n.slice():n}return e}const It=new WeakMap;class Bt extends d{constructor(t){let e,i=c(t.languageData),n={name:(s=t).name||"",token:s.token,blankLine:s.blankLine||(()=>{}),startState:s.startState||(()=>!0),copyState:s.copyState||Lt,indent:s.indent||(()=>null),languageData:s.languageData||{},tokenTable:s.tokenTable||Ht};var s;super(i,new class extends r.Parser{createParse(t,i,n){return new qt(e,t,i,n)}},[T.of(((t,e)=>this.getIndent(t,e)))],t.name),this.topNode=function(t){let e=r.NodeType.define({id:Wt.length,name:"Document",props:[h.add((()=>t))],top:!0});return Wt.push(e),e}(i),e=this,this.streamParser=n,this.stateAfter=new r.NodeProp({perNode:!0}),this.tokenTable=t.tokenTable?new Gt(n.tokenTable):$t}static define(t){return new Bt(t)}getIndent(t,e){let i,n=m(t.state),r=n.resolve(e);for(;r&&r.type!=this.topNode;)r=r.parent;if(!r)return null;let{overrideIndentation:s}=t.options;s&&(i=It.get(t.state),null!=i&&i<e-1e4&&(i=void 0));let o,a,l=Ft(this,n,0,r.from,null!=i?i:e);if(l?(a=l.state,o=l.pos+1):(a=this.streamParser.startState(t.unit),o=0),e-o>1e4)return null;for(;o<e;){let i=t.state.doc.lineAt(o),n=Math.min(e,i.to);if(i.length){let e=s?s(i.from):-1,r=new Rt(i.text,t.state.tabSize,t.unit,e<0?void 0:e);for(;r.pos<n-i.from;)Vt(this.streamParser.token,r,a)}else this.streamParser.blankLine(a,t.unit);if(n==e)break;o=i.to+1}let h=t.lineAt(e);return s&&null==i&&It.set(t.state,h.from),this.streamParser.indent(a,/^\s*(.*)/.exec(h.text)[1],t)}get allowsNesting(){return!1}}function Ft(t,e,i,n,s){let o=i>=n&&i+e.length<=s&&e.prop(t.stateAfter);if(o)return{state:t.streamParser.copyState(o),pos:i+e.length};for(let o=e.children.length-1;o>=0;o--){let a=e.children[o],l=i+e.positions[o],h=a instanceof r.Tree&&l<s&&Ft(t,a,l,n,s);if(h)return h}return null}function _t(t,e,i,n,s){if(s&&i<=0&&n>=e.length)return e;s||e.type!=t.topNode||(s=!0);for(let o=e.children.length-1;o>=0;o--){let a,l=e.positions[o],h=e.children[o];if(l<n&&h instanceof r.Tree){if(!(a=_t(t,h,i-l,n-l,s)))break;return s?new r.Tree(e.type,e.children.slice(0,o).concat(a),e.positions.slice(0,o+1),l+a.length):a}}return null}class qt{constructor(t,e,i,n){this.lang=t,this.input=e,this.fragments=i,this.ranges=n,this.stoppedAt=null,this.chunks=[],this.chunkPos=[],this.chunk=[],this.chunkReused=void 0,this.rangeIndex=0,this.to=n[n.length-1].to;let s=y.get(),o=n[0].from,{state:a,tree:l}=function(t,e,i,n){for(let n of e){let e,r=n.from+(n.openStart?25:0),s=n.to-(n.openEnd?25:0),o=r<=i&&s>i&&Ft(t,n.tree,0-n.offset,i,s);if(o&&(e=_t(t,n.tree,i+n.offset,o.pos+n.offset,!1)))return{state:o.state,tree:e}}return{state:t.streamParser.startState(n?N(n):4),tree:r.Tree.empty}}(t,i,o,null==s?void 0:s.state);this.state=a,this.parsedPos=this.chunkStart=o+l.length;for(let t=0;t<l.children.length;t++)this.chunks.push(l.children[t]),this.chunkPos.push(l.positions[t]);s&&this.parsedPos<s.viewport.from-1e5&&(this.state=this.lang.streamParser.startState(N(s.state)),s.skipUntilInView(this.parsedPos,s.viewport.from),this.parsedPos=s.viewport.from),this.moveRangeIndex()}advance(){let t=y.get(),e=null==this.stoppedAt?this.to:Math.min(this.to,this.stoppedAt),i=Math.min(e,this.chunkStart+2048);for(t&&(i=Math.min(i,t.viewport.to));this.parsedPos<i;)this.parseLine(t);return this.chunkStart<this.parsedPos&&this.finishChunk(),this.parsedPos>=e?this.finish():t&&this.parsedPos>=t.viewport.to?(t.skipUntilInView(this.parsedPos,e),this.finish()):null}stopAt(t){this.stoppedAt=t}lineAfter(t){let e=this.input.chunk(t);if(this.input.lineChunks)"\n"==e&&(e="");else{let t=e.indexOf("\n");t>-1&&(e=e.slice(0,t))}return t+e.length<=this.to?e:e.slice(0,this.to-t)}nextLine(){let t=this.parsedPos,e=this.lineAfter(t),i=t+e.length;for(let t=this.rangeIndex;;){let n=this.ranges[t].to;if(n>=i)break;if(e=e.slice(0,n-(i-e.length)),t++,t==this.ranges.length)break;let r=this.ranges[t].from,s=this.lineAfter(r);e+=s,i=r+s.length}return{line:e,end:i}}skipGapsTo(t,e,i){for(;;){let n=this.ranges[this.rangeIndex].to,r=t+e;if(i>0?n>r:n>=r)break;e+=this.ranges[++this.rangeIndex].from-n}return e}moveRangeIndex(){for(;this.ranges[this.rangeIndex].to<this.parsedPos;)this.rangeIndex++}emitToken(t,e,i,n,r){if(this.ranges.length>1){e+=r=this.skipGapsTo(e,r,1);let t=this.chunk.length;i+=r=this.skipGapsTo(i,r,-1),n+=this.chunk.length-t}return this.chunk.push(t,e,i,n),r}parseLine(t){let{line:e,end:i}=this.nextLine(),n=0,{streamParser:r}=this.lang,s=new Rt(e,t?t.state.tabSize:4,t?N(t.state):2);if(s.eol())r.blankLine(this.state,s.indentUnit);else for(;!s.eol();){let t=Vt(r.token,s,this.state);if(t&&(n=this.emitToken(this.lang.tokenTable.resolve(t),this.parsedPos+s.start,this.parsedPos+s.pos,4,n)),s.start>1e4)break}this.parsedPos=i,this.moveRangeIndex(),this.parsedPos<this.to&&this.parsedPos++}finishChunk(){let t=r.Tree.build({buffer:this.chunk,start:this.chunkStart,length:this.parsedPos-this.chunkStart,nodeSet:zt,topID:0,maxBufferLength:2048,reused:this.chunkReused});t=new r.Tree(t.type,t.children,t.positions,t.length,[[this.lang.stateAfter,this.lang.streamParser.copyState(this.state)]]),this.chunks.push(t),this.chunkPos.push(this.chunkStart-this.ranges[0].from),this.chunk=[],this.chunkReused=void 0,this.chunkStart=this.parsedPos}finish(){return new r.Tree(this.lang.topNode,this.chunks,this.chunkPos,this.parsedPos-this.ranges[0].from).balance()}}function Vt(t,e,i){e.start=e.pos;for(let n=0;n<10;n++){let n=t(e,i);if(e.pos>e.start)return n}throw new Error("Stream parser failed to advance stream.")}const Ht=Object.create(null),Wt=[r.NodeType.none],zt=new r.NodeSet(Wt),jt=[],Ut=Object.create(null),Kt=Object.create(null);for(let[t,e]of[["variable","variableName"],["variable-2","variableName.special"],["string-2","string.special"],["def","variableName.definition"],["tag","tagName"],["attribute","attributeName"],["type","typeName"],["builtin","variableName.standard"],["qualifier","modifier"],["error","invalid"],["header","heading"],["property","propertyName"]])Kt[t]=Jt(Ht,e);class Gt{constructor(t){this.extra=t,this.table=Object.assign(Object.create(null),Kt)}resolve(t){return t?this.table[t]||(this.table[t]=Jt(this.extra,t)):0}}const $t=new Gt(Ht);function Yt(t,e){jt.indexOf(t)>-1||(jt.push(t),console.warn(e))}function Jt(t,e){let i=[];for(let n of e.split(" ")){let e=[];for(let i of n.split(".")){let n=t[i]||a.tags[i];n?"function"==typeof n?e.length?e=e.map(n):Yt(i,`Modifier ${i} used at start of tag`):e.length?Yt(i,`Tag ${i} used as modifier`):e=Array.isArray(n)?n:[n]:Yt(i,`Unknown highlighting tag ${i}`)}for(let t of e)i.push(t)}if(!i.length)return 0;let n=e.replace(/ /g,"_"),s=n+" "+i.map((t=>t.id)),o=Ut[s];if(o)return o.id;let l=Ut[s]=r.NodeType.define({id:Wt.length,name:n,props:[a.styleTags({[n]:i})]});return Wt.push(l),l.id}function Xt(t){return t.length<=4096&&/[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/.test(t)}function Zt(t){for(let e=t.iter();!e.next().done;)if(Xt(e.value))return!0;return!1}const Qt=s.Facet.define({combine:t=>t.some((t=>t))}),te=o.ViewPlugin.fromClass(class{constructor(t){this.always=t.state.facet(Qt)||t.textDirection!=o.Direction.LTR||t.state.facet(o.EditorView.perLineTextDirection),this.hasRTL=!this.always&&Zt(t.state.doc),this.tree=m(t.state),this.decorations=this.always||this.hasRTL?ee(t,this.tree,this.always):o.Decoration.none}update(t){let e=t.state.facet(Qt)||t.view.textDirection!=o.Direction.LTR||t.state.facet(o.EditorView.perLineTextDirection);if(e||this.hasRTL||!function(t){let e=!1;return t.iterChanges(((t,i,n,r,s)=>{!e&&Zt(s)&&(e=!0)})),e}(t.changes)||(this.hasRTL=!0),!e&&!this.hasRTL)return;let i=m(t.state);(e!=this.always||i!=this.tree||t.docChanged||t.viewportChanged)&&(this.tree=i,this.always=e,this.decorations=ee(t.view,i,e))}},{provide:t=>{function e(e){var i,n;return null!==(n=null===(i=e.plugin(t))||void 0===i?void 0:i.decorations)&&void 0!==n?n:o.Decoration.none}return[o.EditorView.outerDecorations.of(e),s.Prec.lowest(o.EditorView.bidiIsolatedRanges.of(e))]}});function ee(t,e,i){let n=new s.RangeSetBuilder,o=t.visibleRanges;i||(o=function(t,e){let i=e.iter(),n=0,r=[],s=null;for(let{from:e,to:o}of t)if(!(s&&s.to>e&&(e=s.to,e>=o)))for(n+i.value.length<e&&(i.next(e-(n+i.value.length)),n=e);;){let t=n,e=n+i.value.length;if(!i.lineBreak&&Xt(i.value)&&(s&&s.to>t-10?s.to=Math.min(o,e):r.push(s={from:t,to:Math.min(o,e)})),e>=o)break;n=e,i.next()}return r}(o,t.state.doc));for(let{from:t,to:i}of o)e.iterate({enter:t=>{let e=t.type.prop(r.NodeProp.isolate);e&&n.add(t.from,t.to,ie[e])},from:t,to:i});return n.finish()}const ie={rtl:o.Decoration.mark({class:"cm-iso",inclusive:!0,attributes:{dir:"rtl"},bidiIsolate:o.Direction.RTL}),ltr:o.Decoration.mark({class:"cm-iso",inclusive:!0,attributes:{dir:"ltr"},bidiIsolate:o.Direction.LTR}),auto:o.Decoration.mark({class:"cm-iso",inclusive:!0,attributes:{dir:"auto"},bidiIsolate:null})};e.DocInput=v,e.HighlightStyle=pt,e.IndentContext=D,e.LRLanguage=p,e.Language=d,e.LanguageDescription=A,e.LanguageSupport=class{constructor(t,e=[]){this.language=t,this.support=e,this.extension=[t,e]}},e.ParseContext=y,e.StreamLanguage=Bt,e.StringStream=Rt,e.TreeIndentContext=F,e.bidiIsolates=function(t={}){let e=[te];return t.alwaysIsolate&&e.push(Qt.of(!0)),e},e.bracketMatching=function(t={}){return[xt.of(t),At]},e.bracketMatchingHandle=Tt,e.codeFolding=at,e.continuedIndent=function({except:t,units:e=1}={}){return i=>{let n=t&&t.test(i.textAfter);return i.baseIndent+(n?0:e*i.unit)}},e.defaultHighlightStyle=yt,e.defineLanguageFacet=c,e.delimitedIndent=function({closing:t,align:e=!0,units:i=1}){return n=>q(n,e,i,t)},e.ensureSyntaxTree=g,e.flatIndent=t=>t.baseIndent,e.foldAll=et,e.foldCode=Z,e.foldEffect=U,e.foldGutter=function(t={}){let e=Object.assign(Object.assign({},ut),t),i=new dt(e,!0),n=new dt(e,!1),r=o.ViewPlugin.fromClass(class{constructor(t){this.from=t.viewport.from,this.markers=this.buildMarkers(t)}update(t){(t.docChanged||t.viewportChanged||t.startState.facet(k)!=t.state.facet(k)||t.startState.field($,!1)!=t.state.field($,!1)||m(t.startState)!=m(t.state)||e.foldingChanged(t))&&(this.markers=this.buildMarkers(t.view))}buildMarkers(t){let e=new s.RangeSetBuilder;for(let r of t.viewportLineBlocks){let s=Y(t.state,r.from,r.to)?n:z(t.state,r.from,r.to)?i:null;s&&e.add(r.from,r.from,s)}return e.finish()}}),{domEventHandlers:a}=e;return[r,o.gutter({class:"cm-foldGutter",markers(t){var e;return(null===(e=t.plugin(r))||void 0===e?void 0:e.markers)||s.RangeSet.empty},initialSpacer:()=>new dt(e,!1),domEventHandlers:Object.assign(Object.assign({},a),{click:(t,e,i)=>{if(a.click&&a.click(t,e,i))return!0;let n=Y(t.state,e.from,e.to);if(n)return t.dispatch({effects:K.of(n)}),!0;let r=z(t.state,e.from,e.to);return!!r&&(t.dispatch({effects:U.of(r)}),!0)}})}),at()]},e.foldInside=function(t){let e=t.firstChild,i=t.lastChild;return e&&e.to<i.from?{from:e.to,to:i.type.isError?t.to:i.from}:null},e.foldKeymap=rt,e.foldNodeProp=H,e.foldService=V,e.foldState=$,e.foldable=z,e.foldedRanges=function(t){return t.field($,!1)||s.RangeSet.empty},e.forceParsing=function(t,e=t.viewport.to,i=100){let n=g(t.state,e,i);return n!=m(t.state)&&t.dispatch({}),!!n},e.getIndentUnit=N,e.getIndentation=O,e.highlightingFor=function(t,e,i){let n=vt(t),r=null;if(n)for(let t of n)if(!t.scope||i&&t.scope(i)){let i=t.style(e);i&&(r=r?r+" "+i:i)}return r},e.indentNodeProp=R,e.indentOnInput=function(){return s.EditorState.transactionFilter.of((t=>{if(!t.docChanged||!t.isUserEvent("input.type")&&!t.isUserEvent("input.complete"))return t;let e=t.startState.languageDataAt("indentOnInput",t.startState.selection.main.head);if(!e.length)return t;let i=t.newDoc,{head:n}=t.newSelection.main,r=i.lineAt(n);if(n>r.from+200)return t;let s=i.sliceString(r.from,n);if(!e.some((t=>t.test(s))))return t;let{state:o}=t,a=-1,l=[];for(let{head:t}of o.selection.ranges){let e=o.doc.lineAt(t);if(e.from==a)continue;a=e.from;let i=O(o,e.from);if(null==i)continue;let n=/^\s*/.exec(e.text)[0],r=P(o,i);n!=r&&l.push({from:e.from,to:e.from+n.length,insert:r})}return l.length?[t,{changes:l,sequential:!0}]:t}))},e.indentRange=function(t,e,i){let n=Object.create(null),r=new D(t,{overrideIndentation:t=>{var e;return null!==(e=n[t])&&void 0!==e?e:-1}}),s=[];for(let o=e;o<=i;){let e=t.doc.lineAt(o);o=e.to+1;let i=O(r,e.from);if(null==i)continue;/\S/.test(e.text)||(i=0);let a=/^\s*/.exec(e.text)[0],l=P(t,i);a!=l&&(n[e.from]=i,s.push({from:e.from,to:e.from+a.length,insert:l}))}return t.changes(s)},e.indentService=T,e.indentString=P,e.indentUnit=M,e.language=k,e.languageDataProp=h,e.matchBrackets=Pt,e.sublanguageProp=u,e.syntaxHighlighting=function(t,e){let i,n=[wt];return t instanceof pt&&(t.module&&n.push(o.EditorView.styleModule.of(t.module)),i=t.themeType),(null==e?void 0:e.fallback)?n.push(gt.of(t)):i?n.push(mt.computeN([o.EditorView.darkTheme],(e=>e.facet(o.EditorView.darkTheme)==("dark"==i)?[t]:[]))):n.push(mt.of(t)),n},e.syntaxParserRunning=function(t){var e;return(null===(e=t.plugin(E))||void 0===e?void 0:e.isWorking())||!1},e.syntaxTree=m,e.syntaxTreeAvailable=function(t,e=t.doc.length){var i;return(null===(i=t.field(d.state,!1))||void 0===i?void 0:i.context.isDone(e))||!1},e.toggleFold=t=>{let e=[];for(let i of G(t)){let n=Y(t.state,i.from,i.to);if(n)e.push(K.of(n),tt(t,n,!1));else{let n=nt(t,i);n&&e.push(U.of(n),tt(t,n))}}return e.length>0&&t.dispatch({effects:X(t.state,e)}),!!e.length},e.unfoldAll=it,e.unfoldCode=Q,e.unfoldEffect=K},4126:(t,e,i)=>{"use strict";var n=i(1506),r=i(9064),s=i(8748);class o{constructor(t,e,i){this.from=t,this.to=e,this.diagnostic=i}}class a{constructor(t,e,i){this.diagnostics=t,this.panel=e,this.selected=i}static init(t,e,i){let r=t,s=i.facet(C).markerFilter;s&&(r=s(r,i));let o=n.Decoration.set(r.map((t=>t.from==t.to||t.from==t.to-1&&i.doc.lineAt(t.from).to==t.from?n.Decoration.widget({widget:new A(t),diagnostic:t}).range(t.from):n.Decoration.mark({attributes:{class:"cm-lintRange cm-lintRange-"+t.severity+(t.markClass?" "+t.markClass:"")},diagnostic:t}).range(t.from,t.to))),!0);return new a(o,e,l(o))}}function l(t,e=null,i=0){let n=null;return t.between(i,1e9,((t,i,{spec:r})=>{if(!e||r.diagnostic==e)return n=new o(t,i,r.diagnostic),!1})),n}function h(t,e){let i=e.pos,n=e.end||i,r=t.state.facet(C).hideOn(t,i,n);if(null!=r)return r;let s=t.startState.doc.lineAt(e.pos);return!(!t.effects.some((t=>t.is(d)))&&!t.changes.touchesRange(s.from,Math.max(s.to,n)))}function c(t,e){return t.field(m,!1)?e:e.concat(r.StateEffect.appendConfig.of(V))}function u(t,e){return{effects:c(t,[d.of(e)])}}const d=r.StateEffect.define(),f=r.StateEffect.define(),p=r.StateEffect.define(),m=r.StateField.define({create:()=>new a(n.Decoration.none,null,null),update(t,e){if(e.docChanged&&t.diagnostics.size){let i=t.diagnostics.map(e.changes),n=null,r=t.panel;if(t.selected){let r=e.changes.mapPos(t.selected.from,1);n=l(i,t.selected.diagnostic,r)||l(i,null,r)}!i.size&&r&&e.state.facet(C).autoPanel&&(r=null),t=new a(i,r,n)}for(let i of e.effects)if(i.is(d)){let n=e.state.facet(C).autoPanel?i.value.length?M.open:null:t.panel;t=a.init(i.value,n,e.state)}else i.is(f)?t=new a(t.diagnostics,i.value?M.open:null,t.selected):i.is(p)&&(t=new a(t.diagnostics,t.panel,i.value));return t},provide:t=>[n.showPanel.from(t,(t=>t.panel)),n.EditorView.decorations.from(t,(t=>t.diagnostics))]}),g=n.Decoration.mark({class:"cm-lintRange cm-lintRange-active"});function v(t,e){return s("ul",{class:"cm-tooltip-lint"},e.map((e=>k(t,e,!1))))}const w=t=>{let e=t.state.field(m,!1);e&&e.panel||t.dispatch({effects:c(t.state,[f.of(!0)])});let i=n.getPanel(t,M.open);return i&&i.dom.querySelector(".cm-panel-lint ul").focus(),!0},y=t=>{let e=t.state.field(m,!1);return!(!e||!e.panel||(t.dispatch({effects:f.of(!1)}),0))},b=t=>{let e=t.state.field(m,!1);if(!e)return!1;let i=t.state.selection.main,n=e.diagnostics.iter(i.to+1);return!(!n.value&&(n=e.diagnostics.iter(0),!n.value||n.from==i.from&&n.to==i.to)||(t.dispatch({selection:{anchor:n.from,head:n.to},scrollIntoView:!0}),0))},S=[{key:"Mod-Shift-m",run:w,preventDefault:!0},{key:"F8",run:b}],x=n.ViewPlugin.fromClass(class{constructor(t){this.view=t,this.timeout=-1,this.set=!0;let{delay:e}=t.state.facet(C);this.lintTime=Date.now()+e,this.run=this.run.bind(this),this.timeout=setTimeout(this.run,e)}run(){clearTimeout(this.timeout);let t=Date.now();if(t<this.lintTime-10)this.timeout=setTimeout(this.run,this.lintTime-t);else{this.set=!1;let{state:t}=this.view,{sources:e}=t.facet(C);e.length&&Promise.all(e.map((t=>Promise.resolve(t(this.view))))).then((e=>{let i=e.reduce(((t,e)=>t.concat(e)));this.view.state.doc==t.doc&&this.view.dispatch(u(this.view.state,i))}),(t=>{n.logException(this.view.state,t)}))}}update(t){let e=t.state.facet(C);(t.docChanged||e!=t.startState.facet(C)||e.needsRefresh&&e.needsRefresh(t))&&(this.lintTime=Date.now()+e.delay,this.set||(this.set=!0,this.timeout=setTimeout(this.run,e.delay)))}force(){this.set&&(this.lintTime=Date.now(),this.run())}destroy(){clearTimeout(this.timeout)}}),C=r.Facet.define({combine:t=>Object.assign({sources:t.map((t=>t.source)).filter((t=>null!=t))},r.combineConfig(t.map((t=>t.config)),{delay:750,markerFilter:null,tooltipFilter:null,needsRefresh:null,hideOn:()=>null},{needsRefresh:(t,e)=>t?e?i=>t(i)||e(i):t:e}))});function E(t){let e=[];if(t)t:for(let{name:i}of t){for(let t=0;t<i.length;t++){let n=i[t];if(/[a-zA-Z]/.test(n)&&!e.some((t=>t.toLowerCase()==n.toLowerCase()))){e.push(n);continue t}}e.push("")}return e}function k(t,e,i){var n;let r=i?E(e.actions):[];return s("li",{class:"cm-diagnostic cm-diagnostic-"+e.severity},s("span",{class:"cm-diagnosticText"},e.renderMessage?e.renderMessage(t):e.message),null===(n=e.actions)||void 0===n?void 0:n.map(((i,n)=>{let o=!1,a=n=>{if(n.preventDefault(),o)return;o=!0;let r=l(t.state.field(m).diagnostics,e);r&&i.apply(t,r.from,r.to)},{name:h}=i,c=r[n]?h.indexOf(r[n]):-1,u=c<0?h:[h.slice(0,c),s("u",h.slice(c,c+1)),h.slice(c+1)];return s("button",{type:"button",class:"cm-diagnosticAction",onclick:a,onmousedown:a,"aria-label":` Action: ${h}${c<0?"":` (access key "${r[n]})"`}.`},u)})),e.source&&s("div",{class:"cm-diagnosticSource"},e.source))}class A extends n.WidgetType{constructor(t){super(),this.diagnostic=t}eq(t){return t.diagnostic==this.diagnostic}toDOM(){return s("span",{class:"cm-lintPoint cm-lintPoint-"+this.diagnostic.severity})}}class T{constructor(t,e){this.diagnostic=e,this.id="item_"+Math.floor(4294967295*Math.random()).toString(16),this.dom=k(t,e,!0),this.dom.id=this.id,this.dom.setAttribute("role","option")}}class M{constructor(t){this.view=t,this.items=[],this.list=s("ul",{tabIndex:0,role:"listbox","aria-label":this.view.state.phrase("Diagnostics"),onkeydown:e=>{if(27==e.keyCode)y(this.view),this.view.focus();else if(38==e.keyCode||33==e.keyCode)this.moveSelection((this.selectedIndex-1+this.items.length)%this.items.length);else if(40==e.keyCode||34==e.keyCode)this.moveSelection((this.selectedIndex+1)%this.items.length);else if(36==e.keyCode)this.moveSelection(0);else if(35==e.keyCode)this.moveSelection(this.items.length-1);else if(13==e.keyCode)this.view.focus();else{if(!(e.keyCode>=65&&e.keyCode<=90&&this.selectedIndex>=0))return;{let{diagnostic:i}=this.items[this.selectedIndex],n=E(i.actions);for(let r=0;r<n.length;r++)if(n[r].toUpperCase().charCodeAt(0)==e.keyCode){let e=l(this.view.state.field(m).diagnostics,i);e&&i.actions[r].apply(t,e.from,e.to)}}}e.preventDefault()},onclick:t=>{for(let e=0;e<this.items.length;e++)this.items[e].dom.contains(t.target)&&this.moveSelection(e)}}),this.dom=s("div",{class:"cm-panel-lint"},this.list,s("button",{type:"button",name:"close","aria-label":this.view.state.phrase("close"),onclick:()=>y(this.view)},"×")),this.update()}get selectedIndex(){let t=this.view.state.field(m).selected;if(!t)return-1;for(let e=0;e<this.items.length;e++)if(this.items[e].diagnostic==t.diagnostic)return e;return-1}update(){let{diagnostics:t,selected:e}=this.view.state.field(m),i=0,n=!1,r=null;for(t.between(0,this.view.state.doc.length,((t,s,{spec:o})=>{let a,l=-1;for(let t=i;t<this.items.length;t++)if(this.items[t].diagnostic==o.diagnostic){l=t;break}l<0?(a=new T(this.view,o.diagnostic),this.items.splice(i,0,a),n=!0):(a=this.items[l],l>i&&(this.items.splice(i,l-i),n=!0)),e&&a.diagnostic==e.diagnostic?a.dom.hasAttribute("aria-selected")||(a.dom.setAttribute("aria-selected","true"),r=a):a.dom.hasAttribute("aria-selected")&&a.dom.removeAttribute("aria-selected"),i++}));i<this.items.length&&!(1==this.items.length&&this.items[0].diagnostic.from<0);)n=!0,this.items.pop();0==this.items.length&&(this.items.push(new T(this.view,{from:-1,to:-1,severity:"info",message:this.view.state.phrase("No diagnostics")})),n=!0),r?(this.list.setAttribute("aria-activedescendant",r.id),this.view.requestMeasure({key:this,read:()=>({sel:r.dom.getBoundingClientRect(),panel:this.list.getBoundingClientRect()}),write:({sel:t,panel:e})=>{let i=e.height/this.list.offsetHeight;t.top<e.top?this.list.scrollTop-=(e.top-t.top)/i:t.bottom>e.bottom&&(this.list.scrollTop+=(t.bottom-e.bottom)/i)}})):this.selectedIndex<0&&this.list.removeAttribute("aria-activedescendant"),n&&this.sync()}sync(){let t=this.list.firstChild;function e(){let e=t;t=e.nextSibling,e.remove()}for(let i of this.items)if(i.dom.parentNode==this.list){for(;t!=i.dom;)e();t=i.dom.nextSibling}else this.list.insertBefore(i.dom,t);for(;t;)e()}moveSelection(t){if(this.selectedIndex<0)return;let e=l(this.view.state.field(m).diagnostics,this.items[t].diagnostic);e&&this.view.dispatch({selection:{anchor:e.from,head:e.to},scrollIntoView:!0,effects:p.of(e)})}static open(t){return new M(t)}}function N(t,e='viewBox="0 0 40 40"'){return`url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${e}>${encodeURIComponent(t)}</svg>')`}function P(t){return N(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${t}" fill="none" stroke-width=".7"/>`,'width="6" height="3"')}const O=n.EditorView.baseTheme({".cm-diagnostic":{padding:"3px 6px 3px 8px",marginLeft:"-1px",display:"block",whiteSpace:"pre-wrap"},".cm-diagnostic-error":{borderLeft:"5px solid #d11"},".cm-diagnostic-warning":{borderLeft:"5px solid orange"},".cm-diagnostic-info":{borderLeft:"5px solid #999"},".cm-diagnostic-hint":{borderLeft:"5px solid #66d"},".cm-diagnosticAction":{font:"inherit",border:"none",padding:"2px 4px",backgroundColor:"#444",color:"white",borderRadius:"3px",marginLeft:"8px",cursor:"pointer"},".cm-diagnosticSource":{fontSize:"70%",opacity:.7},".cm-lintRange":{backgroundPosition:"left bottom",backgroundRepeat:"repeat-x",paddingBottom:"0.7px"},".cm-lintRange-error":{backgroundImage:P("#d11")},".cm-lintRange-warning":{backgroundImage:P("orange")},".cm-lintRange-info":{backgroundImage:P("#999")},".cm-lintRange-hint":{backgroundImage:P("#66d")},".cm-lintRange-active":{backgroundColor:"#ffdd9980"},".cm-tooltip-lint":{padding:0,margin:0},".cm-lintPoint":{position:"relative","&:after":{content:'""',position:"absolute",bottom:0,left:"-2px",borderLeft:"3px solid transparent",borderRight:"3px solid transparent",borderBottom:"4px solid #d11"}},".cm-lintPoint-warning":{"&:after":{borderBottomColor:"orange"}},".cm-lintPoint-info":{"&:after":{borderBottomColor:"#999"}},".cm-lintPoint-hint":{"&:after":{borderBottomColor:"#66d"}},".cm-panel.cm-panel-lint":{position:"relative","& ul":{maxHeight:"100px",overflowY:"auto","& [aria-selected]":{backgroundColor:"#ddd","& u":{textDecoration:"underline"}},"&:focus [aria-selected]":{background_fallback:"#bdf",backgroundColor:"Highlight",color_fallback:"white",color:"HighlightText"},"& u":{textDecoration:"none"},padding:0,margin:0},"& [name=close]":{position:"absolute",top:"0",right:"2px",background:"inherit",border:"none",font:"inherit",padding:0,margin:0}}});function D(t){return"error"==t?4:"warning"==t?3:"info"==t?2:1}class R extends n.GutterMarker{constructor(t){super(),this.diagnostics=t,this.severity=t.reduce(((t,e)=>D(t)<D(e.severity)?e.severity:t),"hint")}toDOM(t){let e=document.createElement("div");e.className="cm-lint-marker cm-lint-marker-"+this.severity;let i=this.diagnostics,n=t.state.facet(H).tooltipFilter;return n&&(i=n(i,t.state)),i.length&&(e.onmouseover=()=>function(t,e,i){function n(){let n=t.elementAtHeight(e.getBoundingClientRect().top+5-t.documentTop);t.coordsAtPos(n.from)&&t.dispatch({effects:F.of({pos:n.from,above:!1,create:()=>({dom:v(t,i),getCoords:()=>e.getBoundingClientRect()})})}),e.onmouseout=e.onmousemove=null,function(t,e){let i=n=>{let r=e.getBoundingClientRect();if(!(n.clientX>r.left-10&&n.clientX<r.right+10&&n.clientY>r.top-10&&n.clientY<r.bottom+10)){for(let t=n.target;t;t=t.parentNode)if(1==t.nodeType&&t.classList.contains("cm-tooltip-lint"))return;window.removeEventListener("mousemove",i),t.state.field(_)&&t.dispatch({effects:F.of(null)})}};window.addEventListener("mousemove",i)}(t,e)}let{hoverTime:r}=t.state.facet(H),s=setTimeout(n,r);e.onmouseout=()=>{clearTimeout(s),e.onmouseout=e.onmousemove=null},e.onmousemove=()=>{clearTimeout(s),s=setTimeout(n,r)}}(t,e,i)),e}}function L(t,e){let i=Object.create(null);for(let n of e){let e=t.lineAt(n.from);(i[e.from]||(i[e.from]=[])).push(n)}let n=[];for(let t in i)n.push(new R(i[t]).range(+t));return r.RangeSet.of(n,!0)}const I=n.gutter({class:"cm-gutter-lint",markers:t=>t.state.field(B)}),B=r.StateField.define({create:()=>r.RangeSet.empty,update(t,e){t=t.map(e.changes);let i=e.state.facet(H).markerFilter;for(let n of e.effects)if(n.is(d)){let r=n.value;i&&(r=i(r||[],e.state)),t=L(e.state.doc,r.slice(0))}return t}}),F=r.StateEffect.define(),_=r.StateField.define({create:()=>null,update:(t,e)=>(t&&e.docChanged&&(t=h(e,t)?null:Object.assign(Object.assign({},t),{pos:e.changes.mapPos(t.pos)})),e.effects.reduce(((t,e)=>e.is(F)?e.value:t),t)),provide:t=>n.showTooltip.from(t)}),q=n.EditorView.baseTheme({".cm-gutter-lint":{width:"1.4em","& .cm-gutterElement":{padding:".2em"}},".cm-lint-marker":{width:"1em",height:"1em"},".cm-lint-marker-info":{content:N('<path fill="#aaf" stroke="#77e" stroke-width="6" stroke-linejoin="round" d="M5 5L35 5L35 35L5 35Z"/>')},".cm-lint-marker-warning":{content:N('<path fill="#fe8" stroke="#fd7" stroke-width="6" stroke-linejoin="round" d="M20 6L37 35L3 35Z"/>')},".cm-lint-marker-error":{content:N('<circle cx="20" cy="20" r="15" fill="#f87" stroke="#f43" stroke-width="6"/>')}}),V=[m,n.EditorView.decorations.compute([m],(t=>{let{selected:e,panel:i}=t.field(m);return e&&i&&e.from!=e.to?n.Decoration.set([g.range(e.from,e.to)]):n.Decoration.none})),n.hoverTooltip((function(t,e,i){let{diagnostics:n}=t.state.field(m),r=[],s=2e8,o=0;n.between(e-(i<0?1:0),e+(i>0?1:0),((t,n,{spec:a})=>{e>=t&&e<=n&&(t==n||(e>t||i>0)&&(e<n||i<0))&&(r.push(a.diagnostic),s=Math.min(t,s),o=Math.max(n,o))}));let a=t.state.facet(C).tooltipFilter;return a&&(r=a(r,t.state)),r.length?{pos:s,end:o,above:t.state.doc.lineAt(s).to<o,create:()=>({dom:v(t,r)})}:null}),{hideOn:h}),O],H=r.Facet.define({combine:t=>r.combineConfig(t,{hoverTime:300,markerFilter:null,tooltipFilter:null})});e.closeLintPanel=y,e.diagnosticCount=function(t){let e=t.field(m,!1);return e?e.diagnostics.size:0},e.forEachDiagnostic=function(t,e){let i=t.field(m,!1);if(i&&i.diagnostics.size)for(let t=r.RangeSet.iter([i.diagnostics]);t.value;t.next())e(t.value.spec.diagnostic,t.from,t.to)},e.forceLinting=function(t){let e=t.plugin(x);e&&e.force()},e.lintGutter=function(t={}){return[H.of(t),B,I,q,_]},e.lintKeymap=S,e.linter=function(t,e={}){return[C.of({source:t,config:e}),x,V]},e.nextDiagnostic=b,e.openLintPanel=w,e.previousDiagnostic=t=>{let{state:e}=t,i=e.field(m,!1);if(!i)return!1;let n,r,s,o,a=e.selection.main;return i.diagnostics.between(0,e.doc.length,((t,e)=>{e<a.to&&(null==n||n<t)&&(n=t,r=e),(null==s||t>s)&&(s=t,o=e)})),null!=s&&(null!=n||s!=a.from)&&(t.dispatch({selection:{anchor:null!=n?n:s,head:null!=r?r:o},scrollIntoView:!0}),!0)},e.setDiagnostics=u,e.setDiagnosticsEffect=d},8539:(t,e,i)=>{"use strict";var n=i(1506),r=i(9064),s=i(8748);const o="function"==typeof String.prototype.normalize?t=>t.normalize("NFKD"):t=>t;class a{constructor(t,e,i=0,n=t.length,r,s){this.test=s,this.value={from:0,to:0},this.done=!1,this.matches=[],this.buffer="",this.bufferPos=0,this.iter=t.iterRange(i,n),this.bufferStart=i,this.normalize=r?t=>r(o(t)):o,this.query=this.normalize(e)}peek(){if(this.bufferPos==this.buffer.length){if(this.bufferStart+=this.buffer.length,this.iter.next(),this.iter.done)return-1;this.bufferPos=0,this.buffer=this.iter.value}return r.codePointAt(this.buffer,this.bufferPos)}next(){for(;this.matches.length;)this.matches.pop();return this.nextOverlapping()}nextOverlapping(){for(;;){let t=this.peek();if(t<0)return this.done=!0,this;let e=r.fromCodePoint(t),i=this.bufferStart+this.bufferPos;this.bufferPos+=r.codePointSize(t);let n=this.normalize(e);for(let t=0,r=i;;t++){let s=n.charCodeAt(t),o=this.match(s,r,this.bufferPos+this.bufferStart);if(t==n.length-1){if(o)return this.value=o,this;break}r==i&&t<e.length&&e.charCodeAt(t)==s&&r++}}}match(t,e,i){let n=null;for(let e=0;e<this.matches.length;e+=2){let r=this.matches[e],s=!1;this.query.charCodeAt(r)==t&&(r==this.query.length-1?n={from:this.matches[e+1],to:i}:(this.matches[e]++,s=!0)),s||(this.matches.splice(e,2),e-=2)}return this.query.charCodeAt(0)==t&&(1==this.query.length?n={from:e,to:i}:this.matches.push(1,e)),n&&this.test&&!this.test(n.from,n.to,this.buffer,this.bufferStart)&&(n=null),n}}"undefined"!=typeof Symbol&&(a.prototype[Symbol.iterator]=function(){return this});const l={from:-1,to:-1,match:/.*/.exec("")},h="gm"+(null==/x/.unicode?"":"u");class c{constructor(t,e,i,n=0,r=t.length){if(this.text=t,this.to=r,this.curLine="",this.done=!1,this.value=l,/\\[sWDnr]|\n|\r|\[\^/.test(e))return new f(t,e,i,n,r);this.re=new RegExp(e,h+((null==i?void 0:i.ignoreCase)?"i":"")),this.test=null==i?void 0:i.test,this.iter=t.iter();let s=t.lineAt(n);this.curLineStart=s.from,this.matchPos=p(t,n),this.getLine(this.curLineStart)}getLine(t){this.iter.next(t),this.iter.lineBreak?this.curLine="":(this.curLine=this.iter.value,this.curLineStart+this.curLine.length>this.to&&(this.curLine=this.curLine.slice(0,this.to-this.curLineStart)),this.iter.next())}nextLine(){this.curLineStart=this.curLineStart+this.curLine.length+1,this.curLineStart>this.to?this.curLine="":this.getLine(0)}next(){for(let t=this.matchPos-this.curLineStart;;){this.re.lastIndex=t;let e=this.matchPos<=this.to&&this.re.exec(this.curLine);if(e){let i=this.curLineStart+e.index,n=i+e[0].length;if(this.matchPos=p(this.text,n+(i==n?1:0)),i==this.curLineStart+this.curLine.length&&this.nextLine(),(i<n||i>this.value.to)&&(!this.test||this.test(i,n,e)))return this.value={from:i,to:n,match:e},this;t=this.matchPos-this.curLineStart}else{if(!(this.curLineStart+this.curLine.length<this.to))return this.done=!0,this;this.nextLine(),t=0}}}}const u=new WeakMap;class d{constructor(t,e){this.from=t,this.text=e}get to(){return this.from+this.text.length}static get(t,e,i){let n=u.get(t);if(!n||n.from>=i||n.to<=e){let n=new d(e,t.sliceString(e,i));return u.set(t,n),n}if(n.from==e&&n.to==i)return n;let{text:r,from:s}=n;return s>e&&(r=t.sliceString(e,s)+r,s=e),n.to<i&&(r+=t.sliceString(n.to,i)),u.set(t,new d(s,r)),new d(e,r.slice(e-s,i-s))}}class f{constructor(t,e,i,n,r){this.text=t,this.to=r,this.done=!1,this.value=l,this.matchPos=p(t,n),this.re=new RegExp(e,h+((null==i?void 0:i.ignoreCase)?"i":"")),this.test=null==i?void 0:i.test,this.flat=d.get(t,n,this.chunkEnd(n+5e3))}chunkEnd(t){return t>=this.to?this.to:this.text.lineAt(t).to}next(){for(;;){let t=this.re.lastIndex=this.matchPos-this.flat.from,e=this.re.exec(this.flat.text);if(e&&!e[0]&&e.index==t&&(this.re.lastIndex=t+1,e=this.re.exec(this.flat.text)),e){let t=this.flat.from+e.index,i=t+e[0].length;if((this.flat.to>=this.to||e.index+e[0].length<=this.flat.text.length-10)&&(!this.test||this.test(t,i,e)))return this.value={from:t,to:i,match:e},this.matchPos=p(this.text,i+(t==i?1:0)),this}if(this.flat.to==this.to)return this.done=!0,this;this.flat=d.get(this.text,this.flat.from,this.chunkEnd(this.flat.from+2*this.flat.text.length))}}}function p(t,e){if(e>=t.length)return e;let i,n=t.lineAt(e);for(;e<n.to&&(i=n.text.charCodeAt(e-n.from))>=56320&&i<57344;)e++;return e}function m(t){let e=String(t.state.doc.lineAt(t.state.selection.main.head).number),i=s("input",{class:"cm-textfield",name:"line",value:e});function o(){let e=/^([+-])?(\d+)?(:\d+)?(%)?$/.exec(i.value);if(!e)return;let{state:s}=t,o=s.doc.lineAt(s.selection.main.head),[,a,l,h,c]=e,u=h?+h.slice(1):0,d=l?+l:o.number;if(l&&c){let t=d/100;a&&(t=t*("-"==a?-1:1)+o.number/s.doc.lines),d=Math.round(s.doc.lines*t)}else l&&a&&(d=d*("-"==a?-1:1)+o.number);let f=s.doc.line(Math.max(1,Math.min(s.doc.lines,d))),p=r.EditorSelection.cursor(f.from+Math.max(0,Math.min(u,f.length)));t.dispatch({effects:[g.of(!1),n.EditorView.scrollIntoView(p.from,{y:"center"})],selection:p}),t.focus()}return{dom:s("form",{class:"cm-gotoLine",onkeydown:e=>{27==e.keyCode?(e.preventDefault(),t.dispatch({effects:g.of(!1)}),t.focus()):13==e.keyCode&&(e.preventDefault(),o())},onsubmit:t=>{t.preventDefault(),o()}},s("label",t.state.phrase("Go to line"),": ",i)," ",s("button",{class:"cm-button",type:"submit"},t.state.phrase("go")))}}"undefined"!=typeof Symbol&&(c.prototype[Symbol.iterator]=f.prototype[Symbol.iterator]=function(){return this});const g=r.StateEffect.define(),v=r.StateField.define({create:()=>!0,update(t,e){for(let i of e.effects)i.is(g)&&(t=i.value);return t},provide:t=>n.showPanel.from(t,(t=>t?m:null))}),w=t=>{let e=n.getPanel(t,m);if(!e){let i=[g.of(!0)];null==t.state.field(v,!1)&&i.push(r.StateEffect.appendConfig.of([v,y])),t.dispatch({effects:i}),e=n.getPanel(t,m)}return e&&e.dom.querySelector("input").select(),!0},y=n.EditorView.baseTheme({".cm-panel.cm-gotoLine":{padding:"2px 6px 4px","& label":{fontSize:"80%"}}}),b={highlightWordAroundCursor:!1,minSelectionLength:1,maxMatches:100,wholeWords:!1},S=r.Facet.define({combine:t=>r.combineConfig(t,b,{highlightWordAroundCursor:(t,e)=>t||e,minSelectionLength:Math.min,maxMatches:Math.min})}),x=n.Decoration.mark({class:"cm-selectionMatch"}),C=n.Decoration.mark({class:"cm-selectionMatch cm-selectionMatch-main"});function E(t,e,i,n){return!(0!=i&&t(e.sliceDoc(i-1,i))==r.CharCategory.Word||n!=e.doc.length&&t(e.sliceDoc(n,n+1))==r.CharCategory.Word)}function k(t,e,i,n){return t(e.sliceDoc(i,i+1))==r.CharCategory.Word&&t(e.sliceDoc(n-1,n))==r.CharCategory.Word}const A=n.ViewPlugin.fromClass(class{constructor(t){this.decorations=this.getDeco(t)}update(t){(t.selectionSet||t.docChanged||t.viewportChanged)&&(this.decorations=this.getDeco(t.view))}getDeco(t){let e=t.state.facet(S),{state:i}=t,r=i.selection;if(r.ranges.length>1)return n.Decoration.none;let s,o=r.main,l=null;if(o.empty){if(!e.highlightWordAroundCursor)return n.Decoration.none;let t=i.wordAt(o.head);if(!t)return n.Decoration.none;l=i.charCategorizer(o.head),s=i.sliceDoc(t.from,t.to)}else{let t=o.to-o.from;if(t<e.minSelectionLength||t>200)return n.Decoration.none;if(e.wholeWords){if(s=i.sliceDoc(o.from,o.to),l=i.charCategorizer(o.head),!E(l,i,o.from,o.to)||!k(l,i,o.from,o.to))return n.Decoration.none}else if(s=i.sliceDoc(o.from,o.to),!s)return n.Decoration.none}let h=[];for(let r of t.visibleRanges){let t=new a(i.doc,s,r.from,r.to);for(;!t.next().done;){let{from:r,to:s}=t.value;if((!l||E(l,i,r,s))&&(o.empty&&r<=o.from&&s>=o.to?h.push(C.range(r,s)):(r>=o.to||s<=o.from)&&h.push(x.range(r,s)),h.length>e.maxMatches))return n.Decoration.none}}return n.Decoration.set(h)}},{decorations:t=>t.decorations}),T=n.EditorView.baseTheme({".cm-selectionMatch":{backgroundColor:"#99ff7780"},".cm-searchMatch .cm-selectionMatch":{backgroundColor:"transparent"}}),M=({state:t,dispatch:e})=>{let{ranges:i}=t.selection;if(i.some((t=>t.from===t.to)))return(({state:t,dispatch:e})=>{let{selection:i}=t,n=r.EditorSelection.create(i.ranges.map((e=>t.wordAt(e.head)||r.EditorSelection.cursor(e.head))),i.mainIndex);return!n.eq(i)&&(e(t.update({selection:n})),!0)})({state:t,dispatch:e});let s=t.sliceDoc(i[0].from,i[0].to);if(t.selection.ranges.some((e=>t.sliceDoc(e.from,e.to)!=s)))return!1;let o=function(t,e){let{main:i,ranges:n}=t.selection,r=t.wordAt(i.head),s=r&&r.from==i.from&&r.to==i.to;for(let i=!1,r=new a(t.doc,e,n[n.length-1].to);;){if(r.next(),!r.done){if(i&&n.some((t=>t.from==r.value.from)))continue;if(s){let e=t.wordAt(r.value.from);if(!e||e.from!=r.value.from||e.to!=r.value.to)continue}return r.value}if(i)return null;r=new a(t.doc,e,0,Math.max(0,n[n.length-1].from-1)),i=!0}}(t,s);return!!o&&(e(t.update({selection:t.selection.addRange(r.EditorSelection.range(o.from,o.to),!1),effects:n.EditorView.scrollIntoView(o.to)})),!0)},N=r.Facet.define({combine:t=>r.combineConfig(t,{top:!1,caseSensitive:!1,literal:!1,regexp:!1,wholeWord:!1,createPanel:t=>new at(t),scrollToMatch:t=>n.EditorView.scrollIntoView(t)})});class P{constructor(t){this.search=t.search,this.caseSensitive=!!t.caseSensitive,this.literal=!!t.literal,this.regexp=!!t.regexp,this.replace=t.replace||"",this.valid=!!this.search&&(!this.regexp||function(t){try{return new RegExp(t,h),!0}catch(t){return!1}}(this.search)),this.unquoted=this.unquote(this.search),this.wholeWord=!!t.wholeWord}unquote(t){return this.literal?t:t.replace(/\\([nrt\\])/g,((t,e)=>"n"==e?"\n":"r"==e?"\r":"t"==e?"\t":"\\"))}eq(t){return this.search==t.search&&this.replace==t.replace&&this.caseSensitive==t.caseSensitive&&this.regexp==t.regexp&&this.wholeWord==t.wholeWord}create(){return this.regexp?new q(this):new L(this)}getCursor(t,e=0,i){let n=t.doc?t:r.EditorState.create({doc:t});return null==i&&(i=n.doc.length),this.regexp?I(this,n,e,i):D(this,n,e,i)}}class O{constructor(t){this.spec=t}}function D(t,e,i,n){return new a(e.doc,t.unquoted,i,n,t.caseSensitive?void 0:t=>t.toLowerCase(),t.wholeWord?R(e.doc,e.charCategorizer(e.selection.main.head)):void 0)}function R(t,e){return(i,n,s,o)=>((o>i||o+s.length<n)&&(o=Math.max(0,i-2),s=t.sliceString(o,Math.min(t.length,n+2))),!(e(B(s,i-o))==r.CharCategory.Word&&e(F(s,i-o))==r.CharCategory.Word||e(F(s,n-o))==r.CharCategory.Word&&e(B(s,n-o))==r.CharCategory.Word))}class L extends O{constructor(t){super(t)}nextMatch(t,e,i){let n=D(this.spec,t,i,t.doc.length).nextOverlapping();return n.done&&(n=D(this.spec,t,0,e).nextOverlapping()),n.done?null:n.value}prevMatchInRange(t,e,i){for(let n=i;;){let i=Math.max(e,n-1e4-this.spec.unquoted.length),r=D(this.spec,t,i,n),s=null;for(;!r.nextOverlapping().done;)s=r.value;if(s)return s;if(i==e)return null;n-=1e4}}prevMatch(t,e,i){return this.prevMatchInRange(t,0,e)||this.prevMatchInRange(t,i,t.doc.length)}getReplacement(t){return this.spec.unquote(this.spec.replace)}matchAll(t,e){let i=D(this.spec,t,0,t.doc.length),n=[];for(;!i.next().done;){if(n.length>=e)return null;n.push(i.value)}return n}highlight(t,e,i,n){let r=D(this.spec,t,Math.max(0,e-this.spec.unquoted.length),Math.min(i+this.spec.unquoted.length,t.doc.length));for(;!r.next().done;)n(r.value.from,r.value.to)}}function I(t,e,i,n){return new c(e.doc,t.search,{ignoreCase:!t.caseSensitive,test:t.wholeWord?_(e.charCategorizer(e.selection.main.head)):void 0},i,n)}function B(t,e){return t.slice(r.findClusterBreak(t,e,!1),e)}function F(t,e){return t.slice(e,r.findClusterBreak(t,e))}function _(t){return(e,i,n)=>!n[0].length||(t(B(n.input,n.index))!=r.CharCategory.Word||t(F(n.input,n.index))!=r.CharCategory.Word)&&(t(F(n.input,n.index+n[0].length))!=r.CharCategory.Word||t(B(n.input,n.index+n[0].length))!=r.CharCategory.Word)}class q extends O{nextMatch(t,e,i){let n=I(this.spec,t,i,t.doc.length).next();return n.done&&(n=I(this.spec,t,0,e).next()),n.done?null:n.value}prevMatchInRange(t,e,i){for(let n=1;;n++){let r=Math.max(e,i-1e4*n),s=I(this.spec,t,r,i),o=null;for(;!s.next().done;)o=s.value;if(o&&(r==e||o.from>r+10))return o;if(r==e)return null}}prevMatch(t,e,i){return this.prevMatchInRange(t,0,e)||this.prevMatchInRange(t,i,t.doc.length)}getReplacement(t){return this.spec.unquote(this.spec.replace).replace(/\$([$&\d+])/g,((e,i)=>"$"==i?"$":"&"==i?t.match[0]:"0"!=i&&+i<t.match.length?t.match[i]:e))}matchAll(t,e){let i=I(this.spec,t,0,t.doc.length),n=[];for(;!i.next().done;){if(n.length>=e)return null;n.push(i.value)}return n}highlight(t,e,i,n){let r=I(this.spec,t,Math.max(0,e-250),Math.min(i+250,t.doc.length));for(;!r.next().done;)n(r.value.from,r.value.to)}}const V=r.StateEffect.define(),H=r.StateEffect.define(),W=r.StateField.define({create:t=>new z(et(t).create(),null),update(t,e){for(let i of e.effects)i.is(V)?t=new z(i.value.create(),t.panel):i.is(H)&&(t=new z(t.query,i.value?tt:null));return t},provide:t=>n.showPanel.from(t,(t=>t.panel))});class z{constructor(t,e){this.query=t,this.panel=e}}const j=n.Decoration.mark({class:"cm-searchMatch"}),U=n.Decoration.mark({class:"cm-searchMatch cm-searchMatch-selected"}),K=n.ViewPlugin.fromClass(class{constructor(t){this.view=t,this.decorations=this.highlight(t.state.field(W))}update(t){let e=t.state.field(W);(e!=t.startState.field(W)||t.docChanged||t.selectionSet||t.viewportChanged)&&(this.decorations=this.highlight(e))}highlight({query:t,panel:e}){if(!e||!t.spec.valid)return n.Decoration.none;let{view:i}=this,s=new r.RangeSetBuilder;for(let e=0,n=i.visibleRanges,r=n.length;e<r;e++){let{from:o,to:a}=n[e];for(;e<r-1&&a>n[e+1].from-500;)a=n[++e].to;t.highlight(i.state,o,a,((t,e)=>{let n=i.state.selection.ranges.some((i=>i.from==t&&i.to==e));s.add(t,e,n?U:j)}))}return s.finish()}},{decorations:t=>t.decorations});function G(t){return e=>{let i=e.state.field(W,!1);return i&&i.query.spec.valid?t(e,i):rt(e)}}const $=G(((t,{query:e})=>{let{to:i}=t.state.selection.main,n=e.nextMatch(t.state,i,i);if(!n)return!1;let s=r.EditorSelection.single(n.from,n.to),o=t.state.facet(N);return t.dispatch({selection:s,effects:[ut(t,n),o.scrollToMatch(s.main,t)],userEvent:"select.search"}),nt(t),!0})),Y=G(((t,{query:e})=>{let{state:i}=t,{from:n}=i.selection.main,s=e.prevMatch(i,n,n);if(!s)return!1;let o=r.EditorSelection.single(s.from,s.to),a=t.state.facet(N);return t.dispatch({selection:o,effects:[ut(t,s),a.scrollToMatch(o.main,t)],userEvent:"select.search"}),nt(t),!0})),J=G(((t,{query:e})=>{let i=e.matchAll(t.state,1e3);return!(!i||!i.length||(t.dispatch({selection:r.EditorSelection.create(i.map((t=>r.EditorSelection.range(t.from,t.to)))),userEvent:"select.search.matches"}),0))})),X=({state:t,dispatch:e})=>{let i=t.selection;if(i.ranges.length>1||i.main.empty)return!1;let{from:n,to:s}=i.main,o=[],l=0;for(let e=new a(t.doc,t.sliceDoc(n,s));!e.next().done;){if(o.length>1e3)return!1;e.value.from==n&&(l=o.length),o.push(r.EditorSelection.range(e.value.from,e.value.to))}return e(t.update({selection:r.EditorSelection.create(o,l),userEvent:"select.search.matches"})),!0},Z=G(((t,{query:e})=>{let{state:i}=t,{from:s,to:o}=i.selection.main;if(i.readOnly)return!1;let a=e.nextMatch(i,s,s);if(!a)return!1;let l,h,c=[],u=[];if(a.from==s&&a.to==o&&(h=i.toText(e.getReplacement(a)),c.push({from:a.from,to:a.to,insert:h}),a=e.nextMatch(i,a.from,a.to),u.push(n.EditorView.announce.of(i.phrase("replaced match on line $",i.doc.lineAt(s).number)+"."))),a){let e=0==c.length||c[0].from>=a.to?0:a.to-a.from-h.length;l=r.EditorSelection.single(a.from-e,a.to-e),u.push(ut(t,a)),u.push(i.facet(N).scrollToMatch(l.main,t))}return t.dispatch({changes:c,selection:l,effects:u,userEvent:"input.replace"}),!0})),Q=G(((t,{query:e})=>{if(t.state.readOnly)return!1;let i=e.matchAll(t.state,1e9).map((t=>{let{from:i,to:n}=t;return{from:i,to:n,insert:e.getReplacement(t)}}));if(!i.length)return!1;let r=t.state.phrase("replaced $ matches",i.length)+".";return t.dispatch({changes:i,effects:n.EditorView.announce.of(r),userEvent:"input.replace.all"}),!0}));function tt(t){return t.state.facet(N).createPanel(t)}function et(t,e){var i,n,r,s,o;let a=t.selection.main,l=a.empty||a.to>a.from+100?"":t.sliceDoc(a.from,a.to);if(e&&!l)return e;let h=t.facet(N);return new P({search:(null!==(i=null==e?void 0:e.literal)&&void 0!==i?i:h.literal)?l:l.replace(/\n/g,"\\n"),caseSensitive:null!==(n=null==e?void 0:e.caseSensitive)&&void 0!==n?n:h.caseSensitive,literal:null!==(r=null==e?void 0:e.literal)&&void 0!==r?r:h.literal,regexp:null!==(s=null==e?void 0:e.regexp)&&void 0!==s?s:h.regexp,wholeWord:null!==(o=null==e?void 0:e.wholeWord)&&void 0!==o?o:h.wholeWord})}function it(t){let e=n.getPanel(t,tt);return e&&e.dom.querySelector("[main-field]")}function nt(t){let e=it(t);e&&e==t.root.activeElement&&e.select()}const rt=t=>{let e=t.state.field(W,!1);if(e&&e.panel){let i=it(t);if(i&&i!=t.root.activeElement){let n=et(t.state,e.query.spec);n.valid&&t.dispatch({effects:V.of(n)}),i.focus(),i.select()}}else t.dispatch({effects:[H.of(!0),e?V.of(et(t.state,e.query.spec)):r.StateEffect.appendConfig.of(ft)]});return!0},st=t=>{let e=t.state.field(W,!1);if(!e||!e.panel)return!1;let i=n.getPanel(t,tt);return i&&i.dom.contains(t.root.activeElement)&&t.focus(),t.dispatch({effects:H.of(!1)}),!0},ot=[{key:"Mod-f",run:rt,scope:"editor search-panel"},{key:"F3",run:$,shift:Y,scope:"editor search-panel",preventDefault:!0},{key:"Mod-g",run:$,shift:Y,scope:"editor search-panel",preventDefault:!0},{key:"Escape",run:st,scope:"editor search-panel"},{key:"Mod-Shift-l",run:X},{key:"Mod-Alt-g",run:w},{key:"Mod-d",run:M,preventDefault:!0}];class at{constructor(t){this.view=t;let e=this.query=t.state.field(W).query.spec;function i(t,e,i){return s("button",{class:"cm-button",name:t,onclick:e,type:"button"},i)}this.commit=this.commit.bind(this),this.searchField=s("input",{value:e.search,placeholder:lt(t,"Find"),"aria-label":lt(t,"Find"),class:"cm-textfield",name:"search",form:"","main-field":"true",onchange:this.commit,onkeyup:this.commit}),this.replaceField=s("input",{value:e.replace,placeholder:lt(t,"Replace"),"aria-label":lt(t,"Replace"),class:"cm-textfield",name:"replace",form:"",onchange:this.commit,onkeyup:this.commit}),this.caseField=s("input",{type:"checkbox",name:"case",form:"",checked:e.caseSensitive,onchange:this.commit}),this.reField=s("input",{type:"checkbox",name:"re",form:"",checked:e.regexp,onchange:this.commit}),this.wordField=s("input",{type:"checkbox",name:"word",form:"",checked:e.wholeWord,onchange:this.commit}),this.dom=s("div",{onkeydown:t=>this.keydown(t),class:"cm-search"},[this.searchField,i("next",(()=>$(t)),[lt(t,"next")]),i("prev",(()=>Y(t)),[lt(t,"previous")]),i("select",(()=>J(t)),[lt(t,"all")]),s("label",null,[this.caseField,lt(t,"match case")]),s("label",null,[this.reField,lt(t,"regexp")]),s("label",null,[this.wordField,lt(t,"by word")]),...t.state.readOnly?[]:[s("br"),this.replaceField,i("replace",(()=>Z(t)),[lt(t,"replace")]),i("replaceAll",(()=>Q(t)),[lt(t,"replace all")])],s("button",{name:"close",onclick:()=>st(t),"aria-label":lt(t,"close"),type:"button"},["×"])])}commit(){let t=new P({search:this.searchField.value,caseSensitive:this.caseField.checked,regexp:this.reField.checked,wholeWord:this.wordField.checked,replace:this.replaceField.value});t.eq(this.query)||(this.query=t,this.view.dispatch({effects:V.of(t)}))}keydown(t){n.runScopeHandlers(this.view,t,"search-panel")?t.preventDefault():13==t.keyCode&&t.target==this.searchField?(t.preventDefault(),(t.shiftKey?Y:$)(this.view)):13==t.keyCode&&t.target==this.replaceField&&(t.preventDefault(),Z(this.view))}update(t){for(let e of t.transactions)for(let t of e.effects)t.is(V)&&!t.value.eq(this.query)&&this.setQuery(t.value)}setQuery(t){this.query=t,this.searchField.value=t.search,this.replaceField.value=t.replace,this.caseField.checked=t.caseSensitive,this.reField.checked=t.regexp,this.wordField.checked=t.wholeWord}mount(){this.searchField.select()}get pos(){return 80}get top(){return this.view.state.facet(N).top}}function lt(t,e){return t.state.phrase(e)}const ht=30,ct=/[\s\.,:;?!]/;function ut(t,{from:e,to:i}){let r=t.state.doc.lineAt(e),s=t.state.doc.lineAt(i).to,o=Math.max(r.from,e-ht),a=Math.min(s,i+ht),l=t.state.sliceDoc(o,a);if(o!=r.from)for(let t=0;t<ht;t++)if(!ct.test(l[t+1])&&ct.test(l[t])){l=l.slice(t);break}if(a!=s)for(let t=l.length-1;t>l.length-ht;t--)if(!ct.test(l[t-1])&&ct.test(l[t])){l=l.slice(0,t);break}return n.EditorView.announce.of(`${t.state.phrase("current match")}. ${l} ${t.state.phrase("on line")} ${r.number}.`)}const dt=n.EditorView.baseTheme({".cm-panel.cm-search":{padding:"2px 6px 4px",position:"relative","& [name=close]":{position:"absolute",top:"0",right:"4px",backgroundColor:"inherit",border:"none",font:"inherit",padding:0,margin:0},"& input, & button, & label":{margin:".2em .6em .2em 0"},"& input[type=checkbox]":{marginRight:".2em"},"& label":{fontSize:"80%",whiteSpace:"pre"}},"&light .cm-searchMatch":{backgroundColor:"#ffff0054"},"&dark .cm-searchMatch":{backgroundColor:"#00ffff8a"},"&light .cm-searchMatch-selected":{backgroundColor:"#ff6a0054"},"&dark .cm-searchMatch-selected":{backgroundColor:"#ff00ff8a"}}),ft=[W,r.Prec.low(K),dt];e.RegExpCursor=c,e.SearchCursor=a,e.SearchQuery=P,e.closeSearchPanel=st,e.findNext=$,e.findPrevious=Y,e.getSearchQuery=function(t){let e=t.field(W,!1);return e?e.query.spec:et(t)},e.gotoLine=w,e.highlightSelectionMatches=function(t){let e=[T,A];return t&&e.push(S.of(t)),e},e.openSearchPanel=rt,e.replaceAll=Q,e.replaceNext=Z,e.search=function(t){return t?[N.of(t),ft]:ft},e.searchKeymap=ot,e.searchPanelOpen=function(t){var e;return null!=(null===(e=t.field(W,!1))||void 0===e?void 0:e.panel)},e.selectMatches=J,e.selectNextOccurrence=M,e.selectSelectionMatches=X,e.setSearchQuery=V},9064:(t,e)=>{"use strict";class i{lineAt(t){if(t<0||t>this.length)throw new RangeError(`Invalid position ${t} in document of length ${this.length}`);return this.lineInner(t,!1,1,0)}line(t){if(t<1||t>this.lines)throw new RangeError(`Invalid line number ${t} in ${this.lines}-line document`);return this.lineInner(t,!0,1,0)}replace(t,e,i){[t,e]=u(this,t,e);let n=[];return this.decompose(0,t,n,2),i.length&&i.decompose(0,i.length,n,3),this.decompose(e,this.length,n,1),r.from(n,this.length-(e-t)+i.length)}append(t){return this.replace(this.length,this.length,t)}slice(t,e=this.length){[t,e]=u(this,t,e);let i=[];return this.decompose(t,e,i,0),r.from(i,e-t)}eq(t){if(t==this)return!0;if(t.length!=this.length||t.lines!=this.lines)return!1;let e=this.scanIdentical(t,1),i=this.length-this.scanIdentical(t,-1),n=new a(this),r=new a(t);for(let t=e,s=e;;){if(n.next(t),r.next(t),t=0,n.lineBreak!=r.lineBreak||n.done!=r.done||n.value!=r.value)return!1;if(s+=n.value.length,n.done||s>=i)return!0}}iter(t=1){return new a(this,t)}iterRange(t,e=this.length){return new l(this,t,e)}iterLines(t,e){let i;if(null==t)i=this.iter();else{null==e&&(e=this.lines+1);let n=this.line(t).from;i=this.iterRange(n,Math.max(n,e==this.lines+1?this.length:e<=1?0:this.line(e-1).to))}return new h(i)}toString(){return this.sliceString(0)}toJSON(){let t=[];return this.flatten(t),t}constructor(){}static of(t){if(0==t.length)throw new RangeError("A document must have at least one line");return 1!=t.length||t[0]?t.length<=32?new n(t):r.from(n.split(t,[])):i.empty}}class n extends i{constructor(t,e=function(t){let e=-1;for(let i of t)e+=i.length+1;return e}(t)){super(),this.text=t,this.length=e}get lines(){return this.text.length}get children(){return null}lineInner(t,e,i,n){for(let r=0;;r++){let s=this.text[r],o=n+s.length;if((e?i:o)>=t)return new c(n,o,i,s);n=o+1,i++}}decompose(t,e,i,r){let a=t<=0&&e>=this.length?this:new n(o(this.text,t,e),Math.min(e,this.length)-Math.max(0,t));if(1&r){let t=i.pop(),e=s(a.text,t.text.slice(),0,a.length);if(e.length<=32)i.push(new n(e,t.length+a.length));else{let t=e.length>>1;i.push(new n(e.slice(0,t)),new n(e.slice(t)))}}else i.push(a)}replace(t,e,i){if(!(i instanceof n))return super.replace(t,e,i);[t,e]=u(this,t,e);let a=s(this.text,s(i.text,o(this.text,0,t)),e),l=this.length+i.length-(e-t);return a.length<=32?new n(a,l):r.from(n.split(a,[]),l)}sliceString(t,e=this.length,i="\n"){[t,e]=u(this,t,e);let n="";for(let r=0,s=0;r<=e&&s<this.text.length;s++){let o=this.text[s],a=r+o.length;r>t&&s&&(n+=i),t<a&&e>r&&(n+=o.slice(Math.max(0,t-r),e-r)),r=a+1}return n}flatten(t){for(let e of this.text)t.push(e)}scanIdentical(){return 0}static split(t,e){let i=[],r=-1;for(let s of t)i.push(s),r+=s.length+1,32==i.length&&(e.push(new n(i,r)),i=[],r=-1);return r>-1&&e.push(new n(i,r)),e}}class r extends i{constructor(t,e){super(),this.children=t,this.length=e,this.lines=0;for(let e of t)this.lines+=e.lines}lineInner(t,e,i,n){for(let r=0;;r++){let s=this.children[r],o=n+s.length,a=i+s.lines-1;if((e?a:o)>=t)return s.lineInner(t,e,i,n);n=o+1,i=a+1}}decompose(t,e,i,n){for(let r=0,s=0;s<=e&&r<this.children.length;r++){let o=this.children[r],a=s+o.length;if(t<=a&&e>=s){let r=n&((s<=t?1:0)|(a>=e?2:0));s>=t&&a<=e&&!r?i.push(o):o.decompose(t-s,e-s,i,r)}s=a+1}}replace(t,e,i){if([t,e]=u(this,t,e),i.lines<this.lines)for(let n=0,s=0;n<this.children.length;n++){let o=this.children[n],a=s+o.length;if(t>=s&&e<=a){let l=o.replace(t-s,e-s,i),h=this.lines-o.lines+l.lines;if(l.lines<h>>4&&l.lines>h>>6){let s=this.children.slice();return s[n]=l,new r(s,this.length-(e-t)+i.length)}return super.replace(s,a,l)}s=a+1}return super.replace(t,e,i)}sliceString(t,e=this.length,i="\n"){[t,e]=u(this,t,e);let n="";for(let r=0,s=0;r<this.children.length&&s<=e;r++){let o=this.children[r],a=s+o.length;s>t&&r&&(n+=i),t<a&&e>s&&(n+=o.sliceString(t-s,e-s,i)),s=a+1}return n}flatten(t){for(let e of this.children)e.flatten(t)}scanIdentical(t,e){if(!(t instanceof r))return 0;let i=0,[n,s,o,a]=e>0?[0,0,this.children.length,t.children.length]:[this.children.length-1,t.children.length-1,-1,-1];for(;;n+=e,s+=e){if(n==o||s==a)return i;let r=this.children[n],l=t.children[s];if(r!=l)return i+r.scanIdentical(l,e);i+=r.length+1}}static from(t,e=t.reduce(((t,e)=>t+e.length+1),-1)){let i=0;for(let e of t)i+=e.lines;if(i<32){let i=[];for(let e of t)e.flatten(i);return new n(i,e)}let s=Math.max(32,i>>5),o=s<<1,a=s>>1,l=[],h=0,c=-1,u=[];function d(t){let e;if(t.lines>o&&t instanceof r)for(let e of t.children)d(e);else t.lines>a&&(h>a||!h)?(f(),l.push(t)):t instanceof n&&h&&(e=u[u.length-1])instanceof n&&t.lines+e.lines<=32?(h+=t.lines,c+=t.length+1,u[u.length-1]=new n(e.text.concat(t.text),e.length+1+t.length)):(h+t.lines>s&&f(),h+=t.lines,c+=t.length+1,u.push(t))}function f(){0!=h&&(l.push(1==u.length?u[0]:r.from(u,c)),c=-1,h=u.length=0)}for(let e of t)d(e);return f(),1==l.length?l[0]:new r(l,e)}}function s(t,e,i=0,n=1e9){for(let r=0,s=0,o=!0;s<t.length&&r<=n;s++){let a=t[s],l=r+a.length;l>=i&&(l>n&&(a=a.slice(0,n-r)),r<i&&(a=a.slice(i-r)),o?(e[e.length-1]+=a,o=!1):e.push(a)),r=l+1}return e}function o(t,e,i){return s(t,[""],e,i)}i.empty=new n([""],0);class a{constructor(t,e=1){this.dir=e,this.done=!1,this.lineBreak=!1,this.value="",this.nodes=[t],this.offsets=[e>0?1:(t instanceof n?t.text.length:t.children.length)<<1]}nextInner(t,e){for(this.done=this.lineBreak=!1;;){let i=this.nodes.length-1,r=this.nodes[i],s=this.offsets[i],o=s>>1,a=r instanceof n?r.text.length:r.children.length;if(o==(e>0?a:0)){if(0==i)return this.done=!0,this.value="",this;e>0&&this.offsets[i-1]++,this.nodes.pop(),this.offsets.pop()}else if((1&s)==(e>0?0:1)){if(this.offsets[i]+=e,0==t)return this.lineBreak=!0,this.value="\n",this;t--}else if(r instanceof n){let n=r.text[o+(e<0?-1:0)];if(this.offsets[i]+=e,n.length>Math.max(0,t))return this.value=0==t?n:e>0?n.slice(t):n.slice(0,n.length-t),this;t-=n.length}else{let s=r.children[o+(e<0?-1:0)];t>s.length?(t-=s.length,this.offsets[i]+=e):(e<0&&this.offsets[i]--,this.nodes.push(s),this.offsets.push(e>0?1:(s instanceof n?s.text.length:s.children.length)<<1))}}}next(t=0){return t<0&&(this.nextInner(-t,-this.dir),t=this.value.length),this.nextInner(t,this.dir)}}class l{constructor(t,e,i){this.value="",this.done=!1,this.cursor=new a(t,e>i?-1:1),this.pos=e>i?t.length:0,this.from=Math.min(e,i),this.to=Math.max(e,i)}nextInner(t,e){if(e<0?this.pos<=this.from:this.pos>=this.to)return this.value="",this.done=!0,this;t+=Math.max(0,e<0?this.pos-this.to:this.from-this.pos);let i=e<0?this.pos-this.from:this.to-this.pos;t>i&&(t=i),i-=t;let{value:n}=this.cursor.next(t);return this.pos+=(n.length+t)*e,this.value=n.length<=i?n:e<0?n.slice(n.length-i):n.slice(0,i),this.done=!this.value,this}next(t=0){return t<0?t=Math.max(t,this.from-this.pos):t>0&&(t=Math.min(t,this.to-this.pos)),this.nextInner(t,this.cursor.dir)}get lineBreak(){return this.cursor.lineBreak&&""!=this.value}}class h{constructor(t){this.inner=t,this.afterBreak=!0,this.value="",this.done=!1}next(t=0){let{done:e,lineBreak:i,value:n}=this.inner.next(t);return e&&this.afterBreak?(this.value="",this.afterBreak=!1):e?(this.done=!0,this.value=""):i?this.afterBreak?this.value="":(this.afterBreak=!0,this.next()):(this.value=n,this.afterBreak=!1),this}get lineBreak(){return!1}}"undefined"!=typeof Symbol&&(i.prototype[Symbol.iterator]=function(){return this.iter()},a.prototype[Symbol.iterator]=l.prototype[Symbol.iterator]=h.prototype[Symbol.iterator]=function(){return this});class c{constructor(t,e,i,n){this.from=t,this.to=e,this.number=i,this.text=n}get length(){return this.to-this.from}}function u(t,e,i){return[e=Math.max(0,Math.min(t.length,e)),Math.max(e,Math.min(t.length,i))]}let d="lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((t=>t?parseInt(t,36):1));for(let t=1;t<d.length;t++)d[t]+=d[t-1];function f(t){for(let e=1;e<d.length;e+=2)if(d[e]>t)return d[e-1]<=t;return!1}function p(t){return t>=127462&&t<=127487}const m=8205;function g(t,e,i=!0,n=!0){return(i?v:w)(t,e,n)}function v(t,e,i){if(e==t.length)return e;e&&y(t.charCodeAt(e))&&b(t.charCodeAt(e-1))&&e--;let n=S(t,e);for(e+=x(n);e<t.length;){let r=S(t,e);if(n==m||r==m||i&&f(r))e+=x(r),n=r;else{if(!p(r))break;{let i=0,n=e-2;for(;n>=0&&p(S(t,n));)i++,n-=2;if(i%2==0)break;e+=2}}}return e}function w(t,e,i){for(;e>0;){let n=v(t,e-2,i);if(n<e)return n;e--}return 0}function y(t){return t>=56320&&t<57344}function b(t){return t>=55296&&t<56320}function S(t,e){let i=t.charCodeAt(e);if(!b(i)||e+1==t.length)return i;let n=t.charCodeAt(e+1);return y(n)?n-56320+(i-55296<<10)+65536:i}function x(t){return t<65536?1:2}const C=/\r\n?|\n/;var E;e.MapMode=void 0,(E=e.MapMode||(e.MapMode={}))[E.Simple=0]="Simple",E[E.TrackDel=1]="TrackDel",E[E.TrackBefore=2]="TrackBefore",E[E.TrackAfter=3]="TrackAfter";class k{constructor(t){this.sections=t}get length(){let t=0;for(let e=0;e<this.sections.length;e+=2)t+=this.sections[e];return t}get newLength(){let t=0;for(let e=0;e<this.sections.length;e+=2){let i=this.sections[e+1];t+=i<0?this.sections[e]:i}return t}get empty(){return 0==this.sections.length||2==this.sections.length&&this.sections[1]<0}iterGaps(t){for(let e=0,i=0,n=0;e<this.sections.length;){let r=this.sections[e++],s=this.sections[e++];s<0?(t(i,n,r),n+=r):n+=s,i+=r}}iterChangedRanges(t,e=!1){N(this,t,e)}get invertedDesc(){let t=[];for(let e=0;e<this.sections.length;){let i=this.sections[e++],n=this.sections[e++];n<0?t.push(i,n):t.push(n,i)}return new k(t)}composeDesc(t){return this.empty?t:t.empty?this:O(this,t)}mapDesc(t,e=!1){return t.empty?this:P(this,t,e)}mapPos(t,i=-1,n=e.MapMode.Simple){let r=0,s=0;for(let o=0;o<this.sections.length;){let a=this.sections[o++],l=this.sections[o++],h=r+a;if(l<0){if(h>t)return s+(t-r);s+=a}else{if(n!=e.MapMode.Simple&&h>=t&&(n==e.MapMode.TrackDel&&r<t&&h>t||n==e.MapMode.TrackBefore&&r<t||n==e.MapMode.TrackAfter&&h>t))return null;if(h>t||h==t&&i<0&&!a)return t==r||i<0?s:s+l;s+=l}r=h}if(t>r)throw new RangeError(`Position ${t} is out of range for changeset of length ${r}`);return s}touchesRange(t,e=t){for(let i=0,n=0;i<this.sections.length&&n<=e;){let r=n+this.sections[i++];if(this.sections[i++]>=0&&n<=e&&r>=t)return!(n<t&&r>e)||"cover";n=r}return!1}toString(){let t="";for(let e=0;e<this.sections.length;){let i=this.sections[e++],n=this.sections[e++];t+=(t?" ":"")+i+(n>=0?":"+n:"")}return t}toJSON(){return this.sections}static fromJSON(t){if(!Array.isArray(t)||t.length%2||t.some((t=>"number"!=typeof t)))throw new RangeError("Invalid JSON representation of ChangeDesc");return new k(t)}static create(t){return new k(t)}}class A extends k{constructor(t,e){super(t),this.inserted=e}apply(t){if(this.length!=t.length)throw new RangeError("Applying change set to a document with the wrong length");return N(this,((e,i,n,r,s)=>t=t.replace(n,n+(i-e),s)),!1),t}mapDesc(t,e=!1){return P(this,t,e,!0)}invert(t){let e=this.sections.slice(),n=[];for(let r=0,s=0;r<e.length;r+=2){let o=e[r],a=e[r+1];if(a>=0){e[r]=a,e[r+1]=o;let l=r>>1;for(;n.length<l;)n.push(i.empty);n.push(o?t.slice(s,s+o):i.empty)}s+=o}return new A(e,n)}compose(t){return this.empty?t:t.empty?this:O(this,t,!0)}map(t,e=!1){return t.empty?this:P(this,t,e,!0)}iterChanges(t,e=!1){N(this,t,e)}get desc(){return k.create(this.sections)}filter(t){let e=[],i=[],n=[],r=new D(this);t:for(let s=0,o=0;;){let a=s==t.length?1e9:t[s++];for(;o<a||o==a&&0==r.len;){if(r.done)break t;let t=Math.min(r.len,a-o);T(n,t,-1);let s=-1==r.ins?-1:0==r.off?r.ins:0;T(e,t,s),s>0&&M(i,e,r.text),r.forward(t),o+=t}let l=t[s++];for(;o<l;){if(r.done)break t;let t=Math.min(r.len,l-o);T(e,t,-1),T(n,t,-1==r.ins?-1:0==r.off?r.ins:0),r.forward(t),o+=t}}return{changes:new A(e,i),filtered:k.create(n)}}toJSON(){let t=[];for(let e=0;e<this.sections.length;e+=2){let i=this.sections[e],n=this.sections[e+1];n<0?t.push(i):0==n?t.push([i]):t.push([i].concat(this.inserted[e>>1].toJSON()))}return t}static of(t,e,n){let r=[],s=[],o=0,a=null;function l(t=!1){if(!t&&!r.length)return;o<e&&T(r,e-o,-1);let i=new A(r,s);a=a?a.compose(i.map(a)):i,r=[],s=[],o=0}return function t(h){if(Array.isArray(h))for(let e of h)t(e);else if(h instanceof A){if(h.length!=e)throw new RangeError(`Mismatched change set length (got ${h.length}, expected ${e})`);l(),a=a?a.compose(h.map(a)):h}else{let{from:t,to:a=t,insert:c}=h;if(t>a||t<0||a>e)throw new RangeError(`Invalid change range ${t} to ${a} (in doc of length ${e})`);let u=c?"string"==typeof c?i.of(c.split(n||C)):c:i.empty,d=u.length;if(t==a&&0==d)return;t<o&&l(),t>o&&T(r,t-o,-1),T(r,a-t,d),M(s,r,u),o=a}}(t),l(!a),a}static empty(t){return new A(t?[t,-1]:[],[])}static fromJSON(t){if(!Array.isArray(t))throw new RangeError("Invalid JSON representation of ChangeSet");let e=[],n=[];for(let r=0;r<t.length;r++){let s=t[r];if("number"==typeof s)e.push(s,-1);else{if(!Array.isArray(s)||"number"!=typeof s[0]||s.some(((t,e)=>e&&"string"!=typeof t)))throw new RangeError("Invalid JSON representation of ChangeSet");if(1==s.length)e.push(s[0],0);else{for(;n.length<r;)n.push(i.empty);n[r]=i.of(s.slice(1)),e.push(s[0],n[r].length)}}}return new A(e,n)}static createSet(t,e){return new A(t,e)}}function T(t,e,i,n=!1){if(0==e&&i<=0)return;let r=t.length-2;r>=0&&i<=0&&i==t[r+1]?t[r]+=e:0==e&&0==t[r]?t[r+1]+=i:n?(t[r]+=e,t[r+1]+=i):t.push(e,i)}function M(t,e,n){if(0==n.length)return;let r=e.length-2>>1;if(r<t.length)t[t.length-1]=t[t.length-1].append(n);else{for(;t.length<r;)t.push(i.empty);t.push(n)}}function N(t,e,n){let r=t.inserted;for(let s=0,o=0,a=0;a<t.sections.length;){let l=t.sections[a++],h=t.sections[a++];if(h<0)s+=l,o+=l;else{let c=s,u=o,d=i.empty;for(;c+=l,u+=h,h&&r&&(d=d.append(r[a-2>>1])),!(n||a==t.sections.length||t.sections[a+1]<0);)l=t.sections[a++],h=t.sections[a++];e(s,c,o,u,d),s=c,o=u}}}function P(t,e,i,n=!1){let r=[],s=n?[]:null,o=new D(t),a=new D(e);for(let t=-1;;)if(-1==o.ins&&-1==a.ins){let t=Math.min(o.len,a.len);T(r,t,-1),o.forward(t),a.forward(t)}else if(a.ins>=0&&(o.ins<0||t==o.i||0==o.off&&(a.len<o.len||a.len==o.len&&!i))){let e=a.len;for(T(r,a.ins,-1);e;){let i=Math.min(o.len,e);o.ins>=0&&t<o.i&&o.len<=i&&(T(r,0,o.ins),s&&M(s,r,o.text),t=o.i),o.forward(i),e-=i}a.next()}else{if(!(o.ins>=0)){if(o.done&&a.done)return s?A.createSet(r,s):k.create(r);throw new Error("Mismatched change set lengths")}{let e=0,i=o.len;for(;i;)if(-1==a.ins){let t=Math.min(i,a.len);e+=t,i-=t,a.forward(t)}else{if(!(0==a.ins&&a.len<i))break;i-=a.len,a.next()}T(r,e,t<o.i?o.ins:0),s&&t<o.i&&M(s,r,o.text),t=o.i,o.forward(o.len-i)}}}function O(t,e,i=!1){let n=[],r=i?[]:null,s=new D(t),o=new D(e);for(let t=!1;;){if(s.done&&o.done)return r?A.createSet(n,r):k.create(n);if(0==s.ins)T(n,s.len,0,t),s.next();else if(0!=o.len||o.done){if(s.done||o.done)throw new Error("Mismatched change set lengths");{let e=Math.min(s.len2,o.len),i=n.length;if(-1==s.ins){let i=-1==o.ins?-1:o.off?0:o.ins;T(n,e,i,t),r&&i&&M(r,n,o.text)}else-1==o.ins?(T(n,s.off?0:s.len,e,t),r&&M(r,n,s.textBit(e))):(T(n,s.off?0:s.len,o.off?0:o.ins,t),r&&!o.off&&M(r,n,o.text));t=(s.ins>e||o.ins>=0&&o.len>e)&&(t||n.length>i),s.forward2(e),o.forward(e)}}else T(n,0,o.ins,t),r&&M(r,n,o.text),o.next()}}class D{constructor(t){this.set=t,this.i=0,this.next()}next(){let{sections:t}=this.set;this.i<t.length?(this.len=t[this.i++],this.ins=t[this.i++]):(this.len=0,this.ins=-2),this.off=0}get done(){return-2==this.ins}get len2(){return this.ins<0?this.len:this.ins}get text(){let{inserted:t}=this.set,e=this.i-2>>1;return e>=t.length?i.empty:t[e]}textBit(t){let{inserted:e}=this.set,n=this.i-2>>1;return n>=e.length&&!t?i.empty:e[n].slice(this.off,null==t?void 0:this.off+t)}forward(t){t==this.len?this.next():(this.len-=t,this.off+=t)}forward2(t){-1==this.ins?this.forward(t):t==this.ins?this.next():(this.ins-=t,this.off+=t)}}class R{constructor(t,e,i){this.from=t,this.to=e,this.flags=i}get anchor(){return 32&this.flags?this.to:this.from}get head(){return 32&this.flags?this.from:this.to}get empty(){return this.from==this.to}get assoc(){return 8&this.flags?-1:16&this.flags?1:0}get bidiLevel(){let t=7&this.flags;return 7==t?null:t}get goalColumn(){let t=this.flags>>6;return 16777215==t?void 0:t}map(t,e=-1){let i,n;return this.empty?i=n=t.mapPos(this.from,e):(i=t.mapPos(this.from,1),n=t.mapPos(this.to,-1)),i==this.from&&n==this.to?this:new R(i,n,this.flags)}extend(t,e=t){if(t<=this.anchor&&e>=this.anchor)return L.range(t,e);let i=Math.abs(t-this.anchor)>Math.abs(e-this.anchor)?t:e;return L.range(this.anchor,i)}eq(t,e=!1){return!(this.anchor!=t.anchor||this.head!=t.head||e&&this.empty&&this.assoc!=t.assoc)}toJSON(){return{anchor:this.anchor,head:this.head}}static fromJSON(t){if(!t||"number"!=typeof t.anchor||"number"!=typeof t.head)throw new RangeError("Invalid JSON representation for SelectionRange");return L.range(t.anchor,t.head)}static create(t,e,i){return new R(t,e,i)}}class L{constructor(t,e){this.ranges=t,this.mainIndex=e}map(t,e=-1){return t.empty?this:L.create(this.ranges.map((i=>i.map(t,e))),this.mainIndex)}eq(t,e=!1){if(this.ranges.length!=t.ranges.length||this.mainIndex!=t.mainIndex)return!1;for(let i=0;i<this.ranges.length;i++)if(!this.ranges[i].eq(t.ranges[i],e))return!1;return!0}get main(){return this.ranges[this.mainIndex]}asSingle(){return 1==this.ranges.length?this:new L([this.main],0)}addRange(t,e=!0){return L.create([t].concat(this.ranges),e?0:this.mainIndex+1)}replaceRange(t,e=this.mainIndex){let i=this.ranges.slice();return i[e]=t,L.create(i,this.mainIndex)}toJSON(){return{ranges:this.ranges.map((t=>t.toJSON())),main:this.mainIndex}}static fromJSON(t){if(!t||!Array.isArray(t.ranges)||"number"!=typeof t.main||t.main>=t.ranges.length)throw new RangeError("Invalid JSON representation for EditorSelection");return new L(t.ranges.map((t=>R.fromJSON(t))),t.main)}static single(t,e=t){return new L([L.range(t,e)],0)}static create(t,e=0){if(0==t.length)throw new RangeError("A selection needs at least one range");for(let i=0,n=0;n<t.length;n++){let r=t[n];if(r.empty?r.from<=i:r.from<i)return L.normalized(t.slice(),e);i=r.to}return new L(t,e)}static cursor(t,e=0,i,n){return R.create(t,t,(0==e?0:e<0?8:16)|(null==i?7:Math.min(6,i))|(null!=n?n:16777215)<<6)}static range(t,e,i,n){let r=(null!=i?i:16777215)<<6|(null==n?7:Math.min(6,n));return e<t?R.create(e,t,48|r):R.create(t,e,(e>t?8:0)|r)}static normalized(t,e=0){let i=t[e];t.sort(((t,e)=>t.from-e.from)),e=t.indexOf(i);for(let i=1;i<t.length;i++){let n=t[i],r=t[i-1];if(n.empty?n.from<=r.to:n.from<r.to){let s=r.from,o=Math.max(n.to,r.to);i<=e&&e--,t.splice(--i,2,n.anchor>n.head?L.range(o,s):L.range(s,o))}}return new L(t,e)}}function I(t,e){for(let i of t.ranges)if(i.to>e)throw new RangeError("Selection points outside of document")}let B=0;class F{constructor(t,e,i,n,r){this.combine=t,this.compareInput=e,this.compare=i,this.isStatic=n,this.id=B++,this.default=t([]),this.extensions="function"==typeof r?r(this):r}get reader(){return this}static define(t={}){return new F(t.combine||(t=>t),t.compareInput||((t,e)=>t===e),t.compare||(t.combine?(t,e)=>t===e:_),!!t.static,t.enables)}of(t){return new q([],this,0,t)}compute(t,e){if(this.isStatic)throw new Error("Can't compute a static facet");return new q(t,this,1,e)}computeN(t,e){if(this.isStatic)throw new Error("Can't compute a static facet");return new q(t,this,2,e)}from(t,e){return e||(e=t=>t),this.compute([t],(i=>e(i.field(t))))}}function _(t,e){return t==e||t.length==e.length&&t.every(((t,i)=>t===e[i]))}class q{constructor(t,e,i,n){this.dependencies=t,this.facet=e,this.type=i,this.value=n,this.id=B++}dynamicSlot(t){var e;let i=this.value,n=this.facet.compareInput,r=this.id,s=t[r]>>1,o=2==this.type,a=!1,l=!1,h=[];for(let i of this.dependencies)"doc"==i?a=!0:"selection"==i?l=!0:1&(null!==(e=t[i.id])&&void 0!==e?e:1)||h.push(t[i.id]);return{create:t=>(t.values[s]=i(t),1),update(t,e){if(a&&e.docChanged||l&&(e.docChanged||e.selection)||H(t,h)){let e=i(t);if(o?!V(e,t.values[s],n):!n(e,t.values[s]))return t.values[s]=e,1}return 0},reconfigure:(t,e)=>{let a,l=e.config.address[r];if(null!=l){let r=Z(e,l);if(this.dependencies.every((i=>i instanceof F?e.facet(i)===t.facet(i):!(i instanceof j)||e.field(i,!1)==t.field(i,!1)))||(o?V(a=i(t),r,n):n(a=i(t),r)))return t.values[s]=r,0}else a=i(t);return t.values[s]=a,1}}}}function V(t,e,i){if(t.length!=e.length)return!1;for(let n=0;n<t.length;n++)if(!i(t[n],e[n]))return!1;return!0}function H(t,e){let i=!1;for(let n of e)1&X(t,n)&&(i=!0);return i}function W(t,e,i){let n=i.map((e=>t[e.id])),r=i.map((t=>t.type)),s=n.filter((t=>!(1&t))),o=t[e.id]>>1;function a(t){let i=[];for(let e=0;e<n.length;e++){let s=Z(t,n[e]);if(2==r[e])for(let t of s)i.push(t);else i.push(s)}return e.combine(i)}return{create(t){for(let e of n)X(t,e);return t.values[o]=a(t),1},update(t,i){if(!H(t,s))return 0;let n=a(t);return e.compare(n,t.values[o])?0:(t.values[o]=n,1)},reconfigure(t,r){let s=H(t,n),l=r.config.facets[e.id],h=r.facet(e);if(l&&!s&&_(i,l))return t.values[o]=h,0;let c=a(t);return e.compare(c,h)?(t.values[o]=h,0):(t.values[o]=c,1)}}}const z=F.define({static:!0});class j{constructor(t,e,i,n,r){this.id=t,this.createF=e,this.updateF=i,this.compareF=n,this.spec=r,this.provides=void 0}static define(t){let e=new j(B++,t.create,t.update,t.compare||((t,e)=>t===e),t);return t.provide&&(e.provides=t.provide(e)),e}create(t){let e=t.facet(z).find((t=>t.field==this));return((null==e?void 0:e.create)||this.createF)(t)}slot(t){let e=t[this.id]>>1;return{create:t=>(t.values[e]=this.create(t),1),update:(t,i)=>{let n=t.values[e],r=this.updateF(n,i);return this.compareF(n,r)?0:(t.values[e]=r,1)},reconfigure:(t,i)=>null!=i.config.address[this.id]?(t.values[e]=i.field(this),0):(t.values[e]=this.create(t),1)}}init(t){return[this,z.of({field:this,create:t})]}get extension(){return this}}function U(t){return e=>new G(e,t)}const K={highest:U(0),high:U(1),default:U(2),low:U(3),lowest:U(4)};class G{constructor(t,e){this.inner=t,this.prec=e}}class ${of(t){return new Y(this,t)}reconfigure(t){return $.reconfigure.of({compartment:this,extension:t})}get(t){return t.config.compartments.get(this)}}class Y{constructor(t,e){this.compartment=t,this.inner=e}}class J{constructor(t,e,i,n,r,s){for(this.base=t,this.compartments=e,this.dynamicSlots=i,this.address=n,this.staticValues=r,this.facets=s,this.statusTemplate=[];this.statusTemplate.length<i.length;)this.statusTemplate.push(0)}staticFacet(t){let e=this.address[t.id];return null==e?t.default:this.staticValues[e>>1]}static resolve(t,e,i){let n=[],r=Object.create(null),s=new Map;for(let i of function(t,e,i){let n=[[],[],[],[],[]],r=new Map;return function t(s,o){let a=r.get(s);if(null!=a){if(a<=o)return;let t=n[a].indexOf(s);t>-1&&n[a].splice(t,1),s instanceof Y&&i.delete(s.compartment)}if(r.set(s,o),Array.isArray(s))for(let e of s)t(e,o);else if(s instanceof Y){if(i.has(s.compartment))throw new RangeError("Duplicate use of compartment in extensions");let n=e.get(s.compartment)||s.inner;i.set(s.compartment,n),t(n,o)}else if(s instanceof G)t(s.inner,s.prec);else if(s instanceof j)n[o].push(s),s.provides&&t(s.provides,o);else if(s instanceof q)n[o].push(s),s.facet.extensions&&t(s.facet.extensions,2);else{let e=s.extension;if(!e)throw new Error(`Unrecognized extension value in extension set (${s}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);t(e,o)}}(t,2),n.reduce(((t,e)=>t.concat(e)))}(t,e,s))i instanceof j?n.push(i):(r[i.facet.id]||(r[i.facet.id]=[])).push(i);let o=Object.create(null),a=[],l=[];for(let t of n)o[t.id]=l.length<<1,l.push((e=>t.slot(e)));let h=null==i?void 0:i.config.facets;for(let t in r){let e=r[t],n=e[0].facet,s=h&&h[t]||[];if(e.every((t=>0==t.type)))if(o[n.id]=a.length<<1|1,_(s,e))a.push(i.facet(n));else{let t=n.combine(e.map((t=>t.value)));a.push(i&&n.compare(t,i.facet(n))?i.facet(n):t)}else{for(let t of e)0==t.type?(o[t.id]=a.length<<1|1,a.push(t.value)):(o[t.id]=l.length<<1,l.push((e=>t.dynamicSlot(e))));o[n.id]=l.length<<1,l.push((t=>W(t,n,e)))}}let c=l.map((t=>t(o)));return new J(t,s,c,o,a,r)}}function X(t,e){if(1&e)return 2;let i=e>>1,n=t.status[i];if(4==n)throw new Error("Cyclic dependency between fields and/or facets");if(2&n)return n;t.status[i]=4;let r=t.computeSlot(t,t.config.dynamicSlots[i]);return t.status[i]=2|r}function Z(t,e){return 1&e?t.config.staticValues[e>>1]:t.values[e>>1]}const Q=F.define(),tt=F.define({combine:t=>t.some((t=>t)),static:!0}),et=F.define({combine:t=>t.length?t[0]:void 0,static:!0}),it=F.define(),nt=F.define(),rt=F.define(),st=F.define({combine:t=>!!t.length&&t[0]});class ot{constructor(t,e){this.type=t,this.value=e}static define(){return new at}}class at{of(t){return new ot(this,t)}}class lt{constructor(t){this.map=t}of(t){return new ht(this,t)}}class ht{constructor(t,e){this.type=t,this.value=e}map(t){let e=this.type.map(this.value,t);return void 0===e?void 0:e==this.value?this:new ht(this.type,e)}is(t){return this.type==t}static define(t={}){return new lt(t.map||(t=>t))}static mapEffects(t,e){if(!t.length)return t;let i=[];for(let n of t){let t=n.map(e);t&&i.push(t)}return i}}ht.reconfigure=ht.define(),ht.appendConfig=ht.define();class ct{constructor(t,e,i,n,r,s){this.startState=t,this.changes=e,this.selection=i,this.effects=n,this.annotations=r,this.scrollIntoView=s,this._doc=null,this._state=null,i&&I(i,e.newLength),r.some((t=>t.type==ct.time))||(this.annotations=r.concat(ct.time.of(Date.now())))}static create(t,e,i,n,r,s){return new ct(t,e,i,n,r,s)}get newDoc(){return this._doc||(this._doc=this.changes.apply(this.startState.doc))}get newSelection(){return this.selection||this.startState.selection.map(this.changes)}get state(){return this._state||this.startState.applyTransaction(this),this._state}annotation(t){for(let e of this.annotations)if(e.type==t)return e.value}get docChanged(){return!this.changes.empty}get reconfigured(){return this.startState.config!=this.state.config}isUserEvent(t){let e=this.annotation(ct.userEvent);return!(!e||!(e==t||e.length>t.length&&e.slice(0,t.length)==t&&"."==e[t.length]))}}function ut(t,e){let i=[];for(let n=0,r=0;;){let s,o;if(n<t.length&&(r==e.length||e[r]>=t[n]))s=t[n++],o=t[n++];else{if(!(r<e.length))return i;s=e[r++],o=e[r++]}!i.length||i[i.length-1]<s?i.push(s,o):i[i.length-1]<o&&(i[i.length-1]=o)}}function dt(t,e,i){var n;let r,s,o;return i?(r=e.changes,s=A.empty(e.changes.length),o=t.changes.compose(e.changes)):(r=e.changes.map(t.changes),s=t.changes.mapDesc(e.changes,!0),o=t.changes.compose(r)),{changes:o,selection:e.selection?e.selection.map(s):null===(n=t.selection)||void 0===n?void 0:n.map(r),effects:ht.mapEffects(t.effects,r).concat(ht.mapEffects(e.effects,s)),annotations:t.annotations.length?t.annotations.concat(e.annotations):e.annotations,scrollIntoView:t.scrollIntoView||e.scrollIntoView}}function ft(t,e,i){let n=e.selection,r=gt(e.annotations);return e.userEvent&&(r=r.concat(ct.userEvent.of(e.userEvent))),{changes:e.changes instanceof A?e.changes:A.of(e.changes||[],i,t.facet(et)),selection:n&&(n instanceof L?n:L.single(n.anchor,n.head)),effects:gt(e.effects),annotations:r,scrollIntoView:!!e.scrollIntoView}}function pt(t,e,i){let n=ft(t,e.length?e[0]:{},t.doc.length);e.length&&!1===e[0].filter&&(i=!1);for(let r=1;r<e.length;r++){!1===e[r].filter&&(i=!1);let s=!!e[r].sequential;n=dt(n,ft(t,e[r],s?n.changes.newLength:t.doc.length),s)}let r=ct.create(t,n.changes,n.selection,n.effects,n.annotations,n.scrollIntoView);return function(t){let e=t.startState,i=e.facet(rt),n=t;for(let r=i.length-1;r>=0;r--){let s=i[r](t);s&&Object.keys(s).length&&(n=dt(n,ft(e,s,t.changes.newLength),!0))}return n==t?t:ct.create(e,t.changes,t.selection,n.effects,n.annotations,n.scrollIntoView)}(i?function(t){let e=t.startState,i=!0;for(let n of e.facet(it)){let e=n(t);if(!1===e){i=!1;break}Array.isArray(e)&&(i=!0===i?e:ut(i,e))}if(!0!==i){let n,r;if(!1===i)r=t.changes.invertedDesc,n=A.empty(e.doc.length);else{let e=t.changes.filter(i);n=e.changes,r=e.filtered.mapDesc(e.changes).invertedDesc}t=ct.create(e,n,t.selection&&t.selection.map(r),ht.mapEffects(t.effects,r),t.annotations,t.scrollIntoView)}let n=e.facet(nt);for(let i=n.length-1;i>=0;i--){let r=n[i](t);t=r instanceof ct?r:Array.isArray(r)&&1==r.length&&r[0]instanceof ct?r[0]:pt(e,gt(r),!1)}return t}(r):r)}ct.time=ot.define(),ct.userEvent=ot.define(),ct.addToHistory=ot.define(),ct.remote=ot.define();const mt=[];function gt(t){return null==t?mt:Array.isArray(t)?t:[t]}var vt;e.CharCategory=void 0,(vt=e.CharCategory||(e.CharCategory={}))[vt.Word=0]="Word",vt[vt.Space=1]="Space",vt[vt.Other=2]="Other";const wt=/[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;let yt;try{yt=new RegExp("[\\p{Alphabetic}\\p{Number}_]","u")}catch(t){}class bt{constructor(t,e,i,n,r,s){this.config=t,this.doc=e,this.selection=i,this.values=n,this.status=t.statusTemplate.slice(),this.computeSlot=r,s&&(s._state=this);for(let t=0;t<this.config.dynamicSlots.length;t++)X(this,t<<1);this.computeSlot=null}field(t,e=!0){let i=this.config.address[t.id];if(null!=i)return X(this,i),Z(this,i);if(e)throw new RangeError("Field is not present in this state")}update(...t){return pt(this,t,!0)}applyTransaction(t){let e,i=this.config,{base:n,compartments:r}=i;for(let e of t.effects)e.is($.reconfigure)?(i&&(r=new Map,i.compartments.forEach(((t,e)=>r.set(e,t))),i=null),r.set(e.value.compartment,e.value.extension)):e.is(ht.reconfigure)?(i=null,n=e.value):e.is(ht.appendConfig)&&(i=null,n=gt(n).concat(e.value));i?e=t.startState.values.slice():(i=J.resolve(n,r,this),e=new bt(i,this.doc,this.selection,i.dynamicSlots.map((()=>null)),((t,e)=>e.reconfigure(t,this)),null).values);let s=t.startState.facet(tt)?t.newSelection:t.newSelection.asSingle();new bt(i,t.newDoc,s,e,((e,i)=>i.update(e,t)),t)}replaceSelection(t){return"string"==typeof t&&(t=this.toText(t)),this.changeByRange((e=>({changes:{from:e.from,to:e.to,insert:t},range:L.cursor(e.from+t.length)})))}changeByRange(t){let e=this.selection,i=t(e.ranges[0]),n=this.changes(i.changes),r=[i.range],s=gt(i.effects);for(let i=1;i<e.ranges.length;i++){let o=t(e.ranges[i]),a=this.changes(o.changes),l=a.map(n);for(let t=0;t<i;t++)r[t]=r[t].map(l);let h=n.mapDesc(a,!0);r.push(o.range.map(h)),n=n.compose(l),s=ht.mapEffects(s,l).concat(ht.mapEffects(gt(o.effects),h))}return{changes:n,selection:L.create(r,e.mainIndex),effects:s}}changes(t=[]){return t instanceof A?t:A.of(t,this.doc.length,this.facet(bt.lineSeparator))}toText(t){return i.of(t.split(this.facet(bt.lineSeparator)||C))}sliceDoc(t=0,e=this.doc.length){return this.doc.sliceString(t,e,this.lineBreak)}facet(t){let e=this.config.address[t.id];return null==e?t.default:(X(this,e),Z(this,e))}toJSON(t){let e={doc:this.sliceDoc(),selection:this.selection.toJSON()};if(t)for(let i in t){let n=t[i];n instanceof j&&null!=this.config.address[n.id]&&(e[i]=n.spec.toJSON(this.field(t[i]),this))}return e}static fromJSON(t,e={},i){if(!t||"string"!=typeof t.doc)throw new RangeError("Invalid JSON representation for EditorState");let n=[];if(i)for(let e in i)if(Object.prototype.hasOwnProperty.call(t,e)){let r=i[e],s=t[e];n.push(r.init((t=>r.spec.fromJSON(s,t))))}return bt.create({doc:t.doc,selection:L.fromJSON(t.selection),extensions:e.extensions?n.concat([e.extensions]):n})}static create(t={}){let e=J.resolve(t.extensions||[],new Map),n=t.doc instanceof i?t.doc:i.of((t.doc||"").split(e.staticFacet(bt.lineSeparator)||C)),r=t.selection?t.selection instanceof L?t.selection:L.single(t.selection.anchor,t.selection.head):L.single(0);return I(r,n.length),e.staticFacet(tt)||(r=r.asSingle()),new bt(e,n,r,e.dynamicSlots.map((()=>null)),((t,e)=>e.create(t)),null)}get tabSize(){return this.facet(bt.tabSize)}get lineBreak(){return this.facet(bt.lineSeparator)||"\n"}get readOnly(){return this.facet(st)}phrase(t,...e){for(let e of this.facet(bt.phrases))if(Object.prototype.hasOwnProperty.call(e,t)){t=e[t];break}return e.length&&(t=t.replace(/\$(\$|\d*)/g,((t,i)=>{if("$"==i)return"$";let n=+(i||1);return!n||n>e.length?t:e[n-1]}))),t}languageDataAt(t,e,i=-1){let n=[];for(let r of this.facet(Q))for(let s of r(this,e,i))Object.prototype.hasOwnProperty.call(s,t)&&n.push(s[t]);return n}charCategorizer(t){return i=this.languageDataAt("wordChars",t).join(""),t=>{if(!/\S/.test(t))return e.CharCategory.Space;if(function(t){if(yt)return yt.test(t);for(let e=0;e<t.length;e++){let i=t[e];if(/\w/.test(i)||i>""&&(i.toUpperCase()!=i.toLowerCase()||wt.test(i)))return!0}return!1}(t))return e.CharCategory.Word;for(let n=0;n<i.length;n++)if(t.indexOf(i[n])>-1)return e.CharCategory.Word;return e.CharCategory.Other};var i}wordAt(t){let{text:i,from:n,length:r}=this.doc.lineAt(t),s=this.charCategorizer(t),o=t-n,a=t-n;for(;o>0;){let t=g(i,o,!1);if(s(i.slice(t,o))!=e.CharCategory.Word)break;o=t}for(;a<r;){let t=g(i,a);if(s(i.slice(a,t))!=e.CharCategory.Word)break;a=t}return o==a?null:L.range(o+n,a+n)}}bt.allowMultipleSelections=tt,bt.tabSize=F.define({combine:t=>t.length?t[0]:4}),bt.lineSeparator=et,bt.readOnly=st,bt.phrases=F.define({compare(t,e){let i=Object.keys(t),n=Object.keys(e);return i.length==n.length&&i.every((i=>t[i]==e[i]))}}),bt.languageData=Q,bt.changeFilter=it,bt.transactionFilter=nt,bt.transactionExtender=rt,$.reconfigure=ht.define();class St{eq(t){return this==t}range(t,e=t){return xt.create(t,e,this)}}St.prototype.startSide=St.prototype.endSide=0,St.prototype.point=!1,St.prototype.mapMode=e.MapMode.TrackDel;class xt{constructor(t,e,i){this.from=t,this.to=e,this.value=i}static create(t,e,i){return new xt(t,e,i)}}function Ct(t,e){return t.from-e.from||t.value.startSide-e.value.startSide}class Et{constructor(t,e,i,n){this.from=t,this.to=e,this.value=i,this.maxPoint=n}get length(){return this.to[this.to.length-1]}findIndex(t,e,i,n=0){let r=i?this.to:this.from;for(let s=n,o=r.length;;){if(s==o)return s;let n=s+o>>1,a=r[n]-t||(i?this.value[n].endSide:this.value[n].startSide)-e;if(n==s)return a>=0?s:o;a>=0?o=n:s=n+1}}between(t,e,i,n){for(let r=this.findIndex(e,-1e9,!0),s=this.findIndex(i,1e9,!1,r);r<s;r++)if(!1===n(this.from[r]+t,this.to[r]+t,this.value[r]))return!1}map(t,e){let i=[],n=[],r=[],s=-1,o=-1;for(let a=0;a<this.value.length;a++){let l,h,c=this.value[a],u=this.from[a]+t,d=this.to[a]+t;if(u==d){let t=e.mapPos(u,c.startSide,c.mapMode);if(null==t)continue;if(l=h=t,c.startSide!=c.endSide&&(h=e.mapPos(u,c.endSide),h<l))continue}else if(l=e.mapPos(u,c.startSide),h=e.mapPos(d,c.endSide),l>h||l==h&&c.startSide>0&&c.endSide<=0)continue;(h-l||c.endSide-c.startSide)<0||(s<0&&(s=l),c.point&&(o=Math.max(o,h-l)),i.push(c),n.push(l-s),r.push(h-s))}return{mapped:i.length?new Et(n,r,i,o):null,pos:s}}}class kt{constructor(t,e,i,n){this.chunkPos=t,this.chunk=e,this.nextLayer=i,this.maxPoint=n}static create(t,e,i,n){return new kt(t,e,i,n)}get length(){let t=this.chunk.length-1;return t<0?0:Math.max(this.chunkEnd(t),this.nextLayer.length)}get size(){if(this.isEmpty)return 0;let t=this.nextLayer.size;for(let e of this.chunk)t+=e.value.length;return t}chunkEnd(t){return this.chunkPos[t]+this.chunk[t].length}update(t){let{add:e=[],sort:i=!1,filterFrom:n=0,filterTo:r=this.length}=t,s=t.filter;if(0==e.length&&!s)return this;if(i&&(e=e.slice().sort(Ct)),this.isEmpty)return e.length?kt.of(e):this;let o=new Mt(this,null,-1).goto(0),a=0,l=[],h=new At;for(;o.value||a<e.length;)if(a<e.length&&(o.from-e[a].from||o.startSide-e[a].value.startSide)>=0){let t=e[a++];h.addInner(t.from,t.to,t.value)||l.push(t)}else 1==o.rangeIndex&&o.chunkIndex<this.chunk.length&&(a==e.length||this.chunkEnd(o.chunkIndex)<e[a].from)&&(!s||n>this.chunkEnd(o.chunkIndex)||r<this.chunkPos[o.chunkIndex])&&h.addChunk(this.chunkPos[o.chunkIndex],this.chunk[o.chunkIndex])?o.nextChunk():((!s||n>o.to||r<o.from||s(o.from,o.to,o.value))&&(h.addInner(o.from,o.to,o.value)||l.push(xt.create(o.from,o.to,o.value))),o.next());return h.finishInner(this.nextLayer.isEmpty&&!l.length?kt.empty:this.nextLayer.update({add:l,filter:s,filterFrom:n,filterTo:r}))}map(t){if(t.empty||this.isEmpty)return this;let e=[],i=[],n=-1;for(let r=0;r<this.chunk.length;r++){let s=this.chunkPos[r],o=this.chunk[r],a=t.touchesRange(s,s+o.length);if(!1===a)n=Math.max(n,o.maxPoint),e.push(o),i.push(t.mapPos(s));else if(!0===a){let{mapped:r,pos:a}=o.map(s,t);r&&(n=Math.max(n,r.maxPoint),e.push(r),i.push(a))}}let r=this.nextLayer.map(t);return 0==e.length?r:new kt(i,e,r||kt.empty,n)}between(t,e,i){if(!this.isEmpty){for(let n=0;n<this.chunk.length;n++){let r=this.chunkPos[n],s=this.chunk[n];if(e>=r&&t<=r+s.length&&!1===s.between(r,t-r,e-r,i))return}this.nextLayer.between(t,e,i)}}iter(t=0){return Nt.from([this]).goto(t)}get isEmpty(){return this.nextLayer==this}static iter(t,e=0){return Nt.from(t).goto(e)}static compare(t,e,i,n,r=-1){let s=t.filter((t=>t.maxPoint>0||!t.isEmpty&&t.maxPoint>=r)),o=e.filter((t=>t.maxPoint>0||!t.isEmpty&&t.maxPoint>=r)),a=Tt(s,o,i),l=new Ot(s,a,r),h=new Ot(o,a,r);i.iterGaps(((t,e,i)=>Dt(l,t,h,e,i,n))),i.empty&&0==i.length&&Dt(l,0,h,0,0,n)}static eq(t,e,i=0,n){null==n&&(n=999999999);let r=t.filter((t=>!t.isEmpty&&e.indexOf(t)<0)),s=e.filter((e=>!e.isEmpty&&t.indexOf(e)<0));if(r.length!=s.length)return!1;if(!r.length)return!0;let o=Tt(r,s),a=new Ot(r,o,0).goto(i),l=new Ot(s,o,0).goto(i);for(;;){if(a.to!=l.to||!Rt(a.active,l.active)||a.point&&(!l.point||!a.point.eq(l.point)))return!1;if(a.to>n)return!0;a.next(),l.next()}}static spans(t,e,i,n,r=-1){let s=new Ot(t,null,r).goto(e),o=e,a=s.openStart;for(;;){let t=Math.min(s.to,i);if(s.point){let i=s.activeForPoint(s.to),r=s.pointFrom<e?i.length+1:s.point.startSide<0?i.length:Math.min(i.length,a);n.point(o,t,s.point,i,r,s.pointRank),a=Math.min(s.openEnd(t),i.length)}else t>o&&(n.span(o,t,s.active,a),a=s.openEnd(t));if(s.to>i)return a+(s.point&&s.to>i?1:0);o=s.to,s.next()}}static of(t,e=!1){let i=new At;for(let n of t instanceof xt?[t]:e?function(t){if(t.length>1)for(let e=t[0],i=1;i<t.length;i++){let n=t[i];if(Ct(e,n)>0)return t.slice().sort(Ct);e=n}return t}(t):t)i.add(n.from,n.to,n.value);return i.finish()}static join(t){if(!t.length)return kt.empty;let e=t[t.length-1];for(let i=t.length-2;i>=0;i--)for(let n=t[i];n!=kt.empty;n=n.nextLayer)e=new kt(n.chunkPos,n.chunk,e,Math.max(n.maxPoint,e.maxPoint));return e}}kt.empty=new kt([],[],null,-1),kt.empty.nextLayer=kt.empty;class At{finishChunk(t){this.chunks.push(new Et(this.from,this.to,this.value,this.maxPoint)),this.chunkPos.push(this.chunkStart),this.chunkStart=-1,this.setMaxPoint=Math.max(this.setMaxPoint,this.maxPoint),this.maxPoint=-1,t&&(this.from=[],this.to=[],this.value=[])}constructor(){this.chunks=[],this.chunkPos=[],this.chunkStart=-1,this.last=null,this.lastFrom=-1e9,this.lastTo=-1e9,this.from=[],this.to=[],this.value=[],this.maxPoint=-1,this.setMaxPoint=-1,this.nextLayer=null}add(t,e,i){this.addInner(t,e,i)||(this.nextLayer||(this.nextLayer=new At)).add(t,e,i)}addInner(t,e,i){let n=t-this.lastTo||i.startSide-this.last.endSide;if(n<=0&&(t-this.lastFrom||i.startSide-this.last.startSide)<0)throw new Error("Ranges must be added sorted by `from` position and `startSide`");return!(n<0||(250==this.from.length&&this.finishChunk(!0),this.chunkStart<0&&(this.chunkStart=t),this.from.push(t-this.chunkStart),this.to.push(e-this.chunkStart),this.last=i,this.lastFrom=t,this.lastTo=e,this.value.push(i),i.point&&(this.maxPoint=Math.max(this.maxPoint,e-t)),0))}addChunk(t,e){if((t-this.lastTo||e.value[0].startSide-this.last.endSide)<0)return!1;this.from.length&&this.finishChunk(!0),this.setMaxPoint=Math.max(this.setMaxPoint,e.maxPoint),this.chunks.push(e),this.chunkPos.push(t);let i=e.value.length-1;return this.last=e.value[i],this.lastFrom=e.from[i]+t,this.lastTo=e.to[i]+t,!0}finish(){return this.finishInner(kt.empty)}finishInner(t){if(this.from.length&&this.finishChunk(!1),0==this.chunks.length)return t;let e=kt.create(this.chunkPos,this.chunks,this.nextLayer?this.nextLayer.finishInner(t):t,this.setMaxPoint);return this.from=null,e}}function Tt(t,e,i){let n=new Map;for(let e of t)for(let t=0;t<e.chunk.length;t++)e.chunk[t].maxPoint<=0&&n.set(e.chunk[t],e.chunkPos[t]);let r=new Set;for(let t of e)for(let e=0;e<t.chunk.length;e++){let s=n.get(t.chunk[e]);null==s||(i?i.mapPos(s):s)!=t.chunkPos[e]||(null==i?void 0:i.touchesRange(s,s+t.chunk[e].length))||r.add(t.chunk[e])}return r}class Mt{constructor(t,e,i,n=0){this.layer=t,this.skip=e,this.minPoint=i,this.rank=n}get startSide(){return this.value?this.value.startSide:0}get endSide(){return this.value?this.value.endSide:0}goto(t,e=-1e9){return this.chunkIndex=this.rangeIndex=0,this.gotoInner(t,e,!1),this}gotoInner(t,e,i){for(;this.chunkIndex<this.layer.chunk.length;){let e=this.layer.chunk[this.chunkIndex];if(!(this.skip&&this.skip.has(e)||this.layer.chunkEnd(this.chunkIndex)<t||e.maxPoint<this.minPoint))break;this.chunkIndex++,i=!1}if(this.chunkIndex<this.layer.chunk.length){let n=this.layer.chunk[this.chunkIndex].findIndex(t-this.layer.chunkPos[this.chunkIndex],e,!0);(!i||this.rangeIndex<n)&&this.setRangeIndex(n)}this.next()}forward(t,e){(this.to-t||this.endSide-e)<0&&this.gotoInner(t,e,!0)}next(){for(;;){if(this.chunkIndex==this.layer.chunk.length){this.from=this.to=1e9,this.value=null;break}{let t=this.layer.chunkPos[this.chunkIndex],e=this.layer.chunk[this.chunkIndex],i=t+e.from[this.rangeIndex];if(this.from=i,this.to=t+e.to[this.rangeIndex],this.value=e.value[this.rangeIndex],this.setRangeIndex(this.rangeIndex+1),this.minPoint<0||this.value.point&&this.to-this.from>=this.minPoint)break}}}setRangeIndex(t){if(t==this.layer.chunk[this.chunkIndex].value.length){if(this.chunkIndex++,this.skip)for(;this.chunkIndex<this.layer.chunk.length&&this.skip.has(this.layer.chunk[this.chunkIndex]);)this.chunkIndex++;this.rangeIndex=0}else this.rangeIndex=t}nextChunk(){this.chunkIndex++,this.rangeIndex=0,this.next()}compare(t){return this.from-t.from||this.startSide-t.startSide||this.rank-t.rank||this.to-t.to||this.endSide-t.endSide}}class Nt{constructor(t){this.heap=t}static from(t,e=null,i=-1){let n=[];for(let r=0;r<t.length;r++)for(let s=t[r];!s.isEmpty;s=s.nextLayer)s.maxPoint>=i&&n.push(new Mt(s,e,i,r));return 1==n.length?n[0]:new Nt(n)}get startSide(){return this.value?this.value.startSide:0}goto(t,e=-1e9){for(let i of this.heap)i.goto(t,e);for(let t=this.heap.length>>1;t>=0;t--)Pt(this.heap,t);return this.next(),this}forward(t,e){for(let i of this.heap)i.forward(t,e);for(let t=this.heap.length>>1;t>=0;t--)Pt(this.heap,t);(this.to-t||this.value.endSide-e)<0&&this.next()}next(){if(0==this.heap.length)this.from=this.to=1e9,this.value=null,this.rank=-1;else{let t=this.heap[0];this.from=t.from,this.to=t.to,this.value=t.value,this.rank=t.rank,t.value&&t.next(),Pt(this.heap,0)}}}function Pt(t,e){for(let i=t[e];;){let n=1+(e<<1);if(n>=t.length)break;let r=t[n];if(n+1<t.length&&r.compare(t[n+1])>=0&&(r=t[n+1],n++),i.compare(r)<0)break;t[n]=i,t[e]=r,e=n}}class Ot{constructor(t,e,i){this.minPoint=i,this.active=[],this.activeTo=[],this.activeRank=[],this.minActive=-1,this.point=null,this.pointFrom=0,this.pointRank=0,this.to=-1e9,this.endSide=0,this.openStart=-1,this.cursor=Nt.from(t,e,i)}goto(t,e=-1e9){return this.cursor.goto(t,e),this.active.length=this.activeTo.length=this.activeRank.length=0,this.minActive=-1,this.to=t,this.endSide=e,this.openStart=-1,this.next(),this}forward(t,e){for(;this.minActive>-1&&(this.activeTo[this.minActive]-t||this.active[this.minActive].endSide-e)<0;)this.removeActive(this.minActive);this.cursor.forward(t,e)}removeActive(t){Lt(this.active,t),Lt(this.activeTo,t),Lt(this.activeRank,t),this.minActive=Bt(this.active,this.activeTo)}addActive(t){let e=0,{value:i,to:n,rank:r}=this.cursor;for(;e<this.activeRank.length&&(r-this.activeRank[e]||n-this.activeTo[e])>0;)e++;It(this.active,e,i),It(this.activeTo,e,n),It(this.activeRank,e,r),t&&It(t,e,this.cursor.from),this.minActive=Bt(this.active,this.activeTo)}next(){let t=this.to,e=this.point;this.point=null;let i=this.openStart<0?[]:null;for(;;){let n=this.minActive;if(n>-1&&(this.activeTo[n]-this.cursor.from||this.active[n].endSide-this.cursor.startSide)<0){if(this.activeTo[n]>t){this.to=this.activeTo[n],this.endSide=this.active[n].endSide;break}this.removeActive(n),i&&Lt(i,n)}else{if(!this.cursor.value){this.to=this.endSide=1e9;break}if(this.cursor.from>t){this.to=this.cursor.from,this.endSide=this.cursor.startSide;break}{let t=this.cursor.value;if(t.point){if(!(e&&this.cursor.to==this.to&&this.cursor.from<this.cursor.to)){this.point=t,this.pointFrom=this.cursor.from,this.pointRank=this.cursor.rank,this.to=this.cursor.to,this.endSide=t.endSide,this.cursor.next(),this.forward(this.to,this.endSide);break}this.cursor.next()}else this.addActive(i),this.cursor.next()}}}if(i){this.openStart=0;for(let e=i.length-1;e>=0&&i[e]<t;e--)this.openStart++}}activeForPoint(t){if(!this.active.length)return this.active;let e=[];for(let i=this.active.length-1;i>=0&&!(this.activeRank[i]<this.pointRank);i--)(this.activeTo[i]>t||this.activeTo[i]==t&&this.active[i].endSide>=this.point.endSide)&&e.push(this.active[i]);return e.reverse()}openEnd(t){let e=0;for(let i=this.activeTo.length-1;i>=0&&this.activeTo[i]>t;i--)e++;return e}}function Dt(t,e,i,n,r,s){t.goto(e),i.goto(n);let o=n+r,a=n,l=n-e;for(;;){let e=t.to+l-i.to||t.endSide-i.endSide,n=e<0?t.to+l:i.to,r=Math.min(n,o);if(t.point||i.point?t.point&&i.point&&(t.point==i.point||t.point.eq(i.point))&&Rt(t.activeForPoint(t.to),i.activeForPoint(i.to))||s.comparePoint(a,r,t.point,i.point):r>a&&!Rt(t.active,i.active)&&s.compareRange(a,r,t.active,i.active),n>o)break;a=n,e<=0&&t.next(),e>=0&&i.next()}}function Rt(t,e){if(t.length!=e.length)return!1;for(let i=0;i<t.length;i++)if(t[i]!=e[i]&&!t[i].eq(e[i]))return!1;return!0}function Lt(t,e){for(let i=e,n=t.length-1;i<n;i++)t[i]=t[i+1];t.pop()}function It(t,e,i){for(let i=t.length-1;i>=e;i--)t[i+1]=t[i];t[e]=i}function Bt(t,e){let i=-1,n=1e9;for(let r=0;r<e.length;r++)(e[r]-n||t[r].endSide-t[i].endSide)<0&&(i=r,n=e[r]);return i}e.Annotation=ot,e.AnnotationType=at,e.ChangeDesc=k,e.ChangeSet=A,e.Compartment=$,e.EditorSelection=L,e.EditorState=bt,e.Facet=F,e.Line=c,e.Prec=K,e.Range=xt,e.RangeSet=kt,e.RangeSetBuilder=At,e.RangeValue=St,e.SelectionRange=R,e.StateEffect=ht,e.StateEffectType=lt,e.StateField=j,e.Text=i,e.Transaction=ct,e.codePointAt=S,e.codePointSize=x,e.combineConfig=function(t,e,i={}){let n={};for(let e of t)for(let t of Object.keys(e)){let r=e[t],s=n[t];if(void 0===s)n[t]=r;else if(s===r||void 0===r);else{if(!Object.hasOwnProperty.call(i,t))throw new Error("Config merge conflict for field "+t);n[t]=i[t](s,r)}}for(let t in e)void 0===n[t]&&(n[t]=e[t]);return n},e.countColumn=function(t,e,i=t.length){let n=0;for(let r=0;r<i;)9==t.charCodeAt(r)?(n+=e-n%e,r++):(n++,r=g(t,r));return n},e.findClusterBreak=g,e.findColumn=function(t,e,i,n){for(let n=0,r=0;;){if(r>=e)return n;if(n==t.length)break;r+=9==t.charCodeAt(n)?i-r%i:1,n=g(t,n)}return!0===n?-1:t.length},e.fromCodePoint=function(t){return t<=65535?String.fromCharCode(t):(t-=65536,String.fromCharCode(55296+(t>>10),56320+(1023&t)))}},1506:(t,e,i)=>{"use strict";var n=i(9064),r=i(9172),s=i(6237);function o(t){let e;return e=11==t.nodeType?t.getSelection?t:t.ownerDocument:t,e.getSelection()}function a(t,e){return!!e&&(t==e||t.contains(1!=e.nodeType?e.parentNode:e))}function l(t,e){if(!e.anchorNode)return!1;try{return a(t,e.anchorNode)}catch(t){return!1}}function h(t){return 3==t.nodeType?x(t,0,t.nodeValue.length).getClientRects():1==t.nodeType?t.getClientRects():[]}function c(t,e,i,n){return!!i&&(f(t,e,i,n,-1)||f(t,e,i,n,1))}function u(t){for(var e=0;;e++)if(!(t=t.previousSibling))return e}function d(t){return 1==t.nodeType&&/^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(t.nodeName)}function f(t,e,i,n,r){for(;;){if(t==i&&e==n)return!0;if(e==(r<0?0:p(t))){if("DIV"==t.nodeName)return!1;let i=t.parentNode;if(!i||1!=i.nodeType)return!1;e=u(t)+(r<0?0:1),t=i}else{if(1!=t.nodeType)return!1;if(1==(t=t.childNodes[e+(r<0?-1:0)]).nodeType&&"false"==t.contentEditable)return!1;e=r<0?p(t):0}}}function p(t){return 3==t.nodeType?t.nodeValue.length:t.childNodes.length}function m(t,e){let i=e?t.left:t.right;return{left:i,right:i,top:t.top,bottom:t.bottom}}function g(t){let e=t.visualViewport;return e?{left:0,right:e.width,top:0,bottom:e.height}:{left:0,right:t.innerWidth,top:0,bottom:t.innerHeight}}function v(t,e){let i=e.width/t.offsetWidth,n=e.height/t.offsetHeight;return(i>.995&&i<1.005||!isFinite(i)||Math.abs(e.width-t.offsetWidth)<1)&&(i=1),(n>.995&&n<1.005||!isFinite(n)||Math.abs(e.height-t.offsetHeight)<1)&&(n=1),{scaleX:i,scaleY:n}}class w{constructor(){this.anchorNode=null,this.anchorOffset=0,this.focusNode=null,this.focusOffset=0}eq(t){return this.anchorNode==t.anchorNode&&this.anchorOffset==t.anchorOffset&&this.focusNode==t.focusNode&&this.focusOffset==t.focusOffset}setRange(t){let{anchorNode:e,focusNode:i}=t;this.set(e,Math.min(t.anchorOffset,e?p(e):0),i,Math.min(t.focusOffset,i?p(i):0))}set(t,e,i,n){this.anchorNode=t,this.anchorOffset=e,this.focusNode=i,this.focusOffset=n}}let y,b=null;function S(t){if(t.setActive)return t.setActive();if(b)return t.focus(b);let e=[];for(let i=t;i&&(e.push(i,i.scrollTop,i.scrollLeft),i!=i.ownerDocument);i=i.parentNode);if(t.focus(null==b?{get preventScroll(){return b={preventScroll:!0},!0}}:void 0),!b){b=!1;for(let t=0;t<e.length;){let i=e[t++],n=e[t++],r=e[t++];i.scrollTop!=n&&(i.scrollTop=n),i.scrollLeft!=r&&(i.scrollLeft=r)}}}function x(t,e,i=e){let n=y||(y=document.createRange());return n.setEnd(t,i),n.setStart(t,e),n}function C(t,e,i,n){let r={key:e,code:e,keyCode:i,which:i,cancelable:!0};n&&({altKey:r.altKey,ctrlKey:r.ctrlKey,shiftKey:r.shiftKey,metaKey:r.metaKey}=n);let s=new KeyboardEvent("keydown",r);s.synthetic=!0,t.dispatchEvent(s);let o=new KeyboardEvent("keyup",r);return o.synthetic=!0,t.dispatchEvent(o),s.defaultPrevented||o.defaultPrevented}function E(t){for(;t.attributes.length;)t.removeAttributeNode(t.attributes[0])}function k(t){return t.scrollTop>Math.max(1,t.scrollHeight-t.clientHeight-4)}function A(t,e){for(let i=t,n=e;;){if(3==i.nodeType&&n>0)return{node:i,offset:n};if(1==i.nodeType&&n>0){if("false"==i.contentEditable)return null;i=i.childNodes[n-1],n=p(i)}else{if(!i.parentNode||d(i))return null;n=u(i),i=i.parentNode}}}function T(t,e){for(let i=t,n=e;;){if(3==i.nodeType&&n<i.nodeValue.length)return{node:i,offset:n};if(1==i.nodeType&&n<i.childNodes.length){if("false"==i.contentEditable)return null;i=i.childNodes[n],n=0}else{if(!i.parentNode||d(i))return null;n=u(i)+1,i=i.parentNode}}}class M{constructor(t,e,i=!0){this.node=t,this.offset=e,this.precise=i}static before(t,e){return new M(t.parentNode,u(t),e)}static after(t,e){return new M(t.parentNode,u(t)+1,e)}}const N=[];class P{constructor(){this.parent=null,this.dom=null,this.flags=2}get overrideDOMText(){return null}get posAtStart(){return this.parent?this.parent.posBefore(this):0}get posAtEnd(){return this.posAtStart+this.length}posBefore(t){let e=this.posAtStart;for(let i of this.children){if(i==t)return e;e+=i.length+i.breakAfter}throw new RangeError("Invalid child in posBefore")}posAfter(t){return this.posBefore(t)+t.length}sync(t,e){if(2&this.flags){let i,n=this.dom,r=null;for(let s of this.children){if(7&s.flags){if(!s.dom&&(i=r?r.nextSibling:n.firstChild)){let t=P.get(i);(!t||!t.parent&&t.canReuseDOM(s))&&s.reuseDOM(i)}s.sync(t,e),s.flags&=-8}if(i=r?r.nextSibling:n.firstChild,e&&!e.written&&e.node==n&&i!=s.dom&&(e.written=!0),s.dom.parentNode==n)for(;i&&i!=s.dom;)i=O(i);else n.insertBefore(s.dom,i);r=s.dom}for(i=r?r.nextSibling:n.firstChild,i&&e&&e.node==n&&(e.written=!0);i;)i=O(i)}else if(1&this.flags)for(let i of this.children)7&i.flags&&(i.sync(t,e),i.flags&=-8)}reuseDOM(t){}localPosFromDOM(t,e){let i;if(t==this.dom)i=this.dom.childNodes[e];else{let n=0==p(t)?0:0==e?-1:1;for(;;){let e=t.parentNode;if(e==this.dom)break;0==n&&e.firstChild!=e.lastChild&&(n=t==e.firstChild?-1:1),t=e}i=n<0?t:t.nextSibling}if(i==this.dom.firstChild)return 0;for(;i&&!P.get(i);)i=i.nextSibling;if(!i)return this.length;for(let t=0,e=0;;t++){let n=this.children[t];if(n.dom==i)return e;e+=n.length+n.breakAfter}}domBoundsAround(t,e,i=0){let n=-1,r=-1,s=-1,o=-1;for(let a=0,l=i,h=i;a<this.children.length;a++){let i=this.children[a],c=l+i.length;if(l<t&&c>e)return i.domBoundsAround(t,e,l);if(c>=t&&-1==n&&(n=a,r=l),l>e&&i.dom.parentNode==this.dom){s=a,o=h;break}h=c,l=c+i.breakAfter}return{from:r,to:o<0?i+this.length:o,startDOM:(n?this.children[n-1].dom.nextSibling:null)||this.dom.firstChild,endDOM:s<this.children.length&&s>=0?this.children[s].dom:null}}markDirty(t=!1){this.flags|=2,this.markParentsDirty(t)}markParentsDirty(t){for(let e=this.parent;e;e=e.parent){if(t&&(e.flags|=2),1&e.flags)return;e.flags|=1,t=!1}}setParent(t){this.parent!=t&&(this.parent=t,7&this.flags&&this.markParentsDirty(!0))}setDOM(t){this.dom!=t&&(this.dom&&(this.dom.cmView=null),this.dom=t,t.cmView=this)}get rootView(){for(let t=this;;){let e=t.parent;if(!e)return t;t=e}}replaceChildren(t,e,i=N){this.markDirty();for(let n=t;n<e;n++){let t=this.children[n];t.parent==this&&i.indexOf(t)<0&&t.destroy()}this.children.splice(t,e-t,...i);for(let t=0;t<i.length;t++)i[t].setParent(this)}ignoreMutation(t){return!1}ignoreEvent(t){return!1}childCursor(t=this.length){return new D(this.children,t,this.children.length)}childPos(t,e=1){return this.childCursor().findPos(t,e)}toString(){let t=this.constructor.name.replace("View","");return t+(this.children.length?"("+this.children.join()+")":this.length?"["+("Text"==t?this.text:this.length)+"]":"")+(this.breakAfter?"#":"")}static get(t){return t.cmView}get isEditable(){return!0}get isWidget(){return!1}get isHidden(){return!1}merge(t,e,i,n,r,s){return!1}become(t){return!1}canReuseDOM(t){return t.constructor==this.constructor&&!(8&(this.flags|t.flags))}getSide(){return 0}destroy(){for(let t of this.children)t.parent==this&&t.destroy();this.parent=null}}function O(t){let e=t.nextSibling;return t.parentNode.removeChild(t),e}P.prototype.breakAfter=0;class D{constructor(t,e,i){this.children=t,this.pos=e,this.i=i,this.off=0}findPos(t,e=1){for(;;){if(t>this.pos||t==this.pos&&(e>0||0==this.i||this.children[this.i-1].breakAfter))return this.off=t-this.pos,this;let i=this.children[--this.i];this.pos-=i.length+i.breakAfter}}}function R(t,e,i,n,r,s,o,a,l){let{children:h}=t,c=h.length?h[e]:null,u=s.length?s[s.length-1]:null,d=u?u.breakAfter:o;if(!(e==n&&c&&!o&&!d&&s.length<2&&c.merge(i,r,s.length?u:null,0==i,a,l))){if(n<h.length){let t=h[n];t&&(r<t.length||t.breakAfter&&(null==u?void 0:u.breakAfter))?(e==n&&(t=t.split(r),r=0),!d&&u&&t.merge(0,r,u,!0,0,l)?s[s.length-1]=t:((r||t.children.length&&!t.children[0].length)&&t.merge(0,r,null,!1,0,l),s.push(t))):(null==t?void 0:t.breakAfter)&&(u?u.breakAfter=1:o=1),n++}for(c&&(c.breakAfter=o,i>0&&(!o&&s.length&&c.merge(i,c.length,s[0],!1,a,0)?c.breakAfter=s.shift().breakAfter:(i<c.length||c.children.length&&0==c.children[c.children.length-1].length)&&c.merge(i,c.length,null,!1,a,0),e++));e<n&&s.length;)if(h[n-1].become(s[s.length-1]))n--,s.pop(),l=s.length?0:a;else{if(!h[e].become(s[0]))break;e++,s.shift(),a=s.length?0:l}!s.length&&e&&n<h.length&&!h[e-1].breakAfter&&h[n].merge(0,0,h[e-1],!1,a,l)&&e--,(e<n||s.length)&&t.replaceChildren(e,n,s)}}function L(t,e,i,n,r,s){let o=t.childCursor(),{i:a,off:l}=o.findPos(i,1),{i:h,off:c}=o.findPos(e,-1),u=e-i;for(let t of n)u+=t.length;t.length+=u,R(t,h,c,a,l,n,0,r,s)}let I="undefined"!=typeof navigator?navigator:{userAgent:"",vendor:"",platform:""},B="undefined"!=typeof document?document:{documentElement:{style:{}}};const F=/Edge\/(\d+)/.exec(I.userAgent),_=/MSIE \d/.test(I.userAgent),q=/Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(I.userAgent),V=!!(_||q||F),H=!V&&/gecko\/(\d+)/i.test(I.userAgent),W=!V&&/Chrome\/(\d+)/.exec(I.userAgent),z="webkitFontSmoothing"in B.documentElement.style,j=!V&&/Apple Computer/.test(I.vendor),U=j&&(/Mobile\/\w+/.test(I.userAgent)||I.maxTouchPoints>2);var K={mac:U||/Mac/.test(I.platform),windows:/Win/.test(I.platform),linux:/Linux|X11/.test(I.platform),ie:V,ie_version:_?B.documentMode||6:q?+q[1]:F?+F[1]:0,gecko:H,gecko_version:H?+(/Firefox\/(\d+)/.exec(I.userAgent)||[0,0])[1]:0,chrome:!!W,chrome_version:W?+W[1]:0,ios:U,android:/Android\b/.test(I.userAgent),webkit:z,safari:j,webkit_version:z?+(/\bAppleWebKit\/(\d+)/.exec(I.userAgent)||[0,0])[1]:0,tabSize:null!=B.documentElement.style.tabSize?"tab-size":"-moz-tab-size"};class G extends P{constructor(t){super(),this.text=t}get length(){return this.text.length}createDOM(t){this.setDOM(t||document.createTextNode(this.text))}sync(t,e){this.dom||this.createDOM(),this.dom.nodeValue!=this.text&&(e&&e.node==this.dom&&(e.written=!0),this.dom.nodeValue=this.text)}reuseDOM(t){3==t.nodeType&&this.createDOM(t)}merge(t,e,i){return!(8&this.flags||i&&(!(i instanceof G)||this.length-(e-t)+i.length>256||8&i.flags)||(this.text=this.text.slice(0,t)+(i?i.text:"")+this.text.slice(e),this.markDirty(),0))}split(t){let e=new G(this.text.slice(t));return this.text=this.text.slice(0,t),this.markDirty(),e.flags|=8&this.flags,e}localPosFromDOM(t,e){return t==this.dom?e:e?this.text.length:0}domAtPos(t){return new M(this.dom,t)}domBoundsAround(t,e,i){return{from:i,to:i+this.length,startDOM:this.dom,endDOM:this.dom.nextSibling}}coordsAt(t,e){return function(t,e,i){let n=t.nodeValue.length;e>n&&(e=n);let r=e,s=e,o=0;0==e&&i<0||e==n&&i>=0?K.chrome||K.gecko||(e?(r--,o=1):s<n&&(s++,o=-1)):i<0?r--:s<n&&s++;let a=x(t,r,s).getClientRects();if(!a.length)return null;let l=a[(o?o<0:i>=0)?0:a.length-1];return K.safari&&!o&&0==l.width&&(l=Array.prototype.find.call(a,(t=>t.width))||l),o?m(l,o<0):l||null}(this.dom,t,e)}}class $ extends P{constructor(t,e=[],i=0){super(),this.mark=t,this.children=e,this.length=i;for(let t of e)t.setParent(this)}setAttrs(t){if(E(t),this.mark.class&&(t.className=this.mark.class),this.mark.attrs)for(let e in this.mark.attrs)t.setAttribute(e,this.mark.attrs[e]);return t}canReuseDOM(t){return super.canReuseDOM(t)&&!(8&(this.flags|t.flags))}reuseDOM(t){t.nodeName==this.mark.tagName.toUpperCase()&&(this.setDOM(t),this.flags|=6)}sync(t,e){this.dom?4&this.flags&&this.setAttrs(this.dom):this.setDOM(this.setAttrs(document.createElement(this.mark.tagName))),super.sync(t,e)}merge(t,e,i,n,r,s){return!(i&&(!(i instanceof $&&i.mark.eq(this.mark))||t&&r<=0||e<this.length&&s<=0)||(L(this,t,e,i?i.children.slice():[],r-1,s-1),this.markDirty(),0))}split(t){let e=[],i=0,n=-1,r=0;for(let s of this.children){let o=i+s.length;o>t&&e.push(i<t?s.split(t-i):s),n<0&&i>=t&&(n=r),i=o,r++}let s=this.length-t;return this.length=t,n>-1&&(this.children.length=n,this.markDirty()),new $(this.mark,e,s)}domAtPos(t){return X(this,t)}coordsAt(t,e){return Q(this,t,e)}}class Y extends P{static create(t,e,i){return new Y(t,e,i)}constructor(t,e,i){super(),this.widget=t,this.length=e,this.side=i,this.prevWidget=null}split(t){let e=Y.create(this.widget,this.length-t,this.side);return this.length-=t,e}sync(t){this.dom&&this.widget.updateDOM(this.dom,t)||(this.dom&&this.prevWidget&&this.prevWidget.destroy(this.dom),this.prevWidget=null,this.setDOM(this.widget.toDOM(t)),this.widget.editable||(this.dom.contentEditable="false"))}getSide(){return this.side}merge(t,e,i,n,r,s){return!(i&&(!(i instanceof Y&&this.widget.compare(i.widget))||t>0&&r<=0||e<this.length&&s<=0)||(this.length=t+(i?i.length:0)+(this.length-e),0))}become(t){return t instanceof Y&&t.side==this.side&&this.widget.constructor==t.widget.constructor&&(this.widget.compare(t.widget)||this.markDirty(!0),this.dom&&!this.prevWidget&&(this.prevWidget=this.widget),this.widget=t.widget,this.length=t.length,!0)}ignoreMutation(){return!0}ignoreEvent(t){return this.widget.ignoreEvent(t)}get overrideDOMText(){if(0==this.length)return n.Text.empty;let t=this;for(;t.parent;)t=t.parent;let{view:e}=t,i=e&&e.state.doc,r=this.posAtStart;return i?i.slice(r,r+this.length):n.Text.empty}domAtPos(t){return(this.length?0==t:this.side>0)?M.before(this.dom):M.after(this.dom,t==this.length)}domBoundsAround(){return null}coordsAt(t,e){let i=this.widget.coordsAt(this.dom,t,e);if(i)return i;let n=this.dom.getClientRects(),r=null;if(!n.length)return null;let s=this.side?this.side<0:t>0;for(let e=s?n.length-1:0;r=n[e],!(t>0?0==e:e==n.length-1||r.top<r.bottom);e+=s?-1:1);return m(r,!s)}get isEditable(){return!1}get isWidget(){return!0}get isHidden(){return this.widget.isHidden}destroy(){super.destroy(),this.dom&&this.widget.destroy(this.dom)}}class J extends P{constructor(t){super(),this.side=t}get length(){return 0}merge(){return!1}become(t){return t instanceof J&&t.side==this.side}split(){return new J(this.side)}sync(){if(!this.dom){let t=document.createElement("img");t.className="cm-widgetBuffer",t.setAttribute("aria-hidden","true"),this.setDOM(t)}}getSide(){return this.side}domAtPos(t){return this.side>0?M.before(this.dom):M.after(this.dom)}localPosFromDOM(){return 0}domBoundsAround(){return null}coordsAt(t){return this.dom.getBoundingClientRect()}get overrideDOMText(){return n.Text.empty}get isHidden(){return!0}}function X(t,e){let i=t.dom,{children:n}=t,r=0;for(let t=0;r<n.length;r++){let s=n[r],o=t+s.length;if(!(o==t&&s.getSide()<=0)){if(e>t&&e<o&&s.dom.parentNode==i)return s.domAtPos(e-t);if(e<=t)break;t=o}}for(let t=r;t>0;t--){let e=n[t-1];if(e.dom.parentNode==i)return e.domAtPos(e.length)}for(let t=r;t<n.length;t++){let e=n[t];if(e.dom.parentNode==i)return e.domAtPos(0)}return new M(i,0)}function Z(t,e,i){let n,{children:r}=t;i>0&&e instanceof $&&r.length&&(n=r[r.length-1])instanceof $&&n.mark.eq(e.mark)?Z(n,e.children[0],i-1):(r.push(e),e.setParent(t)),t.length+=e.length}function Q(t,e,i){let n=null,r=-1,s=null,o=-1;!function t(e,a){for(let l=0,h=0;l<e.children.length&&h<=a;l++){let c=e.children[l],u=h+c.length;u>=a&&(c.children.length?t(c,a-h):(!s||s.isHidden&&i>0)&&(u>a||h==u&&c.getSide()>0)?(s=c,o=a-h):(h<a||h==u&&c.getSide()<0&&!c.isHidden)&&(n=c,r=a-h)),h=u}}(t,e);let a=(i<0?n:s)||n||s;return a?a.coordsAt(Math.max(0,a==n?r:o),i):function(t){let e=t.dom.lastChild;if(!e)return t.dom.getBoundingClientRect();let i=h(e);return i[i.length-1]||null}(t)}function tt(t,e){for(let i in t)"class"==i&&e.class?e.class+=" "+t.class:"style"==i&&e.style?e.style+=";"+t.style:e[i]=t[i];return e}G.prototype.children=Y.prototype.children=J.prototype.children=N;const et=Object.create(null);function it(t,e,i){if(t==e)return!0;t||(t=et),e||(e=et);let n=Object.keys(t),r=Object.keys(e);if(n.length-(i&&n.indexOf(i)>-1?1:0)!=r.length-(i&&r.indexOf(i)>-1?1:0))return!1;for(let s of n)if(s!=i&&(-1==r.indexOf(s)||t[s]!==e[s]))return!1;return!0}function nt(t,e,i){let n=!1;if(e)for(let r in e)i&&r in i||(n=!0,"style"==r?t.style.cssText="":t.removeAttribute(r));if(i)for(let r in i)e&&e[r]==i[r]||(n=!0,"style"==r?t.style.cssText=i[r]:t.setAttribute(r,i[r]));return n}function rt(t){let e=Object.create(null);for(let i=0;i<t.attributes.length;i++){let n=t.attributes[i];e[n.name]=n.value}return e}class st extends P{constructor(){super(...arguments),this.children=[],this.length=0,this.prevAttrs=void 0,this.attrs=null,this.breakAfter=0}merge(t,e,i,n,r,s){if(i){if(!(i instanceof st))return!1;this.dom||i.transferDOM(this)}return n&&this.setDeco(i?i.attrs:null),L(this,t,e,i?i.children.slice():[],r,s),!0}split(t){let e=new st;if(e.breakAfter=this.breakAfter,0==this.length)return e;let{i,off:n}=this.childPos(t);n&&(e.append(this.children[i].split(n),0),this.children[i].merge(n,this.children[i].length,null,!1,0,0),i++);for(let t=i;t<this.children.length;t++)e.append(this.children[t],0);for(;i>0&&0==this.children[i-1].length;)this.children[--i].destroy();return this.children.length=i,this.markDirty(),this.length=t,e}transferDOM(t){this.dom&&(this.markDirty(),t.setDOM(this.dom),t.prevAttrs=void 0===this.prevAttrs?this.attrs:this.prevAttrs,this.prevAttrs=void 0,this.dom=null)}setDeco(t){it(this.attrs,t)||(this.dom&&(this.prevAttrs=this.attrs,this.markDirty()),this.attrs=t)}append(t,e){Z(this,t,e)}addLineDeco(t){let e=t.spec.attributes,i=t.spec.class;e&&(this.attrs=tt(e,this.attrs||{})),i&&(this.attrs=tt({class:i},this.attrs||{}))}domAtPos(t){return X(this,t)}reuseDOM(t){"DIV"==t.nodeName&&(this.setDOM(t),this.flags|=6)}sync(t,e){var i;this.dom?4&this.flags&&(E(this.dom),this.dom.className="cm-line",this.prevAttrs=this.attrs?null:void 0):(this.setDOM(document.createElement("div")),this.dom.className="cm-line",this.prevAttrs=this.attrs?null:void 0),void 0!==this.prevAttrs&&(nt(this.dom,this.prevAttrs,this.attrs),this.dom.classList.add("cm-line"),this.prevAttrs=void 0),super.sync(t,e);let n=this.dom.lastChild;for(;n&&P.get(n)instanceof $;)n=n.lastChild;if(!(n&&this.length&&("BR"==n.nodeName||0!=(null===(i=P.get(n))||void 0===i?void 0:i.isEditable)||K.ios&&this.children.some((t=>t instanceof G))))){let t=document.createElement("BR");t.cmIgnore=!0,this.dom.appendChild(t)}}measureTextSize(){if(0==this.children.length||this.length>20)return null;let t,e=0;for(let i of this.children){if(!(i instanceof G)||/[^ -~]/.test(i.text))return null;let n=h(i.dom);if(1!=n.length)return null;e+=n[0].width,t=n[0].height}return e?{lineHeight:this.dom.getBoundingClientRect().height,charWidth:e/this.length,textHeight:t}:null}coordsAt(t,e){let i=Q(this,t,e);if(!this.children.length&&i&&this.parent){let{heightOracle:t}=this.parent.view.viewState,e=i.bottom-i.top;if(Math.abs(e-t.lineHeight)<2&&t.textHeight<e){let n=(e-t.textHeight)/2;return{top:i.top+n,bottom:i.bottom-n,left:i.left,right:i.left}}}return i}become(t){return t instanceof st&&0==this.children.length&&0==t.children.length&&it(this.attrs,t.attrs)&&this.breakAfter==t.breakAfter}covers(){return!0}static find(t,e){for(let i=0,n=0;i<t.children.length;i++){let r=t.children[i],s=n+r.length;if(s>=e){if(r instanceof st)return r;if(s>e)break}n=s+r.breakAfter}return null}}class ot extends P{constructor(t,e,i){super(),this.widget=t,this.length=e,this.deco=i,this.breakAfter=0,this.prevWidget=null}merge(t,e,i,n,r,s){return!(i&&(!(i instanceof ot&&this.widget.compare(i.widget))||t>0&&r<=0||e<this.length&&s<=0)||(this.length=t+(i?i.length:0)+(this.length-e),0))}domAtPos(t){return 0==t?M.before(this.dom):M.after(this.dom,t==this.length)}split(t){let e=this.length-t;this.length=t;let i=new ot(this.widget,e,this.deco);return i.breakAfter=this.breakAfter,i}get children(){return N}sync(t){this.dom&&this.widget.updateDOM(this.dom,t)||(this.dom&&this.prevWidget&&this.prevWidget.destroy(this.dom),this.prevWidget=null,this.setDOM(this.widget.toDOM(t)),this.widget.editable||(this.dom.contentEditable="false"))}get overrideDOMText(){return this.parent?this.parent.view.state.doc.slice(this.posAtStart,this.posAtEnd):n.Text.empty}domBoundsAround(){return null}become(t){return t instanceof ot&&t.widget.constructor==this.widget.constructor&&(t.widget.compare(this.widget)||this.markDirty(!0),this.dom&&!this.prevWidget&&(this.prevWidget=this.widget),this.widget=t.widget,this.length=t.length,this.deco=t.deco,this.breakAfter=t.breakAfter,!0)}ignoreMutation(){return!0}ignoreEvent(t){return this.widget.ignoreEvent(t)}get isEditable(){return!1}get isWidget(){return!0}coordsAt(t,e){return this.widget.coordsAt(this.dom,t,e)}destroy(){super.destroy(),this.dom&&this.widget.destroy(this.dom)}covers(t){let{startSide:e,endSide:i}=this.deco;return e!=i&&(t<0?e<0:i>0)}}class at{eq(t){return!1}updateDOM(t,e){return!1}compare(t){return this==t||this.constructor==t.constructor&&this.eq(t)}get estimatedHeight(){return-1}get lineBreaks(){return 0}ignoreEvent(t){return!0}coordsAt(t,e,i){return null}get isHidden(){return!1}get editable(){return!1}destroy(t){}}var lt,ht;e.BlockType=void 0,(lt=e.BlockType||(e.BlockType={}))[lt.Text=0]="Text",lt[lt.WidgetBefore=1]="WidgetBefore",lt[lt.WidgetAfter=2]="WidgetAfter",lt[lt.WidgetRange=3]="WidgetRange";class ct extends n.RangeValue{constructor(t,e,i,n){super(),this.startSide=t,this.endSide=e,this.widget=i,this.spec=n}get heightRelevant(){return!1}static mark(t){return new ut(t)}static widget(t){let e=Math.max(-1e4,Math.min(1e4,t.side||0)),i=!!t.block;return e+=i&&!t.inlineOrder?e>0?3e8:-4e8:e>0?1e8:-1e8,new ft(t,e,e,i,t.widget||null,!1)}static replace(t){let e,i,n=!!t.block;if(t.isBlockGap)e=-5e8,i=4e8;else{let{start:r,end:s}=pt(t,n);e=(r?n?-3e8:-1:5e8)-1,i=1+(s?n?2e8:1:-6e8)}return new ft(t,e,i,n,t.widget||null,!0)}static line(t){return new dt(t)}static set(t,e=!1){return n.RangeSet.of(t,e)}hasHeight(){return!!this.widget&&this.widget.estimatedHeight>-1}}ct.none=n.RangeSet.empty;class ut extends ct{constructor(t){let{start:e,end:i}=pt(t);super(e?-1:5e8,i?1:-6e8,null,t),this.tagName=t.tagName||"span",this.class=t.class||"",this.attrs=t.attributes||null}eq(t){var e,i;return this==t||t instanceof ut&&this.tagName==t.tagName&&(this.class||(null===(e=this.attrs)||void 0===e?void 0:e.class))==(t.class||(null===(i=t.attrs)||void 0===i?void 0:i.class))&&it(this.attrs,t.attrs,"class")}range(t,e=t){if(t>=e)throw new RangeError("Mark decorations may not be empty");return super.range(t,e)}}ut.prototype.point=!1;class dt extends ct{constructor(t){super(-2e8,-2e8,null,t)}eq(t){return t instanceof dt&&this.spec.class==t.spec.class&&it(this.spec.attributes,t.spec.attributes)}range(t,e=t){if(e!=t)throw new RangeError("Line decoration ranges must be zero-length");return super.range(t,e)}}dt.prototype.mapMode=n.MapMode.TrackBefore,dt.prototype.point=!0;class ft extends ct{constructor(t,e,i,r,s,o){super(e,i,s,t),this.block=r,this.isReplace=o,this.mapMode=r?e<=0?n.MapMode.TrackBefore:n.MapMode.TrackAfter:n.MapMode.TrackDel}get type(){return this.startSide!=this.endSide?e.BlockType.WidgetRange:this.startSide<=0?e.BlockType.WidgetBefore:e.BlockType.WidgetAfter}get heightRelevant(){return this.block||!!this.widget&&(this.widget.estimatedHeight>=5||this.widget.lineBreaks>0)}eq(t){return t instanceof ft&&((e=this.widget)==(i=t.widget)||!!(e&&i&&e.compare(i)))&&this.block==t.block&&this.startSide==t.startSide&&this.endSide==t.endSide;var e,i}range(t,e=t){if(this.isReplace&&(t>e||t==e&&this.startSide>0&&this.endSide<=0))throw new RangeError("Invalid range for replacement decoration");if(!this.isReplace&&e!=t)throw new RangeError("Widget decorations can only have zero-length ranges");return super.range(t,e)}}function pt(t,e=!1){let{inclusiveStart:i,inclusiveEnd:n}=t;return null==i&&(i=t.inclusive),null==n&&(n=t.inclusive),{start:null!=i?i:e,end:null!=n?n:e}}function mt(t,e,i,n=0){let r=i.length-1;r>=0&&i[r]+n>=t?i[r]=Math.max(i[r],e):i.push(t,e)}ft.prototype.point=!0;class gt{constructor(t,e,i,n){this.doc=t,this.pos=e,this.end=i,this.disallowBlockEffectsFor=n,this.content=[],this.curLine=null,this.breakAtStart=0,this.pendingBuffer=0,this.bufferMarks=[],this.atCursorPos=!0,this.openStart=-1,this.openEnd=-1,this.text="",this.textOff=0,this.cursor=t.iter(),this.skip=e}posCovered(){if(0==this.content.length)return!this.breakAtStart&&this.doc.lineAt(this.pos).from!=this.pos;let t=this.content[this.content.length-1];return!(t.breakAfter||t instanceof ot&&t.deco.endSide<0)}getLine(){return this.curLine||(this.content.push(this.curLine=new st),this.atCursorPos=!0),this.curLine}flushBuffer(t=this.bufferMarks){this.pendingBuffer&&(this.curLine.append(vt(new J(-1),t),t.length),this.pendingBuffer=0)}addBlockWidget(t){this.flushBuffer(),this.curLine=null,this.content.push(t)}finish(t){this.pendingBuffer&&t<=this.bufferMarks.length?this.flushBuffer():this.pendingBuffer=0,this.posCovered()||t&&this.content.length&&this.content[this.content.length-1]instanceof ot||this.getLine()}buildText(t,e,i){for(;t>0;){if(this.textOff==this.text.length){let{value:e,lineBreak:i,done:n}=this.cursor.next(this.skip);if(this.skip=0,n)throw new Error("Ran out of text content when drawing inline views");if(i){this.posCovered()||this.getLine(),this.content.length?this.content[this.content.length-1].breakAfter=1:this.breakAtStart=1,this.flushBuffer(),this.curLine=null,this.atCursorPos=!0,t--;continue}this.text=e,this.textOff=0}let n=Math.min(this.text.length-this.textOff,t,512);this.flushBuffer(e.slice(e.length-i)),this.getLine().append(vt(new G(this.text.slice(this.textOff,this.textOff+n)),e),i),this.atCursorPos=!0,this.textOff+=n,t-=n,i=0}}span(t,e,i,n){this.buildText(e-t,i,n),this.pos=e,this.openStart<0&&(this.openStart=n)}point(t,e,i,n,r,s){if(this.disallowBlockEffectsFor[s]&&i instanceof ft){if(i.block)throw new RangeError("Block decorations may not be specified via plugins");if(e>this.doc.lineAt(this.pos).to)throw new RangeError("Decorations that replace line breaks may not be specified via plugins")}let o=e-t;if(i instanceof ft)if(i.block)i.startSide>0&&!this.posCovered()&&this.getLine(),this.addBlockWidget(new ot(i.widget||wt.block,o,i));else{let s=Y.create(i.widget||wt.inline,o,o?0:i.startSide),a=this.atCursorPos&&!s.isEditable&&r<=n.length&&(t<e||i.startSide>0),l=!s.isEditable&&(t<e||r>n.length||i.startSide<=0),h=this.getLine();2!=this.pendingBuffer||a||s.isEditable||(this.pendingBuffer=0),this.flushBuffer(n),a&&(h.append(vt(new J(1),n),r),r=n.length+Math.max(0,r-n.length)),h.append(vt(s,n),r),this.atCursorPos=l,this.pendingBuffer=l?t<e||r>n.length?1:2:0,this.pendingBuffer&&(this.bufferMarks=n.slice())}else this.doc.lineAt(this.pos).from==this.pos&&this.getLine().addLineDeco(i);o&&(this.textOff+o<=this.text.length?this.textOff+=o:(this.skip+=o-(this.text.length-this.textOff),this.text="",this.textOff=0),this.pos=e),this.openStart<0&&(this.openStart=r)}static build(t,e,i,r,s){let o=new gt(t,e,i,s);return o.openEnd=n.RangeSet.spans(r,e,i,o),o.openStart<0&&(o.openStart=o.openEnd),o.finish(o.openEnd),o}}function vt(t,e){for(let i of e)t=new $(i,[t],t.length);return t}class wt extends at{constructor(t){super(),this.tag=t}eq(t){return t.tag==this.tag}toDOM(){return document.createElement(this.tag)}updateDOM(t){return t.nodeName.toLowerCase()==this.tag}get isHidden(){return!0}}wt.inline=new wt("span"),wt.block=new wt("div"),e.Direction=void 0,(ht=e.Direction||(e.Direction={}))[ht.LTR=0]="LTR",ht[ht.RTL=1]="RTL";const yt=e.Direction.LTR,bt=e.Direction.RTL;function St(t){let e=[];for(let i=0;i<t.length;i++)e.push(1<<+t[i]);return e}const xt=St("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008"),Ct=St("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333"),Et=Object.create(null),kt=[];for(let t of["()","[]","{}"]){let e=t.charCodeAt(0),i=t.charCodeAt(1);Et[e]=i,Et[i]=-e}function At(t){return t<=247?xt[t]:1424<=t&&t<=1524?2:1536<=t&&t<=1785?Ct[t-1536]:1774<=t&&t<=2220?4:8192<=t&&t<=8204?256:64336<=t&&t<=65023?4:1}const Tt=/[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;class Mt{get dir(){return this.level%2?bt:yt}constructor(t,e,i){this.from=t,this.to=e,this.level=i}side(t,e){return this.dir==e==t?this.to:this.from}forward(t,e){return t==(this.dir==e)}static find(t,e,i,n){let r=-1;for(let s=0;s<t.length;s++){let o=t[s];if(o.from<=e&&o.to>=e){if(o.level==i)return s;(r<0||(0!=n?n<0?o.from<e:o.to>e:t[r].level>o.level))&&(r=s)}}if(r<0)throw new RangeError("Index out of range");return r}}function Nt(t,e){if(t.length!=e.length)return!1;for(let i=0;i<t.length;i++){let n=t[i],r=e[i];if(n.from!=r.from||n.to!=r.to||n.direction!=r.direction||!Nt(n.inner,r.inner))return!1}return!0}const Pt=[];function Ot(t,e,i,n,r,s,o){let a=n%2?2:1;if(n%2==r%2)for(let l=e,h=0;l<i;){let e=!0,c=!1;if(h==s.length||l<s[h].from){let t=Pt[l];t!=a&&(e=!1,c=16==t)}let u=e||1!=a?null:[],d=e?n:n+1,f=l;t:for(;;)if(h<s.length&&f==s[h].from){if(c)break t;let p=s[h];if(!e)for(let t=p.to,e=h+1;;){if(t==i)break t;if(!(e<s.length&&s[e].from==t)){if(Pt[t]==a)break t;break}t=s[e++].to}h++,u?u.push(p):(p.from>l&&o.push(new Mt(l,p.from,d)),Dt(t,p.direction==yt!=!(d%2)?n+1:n,r,p.inner,p.from,p.to,o),l=p.to),f=p.to}else{if(f==i||(e?Pt[f]!=a:Pt[f]==a))break;f++}u?Ot(t,l,f,n+1,r,u,o):l<f&&o.push(new Mt(l,f,d)),l=f}else for(let l=i,h=s.length;l>e;){let i=!0,c=!1;if(!h||l>s[h-1].to){let t=Pt[l-1];t!=a&&(i=!1,c=16==t)}let u=i||1!=a?null:[],d=i?n:n+1,f=l;t:for(;;)if(h&&f==s[h-1].to){if(c)break t;let p=s[--h];if(!i)for(let t=p.from,i=h;;){if(t==e)break t;if(!i||s[i-1].to!=t){if(Pt[t-1]==a)break t;break}t=s[--i].from}u?u.push(p):(p.to<l&&o.push(new Mt(p.to,l,d)),Dt(t,p.direction==yt!=!(d%2)?n+1:n,r,p.inner,p.from,p.to,o),l=p.from),f=p.from}else{if(f==e||(i?Pt[f-1]!=a:Pt[f-1]==a))break;f--}u?Ot(t,f,l,n+1,r,u,o):f<l&&o.push(new Mt(f,l,d)),l=f}}function Dt(t,e,i,n,r,s,o){let a=e%2?2:1;!function(t,e,i,n,r){for(let s=0;s<=n.length;s++){let o=s?n[s-1].to:e,a=s<n.length?n[s].from:i,l=s?256:r;for(let e=o,i=l,n=l;e<a;e++){let r=At(t.charCodeAt(e));512==r?r=i:8==r&&4==n&&(r=16),Pt[e]=4==r?2:r,7&r&&(n=r),i=r}for(let t=o,e=l,n=l;t<a;t++){let r=Pt[t];if(128==r)t<a-1&&e==Pt[t+1]&&24&e?r=Pt[t]=e:Pt[t]=256;else if(64==r){let r=t+1;for(;r<a&&64==Pt[r];)r++;let s=t&&8==e||r<i&&8==Pt[r]?1==n?1:8:256;for(let e=t;e<r;e++)Pt[e]=s;t=r-1}else 8==r&&1==n&&(Pt[t]=1);e=r,7&r&&(n=r)}}}(t,r,s,n,a),function(t,e,i,n,r){let s=1==r?2:1;for(let o=0,a=0,l=0;o<=n.length;o++){let h=o?n[o-1].to:e,c=o<n.length?n[o].from:i;for(let e,i,n,o=h;o<c;o++)if(i=Et[e=t.charCodeAt(o)])if(i<0){for(let t=a-3;t>=0;t-=3)if(kt[t+1]==-i){let e=kt[t+2],i=2&e?r:4&e?1&e?s:r:0;i&&(Pt[o]=Pt[kt[t]]=i),a=t;break}}else{if(189==kt.length)break;kt[a++]=o,kt[a++]=e,kt[a++]=l}else if(2==(n=Pt[o])||1==n){let t=n==r;l=t?0:1;for(let e=a-3;e>=0;e-=3){let i=kt[e+2];if(2&i)break;if(t)kt[e+2]|=2;else{if(4&i)break;kt[e+2]|=4}}}}}(t,r,s,n,a),function(t,e,i,n){for(let r=0,s=n;r<=i.length;r++){let o=r?i[r-1].to:t,a=r<i.length?i[r].from:e;for(let l=o;l<a;){let o=Pt[l];if(256==o){let o=l+1;for(;;)if(o==a){if(r==i.length)break;o=i[r++].to,a=r<i.length?i[r].from:e}else{if(256!=Pt[o])break;o++}let h=1==s,c=h==(1==(o<e?Pt[o]:n))?h?1:2:n;for(let e=o,n=r,s=n?i[n-1].to:t;e>l;)e==s&&(e=i[--n].from,s=n?i[n-1].to:t),Pt[--e]=c;l=o}else s=o,l++}}}(r,s,n,a),Ot(t,r,s,e,i,n,o)}function Rt(t,e,i){if(!t)return[new Mt(0,0,e==bt?1:0)];if(e==yt&&!i.length&&!Tt.test(t))return Lt(t.length);if(i.length)for(;t.length>Pt.length;)Pt[Pt.length]=256;let n=[],r=e==yt?0:1;return Dt(t,r,r,i,0,t.length,n),n}function Lt(t){return[new Mt(0,t,0)]}let It="";function Bt(t,e,i,r,s){var o;let a=r.head-t.from,l=Mt.find(e,a,null!==(o=r.bidiLevel)&&void 0!==o?o:-1,r.assoc),h=e[l],c=h.side(s,i);if(a==c){let t=l+=s?1:-1;if(t<0||t>=e.length)return null;h=e[l=t],a=h.side(!s,i),c=h.side(s,i)}let u=n.findClusterBreak(t.text,a,h.forward(s,i));(u<h.from||u>h.to)&&(u=c),It=t.text.slice(Math.min(a,u),Math.max(a,u));let d=l==(s?e.length-1:0)?null:e[l+(s?1:-1)];return d&&u==c&&d.level+(s?0:1)<h.level?n.EditorSelection.cursor(d.side(!s,i)+t.from,d.forward(s,i)?1:-1,d.level):n.EditorSelection.cursor(u+t.from,h.forward(s,i)?-1:1,h.level)}function Ft(t,e,i){for(let n=e;n<i;n++){let e=At(t.charCodeAt(n));if(1==e)return yt;if(2==e||4==e)return bt}return yt}const _t=n.Facet.define(),qt=n.Facet.define(),Vt=n.Facet.define(),Ht=n.Facet.define(),Wt=n.Facet.define(),zt=n.Facet.define(),jt=n.Facet.define(),Ut=n.Facet.define({combine:t=>t.some((t=>t))}),Kt=n.Facet.define({combine:t=>t.some((t=>t))}),Gt=n.Facet.define();class $t{constructor(t,e="nearest",i="nearest",n=5,r=5,s=!1){this.range=t,this.y=e,this.x=i,this.yMargin=n,this.xMargin=r,this.isSnapshot=s}map(t){return t.empty?this:new $t(this.range.map(t),this.y,this.x,this.yMargin,this.xMargin,this.isSnapshot)}clip(t){return this.range.to<=t.doc.length?this:new $t(n.EditorSelection.cursor(t.doc.length),this.y,this.x,this.yMargin,this.xMargin,this.isSnapshot)}}const Yt=n.StateEffect.define({map:(t,e)=>t.map(e)}),Jt=n.StateEffect.define();function Xt(t,e,i){let n=t.facet(Ht);n.length?n[0](e):window.onerror?window.onerror(String(e),i,void 0,void 0,e):i?console.error(i+":",e):console.error(e)}const Zt=n.Facet.define({combine:t=>!t.length||t[0]});let Qt=0;const te=n.Facet.define();class ee{constructor(t,e,i,n,r){this.id=t,this.create=e,this.domEventHandlers=i,this.domEventObservers=n,this.extension=r(this)}static define(t,e){const{eventHandlers:i,eventObservers:n,provide:r,decorations:s}=e||{};return new ee(Qt++,t,i,n,(t=>{let e=[te.of(t)];return s&&e.push(se.of((e=>{let i=e.plugin(t);return i?s(i):ct.none}))),r&&e.push(r(t)),e}))}static fromClass(t,e){return ee.define((e=>new t(e)),e)}}class ie{constructor(t){this.spec=t,this.mustUpdate=null,this.value=null}update(t){if(this.value){if(this.mustUpdate){let t=this.mustUpdate;if(this.mustUpdate=null,this.value.update)try{this.value.update(t)}catch(e){if(Xt(t.state,e,"CodeMirror plugin crashed"),this.value.destroy)try{this.value.destroy()}catch(t){}this.deactivate()}}}else if(this.spec)try{this.value=this.spec.create(t)}catch(e){Xt(t.state,e,"CodeMirror plugin crashed"),this.deactivate()}return this}destroy(t){var e;if(null===(e=this.value)||void 0===e?void 0:e.destroy)try{this.value.destroy()}catch(e){Xt(t.state,e,"CodeMirror plugin crashed")}}deactivate(){this.spec=this.value=null}}const ne=n.Facet.define(),re=n.Facet.define(),se=n.Facet.define(),oe=n.Facet.define(),ae=n.Facet.define(),le=n.Facet.define();function he(t,e){let i=t.state.facet(le);if(!i.length)return i;let r=i.map((e=>e instanceof Function?e(t):e)),s=[];return n.RangeSet.spans(r,e.from,e.to,{point(){},span(t,i,n,r){let o=t-e.from,a=i-e.from,l=s;for(let t=n.length-1;t>=0;t--,r--){let i,s=n[t].spec.bidiIsolate;if(null==s&&(s=Ft(e.text,o,a)),r>0&&l.length&&(i=l[l.length-1]).to==o&&i.direction==s)i.to=a,l=i.inner;else{let t={from:o,to:a,direction:s,inner:[]};l.push(t),l=t.inner}}}}),s}const ce=n.Facet.define();function ue(t){let e=0,i=0,n=0,r=0;for(let s of t.state.facet(ce)){let o=s(t);o&&(null!=o.left&&(e=Math.max(e,o.left)),null!=o.right&&(i=Math.max(i,o.right)),null!=o.top&&(n=Math.max(n,o.top)),null!=o.bottom&&(r=Math.max(r,o.bottom)))}return{left:e,right:i,top:n,bottom:r}}const de=n.Facet.define();class fe{constructor(t,e,i,n){this.fromA=t,this.toA=e,this.fromB=i,this.toB=n}join(t){return new fe(Math.min(this.fromA,t.fromA),Math.max(this.toA,t.toA),Math.min(this.fromB,t.fromB),Math.max(this.toB,t.toB))}addToSet(t){let e=t.length,i=this;for(;e>0;e--){let n=t[e-1];if(!(n.fromA>i.toA)){if(n.toA<i.fromA)break;i=i.join(n),t.splice(e-1,1)}}return t.splice(e,0,i),t}static extendWithRanges(t,e){if(0==e.length)return t;let i=[];for(let n=0,r=0,s=0,o=0;;n++){let a=n==t.length?null:t[n],l=s-o,h=a?a.fromB:1e9;for(;r<e.length&&e[r]<h;){let t=e[r],n=e[r+1],s=Math.max(o,t),a=Math.min(h,n);if(s<=a&&new fe(s+l,a+l,s,a).addToSet(i),n>h)break;r+=2}if(!a)return i;new fe(a.fromA,a.toA,a.fromB,a.toB).addToSet(i),s=a.toA,o=a.toB}}}class pe{constructor(t,e,i){this.view=t,this.state=e,this.transactions=i,this.flags=0,this.startState=t.state,this.changes=n.ChangeSet.empty(this.startState.doc.length);for(let t of i)this.changes=this.changes.compose(t.changes);let r=[];this.changes.iterChangedRanges(((t,e,i,n)=>r.push(new fe(t,e,i,n)))),this.changedRanges=r}static create(t,e,i){return new pe(t,e,i)}get viewportChanged(){return(4&this.flags)>0}get heightChanged(){return(2&this.flags)>0}get geometryChanged(){return this.docChanged||(10&this.flags)>0}get focusChanged(){return(1&this.flags)>0}get docChanged(){return!this.changes.empty}get selectionSet(){return this.transactions.some((t=>t.selection))}get empty(){return 0==this.flags&&0==this.transactions.length}}class me extends P{get length(){return this.view.state.doc.length}constructor(t){super(),this.view=t,this.decorations=[],this.dynamicDecorationMap=[!1],this.domChanged=null,this.hasComposition=null,this.markedForComposition=new Set,this.editContextFormatting=ct.none,this.lastCompositionAfterCursor=!1,this.minWidth=0,this.minWidthFrom=0,this.minWidthTo=0,this.impreciseAnchor=null,this.impreciseHead=null,this.forceSelection=!1,this.lastUpdate=Date.now(),this.setDOM(t.contentDOM),this.children=[new st],this.children[0].setParent(this),this.updateDeco(),this.updateInner([new fe(0,0,0,t.state.doc.length)],0,null)}update(t){var e;let i=t.changedRanges;this.minWidth>0&&i.length&&(i.every((({fromA:t,toA:e})=>e<this.minWidthFrom||t>this.minWidthTo))?(this.minWidthFrom=t.changes.mapPos(this.minWidthFrom,1),this.minWidthTo=t.changes.mapPos(this.minWidthTo,1)):this.minWidth=this.minWidthFrom=this.minWidthTo=0),this.updateEditContextFormatting(t);let r=-1;this.view.inputState.composing>=0&&!this.view.observer.editContext&&((null===(e=this.domChanged)||void 0===e?void 0:e.newSel)?r=this.domChanged.newSel.head:function(t,e){let i=!1;return e&&t.iterChangedRanges(((t,n)=>{t<e.to&&n>e.from&&(i=!0)})),i}(t.changes,this.hasComposition)||t.selectionSet||(r=t.state.selection.main.head));let s=r>-1?function(t,e,i){let n=ve(t,i);if(!n)return null;let{node:r,from:s,to:o}=n,a=r.nodeValue;if(/[\n\r]/.test(a))return null;if(t.state.doc.sliceString(n.from,n.to)!=a)return null;let l=e.invertedDesc,h=new fe(l.mapPos(s),l.mapPos(o),s,o),c=[];for(let e=r.parentNode;;e=e.parentNode){let i=P.get(e);if(i instanceof $)c.push({node:e,deco:i.mark});else{if(i instanceof st||"DIV"==e.nodeName&&e.parentNode==t.contentDOM)return{range:h,text:r,marks:c,line:e};if(e==t.contentDOM)return null;c.push({node:e,deco:new ut({inclusive:!0,attributes:rt(e),tagName:e.tagName.toLowerCase()})})}}}(this.view,t.changes,r):null;if(this.domChanged=null,this.hasComposition){this.markedForComposition.clear();let{from:e,to:n}=this.hasComposition;i=new fe(e,n,t.changes.mapPos(e,-1),t.changes.mapPos(n,1)).addToSet(i.slice())}this.hasComposition=s?{from:s.range.fromB,to:s.range.toB}:null,(K.ie||K.chrome)&&!s&&t&&t.state.doc.lines!=t.startState.doc.lines&&(this.forceSelection=!0);let o=function(t,e,i){let r=new we;return n.RangeSet.compare(t,e,i,r),r.changes}(this.decorations,this.updateDeco(),t.changes);return i=fe.extendWithRanges(i,o),!!(7&this.flags||0!=i.length)&&(this.updateInner(i,t.startState.doc.length,s),t.transactions.length&&(this.lastUpdate=Date.now()),!0)}updateInner(t,e,i){this.view.viewState.mustMeasureContent=!0,this.updateChildren(t,e,i);let{observer:n}=this.view;n.ignore((()=>{this.dom.style.height=this.view.viewState.contentHeight/this.view.scaleY+"px",this.dom.style.flexBasis=this.minWidth?this.minWidth+"px":"";let t=K.chrome||K.ios?{node:n.selectionRange.focusNode,written:!1}:void 0;this.sync(this.view,t),this.flags&=-8,t&&(t.written||n.selectionRange.focusNode!=t.node)&&(this.forceSelection=!0),this.dom.style.height=""})),this.markedForComposition.forEach((t=>t.flags&=-9));let r=[];if(this.view.viewport.from||this.view.viewport.to<this.view.state.doc.length)for(let t of this.children)t instanceof ot&&t.widget instanceof ge&&r.push(t.dom);n.updateGaps(r)}updateChildren(t,e,i){let n=i?i.range.addToSet(t.slice()):t,r=this.childCursor(e);for(let t=n.length-1;;t--){let e=t>=0?n[t]:null;if(!e)break;let s,o,a,l,{fromA:h,toA:c,fromB:u,toB:d}=e;if(i&&i.range.fromB<d&&i.range.toB>u){let t=gt.build(this.view.state.doc,u,i.range.fromB,this.decorations,this.dynamicDecorationMap),e=gt.build(this.view.state.doc,i.range.toB,d,this.decorations,this.dynamicDecorationMap);o=t.breakAtStart,a=t.openStart,l=e.openEnd;let n=this.compositionView(i);e.breakAtStart?n.breakAfter=1:e.content.length&&n.merge(n.length,n.length,e.content[0],!1,e.openStart,0)&&(n.breakAfter=e.content[0].breakAfter,e.content.shift()),t.content.length&&n.merge(0,0,t.content[t.content.length-1],!0,0,t.openEnd)&&t.content.pop(),s=t.content.concat(n).concat(e.content)}else({content:s,breakAtStart:o,openStart:a,openEnd:l}=gt.build(this.view.state.doc,u,d,this.decorations,this.dynamicDecorationMap));let{i:f,off:p}=r.findPos(c,1),{i:m,off:g}=r.findPos(h,-1);R(this,m,g,f,p,s,o,a,l)}i&&this.fixCompositionDOM(i)}updateEditContextFormatting(t){this.editContextFormatting=this.editContextFormatting.map(t.changes);for(let e of t.transactions)for(let t of e.effects)t.is(Jt)&&(this.editContextFormatting=t.value)}compositionView(t){let e=new G(t.text.nodeValue);e.flags|=8;for(let{deco:i}of t.marks)e=new $(i,[e],e.length);let i=new st;return i.append(e,0),i}fixCompositionDOM(t){let e=(t,e)=>{e.flags|=8|(e.children.some((t=>7&t.flags))?1:0),this.markedForComposition.add(e);let i=P.get(t);i&&i!=e&&(i.dom=null),e.setDOM(t)},i=this.childPos(t.range.fromB,1),n=this.children[i.i];e(t.line,n);for(let r=t.marks.length-1;r>=-1;r--)i=n.childPos(i.off,1),n=n.children[i.i],e(r>=0?t.marks[r].node:t.text,n)}updateSelection(t=!1,e=!1){!t&&this.view.observer.selectionRange.focusNode||this.view.observer.readSelectionRange();let i=this.view.root.activeElement,n=i==this.dom,r=!n&&l(this.dom,this.view.observer.selectionRange)&&!(i&&this.dom.contains(i));if(!(n||e||r))return;let s=this.forceSelection;this.forceSelection=!1;let a=this.view.state.selection.main,h=this.moveToLine(this.domAtPos(a.anchor)),u=a.empty?h:this.moveToLine(this.domAtPos(a.head));if(K.gecko&&a.empty&&!this.hasComposition&&1==(d=h).node.nodeType&&d.node.firstChild&&(0==d.offset||"false"==d.node.childNodes[d.offset-1].contentEditable)&&(d.offset==d.node.childNodes.length||"false"==d.node.childNodes[d.offset].contentEditable)){let t=document.createTextNode("");this.view.observer.ignore((()=>h.node.insertBefore(t,h.node.childNodes[h.offset]||null))),h=u=new M(t,0),s=!0}var d;let f=this.view.observer.selectionRange;!s&&f.focusNode&&(c(h.node,h.offset,f.anchorNode,f.anchorOffset)&&c(u.node,u.offset,f.focusNode,f.focusOffset)||this.suppressWidgetCursorChange(f,a))||(this.view.observer.ignore((()=>{K.android&&K.chrome&&this.dom.contains(f.focusNode)&&function(t,e){for(let i=t;i&&i!=e;i=i.assignedSlot||i.parentNode)if(1==i.nodeType&&"false"==i.contentEditable)return!0;return!1}(f.focusNode,this.dom)&&(this.dom.blur(),this.dom.focus({preventScroll:!0}));let t=o(this.view.root);if(t)if(a.empty){if(K.gecko){let t=(e=h.node,n=h.offset,1!=e.nodeType?0:(n&&"false"==e.childNodes[n-1].contentEditable?1:0)|(n<e.childNodes.length&&"false"==e.childNodes[n].contentEditable?2:0));if(t&&3!=t){let e=(1==t?A:T)(h.node,h.offset);e&&(h=new M(e.node,e.offset))}}t.collapse(h.node,h.offset),null!=a.bidiLevel&&void 0!==t.caretBidiLevel&&(t.caretBidiLevel=a.bidiLevel)}else if(t.extend){t.collapse(h.node,h.offset);try{t.extend(u.node,u.offset)}catch(t){}}else{let e=document.createRange();a.anchor>a.head&&([h,u]=[u,h]),e.setEnd(u.node,u.offset),e.setStart(h.node,h.offset),t.removeAllRanges(),t.addRange(e)}var e,n;r&&this.view.root.activeElement==this.dom&&(this.dom.blur(),i&&i.focus())})),this.view.observer.setSelectionRange(h,u)),this.impreciseAnchor=h.precise?null:new M(f.anchorNode,f.anchorOffset),this.impreciseHead=u.precise?null:new M(f.focusNode,f.focusOffset)}suppressWidgetCursorChange(t,e){return this.hasComposition&&e.empty&&c(t.focusNode,t.focusOffset,t.anchorNode,t.anchorOffset)&&this.posFromDOM(t.focusNode,t.focusOffset)==e.head}enforceCursorAssoc(){if(this.hasComposition)return;let{view:t}=this,e=t.state.selection.main,i=o(t.root),{anchorNode:n,anchorOffset:r}=t.observer.selectionRange;if(!(i&&e.empty&&e.assoc&&i.modify))return;let s=st.find(this,e.head);if(!s)return;let a=s.posAtStart;if(e.head==a||e.head==a+s.length)return;let l=this.coordsAt(e.head,-1),h=this.coordsAt(e.head,1);if(!l||!h||l.bottom>h.top)return;let c=this.domAtPos(e.head+e.assoc);i.collapse(c.node,c.offset),i.modify("move",e.assoc<0?"forward":"backward","lineboundary"),t.observer.readSelectionRange();let u=t.observer.selectionRange;t.docView.posFromDOM(u.anchorNode,u.anchorOffset)!=e.from&&i.collapse(n,r)}moveToLine(t){let e,i=this.dom;if(t.node!=i)return t;for(let n=t.offset;!e&&n<i.childNodes.length;n++){let t=P.get(i.childNodes[n]);t instanceof st&&(e=t.domAtPos(0))}for(let n=t.offset-1;!e&&n>=0;n--){let t=P.get(i.childNodes[n]);t instanceof st&&(e=t.domAtPos(t.length))}return e?new M(e.node,e.offset,!0):t}nearest(t){for(let e=t;e;){let t=P.get(e);if(t&&t.rootView==this)return t;e=e.parentNode}return null}posFromDOM(t,e){let i=this.nearest(t);if(!i)throw new RangeError("Trying to find position for a DOM position outside of the document");return i.localPosFromDOM(t,e)+i.posAtStart}domAtPos(t){let{i:e,off:i}=this.childCursor().findPos(t,-1);for(;e<this.children.length-1;){let t=this.children[e];if(i<t.length||t instanceof st)break;e++,i=0}return this.children[e].domAtPos(i)}coordsAt(t,e){let i=null,n=0;for(let r=this.length,s=this.children.length-1;s>=0;s--){let o=this.children[s],a=r-o.breakAfter,l=a-o.length;if(a<t)break;if(l<=t&&(l<t||o.covers(-1))&&(a>t||o.covers(1))&&(!i||o instanceof st&&!(i instanceof st&&e>=0)))i=o,n=l;else if(i&&l==t&&a==t&&o instanceof ot&&Math.abs(e)<2){if(o.deco.startSide<0)break;s&&(i=null)}r=l}return i?i.coordsAt(t-n,e):null}coordsForChar(t){let{i:e,off:i}=this.childPos(t,1),r=this.children[e];if(!(r instanceof st))return null;for(;r.children.length;){let{i:t,off:e}=r.childPos(i,1);for(;;t++){if(t==r.children.length)return null;if((r=r.children[t]).length)break}i=e}if(!(r instanceof G))return null;let s=n.findClusterBreak(r.text,i);if(s==i)return null;let o=x(r.dom,i,s).getClientRects();for(let t=0;t<o.length;t++){let e=o[t];if(t==o.length-1||e.top<e.bottom&&e.left<e.right)return e}return null}measureVisibleLineHeights(t){let i=[],{from:n,to:r}=t,s=this.view.contentDOM.clientWidth,o=s>Math.max(this.view.scrollDOM.clientWidth,this.minWidth)+1,a=-1,l=this.view.textDirection==e.Direction.LTR;for(let t=0,e=0;e<this.children.length;e++){let c=this.children[e],u=t+c.length;if(u>r)break;if(t>=n){let e=c.dom.getBoundingClientRect();if(i.push(e.height),o){let i=c.dom.lastChild,n=i?h(i):[];if(n.length){let i=n[n.length-1],r=l?i.right-e.left:e.right-i.left;r>a&&(a=r,this.minWidth=s,this.minWidthFrom=t,this.minWidthTo=u)}}}t=u+c.breakAfter}return i}textDirectionAt(t){let{i}=this.childPos(t,1);return"rtl"==getComputedStyle(this.children[i].dom).direction?e.Direction.RTL:e.Direction.LTR}measureTextSize(){for(let t of this.children)if(t instanceof st){let e=t.measureTextSize();if(e)return e}let t,e,i,n=document.createElement("div");return n.className="cm-line",n.style.width="99999px",n.style.position="absolute",n.textContent="abc def ghi jkl mno pqr stu",this.view.observer.ignore((()=>{this.dom.appendChild(n);let r=h(n.firstChild)[0];t=n.getBoundingClientRect().height,e=r?r.width/27:7,i=r?r.height:t,n.remove()})),{lineHeight:t,charWidth:e,textHeight:i}}childCursor(t=this.length){let e=this.children.length;return e&&(t-=this.children[--e].length),new D(this.children,t,e)}computeBlockGapDeco(){let t=[],e=this.view.viewState;for(let i=0,n=0;;n++){let r=n==e.viewports.length?null:e.viewports[n],s=r?r.from-1:this.length;if(s>i){let n=(e.lineBlockAt(s).bottom-e.lineBlockAt(i).top)/this.view.scaleY;t.push(ct.replace({widget:new ge(n),block:!0,inclusive:!0,isBlockGap:!0}).range(i,s))}if(!r)break;i=r.to+1}return ct.set(t)}updateDeco(){let t=1,e=this.view.state.facet(se).map((e=>(this.dynamicDecorationMap[t++]="function"==typeof e)?e(this.view):e)),i=!1,r=this.view.state.facet(oe).map(((t,e)=>{let n="function"==typeof t;return n&&(i=!0),n?t(this.view):t}));for(r.length&&(this.dynamicDecorationMap[t++]=i,e.push(n.RangeSet.join(r))),this.decorations=[this.editContextFormatting,...e,this.computeBlockGapDeco(),this.view.viewState.lineGapDeco];t<this.decorations.length;)this.dynamicDecorationMap[t++]=!1;return this.decorations}scrollIntoView(t){if(t.isSnapshot){let e=this.view.viewState.lineBlockAt(t.range.head);return this.view.scrollDOM.scrollTop=e.top-t.yMargin,void(this.view.scrollDOM.scrollLeft=t.xMargin)}for(let e of this.view.state.facet(Gt))try{if(e(this.view,t.range,t))return!0}catch(t){Xt(this.view.state,t,"scroll handler")}let i,{range:n}=t,r=this.coordsAt(n.head,n.empty?n.assoc:n.head>n.anchor?-1:1);if(!r)return;!n.empty&&(i=this.coordsAt(n.anchor,n.anchor>n.head?-1:1))&&(r={left:Math.min(r.left,i.left),top:Math.min(r.top,i.top),right:Math.max(r.right,i.right),bottom:Math.max(r.bottom,i.bottom)});let s=ue(this.view),o={left:r.left-s.left,top:r.top-s.top,right:r.right+s.right,bottom:r.bottom+s.bottom},{offsetWidth:a,offsetHeight:l}=this.view.scrollDOM;!function(t,e,i,n,r,s,o,a){let l=t.ownerDocument,h=l.defaultView||window;for(let c=t,u=!1;c&&!u;)if(1==c.nodeType){let t,d=c==l.body,f=1,p=1;if(d)t=g(h);else{if(/^(fixed|sticky)$/.test(getComputedStyle(c).position)&&(u=!0),c.scrollHeight<=c.clientHeight&&c.scrollWidth<=c.clientWidth){c=c.assignedSlot||c.parentNode;continue}let e=c.getBoundingClientRect();({scaleX:f,scaleY:p}=v(c,e)),t={left:e.left,right:e.left+c.clientWidth*f,top:e.top,bottom:e.top+c.clientHeight*p}}let m=0,w=0;if("nearest"==r)e.top<t.top?(w=-(t.top-e.top+o),i>0&&e.bottom>t.bottom+w&&(w=e.bottom-t.bottom+w+o)):e.bottom>t.bottom&&(w=e.bottom-t.bottom+o,i<0&&e.top-w<t.top&&(w=-(t.top+w-e.top+o)));else{let n=e.bottom-e.top,s=t.bottom-t.top;w=("center"==r&&n<=s?e.top+n/2-s/2:"start"==r||"center"==r&&i<0?e.top-o:e.bottom-s+o)-t.top}if("nearest"==n?e.left<t.left?(m=-(t.left-e.left+s),i>0&&e.right>t.right+m&&(m=e.right-t.right+m+s)):e.right>t.right&&(m=e.right-t.right+s,i<0&&e.left<t.left+m&&(m=-(t.left+m-e.left+s))):m=("center"==n?e.left+(e.right-e.left)/2-(t.right-t.left)/2:"start"==n==a?e.left-s:e.right-(t.right-t.left)+s)-t.left,m||w)if(d)h.scrollBy(m,w);else{let t=0,i=0;if(w){let t=c.scrollTop;c.scrollTop+=w/p,i=(c.scrollTop-t)*p}if(m){let e=c.scrollLeft;c.scrollLeft+=m/f,t=(c.scrollLeft-e)*f}e={left:e.left-t,top:e.top-i,right:e.right-t,bottom:e.bottom-i},t&&Math.abs(t-m)<1&&(n="nearest"),i&&Math.abs(i-w)<1&&(r="nearest")}if(d)break;c=c.assignedSlot||c.parentNode}else{if(11!=c.nodeType)break;c=c.host}}(this.view.scrollDOM,o,n.head<n.anchor?-1:1,t.x,t.y,Math.max(Math.min(t.xMargin,a),-a),Math.max(Math.min(t.yMargin,l),-l),this.view.textDirection==e.Direction.LTR)}}class ge extends at{constructor(t){super(),this.height=t}toDOM(){let t=document.createElement("div");return t.className="cm-gap",this.updateDOM(t),t}eq(t){return t.height==this.height}updateDOM(t){return t.style.height=this.height+"px",!0}get editable(){return!0}get estimatedHeight(){return this.height}ignoreEvent(){return!1}}function ve(t,e){let i=t.observer.selectionRange;if(!i.focusNode)return null;let n=A(i.focusNode,i.focusOffset),r=T(i.focusNode,i.focusOffset),s=n||r;if(r&&n&&r.node!=n.node){let e=P.get(r.node);if(!e||e instanceof G&&e.text!=r.node.nodeValue)s=r;else if(t.docView.lastCompositionAfterCursor){let t=P.get(n.node);!t||t instanceof G&&t.text!=n.node.nodeValue||(s=r)}}if(t.docView.lastCompositionAfterCursor=s!=n,!s)return null;let o=e-s.offset;return{from:o,to:o+s.node.nodeValue.length,node:s.node}}let we=class{constructor(){this.changes=[]}compareRange(t,e){mt(t,e,this.changes)}comparePoint(t,e){mt(t,e,this.changes)}};function ye(t,e){return e.left>t?e.left-t:Math.max(0,t-e.right)}function be(t,e){return e.top>t?e.top-t:Math.max(0,t-e.bottom)}function Se(t,e){return t.top<e.bottom-1&&t.bottom>e.top+1}function xe(t,e){return e<t.top?{top:e,left:t.left,right:t.right,bottom:t.bottom}:t}function Ce(t,e){return e>t.bottom?{top:t.top,left:t.left,right:t.right,bottom:e}:t}function Ee(t,e,i){let n,r,s,o,a,l,c,u,d=!1;for(let f=t.firstChild;f;f=f.nextSibling){let t=h(f);for(let h=0;h<t.length;h++){let p=t[h];r&&Se(r,p)&&(p=xe(Ce(p,r.bottom),r.top));let m=ye(e,p),g=be(i,p);if(0==m&&0==g)return 3==f.nodeType?ke(f,e,i):Ee(f,e,i);if(!n||o>g||o==g&&s>m){n=f,r=p,s=m,o=g;let a=g?i<p.top?-1:1:m?e<p.left?-1:1:0;d=!a||(a>0?h<t.length-1:h>0)}0==m?i>p.bottom&&(!c||c.bottom<p.bottom)?(a=f,c=p):i<p.top&&(!u||u.top>p.top)&&(l=f,u=p):c&&Se(c,p)?c=Ce(c,p.bottom):u&&Se(u,p)&&(u=xe(u,p.top))}}if(c&&c.bottom>=i?(n=a,r=c):u&&u.top<=i&&(n=l,r=u),!n)return{node:t,offset:0};let f=Math.max(r.left,Math.min(r.right,e));return 3==n.nodeType?ke(n,f,i):d&&"false"!=n.contentEditable?Ee(n,f,i):{node:t,offset:Array.prototype.indexOf.call(t.childNodes,n)+(e>=(r.left+r.right)/2?1:0)}}function ke(t,e,i){let n=t.nodeValue.length,r=-1,s=1e9,o=0;for(let a=0;a<n;a++){let n=x(t,a,a+1).getClientRects();for(let l=0;l<n.length;l++){let h=n[l];if(h.top==h.bottom)continue;o||(o=e-h.left);let c=(h.top>i?h.top-i:i-h.bottom)-1;if(h.left-1<=e&&h.right+1>=e&&c<s){let i=e>=(h.left+h.right)/2,n=i;if((K.chrome||K.gecko)&&x(t,a).getBoundingClientRect().left==h.right&&(n=!i),c<=0)return{node:t,offset:a+(n?1:0)};r=a+(n?1:0),s=c}}}return{node:t,offset:r>-1?r:o>0?t.nodeValue.length:0}}function Ae(t,i,n,r=-1){var s,o;let a,l=t.contentDOM.getBoundingClientRect(),h=l.top+t.viewState.paddingTop,{docHeight:c}=t.viewState,{x:u,y:d}=i,f=d-h;if(f<0)return 0;if(f>c)return t.state.doc.length;for(let i=t.viewState.heightOracle.textHeight/2,s=!1;a=t.elementAtHeight(f),a.type!=e.BlockType.Text;)for(;f=r>0?a.bottom+i:a.top-i,!(f>=0&&f<=c);){if(s)return n?null:0;s=!0,r=-r}d=h+f;let p=a.from;if(p<t.viewport.from)return 0==t.viewport.from?0:n?null:Te(t,l,a,u,d);if(p>t.viewport.to)return t.viewport.to==t.state.doc.length?t.state.doc.length:n?null:Te(t,l,a,u,d);let m=t.dom.ownerDocument,g=t.root.elementFromPoint?t.root:m,v=g.elementFromPoint(u,d);v&&!t.contentDOM.contains(v)&&(v=null),v||(u=Math.max(l.left+1,Math.min(l.right-1,u)),v=g.elementFromPoint(u,d),v&&!t.contentDOM.contains(v)&&(v=null));let w,y=-1;if(v&&0!=(null===(s=t.docView.nearest(v))||void 0===s?void 0:s.isEditable))if(m.caretPositionFromPoint){let t=m.caretPositionFromPoint(u,d);t&&({offsetNode:w,offset:y}=t)}else if(m.caretRangeFromPoint){let e=m.caretRangeFromPoint(u,d);e&&(({startContainer:w,startOffset:y}=e),(!t.contentDOM.contains(w)||K.safari&&function(t,e,i){let n;if(3!=t.nodeType||e!=(n=t.nodeValue.length))return!1;for(let e=t.nextSibling;e;e=e.nextSibling)if(1!=e.nodeType||"BR"!=e.nodeName)return!1;return x(t,n-1,n).getBoundingClientRect().left>i}(w,y,u)||K.chrome&&function(t,e,i){if(0!=e)return!1;for(let e=t;;){let t=e.parentNode;if(!t||1!=t.nodeType||t.firstChild!=e)return!1;if(t.classList.contains("cm-line"))break;e=t}return i-(1==t.nodeType?t.getBoundingClientRect():x(t,0,Math.max(t.nodeValue.length,1)).getBoundingClientRect()).left>5}(w,y,u))&&(w=void 0))}if(!w||!t.docView.dom.contains(w)){let e=st.find(t.docView,p);if(!e)return f>a.top+a.height/2?a.to:a.from;({node:w,offset:y}=Ee(e.dom,u,d))}let b=t.docView.nearest(w);if(!b)return null;if(b.isWidget&&1==(null===(o=b.dom)||void 0===o?void 0:o.nodeType)){let t=b.dom.getBoundingClientRect();return i.y<t.top||i.y<=t.bottom&&i.x<=(t.left+t.right)/2?b.posAtStart:b.posAtEnd}return b.localPosFromDOM(w,y)+b.posAtStart}function Te(t,e,i,r,s){let o=Math.round((r-e.left)*t.defaultCharacterWidth);if(t.lineWrapping&&i.height>1.5*t.defaultLineHeight){let e=t.viewState.heightOracle.textHeight;o+=Math.floor((s-i.top-.5*(t.defaultLineHeight-e))/e)*t.viewState.heightOracle.lineLength}let a=t.state.sliceDoc(i.from,i.to);return i.from+n.findColumn(a,o,t.state.tabSize)}function Me(t,i){let n=t.lineBlockAt(i);if(Array.isArray(n.type))for(let t of n.type)if(t.to>i||t.to==i&&(t.to==n.to||t.type==e.BlockType.Text))return t;return n}function Ne(t,e,i,n){let r=t.state.doc.lineAt(e.head),s=t.bidiSpans(r),o=t.textDirectionAt(r.from);for(let a=e,l=null;;){let e=Bt(r,s,o,a,i),h=It;if(!e){if(r.number==(i?t.state.doc.lines:1))return a;h="\n",r=t.state.doc.line(r.number+(i?1:-1)),s=t.bidiSpans(r),e=t.visualLineSide(r,!i)}if(l){if(!l(h))return a}else{if(!n)return e;l=n(h)}a=e}}function Pe(t,e,i){for(;;){let n=0;for(let r of t)r.between(e-1,e+1,((t,r,s)=>{if(e>t&&e<r){let s=n||i||(e-t<r-e?-1:1);e=s<0?t:r,n=s}}));if(!n)return e}}function Oe(t,e,i){let r=Pe(t.state.facet(ae).map((e=>e(t))),i.from,e.head>i.from?-1:1);return r==i.from?i:n.EditorSelection.cursor(r,r<i.from?1:-1)}class De{setSelectionOrigin(t){this.lastSelectionOrigin=t,this.lastSelectionTime=Date.now()}constructor(t){this.view=t,this.lastKeyCode=0,this.lastKeyTime=0,this.lastTouchTime=0,this.lastFocusTime=0,this.lastScrollTop=0,this.lastScrollLeft=0,this.pendingIOSKey=void 0,this.tabFocusMode=-1,this.lastSelectionOrigin=null,this.lastSelectionTime=0,this.lastContextMenu=0,this.scrollHandlers=[],this.handlers=Object.create(null),this.composing=-1,this.compositionFirstChange=null,this.compositionEndedAt=0,this.compositionPendingKey=!1,this.compositionPendingChange=!1,this.mouseSelection=null,this.draggedContent=null,this.handleEvent=this.handleEvent.bind(this),this.notifiedFocused=t.hasFocus,K.safari&&t.contentDOM.addEventListener("input",(()=>null)),K.gecko&&function(t){si.has(t)||(si.add(t),t.addEventListener("copy",(()=>{})),t.addEventListener("cut",(()=>{})))}(t.contentDOM.ownerDocument)}handleEvent(t){(function(t,e){if(!e.bubbles)return!0;if(e.defaultPrevented)return!1;for(let i,n=e.target;n!=t.contentDOM;n=n.parentNode)if(!n||11==n.nodeType||(i=P.get(n))&&i.ignoreEvent(e))return!1;return!0})(this.view,t)&&!this.ignoreDuringComposition(t)&&("keydown"==t.type&&this.keydown(t)||this.runHandlers(t.type,t))}runHandlers(t,e){let i=this.handlers[t];if(i){for(let t of i.observers)t(this.view,e);for(let t of i.handlers){if(e.defaultPrevented)break;if(t(this.view,e)){e.preventDefault();break}}}}ensureHandlers(t){let e=Le(t),i=this.handlers,n=this.view.contentDOM;for(let t in e)if("scroll"!=t){let r=!e[t].handlers.length,s=i[t];s&&r!=!s.handlers.length&&(n.removeEventListener(t,this.handleEvent),s=null),s||n.addEventListener(t,this.handleEvent,{passive:r})}for(let t in i)"scroll"==t||e[t]||n.removeEventListener(t,this.handleEvent);this.handlers=e}keydown(t){if(this.lastKeyCode=t.keyCode,this.lastKeyTime=Date.now(),9==t.keyCode&&this.tabFocusMode>-1&&(!this.tabFocusMode||Date.now()<=this.tabFocusMode))return!0;if(this.tabFocusMode>0&&27!=t.keyCode&&Fe.indexOf(t.keyCode)<0&&(this.tabFocusMode=-1),K.android&&K.chrome&&!t.synthetic&&(13==t.keyCode||8==t.keyCode))return this.view.observer.delayAndroidKey(t.key,t.keyCode),!0;let e;return!K.ios||t.synthetic||t.altKey||t.metaKey||!((e=Ie.find((e=>e.keyCode==t.keyCode)))&&!t.ctrlKey||Be.indexOf(t.key)>-1&&t.ctrlKey&&!t.shiftKey)?(229!=t.keyCode&&this.view.observer.forceFlush(),!1):(this.pendingIOSKey=e||t,setTimeout((()=>this.flushIOSKey()),250),!0)}flushIOSKey(t){let e=this.pendingIOSKey;return!!e&&!("Enter"==e.key&&t&&t.from<t.to&&/^\S+$/.test(t.insert.toString()))&&(this.pendingIOSKey=void 0,C(this.view.contentDOM,e.key,e.keyCode,e instanceof KeyboardEvent?e:void 0))}ignoreDuringComposition(t){return!!/^key/.test(t.type)&&(this.composing>0||!!(K.safari&&!K.ios&&this.compositionPendingKey&&Date.now()-this.compositionEndedAt<100)&&(this.compositionPendingKey=!1,!0))}startMouseSelection(t){this.mouseSelection&&this.mouseSelection.destroy(),this.mouseSelection=t}update(t){this.view.observer.update(t),this.mouseSelection&&this.mouseSelection.update(t),this.draggedContent&&t.docChanged&&(this.draggedContent=this.draggedContent.map(t.changes)),t.transactions.length&&(this.lastKeyCode=this.lastSelectionTime=0)}destroy(){this.mouseSelection&&this.mouseSelection.destroy()}}function Re(t,e){return(i,n)=>{try{return e.call(t,n,i)}catch(t){Xt(i.state,t)}}}function Le(t){let e=Object.create(null);function i(t){return e[t]||(e[t]={observers:[],handlers:[]})}for(let e of t){let t=e.spec;if(t&&t.domEventHandlers)for(let n in t.domEventHandlers){let r=t.domEventHandlers[n];r&&i(n).handlers.push(Re(e.value,r))}if(t&&t.domEventObservers)for(let n in t.domEventObservers){let r=t.domEventObservers[n];r&&i(n).observers.push(Re(e.value,r))}}for(let t in Ve)i(t).handlers.push(Ve[t]);for(let t in He)i(t).observers.push(He[t]);return e}const Ie=[{key:"Backspace",keyCode:8,inputType:"deleteContentBackward"},{key:"Enter",keyCode:13,inputType:"insertParagraph"},{key:"Enter",keyCode:13,inputType:"insertLineBreak"},{key:"Delete",keyCode:46,inputType:"deleteContentForward"}],Be="dthko",Fe=[16,17,18,20,91,92,224,225];function _e(t){return.7*Math.max(0,t)+8}class qe{constructor(t,e,i,r){this.view=t,this.startEvent=e,this.style=i,this.mustSelect=r,this.scrollSpeed={x:0,y:0},this.scrolling=-1,this.lastEvent=e,this.scrollParent=function(t){let e=t.ownerDocument;for(let i=t.parentNode;i&&i!=e.body;)if(1==i.nodeType){if(i.scrollHeight>i.clientHeight||i.scrollWidth>i.clientWidth)return i;i=i.assignedSlot||i.parentNode}else{if(11!=i.nodeType)break;i=i.host}return null}(t.contentDOM),this.atoms=t.state.facet(ae).map((e=>e(t)));let s=t.contentDOM.ownerDocument;s.addEventListener("mousemove",this.move=this.move.bind(this)),s.addEventListener("mouseup",this.up=this.up.bind(this)),this.extend=e.shiftKey,this.multiple=t.state.facet(n.EditorState.allowMultipleSelections)&&function(t,e){let i=t.state.facet(_t);return i.length?i[0](e):K.mac?e.metaKey:e.ctrlKey}(t,e),this.dragging=!(!function(t,e){let{main:i}=t.state.selection;if(i.empty)return!1;let n=o(t.root);if(!n||0==n.rangeCount)return!0;let r=n.getRangeAt(0).getClientRects();for(let t=0;t<r.length;t++){let i=r[t];if(i.left<=e.clientX&&i.right>=e.clientX&&i.top<=e.clientY&&i.bottom>=e.clientY)return!0}return!1}(t,e)||1!=Qe(e))&&null}start(t){!1===this.dragging&&this.select(t)}move(t){var e,i,n;if(0==t.buttons)return this.destroy();if(this.dragging||null==this.dragging&&(i=this.startEvent,n=t,Math.max(Math.abs(i.clientX-n.clientX),Math.abs(i.clientY-n.clientY))<10))return;this.select(this.lastEvent=t);let r=0,s=0,o=(null===(e=this.scrollParent)||void 0===e?void 0:e.getBoundingClientRect())||{left:0,top:0,right:this.view.win.innerWidth,bottom:this.view.win.innerHeight},a=ue(this.view);t.clientX-a.left<=o.left+6?r=-_e(o.left-t.clientX):t.clientX+a.right>=o.right-6&&(r=_e(t.clientX-o.right)),t.clientY-a.top<=o.top+6?s=-_e(o.top-t.clientY):t.clientY+a.bottom>=o.bottom-6&&(s=_e(t.clientY-o.bottom)),this.setScrollSpeed(r,s)}up(t){null==this.dragging&&this.select(this.lastEvent),this.dragging||t.preventDefault(),this.destroy()}destroy(){this.setScrollSpeed(0,0);let t=this.view.contentDOM.ownerDocument;t.removeEventListener("mousemove",this.move),t.removeEventListener("mouseup",this.up),this.view.inputState.mouseSelection=this.view.inputState.draggedContent=null}setScrollSpeed(t,e){this.scrollSpeed={x:t,y:e},t||e?this.scrolling<0&&(this.scrolling=setInterval((()=>this.scroll()),50)):this.scrolling>-1&&(clearInterval(this.scrolling),this.scrolling=-1)}scroll(){this.scrollParent?(this.scrollParent.scrollLeft+=this.scrollSpeed.x,this.scrollParent.scrollTop+=this.scrollSpeed.y):this.view.win.scrollBy(this.scrollSpeed.x,this.scrollSpeed.y),!1===this.dragging&&this.select(this.lastEvent)}skipAtoms(t){let e=null;for(let i=0;i<t.ranges.length;i++){let r=t.ranges[i],s=null;if(r.empty){let t=Pe(this.atoms,r.from,0);t!=r.from&&(s=n.EditorSelection.cursor(t,-1))}else{let t=Pe(this.atoms,r.from,-1),e=Pe(this.atoms,r.to,1);t==r.from&&e==r.to||(s=n.EditorSelection.range(r.from==r.anchor?t:e,r.from==r.head?t:e))}s&&(e||(e=t.ranges.slice()),e[i]=s)}return e?n.EditorSelection.create(e,t.mainIndex):t}select(t){let{view:e}=this,i=this.skipAtoms(this.style.get(t,this.extend,this.multiple));!this.mustSelect&&i.eq(e.state.selection,!1===this.dragging)||this.view.dispatch({selection:i,userEvent:"select.pointer"}),this.mustSelect=!1}update(t){t.transactions.some((t=>t.isUserEvent("input.type")))?this.destroy():this.style.update(t)&&setTimeout((()=>this.select(this.lastEvent)),20)}}const Ve=Object.create(null),He=Object.create(null),We=K.ie&&K.ie_version<15||K.ios&&K.webkit_version<604;function ze(t,e){let i,{state:r}=t,s=1,o=r.toText(e),a=o.lines==r.selection.ranges.length;if(null!=ei&&r.selection.ranges.every((t=>t.empty))&&ei==o.toString()){let t=-1;i=r.changeByRange((i=>{let l=r.doc.lineAt(i.from);if(l.from==t)return{range:i};t=l.from;let h=r.toText((a?o.line(s++).text:e)+r.lineBreak);return{changes:{from:l.from,insert:h},range:n.EditorSelection.cursor(i.from+h.length)}}))}else i=a?r.changeByRange((t=>{let e=o.line(s++);return{changes:{from:t.from,to:t.to,insert:e.text},range:n.EditorSelection.cursor(t.from+e.length)}})):r.replaceSelection(o);t.dispatch(i,{userEvent:"input.paste",scrollIntoView:!0})}function je(t,e,i,r){if(1==r)return n.EditorSelection.cursor(e,i);if(2==r)return function(t,e,i=1){let r=t.charCategorizer(e),s=t.doc.lineAt(e),o=e-s.from;if(0==s.length)return n.EditorSelection.cursor(e);0==o?i=1:o==s.length&&(i=-1);let a=o,l=o;i<0?a=n.findClusterBreak(s.text,o,!1):l=n.findClusterBreak(s.text,o);let h=r(s.text.slice(a,l));for(;a>0;){let t=n.findClusterBreak(s.text,a,!1);if(r(s.text.slice(t,a))!=h)break;a=t}for(;l<s.length;){let t=n.findClusterBreak(s.text,l);if(r(s.text.slice(l,t))!=h)break;l=t}return n.EditorSelection.range(a+s.from,l+s.from)}(t.state,e,i);{let i=st.find(t.docView,e),r=t.state.doc.lineAt(i?i.posAtEnd:e),s=i?i.posAtStart:r.from,o=i?i.posAtEnd:r.to;return o<t.state.doc.length&&o==r.to&&o++,n.EditorSelection.range(s,o)}}He.scroll=t=>{t.inputState.lastScrollTop=t.scrollDOM.scrollTop,t.inputState.lastScrollLeft=t.scrollDOM.scrollLeft},Ve.keydown=(t,e)=>(t.inputState.setSelectionOrigin("select"),27==e.keyCode&&0!=t.inputState.tabFocusMode&&(t.inputState.tabFocusMode=Date.now()+2e3),!1),He.touchstart=(t,e)=>{t.inputState.lastTouchTime=Date.now(),t.inputState.setSelectionOrigin("select.pointer")},He.touchmove=t=>{t.inputState.setSelectionOrigin("select.pointer")},Ve.mousedown=(t,e)=>{if(t.observer.flush(),t.inputState.lastTouchTime>Date.now()-2e3)return!1;let i=null;for(let n of t.state.facet(Vt))if(i=n(t,e),i)break;if(i||0!=e.button||(i=function(t,e){let i=$e(t,e),r=Qe(e),s=t.state.selection;return{update(t){t.docChanged&&(i.pos=t.changes.mapPos(i.pos),s=s.map(t.changes))},get(e,o,a){let l,h=$e(t,e),c=je(t,h.pos,h.bias,r);if(i.pos!=h.pos&&!o){let e=je(t,i.pos,i.bias,r),s=Math.min(e.from,c.from),o=Math.max(e.to,c.to);c=s<c.from?n.EditorSelection.range(s,o):n.EditorSelection.range(o,s)}return o?s.replaceRange(s.main.extend(c.from,c.to)):a&&1==r&&s.ranges.length>1&&(l=function(t,e){for(let i=0;i<t.ranges.length;i++){let{from:r,to:s}=t.ranges[i];if(r<=e&&s>=e)return n.EditorSelection.create(t.ranges.slice(0,i).concat(t.ranges.slice(i+1)),t.mainIndex==i?0:t.mainIndex-(t.mainIndex>i?1:0))}return null}(s,h.pos))?l:a?s.addRange(c):n.EditorSelection.create([c])}}}(t,e)),i){let n=!t.hasFocus;t.inputState.startMouseSelection(new qe(t,e,i,n)),n&&t.observer.ignore((()=>{S(t.contentDOM);let e=t.root.activeElement;e&&!e.contains(t.contentDOM)&&e.blur()}));let r=t.inputState.mouseSelection;if(r)return r.start(e),!1===r.dragging}return!1};let Ue=(t,e)=>t>=e.top&&t<=e.bottom,Ke=(t,e,i)=>Ue(e,i)&&t>=i.left&&t<=i.right;function Ge(t,e,i,n){let r=st.find(t.docView,e);if(!r)return 1;let s=e-r.posAtStart;if(0==s)return 1;if(s==r.length)return-1;let o=r.coordsAt(s,-1);if(o&&Ke(i,n,o))return-1;let a=r.coordsAt(s,1);return a&&Ke(i,n,a)?1:o&&Ue(n,o)?-1:1}function $e(t,e){let i=t.posAtCoords({x:e.clientX,y:e.clientY},!1);return{pos:i,bias:Ge(t,i,e.clientX,e.clientY)}}const Ye=K.ie&&K.ie_version<=11;let Je=null,Xe=0,Ze=0;function Qe(t){if(!Ye)return t.detail;let e=Je,i=Ze;return Je=t,Ze=Date.now(),Xe=!e||i>Date.now()-400&&Math.abs(e.clientX-t.clientX)<2&&Math.abs(e.clientY-t.clientY)<2?(Xe+1)%3:1}function ti(t,e,i,n){if(!i)return;let r=t.posAtCoords({x:e.clientX,y:e.clientY},!1),{draggedContent:s}=t.inputState,o=n&&s&&function(t,e){let i=t.state.facet(qt);return i.length?i[0](e):K.mac?!e.altKey:!e.ctrlKey}(t,e)?{from:s.from,to:s.to}:null,a={from:r,insert:i},l=t.state.changes(o?[o,a]:a);t.focus(),t.dispatch({changes:l,selection:{anchor:l.mapPos(r,-1),head:l.mapPos(r,1)},userEvent:o?"move.drop":"input.drop"}),t.inputState.draggedContent=null}Ve.dragstart=(t,e)=>{let{selection:{main:i}}=t.state;if(e.target.draggable){let r=t.docView.nearest(e.target);if(r&&r.isWidget){let t=r.posAtStart,e=t+r.length;(t>=i.to||e<=i.from)&&(i=n.EditorSelection.range(t,e))}}let{inputState:r}=t;return r.mouseSelection&&(r.mouseSelection.dragging=!0),r.draggedContent=i,e.dataTransfer&&(e.dataTransfer.setData("Text",t.state.sliceDoc(i.from,i.to)),e.dataTransfer.effectAllowed="copyMove"),!1},Ve.dragend=t=>(t.inputState.draggedContent=null,!1),Ve.drop=(t,e)=>{if(!e.dataTransfer)return!1;if(t.state.readOnly)return!0;let i=e.dataTransfer.files;if(i&&i.length){let n=Array(i.length),r=0,s=()=>{++r==i.length&&ti(t,e,n.filter((t=>null!=t)).join(t.state.lineBreak),!1)};for(let t=0;t<i.length;t++){let e=new FileReader;e.onerror=s,e.onload=()=>{/[\x00-\x08\x0e-\x1f]{2}/.test(e.result)||(n[t]=e.result),s()},e.readAsText(i[t])}return!0}{let i=e.dataTransfer.getData("Text");if(i)return ti(t,e,i,!0),!0}return!1},Ve.paste=(t,e)=>{if(t.state.readOnly)return!0;t.observer.flush();let i=We?null:e.clipboardData;return i?(ze(t,i.getData("text/plain")||i.getData("text/uri-list")),!0):(function(t){let e=t.dom.parentNode;if(!e)return;let i=e.appendChild(document.createElement("textarea"));i.style.cssText="position: fixed; left: -10000px; top: 10px",i.focus(),setTimeout((()=>{t.focus(),i.remove(),ze(t,i.value)}),50)}(t),!1)};let ei=null;Ve.copy=Ve.cut=(t,e)=>{let{text:i,ranges:n,linewise:r}=function(t){let e=[],i=[],n=!1;for(let n of t.selection.ranges)n.empty||(e.push(t.sliceDoc(n.from,n.to)),i.push(n));if(!e.length){let r=-1;for(let{from:n}of t.selection.ranges){let s=t.doc.lineAt(n);s.number>r&&(e.push(s.text),i.push({from:s.from,to:Math.min(t.doc.length,s.to+1)})),r=s.number}n=!0}return{text:e.join(t.lineBreak),ranges:i,linewise:n}}(t.state);if(!i&&!r)return!1;ei=r?i:null,"cut"!=e.type||t.state.readOnly||t.dispatch({changes:n,scrollIntoView:!0,userEvent:"delete.cut"});let s=We?null:e.clipboardData;return s?(s.clearData(),s.setData("text/plain",i),!0):(function(t,e){let i=t.dom.parentNode;if(!i)return;let n=i.appendChild(document.createElement("textarea"));n.style.cssText="position: fixed; left: -10000px; top: 10px",n.value=e,n.focus(),n.selectionEnd=e.length,n.selectionStart=0,setTimeout((()=>{n.remove(),t.focus()}),50)}(t,i),!1)};const ii=n.Annotation.define();function ni(t,e){let i=[];for(let n of t.facet(jt)){let r=n(t,e);r&&i.push(r)}return i?t.update({effects:i,annotations:ii.of(!0)}):null}function ri(t){setTimeout((()=>{let e=t.hasFocus;if(e!=t.inputState.notifiedFocused){let i=ni(t.state,e);i?t.dispatch(i):t.update([])}}),10)}He.focus=t=>{t.inputState.lastFocusTime=Date.now(),t.scrollDOM.scrollTop||!t.inputState.lastScrollTop&&!t.inputState.lastScrollLeft||(t.scrollDOM.scrollTop=t.inputState.lastScrollTop,t.scrollDOM.scrollLeft=t.inputState.lastScrollLeft),ri(t)},He.blur=t=>{t.observer.clearSelectionRange(),ri(t)},He.compositionstart=He.compositionupdate=t=>{t.observer.editContext||(null==t.inputState.compositionFirstChange&&(t.inputState.compositionFirstChange=!0),t.inputState.composing<0&&(t.inputState.composing=0))},He.compositionend=t=>{t.observer.editContext||(t.inputState.composing=-1,t.inputState.compositionEndedAt=Date.now(),t.inputState.compositionPendingKey=!0,t.inputState.compositionPendingChange=t.observer.pendingRecords().length>0,t.inputState.compositionFirstChange=null,K.chrome&&K.android?t.observer.flushSoon():t.inputState.compositionPendingChange?Promise.resolve().then((()=>t.observer.flush())):setTimeout((()=>{t.inputState.composing<0&&t.docView.hasComposition&&t.update([])}),50))},He.contextmenu=t=>{t.inputState.lastContextMenu=Date.now()},Ve.beforeinput=(t,e)=>{var i;let n;if(K.chrome&&K.android&&(n=Ie.find((t=>t.inputType==e.inputType)))&&(t.observer.delayAndroidKey(n.key,n.keyCode),"Backspace"==n.key||"Delete"==n.key)){let e=(null===(i=window.visualViewport)||void 0===i?void 0:i.height)||0;setTimeout((()=>{var i;((null===(i=window.visualViewport)||void 0===i?void 0:i.height)||0)>e+10&&t.hasFocus&&(t.contentDOM.blur(),t.focus())}),100)}return K.ios&&"deleteContentForward"==e.inputType&&t.observer.flushSoon(),K.safari&&"insertText"==e.inputType&&t.inputState.composing>=0&&setTimeout((()=>He.compositionend(t,e)),20),!1};const si=new Set,oi=["pre-wrap","normal","pre-line","break-spaces"];class ai{constructor(t){this.lineWrapping=t,this.doc=n.Text.empty,this.heightSamples={},this.lineHeight=14,this.charWidth=7,this.textHeight=14,this.lineLength=30,this.heightChanged=!1}heightForGap(t,e){let i=this.doc.lineAt(e).number-this.doc.lineAt(t).number+1;return this.lineWrapping&&(i+=Math.max(0,Math.ceil((e-t-i*this.lineLength*.5)/this.lineLength))),this.lineHeight*i}heightForLine(t){return this.lineWrapping?(1+Math.max(0,Math.ceil((t-this.lineLength)/(this.lineLength-5))))*this.lineHeight:this.lineHeight}setDoc(t){return this.doc=t,this}mustRefreshForWrapping(t){return oi.indexOf(t)>-1!=this.lineWrapping}mustRefreshForHeights(t){let e=!1;for(let i=0;i<t.length;i++){let n=t[i];n<0?i++:this.heightSamples[Math.floor(10*n)]||(e=!0,this.heightSamples[Math.floor(10*n)]=!0)}return e}refresh(t,e,i,n,r,s){let o=oi.indexOf(t)>-1,a=Math.round(e)!=Math.round(this.lineHeight)||this.lineWrapping!=o;if(this.lineWrapping=o,this.lineHeight=e,this.charWidth=i,this.textHeight=n,this.lineLength=r,a){this.heightSamples={};for(let t=0;t<s.length;t++){let e=s[t];e<0?t++:this.heightSamples[Math.floor(10*e)]=!0}}return a}}class li{constructor(t,e){this.from=t,this.heights=e,this.index=0}get more(){return this.index<this.heights.length}}class hi{constructor(t,e,i,n,r){this.from=t,this.length=e,this.top=i,this.height=n,this._content=r}get type(){return"number"==typeof this._content?e.BlockType.Text:Array.isArray(this._content)?this._content:this._content.type}get to(){return this.from+this.length}get bottom(){return this.top+this.height}get widget(){return this._content instanceof ft?this._content.widget:null}get widgetLineBreaks(){return"number"==typeof this._content?this._content:0}join(t){let e=(Array.isArray(this._content)?this._content:[this]).concat(Array.isArray(t._content)?t._content:[t]);return new hi(this.from,this.length+t.length,this.top,this.height+t.height,e)}}var ci;!function(t){t[t.ByPos=0]="ByPos",t[t.ByHeight=1]="ByHeight",t[t.ByPosNoHeight=2]="ByPosNoHeight"}(ci||(ci={}));const ui=.001;class di{constructor(t,e,i=2){this.length=t,this.height=e,this.flags=i}get outdated(){return(2&this.flags)>0}set outdated(t){this.flags=(t?2:0)|-3&this.flags}setHeight(t,e){this.height!=e&&(Math.abs(this.height-e)>ui&&(t.heightChanged=!0),this.height=e)}replace(t,e,i){return di.of(i)}decomposeLeft(t,e){e.push(this)}decomposeRight(t,e){e.push(this)}applyChanges(t,e,i,n){let r=this,s=i.doc;for(let o=n.length-1;o>=0;o--){let{fromA:a,toA:l,fromB:h,toB:c}=n[o],u=r.lineAt(a,ci.ByPosNoHeight,i.setDoc(e),0,0),d=u.to>=l?u:r.lineAt(l,ci.ByPosNoHeight,i,0,0);for(c+=d.to-l,l=d.to;o>0&&u.from<=n[o-1].toA;)a=n[o-1].fromA,h=n[o-1].fromB,o--,a<u.from&&(u=r.lineAt(a,ci.ByPosNoHeight,i,0,0));h+=u.from-a,a=u.from;let f=wi.build(i.setDoc(s),t,h,c);r=r.replace(a,l,f)}return r.updateHeight(i,0)}static empty(){return new pi(0,0)}static of(t){if(1==t.length)return t[0];let e=0,i=t.length,n=0,r=0;for(;;)if(e==i)if(n>2*r){let r=t[e-1];r.break?t.splice(--e,1,r.left,null,r.right):t.splice(--e,1,r.left,r.right),i+=1+r.break,n-=r.size}else{if(!(r>2*n))break;{let e=t[i];e.break?t.splice(i,1,e.left,null,e.right):t.splice(i,1,e.left,e.right),i+=2+e.break,r-=e.size}}else if(n<r){let i=t[e++];i&&(n+=i.size)}else{let e=t[--i];e&&(r+=e.size)}let s=0;return null==t[e-1]?(s=1,e--):null==t[e]&&(s=1,i++),new gi(di.of(t.slice(0,e)),s,di.of(t.slice(i)))}}di.prototype.size=1;class fi extends di{constructor(t,e,i){super(t,e),this.deco=i}blockAt(t,e,i,n){return new hi(n,this.length,i,this.height,this.deco||0)}lineAt(t,e,i,n,r){return this.blockAt(0,i,n,r)}forEachLine(t,e,i,n,r,s){t<=r+this.length&&e>=r&&s(this.blockAt(0,i,n,r))}updateHeight(t,e=0,i=!1,n){return n&&n.from<=e&&n.more&&this.setHeight(t,n.heights[n.index++]),this.outdated=!1,this}toString(){return`block(${this.length})`}}class pi extends fi{constructor(t,e){super(t,e,null),this.collapsed=0,this.widgetHeight=0,this.breaks=0}blockAt(t,e,i,n){return new hi(n,this.length,i,this.height,this.breaks)}replace(t,e,i){let n=i[0];return 1==i.length&&(n instanceof pi||n instanceof mi&&4&n.flags)&&Math.abs(this.length-n.length)<10?(n instanceof mi?n=new pi(n.length,this.height):n.height=this.height,this.outdated||(n.outdated=!1),n):di.of(i)}updateHeight(t,e=0,i=!1,n){return n&&n.from<=e&&n.more?this.setHeight(t,n.heights[n.index++]):(i||this.outdated)&&this.setHeight(t,Math.max(this.widgetHeight,t.heightForLine(this.length-this.collapsed))+this.breaks*t.lineHeight),this.outdated=!1,this}toString(){return`line(${this.length}${this.collapsed?-this.collapsed:""}${this.widgetHeight?":"+this.widgetHeight:""})`}}class mi extends di{constructor(t){super(t,0)}heightMetrics(t,e){let i,n=t.doc.lineAt(e).number,r=t.doc.lineAt(e+this.length).number,s=r-n+1,o=0;if(t.lineWrapping){let e=Math.min(this.height,t.lineHeight*s);i=e/s,this.length>s+1&&(o=(this.height-e)/(this.length-s-1))}else i=this.height/s;return{firstLine:n,lastLine:r,perLine:i,perChar:o}}blockAt(t,e,i,n){let{firstLine:r,lastLine:s,perLine:o,perChar:a}=this.heightMetrics(e,n);if(e.lineWrapping){let r=n+(t<e.lineHeight?0:Math.round(Math.max(0,Math.min(1,(t-i)/this.height))*this.length)),s=e.doc.lineAt(r),l=o+s.length*a,h=Math.max(i,t-l/2);return new hi(s.from,s.length,h,l,0)}{let n=Math.max(0,Math.min(s-r,Math.floor((t-i)/o))),{from:a,length:l}=e.doc.line(r+n);return new hi(a,l,i+o*n,o,0)}}lineAt(t,e,i,n,r){if(e==ci.ByHeight)return this.blockAt(t,i,n,r);if(e==ci.ByPosNoHeight){let{from:e,to:n}=i.doc.lineAt(t);return new hi(e,n-e,0,0,0)}let{firstLine:s,perLine:o,perChar:a}=this.heightMetrics(i,r),l=i.doc.lineAt(t),h=o+l.length*a,c=l.number-s,u=n+o*c+a*(l.from-r-c);return new hi(l.from,l.length,Math.max(n,Math.min(u,n+this.height-h)),h,0)}forEachLine(t,e,i,n,r,s){t=Math.max(t,r),e=Math.min(e,r+this.length);let{firstLine:o,perLine:a,perChar:l}=this.heightMetrics(i,r);for(let h=t,c=n;h<=e;){let e=i.doc.lineAt(h);if(h==t){let i=e.number-o;c+=a*i+l*(t-r-i)}let n=a+l*e.length;s(new hi(e.from,e.length,c,n,0)),c+=n,h=e.to+1}}replace(t,e,i){let n=this.length-e;if(n>0){let t=i[i.length-1];t instanceof mi?i[i.length-1]=new mi(t.length+n):i.push(null,new mi(n-1))}if(t>0){let e=i[0];e instanceof mi?i[0]=new mi(t+e.length):i.unshift(new mi(t-1),null)}return di.of(i)}decomposeLeft(t,e){e.push(new mi(t-1),null)}decomposeRight(t,e){e.push(null,new mi(this.length-t-1))}updateHeight(t,e=0,i=!1,n){let r=e+this.length;if(n&&n.from<=e+this.length&&n.more){let i=[],s=Math.max(e,n.from),o=-1;for(n.from>e&&i.push(new mi(n.from-e-1).updateHeight(t,e));s<=r&&n.more;){let e=t.doc.lineAt(s).length;i.length&&i.push(null);let r=n.heights[n.index++];-1==o?o=r:Math.abs(r-o)>=ui&&(o=-2);let a=new pi(e,r);a.outdated=!1,i.push(a),s+=e+1}s<=r&&i.push(null,new mi(r-s).updateHeight(t,s));let a=di.of(i);return(o<0||Math.abs(a.height-this.height)>=ui||Math.abs(o-this.heightMetrics(t,e).perLine)>=ui)&&(t.heightChanged=!0),a}return(i||this.outdated)&&(this.setHeight(t,t.heightForGap(e,e+this.length)),this.outdated=!1),this}toString(){return`gap(${this.length})`}}class gi extends di{constructor(t,e,i){super(t.length+e+i.length,t.height+i.height,e|(t.outdated||i.outdated?2:0)),this.left=t,this.right=i,this.size=t.size+i.size}get break(){return 1&this.flags}blockAt(t,e,i,n){let r=i+this.left.height;return t<r?this.left.blockAt(t,e,i,n):this.right.blockAt(t,e,r,n+this.left.length+this.break)}lineAt(t,e,i,n,r){let s=n+this.left.height,o=r+this.left.length+this.break,a=e==ci.ByHeight?t<s:t<o,l=a?this.left.lineAt(t,e,i,n,r):this.right.lineAt(t,e,i,s,o);if(this.break||(a?l.to<o:l.from>o))return l;let h=e==ci.ByPosNoHeight?ci.ByPosNoHeight:ci.ByPos;return a?l.join(this.right.lineAt(o,h,i,s,o)):this.left.lineAt(o,h,i,n,r).join(l)}forEachLine(t,e,i,n,r,s){let o=n+this.left.height,a=r+this.left.length+this.break;if(this.break)t<a&&this.left.forEachLine(t,e,i,n,r,s),e>=a&&this.right.forEachLine(t,e,i,o,a,s);else{let l=this.lineAt(a,ci.ByPos,i,n,r);t<l.from&&this.left.forEachLine(t,l.from-1,i,n,r,s),l.to>=t&&l.from<=e&&s(l),e>l.to&&this.right.forEachLine(l.to+1,e,i,o,a,s)}}replace(t,e,i){let n=this.left.length+this.break;if(e<n)return this.balanced(this.left.replace(t,e,i),this.right);if(t>this.left.length)return this.balanced(this.left,this.right.replace(t-n,e-n,i));let r=[];t>0&&this.decomposeLeft(t,r);let s=r.length;for(let t of i)r.push(t);if(t>0&&vi(r,s-1),e<this.length){let t=r.length;this.decomposeRight(e,r),vi(r,t)}return di.of(r)}decomposeLeft(t,e){let i=this.left.length;if(t<=i)return this.left.decomposeLeft(t,e);e.push(this.left),this.break&&(i++,t>=i&&e.push(null)),t>i&&this.right.decomposeLeft(t-i,e)}decomposeRight(t,e){let i=this.left.length,n=i+this.break;if(t>=n)return this.right.decomposeRight(t-n,e);t<i&&this.left.decomposeRight(t,e),this.break&&t<n&&e.push(null),e.push(this.right)}balanced(t,e){return t.size>2*e.size||e.size>2*t.size?di.of(this.break?[t,null,e]:[t,e]):(this.left=t,this.right=e,this.height=t.height+e.height,this.outdated=t.outdated||e.outdated,this.size=t.size+e.size,this.length=t.length+this.break+e.length,this)}updateHeight(t,e=0,i=!1,n){let{left:r,right:s}=this,o=e+r.length+this.break,a=null;return n&&n.from<=e+r.length&&n.more?a=r=r.updateHeight(t,e,i,n):r.updateHeight(t,e,i),n&&n.from<=o+s.length&&n.more?a=s=s.updateHeight(t,o,i,n):s.updateHeight(t,o,i),a?this.balanced(r,s):(this.height=this.left.height+this.right.height,this.outdated=!1,this)}toString(){return this.left+(this.break?" ":"-")+this.right}}function vi(t,e){let i,n;null==t[e]&&(i=t[e-1])instanceof mi&&(n=t[e+1])instanceof mi&&t.splice(e-1,3,new mi(i.length+1+n.length))}class wi{constructor(t,e){this.pos=t,this.oracle=e,this.nodes=[],this.lineStart=-1,this.lineEnd=-1,this.covering=null,this.writtenTo=t}get isCovered(){return this.covering&&this.nodes[this.nodes.length-1]==this.covering}span(t,e){if(this.lineStart>-1){let t=Math.min(e,this.lineEnd),i=this.nodes[this.nodes.length-1];i instanceof pi?i.length+=t-this.pos:(t>this.pos||!this.isCovered)&&this.nodes.push(new pi(t-this.pos,-1)),this.writtenTo=t,e>t&&(this.nodes.push(null),this.writtenTo++,this.lineStart=-1)}this.pos=e}point(t,e,i){if(t<e||i.heightRelevant){let n=i.widget?i.widget.estimatedHeight:0,r=i.widget?i.widget.lineBreaks:0;n<0&&(n=this.oracle.lineHeight);let s=e-t;i.block?this.addBlock(new fi(s,n,i)):(s||r||n>=5)&&this.addLineDeco(n,r,s)}else e>t&&this.span(t,e);this.lineEnd>-1&&this.lineEnd<this.pos&&(this.lineEnd=this.oracle.doc.lineAt(this.pos).to)}enterLine(){if(this.lineStart>-1)return;let{from:t,to:e}=this.oracle.doc.lineAt(this.pos);this.lineStart=t,this.lineEnd=e,this.writtenTo<t&&((this.writtenTo<t-1||null==this.nodes[this.nodes.length-1])&&this.nodes.push(this.blankContent(this.writtenTo,t-1)),this.nodes.push(null)),this.pos>t&&this.nodes.push(new pi(this.pos-t,-1)),this.writtenTo=this.pos}blankContent(t,e){let i=new mi(e-t);return this.oracle.doc.lineAt(t).to==e&&(i.flags|=4),i}ensureLine(){this.enterLine();let t=this.nodes.length?this.nodes[this.nodes.length-1]:null;if(t instanceof pi)return t;let e=new pi(0,-1);return this.nodes.push(e),e}addBlock(t){this.enterLine();let e=t.deco;e&&e.startSide>0&&!this.isCovered&&this.ensureLine(),this.nodes.push(t),this.writtenTo=this.pos=this.pos+t.length,e&&e.endSide>0&&(this.covering=t)}addLineDeco(t,e,i){let n=this.ensureLine();n.length+=i,n.collapsed+=i,n.widgetHeight=Math.max(n.widgetHeight,t),n.breaks+=e,this.writtenTo=this.pos=this.pos+i}finish(t){let e=0==this.nodes.length?null:this.nodes[this.nodes.length-1];!(this.lineStart>-1)||e instanceof pi||this.isCovered?(this.writtenTo<this.pos||null==e)&&this.nodes.push(this.blankContent(this.writtenTo,this.pos)):this.nodes.push(new pi(0,-1));let i=t;for(let t of this.nodes)t instanceof pi&&t.updateHeight(this.oracle,i),i+=t?t.length:1;return this.nodes}static build(t,e,i,r){let s=new wi(i,t);return n.RangeSet.spans(e,i,r,s,0),s.finish(i)}}class yi{constructor(){this.changes=[]}compareRange(){}comparePoint(t,e,i,n){(t<e||i&&i.heightRelevant||n&&n.heightRelevant)&&mt(t,e,this.changes,5)}}function bi(t,e){let i=t.getBoundingClientRect(),n=t.ownerDocument,r=n.defaultView||window,s=Math.max(0,i.left),o=Math.min(r.innerWidth,i.right),a=Math.max(0,i.top),l=Math.min(r.innerHeight,i.bottom);for(let e=t.parentNode;e&&e!=n.body;)if(1==e.nodeType){let i=e,n=window.getComputedStyle(i);if((i.scrollHeight>i.clientHeight||i.scrollWidth>i.clientWidth)&&"visible"!=n.overflow){let n=i.getBoundingClientRect();s=Math.max(s,n.left),o=Math.min(o,n.right),a=Math.max(a,n.top),l=e==t.parentNode?n.bottom:Math.min(l,n.bottom)}e="absolute"==n.position||"fixed"==n.position?i.offsetParent:i.parentNode}else{if(11!=e.nodeType)break;e=e.host}return{left:s-i.left,right:Math.max(s,o)-i.left,top:a-(i.top+e),bottom:Math.max(a,l)-(i.top+e)}}function Si(t,e){let i=t.getBoundingClientRect();return{left:0,right:i.right-i.left,top:e,bottom:i.bottom-(i.top+e)}}class xi{constructor(t,e,i){this.from=t,this.to=e,this.size=i}static same(t,e){if(t.length!=e.length)return!1;for(let i=0;i<t.length;i++){let n=t[i],r=e[i];if(n.from!=r.from||n.to!=r.to||n.size!=r.size)return!1}return!0}draw(t,e){return ct.replace({widget:new Ci(this.size*(e?t.scaleY:t.scaleX),e)}).range(this.from,this.to)}}class Ci extends at{constructor(t,e){super(),this.size=t,this.vertical=e}eq(t){return t.size==this.size&&t.vertical==this.vertical}toDOM(){let t=document.createElement("div");return this.vertical?t.style.height=this.size+"px":(t.style.width=this.size+"px",t.style.height="2px",t.style.display="inline-block"),t}get estimatedHeight(){return this.vertical?this.size:-1}}class Ei{constructor(t){this.state=t,this.pixelViewport={left:0,right:window.innerWidth,top:0,bottom:0},this.inView=!0,this.paddingTop=0,this.paddingBottom=0,this.contentDOMWidth=0,this.contentDOMHeight=0,this.editorHeight=0,this.editorWidth=0,this.scrollTop=0,this.scrolledToBottom=!1,this.scaleX=1,this.scaleY=1,this.scrollAnchorPos=0,this.scrollAnchorHeight=-1,this.scaler=Mi,this.scrollTarget=null,this.printing=!1,this.mustMeasureContent=!0,this.defaultTextDirection=e.Direction.LTR,this.visibleRanges=[],this.mustEnforceCursorAssoc=!1;let i=t.facet(re).some((t=>"function"!=typeof t&&"cm-lineWrapping"==t.class));this.heightOracle=new ai(i),this.stateDeco=t.facet(se).filter((t=>"function"!=typeof t)),this.heightMap=di.empty().applyChanges(this.stateDeco,n.Text.empty,this.heightOracle.setDoc(t.doc),[new fe(0,0,0,t.doc.length)]);for(let t=0;t<2&&(this.viewport=this.getViewport(0,null),this.updateForViewport());t++);this.updateViewportLines(),this.lineGaps=this.ensureLineGaps([]),this.lineGapDeco=ct.set(this.lineGaps.map((t=>t.draw(this,!1)))),this.computeVisibleRanges()}updateForViewport(){let t=[this.viewport],{main:e}=this.state.selection;for(let i=0;i<=1;i++){let n=i?e.head:e.anchor;if(!t.some((({from:t,to:e})=>n>=t&&n<=e))){let{from:e,to:i}=this.lineBlockAt(n);t.push(new ki(e,i))}}return this.viewports=t.sort(((t,e)=>t.from-e.from)),this.updateScaler()}updateScaler(){let t=this.scaler;return this.scaler=this.heightMap.height<=7e6?Mi:new Ni(this.heightOracle,this.heightMap,this.viewports),t.eq(this.scaler)?0:2}updateViewportLines(){this.viewportLines=[],this.heightMap.forEachLine(this.viewport.from,this.viewport.to,this.heightOracle.setDoc(this.state.doc),0,0,(t=>{this.viewportLines.push(Pi(t,this.scaler))}))}update(t,e=null){this.state=t.state;let i=this.stateDeco;this.stateDeco=this.state.facet(se).filter((t=>"function"!=typeof t));let r=t.changedRanges,s=fe.extendWithRanges(r,function(t,e,i){let r=new yi;return n.RangeSet.compare(t,e,i,r,0),r.changes}(i,this.stateDeco,t?t.changes:n.ChangeSet.empty(this.state.doc.length))),o=this.heightMap.height,a=this.scrolledToBottom?null:this.scrollAnchorAt(this.scrollTop);this.heightMap=this.heightMap.applyChanges(this.stateDeco,t.startState.doc,this.heightOracle.setDoc(this.state.doc),s),this.heightMap.height!=o&&(t.flags|=2),a?(this.scrollAnchorPos=t.changes.mapPos(a.from,-1),this.scrollAnchorHeight=a.top):(this.scrollAnchorPos=-1,this.scrollAnchorHeight=this.heightMap.height);let l=s.length?this.mapViewport(this.viewport,t.changes):this.viewport;(e&&(e.range.head<l.from||e.range.head>l.to)||!this.viewportIsAppropriate(l))&&(l=this.getViewport(0,e));let h=l.from!=this.viewport.from||l.to!=this.viewport.to;this.viewport=l,t.flags|=this.updateForViewport(),(h||!t.changes.empty||2&t.flags)&&this.updateViewportLines(),(this.lineGaps.length||this.viewport.to-this.viewport.from>4e3)&&this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps,t.changes))),t.flags|=this.computeVisibleRanges(),e&&(this.scrollTarget=e),!this.mustEnforceCursorAssoc&&t.selectionSet&&t.view.lineWrapping&&t.state.selection.main.empty&&t.state.selection.main.assoc&&!t.state.facet(Kt)&&(this.mustEnforceCursorAssoc=!0)}measure(t){let i=t.contentDOM,r=window.getComputedStyle(i),s=this.heightOracle,o=r.whiteSpace;this.defaultTextDirection="rtl"==r.direction?e.Direction.RTL:e.Direction.LTR;let a=this.heightOracle.mustRefreshForWrapping(o),l=i.getBoundingClientRect(),h=a||this.mustMeasureContent||this.contentDOMHeight!=l.height;this.contentDOMHeight=l.height,this.mustMeasureContent=!1;let c=0,u=0;if(l.width&&l.height){let{scaleX:t,scaleY:e}=v(i,l);(t>.005&&Math.abs(this.scaleX-t)>.005||e>.005&&Math.abs(this.scaleY-e)>.005)&&(this.scaleX=t,this.scaleY=e,c|=8,a=h=!0)}let d=(parseInt(r.paddingTop)||0)*this.scaleY,f=(parseInt(r.paddingBottom)||0)*this.scaleY;this.paddingTop==d&&this.paddingBottom==f||(this.paddingTop=d,this.paddingBottom=f,c|=10),this.editorWidth!=t.scrollDOM.clientWidth&&(s.lineWrapping&&(h=!0),this.editorWidth=t.scrollDOM.clientWidth,c|=8);let p=t.scrollDOM.scrollTop*this.scaleY;this.scrollTop!=p&&(this.scrollAnchorHeight=-1,this.scrollTop=p),this.scrolledToBottom=k(t.scrollDOM);let m=(this.printing?Si:bi)(i,this.paddingTop),g=m.top-this.pixelViewport.top,w=m.bottom-this.pixelViewport.bottom;this.pixelViewport=m;let y=this.pixelViewport.bottom>this.pixelViewport.top&&this.pixelViewport.right>this.pixelViewport.left;if(y!=this.inView&&(this.inView=y,y&&(h=!0)),!this.inView&&!this.scrollTarget)return 0;let b=l.width;if(this.contentDOMWidth==b&&this.editorHeight==t.scrollDOM.clientHeight||(this.contentDOMWidth=l.width,this.editorHeight=t.scrollDOM.clientHeight,c|=8),h){let e=t.docView.measureVisibleLineHeights(this.viewport);if(s.mustRefreshForHeights(e)&&(a=!0),a||s.lineWrapping&&Math.abs(b-this.contentDOMWidth)>s.charWidth){let{lineHeight:i,charWidth:n,textHeight:r}=t.docView.measureTextSize();a=i>0&&s.refresh(o,i,n,r,b/n,e),a&&(t.docView.minWidth=0,c|=8)}g>0&&w>0?u=Math.max(g,w):g<0&&w<0&&(u=Math.min(g,w)),s.heightChanged=!1;for(let i of this.viewports){let r=i.from==this.viewport.from?e:t.docView.measureVisibleLineHeights(i);this.heightMap=(a?di.empty().applyChanges(this.stateDeco,n.Text.empty,this.heightOracle,[new fe(0,0,0,t.state.doc.length)]):this.heightMap).updateHeight(s,0,a,new li(i.from,r))}s.heightChanged&&(c|=2)}let S=!this.viewportIsAppropriate(this.viewport,u)||this.scrollTarget&&(this.scrollTarget.range.head<this.viewport.from||this.scrollTarget.range.head>this.viewport.to);return S&&(2&c&&(c|=this.updateScaler()),this.viewport=this.getViewport(u,this.scrollTarget),c|=this.updateForViewport()),(2&c||S)&&this.updateViewportLines(),(this.lineGaps.length||this.viewport.to-this.viewport.from>4e3)&&this.updateLineGaps(this.ensureLineGaps(a?[]:this.lineGaps,t)),c|=this.computeVisibleRanges(),this.mustEnforceCursorAssoc&&(this.mustEnforceCursorAssoc=!1,t.docView.enforceCursorAssoc()),c}get visibleTop(){return this.scaler.fromDOM(this.pixelViewport.top)}get visibleBottom(){return this.scaler.fromDOM(this.pixelViewport.bottom)}getViewport(t,e){let i=.5-Math.max(-.5,Math.min(.5,t/1e3/2)),n=this.heightMap,r=this.heightOracle,{visibleTop:s,visibleBottom:o}=this,a=new ki(n.lineAt(s-1e3*i,ci.ByHeight,r,0,0).from,n.lineAt(o+1e3*(1-i),ci.ByHeight,r,0,0).to);if(e){let{head:t}=e.range;if(t<a.from||t>a.to){let i,s=Math.min(this.editorHeight,this.pixelViewport.bottom-this.pixelViewport.top),o=n.lineAt(t,ci.ByPos,r,0,0);i="center"==e.y?(o.top+o.bottom)/2-s/2:"start"==e.y||"nearest"==e.y&&t<a.from?o.top:o.bottom-s,a=new ki(n.lineAt(i-500,ci.ByHeight,r,0,0).from,n.lineAt(i+s+500,ci.ByHeight,r,0,0).to)}}return a}mapViewport(t,e){let i=e.mapPos(t.from,-1),n=e.mapPos(t.to,1);return new ki(this.heightMap.lineAt(i,ci.ByPos,this.heightOracle,0,0).from,this.heightMap.lineAt(n,ci.ByPos,this.heightOracle,0,0).to)}viewportIsAppropriate({from:t,to:e},i=0){if(!this.inView)return!0;let{top:n}=this.heightMap.lineAt(t,ci.ByPos,this.heightOracle,0,0),{bottom:r}=this.heightMap.lineAt(e,ci.ByPos,this.heightOracle,0,0),{visibleTop:s,visibleBottom:o}=this;return(0==t||n<=s-Math.max(10,Math.min(-i,250)))&&(e==this.state.doc.length||r>=o+Math.max(10,Math.min(i,250)))&&n>s-2e3&&r<o+2e3}mapLineGaps(t,e){if(!t.length||e.empty)return t;let i=[];for(let n of t)e.touchesRange(n.from,n.to)||i.push(new xi(e.mapPos(n.from),e.mapPos(n.to),n.size));return i}ensureLineGaps(t,i){let r=this.heightOracle.lineWrapping,s=r?1e4:2e3,o=s>>1,a=s<<1;if(this.defaultTextDirection!=e.Direction.LTR&&!r)return[];let l=[],h=(e,s,a,c)=>{if(s-e<o)return;let u=this.state.selection.main,d=[u.from];u.empty||d.push(u.to);for(let t of d)if(t>e&&t<s)return h(e,t-10,a,c),void h(t+10,s,a,c);let f=function(t,e){for(let i of t)if(e(i))return i}(t,(t=>t.from>=a.from&&t.to<=a.to&&Math.abs(t.from-e)<o&&Math.abs(t.to-s)<o&&!d.some((e=>t.from<e&&t.to>e))));if(!f){if(s<a.to&&i&&r&&i.visibleRanges.some((t=>t.from<=s&&t.to>=s))){let t=i.moveToLineBoundary(n.EditorSelection.cursor(s),!1,!0).head;t>e&&(s=t)}f=new xi(e,s,this.gapSize(a,e,s,c))}l.push(f)},c=t=>{if(t.length<a||t.type!=e.BlockType.Text)return;let i=function(t,e,i){let r=[],s=t,o=0;return n.RangeSet.spans(i,t,e,{span(){},point(t,e){t>s&&(r.push({from:s,to:t}),o+=t-s),s=e}},20),s<e&&(r.push({from:s,to:e}),o+=e-s),{total:o,ranges:r}}(t.from,t.to,this.stateDeco);if(i.total<a)return;let o,l,c=this.scrollTarget?this.scrollTarget.range.head:null;if(r){let e,n,r=s/this.heightOracle.lineLength*this.heightOracle.lineHeight;if(null!=c){let s=Ti(i,c),o=((this.visibleBottom-this.visibleTop)/2+r)/t.height;e=s-o,n=s+o}else e=(this.visibleTop-t.top-r)/t.height,n=(this.visibleBottom-t.top+r)/t.height;o=Ai(i,e),l=Ai(i,n)}else{let t,e,n=i.total*this.heightOracle.charWidth,r=s*this.heightOracle.charWidth;if(null!=c){let s=Ti(i,c),o=((this.pixelViewport.right-this.pixelViewport.left)/2+r)/n;t=s-o,e=s+o}else t=(this.pixelViewport.left-r)/n,e=(this.pixelViewport.right+r)/n;o=Ai(i,t),l=Ai(i,e)}o>t.from&&h(t.from,o,t,i),l<t.to&&h(l,t.to,t,i)};for(let t of this.viewportLines)Array.isArray(t.type)?t.type.forEach(c):c(t);return l}gapSize(t,e,i,n){let r=Ti(n,i)-Ti(n,e);return this.heightOracle.lineWrapping?t.height*r:n.total*this.heightOracle.charWidth*r}updateLineGaps(t){xi.same(t,this.lineGaps)||(this.lineGaps=t,this.lineGapDeco=ct.set(t.map((t=>t.draw(this,this.heightOracle.lineWrapping)))))}computeVisibleRanges(){let t=this.stateDeco;this.lineGaps.length&&(t=t.concat(this.lineGapDeco));let e=[];n.RangeSet.spans(t,this.viewport.from,this.viewport.to,{span(t,i){e.push({from:t,to:i})},point(){}},20);let i=e.length!=this.visibleRanges.length||this.visibleRanges.some(((t,i)=>t.from!=e[i].from||t.to!=e[i].to));return this.visibleRanges=e,i?4:0}lineBlockAt(t){return t>=this.viewport.from&&t<=this.viewport.to&&this.viewportLines.find((e=>e.from<=t&&e.to>=t))||Pi(this.heightMap.lineAt(t,ci.ByPos,this.heightOracle,0,0),this.scaler)}lineBlockAtHeight(t){return t>=this.viewportLines[0].top&&t<=this.viewportLines[this.viewportLines.length-1].bottom&&this.viewportLines.find((e=>e.top<=t&&e.bottom>=t))||Pi(this.heightMap.lineAt(this.scaler.fromDOM(t),ci.ByHeight,this.heightOracle,0,0),this.scaler)}scrollAnchorAt(t){let e=this.lineBlockAtHeight(t+8);return e.from>=this.viewport.from||this.viewportLines[0].top-t>200?e:this.viewportLines[0]}elementAtHeight(t){return Pi(this.heightMap.blockAt(this.scaler.fromDOM(t),this.heightOracle,0,0),this.scaler)}get docHeight(){return this.scaler.toDOM(this.heightMap.height)}get contentHeight(){return this.docHeight+this.paddingTop+this.paddingBottom}}class ki{constructor(t,e){this.from=t,this.to=e}}function Ai({total:t,ranges:e},i){if(i<=0)return e[0].from;if(i>=1)return e[e.length-1].to;let n=Math.floor(t*i);for(let t=0;;t++){let{from:i,to:r}=e[t],s=r-i;if(n<=s)return i+n;n-=s}}function Ti(t,e){let i=0;for(let{from:n,to:r}of t.ranges){if(e<=r){i+=e-n;break}i+=r-n}return i/t.total}const Mi={toDOM:t=>t,fromDOM:t=>t,scale:1,eq(t){return t==this}};class Ni{constructor(t,e,i){let n=0,r=0,s=0;this.viewports=i.map((({from:i,to:r})=>{let s=e.lineAt(i,ci.ByPos,t,0,0).top,o=e.lineAt(r,ci.ByPos,t,0,0).bottom;return n+=o-s,{from:i,to:r,top:s,bottom:o,domTop:0,domBottom:0}})),this.scale=(7e6-n)/(e.height-n);for(let t of this.viewports)t.domTop=s+(t.top-r)*this.scale,s=t.domBottom=t.domTop+(t.bottom-t.top),r=t.bottom}toDOM(t){for(let e=0,i=0,n=0;;e++){let r=e<this.viewports.length?this.viewports[e]:null;if(!r||t<r.top)return n+(t-i)*this.scale;if(t<=r.bottom)return r.domTop+(t-r.top);i=r.bottom,n=r.domBottom}}fromDOM(t){for(let e=0,i=0,n=0;;e++){let r=e<this.viewports.length?this.viewports[e]:null;if(!r||t<r.domTop)return i+(t-n)/this.scale;if(t<=r.domBottom)return r.top+(t-r.domTop);i=r.bottom,n=r.domBottom}}eq(t){return t instanceof Ni&&this.scale==t.scale&&this.viewports.length==t.viewports.length&&this.viewports.every(((e,i)=>e.from==t.viewports[i].from&&e.to==t.viewports[i].to))}}function Pi(t,e){if(1==e.scale)return t;let i=e.toDOM(t.top),n=e.toDOM(t.bottom);return new hi(t.from,t.length,i,n-i,Array.isArray(t._content)?t._content.map((t=>Pi(t,e))):t._content)}const Oi=n.Facet.define({combine:t=>t.join(" ")}),Di=n.Facet.define({combine:t=>t.indexOf(!0)>-1}),Ri=r.StyleModule.newName(),Li=r.StyleModule.newName(),Ii=r.StyleModule.newName(),Bi={"&light":"."+Li,"&dark":"."+Ii};function Fi(t,e,i){return new r.StyleModule(e,{finish:e=>/&/.test(e)?e.replace(/&\w*/,(e=>{if("&"==e)return t;if(!i||!i[e])throw new RangeError(`Unsupported selector: ${e}`);return i[e]})):t+" "+e})}const _i=Fi("."+Ri,{"&":{position:"relative !important",boxSizing:"border-box","&.cm-focused":{outline:"1px dotted #212121"},display:"flex !important",flexDirection:"column"},".cm-scroller":{display:"flex !important",alignItems:"flex-start !important",fontFamily:"monospace",lineHeight:1.4,height:"100%",overflowX:"auto",position:"relative",zIndex:0},".cm-content":{margin:0,flexGrow:2,flexShrink:0,display:"block",whiteSpace:"pre",wordWrap:"normal",boxSizing:"border-box",minHeight:"100%",padding:"4px 0",outline:"none","&[contenteditable=true]":{WebkitUserModify:"read-write-plaintext-only"}},".cm-lineWrapping":{whiteSpace_fallback:"pre-wrap",whiteSpace:"break-spaces",wordBreak:"break-word",overflowWrap:"anywhere",flexShrink:1},"&light .cm-content":{caretColor:"black"},"&dark .cm-content":{caretColor:"white"},".cm-line":{display:"block",padding:"0 2px 0 6px"},".cm-layer":{position:"absolute",left:0,top:0,contain:"size style","& > *":{position:"absolute"}},"&light .cm-selectionBackground":{background:"#d9d9d9"},"&dark .cm-selectionBackground":{background:"#222"},"&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground":{background:"#d7d4f0"},"&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground":{background:"#233"},".cm-cursorLayer":{pointerEvents:"none"},"&.cm-focused > .cm-scroller > .cm-cursorLayer":{animation:"steps(1) cm-blink 1.2s infinite"},"@keyframes cm-blink":{"0%":{},"50%":{opacity:0},"100%":{}},"@keyframes cm-blink2":{"0%":{},"50%":{opacity:0},"100%":{}},".cm-cursor, .cm-dropCursor":{borderLeft:"1.2px solid black",marginLeft:"-0.6px",pointerEvents:"none"},".cm-cursor":{display:"none"},"&dark .cm-cursor":{borderLeftColor:"#444"},".cm-dropCursor":{position:"absolute"},"&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor":{display:"block"},".cm-iso":{unicodeBidi:"isolate"},".cm-announced":{position:"fixed",top:"-10000px"},"@media print":{".cm-announced":{display:"none"}},"&light .cm-activeLine":{backgroundColor:"#cceeff44"},"&dark .cm-activeLine":{backgroundColor:"#99eeff33"},"&light .cm-specialChar":{color:"red"},"&dark .cm-specialChar":{color:"#f78"},".cm-gutters":{flexShrink:0,display:"flex",height:"100%",boxSizing:"border-box",insetInlineStart:0,zIndex:200},"&light .cm-gutters":{backgroundColor:"#f5f5f5",color:"#6c6c6c",borderRight:"1px solid #ddd"},"&dark .cm-gutters":{backgroundColor:"#333338",color:"#ccc"},".cm-gutter":{display:"flex !important",flexDirection:"column",flexShrink:0,boxSizing:"border-box",minHeight:"100%",overflow:"hidden"},".cm-gutterElement":{boxSizing:"border-box"},".cm-lineNumbers .cm-gutterElement":{padding:"0 3px 0 5px",minWidth:"20px",textAlign:"right",whiteSpace:"nowrap"},"&light .cm-activeLineGutter":{backgroundColor:"#e2f2ff"},"&dark .cm-activeLineGutter":{backgroundColor:"#222227"},".cm-panels":{boxSizing:"border-box",position:"sticky",left:0,right:0},"&light .cm-panels":{backgroundColor:"#f5f5f5",color:"black"},"&light .cm-panels-top":{borderBottom:"1px solid #ddd"},"&light .cm-panels-bottom":{borderTop:"1px solid #ddd"},"&dark .cm-panels":{backgroundColor:"#333338",color:"white"},".cm-tab":{display:"inline-block",overflow:"hidden",verticalAlign:"bottom"},".cm-widgetBuffer":{verticalAlign:"text-top",height:"1em",width:0,display:"inline"},".cm-placeholder":{color:"#888",display:"inline-block",verticalAlign:"top"},".cm-highlightSpace:before":{content:"attr(data-display)",position:"absolute",pointerEvents:"none",color:"#888"},".cm-highlightTab":{backgroundImage:'url(\'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>\')',backgroundSize:"auto 100%",backgroundPosition:"right 90%",backgroundRepeat:"no-repeat"},".cm-trailingSpace":{backgroundColor:"#ff332255"},".cm-button":{verticalAlign:"middle",color:"inherit",fontSize:"70%",padding:".2em 1em",borderRadius:"1px"},"&light .cm-button":{backgroundImage:"linear-gradient(#eff1f5, #d9d9df)",border:"1px solid #888","&:active":{backgroundImage:"linear-gradient(#b4b4b4, #d0d3d6)"}},"&dark .cm-button":{backgroundImage:"linear-gradient(#393939, #111)",border:"1px solid #888","&:active":{backgroundImage:"linear-gradient(#111, #333)"}},".cm-textfield":{verticalAlign:"middle",color:"inherit",fontSize:"70%",border:"1px solid silver",padding:".2em .5em"},"&light .cm-textfield":{backgroundColor:"white"},"&dark .cm-textfield":{border:"1px solid #555",backgroundColor:"inherit"}},Bi),qi="￿";class Vi{constructor(t,e){this.points=t,this.text="",this.lineSeparator=e.facet(n.EditorState.lineSeparator)}append(t){this.text+=t}lineBreak(){this.text+=qi}readRange(t,e){if(!t)return this;let i=t.parentNode;for(let n=t;;){this.findPointBefore(i,n);let t=this.text.length;this.readNode(n);let r=n.nextSibling;if(r==e)break;let s=P.get(n),o=P.get(r);(s&&o?s.breakAfter:(s?s.breakAfter:d(n))||d(r)&&("BR"!=n.nodeName||n.cmIgnore)&&this.text.length>t)&&this.lineBreak(),n=r}return this.findPointBefore(i,e),this}readTextNode(t){let e=t.nodeValue;for(let i of this.points)i.node==t&&(i.pos=this.text.length+Math.min(i.offset,e.length));for(let i=0,n=this.lineSeparator?null:/\r\n?|\n/g;;){let r,s=-1,o=1;if(this.lineSeparator?(s=e.indexOf(this.lineSeparator,i),o=this.lineSeparator.length):(r=n.exec(e))&&(s=r.index,o=r[0].length),this.append(e.slice(i,s<0?e.length:s)),s<0)break;if(this.lineBreak(),o>1)for(let e of this.points)e.node==t&&e.pos>this.text.length&&(e.pos-=o-1);i=s+o}}readNode(t){if(t.cmIgnore)return;let e=P.get(t),i=e&&e.overrideDOMText;if(null!=i){this.findPointInside(t,i.length);for(let t=i.iter();!t.next().done;)t.lineBreak?this.lineBreak():this.append(t.value)}else 3==t.nodeType?this.readTextNode(t):"BR"==t.nodeName?t.nextSibling&&this.lineBreak():1==t.nodeType&&this.readRange(t.firstChild,null)}findPointBefore(t,e){for(let i of this.points)i.node==t&&t.childNodes[i.offset]==e&&(i.pos=this.text.length)}findPointInside(t,e){for(let i of this.points)(3==t.nodeType?i.node==t:t.contains(i.node))&&(i.pos=this.text.length+(Hi(t,i.node,i.offset)?e:0))}}function Hi(t,e,i){for(;;){if(!e||i<p(e))return!1;if(e==t)return!0;i=u(e)+1,e=e.parentNode}}class Wi{constructor(t,e){this.node=t,this.offset=e,this.pos=-1}}class zi{constructor(t,e,i,r){this.typeOver=r,this.bounds=null,this.text="",this.domChanged=e>-1;let{impreciseHead:s,impreciseAnchor:o}=t.docView;if(t.state.readOnly&&e>-1)this.newSel=null;else if(e>-1&&(this.bounds=t.docView.domBoundsAround(e,i,0))){let e=s||o?[]:function(t){let e=[];if(t.root.activeElement!=t.contentDOM)return e;let{anchorNode:i,anchorOffset:n,focusNode:r,focusOffset:s}=t.observer.selectionRange;return i&&(e.push(new Wi(i,n)),r==i&&s==n||e.push(new Wi(r,s))),e}(t),i=new Vi(e,t.state);i.readRange(this.bounds.startDOM,this.bounds.endDOM),this.text=i.text,this.newSel=function(t,e){if(0==t.length)return null;let i=t[0].pos,r=2==t.length?t[1].pos:i;return i>-1&&r>-1?n.EditorSelection.single(i+e,r+e):null}(e,this.bounds.from)}else{let e=t.observer.selectionRange,i=s&&s.node==e.focusNode&&s.offset==e.focusOffset||!a(t.contentDOM,e.focusNode)?t.state.selection.main.head:t.docView.posFromDOM(e.focusNode,e.focusOffset),r=o&&o.node==e.anchorNode&&o.offset==e.anchorOffset||!a(t.contentDOM,e.anchorNode)?t.state.selection.main.anchor:t.docView.posFromDOM(e.anchorNode,e.anchorOffset),l=t.viewport;if((K.ios||K.chrome)&&t.state.selection.main.empty&&i!=r&&(l.from>0||l.to<t.state.doc.length)){let e=Math.min(i,r),n=Math.max(i,r),s=l.from-e,o=l.to-n;0!=s&&1!=s&&0!=e||0!=o&&-1!=o&&n!=t.state.doc.length||(i=0,r=t.state.doc.length)}this.newSel=n.EditorSelection.single(r,i)}}}function ji(t,e){let i,{newSel:r}=e,s=t.state.selection.main,o=t.inputState.lastKeyTime>Date.now()-100?t.inputState.lastKeyCode:-1;if(e.bounds){let{from:r,to:a}=e.bounds,l=s.from,h=null;(8===o||K.android&&e.text.length<a-r)&&(l=s.to,h="end");let c=function(t,e,i,n){let r=Math.min(t.length,e.length),s=0;for(;s<r&&t.charCodeAt(s)==e.charCodeAt(s);)s++;if(s==r&&t.length==e.length)return null;let o=t.length,a=e.length;for(;o>0&&a>0&&t.charCodeAt(o-1)==e.charCodeAt(a-1);)o--,a--;return"end"==n&&(i-=o+Math.max(0,s-Math.min(o,a))-s),o<s&&t.length<e.length?(s-=i<=s&&i>=o?s-i:0,a=s+(a-o),o=s):a<s&&(s-=i<=s&&i>=a?s-i:0,o=s+(o-a),a=s),{from:s,toA:o,toB:a}}(t.state.doc.sliceString(r,a,qi),e.text,l-r,h);c&&(K.chrome&&13==o&&c.toB==c.from+2&&e.text.slice(c.from,c.toB)==qi+qi&&c.toB--,i={from:r+c.from,to:r+c.toA,insert:n.Text.of(e.text.slice(c.from,c.toB).split(qi))})}else r&&(!t.hasFocus&&t.state.facet(Zt)||r.main.eq(s))&&(r=null);if(!i&&!r)return!1;if(!i&&e.typeOver&&!s.empty&&r&&r.main.empty?i={from:s.from,to:s.to,insert:t.state.doc.slice(s.from,s.to)}:i&&i.from>=s.from&&i.to<=s.to&&(i.from!=s.from||i.to!=s.to)&&s.to-s.from-(i.to-i.from)<=4?i={from:s.from,to:s.to,insert:t.state.doc.slice(s.from,i.from).append(i.insert).append(t.state.doc.slice(i.to,s.to))}:(K.mac||K.android)&&i&&i.from==i.to&&i.from==s.head-1&&/^\. ?$/.test(i.insert.toString())&&"off"==t.contentDOM.getAttribute("autocorrect")?(r&&2==i.insert.length&&(r=n.EditorSelection.single(r.main.anchor-1,r.main.head-1)),i={from:s.from,to:s.to,insert:n.Text.of([" "])}):K.chrome&&i&&i.from==i.to&&i.from==s.head&&"\n "==i.insert.toString()&&t.lineWrapping&&(r&&(r=n.EditorSelection.single(r.main.anchor-1,r.main.head-1)),i={from:s.from,to:s.to,insert:n.Text.of([" "])}),i)return Ui(t,i,r,o);if(r&&!r.main.eq(s)){let e=!1,i="select";return t.inputState.lastSelectionTime>Date.now()-50&&("select"==t.inputState.lastSelectionOrigin&&(e=!0),i=t.inputState.lastSelectionOrigin),t.dispatch({selection:r,scrollIntoView:e,userEvent:i}),!0}return!1}function Ui(t,e,i,r=-1){if(K.ios&&t.inputState.flushIOSKey(e))return!0;let s=t.state.selection.main;if(K.android&&(e.to==s.to&&(e.from==s.from||e.from==s.from-1&&" "==t.state.sliceDoc(e.from,s.from))&&1==e.insert.length&&2==e.insert.lines&&C(t.contentDOM,"Enter",13)||(e.from==s.from-1&&e.to==s.to&&0==e.insert.length||8==r&&e.insert.length<e.to-e.from&&e.to>s.head)&&C(t.contentDOM,"Backspace",8)||e.from==s.from&&e.to==s.to+1&&0==e.insert.length&&C(t.contentDOM,"Delete",46)))return!0;let o,a=e.insert.toString();t.inputState.composing>=0&&t.inputState.composing++;let l=()=>o||(o=function(t,e,i){let r,s=t.state,o=s.selection.main;if(e.from>=o.from&&e.to<=o.to&&e.to-e.from>=(o.to-o.from)/3&&(!i||i.main.empty&&i.main.from==e.from+e.insert.length)&&t.inputState.composing<0){let i=o.from<e.from?s.sliceDoc(o.from,e.from):"",n=o.to>e.to?s.sliceDoc(e.to,o.to):"";r=s.replaceSelection(t.state.toText(i+e.insert.sliceString(0,void 0,t.state.lineBreak)+n))}else{let a=s.changes(e),l=i&&i.main.to<=a.newLength?i.main:void 0;if(s.selection.ranges.length>1&&t.inputState.composing>=0&&e.to<=o.to&&e.to>=o.to-10){let h,c=t.state.sliceDoc(e.from,e.to),u=i&&ve(t,i.main.head);if(u){let t=e.insert.length-(e.to-e.from);h={from:u.from,to:u.to-t}}else h=t.state.doc.lineAt(o.head);let d=o.to-e.to,f=o.to-o.from;r=s.changeByRange((i=>{if(i.from==o.from&&i.to==o.to)return{changes:a,range:l||i.map(a)};let r=i.to-d,u=r-c.length;if(i.to-i.from!=f||t.state.sliceDoc(u,r)!=c||i.to>=h.from&&i.from<=h.to)return{range:i};let p=s.changes({from:u,to:r,insert:e.insert}),m=i.to-o.to;return{changes:p,range:l?n.EditorSelection.range(Math.max(0,l.anchor+m),Math.max(0,l.head+m)):i.map(p)}}))}else r={changes:a,selection:l&&s.selection.replaceRange(l)}}let a="input.type";return(t.composing||t.inputState.compositionPendingChange&&t.inputState.compositionEndedAt>Date.now()-50)&&(t.inputState.compositionPendingChange=!1,a+=".compose",t.inputState.compositionFirstChange&&(a+=".start",t.inputState.compositionFirstChange=!1)),s.update(r,{userEvent:a,scrollIntoView:!0})}(t,e,i));return t.state.facet(zt).some((i=>i(t,e.from,e.to,a,l)))||t.dispatch(l()),!0}const Ki={childList:!0,characterData:!0,subtree:!0,attributes:!0,characterDataOldValue:!0},Gi=K.ie&&K.ie_version<=11;class $i{constructor(t){this.view=t,this.active=!1,this.editContext=null,this.selectionRange=new w,this.selectionChanged=!1,this.delayedFlush=-1,this.resizeTimeout=-1,this.queue=[],this.delayedAndroidKey=null,this.flushingAndroidKey=-1,this.lastChange=0,this.scrollTargets=[],this.intersection=null,this.resizeScroll=null,this.intersecting=!1,this.gapIntersection=null,this.gaps=[],this.printQuery=null,this.parentCheck=-1,this.dom=t.contentDOM,this.observer=new MutationObserver((e=>{for(let t of e)this.queue.push(t);(K.ie&&K.ie_version<=11||K.ios&&t.composing)&&e.some((t=>"childList"==t.type&&t.removedNodes.length||"characterData"==t.type&&t.oldValue.length>t.target.nodeValue.length))?this.flushSoon():this.flush()})),!window.EditContext||!1===t.constructor.EDIT_CONTEXT||K.chrome&&K.chrome_version<126||(this.editContext=new Xi(t),t.state.facet(Zt)&&(t.contentDOM.editContext=this.editContext.editContext)),Gi&&(this.onCharData=t=>{this.queue.push({target:t.target,type:"characterData",oldValue:t.prevValue}),this.flushSoon()}),this.onSelectionChange=this.onSelectionChange.bind(this),this.onResize=this.onResize.bind(this),this.onPrint=this.onPrint.bind(this),this.onScroll=this.onScroll.bind(this),window.matchMedia&&(this.printQuery=window.matchMedia("print")),"function"==typeof ResizeObserver&&(this.resizeScroll=new ResizeObserver((()=>{var t;(null===(t=this.view.docView)||void 0===t?void 0:t.lastUpdate)<Date.now()-75&&this.onResize()})),this.resizeScroll.observe(t.scrollDOM)),this.addWindowListeners(this.win=t.win),this.start(),"function"==typeof IntersectionObserver&&(this.intersection=new IntersectionObserver((t=>{this.parentCheck<0&&(this.parentCheck=setTimeout(this.listenForScroll.bind(this),1e3)),t.length>0&&t[t.length-1].intersectionRatio>0!=this.intersecting&&(this.intersecting=!this.intersecting,this.intersecting!=this.view.inView&&this.onScrollChanged(document.createEvent("Event")))}),{threshold:[0,.001]}),this.intersection.observe(this.dom),this.gapIntersection=new IntersectionObserver((t=>{t.length>0&&t[t.length-1].intersectionRatio>0&&this.onScrollChanged(document.createEvent("Event"))}),{})),this.listenForScroll(),this.readSelectionRange()}onScrollChanged(t){this.view.inputState.runHandlers("scroll",t),this.intersecting&&this.view.measure()}onScroll(t){this.intersecting&&this.flush(!1),this.editContext&&this.view.requestMeasure(this.editContext.measureReq),this.onScrollChanged(t)}onResize(){this.resizeTimeout<0&&(this.resizeTimeout=setTimeout((()=>{this.resizeTimeout=-1,this.view.requestMeasure()}),50))}onPrint(t){("change"!=t.type||t.matches)&&(this.view.viewState.printing=!0,this.view.measure(),setTimeout((()=>{this.view.viewState.printing=!1,this.view.requestMeasure()}),500))}updateGaps(t){if(this.gapIntersection&&(t.length!=this.gaps.length||this.gaps.some(((e,i)=>e!=t[i])))){this.gapIntersection.disconnect();for(let e of t)this.gapIntersection.observe(e);this.gaps=t}}onSelectionChange(t){let e=this.selectionChanged;if(!this.readSelectionRange()||this.delayedAndroidKey)return;let{view:i}=this,n=this.selectionRange;if(i.state.facet(Zt)?i.root.activeElement!=this.dom:!l(i.dom,n))return;let r=n.anchorNode&&i.docView.nearest(n.anchorNode);r&&r.ignoreEvent(t)?e||(this.selectionChanged=!1):(K.ie&&K.ie_version<=11||K.android&&K.chrome)&&!i.state.selection.main.empty&&n.focusNode&&c(n.focusNode,n.focusOffset,n.anchorNode,n.anchorOffset)?this.flushSoon():this.flush(!1)}readSelectionRange(){let{view:t}=this,e=o(t.root);if(!e)return!1;let i=K.safari&&11==t.root.nodeType&&function(t){let e=t.activeElement;for(;e&&e.shadowRoot;)e=e.shadowRoot.activeElement;return e}(this.dom.ownerDocument)==this.dom&&function(t,e){if(e.getComposedRanges){let i=e.getComposedRanges(t.root)[0];if(i)return Ji(t,i)}let i=null;function n(t){t.preventDefault(),t.stopImmediatePropagation(),i=t.getTargetRanges()[0]}return t.contentDOM.addEventListener("beforeinput",n,!0),t.dom.ownerDocument.execCommand("indent"),t.contentDOM.removeEventListener("beforeinput",n,!0),i?Ji(t,i):null}(this.view,e)||e;if(!i||this.selectionRange.eq(i))return!1;let n=l(this.dom,i);return n&&!this.selectionChanged&&t.inputState.lastFocusTime>Date.now()-200&&t.inputState.lastTouchTime<Date.now()-300&&function(t,e){let i=e.focusNode,n=e.focusOffset;if(!i||e.anchorNode!=i||e.anchorOffset!=n)return!1;for(n=Math.min(n,p(i));;)if(n){if(1!=i.nodeType)return!1;let t=i.childNodes[n-1];"false"==t.contentEditable?n--:(i=t,n=p(i))}else{if(i==t)return!0;n=u(i),i=i.parentNode}}(this.dom,i)?(this.view.inputState.lastFocusTime=0,t.docView.updateSelection(),!1):(this.selectionRange.setRange(i),n&&(this.selectionChanged=!0),!0)}setSelectionRange(t,e){this.selectionRange.set(t.node,t.offset,e.node,e.offset),this.selectionChanged=!1}clearSelectionRange(){this.selectionRange.set(null,0,null,0)}listenForScroll(){this.parentCheck=-1;let t=0,e=null;for(let i=this.dom;i;)if(1==i.nodeType)!e&&t<this.scrollTargets.length&&this.scrollTargets[t]==i?t++:e||(e=this.scrollTargets.slice(0,t)),e&&e.push(i),i=i.assignedSlot||i.parentNode;else{if(11!=i.nodeType)break;i=i.host}if(t<this.scrollTargets.length&&!e&&(e=this.scrollTargets.slice(0,t)),e){for(let t of this.scrollTargets)t.removeEventListener("scroll",this.onScroll);for(let t of this.scrollTargets=e)t.addEventListener("scroll",this.onScroll)}}ignore(t){if(!this.active)return t();try{return this.stop(),t()}finally{this.start(),this.clear()}}start(){this.active||(this.observer.observe(this.dom,Ki),Gi&&this.dom.addEventListener("DOMCharacterDataModified",this.onCharData),this.active=!0)}stop(){this.active&&(this.active=!1,this.observer.disconnect(),Gi&&this.dom.removeEventListener("DOMCharacterDataModified",this.onCharData))}clear(){this.processRecords(),this.queue.length=0,this.selectionChanged=!1}delayAndroidKey(t,e){var i;if(!this.delayedAndroidKey){let t=()=>{let t=this.delayedAndroidKey;t&&(this.clearDelayedAndroidKey(),this.view.inputState.lastKeyCode=t.keyCode,this.view.inputState.lastKeyTime=Date.now(),!this.flush()&&t.force&&C(this.dom,t.key,t.keyCode))};this.flushingAndroidKey=this.view.win.requestAnimationFrame(t)}this.delayedAndroidKey&&"Enter"!=t||(this.delayedAndroidKey={key:t,keyCode:e,force:this.lastChange<Date.now()-50||!!(null===(i=this.delayedAndroidKey)||void 0===i?void 0:i.force)})}clearDelayedAndroidKey(){this.win.cancelAnimationFrame(this.flushingAndroidKey),this.delayedAndroidKey=null,this.flushingAndroidKey=-1}flushSoon(){this.delayedFlush<0&&(this.delayedFlush=this.view.win.requestAnimationFrame((()=>{this.delayedFlush=-1,this.flush()})))}forceFlush(){this.delayedFlush>=0&&(this.view.win.cancelAnimationFrame(this.delayedFlush),this.delayedFlush=-1),this.flush()}pendingRecords(){for(let t of this.observer.takeRecords())this.queue.push(t);return this.queue}processRecords(){let t=this.pendingRecords();t.length&&(this.queue=[]);let e=-1,i=-1,n=!1;for(let r of t){let t=this.readMutation(r);t&&(t.typeOver&&(n=!0),-1==e?({from:e,to:i}=t):(e=Math.min(t.from,e),i=Math.max(t.to,i)))}return{from:e,to:i,typeOver:n}}readChange(){let{from:t,to:e,typeOver:i}=this.processRecords(),n=this.selectionChanged&&l(this.dom,this.selectionRange);if(t<0&&!n)return null;t>-1&&(this.lastChange=Date.now()),this.view.inputState.lastFocusTime=0,this.selectionChanged=!1;let r=new zi(this.view,t,e,i);return this.view.docView.domChanged={newSel:r.newSel?r.newSel.main:null},r}flush(t=!0){if(this.delayedFlush>=0||this.delayedAndroidKey)return!1;t&&this.readSelectionRange();let e=this.readChange();if(!e)return this.view.requestMeasure(),!1;let i=this.view.state,n=ji(this.view,e);return this.view.state==i&&(e.domChanged||e.newSel&&!e.newSel.main.eq(this.view.state.selection.main))&&this.view.update([]),n}readMutation(t){let e=this.view.docView.nearest(t.target);if(!e||e.ignoreMutation(t))return null;if(e.markDirty("attributes"==t.type),"attributes"==t.type&&(e.flags|=4),"childList"==t.type){let i=Yi(e,t.previousSibling||t.target.previousSibling,-1),n=Yi(e,t.nextSibling||t.target.nextSibling,1);return{from:i?e.posAfter(i):e.posAtStart,to:n?e.posBefore(n):e.posAtEnd,typeOver:!1}}return"characterData"==t.type?{from:e.posAtStart,to:e.posAtEnd,typeOver:t.target.nodeValue==t.oldValue}:null}setWindow(t){t!=this.win&&(this.removeWindowListeners(this.win),this.win=t,this.addWindowListeners(this.win))}addWindowListeners(t){t.addEventListener("resize",this.onResize),this.printQuery?this.printQuery.addEventListener("change",this.onPrint):t.addEventListener("beforeprint",this.onPrint),t.addEventListener("scroll",this.onScroll),t.document.addEventListener("selectionchange",this.onSelectionChange)}removeWindowListeners(t){t.removeEventListener("scroll",this.onScroll),t.removeEventListener("resize",this.onResize),this.printQuery?this.printQuery.removeEventListener("change",this.onPrint):t.removeEventListener("beforeprint",this.onPrint),t.document.removeEventListener("selectionchange",this.onSelectionChange)}update(t){this.editContext&&(this.editContext.update(t),t.startState.facet(Zt)!=t.state.facet(Zt)&&(t.view.contentDOM.editContext=t.state.facet(Zt)?this.editContext.editContext:null))}destroy(){var t,e,i;this.stop(),null===(t=this.intersection)||void 0===t||t.disconnect(),null===(e=this.gapIntersection)||void 0===e||e.disconnect(),null===(i=this.resizeScroll)||void 0===i||i.disconnect();for(let t of this.scrollTargets)t.removeEventListener("scroll",this.onScroll);this.removeWindowListeners(this.win),clearTimeout(this.parentCheck),clearTimeout(this.resizeTimeout),this.win.cancelAnimationFrame(this.delayedFlush),this.win.cancelAnimationFrame(this.flushingAndroidKey)}}function Yi(t,e,i){for(;e;){let n=P.get(e);if(n&&n.parent==t)return n;let r=e.parentNode;e=r!=t.dom?r:i>0?e.nextSibling:e.previousSibling}return null}function Ji(t,e){let i=e.startContainer,n=e.startOffset,r=e.endContainer,s=e.endOffset,o=t.docView.domAtPos(t.state.selection.main.anchor);return c(o.node,o.offset,r,s)&&([i,n,r,s]=[r,s,i,n]),{anchorNode:i,anchorOffset:n,focusNode:r,focusOffset:s}}class Xi{constructor(t){this.from=0,this.to=0,this.pendingContextChange=null,this.resetRange(t.state);let e=this.editContext=new window.EditContext({text:t.state.doc.sliceString(this.from,this.to),selectionStart:this.toContextPos(Math.max(this.from,Math.min(this.to,t.state.selection.main.anchor))),selectionEnd:this.toContextPos(t.state.selection.main.head)});e.addEventListener("textupdate",(e=>{let{anchor:i}=t.state.selection.main,r={from:this.toEditorPos(e.updateRangeStart),to:this.toEditorPos(e.updateRangeEnd),insert:n.Text.of(e.text.split("\n"))};r.from==this.from&&i<this.from?r.from=i:r.to==this.to&&i>this.to&&(r.to=i),(r.from!=r.to||r.insert.length)&&(this.pendingContextChange=r,Ui(t,r,n.EditorSelection.single(this.toEditorPos(e.selectionStart),this.toEditorPos(e.selectionEnd))),this.pendingContextChange&&this.revertPending(t.state))})),e.addEventListener("characterboundsupdate",(i=>{let n=[],r=null;for(let e=this.toEditorPos(i.rangeStart),s=this.toEditorPos(i.rangeEnd);e<s;e++){let i=t.coordsForChar(e);r=i&&new DOMRect(i.left,i.top,i.right-i.left,i.bottom-i.top)||r||new DOMRect,n.push(r)}e.updateCharacterBounds(i.rangeStart,n)})),e.addEventListener("textformatupdate",(e=>{let i=[];for(let t of e.getTextFormats()){let e=t.underlineStyle,n=t.underlineThickness;if("None"!=e&&"None"!=n){let r=`text-decoration: underline ${"Dashed"==e?"dashed ":"Squiggle"==e?"wavy ":""}${"Thin"==n?1:2}px`;i.push(ct.mark({attributes:{style:r}}).range(this.toEditorPos(t.rangeStart),this.toEditorPos(t.rangeEnd)))}}t.dispatch({effects:Jt.of(ct.set(i))})})),e.addEventListener("compositionstart",(()=>{t.inputState.composing<0&&(t.inputState.composing=0,t.inputState.compositionFirstChange=!0)})),e.addEventListener("compositionend",(()=>{t.inputState.composing=-1,t.inputState.compositionFirstChange=null})),this.measureReq={read:t=>{this.editContext.updateControlBounds(t.contentDOM.getBoundingClientRect());let e=o(t.root);e&&e.rangeCount&&this.editContext.updateSelectionBounds(e.getRangeAt(0).getBoundingClientRect())}}}applyEdits(t){let e=0,i=!1,n=this.pendingContextChange;return t.changes.iterChanges(((r,s,o,a,l)=>{if(i)return;let h=l.length-(s-r);if(n&&s>=n.to){if(n.from==r&&n.to==s&&n.insert.eq(l))return n=this.pendingContextChange=null,void(e+=h);n=null,this.revertPending(t.state)}if(r+=e,(s+=e)<=this.from)this.from+=h,this.to+=h;else if(r<this.to){if(r<this.from||s>this.to||this.to-this.from+l.length>3e4)return void(i=!0);this.editContext.updateText(this.toContextPos(r),this.toContextPos(s),l.toString()),this.to+=h}e+=h})),n&&!i&&this.revertPending(t.state),!i}update(t){this.applyEdits(t)&&this.rangeIsValid(t.state)?(t.docChanged||t.selectionSet)&&this.setSelection(t.state):(this.pendingContextChange=null,this.resetRange(t.state),this.editContext.updateText(0,this.editContext.text.length,t.state.doc.sliceString(this.from,this.to)),this.setSelection(t.state)),(t.geometryChanged||t.docChanged||t.selectionSet)&&t.view.requestMeasure(this.measureReq)}resetRange(t){let{head:e}=t.selection.main;this.from=Math.max(0,e-1e4),this.to=Math.min(t.doc.length,e+1e4)}revertPending(t){let e=this.pendingContextChange;this.pendingContextChange=null,this.editContext.updateText(this.toContextPos(e.from),this.toContextPos(e.to+e.insert.length),t.doc.sliceString(e.from,e.to))}setSelection(t){let{main:e}=t.selection,i=this.toContextPos(Math.max(this.from,Math.min(this.to,e.anchor))),n=this.toContextPos(e.head);this.editContext.selectionStart==i&&this.editContext.selectionEnd==n||this.editContext.updateSelection(i,n)}rangeIsValid(t){let{head:e}=t.selection.main;return!(this.from>0&&e-this.from<500||this.to<t.doc.length&&this.to-e<500||this.to-this.from>3e4)}toEditorPos(t){return t+this.from}toContextPos(t){return t-this.from}}class Zi{get state(){return this.viewState.state}get viewport(){return this.viewState.viewport}get visibleRanges(){return this.viewState.visibleRanges}get inView(){return this.viewState.inView}get composing(){return this.inputState.composing>0}get compositionStarted(){return this.inputState.composing>=0}get root(){return this._root}get win(){return this.dom.ownerDocument.defaultView||window}constructor(t={}){this.plugins=[],this.pluginMap=new Map,this.editorAttrs={},this.contentAttrs={},this.bidiCache=[],this.destroyed=!1,this.updateState=2,this.measureScheduled=-1,this.measureRequests=[],this.contentDOM=document.createElement("div"),this.scrollDOM=document.createElement("div"),this.scrollDOM.tabIndex=-1,this.scrollDOM.className="cm-scroller",this.scrollDOM.appendChild(this.contentDOM),this.announceDOM=document.createElement("div"),this.announceDOM.className="cm-announced",this.announceDOM.setAttribute("aria-live","polite"),this.dom=document.createElement("div"),this.dom.appendChild(this.announceDOM),this.dom.appendChild(this.scrollDOM),t.parent&&t.parent.appendChild(this.dom);let{dispatch:e}=t;this.dispatchTransactions=t.dispatchTransactions||e&&(t=>t.forEach((t=>e(t,this))))||(t=>this.update(t)),this.dispatch=this.dispatch.bind(this),this._root=t.root||function(t){for(;t;){if(t&&(9==t.nodeType||11==t.nodeType&&t.host))return t;t=t.assignedSlot||t.parentNode}return null}(t.parent)||document,this.viewState=new Ei(t.state||n.EditorState.create(t)),t.scrollTo&&t.scrollTo.is(Yt)&&(this.viewState.scrollTarget=t.scrollTo.value.clip(this.viewState.state)),this.plugins=this.state.facet(te).map((t=>new ie(t)));for(let t of this.plugins)t.update(this);this.observer=new $i(this),this.inputState=new De(this),this.inputState.ensureHandlers(this.plugins),this.docView=new me(this),this.mountStyles(),this.updateAttrs(),this.updateState=0,this.requestMeasure()}dispatch(...t){let e=1==t.length&&t[0]instanceof n.Transaction?t:1==t.length&&Array.isArray(t[0])?t[0]:[this.state.update(...t)];this.dispatchTransactions(e,this)}update(t){if(0!=this.updateState)throw new Error("Calls to EditorView.update are not allowed while an update is in progress");let e,i=!1,r=!1,s=this.state;for(let e of t){if(e.startState!=s)throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");s=e.state}if(this.destroyed)return void(this.viewState.state=s);let o=this.hasFocus,a=0,l=null;t.some((t=>t.annotation(ii)))?(this.inputState.notifiedFocused=o,a=1):o!=this.inputState.notifiedFocused&&(this.inputState.notifiedFocused=o,l=ni(s,o),l||(a=1));let h=this.observer.delayedAndroidKey,c=null;if(h?(this.observer.clearDelayedAndroidKey(),c=this.observer.readChange(),(c&&!this.state.doc.eq(s.doc)||!this.state.selection.eq(s.selection))&&(c=null)):this.observer.clear(),s.facet(n.EditorState.phrases)!=this.state.facet(n.EditorState.phrases))return this.setState(s);e=pe.create(this,s,t),e.flags|=a;let u=this.viewState.scrollTarget;try{this.updateState=2;for(let e of t){if(u&&(u=u.map(e.changes)),e.scrollIntoView){let{main:t}=e.state.selection;u=new $t(t.empty?t:n.EditorSelection.cursor(t.head,t.head>t.anchor?-1:1))}for(let t of e.effects)t.is(Yt)&&(u=t.value.clip(this.state))}this.viewState.update(e,u),this.bidiCache=en.update(this.bidiCache,e.changes),e.empty||(this.updatePlugins(e),this.inputState.update(e)),i=this.docView.update(e),this.state.facet(de)!=this.styleModules&&this.mountStyles(),r=this.updateAttrs(),this.showAnnouncements(t),this.docView.updateSelection(i,t.some((t=>t.isUserEvent("select.pointer"))))}finally{this.updateState=0}if(e.startState.facet(Oi)!=e.state.facet(Oi)&&(this.viewState.mustMeasureContent=!0),(i||r||u||this.viewState.mustEnforceCursorAssoc||this.viewState.mustMeasureContent)&&this.requestMeasure(),i&&this.docViewUpdate(),!e.empty)for(let t of this.state.facet(Wt))try{t(e)}catch(t){Xt(this.state,t,"update listener")}(l||c)&&Promise.resolve().then((()=>{l&&this.state==l.startState&&this.dispatch(l),c&&!ji(this,c)&&h.force&&C(this.contentDOM,h.key,h.keyCode)}))}setState(t){if(0!=this.updateState)throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");if(this.destroyed)return void(this.viewState.state=t);this.updateState=2;let e=this.hasFocus;try{for(let t of this.plugins)t.destroy(this);this.viewState=new Ei(t),this.plugins=t.facet(te).map((t=>new ie(t))),this.pluginMap.clear();for(let t of this.plugins)t.update(this);this.docView.destroy(),this.docView=new me(this),this.inputState.ensureHandlers(this.plugins),this.mountStyles(),this.updateAttrs(),this.bidiCache=[]}finally{this.updateState=0}e&&this.focus(),this.requestMeasure()}updatePlugins(t){let e=t.startState.facet(te),i=t.state.facet(te);if(e!=i){let n=[];for(let r of i){let i=e.indexOf(r);if(i<0)n.push(new ie(r));else{let e=this.plugins[i];e.mustUpdate=t,n.push(e)}}for(let e of this.plugins)e.mustUpdate!=t&&e.destroy(this);this.plugins=n,this.pluginMap.clear()}else for(let e of this.plugins)e.mustUpdate=t;for(let t=0;t<this.plugins.length;t++)this.plugins[t].update(this);e!=i&&this.inputState.ensureHandlers(this.plugins)}docViewUpdate(){for(let t of this.plugins){let e=t.value;if(e&&e.docViewUpdate)try{e.docViewUpdate(this)}catch(t){Xt(this.state,t,"doc view update listener")}}}measure(t=!0){if(this.destroyed)return;if(this.measureScheduled>-1&&this.win.cancelAnimationFrame(this.measureScheduled),this.observer.delayedAndroidKey)return this.measureScheduled=-1,void this.requestMeasure();this.measureScheduled=0,t&&this.observer.forceFlush();let e=null,i=this.scrollDOM,n=i.scrollTop*this.scaleY,{scrollAnchorPos:r,scrollAnchorHeight:s}=this.viewState;Math.abs(n-this.viewState.scrollTop)>1&&(s=-1),this.viewState.scrollAnchorHeight=-1;try{for(let t=0;;t++){if(s<0)if(k(i))r=-1,s=this.viewState.heightMap.height;else{let t=this.viewState.scrollAnchorAt(n);r=t.from,s=t.top}this.updateState=1;let o=this.viewState.measure(this);if(!o&&!this.measureRequests.length&&null==this.viewState.scrollTarget)break;if(t>5){console.warn(this.measureRequests.length?"Measure loop restarted more than 5 times":"Viewport failed to stabilize");break}let a=[];4&o||([this.measureRequests,a]=[a,this.measureRequests]);let l=a.map((t=>{try{return t.read(this)}catch(t){return Xt(this.state,t),tn}})),h=pe.create(this,this.state,[]),c=!1;h.flags|=o,e?e.flags|=o:e=h,this.updateState=2,h.empty||(this.updatePlugins(h),this.inputState.update(h),this.updateAttrs(),c=this.docView.update(h),c&&this.docViewUpdate());for(let t=0;t<a.length;t++)if(l[t]!=tn)try{let e=a[t];e.write&&e.write(l[t],this)}catch(t){Xt(this.state,t)}if(c&&this.docView.updateSelection(!0),!h.viewportChanged&&0==this.measureRequests.length){if(this.viewState.editorHeight){if(this.viewState.scrollTarget){this.docView.scrollIntoView(this.viewState.scrollTarget),this.viewState.scrollTarget=null,s=-1;continue}{let t=(r<0?this.viewState.heightMap.height:this.viewState.lineBlockAt(r).top)-s;if(t>1||t<-1){n+=t,i.scrollTop=n/this.scaleY,s=-1;continue}}}break}}}finally{this.updateState=0,this.measureScheduled=-1}if(e&&!e.empty)for(let t of this.state.facet(Wt))t(e)}get themeClasses(){return Ri+" "+(this.state.facet(Di)?Ii:Li)+" "+this.state.facet(Oi)}updateAttrs(){let t=nn(this,ne,{class:"cm-editor"+(this.hasFocus?" cm-focused ":" ")+this.themeClasses}),e={spellcheck:"false",autocorrect:"off",autocapitalize:"off",translate:"no",contenteditable:this.state.facet(Zt)?"true":"false",class:"cm-content",style:`${K.tabSize}: ${this.state.tabSize}`,role:"textbox","aria-multiline":"true"};this.state.readOnly&&(e["aria-readonly"]="true"),nn(this,re,e);let i=this.observer.ignore((()=>{let i=nt(this.contentDOM,this.contentAttrs,e),n=nt(this.dom,this.editorAttrs,t);return i||n}));return this.editorAttrs=t,this.contentAttrs=e,i}showAnnouncements(t){let e=!0;for(let i of t)for(let t of i.effects)t.is(Zi.announce)&&(e&&(this.announceDOM.textContent=""),e=!1,this.announceDOM.appendChild(document.createElement("div")).textContent=t.value)}mountStyles(){this.styleModules=this.state.facet(de);let t=this.state.facet(Zi.cspNonce);r.StyleModule.mount(this.root,this.styleModules.concat(_i).reverse(),t?{nonce:t}:void 0)}readMeasured(){if(2==this.updateState)throw new Error("Reading the editor layout isn't allowed during an update");0==this.updateState&&this.measureScheduled>-1&&this.measure(!1)}requestMeasure(t){if(this.measureScheduled<0&&(this.measureScheduled=this.win.requestAnimationFrame((()=>this.measure()))),t){if(this.measureRequests.indexOf(t)>-1)return;if(null!=t.key)for(let e=0;e<this.measureRequests.length;e++)if(this.measureRequests[e].key===t.key)return void(this.measureRequests[e]=t);this.measureRequests.push(t)}}plugin(t){let e=this.pluginMap.get(t);return(void 0===e||e&&e.spec!=t)&&this.pluginMap.set(t,e=this.plugins.find((e=>e.spec==t))||null),e&&e.update(this).value}get documentTop(){return this.contentDOM.getBoundingClientRect().top+this.viewState.paddingTop}get documentPadding(){return{top:this.viewState.paddingTop,bottom:this.viewState.paddingBottom}}get scaleX(){return this.viewState.scaleX}get scaleY(){return this.viewState.scaleY}elementAtHeight(t){return this.readMeasured(),this.viewState.elementAtHeight(t)}lineBlockAtHeight(t){return this.readMeasured(),this.viewState.lineBlockAtHeight(t)}get viewportLineBlocks(){return this.viewState.viewportLines}lineBlockAt(t){return this.viewState.lineBlockAt(t)}get contentHeight(){return this.viewState.contentHeight}moveByChar(t,e,i){return Oe(this,t,Ne(this,t,e,i))}moveByGroup(t,e){return Oe(this,t,Ne(this,t,e,(e=>function(t,e,i){let r=t.state.charCategorizer(e),s=r(i);return t=>{let e=r(t);return s==n.CharCategory.Space&&(s=e),s==e}}(this,t.head,e))))}visualLineSide(t,e){let i=this.bidiSpans(t),r=this.textDirectionAt(t.from),s=i[e?i.length-1:0];return n.EditorSelection.cursor(s.side(e,r)+t.from,s.forward(!e,r)?1:-1)}moveToLineBoundary(t,i,r=!0){return function(t,i,r,s){let o=Me(t,i.head),a=s&&o.type==e.BlockType.Text&&(t.lineWrapping||o.widgetLineBreaks)?t.coordsAtPos(i.assoc<0&&i.head>o.from?i.head-1:i.head):null;if(a){let i=t.dom.getBoundingClientRect(),s=t.textDirectionAt(o.from),l=t.posAtCoords({x:r==(s==e.Direction.LTR)?i.right-1:i.left+1,y:(a.top+a.bottom)/2});if(null!=l)return n.EditorSelection.cursor(l,r?-1:1)}return n.EditorSelection.cursor(r?o.to:o.from,r?-1:1)}(this,t,i,r)}moveVertically(t,e,i){return Oe(this,t,function(t,e,i,r){let s=e.head,o=i?1:-1;if(s==(i?t.state.doc.length:0))return n.EditorSelection.cursor(s,e.assoc);let a,l=e.goalColumn,h=t.contentDOM.getBoundingClientRect(),c=t.coordsAtPos(s,e.assoc||-1),u=t.documentTop;if(c)null==l&&(l=c.left-h.left),a=o<0?c.top:c.bottom;else{let e=t.viewState.lineBlockAt(s);null==l&&(l=Math.min(h.right-h.left,t.defaultCharacterWidth*(s-e.from))),a=(o<0?e.top:e.bottom)+u}let d=h.left+l,f=null!=r?r:t.viewState.heightOracle.textHeight>>1;for(let e=0;;e+=10){let i=a+(f+e)*o,r=Ae(t,{x:d,y:i},!1,o);if(i<h.top||i>h.bottom||(o<0?r<s:r>s)){let e=t.docView.coordsForChar(r),s=!e||i<e.top?-1:1;return n.EditorSelection.cursor(r,s,void 0,l)}}}(this,t,e,i))}domAtPos(t){return this.docView.domAtPos(t)}posAtDOM(t,e=0){return this.docView.posFromDOM(t,e)}posAtCoords(t,e=!0){return this.readMeasured(),Ae(this,t,e)}coordsAtPos(t,i=1){this.readMeasured();let n=this.docView.coordsAt(t,i);if(!n||n.left==n.right)return n;let r=this.state.doc.lineAt(t),s=this.bidiSpans(r);return m(n,s[Mt.find(s,t-r.from,-1,i)].dir==e.Direction.LTR==i>0)}coordsForChar(t){return this.readMeasured(),this.docView.coordsForChar(t)}get defaultCharacterWidth(){return this.viewState.heightOracle.charWidth}get defaultLineHeight(){return this.viewState.heightOracle.lineHeight}get textDirection(){return this.viewState.defaultTextDirection}textDirectionAt(t){return!this.state.facet(Ut)||t<this.viewport.from||t>this.viewport.to?this.textDirection:(this.readMeasured(),this.docView.textDirectionAt(t))}get lineWrapping(){return this.viewState.heightOracle.lineWrapping}bidiSpans(t){if(t.length>Qi)return Lt(t.length);let e,i=this.textDirectionAt(t.from);for(let n of this.bidiCache)if(n.from==t.from&&n.dir==i&&(n.fresh||Nt(n.isolates,e=he(this,t))))return n.order;e||(e=he(this,t));let n=Rt(t.text,i,e);return this.bidiCache.push(new en(t.from,t.to,i,e,!0,n)),n}get hasFocus(){var t;return(this.dom.ownerDocument.hasFocus()||K.safari&&(null===(t=this.inputState)||void 0===t?void 0:t.lastContextMenu)>Date.now()-3e4)&&this.root.activeElement==this.contentDOM}focus(){this.observer.ignore((()=>{S(this.contentDOM),this.docView.updateSelection()}))}setRoot(t){this._root!=t&&(this._root=t,this.observer.setWindow((9==t.nodeType?t:t.ownerDocument).defaultView||window),this.mountStyles())}destroy(){this.root.activeElement==this.contentDOM&&this.contentDOM.blur();for(let t of this.plugins)t.destroy(this);this.plugins=[],this.inputState.destroy(),this.docView.destroy(),this.dom.remove(),this.observer.destroy(),this.measureScheduled>-1&&this.win.cancelAnimationFrame(this.measureScheduled),this.destroyed=!0}static scrollIntoView(t,e={}){return Yt.of(new $t("number"==typeof t?n.EditorSelection.cursor(t):t,e.y,e.x,e.yMargin,e.xMargin))}scrollSnapshot(){let{scrollTop:t,scrollLeft:e}=this.scrollDOM,i=this.viewState.scrollAnchorAt(t);return Yt.of(new $t(n.EditorSelection.cursor(i.from),"start","start",i.top-t,e,!0))}setTabFocusMode(t){null==t?this.inputState.tabFocusMode=this.inputState.tabFocusMode<0?0:-1:"boolean"==typeof t?this.inputState.tabFocusMode=t?0:-1:0!=this.inputState.tabFocusMode&&(this.inputState.tabFocusMode=Date.now()+t)}static domEventHandlers(t){return ee.define((()=>({})),{eventHandlers:t})}static domEventObservers(t){return ee.define((()=>({})),{eventObservers:t})}static theme(t,e){let i=r.StyleModule.newName(),n=[Oi.of(i),de.of(Fi(`.${i}`,t))];return e&&e.dark&&n.push(Di.of(!0)),n}static baseTheme(t){return n.Prec.lowest(de.of(Fi("."+Ri,t,Bi)))}static findFromDOM(t){var e;let i=t.querySelector(".cm-content"),n=i&&P.get(i)||P.get(t);return(null===(e=null==n?void 0:n.rootView)||void 0===e?void 0:e.view)||null}}Zi.styleModule=de,Zi.inputHandler=zt,Zi.scrollHandler=Gt,Zi.focusChangeEffect=jt,Zi.perLineTextDirection=Ut,Zi.exceptionSink=Ht,Zi.updateListener=Wt,Zi.editable=Zt,Zi.mouseSelectionStyle=Vt,Zi.dragMovesSelection=qt,Zi.clickAddsSelectionRange=_t,Zi.decorations=se,Zi.outerDecorations=oe,Zi.atomicRanges=ae,Zi.bidiIsolatedRanges=le,Zi.scrollMargins=ce,Zi.darkTheme=Di,Zi.cspNonce=n.Facet.define({combine:t=>t.length?t[0]:""}),Zi.contentAttributes=re,Zi.editorAttributes=ne,Zi.lineWrapping=Zi.contentAttributes.of({class:"cm-lineWrapping"}),Zi.announce=n.StateEffect.define();const Qi=4096,tn={};class en{constructor(t,e,i,n,r,s){this.from=t,this.to=e,this.dir=i,this.isolates=n,this.fresh=r,this.order=s}static update(t,i){if(i.empty&&!t.some((t=>t.fresh)))return t;let n=[],r=t.length?t[t.length-1].dir:e.Direction.LTR;for(let e=Math.max(0,t.length-10);e<t.length;e++){let s=t[e];s.dir!=r||i.touchesRange(s.from,s.to)||n.push(new en(i.mapPos(s.from,1),i.mapPos(s.to,-1),s.dir,s.isolates,!1,s.order))}return n}}function nn(t,e,i){for(let n=t.state.facet(e),r=n.length-1;r>=0;r--){let e=n[r],s="function"==typeof e?e(t):e;s&&tt(s,i)}return i}const rn=K.mac?"mac":K.windows?"win":K.linux?"linux":"key";function sn(t,e,i){return e.altKey&&(t="Alt-"+t),e.ctrlKey&&(t="Ctrl-"+t),e.metaKey&&(t="Meta-"+t),!1!==i&&e.shiftKey&&(t="Shift-"+t),t}const on=n.Prec.default(Zi.domEventHandlers({keydown:(t,e)=>fn(hn(e.state),t,e,"editor")})),an=n.Facet.define({enables:on}),ln=new WeakMap;function hn(t){let e=t.facet(an),i=ln.get(e);return i||ln.set(e,i=function(t,e=rn){let i=Object.create(null),n=Object.create(null),r=(t,e)=>{let i=n[t];if(null==i)n[t]=e;else if(i!=e)throw new Error("Key binding "+t+" is used both as a regular binding and as a multi-stroke prefix")},s=(t,n,s,o,a)=>{var l,h;let c=i[t]||(i[t]=Object.create(null)),u=n.split(/ (?!$)/).map((t=>function(t,e){const i=t.split(/-(?!$)/);let n,r,s,o,a=i[i.length-1];"Space"==a&&(a=" ");for(let t=0;t<i.length-1;++t){const a=i[t];if(/^(cmd|meta|m)$/i.test(a))o=!0;else if(/^a(lt)?$/i.test(a))n=!0;else if(/^(c|ctrl|control)$/i.test(a))r=!0;else if(/^s(hift)?$/i.test(a))s=!0;else{if(!/^mod$/i.test(a))throw new Error("Unrecognized modifier name: "+a);"mac"==e?o=!0:r=!0}}return n&&(a="Alt-"+a),r&&(a="Ctrl-"+a),o&&(a="Meta-"+a),s&&(a="Shift-"+a),a}(t,e)));for(let e=1;e<u.length;e++){let i=u.slice(0,e).join(" ");r(i,!0),c[i]||(c[i]={preventDefault:!0,stopPropagation:!1,run:[e=>{let n=cn={view:e,prefix:i,scope:t};return setTimeout((()=>{cn==n&&(cn=null)}),un),!0}]})}let d=u.join(" ");r(d,!1);let f=c[d]||(c[d]={preventDefault:!1,stopPropagation:!1,run:(null===(h=null===(l=c._any)||void 0===l?void 0:l.run)||void 0===h?void 0:h.slice())||[]});s&&f.run.push(s),o&&(f.preventDefault=!0),a&&(f.stopPropagation=!0)};for(let n of t){let t=n.scope?n.scope.split(" "):["editor"];if(n.any)for(let e of t){let t=i[e]||(i[e]=Object.create(null));t._any||(t._any={preventDefault:!1,stopPropagation:!1,run:[]});let{any:r}=n;for(let e in t)t[e].run.push((t=>r(t,dn)))}let r=n[e]||n.key;if(r)for(let e of t)s(e,r,n.run,n.preventDefault,n.stopPropagation),n.shift&&s(e,"Shift-"+r,n.shift,n.preventDefault,n.stopPropagation)}return i}(e.reduce(((t,e)=>t.concat(e)),[]))),i}let cn=null;const un=4e3;let dn=null;function fn(t,e,i,r){dn=e;let o=s.keyName(e),a=n.codePointAt(o,0),l=n.codePointSize(a)==o.length&&" "!=o,h="",c=!1,u=!1,d=!1;cn&&cn.view==i&&cn.scope==r&&(h=cn.prefix+" ",Fe.indexOf(e.keyCode)<0&&(u=!0,cn=null));let f,p,m=new Set,g=t=>{if(t){for(let e of t.run)if(!m.has(e)&&(m.add(e),e(i)))return t.stopPropagation&&(d=!0),!0;t.preventDefault&&(t.stopPropagation&&(d=!0),u=!0)}return!1},v=t[r];return v&&(g(v[h+sn(o,e,!l)])?c=!0:l&&(e.altKey||e.metaKey||e.ctrlKey)&&!(K.windows&&e.ctrlKey&&e.altKey)&&(f=s.base[e.keyCode])&&f!=o?(g(v[h+sn(f,e,!0)])||e.shiftKey&&(p=s.shift[e.keyCode])!=o&&p!=f&&g(v[h+sn(p,e,!1)]))&&(c=!0):l&&e.shiftKey&&g(v[h+sn(o,e,!0)])&&(c=!0),!c&&g(v._any)&&(c=!0)),u&&(c=!0),c&&d&&e.stopPropagation(),dn=null,c}class pn{constructor(t,e,i,n,r){this.className=t,this.left=e,this.top=i,this.width=n,this.height=r}draw(){let t=document.createElement("div");return t.className=this.className,this.adjust(t),t}update(t,e){return e.className==this.className&&(this.adjust(t),!0)}adjust(t){t.style.left=this.left+"px",t.style.top=this.top+"px",null!=this.width&&(t.style.width=this.width+"px"),t.style.height=this.height+"px"}eq(t){return this.left==t.left&&this.top==t.top&&this.width==t.width&&this.height==t.height&&this.className==t.className}static forRange(t,i,n){if(n.empty){let e=t.coordsAtPos(n.head,n.assoc||1);if(!e)return[];let r=mn(t);return[new pn(i,e.left-r.left,e.top-r.top,null,e.bottom-e.top)]}return function(t,i,n){if(n.to<=t.viewport.from||n.from>=t.viewport.to)return[];let r=Math.max(n.from,t.viewport.from),s=Math.min(n.to,t.viewport.to),o=t.textDirection==e.Direction.LTR,a=t.contentDOM,l=a.getBoundingClientRect(),h=mn(t),c=a.querySelector(".cm-line"),u=c&&window.getComputedStyle(c),d=l.left+(u?parseInt(u.paddingLeft)+Math.min(0,parseInt(u.textIndent)):0),f=l.right-(u?parseInt(u.paddingRight):0),p=Me(t,r),m=Me(t,s),g=p.type==e.BlockType.Text?p:null,v=m.type==e.BlockType.Text?m:null;if(g&&(t.lineWrapping||p.widgetLineBreaks)&&(g=gn(t,r,1,g)),v&&(t.lineWrapping||m.widgetLineBreaks)&&(v=gn(t,s,-1,v)),g&&v&&g.from==v.from&&g.to==v.to)return y(b(n.from,n.to,g));{let i=g?b(n.from,null,g):S(p,!1),r=v?b(null,n.to,v):S(m,!0),s=[];return(g||p).to<(v||m).from-(g&&v?1:0)||p.widgetLineBreaks>1&&i.bottom+t.defaultLineHeight/2<r.top?s.push(w(d,i.bottom,f,r.top)):i.bottom<r.top&&t.elementAtHeight((i.bottom+r.top)/2).type==e.BlockType.Text&&(i.bottom=r.top=(i.bottom+r.top)/2),y(i).concat(s).concat(y(r))}function w(t,e,n,r){return new pn(i,t-h.left,e-h.top-.01,n-t,r-e+.01)}function y({top:t,bottom:e,horizontal:i}){let n=[];for(let r=0;r<i.length;r+=2)n.push(w(i[r],t,i[r+1],e));return n}function b(i,n,r){let s=1e9,a=-1e9,l=[];function h(i,n,h,c,u){let p=t.coordsAtPos(i,i==r.to?-2:2),m=t.coordsAtPos(h,h==r.from?2:-2);p&&m&&(s=Math.min(p.top,m.top,s),a=Math.max(p.bottom,m.bottom,a),u==e.Direction.LTR?l.push(o&&n?d:p.left,o&&c?f:m.right):l.push(!o&&c?d:m.left,!o&&n?f:p.right))}let c=null!=i?i:r.from,u=null!=n?n:r.to;for(let e of t.visibleRanges)if(e.to>c&&e.from<u)for(let r=Math.max(e.from,c),s=Math.min(e.to,u);;){let e=t.state.doc.lineAt(r);for(let o of t.bidiSpans(e)){let t=o.from+e.from,a=o.to+e.from;if(t>=s)break;a>r&&h(Math.max(t,r),null==i&&t<=c,Math.min(a,s),null==n&&a>=u,o.dir)}if(r=e.to+1,r>=s)break}return 0==l.length&&h(c,null==i,u,null==n,t.textDirection),{top:s,bottom:a,horizontal:l}}function S(t,e){let i=l.top+(e?t.top:t.bottom);return{top:i,bottom:i,horizontal:[]}}}(t,i,n)}}function mn(t){let i=t.scrollDOM.getBoundingClientRect();return{left:(t.textDirection==e.Direction.LTR?i.left:i.right-t.scrollDOM.clientWidth*t.scaleX)-t.scrollDOM.scrollLeft*t.scaleX,top:i.top-t.scrollDOM.scrollTop*t.scaleY}}function gn(t,e,i,n){let r=t.coordsAtPos(e,2*i);if(!r)return n;let s=t.dom.getBoundingClientRect(),o=(r.top+r.bottom)/2,a=t.posAtCoords({x:s.left+1,y:o}),l=t.posAtCoords({x:s.right-1,y:o});return null==a||null==l?n:{from:Math.max(n.from,Math.min(a,l)),to:Math.min(n.to,Math.max(a,l))}}class vn{constructor(t,e){this.view=t,this.layer=e,this.drawn=[],this.scaleX=1,this.scaleY=1,this.measureReq={read:this.measure.bind(this),write:this.draw.bind(this)},this.dom=t.scrollDOM.appendChild(document.createElement("div")),this.dom.classList.add("cm-layer"),e.above&&this.dom.classList.add("cm-layer-above"),e.class&&this.dom.classList.add(e.class),this.scale(),this.dom.setAttribute("aria-hidden","true"),this.setOrder(t.state),t.requestMeasure(this.measureReq),e.mount&&e.mount(this.dom,t)}update(t){t.startState.facet(wn)!=t.state.facet(wn)&&this.setOrder(t.state),(this.layer.update(t,this.dom)||t.geometryChanged)&&(this.scale(),t.view.requestMeasure(this.measureReq))}docViewUpdate(t){!1!==this.layer.updateOnDocViewUpdate&&t.requestMeasure(this.measureReq)}setOrder(t){let e=0,i=t.facet(wn);for(;e<i.length&&i[e]!=this.layer;)e++;this.dom.style.zIndex=String((this.layer.above?150:-1)-e)}measure(){return this.layer.markers(this.view)}scale(){let{scaleX:t,scaleY:e}=this.view;t==this.scaleX&&e==this.scaleY||(this.scaleX=t,this.scaleY=e,this.dom.style.transform=`scale(${1/t}, ${1/e})`)}draw(t){if(t.length!=this.drawn.length||t.some(((t,e)=>{return i=t,n=this.drawn[e],!(i.constructor==n.constructor&&i.eq(n));var i,n}))){let e=this.dom.firstChild,i=0;for(let n of t)n.update&&e&&n.constructor&&this.drawn[i].constructor&&n.update(e,this.drawn[i])?(e=e.nextSibling,i++):this.dom.insertBefore(n.draw(),e);for(;e;){let t=e.nextSibling;e.remove(),e=t}this.drawn=t}}destroy(){this.layer.destroy&&this.layer.destroy(this.dom,this.view),this.dom.remove()}}const wn=n.Facet.define();function yn(t){return[ee.define((e=>new vn(e,t))),wn.of(t)]}const bn=!K.ios,Sn=n.Facet.define({combine:t=>n.combineConfig(t,{cursorBlinkRate:1200,drawRangeCursor:!0},{cursorBlinkRate:(t,e)=>Math.min(t,e),drawRangeCursor:(t,e)=>t||e})});function xn(t){return t.startState.facet(Sn)!=t.state.facet(Sn)}const Cn=yn({above:!0,markers(t){let{state:e}=t,i=e.facet(Sn),r=[];for(let s of e.selection.ranges){let o=s==e.selection.main;if(s.empty?!o||bn:i.drawRangeCursor){let e=o?"cm-cursor cm-cursor-primary":"cm-cursor cm-cursor-secondary",i=s.empty?s:n.EditorSelection.cursor(s.head,s.head>s.anchor?-1:1);for(let n of pn.forRange(t,e,i))r.push(n)}}return r},update(t,e){t.transactions.some((t=>t.selection))&&(e.style.animationName="cm-blink"==e.style.animationName?"cm-blink2":"cm-blink");let i=xn(t);return i&&En(t.state,e),t.docChanged||t.selectionSet||i},mount(t,e){En(e.state,t)},class:"cm-cursorLayer"});function En(t,e){e.style.animationDuration=t.facet(Sn).cursorBlinkRate+"ms"}const kn=yn({above:!1,markers:t=>t.state.selection.ranges.map((e=>e.empty?[]:pn.forRange(t,"cm-selectionBackground",e))).reduce(((t,e)=>t.concat(e))),update:(t,e)=>t.docChanged||t.selectionSet||t.viewportChanged||xn(t),class:"cm-selectionLayer"}),An={".cm-line":{"& ::selection, &::selection":{backgroundColor:"transparent !important"}},".cm-content":{"& :focus":{caretColor:"initial !important","&::selection, & ::selection":{backgroundColor:"Highlight !important"}}}};bn&&(An[".cm-line"].caretColor=An[".cm-content"].caretColor="transparent !important");const Tn=n.Prec.highest(Zi.theme(An)),Mn=n.StateEffect.define({map:(t,e)=>null==t?null:e.mapPos(t)}),Nn=n.StateField.define({create:()=>null,update:(t,e)=>(null!=t&&(t=e.changes.mapPos(t)),e.effects.reduce(((t,e)=>e.is(Mn)?e.value:t),t))}),Pn=ee.fromClass(class{constructor(t){this.view=t,this.cursor=null,this.measureReq={read:this.readPos.bind(this),write:this.drawCursor.bind(this)}}update(t){var e;let i=t.state.field(Nn);null==i?null!=this.cursor&&(null===(e=this.cursor)||void 0===e||e.remove(),this.cursor=null):(this.cursor||(this.cursor=this.view.scrollDOM.appendChild(document.createElement("div")),this.cursor.className="cm-dropCursor"),(t.startState.field(Nn)!=i||t.docChanged||t.geometryChanged)&&this.view.requestMeasure(this.measureReq))}readPos(){let{view:t}=this,e=t.state.field(Nn),i=null!=e&&t.coordsAtPos(e);if(!i)return null;let n=t.scrollDOM.getBoundingClientRect();return{left:i.left-n.left+t.scrollDOM.scrollLeft*t.scaleX,top:i.top-n.top+t.scrollDOM.scrollTop*t.scaleY,height:i.bottom-i.top}}drawCursor(t){if(this.cursor){let{scaleX:e,scaleY:i}=this.view;t?(this.cursor.style.left=t.left/e+"px",this.cursor.style.top=t.top/i+"px",this.cursor.style.height=t.height/i+"px"):this.cursor.style.left="-100000px"}}destroy(){this.cursor&&this.cursor.remove()}setDropPos(t){this.view.state.field(Nn)!=t&&this.view.dispatch({effects:Mn.of(t)})}},{eventObservers:{dragover(t){this.setDropPos(this.view.posAtCoords({x:t.clientX,y:t.clientY}))},dragleave(t){t.target!=this.view.contentDOM&&this.view.contentDOM.contains(t.relatedTarget)||this.setDropPos(null)},dragend(){this.setDropPos(null)},drop(){this.setDropPos(null)}}});function On(t,e,i,n,r){e.lastIndex=0;for(let s,o=t.iterRange(i,n),a=i;!o.next().done;a+=o.value.length)if(!o.lineBreak)for(;s=e.exec(o.value);)r(a+s.index,s)}class Dn{constructor(t){const{regexp:e,decoration:i,decorate:n,boundary:r,maxLength:s=1e3}=t;if(!e.global)throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");if(this.regexp=e,n)this.addMatch=(t,e,i,r)=>n(r,i,i+t[0].length,t,e);else if("function"==typeof i)this.addMatch=(t,e,n,r)=>{let s=i(t,e,n);s&&r(n,n+t[0].length,s)};else{if(!i)throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");this.addMatch=(t,e,n,r)=>r(n,n+t[0].length,i)}this.boundary=r,this.maxLength=s}createDeco(t){let e=new n.RangeSetBuilder,i=e.add.bind(e);for(let{from:e,to:n}of function(t,e){let i=t.visibleRanges;if(1==i.length&&i[0].from==t.viewport.from&&i[0].to==t.viewport.to)return i;let n=[];for(let{from:r,to:s}of i)r=Math.max(t.state.doc.lineAt(r).from,r-e),s=Math.min(t.state.doc.lineAt(s).to,s+e),n.length&&n[n.length-1].to>=r?n[n.length-1].to=s:n.push({from:r,to:s});return n}(t,this.maxLength))On(t.state.doc,this.regexp,e,n,((e,n)=>this.addMatch(n,t,e,i)));return e.finish()}updateDeco(t,e){let i=1e9,n=-1;return t.docChanged&&t.changes.iterChanges(((e,r,s,o)=>{o>t.view.viewport.from&&s<t.view.viewport.to&&(i=Math.min(s,i),n=Math.max(o,n))})),t.viewportChanged||n-i>1e3?this.createDeco(t.view):n>-1?this.updateRange(t.view,e.map(t.changes),i,n):e}updateRange(t,e,i,n){for(let r of t.visibleRanges){let s=Math.max(r.from,i),o=Math.min(r.to,n);if(o>s){let i=t.state.doc.lineAt(s),n=i.to<o?t.state.doc.lineAt(o):i,a=Math.max(r.from,i.from),l=Math.min(r.to,n.to);if(this.boundary){for(;s>i.from;s--)if(this.boundary.test(i.text[s-1-i.from])){a=s;break}for(;o<n.to;o++)if(this.boundary.test(n.text[o-n.from])){l=o;break}}let h,c=[],u=(t,e,i)=>c.push(i.range(t,e));if(i==n)for(this.regexp.lastIndex=a-i.from;(h=this.regexp.exec(i.text))&&h.index<l-i.from;)this.addMatch(h,t,h.index+i.from,u);else On(t.state.doc,this.regexp,a,l,((e,i)=>this.addMatch(i,t,e,u)));e=e.update({filterFrom:a,filterTo:l,filter:(t,e)=>t<a||e>l,add:c})}}return e}}const Rn=null!=/x/.unicode?"gu":"g",Ln=new RegExp("[\0-\b\n--­؜​‎‏\u2028\u2029‭‮⁦⁧⁩\ufeff￹-￼]",Rn),In={0:"null",7:"bell",8:"backspace",10:"newline",11:"vertical tab",13:"carriage return",27:"escape",8203:"zero width space",8204:"zero width non-joiner",8205:"zero width joiner",8206:"left-to-right mark",8207:"right-to-left mark",8232:"line separator",8237:"left-to-right override",8238:"right-to-left override",8294:"left-to-right isolate",8295:"right-to-left isolate",8297:"pop directional isolate",8233:"paragraph separator",65279:"zero width no-break space",65532:"object replacement"};let Bn=null;const Fn=n.Facet.define({combine(t){let e=n.combineConfig(t,{render:null,specialChars:Ln,addSpecialChars:null});return(e.replaceTabs=!function(){var t;if(null==Bn&&"undefined"!=typeof document&&document.body){let e=document.body.style;Bn=null!=(null!==(t=e.tabSize)&&void 0!==t?t:e.MozTabSize)}return Bn||!1}())&&(e.specialChars=new RegExp("\t|"+e.specialChars.source,Rn)),e.addSpecialChars&&(e.specialChars=new RegExp(e.specialChars.source+"|"+e.addSpecialChars.source,Rn)),e}});let _n=null;class qn extends at{constructor(t,e){super(),this.options=t,this.code=e}eq(t){return t.code==this.code}toDOM(t){let e=(i=this.code)>=32?"•":10==i?"␤":String.fromCharCode(9216+i);var i;let n=t.state.phrase("Control character")+" "+(In[this.code]||"0x"+this.code.toString(16)),r=this.options.render&&this.options.render(this.code,n,e);if(r)return r;let s=document.createElement("span");return s.textContent=e,s.title=n,s.setAttribute("aria-label",n),s.className="cm-specialChar",s}ignoreEvent(){return!1}}class Vn extends at{constructor(t){super(),this.width=t}eq(t){return t.width==this.width}toDOM(){let t=document.createElement("span");return t.textContent="\t",t.className="cm-tab",t.style.width=this.width+"px",t}ignoreEvent(){return!1}}const Hn=ee.fromClass(class{constructor(){this.height=1e3,this.attrs={style:"padding-bottom: 1000px"}}update(t){let{view:e}=t,i=e.viewState.editorHeight-e.defaultLineHeight-e.documentPadding.top-.5;i>=0&&i!=this.height&&(this.height=i,this.attrs={style:`padding-bottom: ${i}px`})}}),Wn=ct.line({class:"cm-activeLine"}),zn=ee.fromClass(class{constructor(t){this.decorations=this.getDeco(t)}update(t){(t.docChanged||t.selectionSet)&&(this.decorations=this.getDeco(t.view))}getDeco(t){let e=-1,i=[];for(let n of t.state.selection.ranges){let r=t.lineBlockAt(n.head);r.from>e&&(i.push(Wn.range(r.from)),e=r.from)}return ct.set(i)}},{decorations:t=>t.decorations});class jn extends at{constructor(t){super(),this.content=t}toDOM(){let t=document.createElement("span");return t.className="cm-placeholder",t.style.pointerEvents="none",t.appendChild("string"==typeof this.content?document.createTextNode(this.content):this.content),"string"==typeof this.content?t.setAttribute("aria-label","placeholder "+this.content):t.setAttribute("aria-hidden","true"),t}coordsAt(t){let e=t.firstChild?h(t.firstChild):[];if(!e.length)return null;let i=window.getComputedStyle(t.parentNode),n=m(e[0],"rtl"!=i.direction),r=parseInt(i.lineHeight);return n.bottom-n.top>1.5*r?{left:n.left,right:n.right,top:n.top,bottom:n.top+r}:n}ignoreEvent(){return!1}}const Un=2e3;function Kn(t,e){let i=t.posAtCoords({x:e.clientX,y:e.clientY},!1),r=t.state.doc.lineAt(i),s=i-r.from,o=s>Un?-1:s==r.length?function(t,e){let i=t.coordsAtPos(t.viewport.from);return i?Math.round(Math.abs((i.left-e)/t.defaultCharacterWidth)):-1}(t,e.clientX):n.countColumn(r.text,t.state.tabSize,i-r.from);return{line:r.number,col:o,off:s}}const Gn={Alt:[18,t=>!!t.altKey],Control:[17,t=>!!t.ctrlKey],Shift:[16,t=>!!t.shiftKey],Meta:[91,t=>!!t.metaKey]},$n={style:"cursor: crosshair"},Yn="-10000px";class Jn{constructor(t,e,i,n){this.facet=e,this.createTooltipView=i,this.removeTooltipView=n,this.input=t.state.facet(e),this.tooltips=this.input.filter((t=>t));let r=null;this.tooltipViews=this.tooltips.map((t=>r=i(t,r)))}update(t,e){var i;let n=t.state.facet(this.facet),r=n.filter((t=>t));if(n===this.input){for(let e of this.tooltipViews)e.update&&e.update(t);return!1}let s=[],o=e?[]:null;for(let i=0;i<r.length;i++){let n=r[i],a=-1;if(n){for(let t=0;t<this.tooltips.length;t++){let e=this.tooltips[t];e&&e.create==n.create&&(a=t)}if(a<0)s[i]=this.createTooltipView(n,i?s[i-1]:null),o&&(o[i]=!!n.above);else{let n=s[i]=this.tooltipViews[a];o&&(o[i]=e[a]),n.update&&n.update(t)}}}for(let t of this.tooltipViews)s.indexOf(t)<0&&(this.removeTooltipView(t),null===(i=t.destroy)||void 0===i||i.call(t));return e&&(o.forEach(((t,i)=>e[i]=t)),e.length=o.length),this.input=n,this.tooltips=r,this.tooltipViews=s,!0}}function Xn(t){let{win:e}=t;return{top:0,left:0,bottom:e.innerHeight,right:e.innerWidth}}const Zn=n.Facet.define({combine:t=>{var e,i,n;return{position:K.ios?"absolute":(null===(e=t.find((t=>t.position)))||void 0===e?void 0:e.position)||"fixed",parent:(null===(i=t.find((t=>t.parent)))||void 0===i?void 0:i.parent)||null,tooltipSpace:(null===(n=t.find((t=>t.tooltipSpace)))||void 0===n?void 0:n.tooltipSpace)||Xn}}}),Qn=new WeakMap,tr=ee.fromClass(class{constructor(t){this.view=t,this.above=[],this.inView=!0,this.madeAbsolute=!1,this.lastTransaction=0,this.measureTimeout=-1;let e=t.state.facet(Zn);this.position=e.position,this.parent=e.parent,this.classes=t.themeClasses,this.createContainer(),this.measureReq={read:this.readMeasure.bind(this),write:this.writeMeasure.bind(this),key:this},this.resizeObserver="function"==typeof ResizeObserver?new ResizeObserver((()=>this.measureSoon())):null,this.manager=new Jn(t,nr,((t,e)=>this.createTooltip(t,e)),(t=>{this.resizeObserver&&this.resizeObserver.unobserve(t.dom),t.dom.remove()})),this.above=this.manager.tooltips.map((t=>!!t.above)),this.intersectionObserver="function"==typeof IntersectionObserver?new IntersectionObserver((t=>{Date.now()>this.lastTransaction-50&&t.length>0&&t[t.length-1].intersectionRatio<1&&this.measureSoon()}),{threshold:[1]}):null,this.observeIntersection(),t.win.addEventListener("resize",this.measureSoon=this.measureSoon.bind(this)),this.maybeMeasure()}createContainer(){this.parent?(this.container=document.createElement("div"),this.container.style.position="relative",this.container.className=this.view.themeClasses,this.parent.appendChild(this.container)):this.container=this.view.dom}observeIntersection(){if(this.intersectionObserver){this.intersectionObserver.disconnect();for(let t of this.manager.tooltipViews)this.intersectionObserver.observe(t.dom)}}measureSoon(){this.measureTimeout<0&&(this.measureTimeout=setTimeout((()=>{this.measureTimeout=-1,this.maybeMeasure()}),50))}update(t){t.transactions.length&&(this.lastTransaction=Date.now());let e=this.manager.update(t,this.above);e&&this.observeIntersection();let i=e||t.geometryChanged,n=t.state.facet(Zn);if(n.position!=this.position&&!this.madeAbsolute){this.position=n.position;for(let t of this.manager.tooltipViews)t.dom.style.position=this.position;i=!0}if(n.parent!=this.parent){this.parent&&this.container.remove(),this.parent=n.parent,this.createContainer();for(let t of this.manager.tooltipViews)this.container.appendChild(t.dom);i=!0}else this.parent&&this.view.themeClasses!=this.classes&&(this.classes=this.container.className=this.view.themeClasses);i&&this.maybeMeasure()}createTooltip(t,e){let i=t.create(this.view),n=e?e.dom:null;if(i.dom.classList.add("cm-tooltip"),t.arrow&&!i.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")){let t=document.createElement("div");t.className="cm-tooltip-arrow",i.dom.appendChild(t)}return i.dom.style.position=this.position,i.dom.style.top=Yn,i.dom.style.left="0px",this.container.insertBefore(i.dom,n),i.mount&&i.mount(this.view),this.resizeObserver&&this.resizeObserver.observe(i.dom),i}destroy(){var t,e,i;this.view.win.removeEventListener("resize",this.measureSoon);for(let e of this.manager.tooltipViews)e.dom.remove(),null===(t=e.destroy)||void 0===t||t.call(e);this.parent&&this.container.remove(),null===(e=this.resizeObserver)||void 0===e||e.disconnect(),null===(i=this.intersectionObserver)||void 0===i||i.disconnect(),clearTimeout(this.measureTimeout)}readMeasure(){let t=this.view.dom.getBoundingClientRect(),e=1,i=1,n=!1;if("fixed"==this.position&&this.manager.tooltipViews.length){let{dom:t}=this.manager.tooltipViews[0];if(K.gecko)n=t.offsetParent!=this.container.ownerDocument.body;else if(t.style.top==Yn&&"0px"==t.style.left){let e=t.getBoundingClientRect();n=Math.abs(e.top+1e4)>1||Math.abs(e.left)>1}}if(n||"absolute"==this.position)if(this.parent){let t=this.parent.getBoundingClientRect();t.width&&t.height&&(e=t.width/this.parent.offsetWidth,i=t.height/this.parent.offsetHeight)}else({scaleX:e,scaleY:i}=this.view.viewState);return{editor:t,parent:this.parent?this.container.getBoundingClientRect():t,pos:this.manager.tooltips.map(((t,e)=>{let i=this.manager.tooltipViews[e];return i.getCoords?i.getCoords(t.pos):this.view.coordsAtPos(t.pos)})),size:this.manager.tooltipViews.map((({dom:t})=>t.getBoundingClientRect())),space:this.view.state.facet(Zn).tooltipSpace(this.view),scaleX:e,scaleY:i,makeAbsolute:n}}writeMeasure(t){var i;if(t.makeAbsolute){this.madeAbsolute=!0,this.position="absolute";for(let t of this.manager.tooltipViews)t.dom.style.position="absolute"}let{editor:n,space:r,scaleX:s,scaleY:o}=t,a=[];for(let l=0;l<this.manager.tooltips.length;l++){let h=this.manager.tooltips[l],c=this.manager.tooltipViews[l],{dom:u}=c,d=t.pos[l],f=t.size[l];if(!d||d.bottom<=Math.max(n.top,r.top)||d.top>=Math.min(n.bottom,r.bottom)||d.right<Math.max(n.left,r.left)-.1||d.left>Math.min(n.right,r.right)+.1){u.style.top=Yn;continue}let p=h.arrow?c.dom.querySelector(".cm-tooltip-arrow"):null,m=p?7:0,g=f.right-f.left,v=null!==(i=Qn.get(c))&&void 0!==i?i:f.bottom-f.top,w=c.offset||ir,y=this.view.textDirection==e.Direction.LTR,b=f.width>r.right-r.left?y?r.left:r.right-f.width:y?Math.min(d.left-(p?14:0)+w.x,r.right-g):Math.max(r.left,d.left-g+(p?14:0)-w.x),S=this.above[l];!h.strictSide&&(S?d.top-(f.bottom-f.top)-w.y<r.top:d.bottom+(f.bottom-f.top)+w.y>r.bottom)&&S==r.bottom-d.bottom>d.top-r.top&&(S=this.above[l]=!S);let x=(S?d.top-r.top:r.bottom-d.bottom)-m;if(x<v&&!1!==c.resize){if(x<this.view.defaultLineHeight){u.style.top=Yn;continue}Qn.set(c,v),u.style.height=(v=x)/o+"px"}else u.style.height&&(u.style.height="");let C=S?d.top-v-m-w.y:d.bottom+m+w.y,E=b+g;if(!0!==c.overlap)for(let t of a)t.left<E&&t.right>b&&t.top<C+v&&t.bottom>C&&(C=S?t.top-v-2-m:t.bottom+m+2);if("absolute"==this.position?(u.style.top=(C-t.parent.top)/o+"px",u.style.left=(b-t.parent.left)/s+"px"):(u.style.top=C/o+"px",u.style.left=b/s+"px"),p){let t=d.left+(y?w.x:-w.x)-(b+14-7);p.style.left=t/s+"px"}!0!==c.overlap&&a.push({left:b,top:C,right:E,bottom:C+v}),u.classList.toggle("cm-tooltip-above",S),u.classList.toggle("cm-tooltip-below",!S),c.positioned&&c.positioned(t.space)}}maybeMeasure(){if(this.manager.tooltips.length&&(this.view.inView&&this.view.requestMeasure(this.measureReq),this.inView!=this.view.inView&&(this.inView=this.view.inView,!this.inView)))for(let t of this.manager.tooltipViews)t.dom.style.top=Yn}},{eventObservers:{scroll(){this.maybeMeasure()}}}),er=Zi.baseTheme({".cm-tooltip":{zIndex:100,boxSizing:"border-box"},"&light .cm-tooltip":{border:"1px solid #bbb",backgroundColor:"#f5f5f5"},"&light .cm-tooltip-section:not(:first-child)":{borderTop:"1px solid #bbb"},"&dark .cm-tooltip":{backgroundColor:"#333338",color:"white"},".cm-tooltip-arrow":{height:"7px",width:"14px",position:"absolute",zIndex:-1,overflow:"hidden","&:before, &:after":{content:"''",position:"absolute",width:0,height:0,borderLeft:"7px solid transparent",borderRight:"7px solid transparent"},".cm-tooltip-above &":{bottom:"-7px","&:before":{borderTop:"7px solid #bbb"},"&:after":{borderTop:"7px solid #f5f5f5",bottom:"1px"}},".cm-tooltip-below &":{top:"-7px","&:before":{borderBottom:"7px solid #bbb"},"&:after":{borderBottom:"7px solid #f5f5f5",top:"1px"}}},"&dark .cm-tooltip .cm-tooltip-arrow":{"&:before":{borderTopColor:"#333338",borderBottomColor:"#333338"},"&:after":{borderTopColor:"transparent",borderBottomColor:"transparent"}}}),ir={x:0,y:0},nr=n.Facet.define({enables:[tr,er]}),rr=n.Facet.define({combine:t=>t.reduce(((t,e)=>t.concat(e)),[])});class sr{static create(t){return new sr(t)}constructor(t){this.view=t,this.mounted=!1,this.dom=document.createElement("div"),this.dom.classList.add("cm-tooltip-hover"),this.manager=new Jn(t,rr,((t,e)=>this.createHostedView(t,e)),(t=>t.dom.remove()))}createHostedView(t,e){let i=t.create(this.view);return i.dom.classList.add("cm-tooltip-section"),this.dom.insertBefore(i.dom,e?e.dom.nextSibling:this.dom.firstChild),this.mounted&&i.mount&&i.mount(this.view),i}mount(t){for(let e of this.manager.tooltipViews)e.mount&&e.mount(t);this.mounted=!0}positioned(t){for(let e of this.manager.tooltipViews)e.positioned&&e.positioned(t)}update(t){this.manager.update(t)}destroy(){var t;for(let e of this.manager.tooltipViews)null===(t=e.destroy)||void 0===t||t.call(e)}passProp(t){let e;for(let i of this.manager.tooltipViews){let n=i[t];if(void 0!==n)if(void 0===e)e=n;else if(e!==n)return}return e}get offset(){return this.passProp("offset")}get getCoords(){return this.passProp("getCoords")}get overlap(){return this.passProp("overlap")}get resize(){return this.passProp("resize")}}const or=nr.compute([rr],(t=>{let e=t.facet(rr);return 0===e.length?null:{pos:Math.min(...e.map((t=>t.pos))),end:Math.max(...e.map((t=>{var e;return null!==(e=t.end)&&void 0!==e?e:t.pos}))),create:sr.create,above:e[0].above,arrow:e.some((t=>t.arrow))}}));class ar{constructor(t,e,i,n,r){this.view=t,this.source=e,this.field=i,this.setHover=n,this.hoverTime=r,this.hoverTimeout=-1,this.restartTimeout=-1,this.pending=null,this.lastMove={x:0,y:0,target:t.dom,time:0},this.checkHover=this.checkHover.bind(this),t.dom.addEventListener("mouseleave",this.mouseleave=this.mouseleave.bind(this)),t.dom.addEventListener("mousemove",this.mousemove=this.mousemove.bind(this))}update(){this.pending&&(this.pending=null,clearTimeout(this.restartTimeout),this.restartTimeout=setTimeout((()=>this.startHover()),20))}get active(){return this.view.state.field(this.field)}checkHover(){if(this.hoverTimeout=-1,this.active.length)return;let t=Date.now()-this.lastMove.time;t<this.hoverTime?this.hoverTimeout=setTimeout(this.checkHover,this.hoverTime-t):this.startHover()}startHover(){clearTimeout(this.restartTimeout);let{view:t,lastMove:i}=this,n=t.docView.nearest(i.target);if(!n)return;let r,s=1;if(n instanceof Y)r=n.posAtStart;else{if(r=t.posAtCoords(i),null==r)return;let n=t.coordsAtPos(r);if(!n||i.y<n.top||i.y>n.bottom||i.x<n.left-t.defaultCharacterWidth||i.x>n.right+t.defaultCharacterWidth)return;let o=t.bidiSpans(t.state.doc.lineAt(r)).find((t=>t.from<=r&&t.to>=r)),a=o&&o.dir==e.Direction.RTL?-1:1;s=i.x<n.left?-a:a}let o=this.source(t,r,s);if(null==o?void 0:o.then){let e=this.pending={pos:r};o.then((i=>{this.pending==e&&(this.pending=null,!i||Array.isArray(i)&&!i.length||t.dispatch({effects:this.setHover.of(Array.isArray(i)?i:[i])}))}),(e=>Xt(t.state,e,"hover tooltip")))}else!o||Array.isArray(o)&&!o.length||t.dispatch({effects:this.setHover.of(Array.isArray(o)?o:[o])})}get tooltip(){let t=this.view.plugin(tr),e=t?t.manager.tooltips.findIndex((t=>t.create==sr.create)):-1;return e>-1?t.manager.tooltipViews[e]:null}mousemove(t){var e,i;this.lastMove={x:t.clientX,y:t.clientY,target:t.target,time:Date.now()},this.hoverTimeout<0&&(this.hoverTimeout=setTimeout(this.checkHover,this.hoverTime));let{active:n,tooltip:r}=this;if(n.length&&r&&!function(t,e){let i=t.getBoundingClientRect();return e.clientX>=i.left-lr&&e.clientX<=i.right+lr&&e.clientY>=i.top-lr&&e.clientY<=i.bottom+lr}(r.dom,t)||this.pending){let{pos:r}=n[0]||this.pending,s=null!==(i=null===(e=n[0])||void 0===e?void 0:e.end)&&void 0!==i?i:r;(r==s?this.view.posAtCoords(this.lastMove)==r:function(t,e,i,n,r,s){let o=t.scrollDOM.getBoundingClientRect(),a=t.documentTop+t.documentPadding.top+t.contentHeight;if(o.left>n||o.right<n||o.top>r||Math.min(o.bottom,a)<r)return!1;let l=t.posAtCoords({x:n,y:r},!1);return l>=e&&l<=i}(this.view,r,s,t.clientX,t.clientY))||(this.view.dispatch({effects:this.setHover.of([])}),this.pending=null)}}mouseleave(t){clearTimeout(this.hoverTimeout),this.hoverTimeout=-1;let{active:e}=this;if(e.length){let{tooltip:e}=this;e&&e.dom.contains(t.relatedTarget)?this.watchTooltipLeave(e.dom):this.view.dispatch({effects:this.setHover.of([])})}}watchTooltipLeave(t){let e=i=>{t.removeEventListener("mouseleave",e),this.active.length&&!this.view.dom.contains(i.relatedTarget)&&this.view.dispatch({effects:this.setHover.of([])})};t.addEventListener("mouseleave",e)}destroy(){clearTimeout(this.hoverTimeout),this.view.dom.removeEventListener("mouseleave",this.mouseleave),this.view.dom.removeEventListener("mousemove",this.mousemove)}}const lr=4,hr=n.StateEffect.define(),cr=hr.of(null),ur=n.Facet.define({combine(t){let e,i;for(let n of t)e=e||n.topContainer,i=i||n.bottomContainer;return{topContainer:e,bottomContainer:i}}}),dr=ee.fromClass(class{constructor(t){this.input=t.state.facet(mr),this.specs=this.input.filter((t=>t)),this.panels=this.specs.map((e=>e(t)));let e=t.state.facet(ur);this.top=new fr(t,!0,e.topContainer),this.bottom=new fr(t,!1,e.bottomContainer),this.top.sync(this.panels.filter((t=>t.top))),this.bottom.sync(this.panels.filter((t=>!t.top)));for(let t of this.panels)t.dom.classList.add("cm-panel"),t.mount&&t.mount()}update(t){let e=t.state.facet(ur);this.top.container!=e.topContainer&&(this.top.sync([]),this.top=new fr(t.view,!0,e.topContainer)),this.bottom.container!=e.bottomContainer&&(this.bottom.sync([]),this.bottom=new fr(t.view,!1,e.bottomContainer)),this.top.syncClasses(),this.bottom.syncClasses();let i=t.state.facet(mr);if(i!=this.input){let e=i.filter((t=>t)),n=[],r=[],s=[],o=[];for(let i of e){let e,a=this.specs.indexOf(i);a<0?(e=i(t.view),o.push(e)):(e=this.panels[a],e.update&&e.update(t)),n.push(e),(e.top?r:s).push(e)}this.specs=e,this.panels=n,this.top.sync(r),this.bottom.sync(s);for(let t of o)t.dom.classList.add("cm-panel"),t.mount&&t.mount()}else for(let e of this.panels)e.update&&e.update(t)}destroy(){this.top.sync([]),this.bottom.sync([])}},{provide:t=>Zi.scrollMargins.of((e=>{let i=e.plugin(t);return i&&{top:i.top.scrollMargin(),bottom:i.bottom.scrollMargin()}}))});class fr{constructor(t,e,i){this.view=t,this.top=e,this.container=i,this.dom=void 0,this.classes="",this.panels=[],this.syncClasses()}sync(t){for(let e of this.panels)e.destroy&&t.indexOf(e)<0&&e.destroy();this.panels=t,this.syncDOM()}syncDOM(){if(0==this.panels.length)return void(this.dom&&(this.dom.remove(),this.dom=void 0));if(!this.dom){this.dom=document.createElement("div"),this.dom.className=this.top?"cm-panels cm-panels-top":"cm-panels cm-panels-bottom",this.dom.style[this.top?"top":"bottom"]="0";let t=this.container||this.view.dom;t.insertBefore(this.dom,this.top?t.firstChild:null)}let t=this.dom.firstChild;for(let e of this.panels)if(e.dom.parentNode==this.dom){for(;t!=e.dom;)t=pr(t);t=t.nextSibling}else this.dom.insertBefore(e.dom,t);for(;t;)t=pr(t)}scrollMargin(){return!this.dom||this.container?0:Math.max(0,this.top?this.dom.getBoundingClientRect().bottom-Math.max(0,this.view.scrollDOM.getBoundingClientRect().top):Math.min(innerHeight,this.view.scrollDOM.getBoundingClientRect().bottom)-this.dom.getBoundingClientRect().top)}syncClasses(){if(this.container&&this.classes!=this.view.themeClasses){for(let t of this.classes.split(" "))t&&this.container.classList.remove(t);for(let t of(this.classes=this.view.themeClasses).split(" "))t&&this.container.classList.add(t)}}}function pr(t){let e=t.nextSibling;return t.remove(),e}const mr=n.Facet.define({enables:dr});class gr extends n.RangeValue{compare(t){return this==t||this.constructor==t.constructor&&this.eq(t)}eq(t){return!1}destroy(t){}}gr.prototype.elementClass="",gr.prototype.toDOM=void 0,gr.prototype.mapMode=n.MapMode.TrackBefore,gr.prototype.startSide=gr.prototype.endSide=-1,gr.prototype.point=!0;const vr=n.Facet.define(),wr={class:"",renderEmptyElements:!1,elementStyle:"",markers:()=>n.RangeSet.empty,lineMarker:()=>null,widgetMarker:()=>null,lineMarkerChange:null,initialSpacer:null,updateSpacer:null,domEventHandlers:{}},yr=n.Facet.define(),br=n.Facet.define({combine:t=>t.some((t=>t))});function Sr(t){let e=[xr];return t&&!1===t.fixed&&e.push(br.of(!0)),e}const xr=ee.fromClass(class{constructor(t){this.view=t,this.prevViewport=t.viewport,this.dom=document.createElement("div"),this.dom.className="cm-gutters",this.dom.setAttribute("aria-hidden","true"),this.dom.style.minHeight=this.view.contentHeight/this.view.scaleY+"px",this.gutters=t.state.facet(yr).map((e=>new Ar(t,e)));for(let t of this.gutters)this.dom.appendChild(t.dom);this.fixed=!t.state.facet(br),this.fixed&&(this.dom.style.position="sticky"),this.syncGutters(!1),t.scrollDOM.insertBefore(this.dom,t.contentDOM)}update(t){if(this.updateGutters(t)){let e=this.prevViewport,i=t.view.viewport,n=Math.min(e.to,i.to)-Math.max(e.from,i.from);this.syncGutters(n<.8*(i.to-i.from))}t.geometryChanged&&(this.dom.style.minHeight=this.view.contentHeight/this.view.scaleY+"px"),this.view.state.facet(br)!=!this.fixed&&(this.fixed=!this.fixed,this.dom.style.position=this.fixed?"sticky":""),this.prevViewport=t.view.viewport}syncGutters(t){let i=this.dom.nextSibling;t&&this.dom.remove();let r=n.RangeSet.iter(this.view.state.facet(vr),this.view.viewport.from),s=[],o=this.gutters.map((t=>new kr(t,this.view.viewport,-this.view.documentPadding.top)));for(let t of this.view.viewportLineBlocks)if(s.length&&(s=[]),Array.isArray(t.type)){let i=!0;for(let n of t.type)if(n.type==e.BlockType.Text&&i){Er(r,s,n.from);for(let t of o)t.line(this.view,n,s);i=!1}else if(n.widget)for(let t of o)t.widget(this.view,n)}else if(t.type==e.BlockType.Text){Er(r,s,t.from);for(let e of o)e.line(this.view,t,s)}else if(t.widget)for(let e of o)e.widget(this.view,t);for(let t of o)t.finish();t&&this.view.scrollDOM.insertBefore(this.dom,i)}updateGutters(t){let e=t.startState.facet(yr),i=t.state.facet(yr),r=t.docChanged||t.heightChanged||t.viewportChanged||!n.RangeSet.eq(t.startState.facet(vr),t.state.facet(vr),t.view.viewport.from,t.view.viewport.to);if(e==i)for(let e of this.gutters)e.update(t)&&(r=!0);else{r=!0;let n=[];for(let r of i){let i=e.indexOf(r);i<0?n.push(new Ar(this.view,r)):(this.gutters[i].update(t),n.push(this.gutters[i]))}for(let t of this.gutters)t.dom.remove(),n.indexOf(t)<0&&t.destroy();for(let t of n)this.dom.appendChild(t.dom);this.gutters=n}return r}destroy(){for(let t of this.gutters)t.destroy();this.dom.remove()}},{provide:t=>Zi.scrollMargins.of((i=>{let n=i.plugin(t);return n&&0!=n.gutters.length&&n.fixed?i.textDirection==e.Direction.LTR?{left:n.dom.offsetWidth*i.scaleX}:{right:n.dom.offsetWidth*i.scaleX}:null}))});function Cr(t){return Array.isArray(t)?t:[t]}function Er(t,e,i){for(;t.value&&t.from<=i;)t.from==i&&e.push(t.value),t.next()}class kr{constructor(t,e,i){this.gutter=t,this.height=i,this.i=0,this.cursor=n.RangeSet.iter(t.markers,e.from)}addElement(t,e,i){let{gutter:n}=this,r=(e.top-this.height)/t.scaleY,s=e.height/t.scaleY;if(this.i==n.elements.length){let e=new Tr(t,s,r,i);n.elements.push(e),n.dom.appendChild(e.dom)}else n.elements[this.i].update(t,s,r,i);this.height=e.bottom,this.i++}line(t,e,i){let n=[];Er(this.cursor,n,e.from),i.length&&(n=n.concat(i));let r=this.gutter.config.lineMarker(t,e,n);r&&n.unshift(r);let s=this.gutter;(0!=n.length||s.config.renderEmptyElements)&&this.addElement(t,e,n)}widget(t,e){let i=this.gutter.config.widgetMarker(t,e.widget,e);i&&this.addElement(t,e,[i])}finish(){let t=this.gutter;for(;t.elements.length>this.i;){let e=t.elements.pop();t.dom.removeChild(e.dom),e.destroy()}}}class Ar{constructor(t,e){this.view=t,this.config=e,this.elements=[],this.spacer=null,this.dom=document.createElement("div"),this.dom.className="cm-gutter"+(this.config.class?" "+this.config.class:"");for(let i in e.domEventHandlers)this.dom.addEventListener(i,(n=>{let r,s=n.target;if(s!=this.dom&&this.dom.contains(s)){for(;s.parentNode!=this.dom;)s=s.parentNode;let t=s.getBoundingClientRect();r=(t.top+t.bottom)/2}else r=n.clientY;let o=t.lineBlockAtHeight(r-t.documentTop);e.domEventHandlers[i](t,o,n)&&n.preventDefault()}));this.markers=Cr(e.markers(t)),e.initialSpacer&&(this.spacer=new Tr(t,0,0,[e.initialSpacer(t)]),this.dom.appendChild(this.spacer.dom),this.spacer.dom.style.cssText+="visibility: hidden; pointer-events: none")}update(t){let e=this.markers;if(this.markers=Cr(this.config.markers(t.view)),this.spacer&&this.config.updateSpacer){let e=this.config.updateSpacer(this.spacer.markers[0],t);e!=this.spacer.markers[0]&&this.spacer.update(t.view,0,0,[e])}let i=t.view.viewport;return!n.RangeSet.eq(this.markers,e,i.from,i.to)||!!this.config.lineMarkerChange&&this.config.lineMarkerChange(t)}destroy(){for(let t of this.elements)t.destroy()}}class Tr{constructor(t,e,i,n){this.height=-1,this.above=0,this.markers=[],this.dom=document.createElement("div"),this.dom.className="cm-gutterElement",this.update(t,e,i,n)}update(t,e,i,n){this.height!=e&&(this.height=e,this.dom.style.height=e+"px"),this.above!=i&&(this.dom.style.marginTop=(this.above=i)?i+"px":""),function(t,e){if(t.length!=e.length)return!1;for(let i=0;i<t.length;i++)if(!t[i].compare(e[i]))return!1;return!0}(this.markers,n)||this.setMarkers(t,n)}setMarkers(t,e){let i="cm-gutterElement",n=this.dom.firstChild;for(let r=0,s=0;;){let o=s,a=r<e.length?e[r++]:null,l=!1;if(a){let t=a.elementClass;t&&(i+=" "+t);for(let t=s;t<this.markers.length;t++)if(this.markers[t].compare(a)){o=t,l=!0;break}}else o=this.markers.length;for(;s<o;){let t=this.markers[s++];if(t.toDOM){t.destroy(n);let e=n.nextSibling;n.remove(),n=e}}if(!a)break;a.toDOM&&(l?n=n.nextSibling:this.dom.insertBefore(a.toDOM(t),n)),l&&s++}this.dom.className=i,this.markers=e}destroy(){this.setMarkers(null,[])}}const Mr=n.Facet.define(),Nr=n.Facet.define({combine:t=>n.combineConfig(t,{formatNumber:String,domEventHandlers:{}},{domEventHandlers(t,e){let i=Object.assign({},t);for(let t in e){let n=i[t],r=e[t];i[t]=n?(t,e,i)=>n(t,e,i)||r(t,e,i):r}return i}})});class Pr extends gr{constructor(t){super(),this.number=t}eq(t){return this.number==t.number}toDOM(){return document.createTextNode(this.number)}}function Or(t,e){return t.state.facet(Nr).formatNumber(e,t.state)}const Dr=yr.compute([Nr],(t=>({class:"cm-lineNumbers",renderEmptyElements:!1,markers:t=>t.state.facet(Mr),lineMarker:(t,e,i)=>i.some((t=>t.toDOM))?null:new Pr(Or(t,t.state.doc.lineAt(e.from).number)),widgetMarker:()=>null,lineMarkerChange:t=>t.startState.facet(Nr)!=t.state.facet(Nr),initialSpacer:t=>new Pr(Or(t,Rr(t.state.doc.lines))),updateSpacer(t,e){let i=Or(e.view,Rr(e.view.state.doc.lines));return i==t.number?t:new Pr(i)},domEventHandlers:t.facet(Nr).domEventHandlers})));function Rr(t){let e=9;for(;e<t;)e=10*e+9;return e}const Lr=new class extends gr{constructor(){super(...arguments),this.elementClass="cm-activeLineGutter"}},Ir=vr.compute(["selection"],(t=>{let e=[],i=-1;for(let n of t.selection.ranges){let r=t.doc.lineAt(n.head).from;r>i&&(i=r,e.push(Lr.range(r)))}return n.RangeSet.of(e)})),Br=new Map;function Fr(t){return ee.define((e=>({decorations:t.createDeco(e),update(e){this.decorations=t.updateDeco(e,this.decorations)}})),{decorations:t=>t.decorations})}const _r=Fr(new Dn({regexp:/\t| +/g,decoration:t=>function(t){let e=Br.get(t);return e||Br.set(t,e=ct.mark({attributes:"\t"===t?{class:"cm-highlightTab"}:{class:"cm-highlightSpace","data-display":t.replace(/ /g,"·")}})),e}(t[0]),boundary:/\S/})),qr=Fr(new Dn({regexp:/\s+$/g,decoration:ct.mark({class:"cm-trailingSpace"}),boundary:/\S/})),Vr={HeightMap:di,HeightOracle:ai,MeasuredHeights:li,QueryType:ci,ChangedRange:fe,computeOrder:Rt,moveVisually:Bt};e.BidiSpan=Mt,e.BlockInfo=hi,e.Decoration=ct,e.EditorView=Zi,e.GutterMarker=gr,e.MatchDecorator=Dn,e.RectangleMarker=pn,e.ViewPlugin=ee,e.ViewUpdate=pe,e.WidgetType=at,e.__test=Vr,e.closeHoverTooltips=cr,e.crosshairCursor=function(t={}){let[e,i]=Gn[t.key||"Alt"],n=ee.fromClass(class{constructor(t){this.view=t,this.isDown=!1}set(t){this.isDown!=t&&(this.isDown=t,this.view.update([]))}},{eventObservers:{keydown(t){this.set(t.keyCode==e||i(t))},keyup(t){t.keyCode!=e&&i(t)||this.set(!1)},mousemove(t){this.set(i(t))}}});return[n,Zi.contentAttributes.of((t=>{var e;return(null===(e=t.plugin(n))||void 0===e?void 0:e.isDown)?$n:null}))]},e.drawSelection=function(t={}){return[Sn.of(t),Cn,kn,Tn,Kt.of(!0)]},e.dropCursor=function(){return[Nn,Pn]},e.getDrawSelectionConfig=function(t){return t.facet(Sn)},e.getPanel=function(t,e){let i=t.plugin(dr),n=i?i.specs.indexOf(e):-1;return n>-1?i.panels[n]:null},e.getTooltip=function(t,e){let i=t.plugin(tr);if(!i)return null;let n=i.manager.tooltips.indexOf(e);return n<0?null:i.manager.tooltipViews[n]},e.gutter=function(t){return[Sr(),yr.of(Object.assign(Object.assign({},wr),t))]},e.gutterLineClass=vr,e.gutters=Sr,e.hasHoverTooltips=function(t){return t.facet(rr).some((t=>t))},e.highlightActiveLine=function(){return zn},e.highlightActiveLineGutter=function(){return Ir},e.highlightSpecialChars=function(t={}){return[Fn.of(t),_n||(_n=ee.fromClass(class{constructor(t){this.view=t,this.decorations=ct.none,this.decorationCache=Object.create(null),this.decorator=this.makeDecorator(t.state.facet(Fn)),this.decorations=this.decorator.createDeco(t)}makeDecorator(t){return new Dn({regexp:t.specialChars,decoration:(e,i,r)=>{let{doc:s}=i.state,o=n.codePointAt(e[0],0);if(9==o){let t=s.lineAt(r),e=i.state.tabSize,o=n.countColumn(t.text,e,r-t.from);return ct.replace({widget:new Vn((e-o%e)*this.view.defaultCharacterWidth/this.view.scaleX)})}return this.decorationCache[o]||(this.decorationCache[o]=ct.replace({widget:new qn(t,o)}))},boundary:t.replaceTabs?void 0:/[^]/})}update(t){let e=t.state.facet(Fn);t.startState.facet(Fn)!=e?(this.decorator=this.makeDecorator(e),this.decorations=this.decorator.createDeco(t.view)):this.decorations=this.decorator.updateDeco(t,this.decorations)}},{decorations:t=>t.decorations}))]},e.highlightTrailingWhitespace=function(){return qr},e.highlightWhitespace=function(){return _r},e.hoverTooltip=function(t,e={}){let i=n.StateEffect.define(),r=n.StateField.define({create:()=>[],update(t,r){if(t.length&&(e.hideOnChange&&(r.docChanged||r.selection)?t=[]:e.hideOn&&(t=t.filter((t=>!e.hideOn(r,t)))),r.docChanged)){let e=[];for(let i of t){let t=r.changes.mapPos(i.pos,-1,n.MapMode.TrackDel);if(null!=t){let n=Object.assign(Object.create(null),i);n.pos=t,null!=n.end&&(n.end=r.changes.mapPos(n.end)),e.push(n)}}t=e}for(let e of r.effects)e.is(i)&&(t=e.value),e.is(hr)&&(t=[]);return t},provide:t=>rr.from(t)});return[r,ee.define((n=>new ar(n,t,r,i,e.hoverTime||300))),or]},e.keymap=an,e.layer=yn,e.lineNumberMarkers=Mr,e.lineNumbers=function(t={}){return[Nr.of(t),Sr(),Dr]},e.logException=Xt,e.panels=function(t){return t?[ur.of(t)]:[]},e.placeholder=function(t){return ee.fromClass(class{constructor(e){this.view=e,this.placeholder=t?ct.set([ct.widget({widget:new jn(t),side:1}).range(0)]):ct.none}get decorations(){return this.view.state.doc.length?ct.none:this.placeholder}},{decorations:t=>t.decorations})},e.rectangularSelection=function(t){let e=(null==t?void 0:t.eventFilter)||(t=>t.altKey&&0==t.button);return Zi.mouseSelectionStyle.of(((t,i)=>e(i)?function(t,e){let i=Kn(t,e),r=t.state.selection;return i?{update(t){if(t.docChanged){let e=t.changes.mapPos(t.startState.doc.line(i.line).from),n=t.state.doc.lineAt(e);i={line:n.number,col:i.col,off:Math.min(i.off,n.length)},r=r.map(t.changes)}},get(e,s,o){let a=Kn(t,e);if(!a)return r;let l=function(t,e,i){let r=Math.min(e.line,i.line),s=Math.max(e.line,i.line),o=[];if(e.off>Un||i.off>Un||e.col<0||i.col<0){let a=Math.min(e.off,i.off),l=Math.max(e.off,i.off);for(let e=r;e<=s;e++){let i=t.doc.line(e);i.length<=l&&o.push(n.EditorSelection.range(i.from+a,i.to+l))}}else{let a=Math.min(e.col,i.col),l=Math.max(e.col,i.col);for(let e=r;e<=s;e++){let i=t.doc.line(e),r=n.findColumn(i.text,a,t.tabSize,!0);if(r<0)o.push(n.EditorSelection.cursor(i.to));else{let e=n.findColumn(i.text,l,t.tabSize);o.push(n.EditorSelection.range(i.from+r,i.from+e))}}}return o}(t.state,i,a);return l.length?o?n.EditorSelection.create(l.concat(r.ranges)):n.EditorSelection.create(l):r}}:null}(t,i):null))},e.repositionTooltips=function(t){let e=t.plugin(tr);e&&e.maybeMeasure()},e.runScopeHandlers=function(t,e,i){return fn(hn(t.state),e,t,i)},e.scrollPastEnd=function(){return[Hn,re.of((t=>{var e;return(null===(e=t.plugin(Hn))||void 0===e?void 0:e.attrs)||null}))]},e.showPanel=mr,e.showTooltip=nr,e.tooltips=function(t={}){return Zn.of(t)}},2696:(t,e)=>{"use strict";const i=1024;let n=0;class r{constructor(t,e){this.from=t,this.to=e}}class s{constructor(t={}){this.id=n++,this.perNode=!!t.perNode,this.deserialize=t.deserialize||(()=>{throw new Error("This node type doesn't define a deserialize function")})}add(t){if(this.perNode)throw new RangeError("Can't add per-node props to node types");return"function"!=typeof t&&(t=l.match(t)),e=>{let i=t(e);return void 0===i?null:[this,i]}}}s.closedBy=new s({deserialize:t=>t.split(" ")}),s.openedBy=new s({deserialize:t=>t.split(" ")}),s.group=new s({deserialize:t=>t.split(" ")}),s.isolate=new s({deserialize:t=>{if(t&&"rtl"!=t&&"ltr"!=t&&"auto"!=t)throw new RangeError("Invalid value for isolate: "+t);return t||"auto"}}),s.contextHash=new s({perNode:!0}),s.lookAhead=new s({perNode:!0}),s.mounted=new s({perNode:!0});class o{constructor(t,e,i){this.tree=t,this.overlay=e,this.parser=i}static get(t){return t&&t.props&&t.props[s.mounted.id]}}const a=Object.create(null);class l{constructor(t,e,i,n=0){this.name=t,this.props=e,this.id=i,this.flags=n}static define(t){let e=t.props&&t.props.length?Object.create(null):a,i=(t.top?1:0)|(t.skipped?2:0)|(t.error?4:0)|(null==t.name?8:0),n=new l(t.name||"",e,t.id,i);if(t.props)for(let i of t.props)if(Array.isArray(i)||(i=i(n)),i){if(i[0].perNode)throw new RangeError("Can't store a per-node prop on a node type");e[i[0].id]=i[1]}return n}prop(t){return this.props[t.id]}get isTop(){return(1&this.flags)>0}get isSkipped(){return(2&this.flags)>0}get isError(){return(4&this.flags)>0}get isAnonymous(){return(8&this.flags)>0}is(t){if("string"==typeof t){if(this.name==t)return!0;let e=this.prop(s.group);return!!e&&e.indexOf(t)>-1}return this.id==t}static match(t){let e=Object.create(null);for(let i in t)for(let n of i.split(" "))e[n]=t[i];return t=>{for(let i=t.prop(s.group),n=-1;n<(i?i.length:0);n++){let r=e[n<0?t.name:i[n]];if(r)return r}}}}l.none=new l("",Object.create(null),0,8);class h{constructor(t){this.types=t;for(let e=0;e<t.length;e++)if(t[e].id!=e)throw new RangeError("Node type ids should correspond to array positions when creating a node set")}extend(...t){let e=[];for(let i of this.types){let n=null;for(let e of t){let t=e(i);t&&(n||(n=Object.assign({},i.props)),n[t[0].id]=t[1])}e.push(n?new l(i.name,n,i.id,i.flags):i)}return new h(e)}}const c=new WeakMap,u=new WeakMap;var d;e.IterMode=void 0,(d=e.IterMode||(e.IterMode={}))[d.ExcludeBuffers=1]="ExcludeBuffers",d[d.IncludeAnonymous=2]="IncludeAnonymous",d[d.IgnoreMounts=4]="IgnoreMounts",d[d.IgnoreOverlays=8]="IgnoreOverlays";class f{constructor(t,e,i,n,r){if(this.type=t,this.children=e,this.positions=i,this.length=n,this.props=null,r&&r.length){this.props=Object.create(null);for(let[t,e]of r)this.props["number"==typeof t?t:t.id]=e}}toString(){let t=o.get(this);if(t&&!t.overlay)return t.tree.toString();let e="";for(let t of this.children){let i=t.toString();i&&(e&&(e+=","),e+=i)}return this.type.name?(/\W/.test(this.type.name)&&!this.type.isError?JSON.stringify(this.type.name):this.type.name)+(e.length?"("+e+")":""):e}cursor(t=0){return new A(this.topNode,t)}cursorAt(t,e=0,i=0){let n=c.get(this)||this.topNode,r=new A(n);return r.moveTo(t,e),c.set(this,r._tree),r}get topNode(){return new y(this,0,0,null)}resolve(t,e=0){let i=v(c.get(this)||this.topNode,t,e,!1);return c.set(this,i),i}resolveInner(t,e=0){let i=v(u.get(this)||this.topNode,t,e,!0);return u.set(this,i),i}resolveStack(t,e=0){return function(t,e,i){let n=t.resolveInner(e,i),r=null;for(let t=n instanceof y?n:n.context.parent;t;t=t.parent)if(t.index<0){let s=t.parent;(r||(r=[n])).push(s.resolve(e,i)),t=s}else{let s=o.get(t.tree);if(s&&s.overlay&&s.overlay[0].from<=e&&s.overlay[s.overlay.length-1].to>=e){let o=new y(s.tree,s.overlay[0].from+t.from,-1,t);(r||(r=[n])).push(v(o,e,i,!1))}}return r?E(r):n}(this,t,e)}iterate(t){let{enter:i,leave:n,from:r=0,to:s=this.length}=t,o=t.mode||0,a=(o&e.IterMode.IncludeAnonymous)>0;for(let t=this.cursor(o|e.IterMode.IncludeAnonymous);;){let e=!1;if(t.from<=s&&t.to>=r&&(!a&&t.type.isAnonymous||!1!==i(t))){if(t.firstChild())continue;e=!0}for(;e&&n&&(a||!t.type.isAnonymous)&&n(t),!t.nextSibling();){if(!t.parent())return;e=!0}}}prop(t){return t.perNode?this.props?this.props[t.id]:void 0:this.type.prop(t)}get propValues(){let t=[];if(this.props)for(let e in this.props)t.push([+e,this.props[e]]);return t}balance(t={}){return this.children.length<=8?this:P(l.none,this.children,this.positions,0,this.children.length,0,this.length,((t,e,i)=>new f(this.type,t,e,i,this.propValues)),t.makeTree||((t,e,i)=>new f(l.none,t,e,i)))}static build(t){return function(t){var e;let{buffer:n,nodeSet:r,maxBufferLength:o=i,reused:a=[],minRepeatType:l=r.types.length}=t,h=Array.isArray(n)?new p(n,n.length):n,c=r.types,u=0,d=0;function g(t,e,i,n,p,S){let{id:x,start:C,end:E,size:k}=h,A=d;for(;k<0;){if(h.next(),-1==k){let e=a[x];return i.push(e),void n.push(C-t)}if(-3==k)return void(u=x);if(-4==k)return void(d=x);throw new RangeError(`Unrecognized record size: ${k}`)}let T,M,N=c[x],O=C-t;if(E-C<=o&&(M=function(t,e){let i=h.fork(),n=0,r=0,s=0,a=i.end-o,c={size:0,start:0,skip:0};t:for(let o=i.pos-t;i.pos>o;){let t=i.size;if(i.id==e&&t>=0){c.size=n,c.start=r,c.skip=s,s+=4,n+=4,i.next();continue}let h=i.pos-t;if(t<0||h<o||i.start<a)break;let u=i.id>=l?4:0,d=i.start;for(i.next();i.pos>h;){if(i.size<0){if(-3!=i.size)break t;u+=4}else i.id>=l&&(u+=4);i.next()}r=d,n+=t,s+=u}return(e<0||n==t)&&(c.size=n,c.start=r,c.skip=s),c.size>4?c:void 0}(h.pos-e,p))){let e=new Uint16Array(M.size-M.skip),i=h.pos-M.size,n=e.length;for(;h.pos>i;)n=b(M.start,e,n);T=new m(e,E-M.start,r),O=M.start-t}else{let t=h.pos-k;h.next();let e=[],i=[],n=x>=l?x:-1,r=0,a=E;for(;h.pos>t;)n>=0&&h.id==n&&h.size>=0?(h.end<=a-o&&(w(e,i,C,r,h.end,a,n,A),r=e.length,a=h.end),h.next()):S>2500?v(C,t,e,i):g(C,t,e,i,n,S+1);if(n>=0&&r>0&&r<e.length&&w(e,i,C,r,C,a,n,A),e.reverse(),i.reverse(),n>-1&&r>0){let t=function(t){return(e,i,n)=>{let r,o,a=0,l=e.length-1;if(l>=0&&(r=e[l])instanceof f){if(!l&&r.type==t&&r.length==n)return r;(o=r.prop(s.lookAhead))&&(a=i[l]+r.length+o)}return y(t,e,i,n,a)}}(N);T=P(N,e,i,0,e.length,0,E-C,t,t)}else T=y(N,e,i,E-C,A-E)}i.push(T),n.push(O)}function v(t,e,i,n){let s=[],a=0,l=-1;for(;h.pos>e;){let{id:t,start:e,end:i,size:n}=h;if(n>4)h.next();else{if(l>-1&&e<l)break;l<0&&(l=i-o),s.push(t,e,i),a++,h.next()}}if(a){let e=new Uint16Array(4*a),o=s[s.length-2];for(let t=s.length-3,i=0;t>=0;t-=3)e[i++]=s[t],e[i++]=s[t+1]-o,e[i++]=s[t+2]-o,e[i++]=i;i.push(new m(e,s[2]-o,r)),n.push(o-t)}}function w(t,e,i,n,s,o,a,l){let h=[],c=[];for(;t.length>n;)h.push(t.pop()),c.push(e.pop()+i-s);t.push(y(r.types[a],h,c,o-s,l-o)),e.push(s-i)}function y(t,e,i,n,r=0,o){if(u){let t=[s.contextHash,u];o=o?[t].concat(o):[t]}if(r>25){let t=[s.lookAhead,r];o=o?[t].concat(o):[t]}return new f(t,e,i,n,o)}function b(t,e,i){let{id:n,start:r,end:s,size:o}=h;if(h.next(),o>=0&&n<l){let a=i;if(o>4){let n=h.pos-(o-4);for(;h.pos>n;)i=b(t,e,i)}e[--i]=a,e[--i]=s-t,e[--i]=r-t,e[--i]=n}else-3==o?u=n:-4==o&&(d=n);return i}let S=[],x=[];for(;h.pos>0;)g(t.start||0,t.bufferStart||0,S,x,-1,0);let C=null!==(e=t.length)&&void 0!==e?e:S.length?x[0]+S[0].length:0;return new f(c[t.topID],S.reverse(),x.reverse(),C)}(t)}}f.empty=new f(l.none,[],[],0);class p{constructor(t,e){this.buffer=t,this.index=e}get id(){return this.buffer[this.index-4]}get start(){return this.buffer[this.index-3]}get end(){return this.buffer[this.index-2]}get size(){return this.buffer[this.index-1]}get pos(){return this.index}next(){this.index-=4}fork(){return new p(this.buffer,this.index)}}class m{constructor(t,e,i){this.buffer=t,this.length=e,this.set=i}get type(){return l.none}toString(){let t=[];for(let e=0;e<this.buffer.length;)t.push(this.childString(e)),e=this.buffer[e+3];return t.join(",")}childString(t){let e=this.buffer[t],i=this.buffer[t+3],n=this.set.types[e],r=n.name;if(/\W/.test(r)&&!n.isError&&(r=JSON.stringify(r)),i==(t+=4))return r;let s=[];for(;t<i;)s.push(this.childString(t)),t=this.buffer[t+3];return r+"("+s.join(",")+")"}findChild(t,e,i,n,r){let{buffer:s}=this,o=-1;for(let a=t;a!=e&&!(g(r,n,s[a+1],s[a+2])&&(o=a,i>0));a=s[a+3]);return o}slice(t,e,i){let n=this.buffer,r=new Uint16Array(e-t),s=0;for(let o=t,a=0;o<e;){r[a++]=n[o++],r[a++]=n[o++]-i;let e=r[a++]=n[o++]-i;r[a++]=n[o++]-t,s=Math.max(s,e)}return new m(r,s,this.set)}}function g(t,e,i,n){switch(t){case-2:return i<e;case-1:return n>=e&&i<e;case 0:return i<e&&n>e;case 1:return i<=e&&n>e;case 2:return n>e;case 4:return!0}}function v(t,i,n,r){for(var s;t.from==t.to||(n<1?t.from>=i:t.from>i)||(n>-1?t.to<=i:t.to<i);){let e=!r&&t instanceof y&&t.index<0?null:t.parent;if(!e)return t;t=e}let o=r?0:e.IterMode.IgnoreOverlays;if(r)for(let e=t,r=e.parent;r;e=r,r=e.parent)e instanceof y&&e.index<0&&(null===(s=r.enter(i,n,o))||void 0===s?void 0:s.from)!=e.from&&(t=r);for(;;){let e=t.enter(i,n,o);if(!e)return t;t=e}}class w{cursor(t=0){return new A(this,t)}getChild(t,e=null,i=null){let n=b(this,t,e,i);return n.length?n[0]:null}getChildren(t,e=null,i=null){return b(this,t,e,i)}resolve(t,e=0){return v(this,t,e,!1)}resolveInner(t,e=0){return v(this,t,e,!0)}matchContext(t){return S(this,t)}enterUnfinishedNodesBefore(t){let e=this.childBefore(t),i=this;for(;e;){let t=e.lastChild;if(!t||t.to!=e.to)break;t.type.isError&&t.from==t.to?(i=e,e=t.prevSibling):e=t}return i}get node(){return this}get next(){return this.parent}}class y extends w{constructor(t,e,i,n){super(),this._tree=t,this.from=e,this.index=i,this._parent=n}get type(){return this._tree.type}get name(){return this._tree.type.name}get to(){return this.from+this._tree.length}nextChild(t,i,n,r,s=0){for(let a=this;;){for(let{children:l,positions:h}=a._tree,c=i>0?l.length:-1;t!=c;t+=i){let c=l[t],u=h[t]+a.from;if(g(r,n,u,u+c.length))if(c instanceof m){if(s&e.IterMode.ExcludeBuffers)continue;let o=c.findChild(0,c.buffer.length,i,n-u,r);if(o>-1)return new C(new x(a,c,t,u),null,o)}else if(s&e.IterMode.IncludeAnonymous||!c.type.isAnonymous||T(c)){let l;if(!(s&e.IterMode.IgnoreMounts)&&(l=o.get(c))&&!l.overlay)return new y(l.tree,u,t,a);let h=new y(c,u,t,a);return s&e.IterMode.IncludeAnonymous||!h.type.isAnonymous?h:h.nextChild(i<0?c.children.length-1:0,i,n,r)}}if(s&e.IterMode.IncludeAnonymous||!a.type.isAnonymous)return null;if(t=a.index>=0?a.index+i:i<0?-1:a._parent._tree.children.length,a=a._parent,!a)return null}}get firstChild(){return this.nextChild(0,1,0,4)}get lastChild(){return this.nextChild(this._tree.children.length-1,-1,0,4)}childAfter(t){return this.nextChild(0,1,t,2)}childBefore(t){return this.nextChild(this._tree.children.length-1,-1,t,-2)}enter(t,i,n=0){let r;if(!(n&e.IterMode.IgnoreOverlays)&&(r=o.get(this._tree))&&r.overlay){let e=t-this.from;for(let{from:t,to:n}of r.overlay)if((i>0?t<=e:t<e)&&(i<0?n>=e:n>e))return new y(r.tree,r.overlay[0].from+this.from,-1,this)}return this.nextChild(0,1,t,i,n)}nextSignificantParent(){let t=this;for(;t.type.isAnonymous&&t._parent;)t=t._parent;return t}get parent(){return this._parent?this._parent.nextSignificantParent():null}get nextSibling(){return this._parent&&this.index>=0?this._parent.nextChild(this.index+1,1,0,4):null}get prevSibling(){return this._parent&&this.index>=0?this._parent.nextChild(this.index-1,-1,0,4):null}get tree(){return this._tree}toTree(){return this._tree}toString(){return this._tree.toString()}}function b(t,e,i,n){let r=t.cursor(),s=[];if(!r.firstChild())return s;if(null!=i)for(let t=!1;!t;)if(t=r.type.is(i),!r.nextSibling())return s;for(;;){if(null!=n&&r.type.is(n))return s;if(r.type.is(e)&&s.push(r.node),!r.nextSibling())return null==n?s:[]}}function S(t,e,i=e.length-1){for(let n=t.parent;i>=0;n=n.parent){if(!n)return!1;if(!n.type.isAnonymous){if(e[i]&&e[i]!=n.name)return!1;i--}}return!0}class x{constructor(t,e,i,n){this.parent=t,this.buffer=e,this.index=i,this.start=n}}class C extends w{get name(){return this.type.name}get from(){return this.context.start+this.context.buffer.buffer[this.index+1]}get to(){return this.context.start+this.context.buffer.buffer[this.index+2]}constructor(t,e,i){super(),this.context=t,this._parent=e,this.index=i,this.type=t.buffer.set.types[t.buffer.buffer[i]]}child(t,e,i){let{buffer:n}=this.context,r=n.findChild(this.index+4,n.buffer[this.index+3],t,e-this.context.start,i);return r<0?null:new C(this.context,this,r)}get firstChild(){return this.child(1,0,4)}get lastChild(){return this.child(-1,0,4)}childAfter(t){return this.child(1,t,2)}childBefore(t){return this.child(-1,t,-2)}enter(t,i,n=0){if(n&e.IterMode.ExcludeBuffers)return null;let{buffer:r}=this.context,s=r.findChild(this.index+4,r.buffer[this.index+3],i>0?1:-1,t-this.context.start,i);return s<0?null:new C(this.context,this,s)}get parent(){return this._parent||this.context.parent.nextSignificantParent()}externalSibling(t){return this._parent?null:this.context.parent.nextChild(this.context.index+t,t,0,4)}get nextSibling(){let{buffer:t}=this.context,e=t.buffer[this.index+3];return e<(this._parent?t.buffer[this._parent.index+3]:t.buffer.length)?new C(this.context,this._parent,e):this.externalSibling(1)}get prevSibling(){let{buffer:t}=this.context,e=this._parent?this._parent.index+4:0;return this.index==e?this.externalSibling(-1):new C(this.context,this._parent,t.findChild(e,this.index,-1,0,4))}get tree(){return null}toTree(){let t=[],e=[],{buffer:i}=this.context,n=this.index+4,r=i.buffer[this.index+3];if(r>n){let s=i.buffer[this.index+1];t.push(i.slice(n,r,s)),e.push(0)}return new f(this.type,t,e,this.to-this.from)}toString(){return this.context.buffer.childString(this.index)}}function E(t){if(!t.length)return null;let e=0,i=t[0];for(let n=1;n<t.length;n++){let r=t[n];(r.from>i.from||r.to<i.to)&&(i=r,e=n)}let n=i instanceof y&&i.index<0?null:i.parent,r=t.slice();return n?r[e]=n:r.splice(e,1),new k(r,i)}class k{constructor(t,e){this.heads=t,this.node=e}get next(){return E(this.heads)}}class A{get name(){return this.type.name}constructor(t,e=0){if(this.mode=e,this.buffer=null,this.stack=[],this.index=0,this.bufferNode=null,t instanceof y)this.yieldNode(t);else{this._tree=t.context.parent,this.buffer=t.context;for(let e=t._parent;e;e=e._parent)this.stack.unshift(e.index);this.bufferNode=t,this.yieldBuf(t.index)}}yieldNode(t){return!!t&&(this._tree=t,this.type=t.type,this.from=t.from,this.to=t.to,!0)}yieldBuf(t,e){this.index=t;let{start:i,buffer:n}=this.buffer;return this.type=e||n.set.types[n.buffer[t]],this.from=i+n.buffer[t+1],this.to=i+n.buffer[t+2],!0}yield(t){return!!t&&(t instanceof y?(this.buffer=null,this.yieldNode(t)):(this.buffer=t.context,this.yieldBuf(t.index,t.type)))}toString(){return this.buffer?this.buffer.buffer.childString(this.index):this._tree.toString()}enterChild(t,e,i){if(!this.buffer)return this.yield(this._tree.nextChild(t<0?this._tree._tree.children.length-1:0,t,e,i,this.mode));let{buffer:n}=this.buffer,r=n.findChild(this.index+4,n.buffer[this.index+3],t,e-this.buffer.start,i);return!(r<0)&&(this.stack.push(this.index),this.yieldBuf(r))}firstChild(){return this.enterChild(1,0,4)}lastChild(){return this.enterChild(-1,0,4)}childAfter(t){return this.enterChild(1,t,2)}childBefore(t){return this.enterChild(-1,t,-2)}enter(t,i,n=this.mode){return this.buffer?!(n&e.IterMode.ExcludeBuffers)&&this.enterChild(1,t,i):this.yield(this._tree.enter(t,i,n))}parent(){if(!this.buffer)return this.yieldNode(this.mode&e.IterMode.IncludeAnonymous?this._tree._parent:this._tree.parent);if(this.stack.length)return this.yieldBuf(this.stack.pop());let t=this.mode&e.IterMode.IncludeAnonymous?this.buffer.parent:this.buffer.parent.nextSignificantParent();return this.buffer=null,this.yieldNode(t)}sibling(t){if(!this.buffer)return!!this._tree._parent&&this.yield(this._tree.index<0?null:this._tree._parent.nextChild(this._tree.index+t,t,0,4,this.mode));let{buffer:e}=this.buffer,i=this.stack.length-1;if(t<0){let t=i<0?0:this.stack[i]+4;if(this.index!=t)return this.yieldBuf(e.findChild(t,this.index,-1,0,4))}else{let t=e.buffer[this.index+3];if(t<(i<0?e.buffer.length:e.buffer[this.stack[i]+3]))return this.yieldBuf(t)}return i<0&&this.yield(this.buffer.parent.nextChild(this.buffer.index+t,t,0,4,this.mode))}nextSibling(){return this.sibling(1)}prevSibling(){return this.sibling(-1)}atLastNode(t){let i,n,{buffer:r}=this;if(r){if(t>0){if(this.index<r.buffer.buffer.length)return!1}else for(let t=0;t<this.index;t++)if(r.buffer.buffer[t+3]<this.index)return!1;({index:i,parent:n}=r)}else({index:i,_parent:n}=this._tree);for(;n;({index:i,_parent:n}=n))if(i>-1)for(let r=i+t,s=t<0?-1:n._tree.children.length;r!=s;r+=t){let t=n._tree.children[r];if(this.mode&e.IterMode.IncludeAnonymous||t instanceof m||!t.type.isAnonymous||T(t))return!1}return!0}move(t,e){if(e&&this.enterChild(t,0,4))return!0;for(;;){if(this.sibling(t))return!0;if(this.atLastNode(t)||!this.parent())return!1}}next(t=!0){return this.move(1,t)}prev(t=!0){return this.move(-1,t)}moveTo(t,e=0){for(;(this.from==this.to||(e<1?this.from>=t:this.from>t)||(e>-1?this.to<=t:this.to<t))&&this.parent(););for(;this.enterChild(1,t,e););return this}get node(){if(!this.buffer)return this._tree;let t=this.bufferNode,e=null,i=0;if(t&&t.context==this.buffer)t:for(let n=this.index,r=this.stack.length;r>=0;){for(let s=t;s;s=s._parent)if(s.index==n){if(n==this.index)return s;e=s,i=r+1;break t}n=this.stack[--r]}for(let t=i;t<this.stack.length;t++)e=new C(this.buffer,e,this.stack[t]);return this.bufferNode=new C(this.buffer,e,this.index)}get tree(){return this.buffer?null:this._tree._tree}iterate(t,e){for(let i=0;;){let n=!1;if(this.type.isAnonymous||!1!==t(this)){if(this.firstChild()){i++;continue}this.type.isAnonymous||(n=!0)}for(;n&&e&&e(this),n=this.type.isAnonymous,!this.nextSibling();){if(!i)return;this.parent(),i--,n=!0}}}matchContext(t){if(!this.buffer)return S(this.node,t);let{buffer:e}=this.buffer,{types:i}=e.set;for(let n=t.length-1,r=this.stack.length-1;n>=0;r--){if(r<0)return S(this.node,t,n);let s=i[e.buffer[this.stack[r]]];if(!s.isAnonymous){if(t[n]&&t[n]!=s.name)return!1;n--}}return!0}}function T(t){return t.children.some((t=>t instanceof m||!t.type.isAnonymous||T(t)))}const M=new WeakMap;function N(t,e){if(!t.isAnonymous||e instanceof m||e.type!=t)return 1;let i=M.get(e);if(null==i){i=1;for(let n of e.children){if(n.type!=t||!(n instanceof f)){i=1;break}i+=N(t,n)}M.set(e,i)}return i}function P(t,e,i,n,r,s,o,a,l){let h=0;for(let i=n;i<r;i++)h+=N(t,e[i]);let c=Math.ceil(1.5*h/8),u=[],d=[];return function e(i,n,r,o,a){for(let h=r;h<o;){let r=h,f=n[h],p=N(t,i[h]);for(h++;h<o;h++){let e=N(t,i[h]);if(p+e>=c)break;p+=e}if(h==r+1){if(p>c){let t=i[r];e(t.children,t.positions,0,t.children.length,n[r]+a);continue}u.push(i[r])}else{let e=n[h-1]+i[h-1].length-f;u.push(P(t,i,n,r,h,f,e,null,l))}d.push(f+a-s)}}(e,i,n,r,0),(a||l)(u,d,o)}class O{constructor(t,e,i,n,r=!1,s=!1){this.from=t,this.to=e,this.tree=i,this.offset=n,this.open=(r?1:0)|(s?2:0)}get openStart(){return(1&this.open)>0}get openEnd(){return(2&this.open)>0}static addTree(t,e=[],i=!1){let n=[new O(0,t.length,t,0,!1,i)];for(let i of e)i.to>t.length&&n.push(i);return n}static applyChanges(t,e,i=128){if(!e.length)return t;let n=[],r=1,s=t.length?t[0]:null;for(let o=0,a=0,l=0;;o++){let h=o<e.length?e[o]:null,c=h?h.fromA:1e9;if(c-a>=i)for(;s&&s.from<c;){let e=s;if(a>=e.from||c<=e.to||l){let t=Math.max(e.from,a)-l,i=Math.min(e.to,c)-l;e=t>=i?null:new O(t,i,e.tree,e.offset+l,o>0,!!h)}if(e&&n.push(e),s.to>c)break;s=r<t.length?t[r++]:null}if(!h)break;a=h.toA,l=h.toA-h.toB}return n}}class D{constructor(t){this.string=t}get length(){return this.string.length}chunk(t){return this.string.slice(t)}get lineChunks(){return!1}read(t,e){return this.string.slice(t,e)}}class R{constructor(t,e,i,n,r){this.parser=t,this.parse=e,this.overlay=i,this.target=n,this.from=r}}function L(t){if(!t.length||t.some((t=>t.from>=t.to)))throw new RangeError("Invalid inner parse ranges given: "+JSON.stringify(t))}class I{constructor(t,e,i,n,r,s,o){this.parser=t,this.predicate=e,this.mounts=i,this.index=n,this.start=r,this.target=s,this.prev=o,this.depth=0,this.ranges=[]}}const B=new s({perNode:!0});class F{constructor(t,e,i,n,r){this.nest=e,this.input=i,this.fragments=n,this.ranges=r,this.inner=[],this.innerDone=0,this.baseTree=null,this.stoppedAt=null,this.baseParse=t}advance(){if(this.baseParse){let t=this.baseParse.advance();if(!t)return null;if(this.baseParse=null,this.baseTree=t,this.startInner(),null!=this.stoppedAt)for(let t of this.inner)t.parse.stopAt(this.stoppedAt)}if(this.innerDone==this.inner.length){let t=this.baseTree;return null!=this.stoppedAt&&(t=new f(t.type,t.children,t.positions,t.length,t.propValues.concat([[B,this.stoppedAt]]))),t}let t=this.inner[this.innerDone],e=t.parse.advance();if(e){this.innerDone++;let i=Object.assign(Object.create(null),t.target.props);i[s.mounted.id]=new o(e,t.overlay,t.parser),t.target.props=i}return null}get parsedPos(){if(this.baseParse)return 0;let t=this.input.length;for(let e=this.innerDone;e<this.inner.length;e++)this.inner[e].from<t&&(t=Math.min(t,this.inner[e].parse.parsedPos));return t}stopAt(t){if(this.stoppedAt=t,this.baseParse)this.baseParse.stopAt(t);else for(let e=this.innerDone;e<this.inner.length;e++)this.inner[e].parse.stopAt(t)}startInner(){let t=new W(this.fragments),i=null,n=null,s=new A(new y(this.baseTree,this.ranges[0].from,0,null),e.IterMode.IncludeAnonymous|e.IterMode.IgnoreMounts);t:for(let e,o;;){let a,l=!0;if(null!=this.stoppedAt&&s.from>=this.stoppedAt)l=!1;else if(t.hasNode(s)){if(i){let t=i.mounts.find((t=>t.frag.from<=s.from&&t.frag.to>=s.to&&t.mount.overlay));if(t)for(let e of t.mount.overlay){let n=e.from+t.pos,r=e.to+t.pos;n>=s.from&&r<=s.to&&!i.ranges.some((t=>t.from<r&&t.to>n))&&i.ranges.push({from:n,to:r})}}l=!1}else if(n&&(o=_(n.ranges,s.from,s.to)))l=2!=o;else if(!s.type.isAnonymous&&(e=this.nest(s,this.input))&&(s.from<s.to||!e.overlay)){s.tree||V(s);let o=t.findMounts(s.from,e.parser);if("function"==typeof e.overlay)i=new I(e.parser,e.overlay,o,this.inner.length,s.from,s.tree,i);else{let t=z(this.ranges,e.overlay||(s.from<s.to?[new r(s.from,s.to)]:[]));t.length&&L(t),!t.length&&e.overlay||this.inner.push(new R(e.parser,t.length?e.parser.startParse(this.input,U(o,t),t):e.parser.startParse(""),e.overlay?e.overlay.map((t=>new r(t.from-s.from,t.to-s.from))):null,s.tree,t.length?t[0].from:s.from)),e.overlay?t.length&&(n={ranges:t,depth:0,prev:n}):l=!1}}else i&&(a=i.predicate(s))&&(!0===a&&(a=new r(s.from,s.to)),a.from<a.to&&i.ranges.push(a));if(l&&s.firstChild())i&&i.depth++,n&&n.depth++;else for(;!s.nextSibling();){if(!s.parent())break t;if(i&&! --i.depth){let t=z(this.ranges,i.ranges);t.length&&(L(t),this.inner.splice(i.index,0,new R(i.parser,i.parser.startParse(this.input,U(i.mounts,t),t),i.ranges.map((t=>new r(t.from-i.start,t.to-i.start))),i.target,t[0].from))),i=i.prev}n&&! --n.depth&&(n=n.prev)}}}}function _(t,e,i){for(let n of t){if(n.from>=i)break;if(n.to>e)return n.from<=e&&n.to>=i?2:1}return 0}function q(t,e,i,n,r,s){if(e<i){let o=t.buffer[e+1];n.push(t.slice(e,i,o)),r.push(o-s)}}function V(t){let{node:e}=t,i=[],n=e.context.buffer;do{i.push(t.index),t.parent()}while(!t.tree);let r=t.tree,s=r.children.indexOf(n),o=r.children[s],a=o.buffer,h=[s];r.children[s]=function t(n,r,s,l,c,u){let d=i[u],p=[],m=[];q(o,n,d,p,m,l);let g=a[d+1],v=a[d+2];h.push(p.length);let w=u?t(d+4,a[d+3],o.set.types[a[d]],g,v-g,u-1):e.toTree();return p.push(w),m.push(g-l),q(o,a[d+3],r,p,m,l),new f(s,p,m,c)}(0,a.length,l.none,0,o.length,i.length-1);for(let e of h){let i=t.tree.children[e],n=t.tree.positions[e];t.yield(new y(i,n+t.from,e,t._tree))}}class H{constructor(t,i){this.offset=i,this.done=!1,this.cursor=t.cursor(e.IterMode.IncludeAnonymous|e.IterMode.IgnoreMounts)}moveTo(t){let{cursor:i}=this,n=t-this.offset;for(;!this.done&&i.from<n;)i.to>=t&&i.enter(n,1,e.IterMode.IgnoreOverlays|e.IterMode.ExcludeBuffers)||i.next(!1)||(this.done=!0)}hasNode(t){if(this.moveTo(t.from),!this.done&&this.cursor.from+this.offset==t.from&&this.cursor.tree)for(let e=this.cursor.tree;;){if(e==t.tree)return!0;if(!(e.children.length&&0==e.positions[0]&&e.children[0]instanceof f))break;e=e.children[0]}return!1}}class W{constructor(t){var e;if(this.fragments=t,this.curTo=0,this.fragI=0,t.length){let i=this.curFrag=t[0];this.curTo=null!==(e=i.tree.prop(B))&&void 0!==e?e:i.to,this.inner=new H(i.tree,-i.offset)}else this.curFrag=this.inner=null}hasNode(t){for(;this.curFrag&&t.from>=this.curTo;)this.nextFrag();return this.curFrag&&this.curFrag.from<=t.from&&this.curTo>=t.to&&this.inner.hasNode(t)}nextFrag(){var t;if(this.fragI++,this.fragI==this.fragments.length)this.curFrag=this.inner=null;else{let e=this.curFrag=this.fragments[this.fragI];this.curTo=null!==(t=e.tree.prop(B))&&void 0!==t?t:e.to,this.inner=new H(e.tree,-e.offset)}}findMounts(t,e){var i;let n=[];if(this.inner){this.inner.cursor.moveTo(t,1);for(let t=this.inner.cursor.node;t;t=t.parent){let r=null===(i=t.tree)||void 0===i?void 0:i.prop(s.mounted);if(r&&r.parser==e)for(let e=this.fragI;e<this.fragments.length;e++){let i=this.fragments[e];if(i.from>=t.to)break;i.tree==this.curFrag.tree&&n.push({frag:i,pos:t.from-i.offset,mount:r})}}}return n}}function z(t,e){let i=null,n=e;for(let s=1,o=0;s<t.length;s++){let a=t[s-1].to,l=t[s].from;for(;o<n.length;o++){let t=n[o];if(t.from>=l)break;t.to<=a||(i||(n=i=e.slice()),t.from<a?(i[o]=new r(t.from,a),t.to>l&&i.splice(o+1,0,new r(l,t.to))):t.to>l?i[o--]=new r(l,t.to):i.splice(o--,1))}}return n}function j(t,e,i,n){let s=0,o=0,a=!1,l=!1,h=-1e9,c=[];for(;;){let u=s==t.length?1e9:a?t[s].to:t[s].from,d=o==e.length?1e9:l?e[o].to:e[o].from;if(a!=l){let t=Math.max(h,i),e=Math.min(u,d,n);t<e&&c.push(new r(t,e))}if(h=Math.min(u,d),1e9==h)break;u==h&&(a?(a=!1,s++):a=!0),d==h&&(l?(l=!1,o++):l=!0)}return c}function U(t,e){let i=[];for(let{pos:n,mount:s,frag:o}of t){let t=n+(s.overlay?s.overlay[0].from:0),a=t+s.tree.length,l=Math.max(o.from,t),h=Math.min(o.to,a);if(s.overlay){let a=j(e,s.overlay.map((t=>new r(t.from+n,t.to+n))),l,h);for(let e=0,n=l;;e++){let r=e==a.length,l=r?h:a[e].from;if(l>n&&i.push(new O(n,l,s.tree,-t,o.from>=n||o.openStart,o.to<=l||o.openEnd)),r)break;n=a[e].to}}else i.push(new O(l,h,s.tree,-t,o.from>=t||o.openStart,o.to<=a||o.openEnd))}return i}e.DefaultBufferLength=i,e.MountedTree=o,e.NodeProp=s,e.NodeSet=h,e.NodeType=l,e.NodeWeakMap=class{constructor(){this.map=new WeakMap}setBuffer(t,e,i){let n=this.map.get(t);n||this.map.set(t,n=new Map),n.set(e,i)}getBuffer(t,e){let i=this.map.get(t);return i&&i.get(e)}set(t,e){t instanceof C?this.setBuffer(t.context.buffer,t.index,e):t instanceof y&&this.map.set(t.tree,e)}get(t){return t instanceof C?this.getBuffer(t.context.buffer,t.index):t instanceof y?this.map.get(t.tree):void 0}cursorSet(t,e){t.buffer?this.setBuffer(t.buffer.buffer,t.index,e):this.map.set(t.tree,e)}cursorGet(t){return t.buffer?this.getBuffer(t.buffer.buffer,t.index):this.map.get(t.tree)}},e.Parser=class{startParse(t,e,i){return"string"==typeof t&&(t=new D(t)),i=i?i.length?i.map((t=>new r(t.from,t.to))):[new r(0,0)]:[new r(0,t.length)],this.createParse(t,e||[],i)}parse(t,e,i){let n=this.startParse(t,e,i);for(;;){let t=n.advance();if(t)return t}}},e.Tree=f,e.TreeBuffer=m,e.TreeCursor=A,e.TreeFragment=O,e.parseMixed=function(t){return(e,i,n,r)=>new F(e,t,i,n,r)}},7359:(t,e,i)=>{"use strict";var n=i(2696);let r=0;class s{constructor(t,e,i){this.set=t,this.base=e,this.modified=i,this.id=r++}static define(t){if(null==t?void 0:t.base)throw new Error("Can not derive from a modified tag");let e=new s([],null,[]);if(e.set.push(e),t)for(let i of t.set)e.set.push(i);return e}static defineModifier(){let t=new a;return e=>e.modified.indexOf(t)>-1?e:a.get(e.base||e,e.modified.concat(t).sort(((t,e)=>t.id-e.id)))}}let o=0;class a{constructor(){this.instances=[],this.id=o++}static get(t,e){if(!e.length)return t;let i=e[0].instances.find((i=>{return i.base==t&&(n=e,r=i.modified,n.length==r.length&&n.every(((t,e)=>t==r[e])));var n,r}));if(i)return i;let n=[],r=new s(n,t,e);for(let t of e)t.instances.push(r);let o=function(t){let e=[[]];for(let i=0;i<t.length;i++)for(let n=0,r=e.length;n<r;n++)e.push(e[n].concat(t[i]));return e.sort(((t,e)=>e.length-t.length))}(e);for(let e of t.set)if(!e.modified.length)for(let t of o)n.push(a.get(e,t));return r}}const l=new n.NodeProp;class h{constructor(t,e,i,n){this.tags=t,this.mode=e,this.context=i,this.next=n}get opaque(){return 0==this.mode}get inherit(){return 1==this.mode}sort(t){return!t||t.depth<this.depth?(this.next=t,this):(t.next=this.sort(t.next),t)}get depth(){return this.context?this.context.length:0}}function c(t,e){let i=Object.create(null);for(let e of t)if(Array.isArray(e.tag))for(let t of e.tag)i[t.id]=e.class;else i[e.tag.id]=e.class;let{scope:n,all:r=null}=e||{};return{style:t=>{let e=r;for(let n of t)for(let t of n.set){let n=i[t.id];if(n){e=e?e+" "+n:n;break}}return e},scope:n}}function u(t,e,i,n=0,r=t.length){let s=new d(n,Array.isArray(e)?e:[e],i);s.highlightRange(t.cursor(),n,r,"",s.highlighters),s.flush(r)}h.empty=new h([],2,null);class d{constructor(t,e,i){this.at=t,this.highlighters=e,this.span=i,this.class=""}startSpan(t,e){e!=this.class&&(this.flush(t),t>this.at&&(this.at=t),this.class=e)}flush(t){t>this.at&&this.class&&this.span(this.at,t,this.class)}highlightRange(t,e,i,r,s){let{type:o,from:a,to:l}=t;if(a>=i||l<=e)return;o.isTop&&(s=this.highlighters.filter((t=>!t.scope||t.scope(o))));let c=r,u=f(t)||h.empty,d=function(t,e){let i=null;for(let n of t){let t=n.style(e);t&&(i=i?i+" "+t:t)}return i}(s,u.tags);if(d&&(c&&(c+=" "),c+=d,1==u.mode&&(r+=(r?" ":"")+d)),this.startSpan(Math.max(e,a),c),u.opaque)return;let p=t.tree&&t.tree.prop(n.NodeProp.mounted);if(p&&p.overlay){let n=t.node.enter(p.overlay[0].from+a,1),o=this.highlighters.filter((t=>!t.scope||t.scope(p.tree.type))),h=t.firstChild();for(let u=0,d=a;;u++){let f=u<p.overlay.length?p.overlay[u]:null,m=f?f.from+a:l,g=Math.max(e,d),v=Math.min(i,m);if(g<v&&h)for(;t.from<v&&(this.highlightRange(t,g,v,r,s),this.startSpan(Math.min(v,t.to),c),!(t.to>=m)&&t.nextSibling()););if(!f||m>i)break;d=f.to+a,d>e&&(this.highlightRange(n.cursor(),Math.max(e,f.from+a),Math.min(i,d),"",o),this.startSpan(Math.min(i,d),c))}h&&t.parent()}else if(t.firstChild()){p&&(r="");do{if(!(t.to<=e)){if(t.from>=i)break;this.highlightRange(t,e,i,r,s),this.startSpan(Math.min(i,t.to),c)}}while(t.nextSibling());t.parent()}}}function f(t){let e=t.type.prop(l);for(;e&&e.context&&!t.matchContext(e.context);)e=e.next;return e||null}const p=s.define,m=p(),g=p(),v=p(g),w=p(g),y=p(),b=p(y),S=p(y),x=p(),C=p(x),E=p(),k=p(),A=p(),T=p(A),M=p(),N={comment:m,lineComment:p(m),blockComment:p(m),docComment:p(m),name:g,variableName:p(g),typeName:v,tagName:p(v),propertyName:w,attributeName:p(w),className:p(g),labelName:p(g),namespace:p(g),macroName:p(g),literal:y,string:b,docString:p(b),character:p(b),attributeValue:p(b),number:S,integer:p(S),float:p(S),bool:p(y),regexp:p(y),escape:p(y),color:p(y),url:p(y),keyword:E,self:p(E),null:p(E),atom:p(E),unit:p(E),modifier:p(E),operatorKeyword:p(E),controlKeyword:p(E),definitionKeyword:p(E),moduleKeyword:p(E),operator:k,derefOperator:p(k),arithmeticOperator:p(k),logicOperator:p(k),bitwiseOperator:p(k),compareOperator:p(k),updateOperator:p(k),definitionOperator:p(k),typeOperator:p(k),controlOperator:p(k),punctuation:A,separator:p(A),bracket:T,angleBracket:p(T),squareBracket:p(T),paren:p(T),brace:p(T),content:x,heading:C,heading1:p(C),heading2:p(C),heading3:p(C),heading4:p(C),heading5:p(C),heading6:p(C),contentSeparator:p(x),list:p(x),quote:p(x),emphasis:p(x),strong:p(x),link:p(x),monospace:p(x),strikethrough:p(x),inserted:p(),deleted:p(),changed:p(),invalid:p(),meta:M,documentMeta:p(M),annotation:p(M),processingInstruction:p(M),definition:s.defineModifier(),constant:s.defineModifier(),function:s.defineModifier(),standard:s.defineModifier(),local:s.defineModifier(),special:s.defineModifier()},P=c([{tag:N.link,class:"tok-link"},{tag:N.heading,class:"tok-heading"},{tag:N.emphasis,class:"tok-emphasis"},{tag:N.strong,class:"tok-strong"},{tag:N.keyword,class:"tok-keyword"},{tag:N.atom,class:"tok-atom"},{tag:N.bool,class:"tok-bool"},{tag:N.url,class:"tok-url"},{tag:N.labelName,class:"tok-labelName"},{tag:N.inserted,class:"tok-inserted"},{tag:N.deleted,class:"tok-deleted"},{tag:N.literal,class:"tok-literal"},{tag:N.string,class:"tok-string"},{tag:N.number,class:"tok-number"},{tag:[N.regexp,N.escape,N.special(N.string)],class:"tok-string2"},{tag:N.variableName,class:"tok-variableName"},{tag:N.local(N.variableName),class:"tok-variableName tok-local"},{tag:N.definition(N.variableName),class:"tok-variableName tok-definition"},{tag:N.special(N.variableName),class:"tok-variableName2"},{tag:N.definition(N.propertyName),class:"tok-propertyName tok-definition"},{tag:N.typeName,class:"tok-typeName"},{tag:N.namespace,class:"tok-namespace"},{tag:N.className,class:"tok-className"},{tag:N.macroName,class:"tok-macroName"},{tag:N.propertyName,class:"tok-propertyName"},{tag:N.operator,class:"tok-operator"},{tag:N.comment,class:"tok-comment"},{tag:N.meta,class:"tok-meta"},{tag:N.invalid,class:"tok-invalid"},{tag:N.punctuation,class:"tok-punctuation"}]);e.Tag=s,e.classHighlighter=P,e.getStyleTags=f,e.highlightCode=function(t,e,i,n,r,s=0,o=t.length){let a=s;function l(e,i){if(!(e<=a)){for(let s=t.slice(a,e),o=0;;){let t=s.indexOf("\n",o),e=t<0?s.length:t;if(e>o&&n(s.slice(o,e),i),t<0)break;r(),o=t+1}a=e}}u(e,i,((t,e,i)=>{l(t,""),l(e,i)}),s,o),l(o,"")},e.highlightTree=u,e.styleTags=function(t){let e=Object.create(null);for(let i in t){let n=t[i];Array.isArray(n)||(n=[n]);for(let t of i.split(" "))if(t){let i=[],r=2,s=t;for(let e=0;;){if("..."==s&&e>0&&e+3==t.length){r=1;break}let n=/^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(s);if(!n)throw new RangeError("Invalid path: "+t);if(i.push("*"==n[0]?"":'"'==n[0][0]?JSON.parse(n[0]):n[0]),e+=n[0].length,e==t.length)break;let o=t[e++];if(e==t.length&&"!"==o){r=0;break}if("/"!=o)throw new RangeError("Invalid path: "+t);s=t.slice(e)}let o=i.length-1,a=i[o];if(!a)throw new RangeError("Invalid path: "+t);let l=new h(n,r,o>0?i.slice(0,o):null);e[a]=l.sort(e[a])}}return l.add(e)},e.tagHighlighter=c,e.tags=N},8748:t=>{"use strict";function e(t,i){if("string"==typeof i)t.appendChild(document.createTextNode(i));else if(null==i);else if(null!=i.nodeType)t.appendChild(i);else{if(!Array.isArray(i))throw new RangeError("Unsupported child node: "+i);for(var n=0;n<i.length;n++)e(t,i[n])}}t.exports=function(){var t=arguments[0];"string"==typeof t&&(t=document.createElement(t));var i=1,n=arguments[1];if(n&&"object"==typeof n&&null==n.nodeType&&!Array.isArray(n)){for(var r in n)if(Object.prototype.hasOwnProperty.call(n,r)){var s=n[r];"string"==typeof s?t.setAttribute(r,s):null!=s&&(t[r]=s)}i++}for(;i<arguments.length;i++)e(t,arguments[i]);return t}},9172:(t,e)=>{var i="undefined"==typeof Symbol?"__ͼ":Symbol.for("ͼ"),n="undefined"==typeof Symbol?"__styleSet"+Math.floor(1e8*Math.random()):Symbol("styleSet"),r="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:{},s=e.StyleModule=function(t,e){this.rules=[];var i=(e||{}).finish;function n(t){return/^@/.test(t)?[t]:t.split(/,\s*/)}function r(t,e,s,o){var a=[],l=/^@(\w+)\b/.exec(t[0]),h=l&&"keyframes"==l[1];if(l&&null==e)return s.push(t[0]+";");for(var c in e){var u=e[c];if(/&/.test(c))r(c.split(/,\s*/).map((function(e){return t.map((function(t){return e.replace(/&/,t)}))})).reduce((function(t,e){return t.concat(e)})),u,s);else if(u&&"object"==typeof u){if(!l)throw new RangeError("The value of a property ("+c+") should be a primitive value.");r(n(c),u,a,h)}else null!=u&&a.push(c.replace(/_.*/,"").replace(/[A-Z]/g,(function(t){return"-"+t.toLowerCase()}))+": "+u+";")}(a.length||h)&&s.push((!i||l||o?t:t.map(i)).join(", ")+" {"+a.join(" ")+"}")}for(var s in t)r(n(s),t[s],this.rules)};s.prototype.getRules=function(){return this.rules.join("\n")},s.newName=function(){var t=r[i]||1;return r[i]=t+1,"ͼ"+t.toString(36)},s.mount=function(t,e,i){var r=t[n],s=i&&i.nonce;r?s&&r.setNonce(s):r=new a(t,s),r.mount(Array.isArray(e)?e:[e],t)};var o=new Map,a=function(t,e){var i=t.ownerDocument||t,r=i.defaultView;if(!t.head&&t.adoptedStyleSheets&&r.CSSStyleSheet){var s=o.get(i);if(s)return t[n]=s;this.sheet=new r.CSSStyleSheet,o.set(i,this)}else this.styleTag=i.createElement("style"),e&&this.styleTag.setAttribute("nonce",e);this.modules=[],t[n]=this};a.prototype.mount=function(t,e){for(var i=this.sheet,n=0,r=0,s=0;s<t.length;s++){var o=t[s],a=this.modules.indexOf(o);if(a<r&&a>-1&&(this.modules.splice(a,1),r--,a=-1),-1==a){if(this.modules.splice(r++,0,o),i)for(var l=0;l<o.rules.length;l++)i.insertRule(o.rules[l],n++)}else{for(;r<a;)n+=this.modules[r++].rules.length;n+=o.rules.length,r++}}if(i)e.adoptedStyleSheets.indexOf(this.sheet)<0&&(e.adoptedStyleSheets=[this.sheet].concat(e.adoptedStyleSheets));else{for(var h="",c=0;c<this.modules.length;c++)h+=this.modules[c].getRules()+"\n";this.styleTag.textContent=h;var u=e.head||e;this.styleTag.parentNode!=u&&u.insertBefore(this.styleTag,u.firstChild)}},a.prototype.setNonce=function(t){this.styleTag&&this.styleTag.getAttribute("nonce")!=t&&this.styleTag.setAttribute("nonce",t)}},6237:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});for(var i={8:"Backspace",9:"Tab",10:"Enter",12:"NumLock",13:"Enter",16:"Shift",17:"Control",18:"Alt",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",44:"PrintScreen",45:"Insert",46:"Delete",59:";",61:"=",91:"Meta",92:"Meta",106:"*",107:"+",108:",",109:"-",110:".",111:"/",144:"NumLock",145:"ScrollLock",160:"Shift",161:"Shift",162:"Control",163:"Control",164:"Alt",165:"Alt",173:"-",186:";",187:"=",188:",",189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'"},n={48:")",49:"!",50:"@",51:"#",52:"$",53:"%",54:"^",55:"&",56:"*",57:"(",59:":",61:"+",173:"_",186:":",187:"+",188:"<",189:"_",190:">",191:"?",192:"~",219:"{",220:"|",221:"}",222:'"'},r="undefined"!=typeof navigator&&/Mac/.test(navigator.platform),s="undefined"!=typeof navigator&&/MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent),o=0;o<10;o++)i[48+o]=i[96+o]=String(o);for(o=1;o<=24;o++)i[o+111]="F"+o;for(o=65;o<=90;o++)i[o]=String.fromCharCode(o+32),n[o]=String.fromCharCode(o);for(var a in i)n.hasOwnProperty(a)||(n[a]=i[a]);e.base=i,e.keyName=function(t){var e=!(r&&t.metaKey&&t.shiftKey&&!t.ctrlKey&&!t.altKey||s&&t.shiftKey&&t.key&&1==t.key.length||"Unidentified"==t.key)&&t.key||(t.shiftKey?n:i)[t.keyCode]||t.key||"Unidentified";return"Esc"==e&&(e="Escape"),"Del"==e&&(e="Delete"),"Left"==e&&(e="ArrowLeft"),"Up"==e&&(e="ArrowUp"),"Right"==e&&(e="ArrowRight"),"Down"==e&&(e="ArrowDown"),e},e.shift=n}},e={},function i(n){var r=e[n];if(void 0!==r)return r.exports;var s=e[n]={exports:{}};return t[n].call(s.exports,s,s.exports,i),s.exports}(7729);var t,e}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LGNBQVNMLEVBQVcsRUFBQTBILFNBQVMzSCxRQUFRLFdBQWF3SixZQUFZWSxjQUFhYyxHQUFRLElBQUcxQixTQUFTLFdBQ3BHcEssS0FBS2tCLGNBQVNMLEVBQVcsRUFBQTBILFNBQVMzSCxRQUFRLFlBQWF3SixZQUFZWSxjQUFhYyxHQUFRLElBQUcxQixTQUFTLFlBQ3BHcEssS0FBS2tCLGNBQVNMLEVBQVcsRUFBQTBILFNBQVMzSCxRQUFRLFNBQWF3SixZQUFZWSxjQUFhYyxHQUFRLElBQUcxQixTQUFTLFNBQ3BHcEssS0FBS2tCLGNBQVNMLEVBQVcsRUFBQTBILFNBQVMzSCxRQUFRLFNBQWF3SixZQUFZWSxjQUFhYyxHQUFRLElBQUcxQixTQUFTLFNBQ3BHcEssS0FBS2tCLGNBQVNMLEVBQVcsRUFBQTBILFNBQVMzSCxRQUFRLE9BQWF3SixZQUFZWSxjQUFhYyxHQUFRLElBQUcxQixTQUFTLE9BQ3BHcEssS0FBS2tCLGNBQVNMLEVBQVcsRUFBQTBILFNBQVMzSCxRQUFRLFFBQWF3SixZQUFZWSxjQUFhYyxHQUFRLElBQUcxQixTQUFTLFFBQ3BHcEssS0FBS2tCLGNBQVNMLEVBQVcsRUFBQTBILFNBQVMzSCxRQUFRLFFBQWF3SixZQUFZWSxjQUFhYyxHQUFRLElBQUcxQixTQUFTLFFBQ3BHcEssS0FBS2tCLGNBQVNMLEVBQVcsRUFBQTBILFNBQVMzSCxRQUFRLFVBQWF3SixZQUFZWSxjQUFhYyxHQUFRLElBQUcxQixTQUFTLFVBQ3BHcEssS0FBS2tCLGNBQVNMLEVBQVcsRUFBQTBILFNBQVMzSCxRQUFRLGFBQWF3SixZQUFZWSxjQUFhYyxHQUFRLElBQUcxQixTQUFTLGFBQ3BHcEssS0FBS2tCLGNBQVNMLEVBQVcsRUFBQTBILFNBQVMzSCxRQUFRLFdBQWF3SixZQUFZWSxjQUFhYyxHQUFRLElBQUcxQixTQUFTLFdBQ3BHcEssS0FBS2tCLGNBQVNMLEVBQVcsRUFBQTBILFNBQVMzSCxRQUFRLFlBQWF3SixZQUFZWSxjQUFhYyxHQUFPLEtBQUkxQixTQUFTLFlBQ3BHcEssS0FBS2tCLGNBQVNMLEVB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QVduYSxFQUFNOFosZUFBZW1pQixLQUFPajhCLEVBQU1pOEIsR0FBUTloQixFQUFLOGhCLElBc0IzRWx0RSxFQUFRb3JELEtBQU9BLEVBQ2ZwckQsRUFBUXNrSCxRQXJCUixTQUFpQnhzRixHQUdmLElBR0lqMEIsSUFIWXM1QyxHQUFPcmxCLEVBQU1qRSxTQUFXaUUsRUFBTUUsV0FBYUYsRUFBTW5FLFVBQVltRSxFQUFNaEUsUUFDL0VvNUQsR0FBTXAxRCxFQUFNRSxVQUFZRixFQUFNajJCLEtBQTJCLEdBQXBCaTJCLEVBQU1qMkIsSUFBSWYsUUFDbEMsZ0JBQWJnM0IsRUFBTWoyQixNQUNnQmkyQixFQUFNajJCLE1BQzdCaTJCLEVBQU1FLFNBQVdpWixFQUFRbWEsR0FBTXR6QixFQUFNNHdDLFVBQ3RDNXdDLEVBQU1qMkIsS0FBTyxlQVNmLE1BUFksT0FBUmdDLElBQWVBLEVBQU8sVUFDZCxPQUFSQSxJQUFlQSxFQUFPLFVBRWQsUUFBUkEsSUFBZ0JBLEVBQU8sYUFDZixNQUFSQSxJQUFjQSxFQUFPLFdBQ2IsU0FBUkEsSUFBaUJBLEVBQU8sY0FDaEIsUUFBUkEsSUFBZ0JBLEVBQU8sYUFDcEJBLENBQ1QsRUFJQTdELEVBQVFpeEMsTUFBUUEsQyxHQzdIWm16RixFQUEyQixDQUFDLEVBR2hDLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUJyakksSUFBakJzakksRUFDSCxPQUFPQSxFQUFhdmtJLFFBR3JCLElBQUlDLEVBQVNta0ksRUFBeUJFLEdBQVksQ0FHakR0a0ksUUFBUyxDQUFDLEdBT1gsT0FIQXdrSSxFQUFvQkYsR0FBVTd4RyxLQUFLeHlCLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNxa0ksR0FHcEVwa0ksRUFBT0QsT0FDZixDQ25CMEJxa0ksQ0FBb0IsTSxNREYxQ0QsQyIsInNvdXJjZXMiOlsid2VicGFjazovL25sU2NyaXB0L3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9ubFNjcmlwdC8uL3NyYy9BdXRvY29tcGxldGVyLnRzIiwid2VicGFjazovL25sU2NyaXB0Ly4vc3JjL0V2YWx1YXRvci50cyIsIndlYnBhY2s6Ly9ubFNjcmlwdC8uL3NyYy9QYXJzZUV4Y2VwdGlvbi50cyIsIndlYnBhY2s6Ly9ubFNjcmlwdC8uL3NyYy9QYXJzZWROb2RlLnRzIiwid2VicGFjazovL25sU2NyaXB0Ly4vc3JjL1BhcnNlci50cyIsIndlYnBhY2s6Ly9ubFNjcmlwdC8uL3NyYy9jb3JlL0F1dG9jb21wbGV0aW9uLnRzIiwid2VicGFjazovL25sU2NyaXB0Ly4vc3JjL2NvcmUvQk5GLnRzIiwid2VicGFjazovL25sU2NyaXB0Ly4vc3JjL2NvcmUvRGVmYXVsdFBhcnNlZE5vZGUudHMiLCJ3ZWJwYWNrOi8vbmxTY3JpcHQvLi9zcmMvY29yZS9MZXhlci50cyIsIndlYnBhY2s6Ly9ubFNjcmlwdC8uL3NyYy9jb3JlL01hdGNoZXIudHMiLCJ3ZWJwYWNrOi8vbmxTY3JpcHQvLi9zcmMvY29yZS9OYW1lZC50cyIsIndlYnBhY2s6Ly9ubFNjcmlwdC8uL3NyYy9jb3JlL05vblRlcm1pbmFsLnRzIiwid2VicGFjazovL25sU2NyaXB0Ly4vc3JjL2NvcmUvUGFyc2VkTm9kZUZhY3RvcnkudHMiLCJ3ZWJwYWNrOi8vbmxTY3JpcHQvLi9zcmMvY29yZS9QYXJzaW5nU3RhdGUudHMiLCJ3ZWJwYWNrOi8vbmxTY3JpcHQvLi9zcmMvY29yZS9Qcm9kdWN0aW9uLnRzIiwid2VicGFjazovL25sU2NyaXB0Ly4vc3JjL2NvcmUvUkRQYXJzZXIudHMiLCJ3ZWJwYWNrOi8vbmxTY3JpcHQvLi9zcmMvY29yZS9TeW1ib2wudHMiLCJ3ZWJwYWNrOi8vbmxTY3JpcHQvLi9zcmMvY29yZS9UZXJtaW5hbC50cyIsIndlYnBhY2s6Ly9ubFNjcmlwdC8uL3NyYy9jb3JlL2luZGV4LnRzIiwid2VicGFjazovL25sU2NyaXB0Ly4vc3JjL2VibmYvRUJORi50cyIsIndlYnBhY2s6Ly9ubFNjcmlwdC8uL3NyYy9lYm5mL0VCTkZDb3JlLnRzIiwid2VicGFjazovL25sU2NyaXB0Ly4vc3JjL2VibmYvRUJORlBhcnNlZE5vZGVGYWN0b3J5LnRzIiwid2VicGFjazovL25sU2NyaXB0Ly4vc3JjL2VibmYvRUJORlBhcnNlci50cyIsIndlYnBhY2s6Ly9ubFNjcmlwdC8uL3NyYy9lYm5mL0VCTkZQcm9kdWN0aW9uLnRzIiwid2VicGFjazovL25sU2NyaXB0Ly4vc3JjL2VibmYvSm9pbi50cyIsIndlYnBhY2s6Ly9ubFNjcmlwdC8uL3NyYy9lYm5mL05hbWVkUnVsZS50cyIsIndlYnBhY2s6Ly9ubFNjcmlwdC8uL3NyYy9lYm5mL09wdGlvbmFsLnRzIiwid2VicGFjazovL25sU2NyaXB0Ly4vc3JjL2VibmYvT3IudHMiLCJ3ZWJwYWNrOi8vbmxTY3JpcHQvLi9zcmMvZWJuZi9QbHVzLnRzIiwid2VicGFjazovL25sU2NyaXB0Ly4vc3JjL2VibmYvUmVwZWF0LnRzIiwid2VicGFjazovL25sU2NyaXB0Ly4vc3JjL2VibmYvUnVsZS50cyIsIndlYnBhY2s6Ly9ubFNjcmlwdC8uL3NyYy9lYm5mL1NlcXVlbmNlLnRzIiwid2VicGFjazovL25sU2NyaXB0Ly4vc3JjL2VibmYvU3Rhci50cyIsIndlYnBhY2s6Ly9ubFNjcmlwdC8uL3NyYy9lYm5mL2luZGV4LnRzIiwid2VicGFjazovL25sU2NyaXB0Ly4vc3JjL2luZGV4LnRzIiwid2VicGFjazovL25sU2NyaXB0Ly4vc3JjL21pY3Jvc2NvcGUvSW50ZXJwb2xhdG9yLnRzIiwid2VicGFjazovL25sU2NyaXB0Ly4vc3JjL21pY3Jvc2NvcGUvTGFuZ3VhZ2VDb250cm9sLnRzIiwid2VicGFjazovL25sU2NyaXB0Ly4vc3JjL21pY3Jvc2NvcGUvTWljcm9zY29wZS50cyIsIndlYnBhY2s6Ly9ubFNjcmlwdC8uL3NyYy9taWNyb3Njb3BlL1RpbWVsaW5lLnRzIiwid2VicGFjazovL25sU2NyaXB0Ly4vc3JjL21pY3Jvc2NvcGUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vbmxTY3JpcHQvLi9zcmMvdWkvQUNDb21wbGV0ZXIudHMiLCJ3ZWJwYWNrOi8vbmxTY3JpcHQvLi9zcmMvdWkvQUNFZGl0b3IudHMiLCJ3ZWJwYWNrOi8vbmxTY3JpcHQvLi9zcmMvdWkvRXJyb3JIaWdobGlnaHQudHMiLCJ3ZWJwYWNrOi8vbmxTY3JpcHQvLi9zcmMvdWkvUGFyYW1ldGVyaXplZENvbXBsZXRpb24udHMiLCJ3ZWJwYWNrOi8vbmxTY3JpcHQvLi9zcmMvdWkvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vbmxTY3JpcHQvLi9zcmMvdXRpbC9JbnRSYW5nZS50cyIsIndlYnBhY2s6Ly9ubFNjcmlwdC8uL3NyYy91dGlsL2luZGV4LnRzIiwid2VicGFjazovL25sU2NyaXB0Ly4vbm9kZV9tb2R1bGVzL0Bjb2RlbWlycm9yL2F1dG9jb21wbGV0ZS9kaXN0L2luZGV4LmNqcyIsIndlYnBhY2s6Ly9ubFNjcmlwdC8uL25vZGVfbW9kdWxlcy9AY29kZW1pcnJvci9jb21tYW5kcy9kaXN0L2luZGV4LmNqcyIsIndlYnBhY2s6Ly9ubFNjcmlwdC8uL25vZGVfbW9kdWxlcy9AY29kZW1pcnJvci9sYW5ndWFnZS9kaXN0L2luZGV4LmNqcyIsIndlYnBhY2s6Ly9ubFNjcmlwdC8uL25vZGVfbW9kdWxlcy9AY29kZW1pcnJvci9saW50L2Rpc3QvaW5kZXguY2pzIiwid2VicGFjazovL25sU2NyaXB0Ly4vbm9kZV9tb2R1bGVzL0Bjb2RlbWlycm9yL3NlYXJjaC9kaXN0L2luZGV4LmNqcyIsIndlYnBhY2s6Ly9ubFNjcmlwdC8uL25vZGVfbW9kdWxlcy9AY29kZW1pcnJvci9zdGF0ZS9kaXN0L2luZGV4LmNqcyIsIndlYnBhY2s6Ly9ubFNjcmlwdC8uL25vZGVfbW9kdWxlcy9AY29kZW1pcnJvci92aWV3L2Rpc3QvaW5kZXguY2pzIiwid2VicGFjazovL25sU2NyaXB0Ly4vbm9kZV9tb2R1bGVzL0BsZXplci9jb21tb24vZGlzdC9pbmRleC5janMiLCJ3ZWJwYWNrOi8vbmxTY3JpcHQvLi9ub2RlX21vZHVsZXMvQGxlemVyL2hpZ2hsaWdodC9kaXN0L2luZGV4LmNqcyIsIndlYnBhY2s6Ly9ubFNjcmlwdC8uL25vZGVfbW9kdWxlcy9jcmVsdC9kaXN0L2luZGV4LmNqcyIsIndlYnBhY2s6Ly9ubFNjcmlwdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1tb2QvZGlzdC9zdHlsZS1tb2QuY2pzIiwid2VicGFjazovL25sU2NyaXB0Ly4vbm9kZV9tb2R1bGVzL3czYy1rZXluYW1lL2luZGV4LmNqcyIsIndlYnBhY2s6Ly9ubFNjcmlwdC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9ubFNjcmlwdC93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wibmxTY3JpcHRcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wibmxTY3JpcHRcIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCAoKSA9PiB7XG5yZXR1cm4gIiwiaW1wb3J0IHsgUGFyc2VkTm9kZSB9IGZyb20gXCIuL1BhcnNlZE5vZGUuanNcIjtcclxuaW1wb3J0IHsgRGVmYXVsdFBhcnNlZE5vZGUgfSBmcm9tIFwiLi9jb3JlL0RlZmF1bHRQYXJzZWROb2RlLmpzXCI7XHJcbmltcG9ydCB7IEF1dG9jb21wbGV0aW9uIH0gZnJvbSBcIi4vY29yZS9BdXRvY29tcGxldGlvbi5qc1wiO1xyXG5pbXBvcnQgeyBCTkYgfSBmcm9tIFwiLi9jb3JlL0JORi5qc1wiO1xyXG5pbXBvcnQgeyBMZXhlciB9IGZyb20gXCIuL2NvcmUvTGV4ZXIuanNcIjtcclxuaW1wb3J0IHsgUHJvZHVjdGlvbiB9IGZyb20gXCIuL2NvcmUvUHJvZHVjdGlvbi5qc1wiO1xyXG5pbXBvcnQgeyBSRFBhcnNlciB9IGZyb20gXCIuL2NvcmUvUkRQYXJzZXIuanNcIjtcclxuaW1wb3J0IHsgU3ltIH0gZnJvbSBcIi4vY29yZS9TeW1ib2wuanNcIjtcclxuaW1wb3J0IHsgRUJORkNvcmUgfSBmcm9tIFwiLi9lYm5mL0VCTkZDb3JlLmpzXCI7XHJcbmltcG9ydCB7IEVCTkZQYXJzZWROb2RlRmFjdG9yeSB9IGZyb20gXCIuL2VibmYvRUJORlBhcnNlZE5vZGVGYWN0b3J5LmpzXCI7XHJcbmltcG9ydCB7IFJ1bGUgfSBmcm9tIFwiLi9lYm5mL1J1bGUuanNcIjtcclxuaW1wb3J0IHsgU2VxdWVuY2UgfSBmcm9tIFwiLi9lYm5mL1NlcXVlbmNlLmpzXCI7XHJcblxyXG50eXBlIEdldEF1dG9jb21wbGV0aW9uRnVuY3Rpb24gPSAobjogRGVmYXVsdFBhcnNlZE5vZGUsIGp1c3RDaGVjazogYm9vbGVhbikgPT4gQXV0b2NvbXBsZXRpb25bXSB8IHVuZGVmaW5lZDtcclxuXHJcbmludGVyZmFjZSBBdXRvY29tcGxldGVyIHtcclxuICAgIGdldEF1dG9jb21wbGV0aW9uKG46IERlZmF1bHRQYXJzZWROb2RlLCBqdXN0Q2hlY2s6IGJvb2xlYW4pOiBBdXRvY29tcGxldGlvbltdIHwgdW5kZWZpbmVkO1xyXG59XHJcblxyXG5jbGFzcyBJZk5vdGhpbmdZZXRFbnRlcmVkQXV0b2NvbXBsZXRlciBpbXBsZW1lbnRzIEF1dG9jb21wbGV0ZXIge1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBpZk5vdGhpbmdZZXRFbnRlcmVkOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IG90aGVyd2lzZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGlmTm90aGluZ1lldEVudGVyZWQ6IHN0cmluZywgb3RoZXJ3aXNlOiBzdHJpbmcgfCB1bmRlZmluZWQpIHtcclxuICAgICAgICB0aGlzLmlmTm90aGluZ1lldEVudGVyZWQgPSBpZk5vdGhpbmdZZXRFbnRlcmVkO1xyXG4gICAgICAgIHRoaXMub3RoZXJ3aXNlID0gb3RoZXJ3aXNlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEF1dG9jb21wbGV0aW9uKHBuOiBEZWZhdWx0UGFyc2VkTm9kZSwgX2p1c3RDaGVjazogYm9vbGVhbik6IEF1dG9jb21wbGV0aW9uW10gfCB1bmRlZmluZWQge1xyXG4gICAgICAgIGlmKHBuLmdldFBhcnNlZFN0cmluZygpLmxlbmd0aCA9PT0gMClcclxuICAgICAgICAgICAgcmV0dXJuIEF1dG9jb21wbGV0aW9uLmxpdGVyYWwocG4sIFt0aGlzLmlmTm90aGluZ1lldEVudGVyZWRdKTtcclxuXHJcbiAgICAgICAgaWYodGhpcy5vdGhlcndpc2UgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgcmV0dXJuIEF1dG9jb21wbGV0aW9uLmxpdGVyYWwocG4sIFt0aGlzLm90aGVyd2lzZV0pO1xyXG5cclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBFbnRpcmVTZXF1ZW5jZUNvbXBsZXRlciBpbXBsZW1lbnRzIEF1dG9jb21wbGV0ZXIge1xyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZWJuZjogRUJORkNvcmU7XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBzeW1ib2wyQXV0b2NvbXBsZXRpb246IE1hcDxzdHJpbmcsIEF1dG9jb21wbGV0aW9uW10+O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGVibmY6IEVCTkZDb3JlLCBzeW1ib2wyQXV0b2NvbXBsZXRpb246IE1hcDxzdHJpbmcsIEF1dG9jb21wbGV0aW9uW10+KSB7XHJcbiAgICAgICAgdGhpcy5lYm5mID0gZWJuZjtcclxuICAgICAgICB0aGlzLnN5bWJvbDJBdXRvY29tcGxldGlvbiA9IHN5bWJvbDJBdXRvY29tcGxldGlvbjtcclxuICAgIH1cclxuXHJcbiAgICBnZXRBdXRvY29tcGxldGlvbihwbjogRGVmYXVsdFBhcnNlZE5vZGUsIF9qdXN0Q2hlY2s6IGJvb2xlYW4pOiBBdXRvY29tcGxldGlvbltdIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICBjb25zdCBhbHJlYWR5RW50ZXJlZDogc3RyaW5nID0gcG4uZ2V0UGFyc2VkU3RyaW5nKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHNlcXVlbmNlOiBSdWxlID0gKHBuIGFzIFBhcnNlZE5vZGUpLmdldFJ1bGUoKSBhcyBSdWxlO1xyXG4gICAgICAgIGNvbnN0IGNoaWxkcmVuOiBTeW1bXSA9IHNlcXVlbmNlLmdldENoaWxkcmVuKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGVudGlyZVNlcXVlbmNlQ29tcGxldGlvbiA9IG5ldyBBdXRvY29tcGxldGlvbi5FbnRpcmVTZXF1ZW5jZShwbik7XHJcblxyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQga2V5ID0gY2hpbGRyZW5baV0uZ2V0U3ltYm9sKCkgKyBcIjpcIiArIHNlcXVlbmNlLmdldE5hbWVGb3JDaGlsZChpKTtcclxuICAgICAgICAgICAgbGV0IGF1dG9jb21wbGV0aW9uc0ZvckNoaWxkOiBBdXRvY29tcGxldGlvbltdIHwgdW5kZWZpbmVkID0gdGhpcy5zeW1ib2wyQXV0b2NvbXBsZXRpb24uZ2V0KGtleSk7XHJcbiAgICAgICAgICAgIGlmKGF1dG9jb21wbGV0aW9uc0ZvckNoaWxkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGVudGlyZVNlcXVlbmNlQ29tcGxldGlvbi5hZGQoYXV0b2NvbXBsZXRpb25zRm9yQ2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgYm5mOiBCTkYgPSBuZXcgQk5GKHRoaXMuZWJuZi5nZXRCTkYoKSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBuZXdTZXF1ZW5jZTogU2VxdWVuY2UgPSBuZXcgU2VxdWVuY2UodW5kZWZpbmVkLCBjaGlsZHJlbltpXSk7XHJcbiAgICAgICAgICAgIG5ld1NlcXVlbmNlLnNldFBhcnNlZENoaWxkTmFtZXMoc2VxdWVuY2UuZ2V0TmFtZUZvckNoaWxkKGkpKTtcclxuICAgICAgICAgICAgbmV3U2VxdWVuY2UuY3JlYXRlQk5GKGJuZik7XHJcblxyXG4gICAgICAgICAgICBibmYucmVtb3ZlU3RhcnRQcm9kdWN0aW9uKCk7XHJcbiAgICAgICAgICAgIGJuZi5hZGRQcm9kdWN0aW9uKG5ldyBQcm9kdWN0aW9uKEJORi5BUlRJRklDSUFMX1NUQVJUX1NZTUJPTCwgbmV3U2VxdWVuY2UuZ2V0VGFyZ2V0KCkpKTtcclxuICAgICAgICAgICAgY29uc3QgcGFyc2VyOiBSRFBhcnNlciA9IG5ldyBSRFBhcnNlcihibmYsIG5ldyBMZXhlcihcIlwiKSwgRUJORlBhcnNlZE5vZGVGYWN0b3J5LklOU1RBTkNFKTtcclxuXHJcbiAgICAgICAgICAgIGF1dG9jb21wbGV0aW9uc0ZvckNoaWxkID0gW107XHJcbiAgICAgICAgICAgIHBhcnNlci5wYXJzZShhdXRvY29tcGxldGlvbnNGb3JDaGlsZCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnN5bWJvbDJBdXRvY29tcGxldGlvbi5zZXQoa2V5LCBhdXRvY29tcGxldGlvbnNGb3JDaGlsZCk7XHJcbiAgICAgICAgICAgIGVudGlyZVNlcXVlbmNlQ29tcGxldGlvbi5hZGQoYXV0b2NvbXBsZXRpb25zRm9yQ2hpbGQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBhdm9pZCB0byBjYWxsIGdldENvbXBsZXRpb24oKSBtb3JlIG9mdGVuIHRoYW4gbmVjZXNzYXJ5XHJcbiAgICAgICAgaWYoYWxyZWFkeUVudGVyZWQubGVuZ3RoID09PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gZW50aXJlU2VxdWVuY2VDb21wbGV0aW9uLmFzQXJyYXkoKTtcclxuXHJcbiAgICAgICAgY29uc3QgaWR4OiBudW1iZXIgPSBlbnRpcmVTZXF1ZW5jZUNvbXBsZXRpb24uZ2V0Q29tcGxldGlvbihBdXRvY29tcGxldGlvbi5QdXJwb3NlLkZPUl9JTlNFUlRJT04pLmluZGV4T2YoXCIke1wiKTtcclxuIFx0XHRcdFxyXG4gICAgICAgIGlmKGlkeCAhPT0gdW5kZWZpbmVkICYmIGlkeCA+PSAwICYmIGFscmVhZHlFbnRlcmVkLmxlbmd0aCA+IGlkeClcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICByZXR1cm4gZW50aXJlU2VxdWVuY2VDb21wbGV0aW9uLmFzQXJyYXkoKTtcclxuICAgIH1cclxufVxyXG5cclxubW9kdWxlIEF1dG9jb21wbGV0ZXIge1xyXG4gICAgZXhwb3J0IGNvbnN0IERFRkFVTFRfSU5MSU5FX0FVVE9DT01QTEVURVI6IEF1dG9jb21wbGV0ZXIgPSB7XHJcbiAgICAgICAgZ2V0QXV0b2NvbXBsZXRpb24ocG46IFBhcnNlZE5vZGUsIF9qdXN0Q2hlY2s6IGJvb2xlYW4pOiBBdXRvY29tcGxldGlvbltdIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICAgICAgbGV0IGFscmVhZHlFbnRlcmVkID0gcG4uZ2V0UGFyc2VkU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIGlmKGFscmVhZHlFbnRlcmVkLmxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQXV0b2NvbXBsZXRpb24udmV0byhwbik7XHJcbiAgICAgICAgICAgIGxldCBuYW1lID0gcG4uZ2V0TmFtZSgpO1xyXG4gICAgICAgICAgICBpZihuYW1lID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICBuYW1lID0gcG4uZ2V0U3ltYm9sKCkuZ2V0U3ltYm9sKCk7XHJcbiAgICAgICAgICAgIGlmKG5hbWUgPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIHJldHVybiBBdXRvY29tcGxldGlvbi5wYXJhbWV0ZXJpemVkKHBuLCBuYW1lKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgeyBHZXRBdXRvY29tcGxldGlvbkZ1bmN0aW9uLCBBdXRvY29tcGxldGVyLCBFbnRpcmVTZXF1ZW5jZUNvbXBsZXRlciwgSWZOb3RoaW5nWWV0RW50ZXJlZEF1dG9jb21wbGV0ZXIgfTtcclxuIiwiaW1wb3J0IHsgUGFyc2VkTm9kZSB9IGZyb20gXCIuL1BhcnNlZE5vZGUuanNcIjtcclxuaW1wb3J0IHsgRGVmYXVsdFBhcnNlZE5vZGUgfSBmcm9tIFwiLi9jb3JlL0RlZmF1bHRQYXJzZWROb2RlLmpzXCI7XHJcblxyXG5leHBvcnQgdHlwZSBFdmFsdWF0ZUZ1bmN0aW9uID0gKHBuOiBQYXJzZWROb2RlKSA9PiBhbnk7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEV2YWx1YXRvciB7XHJcbiAgICBldmFsdWF0ZShuOiBQYXJzZWROb2RlKTogYW55O1xyXG59XHJcblxyXG5leHBvcnQgbW9kdWxlIEV2YWx1YXRvciB7XHJcbiAgICBleHBvcnQgY29uc3QgRklSU1RfQ0hJTERfRVZBTFVBVE9SOiBFdmFsdWF0b3IgPSB7XHJcbiAgICAgICAgZXZhbHVhdGU6IChwbjogUGFyc2VkTm9kZSk6IGFueSA9PiBwbi5ldmFsdWF0ZSgwKVxyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnQgY29uc3QgQUxMX0NISUxEUkVOX0VWQUxVQVRPUjogRXZhbHVhdG9yID0ge1xyXG4gICAgICAgIGV2YWx1YXRlOiAocG46IFBhcnNlZE5vZGUpOiBhbnkgPT4ge1xyXG4gICAgICAgICAgICBpZihwbi5nZXRDaGlsZHJlbigpLmxlbmd0aCA9PT0gMClcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICAgICAgcmV0dXJuIHBuLmdldENoaWxkcmVuKCkubWFwKChwOiBEZWZhdWx0UGFyc2VkTm9kZSk6IGFueSA9PiBwLmV2YWx1YXRlKCkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0IGNvbnN0IERFRkFVTFRfRVZBTFVBVE9SOiBFdmFsdWF0b3IgPSB7XHJcbiAgICAgICAgZXZhbHVhdGU6IChwbjogUGFyc2VkTm9kZSk6IGFueSA9PiBwbi5nZXRQYXJzZWRTdHJpbmcoKVxyXG4gICAgfTtcclxufVxyXG4iLCJpbXBvcnQgeyBBdXRvY29tcGxldGlvbiB9IGZyb20gXCIuL2NvcmUvQXV0b2NvbXBsZXRpb24uanNcIjtcclxuaW1wb3J0IHsgQk5GIH0gZnJvbSBcIi4vY29yZS9CTkYuanNcIjtcclxuaW1wb3J0IHsgRGVmYXVsdFBhcnNlZE5vZGUgfSBmcm9tIFwiLi9jb3JlL0RlZmF1bHRQYXJzZWROb2RlLmpzXCI7XHJcbmltcG9ydCB7IExleGVyIH0gZnJvbSBcIi4vY29yZS9MZXhlci5qc1wiO1xyXG5pbXBvcnQgeyBSRFBhcnNlciB9IGZyb20gXCIuL2NvcmUvUkRQYXJzZXIuanNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQYXJzZUV4Y2VwdGlvbiBleHRlbmRzIEVycm9yIHtcclxuXHJcblx0cHJpdmF0ZSByZWFkb25seSByb290OiBEZWZhdWx0UGFyc2VkTm9kZTtcclxuXHJcblx0cHJpdmF0ZSByZWFkb25seSBmYWlsZWRUZXJtaW5hbDogRGVmYXVsdFBhcnNlZE5vZGU7XHJcblxyXG5cdHByaXZhdGUgcmVhZG9ubHkgcGFyc2VyOiBSRFBhcnNlcjtcclxuXHJcblx0cHJpdmF0ZSByZWFkb25seSBmaXJzdEF1dG9jb21wbGV0aW5nQW5jZXN0b3JUaGF0RmFpbGVkOiBEZWZhdWx0UGFyc2VkTm9kZTtcclxuXHJcblx0Y29uc3RydWN0b3Iocm9vdDogRGVmYXVsdFBhcnNlZE5vZGUsIGZhaWxlZFRlcm1pbmFsOiBEZWZhdWx0UGFyc2VkTm9kZSwgcGFyc2VyOiBSRFBhcnNlcikge1xyXG5cdFx0c3VwZXIoKTtcclxuXHRcdHRoaXMucm9vdCA9IHJvb3Q7XHJcblx0XHR0aGlzLmZhaWxlZFRlcm1pbmFsID0gZmFpbGVkVGVybWluYWw7XHJcblx0XHR0aGlzLnBhcnNlciA9IHBhcnNlcjtcclxuXHJcblx0XHRsZXQgdG1wOiBEZWZhdWx0UGFyc2VkTm9kZSA9IGZhaWxlZFRlcm1pbmFsO1xyXG5cdFx0d2hpbGUodG1wICE9IG51bGwgJiYgIXRtcC5kb2VzQXV0b2NvbXBsZXRlKCkpXHJcblx0XHRcdHRtcCA9IHRtcC5nZXRQYXJlbnQoKSBhcyBEZWZhdWx0UGFyc2VkTm9kZTtcclxuXHRcdHRoaXMuZmlyc3RBdXRvY29tcGxldGluZ0FuY2VzdG9yVGhhdEZhaWxlZCA9IHRtcDtcclxuXHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gdGhpcy5nZXRFcnJvcigpO1xyXG5cdH1cclxuXHJcblx0Z2V0Um9vdCgpOiBEZWZhdWx0UGFyc2VkTm9kZSB7XHJcblx0XHRyZXR1cm4gdGhpcy5yb290O1xyXG5cdH1cclxuXHJcblx0Z2V0RmFpbGVkVGVybWluYWwoKTogRGVmYXVsdFBhcnNlZE5vZGUge1xyXG5cdFx0cmV0dXJuIHRoaXMuZmFpbGVkVGVybWluYWw7XHJcblx0fVxyXG5cclxuXHRnZXRGaXJzdEF1dG9jb21wbGV0aW5nQW5jZXN0b3JUaGF0RmFpbGVkKCk6IERlZmF1bHRQYXJzZWROb2RlIHtcclxuXHRcdHJldHVybiB0aGlzLmZpcnN0QXV0b2NvbXBsZXRpbmdBbmNlc3RvclRoYXRGYWlsZWQ7XHJcblx0fVxyXG5cclxuXHRnZXRFcnJvcigpOiBzdHJpbmcge1xyXG5cdFx0Y29uc3QgbGV4ZXI6IExleGVyID0gdGhpcy5wYXJzZXIuZ2V0TGV4ZXIoKTtcclxuXHRcdGNvbnN0IGdyYW1tYXI6IEJORiA9IHRoaXMucGFyc2VyLmdldEdyYW1tYXIoKTtcclxuXHJcblx0XHRjb25zdCBlcnJvclBvczogbnVtYmVyID0gdGhpcy5mYWlsZWRUZXJtaW5hbC5nZXRNYXRjaGVyKCkucG9zICsgdGhpcy5mYWlsZWRUZXJtaW5hbC5nZXRNYXRjaGVyKCkucGFyc2VkLmxlbmd0aCAtIDE7XHJcblxyXG5cdFx0Ly8gdGhlIGNoYXJhY3RlciBhdCBsYXN0Lm1hdGNoZXIucG9zIGZhaWxlZCwgZXZlcnl0aGluZyBiZWZvcmUgbXVzdCBoYXZlIGJlZW4gd29ya2luZ1xyXG5cdFx0Y29uc3Qgd29ya2luZ1RleHQ6IHN0cmluZyA9IGxleGVyLnN1YnN0cmluZygwLCB0aGlzLmZhaWxlZFRlcm1pbmFsLmdldE1hdGNoZXIoKS5wb3MpO1xyXG5cdFx0Ly8gY3JlYXRlIGEgbmV3IHBhcnNlciBhbmQgY29sbGVjdCB0aGUgYXV0b2NvbXBsZXRpb25zXHJcblx0XHRjb25zdCB3b3JraW5nTGV4ZXI6IExleGVyID0gbmV3IExleGVyKHdvcmtpbmdUZXh0KTtcclxuXHRcdGNvbnN0IHBhcnNlcjI6IFJEUGFyc2VyID0gbmV3IFJEUGFyc2VyKGdyYW1tYXIsIHdvcmtpbmdMZXhlciwgdGhpcy5wYXJzZXIuZ2V0UGFyc2VkTm9kZUZhY3RvcnkoKSk7XHJcblx0XHRjb25zdCBleHBlY3RhdGlvbnM6IEF1dG9jb21wbGV0aW9uW10gPSBbXTtcclxuXHRcdHRyeSB7XHJcblx0XHRcdHBhcnNlcjIucGFyc2UoZXhwZWN0YXRpb25zKTtcclxuXHRcdH0gY2F0Y2ggKGU6IGFueSkge1xyXG5cdFx0XHRyZXR1cm4gXCJFcnJvciBhdCBwb3NpdGlvbiBcIiArIGVycm9yUG9zO1xyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IGxpbmVzOiBzdHJpbmdbXSA9IGxleGVyLnN1YnN0cmluZygwLCBlcnJvclBvcyArIDEpLnNwbGl0KC9cXHI/XFxufFxcci8pO1xyXG5cdFx0Y29uc3QgZXJyb3JMaW5lOiBudW1iZXIgPSBsaW5lcy5sZW5ndGggLSAxO1xyXG5cdFx0Y29uc3QgZXJyb3JQb3NJbkxhc3RMaW5lOiBudW1iZXIgPSBsaW5lc1tlcnJvckxpbmVdLmxlbmd0aCAtIDE7XHJcblxyXG5cdFx0bGV0IGVycm9yTWVzc2FnZTogc3RyaW5nID0gXCJcIjtcclxuXHRcdGNvbnN0IG5sOiBzdHJpbmcgPSBcIlxcblwiO1xyXG4gICAgICAgIGVycm9yTWVzc2FnZSArPSBcIkVycm9yIGF0IHBvc2l0aW9uIFwiICsgZXJyb3JQb3MgKyBcIiBpbiBsaW5lIFwiICsgZXJyb3JMaW5lICsgXCI6XCIgKyBubDtcclxuICAgICAgICBlcnJvck1lc3NhZ2UgKz0gbGluZXNbZXJyb3JMaW5lXSArIG5sO1xyXG5cdFx0Zm9yKGxldCBpID0gMDsgaSA8IGVycm9yUG9zSW5MYXN0TGluZTsgaSsrKVxyXG5cdFx0XHRlcnJvck1lc3NhZ2UgKz0gXCIgXCI7XHJcblx0XHRlcnJvck1lc3NhZ2UgKz0gXCJeXCIgKyBubDtcclxuXHJcbiAgICAgICAgY29uc3QgZXhTdHJpbmc6IHN0cmluZ1tdID0gZXhwZWN0YXRpb25zLm1hcChhYyA9PiBhYy5nZXRDb21wbGV0aW9uKEF1dG9jb21wbGV0aW9uLlB1cnBvc2UuRk9SX0lOU0VSVElPTikpXHJcblxyXG5cdFx0ZXJyb3JNZXNzYWdlICs9IFwiRXhwZWN0ZWQgXCIgKyBleFN0cmluZy50b1N0cmluZygpO1xyXG5cclxuXHRcdHJldHVybiBlcnJvck1lc3NhZ2U7XHJcblx0fVxyXG59XHJcbiIsImltcG9ydCB7IEF1dG9jb21wbGV0aW9uIH0gZnJvbSBcIi4vY29yZS9BdXRvY29tcGxldGlvbi5qc1wiO1xyXG5pbXBvcnQgeyBEZWZhdWx0UGFyc2VkTm9kZSB9IGZyb20gXCIuL2NvcmUvRGVmYXVsdFBhcnNlZE5vZGUuanNcIjtcclxuaW1wb3J0IHsgTWF0Y2hlciB9IGZyb20gXCIuL2NvcmUvTWF0Y2hlci5qc1wiO1xyXG5pbXBvcnQgeyBQYXJzaW5nU3RhdGUgfSBmcm9tIFwiLi9jb3JlL1BhcnNpbmdTdGF0ZS5qc1wiO1xyXG5pbXBvcnQgeyBQcm9kdWN0aW9uIH0gZnJvbSBcIi4vY29yZS9Qcm9kdWN0aW9uLmpzXCI7XHJcbmltcG9ydCB7IFN5bSB9IGZyb20gXCIuL2NvcmUvU3ltYm9sLmpzXCI7XHJcbmltcG9ydCB7IEVCTkZQcm9kdWN0aW9uIH0gZnJvbSBcIi4vZWJuZi9FQk5GUHJvZHVjdGlvbi5qc1wiO1xyXG5pbXBvcnQgeyBQYXJzZUxpc3RlbmVyIH0gZnJvbSBcIi4vZWJuZi9QYXJzZUxpc3RlbmVyLmpzXCI7XHJcbmltcG9ydCB7IFJ1bGUgfSBmcm9tIFwiLi9lYm5mL1J1bGUuanNcIjtcclxuXHJcbmNsYXNzIFBhcnNlZE5vZGUgZXh0ZW5kcyBEZWZhdWx0UGFyc2VkTm9kZSB7XHJcbiAgICBcclxuICAgIHByaXZhdGUgbnRoRW50cnlJblBhcmVudDogbnVtYmVyID0gMDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihtYXRjaGVyOiBNYXRjaGVyLCBzeW1ib2w6IFN5bSwgcHJvZHVjdGlvbjogUHJvZHVjdGlvbikge1xyXG4gICAgICAgIHN1cGVyKG1hdGNoZXIsIHN5bWJvbCwgcHJvZHVjdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0TnRoRW50cnlJblBhcmVudChudGhFbnRyeTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5udGhFbnRyeUluUGFyZW50ID0gbnRoRW50cnk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TnRoRW50cnlJblBhcmVudCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm50aEVudHJ5SW5QYXJlbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UnVsZSgpOiBSdWxlIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICBsZXQgcHJvZHVjdGlvbjogUHJvZHVjdGlvbiB8IHVuZGVmaW5lZCA9IHRoaXMuZ2V0UHJvZHVjdGlvbigpO1xyXG4gICAgICAgIGlmKHByb2R1Y3Rpb24gIT09IHVuZGVmaW5lZCAmJiBwcm9kdWN0aW9uIGluc3RhbmNlb2YgRUJORlByb2R1Y3Rpb24pXHJcbiAgICAgICAgICAgIHJldHVybiAocHJvZHVjdGlvbiBhcyBFQk5GUHJvZHVjdGlvbikuZ2V0UnVsZSgpO1xyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBwYXJlbnRIYXNTYW1lUnVsZSgpOiBib29sZWFuIHtcclxuICAgICAgICBsZXQgdGhpc1J1bGU6IFJ1bGUgfCB1bmRlZmluZWQgPSB0aGlzLmdldFJ1bGUoKTtcclxuICAgICAgICBpZih0aGlzUnVsZSA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IHBhcmVudDogRGVmYXVsdFBhcnNlZE5vZGUgfCB1bmRlZmluZWQgPSB0aGlzLmdldFBhcmVudCgpO1xyXG4gICAgICAgIGlmKHBhcmVudCA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IHBhcmVudFJ1bGU6IFJ1bGUgfCB1bmRlZmluZWQgPSAocGFyZW50IGFzIFBhcnNlZE5vZGUpLmdldFJ1bGUoKTtcclxuICAgICAgICBpZihwYXJlbnRSdWxlID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gdGhpc1J1bGUgPT09IHBhcmVudFJ1bGU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QXV0b2NvbXBsZXRpb24oanVzdENoZWNrOiBib29sZWFuKTogQXV0b2NvbXBsZXRpb25bXSB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgbGV0IHJ1bGU6IFJ1bGUgfCB1bmRlZmluZWQgPSB0aGlzLmdldFJ1bGUoKTtcclxuICAgICAgICBpZihydWxlICE9PSB1bmRlZmluZWQgJiYgcnVsZS5nZXRBdXRvY29tcGxldGVyKCkgIT09IHVuZGVmaW5lZCAmJiAhdGhpcy5wYXJlbnRIYXNTYW1lUnVsZSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBydWxlLmdldEF1dG9jb21wbGV0ZXIoKT8uZ2V0QXV0b2NvbXBsZXRpb24odGhpcywganVzdENoZWNrKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHN1cGVyLmdldEF1dG9jb21wbGV0aW9uKGp1c3RDaGVjayk7XHJcbiAgICB9XHJcblxyXG4gICAgbm90aWZ5TGlzdGVuZXJzKCk6IHZvaWQge1xyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLm51bUNoaWxkcmVuKCk7IGkrKylcclxuICAgICAgICAgICAgKHRoaXMuZ2V0Q2hpbGQoaSkgYXMgUGFyc2VkTm9kZSkubm90aWZ5TGlzdGVuZXJzKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHN0YXRlOiBQYXJzaW5nU3RhdGUgPSB0aGlzLmdldE1hdGNoZXIoKS5zdGF0ZTtcclxuICAgICAgICBpZighc3RhdGUuZXF1YWxzKFBhcnNpbmdTdGF0ZS5TVUNDRVNTRlVMKSAmJiAhc3RhdGUuZXF1YWxzKFBhcnNpbmdTdGF0ZS5FTkRfT0ZfSU5QVVQpKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgIGxldCBydWxlOiBSdWxlIHwgdW5kZWZpbmVkID0gdGhpcy5nZXRSdWxlKCk7XHJcbiAgICAgICAgaWYocnVsZSAhPT0gdW5kZWZpbmVkICYmICF0aGlzLnBhcmVudEhhc1NhbWVSdWxlKCkpIHtcclxuICAgICAgICAgICAgbGV0IHBhcnNlTGlzdGVuZXI6IFBhcnNlTGlzdGVuZXIgfCB1bmRlZmluZWQgPSBydWxlLmdldE9uU3VjY2Vzc2Z1bFBhcnNlZCgpO1xyXG4gICAgICAgICAgICBpZihwYXJzZUxpc3RlbmVyICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICBwYXJzZUxpc3RlbmVyKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvdmVycmlkZSBldmFsdWF0ZSguLi5uOiBhbnkpOiBhbnkge1xyXG4gICAgICAgIGlmKG4ubGVuZ3RoID4gMClcclxuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLmV2YWx1YXRlKC4uLm4pO1xyXG5cclxuICAgICAgICBsZXQgcnVsZTogUnVsZSB8IHVuZGVmaW5lZCA9IHRoaXMuZ2V0UnVsZSgpO1xyXG4gICAgICAgIGlmKHJ1bGUgIT09IHVuZGVmaW5lZCAmJiBydWxlLmdldEV2YWx1YXRvcigpICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHJldHVybiBydWxlLmdldEV2YWx1YXRvcigpLmV2YWx1YXRlKHRoaXMpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBzdXBlci5ldmFsdWF0ZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBQYXJzZWROb2RlIH07XHJcbiIsImltcG9ydCB7IFBhcnNlZE5vZGUgfSBmcm9tIFwiLi9QYXJzZWROb2RlLmpzXCI7XHJcbmltcG9ydCB7IEF1dG9jb21wbGV0ZXIsIEVudGlyZVNlcXVlbmNlQ29tcGxldGVyLCBHZXRBdXRvY29tcGxldGlvbkZ1bmN0aW9uIH0gZnJvbSBcIi4vQXV0b2NvbXBsZXRlci5qc1wiO1xyXG5pbXBvcnQgeyBBdXRvY29tcGxldGlvbiB9IGZyb20gXCIuL2NvcmUvQXV0b2NvbXBsZXRpb24uanNcIjtcclxuaW1wb3J0IHsgTmFtZWQgfSBmcm9tIFwiLi9jb3JlL05hbWVkLmpzXCI7XHJcbmltcG9ydCB7IERlZmF1bHRQYXJzZWROb2RlIH0gZnJvbSBcIi4vY29yZS9EZWZhdWx0UGFyc2VkTm9kZS5qc1wiO1xyXG5pbXBvcnQgeyBMZXhlciB9IGZyb20gXCIuL2NvcmUvTGV4ZXIuanNcIjtcclxuaW1wb3J0IHsgTm9uVGVybWluYWwgfSBmcm9tIFwiLi9jb3JlL05vblRlcm1pbmFsLmpzXCI7XHJcbmltcG9ydCB7IFBhcnNpbmdTdGF0ZSB9IGZyb20gXCIuL2NvcmUvUGFyc2luZ1N0YXRlLmpzXCI7XHJcbmltcG9ydCB7IFJEUGFyc2VyIH0gZnJvbSBcIi4vY29yZS9SRFBhcnNlci5qc1wiO1xyXG5pbXBvcnQgeyBTeW0gfSBmcm9tIFwiLi9jb3JlL1N5bWJvbC5qc1wiO1xyXG5pbXBvcnQgeyBUZXJtaW5hbCB9IGZyb20gXCIuL2NvcmUvVGVybWluYWwuanNcIjtcclxuaW1wb3J0IHsgRUJORiB9IGZyb20gXCIuL2VibmYvRUJORi5qc1wiO1xyXG5pbXBvcnQgeyBFQk5GUGFyc2VkTm9kZUZhY3RvcnkgfSBmcm9tIFwiLi9lYm5mL0VCTkZQYXJzZWROb2RlRmFjdG9yeS5qc1wiO1xyXG5pbXBvcnQgeyBFQk5GUGFyc2VyLCBQYXJzZVN0YXJ0TGlzdGVuZXIgfSBmcm9tIFwiLi9lYm5mL0VCTkZQYXJzZXIuanNcIjtcclxuaW1wb3J0IHsgTmFtZWRSdWxlIH0gZnJvbSBcIi4vZWJuZi9OYW1lZFJ1bGUuanNcIjtcclxuaW1wb3J0IHsgUnVsZSB9IGZyb20gXCIuL2VibmYvUnVsZS5qc1wiO1xyXG5pbXBvcnQgeyBFdmFsdWF0b3IsIEV2YWx1YXRlRnVuY3Rpb24gfSBmcm9tIFwiLi9FdmFsdWF0b3IuanNcIjtcclxuaW1wb3J0IHsgSW50UmFuZ2UgfSBmcm9tIFwiLi91dGlsL0ludFJhbmdlLmpzXCI7XHJcbmltcG9ydCB7IEJORiB9IGZyb20gXCIuL2NvcmUvQk5GLmpzXCI7XHJcbmltcG9ydCB7IEpvaW4gfSBmcm9tIFwiLi9lYm5mL0pvaW4uanNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQYXJzZXIge1xyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZ3JhbW1hcjogRUJORiA9IG5ldyBFQk5GKCk7XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBMSU5FQlJFQUsgPSBUZXJtaW5hbC5saXRlcmFsKFwiXFxuXCIpO1xyXG5cclxuICAgIHJlYWRvbmx5IFFVQU5USUZJRVIgICAgIDogUnVsZTtcclxuICAgIHJlYWRvbmx5IElERU5USUZJRVIgICAgIDogUnVsZTtcclxuXHRyZWFkb25seSBWQVJJQUJMRV9OQU1FICA6IFJ1bGU7XHJcblx0cmVhZG9ubHkgRU5UUllfTkFNRSAgICAgOiBSdWxlO1xyXG5cdHJlYWRvbmx5IExJU1QgICAgICAgICAgIDogUnVsZTtcclxuXHRyZWFkb25seSBUVVBMRSAgICAgICAgICA6IFJ1bGU7XHJcblx0cmVhZG9ubHkgQ0hBUkFDVEVSX0NMQVNTOiBSdWxlO1xyXG5cdHJlYWRvbmx5IFRZUEUgICAgICAgICAgIDogUnVsZTtcclxuXHRyZWFkb25seSBWQVJJQUJMRSAgICAgICA6IFJ1bGU7XHJcblx0cmVhZG9ubHkgTk9fVkFSSUFCTEUgICAgOiBSdWxlO1xyXG5cdHJlYWRvbmx5IEVYUFJFU1NJT04gICAgIDogUnVsZTtcclxuXHJcblx0cHJpdmF0ZSByZWFkb25seSBMSU5FQlJFQUtfU1RBUjogUnVsZTtcclxuXHJcblx0cHJpdmF0ZSByZWFkb25seSB0YXJnZXRHcmFtbWFyOiBFQk5GID0gbmV3IEVCTkYoKTtcclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHN5bWJvbDJBdXRvY29tcGxldGlvbjogTWFwPHN0cmluZywgQXV0b2NvbXBsZXRpb25bXT4gPSBuZXcgTWFwPHN0cmluZywgQXV0b2NvbXBsZXRpb25bXT4oKTtcclxuXHJcbiAgICBwcml2YXRlIGNvbXBpbGVkOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5RVUFOVElGSUVSICAgICAgPSB0aGlzLnF1YW50aWZpZXIoKTtcclxuXHRcdHRoaXMuSURFTlRJRklFUiAgICAgID0gdGhpcy5pZGVudGlmaWVyKFwiaWRlbnRpZmllclwiKTtcclxuXHRcdHRoaXMuVkFSSUFCTEVfTkFNRSAgID0gdGhpcy52YXJpYWJsZU5hbWUoKTtcclxuXHRcdHRoaXMuRU5UUllfTkFNRSAgICAgID0gdGhpcy5lbnRyeU5hbWUoKTtcclxuXHRcdHRoaXMuTElTVCAgICAgICAgICAgID0gdGhpcy5saXN0KCk7XHJcblx0XHR0aGlzLlRVUExFICAgICAgICAgICA9IHRoaXMudHVwbGUoKTtcclxuXHRcdHRoaXMuQ0hBUkFDVEVSX0NMQVNTID0gdGhpcy5jaGFyYWN0ZXJDbGFzcygpO1xyXG5cdFx0dGhpcy5UWVBFICAgICAgICAgICAgPSB0aGlzLnR5cGUoKTtcclxuXHRcdHRoaXMuVkFSSUFCTEUgICAgICAgID0gdGhpcy52YXJpYWJsZSgpO1xyXG5cdFx0dGhpcy5OT19WQVJJQUJMRSAgICAgPSB0aGlzLm5vVmFyaWFibGUoKTtcclxuXHRcdHRoaXMuRVhQUkVTU0lPTiAgICAgID0gdGhpcy5leHByZXNzaW9uKCk7XHJcblxyXG5cdFx0dGhpcy5MSU5FQlJFQUtfU1RBUiA9IHRoaXMudGFyZ2V0R3JhbW1hci5zdGFyKFwibGluZWJyZWFrLXN0YXJcIiwgdGhpcy5MSU5FQlJFQUsud2l0aE5hbWUoKSk7XHJcblx0XHR0aGlzLnByb2dyYW0oKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRHcmFtbWFyKCk6IEVCTkYge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdyYW1tYXI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VGFyZ2V0R3JhbW1hcigpOiBFQk5GIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50YXJnZXRHcmFtbWFyO1xyXG4gICAgfVxyXG5cclxuICAgIGRlZmluZVNlbnRlbmNlKHBhdHRlcm46IHN0cmluZywgZXZhbHVhdG9yOiBFdmFsdWF0b3IgfCBFdmFsdWF0ZUZ1bmN0aW9uIHwgdW5kZWZpbmVkKTogTmFtZWRSdWxlO1xyXG4gICAgZGVmaW5lU2VudGVuY2UocGF0dGVybjogc3RyaW5nLCBldmFsdWF0b3I6IEV2YWx1YXRvciB8IEV2YWx1YXRlRnVuY3Rpb24gfCB1bmRlZmluZWQsIGF1dG9jb21wbGV0ZXI6IEF1dG9jb21wbGV0ZXIgfCBHZXRBdXRvY29tcGxldGlvbkZ1bmN0aW9uKTogTmFtZWRSdWxlO1xyXG4gICAgZGVmaW5lU2VudGVuY2UocGF0dGVybjogc3RyaW5nLCBldmFsdWF0b3I6IEV2YWx1YXRvciB8IEV2YWx1YXRlRnVuY3Rpb24gfCB1bmRlZmluZWQsIGNvbXBsZXRlRW50aXJlU2VxdWVuY2U6IGJvb2xlYW4pOiBOYW1lZFJ1bGU7XHJcblxyXG4gICAgZGVmaW5lU2VudGVuY2UocGF0dGVybjogc3RyaW5nLCBldmFsdWF0b3I6IEV2YWx1YXRvciB8IEV2YWx1YXRlRnVuY3Rpb24gfCB1bmRlZmluZWQsIGhvd1RvQ29tcGxldGU/OiBBdXRvY29tcGxldGVyIHwgR2V0QXV0b2NvbXBsZXRpb25GdW5jdGlvbiB8IGJvb2xlYW4pOiBOYW1lZFJ1bGUge1xyXG4gICAgICAgIGxldCBhdXRvY29tcGxldGVyOiBBdXRvY29tcGxldGVyIHwgR2V0QXV0b2NvbXBsZXRpb25GdW5jdGlvbiB8IHVuZGVmaW5lZDtcclxuICAgICAgICBpZihob3dUb0NvbXBsZXRlID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIGF1dG9jb21wbGV0ZXIgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgZWxzZSBpZih0eXBlb2YgaG93VG9Db21wbGV0ZSA9PT0gJ2Jvb2xlYW4nKVxyXG4gICAgICAgICAgICBhdXRvY29tcGxldGVyID0gaG93VG9Db21wbGV0ZVxyXG4gICAgICAgICAgICAgICAgPyBuZXcgRW50aXJlU2VxdWVuY2VDb21wbGV0ZXIodGhpcy50YXJnZXRHcmFtbWFyLCB0aGlzLnN5bWJvbDJBdXRvY29tcGxldGlvbilcclxuICAgICAgICAgICAgICAgIDogQXV0b2NvbXBsZXRlci5ERUZBVUxUX0lOTElORV9BVVRPQ09NUExFVEVSO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgYXV0b2NvbXBsZXRlciA9IGhvd1RvQ29tcGxldGU7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVmaW5lVHlwZShcInNlbnRlbmNlXCIsIHBhdHRlcm4sIGV2YWx1YXRvciwgYXV0b2NvbXBsZXRlcik7XHJcbiAgICB9XHJcblxyXG4gICAgZGVmaW5lVHlwZSh0eXBlOiBzdHJpbmcsIHBhdHRlcm46IHN0cmluZywgZXZhbHVhdG9yOiBFdmFsdWF0b3IgfCBFdmFsdWF0ZUZ1bmN0aW9uIHwgdW5kZWZpbmVkKTogTmFtZWRSdWxlO1xyXG4gICAgZGVmaW5lVHlwZSh0eXBlOiBzdHJpbmcsIHBhdHRlcm46IHN0cmluZywgZXZhbHVhdG9yOiBFdmFsdWF0b3IgfCBFdmFsdWF0ZUZ1bmN0aW9uIHwgdW5kZWZpbmVkLCBhdXRvY29tcGxldGVyOiBBdXRvY29tcGxldGVyIHwgR2V0QXV0b2NvbXBsZXRpb25GdW5jdGlvbiB8IHVuZGVmaW5lZCk6IE5hbWVkUnVsZTtcclxuICAgIGRlZmluZVR5cGUodHlwZTogc3RyaW5nLCBwYXR0ZXJuOiBzdHJpbmcsIGV2YWx1YXRvcjogRXZhbHVhdG9yIHwgRXZhbHVhdGVGdW5jdGlvbiB8IHVuZGVmaW5lZCwgY29tcGxldGVFbnRpcmVTZXF1ZW5jZTogYm9vbGVhbik6IE5hbWVkUnVsZTtcclxuXHJcbiAgICBkZWZpbmVUeXBlKHR5cGU6IHN0cmluZywgcGF0dGVybjogc3RyaW5nLCBldmFsdWF0b3I6IEV2YWx1YXRvciB8IEV2YWx1YXRlRnVuY3Rpb24gfCB1bmRlZmluZWQsIGhvd1RvQ29tcGxldGU/OiBBdXRvY29tcGxldGVyIHwgR2V0QXV0b2NvbXBsZXRpb25GdW5jdGlvbiB8IGJvb2xlYW4pOiBOYW1lZFJ1bGUge1xyXG4gICAgICAgIGxldCBhdXRvY29tcGxldGVyOiBBdXRvY29tcGxldGVyIHwgR2V0QXV0b2NvbXBsZXRpb25GdW5jdGlvbiB8IHVuZGVmaW5lZDtcclxuICAgICAgICBpZihob3dUb0NvbXBsZXRlID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIGF1dG9jb21wbGV0ZXIgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgZWxzZSBpZih0eXBlb2YgaG93VG9Db21wbGV0ZSA9PT0gJ2Jvb2xlYW4nKVxyXG4gICAgICAgICAgICBhdXRvY29tcGxldGVyID0gaG93VG9Db21wbGV0ZVxyXG4gICAgICAgICAgICAgICAgPyBuZXcgRW50aXJlU2VxdWVuY2VDb21wbGV0ZXIodGhpcy50YXJnZXRHcmFtbWFyLCB0aGlzLnN5bWJvbDJBdXRvY29tcGxldGlvbilcclxuICAgICAgICAgICAgICAgIDogQXV0b2NvbXBsZXRlci5ERUZBVUxUX0lOTElORV9BVVRPQ09NUExFVEVSO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgYXV0b2NvbXBsZXRlciA9IGhvd1RvQ29tcGxldGU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5ncmFtbWFyLmNvbXBpbGUodGhpcy5FWFBSRVNTSU9OLmdldFRhcmdldCgpKTtcclxuICAgICAgICBjb25zdCBwYXJzZXI6IFJEUGFyc2VyID0gbmV3IFJEUGFyc2VyKHRoaXMuZ3JhbW1hci5nZXRCTkYoKSwgbmV3IExleGVyKHBhdHRlcm4pLCBFQk5GUGFyc2VkTm9kZUZhY3RvcnkuSU5TVEFOQ0UpO1xyXG4gICAgICAgIGxldCBwbjogRGVmYXVsdFBhcnNlZE5vZGUgPSBwYXJzZXIucGFyc2UoKTtcclxuICAgICAgICBpZighcG4uZ2V0TWF0Y2hlcigpLnN0YXRlLmVxdWFscyhQYXJzaW5nU3RhdGUuU1VDQ0VTU0ZVTCkpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBhcnNpbmcgZmFpbGVkXCIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHJoczogTmFtZWQ8YW55PltdID0gcG4uZXZhbHVhdGUoKTtcclxuXHJcbiAgICAgICAgY29uc3QgbmV3UnVsZTogUnVsZSA9IHRoaXMudGFyZ2V0R3JhbW1hci5zZXF1ZW5jZSh0eXBlLCAuLi5yaHMpO1xyXG4gICAgICAgIGlmKGV2YWx1YXRvciAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICBuZXdSdWxlLnNldEV2YWx1YXRvcihldmFsdWF0b3IpO1xyXG4gICAgICAgIGlmKGF1dG9jb21wbGV0ZXIgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgbmV3UnVsZS5zZXRBdXRvY29tcGxldGVyKGF1dG9jb21wbGV0ZXIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBuZXdSdWxlLndpdGhOYW1lKHR5cGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbXBpbGUoc3ltYm9sPzogU3ltKTogdm9pZCB7XHJcbiAgICAgICAgaWYoc3ltYm9sID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHN5bWJvbCA9IHRoaXMudGFyZ2V0R3JhbW1hci5nZXRTeW1ib2woXCJwcm9ncmFtXCIpO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0R3JhbW1hci5jb21waWxlKHN5bWJvbCBhcyBTeW0pO1xyXG4gICAgICAgIHRoaXMuY29tcGlsZWQgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuXHR1bmRlZmluZVR5cGUodHlwZTogc3RyaW5nKSB7XHJcblx0XHRjb25zdCB1bml0c1N5bWJvbDogTm9uVGVybWluYWwgPSB0aGlzLnRhcmdldEdyYW1tYXIuZ2V0U3ltYm9sKHR5cGUpIGFzIE5vblRlcm1pbmFsO1xyXG5cdFx0dGhpcy50YXJnZXRHcmFtbWFyLnJlbW92ZVJ1bGVzKHVuaXRzU3ltYm9sKTtcclxuXHRcdHRoaXMuY29tcGlsZWQgPSBmYWxzZTtcclxuXHR9XHJcblxyXG4gICAgcGFyc2UodGV4dDogc3RyaW5nLCBhdXRvY29tcGxldGlvbnM/OiBBdXRvY29tcGxldGlvbltdKTogUGFyc2VkTm9kZSB7XHJcbiAgICAgICAgaWYoIXRoaXMuY29tcGlsZWQpXHJcbiAgICAgICAgICAgIHRoaXMuY29tcGlsZSgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuc3ltYm9sMkF1dG9jb21wbGV0aW9uLmNsZWFyKCk7XHJcblx0XHRjb25zdCBncmFtbWFyOiBCTkYgPSB0aGlzLnRhcmdldEdyYW1tYXIuZ2V0Qk5GKCk7XHJcbiAgICAgICAgY29uc3QgcmRQYXJzZXI6IEVCTkZQYXJzZXIgPSBuZXcgRUJORlBhcnNlcihncmFtbWFyLCBuZXcgTGV4ZXIodGV4dCkpO1xyXG4gICAgICAgIHJkUGFyc2VyLmFkZFBhcnNlU3RhcnRMaXN0ZW5lcigoKSA9PiB0aGlzLmZpcmVQYXJzaW5nU3RhcnRlZCgpKTtcclxuICAgICAgICByZXR1cm4gcmRQYXJzZXIucGFyc2UoYXV0b2NvbXBsZXRpb25zKSBhcyBQYXJzZWROb2RlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcXVhbnRpZmllcigpOiBSdWxlIHtcclxuICAgICAgICBjb25zdCBnOiBFQk5GID0gdGhpcy5ncmFtbWFyO1xyXG4gICAgICAgIHJldHVybiBnLm9yKFwicXVhbnRpZmllclwiLFxyXG4gICAgICAgICAgICBnLnNlcXVlbmNlKHVuZGVmaW5lZCwgVGVybWluYWwubGl0ZXJhbChcIj9cIikud2l0aE5hbWUoKSkuICAgICAgIHNldEV2YWx1YXRvcihfcG4gPT4gSW50UmFuZ2UuT1BUSU9OQUwpLiAgICAgICAgICAgd2l0aE5hbWUoXCJvcHRpb25hbFwiKSxcclxuICAgICAgICAgICAgZy5zZXF1ZW5jZSh1bmRlZmluZWQsIFRlcm1pbmFsLmxpdGVyYWwoXCIrXCIpLndpdGhOYW1lKCkpLiAgICAgICBzZXRFdmFsdWF0b3IoX3BuID0+IEludFJhbmdlLlBMVVMpLiAgICAgICAgICAgICAgIHdpdGhOYW1lKFwicGx1c1wiKSxcclxuICAgICAgICAgICAgZy5zZXF1ZW5jZSh1bmRlZmluZWQsIFRlcm1pbmFsLmxpdGVyYWwoXCIqXCIpLndpdGhOYW1lKCkpLiAgICAgICBzZXRFdmFsdWF0b3IoX3BuID0+IEludFJhbmdlLlNUQVIpLiAgICAgICAgICAgICAgIHdpdGhOYW1lKFwic3RhclwiKSxcclxuICAgICAgICAgICAgZy5zZXF1ZW5jZSh1bmRlZmluZWQsICAgICAgIGcuSU5URUdFUl9SQU5HRS53aXRoTmFtZShcInJhbmdlXCIpKS5zZXRFdmFsdWF0b3IoIHBuID0+IHBuLmV2YWx1YXRlKDApKS4gICAgICAgICAgICAgIHdpdGhOYW1lKFwicmFuZ2VcIiksXHJcbiAgICAgICAgICAgIGcuc2VxdWVuY2UodW5kZWZpbmVkLCAgICAgICAgICAgICBnLklOVEVHRVIud2l0aE5hbWUoXCJpbnRcIikpLiAgc2V0RXZhbHVhdG9yKCBwbiA9PiBuZXcgSW50UmFuZ2UocG4uZXZhbHVhdGUoMCkpKS53aXRoTmFtZShcImZpeGVkXCIpKVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG5cdCAqIFtBLVphLXpfXSAoW0EtWmEtejAtOS1fXSogW0EtWmEtejAtOV9dKT9cclxuXHQgKlxyXG5cdCAqIFN0YXJ0OiAgbGV0dGVyIG9yIHVuZGVyc2NvcmVcclxuXHQgKiBNaWRkbGU6IGxldHRlciBvciB1bmRlcnNjb3JlIG9yIGRhc2ggb3IgZGlnaXRcclxuXHQgKiBFbmQ6ICAgIGxldHRlciBvciB1bmRlcnNjb3JlIG9yIGRpZ2l0XHJcblx0ICpcclxuXHQgKi9cclxuICAgIHByaXZhdGUgaWRlbnRpZmllcihuYW1lOiBzdHJpbmcpOiBSdWxlIHtcclxuICAgICAgICBpZihuYW1lID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIG5hbWUgPSBcImlkZW50aWZpZXJcIjtcclxuICAgICAgICBjb25zdCBnOiBFQk5GID0gdGhpcy5ncmFtbWFyO1xyXG4gICAgICAgIHJldHVybiBnLnNlcXVlbmNlKG5hbWUsXHJcbiAgICAgICAgICAgIFRlcm1pbmFsLmNoYXJhY3RlckNsYXNzKFwiW0EtWmEtel9dXCIpLndpdGhOYW1lKCksXHJcbiAgICAgICAgICAgIGcub3B0aW9uYWwodW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgZy5zZXF1ZW5jZSh1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgZy5zdGFyKHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgVGVybWluYWwuY2hhcmFjdGVyQ2xhc3MoXCJbQS1aYS16MC05Xy1dXCIpLndpdGhOYW1lKClcclxuICAgICAgICAgICAgICAgICAgICApLndpdGhOYW1lKFwic3RhclwiKSxcclxuXHRcdFx0XHRcdFRlcm1pbmFsLmNoYXJhY3RlckNsYXNzKFwiW0EtWmEtejAtOV9dXCIpLndpdGhOYW1lKClcclxuICAgICAgICAgICAgICAgICkud2l0aE5hbWUoXCJzZXFcIilcclxuICAgICAgICAgICAgKS53aXRoTmFtZShcIm9wdFwiKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcblx0ICogKHdhczogRXh0ZW5kZWROYW1lKVxyXG5cdCAqXHJcblx0ICogW146e31cXG5dK1xyXG5cdCAqXHJcblx0ICogRXZlcnl0aGluZyBidXQgJzonLCAneycsICd9J1xyXG5cdCAqL1xyXG5cdHByaXZhdGUgdmFyaWFibGVOYW1lKCk6IFJ1bGUge1xyXG5cdFx0cmV0dXJuIHRoaXMuZ3JhbW1hci5wbHVzKFwidmFyLW5hbWVcIixcclxuXHRcdFx0XHRUZXJtaW5hbC5jaGFyYWN0ZXJDbGFzcyhcIlteOnt9XVwiKS53aXRoTmFtZSgpKS5zZXRFdmFsdWF0b3IoRXZhbHVhdG9yLkRFRkFVTFRfRVZBTFVBVE9SKTtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgZW50cnlOYW1lKCk6IFJ1bGUge1xyXG5cdFx0cmV0dXJuIHRoaXMuaWRlbnRpZmllcihcImVudHJ5LW5hbWVcIik7XHJcblx0fVxyXG5cclxuXHQvLyBldmFsdWF0ZXMgdG8gdGhlIHRhcmdldCBncmFtbWFyJ3MgbGlzdCBydWxlIChpLmUuIEpvaW4pLlxyXG4gICAgcHJpdmF0ZSBsaXN0KCk6IFJ1bGUge1xyXG4gICAgICAgIGNvbnN0IGc6IEVCTkYgPSB0aGlzLmdyYW1tYXI7XHJcblx0XHRyZXR1cm4gZy5zZXF1ZW5jZShcImxpc3RcIixcclxuXHRcdFx0XHRUZXJtaW5hbC5saXRlcmFsKFwibGlzdFwiKS53aXRoTmFtZSgpLFxyXG5cdFx0XHRcdGcuV0hJVEVTUEFDRV9TVEFSLndpdGhOYW1lKFwid3MqXCIpLFxyXG5cdFx0XHRcdFRlcm1pbmFsLmxpdGVyYWwoXCI8XCIpLndpdGhOYW1lKCksXHJcblx0XHRcdFx0Zy5XSElURVNQQUNFX1NUQVIud2l0aE5hbWUoXCJ3cypcIiksXHJcblx0XHRcdFx0dGhpcy5JREVOVElGSUVSLndpdGhOYW1lKFwidHlwZVwiKSxcclxuXHRcdFx0XHRnLldISVRFU1BBQ0VfU1RBUi53aXRoTmFtZShcIndzKlwiKSxcclxuXHRcdFx0XHRUZXJtaW5hbC5saXRlcmFsKFwiPlwiKS53aXRoTmFtZSgpXHJcblx0XHQpLnNldEV2YWx1YXRvcihwbiA9PiB7XHJcblx0XHRcdGNvbnN0IGlkZW50aWZpZXI6IHN0cmluZyA9IHBuLmV2YWx1YXRlKFwidHlwZVwiKSBhcyBzdHJpbmc7XHJcblx0XHRcdGNvbnN0IGVudHJ5OiBTeW0gfCB1bmRlZmluZWQgPSB0aGlzLnRhcmdldEdyYW1tYXIuZ2V0U3ltYm9sKGlkZW50aWZpZXIpO1xyXG5cdFx0XHRpZihlbnRyeSA9PT0gdW5kZWZpbmVkKVxyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIFwiICsgaWRlbnRpZmllciArIFwiIGluIHRoZSB0YXJnZXQgZ3JhbW1hci5cIik7XHJcblxyXG5cdFx0XHRjb25zdCBuYW1lZEVudHJ5OiBOYW1lZDxhbnk+ID0gKGVudHJ5IGluc3RhbmNlb2YgVGVybWluYWwpXHJcblx0XHRcdFx0XHQ/IChlbnRyeSBhcyBUZXJtaW5hbCkud2l0aE5hbWUoaWRlbnRpZmllcilcclxuXHRcdFx0XHRcdDogKGVudHJ5IGFzIE5vblRlcm1pbmFsKS53aXRoTmFtZShpZGVudGlmaWVyKTtcclxuXHRcdFx0cmV0dXJuIHRoaXMudGFyZ2V0R3JhbW1hci5saXN0KHVuZGVmaW5lZCwgbmFtZWRFbnRyeSk7XHJcbiAgICAgICAgfSk7XHJcblx0fVxyXG5cclxuICAgIHByaXZhdGUgdHVwbGUoKTogUnVsZSB7XHJcbiAgICAgICAgY29uc3QgZzogRUJORiA9IHRoaXMuZ3JhbW1hcjtcclxuXHRcdHJldHVybiBnLnNlcXVlbmNlKFwidHVwbGVcIixcclxuXHRcdFx0XHRUZXJtaW5hbC5saXRlcmFsKFwidHVwbGVcIikud2l0aE5hbWUoKSxcclxuXHRcdFx0XHRnLldISVRFU1BBQ0VfU1RBUi53aXRoTmFtZShcIndzKlwiKSxcclxuXHRcdFx0XHRUZXJtaW5hbC5saXRlcmFsKFwiPFwiKS53aXRoTmFtZSgpLFxyXG5cdFx0XHRcdGcuV0hJVEVTUEFDRV9TVEFSLndpdGhOYW1lKFwid3MqXCIpLFxyXG5cdFx0XHRcdHRoaXMuSURFTlRJRklFUi53aXRoTmFtZShcInR5cGVcIiksXHJcblx0XHRcdFx0Zy5wbHVzKHVuZGVmaW5lZCxcclxuXHRcdFx0XHRcdFx0Zy5zZXF1ZW5jZSh1bmRlZmluZWQsXHJcblx0XHRcdFx0XHRcdFx0XHRnLldISVRFU1BBQ0VfU1RBUi53aXRoTmFtZShcIndzKlwiKSxcclxuXHRcdFx0XHRcdFx0XHRcdFRlcm1pbmFsLmxpdGVyYWwoXCIsXCIpLndpdGhOYW1lKCksXHJcblx0XHRcdFx0XHRcdFx0XHRnLldISVRFU1BBQ0VfU1RBUi53aXRoTmFtZShcIndzKlwiKSxcclxuXHRcdFx0XHRcdFx0XHRcdHRoaXMuRU5UUllfTkFNRS53aXRoTmFtZShcImVudHJ5LW5hbWVcIiksXHJcblx0XHRcdFx0XHRcdFx0XHRnLldISVRFU1BBQ0VfU1RBUi53aXRoTmFtZShcIndzKlwiKVxyXG5cdFx0XHRcdFx0XHQpLndpdGhOYW1lKFwic2VxdWVuY2UtbmFtZXNcIilcclxuXHRcdFx0XHQpLndpdGhOYW1lKFwicGx1cy1uYW1lc1wiKSxcclxuXHRcdFx0XHRUZXJtaW5hbC5saXRlcmFsKFwiPlwiKS53aXRoTmFtZSgpXHJcblx0XHQpLnNldEV2YWx1YXRvcihwbiA9PiB7XHJcblx0XHRcdGNvbnN0IHR5cGU6IHN0cmluZyA9IHBuLmV2YWx1YXRlKFwidHlwZVwiKSBhcyBzdHJpbmc7XHJcblx0XHRcdGNvbnN0IHBsdXM6IERlZmF1bHRQYXJzZWROb2RlID0gcG4uZ2V0Q2hpbGQoXCJwbHVzLW5hbWVzXCIpO1xyXG5cdFx0XHRjb25zdCBuVHVwbGU6IG51bWJlciA9IHBsdXMubnVtQ2hpbGRyZW4oKTtcclxuXHRcdFx0Y29uc3QgZW50cnlOYW1lczogc3RyaW5nW10gPSBuZXcgQXJyYXk8c3RyaW5nPihuVHVwbGUpO1xyXG5cdFx0XHRmb3IobGV0IGkgPSAwOyBpIDwgblR1cGxlOyBpKyspXHJcblx0XHRcdFx0ZW50cnlOYW1lc1tpXSA9IHBsdXMuZ2V0Q2hpbGQoaSkuZXZhbHVhdGUoXCJlbnRyeS1uYW1lXCIpIGFzIHN0cmluZztcclxuXHJcblx0XHRcdGNvbnN0IGVudHJ5OiBTeW0gfCB1bmRlZmluZWQgPSB0aGlzLnRhcmdldEdyYW1tYXIuZ2V0U3ltYm9sKHR5cGUpO1xyXG5cdFx0XHRpZihlbnRyeSA9PT0gdW5kZWZpbmVkKVxyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIFwiICsgdHlwZSArIFwiIGluIHRoZSB0YXJnZXQgZ3JhbW1hci5cIik7XHJcblx0XHRcdFxyXG5cdFx0XHRjb25zdCBuYW1lZEVudHJ5OiBOYW1lZDxhbnk+ID0gKGVudHJ5IGluc3RhbmNlb2YgVGVybWluYWwpXHJcblx0XHRcdFx0XHQ/IChlbnRyeSBhcyBUZXJtaW5hbCkud2l0aE5hbWUoKVxyXG5cdFx0XHRcdFx0OiAoZW50cnkgYXMgTm9uVGVybWluYWwpLndpdGhOYW1lKCk7XHJcblxyXG5cdFx0XHRyZXR1cm4gdGhpcy50YXJnZXRHcmFtbWFyLnR1cGxlKHVuZGVmaW5lZCwgbmFtZWRFbnRyeSwgLi4uZW50cnlOYW1lcykuZ2V0VGFyZ2V0KCk7XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG4gICAgcHJpdmF0ZSBjaGFyYWN0ZXJDbGFzcygpOiBSdWxlIHtcclxuXHRcdHJldHVybiB0aGlzLmdyYW1tYXIuc2VxdWVuY2UoXCJjaGFyYWN0ZXItY2xhc3NcIixcclxuXHRcdFx0XHRUZXJtaW5hbC5saXRlcmFsKFwiW1wiKS53aXRoTmFtZSgpLFxyXG5cdFx0XHRcdHRoaXMuZ3JhbW1hci5wbHVzKHVuZGVmaW5lZCxcclxuXHRcdFx0XHRcdHRoaXMuZ3JhbW1hci5vcih1bmRlZmluZWQsXHJcblx0XHRcdFx0XHRcdFRlcm1pbmFsLmNoYXJhY3RlckNsYXNzKFwiW15dXVwiKS53aXRoTmFtZSgpLFxyXG5cdFx0XHRcdFx0XHRUZXJtaW5hbC5saXRlcmFsKFwiXFxcXF1cIikud2l0aE5hbWUoKVxyXG5cdFx0XHRcdFx0KS53aXRoTmFtZSgpXHJcblx0XHRcdFx0KS53aXRoTmFtZShcInBsdXNcIiksXHJcblx0XHRcdFx0VGVybWluYWwubGl0ZXJhbChcIl1cIikud2l0aE5hbWUoKVxyXG5cdFx0KS5zZXRFdmFsdWF0b3IocG4gPT4ge1xyXG5cdFx0XHRjb25zdCBwYXR0ZXJuOiBzdHJpbmcgPSBwbi5nZXRQYXJzZWRTdHJpbmcoKTtcclxuXHRcdFx0cmV0dXJuIFRlcm1pbmFsLmNoYXJhY3RlckNsYXNzKHBhdHRlcm4pO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuICAgIHByaXZhdGUgdHlwZSgpOiBSdWxlIHtcclxuICAgICAgICBjb25zdCBnOiBFQk5GID0gdGhpcy5ncmFtbWFyO1xyXG5cdFx0cmV0dXJuIGcub3IoXCJ0eXBlXCIsXHJcblx0XHRcdFx0Zy5zZXF1ZW5jZSh1bmRlZmluZWQsXHJcblx0XHRcdFx0XHRcdHRoaXMuSURFTlRJRklFUi53aXRoTmFtZShcImlkZW50aWZpZXJcIilcclxuXHRcdFx0XHQpLnNldEV2YWx1YXRvcihwbiA9PiB7XHJcblx0XHRcdFx0XHRjb25zdCBzdHI6IHN0cmluZyA9IHBuLmdldFBhcnNlZFN0cmluZygpO1xyXG5cdFx0XHRcdFx0Y29uc3Qgc3ltYm9sOiBTeW0gfCB1bmRlZmluZWQgPSB0aGlzLnRhcmdldEdyYW1tYXIuZ2V0U3ltYm9sKHN0cik7XHJcblx0XHRcdFx0XHRpZihzeW1ib2wgPT09IHVuZGVmaW5lZClcclxuXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biB0eXBlICdcIiArIHN0ciArIFwiJ1wiKTtcclxuXHRcdFx0XHRcdHJldHVybiBzeW1ib2w7XHJcblx0XHRcdFx0fSkud2l0aE5hbWUoXCJ0eXBlXCIpLFxyXG5cdFx0XHRcdHRoaXMuTElTVC53aXRoTmFtZShcImxpc3RcIiksXHJcblx0XHRcdFx0dGhpcy5UVVBMRS53aXRoTmFtZShcInR1cGxlXCIpLFxyXG5cdFx0XHRcdHRoaXMuQ0hBUkFDVEVSX0NMQVNTLndpdGhOYW1lKFwiY2hhcmFjdGVyLWNsYXNzXCIpXHJcblx0XHQpO1xyXG5cdH1cclxuXHJcbiAgICAvKlxyXG5cdCAqIHtuYW1lOls6dHlwZV1bOnF1YW50aWZpZXJdfVxyXG5cdCAqIC0gZWl0aGVyIGp1c3QgdGhlIG5hbWU6IHtGcm9tIGZyYW1lfVxyXG5cdCAqIC0gb3IgbmFtZSBhbmQgdHlwZToge2ZyYW1lOmludH1cclxuXHQgKi9cclxuXHRwcml2YXRlIHZhcmlhYmxlKCk6IFJ1bGUge1xyXG4gICAgICAgIGNvbnN0IGc6IEVCTkYgPSB0aGlzLmdyYW1tYXI7XHJcblx0XHRyZXR1cm4gZy5zZXF1ZW5jZShcInZhcmlhYmxlXCIsXHJcblx0XHRcdFx0VGVybWluYWwubGl0ZXJhbChcIntcIikud2l0aE5hbWUoKSxcclxuXHRcdFx0XHR0aGlzLlZBUklBQkxFX05BTUUud2l0aE5hbWUoXCJ2YXJpYWJsZS1uYW1lXCIpLFxyXG5cdFx0XHRcdGcub3B0aW9uYWwodW5kZWZpbmVkLFxyXG5cdFx0XHRcdFx0XHRnLnNlcXVlbmNlKHVuZGVmaW5lZCxcclxuXHRcdFx0XHRcdFx0XHRcdFRlcm1pbmFsLmxpdGVyYWwoXCI6XCIpLndpdGhOYW1lKCksXHJcblx0XHRcdFx0XHRcdFx0XHR0aGlzLlRZUEUud2l0aE5hbWUoXCJ0eXBlXCIpXHJcblx0XHRcdFx0XHRcdCkud2l0aE5hbWUoXCJzZXEtdHlwZVwiKVxyXG5cdFx0XHRcdCkud2l0aE5hbWUoXCJvcHQtdHlwZVwiKSxcclxuXHRcdFx0XHRnLm9wdGlvbmFsKHVuZGVmaW5lZCxcclxuXHRcdFx0XHRcdFx0Zy5zZXF1ZW5jZSh1bmRlZmluZWQsXHJcblx0XHRcdFx0XHRcdFx0XHRUZXJtaW5hbC5saXRlcmFsKFwiOlwiKS53aXRoTmFtZSgpLFxyXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5RVUFOVElGSUVSLndpdGhOYW1lKFwicXVhbnRpZmllclwiKVxyXG5cdFx0XHRcdFx0XHQpLndpdGhOYW1lKFwic2VxLXF1YW50aWZpZXJcIilcclxuXHRcdFx0XHQpLndpdGhOYW1lKFwib3B0LXF1YW50aWZpZXJcIiksXHJcblx0XHRcdFx0VGVybWluYWwubGl0ZXJhbChcIn1cIikud2l0aE5hbWUoKVxyXG5cdFx0KS5zZXRFdmFsdWF0b3IocG4gPT4ge1xyXG5cdFx0XHRjb25zdCB2YXJpYWJsZU5hbWU6IHN0cmluZyA9IHBuLmV2YWx1YXRlKFwidmFyaWFibGUtbmFtZVwiKSBhcyBzdHJpbmc7XHJcblx0XHRcdGNvbnN0IHR5cGVPYmplY3Q6IGFueSA9IHBuLmV2YWx1YXRlKFwib3B0LXR5cGVcIiwgXCJzZXEtdHlwZVwiLCBcInR5cGVcIik7XHJcblx0XHRcdGNvbnN0IHF1YW50aWZpZXJPYmplY3Q6IGFueSA9IHBuLmV2YWx1YXRlKFwib3B0LXF1YW50aWZpZXJcIiwgXCJzZXEtcXVhbnRpZmllclwiLCBcInF1YW50aWZpZXJcIik7XHJcblxyXG5cdFx0XHQvLyB0eXBlT2JqZWN0IGlzIGVpdGhlclxyXG5cdFx0XHQvLyAtIGEgdHlwZSAoc3ltYm9sKSBmcm9tIHRoZSB0YXJnZXQgZ3JhbW1hciwgb3JcclxuXHRcdFx0Ly8gLSBhIGNoYXJhY3Rlci1jbGFzcyAoaS5lLiBhIHRlcm1pbmFsKSwgb3JcclxuXHRcdFx0Ly8gLSBhIHR1cGxlIChpLmUuIHN5bWJvbCBvZiB0aGUgdHVwbGUgaW4gdGhlIHRhcmdldCBncmFtbWFyKSwgb3JcclxuXHRcdFx0Ly8gLSBhIGxpc3QgKGkuZS4gYSBSdWxlLCBvciBtb3JlIHNwZWNpZmljYWxseSBhIEpvaW4pLlxyXG5cdFx0XHRpZih0eXBlT2JqZWN0IGluc3RhbmNlb2YgSm9pbikge1xyXG5cdFx0XHRcdGNvbnN0IGpvaW46IEpvaW4gPSB0eXBlT2JqZWN0IGFzIEpvaW47XHJcblx0XHRcdFx0aWYocXVhbnRpZmllck9iamVjdCAhPSBudWxsKVxyXG5cdFx0XHRcdFx0am9pbi5zZXRDYXJkaW5hbGl0eShxdWFudGlmaWVyT2JqZWN0IGFzIEludFJhbmdlKTtcclxuXHRcdFx0XHRyZXR1cm4gam9pbi5nZXRUYXJnZXQoKS53aXRoTmFtZSh2YXJpYWJsZU5hbWUpO1xyXG5cdFx0XHR9XHJcblxyXG5cclxuXHRcdFx0bGV0IHN5bWJvbDogU3ltID0gdHlwZU9iamVjdCA9PT0gdW5kZWZpbmVkXHJcblx0XHRcdFx0XHQ/IFRlcm1pbmFsLmxpdGVyYWwodmFyaWFibGVOYW1lKVxyXG5cdFx0XHRcdFx0OiB0eXBlT2JqZWN0IGFzIFN5bTtcclxuXHJcblx0XHRcdGxldCBuYW1lZFN5bWJvbDogTmFtZWQ8YW55PiA9IChzeW1ib2wgaW5zdGFuY2VvZiBUZXJtaW5hbClcclxuXHRcdFx0XHRcdD8gKHN5bWJvbCBhcyBUZXJtaW5hbCkud2l0aE5hbWUodmFyaWFibGVOYW1lKVxyXG5cdFx0XHRcdFx0OiAoc3ltYm9sIGFzIE5vblRlcm1pbmFsKS53aXRoTmFtZSh2YXJpYWJsZU5hbWUpO1xyXG5cclxuXHRcdFx0aWYocXVhbnRpZmllck9iamVjdCAhPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0bGV0IGF1dG9jb21wbGV0ZXI6IEF1dG9jb21wbGV0ZXIgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XHJcblx0XHRcdFx0Ly8gc2V0IGEgbmV3IGZhbGxiYWNrIGF1dG9jb21wbGV0ZXIuIFRoaXMgaXMgaW1wb3J0YW50IGZvciBlLmcuIHtibGE6W2Etel06NH0gb3Ige2JsYTpkaWdpdDo0fVxyXG5cdFx0XHRcdGlmKHR5cGVPYmplY3QgaW5zdGFuY2VvZiBUZXJtaW5hbClcclxuXHRcdFx0XHRcdGF1dG9jb21wbGV0ZXIgPSBBdXRvY29tcGxldGVyLkRFRkFVTFRfSU5MSU5FX0FVVE9DT01QTEVURVI7XHJcblxyXG5cdFx0XHRcdGNvbnN0IHJhbmdlOiBJbnRSYW5nZSA9IHF1YW50aWZpZXJPYmplY3QgYXMgSW50UmFuZ2U7XHJcblx0XHRcdFx0ICAgICBpZihyYW5nZS5lcXVhbHMoSW50UmFuZ2UuU1RBUikpICAgICBzeW1ib2wgPSB0aGlzLnRhcmdldEdyYW1tYXIuc3RhciggICAgdW5kZWZpbmVkLCBuYW1lZFN5bWJvbCkuc2V0QXV0b2NvbXBsZXRlcihhdXRvY29tcGxldGVyKS5nZXRUYXJnZXQoKTtcclxuXHRcdFx0XHRlbHNlIGlmKHJhbmdlLmVxdWFscyhJbnRSYW5nZS5QTFVTKSkgICAgIHN5bWJvbCA9IHRoaXMudGFyZ2V0R3JhbW1hci5wbHVzKCAgICB1bmRlZmluZWQsIG5hbWVkU3ltYm9sKS5zZXRBdXRvY29tcGxldGVyKGF1dG9jb21wbGV0ZXIpLmdldFRhcmdldCgpO1xyXG5cdFx0XHRcdGVsc2UgaWYocmFuZ2UuZXF1YWxzKEludFJhbmdlLk9QVElPTkFMKSkgc3ltYm9sID0gdGhpcy50YXJnZXRHcmFtbWFyLm9wdGlvbmFsKHVuZGVmaW5lZCwgbmFtZWRTeW1ib2wpLnNldEF1dG9jb21wbGV0ZXIoYXV0b2NvbXBsZXRlcikuZ2V0VGFyZ2V0KCk7XHJcblx0XHRcdFx0ZWxzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeW1ib2wgPSB0aGlzLnRhcmdldEdyYW1tYXIucmVwZWF0KCAgdW5kZWZpbmVkLCBuYW1lZFN5bWJvbCwgcmFuZ2UuZ2V0TG93ZXIoKSwgcmFuZ2UuZ2V0VXBwZXIoKSkuc2V0QXV0b2NvbXBsZXRlcihhdXRvY29tcGxldGVyKS5nZXRUYXJnZXQoKTtcclxuXHRcdFx0XHRcclxuICAgICAgICAgICAgICAgIG5hbWVkU3ltYm9sID0gKHN5bWJvbCBhcyBOb25UZXJtaW5hbCkud2l0aE5hbWUodmFyaWFibGVOYW1lKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbmFtZWRTeW1ib2w7XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG4gICAgcHJpdmF0ZSBub1ZhcmlhYmxlKCk6IFJ1bGUge1xyXG4gICAgICAgIGNvbnN0IGc6IEVCTkYgPSB0aGlzLmdyYW1tYXI7XHJcblx0XHRyZXR1cm4gZy5zZXF1ZW5jZShcIm5vLXZhcmlhYmxlXCIsXHJcblx0XHRcdFx0VGVybWluYWwuY2hhcmFjdGVyQ2xhc3MoXCJbXiBcXHRcXG57XVwiKS53aXRoTmFtZSgpLFxyXG5cdFx0XHRcdGcub3B0aW9uYWwodW5kZWZpbmVkLFxyXG5cdFx0XHRcdFx0XHRnLnNlcXVlbmNlKHVuZGVmaW5lZCxcclxuXHRcdFx0XHRcdFx0XHRcdGcuc3Rhcih1bmRlZmluZWQsXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0VGVybWluYWwuY2hhcmFjdGVyQ2xhc3MoXCJbXntcXG5dXCIpLndpdGhOYW1lKClcclxuXHRcdFx0XHRcdFx0XHRcdCkud2l0aE5hbWUoXCJtaWRkbGVcIiksXHJcblx0XHRcdFx0XHRcdFx0XHRUZXJtaW5hbC5jaGFyYWN0ZXJDbGFzcyhcIlteIFxcdFxcbntdXCIpLndpdGhOYW1lKClcclxuXHRcdFx0XHRcdFx0KS53aXRoTmFtZShcInNlcVwiKVxyXG5cdFx0XHRcdCkud2l0aE5hbWUoXCJ0YWlsXCIpXHJcblx0XHQpLnNldEV2YWx1YXRvcihwbiA9PiBUZXJtaW5hbC5saXRlcmFsKHBuLmdldFBhcnNlZFN0cmluZygpKS53aXRoTmFtZSgpKTtcclxuXHR9XHJcblxyXG4gICAgcHJpdmF0ZSBleHByZXNzaW9uKCk6IFJ1bGUge1xyXG4gICAgICAgIGNvbnN0IGc6IEVCTkYgPSB0aGlzLmdyYW1tYXI7XHJcblx0XHRyZXR1cm4gZy5qb2luKFwiZXhwcmVzc2lvblwiLFxyXG5cdFx0XHRcdGcub3IodW5kZWZpbmVkLFxyXG5cdFx0XHRcdFx0XHR0aGlzLk5PX1ZBUklBQkxFLndpdGhOYW1lKFwibm8tdmFyaWFibGVcIiksXHJcblx0XHRcdFx0XHRcdHRoaXMuVkFSSUFCTEUud2l0aE5hbWUoXCJ2YXJpYWJsZVwiKVxyXG5cdFx0XHRcdCkud2l0aE5hbWUoXCJvclwiKSxcclxuXHRcdFx0XHR1bmRlZmluZWQsXHJcblx0XHRcdFx0dW5kZWZpbmVkLFxyXG5cdFx0XHRcdGcuV0hJVEVTUEFDRV9TVEFSLmdldFRhcmdldCgpLFxyXG5cdFx0XHRcdGZhbHNlLFxyXG5cdFx0XHRcdEludFJhbmdlLlBMVVNcclxuXHRcdCkuc2V0RXZhbHVhdG9yKHBhcnNlZE5vZGUgPT4ge1xyXG5cdFx0XHRjb25zdCBuQ2hpbGRyZW46IG51bWJlciA9IHBhcnNlZE5vZGUubnVtQ2hpbGRyZW4oKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHJoc0xpc3Q6IE5hbWVkPGFueT5bXSA9IFtdO1xyXG5cclxuXHRcdFx0cmhzTGlzdC5wdXNoKHBhcnNlZE5vZGUuZXZhbHVhdGUoMCkgYXMgTmFtZWQ8YW55Pik7XHJcblx0XHRcdGZvcihsZXQgaSA9IDE7IGkgPCBuQ2hpbGRyZW47IGkrKykge1xyXG5cdFx0XHRcdGNvbnN0IGNoaWxkOiBEZWZhdWx0UGFyc2VkTm9kZSA9IHBhcnNlZE5vZGUuZ2V0Q2hpbGQoaSk7XHJcblx0XHRcdFx0aWYoaSAlIDIgPT0gMCkgeyAvLyBvclxyXG5cdFx0XHRcdFx0cmhzTGlzdC5wdXNoKGNoaWxkLmV2YWx1YXRlKCkgYXMgTmFtZWQ8YW55Pik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2UgeyAvLyB3cypcclxuXHRcdFx0XHRcdGNvbnN0IGhhc1dTOiBib29sZWFuID0gY2hpbGQubnVtQ2hpbGRyZW4oKSA+IDA7XHJcblx0XHRcdFx0XHRpZihoYXNXUylcclxuXHRcdFx0XHRcdFx0cmhzTGlzdC5wdXNoKHRoaXMudGFyZ2V0R3JhbW1hci5XSElURVNQQUNFX1BMVVMud2l0aE5hbWUoXCJ3cytcIikpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG4gICAgICAgICAgICByZXR1cm4gcmhzTGlzdDtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcbiAgICBwcml2YXRlIHByb2dyYW0oKTogUnVsZSB7XHJcblx0XHRyZXR1cm4gdGhpcy50YXJnZXRHcmFtbWFyLmpvaW4oXCJwcm9ncmFtXCIsXHJcblx0XHRcdFx0bmV3IE5vblRlcm1pbmFsKFwic2VudGVuY2VcIikud2l0aE5hbWUoXCJzZW50ZW5jZVwiKSxcclxuXHRcdFx0XHR0aGlzLkxJTkVCUkVBS19TVEFSLmdldFRhcmdldCgpLFxyXG5cdFx0XHRcdHRoaXMuTElORUJSRUFLX1NUQVIuZ2V0VGFyZ2V0KCksXHJcblx0XHRcdFx0dGhpcy5MSU5FQlJFQUtfU1RBUi5nZXRUYXJnZXQoKSxcclxuICAgICAgICAgICAgICAgIHRydWUsXHJcblx0XHRcdFx0SW50UmFuZ2UuU1RBUik7XHJcblx0fVxyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgcGFyc2VTdGFydExpc3RlbmVyczogUGFyc2VTdGFydExpc3RlbmVyW10gPSBbXTtcclxuXHJcbiAgICBhZGRQYXJzZVN0YXJ0TGlzdGVuZXIobGlzdGVuZXI6IFBhcnNlU3RhcnRMaXN0ZW5lcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucGFyc2VTdGFydExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVQYXJzZVN0YXJ0TGlzdGVuZXIobGlzdGVuZXI6IFBhcnNlU3RhcnRMaXN0ZW5lcik6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGlkeCA9IHRoaXMucGFyc2VTdGFydExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcclxuICAgICAgICBpZihpZHggIT09IC0xKVxyXG4gICAgICAgICAgICB0aGlzLnBhcnNlU3RhcnRMaXN0ZW5lcnMuc3BsaWNlKGlkeCwgMSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBmaXJlUGFyc2luZ1N0YXJ0ZWQoKTogdm9pZCB7XHJcbiAgICAgICAgZm9yKGxldCBsIG9mIHRoaXMucGFyc2VTdGFydExpc3RlbmVycylcclxuICAgICAgICAgICAgbCgpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFJ1bGUgfSBmcm9tIFwic3JjL2VibmYvUnVsZS5qc1wiO1xyXG5pbXBvcnQgeyBEZWZhdWx0UGFyc2VkTm9kZSB9IGZyb20gXCIuL0RlZmF1bHRQYXJzZWROb2RlLmpzXCI7XHJcbmltcG9ydCB7IFN5bSB9IGZyb20gXCIuL1N5bWJvbC5qc1wiO1xyXG5pbXBvcnQgeyBQYXJzZWROb2RlIH0gZnJvbSBcInNyYy9QYXJzZWROb2RlLmpzXCI7XHJcbmltcG9ydCB7IE5hbWVkIH0gZnJvbSBcIi4vTmFtZWQuanNcIjtcclxuXHJcbmFic3RyYWN0IGNsYXNzIEF1dG9jb21wbGV0aW9uIHtcclxuICAgIHB1YmxpYyByZWFkb25seSBzeW1ib2xOYW1lOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgZm9yU3ltYm9sOiBTeW07XHJcbiAgICBwcml2YXRlIGFscmVhZHlFbnRlcmVkOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IocG46IERlZmF1bHRQYXJzZWROb2RlKTtcclxuICAgIGNvbnN0cnVjdG9yKGZvclN5bWJvbDogU3ltLCBzeW1ib2xOYW1lOiBzdHJpbmcpO1xyXG4gICAgY29uc3RydWN0b3IocG5PckZvclN5bWJvbDogRGVmYXVsdFBhcnNlZE5vZGUgfCBTeW0sIHN5bWJvbE5hbWU/OiBzdHJpbmcpIHtcclxuICAgICAgICBpZihzeW1ib2xOYW1lICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5mb3JTeW1ib2wgPSBwbk9yRm9yU3ltYm9sIGFzIFN5bTtcclxuICAgICAgICAgICAgdGhpcy5zeW1ib2xOYW1lID0gc3ltYm9sTmFtZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBwbjogRGVmYXVsdFBhcnNlZE5vZGUgPSBwbk9yRm9yU3ltYm9sIGFzIERlZmF1bHRQYXJzZWROb2RlO1xyXG4gICAgICAgICAgICB0aGlzLmZvclN5bWJvbCA9IHBuLmdldFN5bWJvbCgpO1xyXG4gICAgICAgICAgICB0aGlzLnN5bWJvbE5hbWUgPSBwbi5nZXROYW1lKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFic3RyYWN0IGdldENvbXBsZXRpb24ocHVycG9zZTogQXV0b2NvbXBsZXRpb24uUHVycG9zZSk6IHN0cmluZztcclxuXHJcbiAgICBpc0VtcHR5TGl0ZXJhbCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMgaW5zdGFuY2VvZiBBdXRvY29tcGxldGlvbi5MaXRlcmFsKSAmJlxyXG4gICAgICAgICAgICB0aGlzLmdldENvbXBsZXRpb24oQXV0b2NvbXBsZXRpb24uUHVycG9zZS5GT1JfSU5TRVJUSU9OKS5sZW5ndGggPT0gMDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgbGl0ZXJhbChwbjogRGVmYXVsdFBhcnNlZE5vZGUsIGxpdGVyYWxzOiBzdHJpbmdbXSwgcHJlZml4Pzogc3RyaW5nLCBwb3N0Zml4Pzogc3RyaW5nKTogQXV0b2NvbXBsZXRpb25bXSB7XHJcbiAgICAgICAgaWYocHJlZml4ID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHByZWZpeCA9IFwiXCI7XHJcbiAgICAgICAgaWYocG9zdGZpeCA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICBwb3N0Zml4ID0gXCJcIjtcclxuICAgICAgICByZXR1cm4gbGl0ZXJhbHMubWFwKChsOiBzdHJpbmcpID0+IG5ldyBBdXRvY29tcGxldGlvbi5MaXRlcmFsKHBuLCBwcmVmaXggKyBsICsgcG9zdGZpeCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBwYXJhbWV0ZXJpemVkKHBuOiBEZWZhdWx0UGFyc2VkTm9kZSwgcGFyYW1ldGVyTmFtZTogc3RyaW5nKTogQXV0b2NvbXBsZXRpb25bXSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBBdXRvY29tcGxldGlvbi5QYXJhbWV0ZXJpemVkKHBuLCBwYXJhbWV0ZXJOYW1lKS5hc0FycmF5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHZldG8ocG46IERlZmF1bHRQYXJzZWROb2RlKTogQXV0b2NvbXBsZXRpb25bXSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBBdXRvY29tcGxldGlvbi5WZXRvKHBuKS5hc0FycmF5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGRvZXNBdXRvY29tcGxldGUocG46IERlZmF1bHRQYXJzZWROb2RlKTogQXV0b2NvbXBsZXRpb25bXSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBBdXRvY29tcGxldGlvbi5Eb2VzQXV0b2NvbXBsZXRlKHBuKS5hc0FycmF5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QWxyZWFkeUVudGVyZWQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hbHJlYWR5RW50ZXJlZDtcclxuICAgIH1cclxuXHJcbiAgICBzZXRBbHJlYWR5RW50ZXJlZChhbHJlYWR5RW50ZXJlZDogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5hbHJlYWR5RW50ZXJlZCA9IGFscmVhZHlFbnRlcmVkO1xyXG4gICAgfVxyXG5cclxuICAgIGFzQXJyYXkoKTogQXV0b2NvbXBsZXRpb25bXSB7XHJcbiAgICAgICAgcmV0dXJuIFt0aGlzXTtcclxuICAgIH1cclxufVxyXG5cclxubW9kdWxlIEF1dG9jb21wbGV0aW9uIHtcclxuXHJcbiAgICBleHBvcnQgY2xhc3MgTGl0ZXJhbCBleHRlbmRzIEF1dG9jb21wbGV0aW9uIHtcclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGxpdGVyYWw6IHN0cmluZztcclxuXHJcbiAgICAgICAgY29uc3RydWN0b3IocG46IERlZmF1bHRQYXJzZWROb2RlLCBzOiBzdHJpbmcpO1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKGZvclN5bWJvbDogU3ltLCBzeW1ib2xOYW1lOiBzdHJpbmcsIHM6IHN0cmluZyk7XHJcbiAgICAgICAgY29uc3RydWN0b3IocG5PckZvclN5bWJvbDogRGVmYXVsdFBhcnNlZE5vZGUgfCBTeW0sIHNPclN5bWJvbE5hbWU6IHN0cmluZywgcz86c3RyaW5nKSB7XHJcbiAgICAgICAgICAgIGlmKHMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIocG5PckZvclN5bWJvbCBhcyBTeW0sIHNPclN5bWJvbE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXRlcmFsID0gcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHBuT3JGb3JTeW1ib2wgYXMgRGVmYXVsdFBhcnNlZE5vZGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXRlcmFsID0gc09yU3ltYm9sTmFtZSBhcyBzdHJpbmc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG92ZXJyaWRlIGdldENvbXBsZXRpb24oX3B1cnBvc2U6IFB1cnBvc2UpOiBzdHJpbmcge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXRlcmFsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgUGFyYW1ldGVyaXplZCBleHRlbmRzIEF1dG9jb21wbGV0aW9uIHtcclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHBhcmFtTmFtZTogc3RyaW5nO1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3RvcihwbjogRGVmYXVsdFBhcnNlZE5vZGUsIHBhcmFtTmFtZTogc3RyaW5nKTtcclxuICAgICAgICBjb25zdHJ1Y3Rvcihmb3JTeW1ib2w6IFN5bSwgc3ltYm9sTmFtZTogc3RyaW5nLCBwYXJhbU5hbWU6IHN0cmluZyk7XHJcbiAgICAgICAgY29uc3RydWN0b3IocG5PckZvclN5bWJvbDogRGVmYXVsdFBhcnNlZE5vZGUgfCBTeW0sIHBhcmFtTmFtZU9yU3ltYm9sTmFtZTogc3RyaW5nLCBwYXJhbU5hbWU/OiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgaWYocGFyYW1OYW1lICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHBuT3JGb3JTeW1ib2wgYXMgU3ltLCBwYXJhbU5hbWVPclN5bWJvbE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wYXJhbU5hbWUgPSBwYXJhbU5hbWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcihwbk9yRm9yU3ltYm9sIGFzIERlZmF1bHRQYXJzZWROb2RlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGFyYW1OYW1lID0gcGFyYW1OYW1lT3JTeW1ib2xOYW1lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvdmVycmlkZSBnZXRDb21wbGV0aW9uKF9wdXJwb3NlOiBQdXJwb3NlKTogc3RyaW5nIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiJHtcIiArIHRoaXMucGFyYW1OYW1lICsgXCJ9XCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXRQYXJhbU5hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyYW1OYW1lO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgVmV0byBleHRlbmRzIEF1dG9jb21wbGV0aW9uIHtcclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyByZWFkb25seSBWRVRPOiBzdHJpbmcgPSBcIlZFVE9cIjtcclxuXHJcbiAgICAgICAgb3ZlcnJpZGUgZ2V0Q29tcGxldGlvbihfcHVycG9zZTogUHVycG9zZSk6IHN0cmluZyB7XHJcbiAgICAgICAgICAgIHJldHVybiBWZXRvLlZFVE87XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBEb2VzQXV0b2NvbXBsZXRlIGV4dGVuZHMgQXV0b2NvbXBsZXRpb24ge1xyXG4gICAgICAgIG92ZXJyaWRlIGdldENvbXBsZXRpb24oX3B1cnBvc2U6IFB1cnBvc2UpOiBzdHJpbmcge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJTb21ldGhpbmdcIjsgLy8gdGhlIHJldHVybiB2YWx1ZSBmb3IgRG9lc0F1dG9jb21wbGV0ZSBzaG91bGRuJ3QgbWF0dGVyXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBFbnRpcmVTZXF1ZW5jZSBleHRlbmRzIEF1dG9jb21wbGV0aW9uIHtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBzZXF1ZW5jZU9mQ29tcGxldGlvbnM6IEF1dG9jb21wbGV0aW9uW11bXTtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBzZXF1ZW5jZTogUnVsZTtcclxuXHJcbiAgICAgICAgY29uc3RydWN0b3IocG46IERlZmF1bHRQYXJzZWROb2RlKTtcclxuICAgICAgICBjb25zdHJ1Y3Rvcihmb3JTeW1ib2w6IFN5bSwgc3ltYm9sTmFtZTogc3RyaW5nLCBzZXF1ZW5jZTogUnVsZSk7XHJcbiAgICAgICAgY29uc3RydWN0b3IocG5PckZvclN5bWJvbDogRGVmYXVsdFBhcnNlZE5vZGUgfCBTeW0sIHN5bWJvbE5hbWU/OiBzdHJpbmcsIHNlcXVlbmNlPzogUnVsZSkge1xyXG4gICAgICAgICAgICBpZihzeW1ib2xOYW1lICE9PSB1bmRlZmluZWQgJiYgc2VxdWVuY2UgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcihwbk9yRm9yU3ltYm9sIGFzIFN5bSwgc3ltYm9sTmFtZSBhcyBzdHJpbmcpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZSA9IHNlcXVlbmNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIocG5PckZvclN5bWJvbCBhcyBEZWZhdWx0UGFyc2VkTm9kZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlcXVlbmNlID0gKHBuT3JGb3JTeW1ib2wgYXMgUGFyc2VkTm9kZSkuZ2V0UnVsZSgpIGFzIFJ1bGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZU9mQ29tcGxldGlvbnMgPSBbXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFkZChjb21wbGV0aW9uczogQXV0b2NvbXBsZXRpb25bXSk6IHZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLnNlcXVlbmNlT2ZDb21wbGV0aW9ucy5wdXNoKGNvbXBsZXRpb25zKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldFNlcXVlbmNlT2ZDb21wbGV0aW9ucygpOiBBdXRvY29tcGxldGlvbltdW10ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXF1ZW5jZU9mQ29tcGxldGlvbnM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXRTZXF1ZW5jZSgpOiBSdWxlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VxdWVuY2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhZGRMaXRlcmFsKHN5bWJvbDogU3ltLCBuYW1lOiBzdHJpbmcsIGNvbXBsZXRpb246IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLmFkZChbbmV3IExpdGVyYWwoc3ltYm9sLCBuYW1lLCBjb21wbGV0aW9uKV0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYWRkUGFyYW1ldGVyaXplZChzeW1ib2w6IFN5bSwgbmFtZTogc3RyaW5nLCBwYXJhbWV0ZXI6IHN0cmluZykgOiB2b2lkIHtcclxuICAgICAgICAgICAgdGhpcy5hZGQoW25ldyBQYXJhbWV0ZXJpemVkKHN5bWJvbCwgbmFtZSwgcGFyYW1ldGVyKV0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgb3ZlcnJpZGUgZ2V0Q29tcGxldGlvbihwdXJwb3NlOiBQdXJwb3NlKTogc3RyaW5nIHtcclxuICAgICAgICAgICAgbGV0IGF1dG9jb21wbGV0aW9uU3RyaW5nOiBzdHJpbmcgPSBcIlwiO1xyXG4gICAgICAgICAgICBmb3IobGV0IGk6bnVtYmVyID0gMDsgaSA8IHRoaXMuc2VxdWVuY2VPZkNvbXBsZXRpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhdXRvY29tcGxldGlvbnM6IEF1dG9jb21wbGV0aW9uW10gPSB0aGlzLnNlcXVlbmNlT2ZDb21wbGV0aW9uc1tpXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBhdXRvY29tcGxldGlvbnMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgaWYobiA+IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0b2NvbXBsZXRpb25TdHJpbmcgKz0gXCIke1wiICsgdGhpcy5zZXF1ZW5jZS5nZXROYW1lRm9yQ2hpbGQoaSkgKyBcIn1cIjtcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYobiA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYocHVycG9zZSA9PT0gUHVycG9zZS5GT1JfTUVOVSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5zOiBzdHJpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjOiBBdXRvY29tcGxldGlvbiA9IGF1dG9jb21wbGV0aW9uc1swXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoYWMgaW5zdGFuY2VvZiBMaXRlcmFsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zID0gYWMuZ2V0Q29tcGxldGlvbihQdXJwb3NlLkZPUl9JTlNFUlRJT04pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnMgPSBcIiR7XCIgKyB0aGlzLnNlcXVlbmNlLmdldE5hbWVGb3JDaGlsZChpKSArIFwifVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihpbnMgPT09IHVuZGVmaW5lZCB8fCBpbnMgPT09IE5hbWVkLlVOTkFNRUQpIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zID0gXCIke1wiICsgdGhpcy5zZXF1ZW5jZS5nZXRDaGlsZHJlbigpW2ldLmdldFN5bWJvbCgpICsgXCJ9XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRvY29tcGxldGlvblN0cmluZyArPSBpbnM7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYocHVycG9zZSA9PT0gUHVycG9zZS5GT1JfSU5TRVJUSU9OKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRvY29tcGxldGlvblN0cmluZyArPSBhdXRvY29tcGxldGlvbnNbMF0uZ2V0Q29tcGxldGlvbihwdXJwb3NlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gYXV0b2NvbXBsZXRpb25TdHJpbmc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBlbnVtIFB1cnBvc2Uge1xyXG4gICAgICAgIEZPUl9NRU5VLFxyXG4gICAgICAgIEZPUl9JTlNFUlRJT05cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHsgQXV0b2NvbXBsZXRpb24gfVxyXG4iLCJpbXBvcnQgeyBUZXJtaW5hbCB9IGZyb20gXCIuL1Rlcm1pbmFsLmpzXCI7XHJcbmltcG9ydCB7IE5vblRlcm1pbmFsIH0gZnJvbSBcIi4vTm9uVGVybWluYWwuanNcIjtcclxuaW1wb3J0IHsgUHJvZHVjdGlvbiB9IGZyb20gXCIuL1Byb2R1Y3Rpb24uanNcIjtcclxuaW1wb3J0IHsgU3ltIH0gZnJvbSBcIi4vU3ltYm9sLmpzXCI7XHJcblxyXG5jbGFzcyBCTkYge1xyXG4gICAgc3RhdGljIHJlYWRvbmx5IEFSVElGSUNJQUxfU1RBUlRfU1lNQk9MOiBOb25UZXJtaW5hbCA9IG5ldyBOb25UZXJtaW5hbChcIlMnXCIpO1xyXG4gICAgc3RhdGljIHJlYWRvbmx5IEFSVElGSUNJQUxfU1RPUF9TWU1CT0w6ICBUZXJtaW5hbCAgICA9IFRlcm1pbmFsLkVORF9PRl9JTlBVVDtcclxuXHJcbiAgICByZWFkb25seSBzeW1ib2xzOiBNYXA8c3RyaW5nLCBTeW0+ID0gbmV3IE1hcCgpO1xyXG4gICAgcmVhZG9ubHkgcHJvZHVjdGlvbnM6IFByb2R1Y3Rpb25bXSA9IFtdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG90aGVyPzogQk5GKSB7XHJcbiAgICAgICAgaWYob3RoZXIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBmb3IobGV0IFtrZXksIHZhbHVlXSBvZiBvdGhlci5zeW1ib2xzKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zeW1ib2xzLnNldChrZXksIHZhbHVlKTtcclxuICAgICAgICAgICAgdGhpcy5wcm9kdWN0aW9ucy5wdXNoKC4uLm90aGVyLnByb2R1Y3Rpb25zKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVzZXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zeW1ib2xzLmNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5wcm9kdWN0aW9ucy5sZW5ndGggPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZVN0YXJ0UHJvZHVjdGlvbigpOiB2b2lkIHtcclxuICAgICAgICB2YXIgaSA9IHRoaXMucHJvZHVjdGlvbnMubGVuZ3RoO1xyXG4gICAgICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucHJvZHVjdGlvbnNbaV0uZ2V0TGVmdCgpLmVxdWFscyhCTkYuQVJUSUZJQ0lBTF9TVEFSVF9TWU1CT0wpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb2R1Y3Rpb25zLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFkZFByb2R1Y3Rpb24ocDogUHJvZHVjdGlvbik6IFByb2R1Y3Rpb24ge1xyXG4gICAgICAgIGxldCBleGlzdGluZzogbnVtYmVyID0gdGhpcy5wcm9kdWN0aW9ucy5maW5kSW5kZXgodiA9PiB2LmVxdWFscyhwKSk7XHJcbiAgICAgICAgaWYoZXhpc3RpbmcgIT0gLTEpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJQcm9kdWN0aW9uIGFscmVhZHkgZXhpc3RzOiBcIiArIHApO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9kdWN0aW9uc1tleGlzdGluZ107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucHJvZHVjdGlvbnMucHVzaChwKTtcclxuICAgICAgICB0aGlzLnN5bWJvbHMuc2V0KHAuZ2V0TGVmdCgpLmdldFN5bWJvbCgpLCBwLmdldExlZnQoKSk7XHJcbiAgICAgICAgZm9yKGxldCBzeW0gb2YgcC5nZXRSaWdodCgpKSB7XHJcbiAgICAgICAgICAgIGlmKCFzeW0uaXNFcHNpbG9uKCkpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnN5bWJvbHMuc2V0KHN5bS5nZXRTeW1ib2woKSwgc3ltKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHA7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U3ltYm9sKHN5bWJvbDogc3RyaW5nKTogU3ltIHtcclxuICAgICAgICBsZXQgcmV0OiBTeW0gfCB1bmRlZmluZWQgPSB0aGlzLnN5bWJvbHMuZ2V0KHN5bWJvbCk7XHJcbiAgICAgICAgaWYocmV0ID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIHN5bWJvbCBcIiArIHN5bWJvbCk7XHJcbiAgICAgICAgcmV0dXJuIHJldDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRQcm9kdWN0aW9ucyhsZWZ0OiBOb25UZXJtaW5hbCk6IFByb2R1Y3Rpb25bXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvZHVjdGlvbnMuZmlsdGVyKHAgPT4gcC5nZXRMZWZ0KCkuZXF1YWxzKGxlZnQpKTtcclxuICAgIH1cclxuXHJcbiAgICB0b1N0cmluZygpOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCByZXQ6IHN0cmluZyA9IFwiXCI7XHJcbiAgICAgICAgZm9yKGxldCBwIG9mIHRoaXMucHJvZHVjdGlvbnMpIHtcclxuICAgICAgICAgICAgcmV0ICs9IHAudG9TdHJpbmcoKSArIFwiXFxuXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBCTkYgfTsiLCJpbXBvcnQgeyBMaXRlcmFsLCBUZXJtaW5hbCB9IGZyb20gXCIuL1Rlcm1pbmFsLmpzXCI7XHJcbmltcG9ydCB7IE1hdGNoZXIgfSBmcm9tIFwiLi9NYXRjaGVyLmpzXCI7XHJcbmltcG9ydCB7IFByb2R1Y3Rpb24gfSBmcm9tIFwiLi9Qcm9kdWN0aW9uLmpzXCI7XHJcbmltcG9ydCB7IFN5bSB9IGZyb20gXCIuL1N5bWJvbC5qc1wiO1xyXG5pbXBvcnQgeyBBdXRvY29tcGxldGVyIH0gZnJvbSBcIi4uL0F1dG9jb21wbGV0ZXIuanNcIjtcclxuaW1wb3J0IHsgTmFtZWQgfSBmcm9tIFwiLi9OYW1lZC5qc1wiO1xyXG5pbXBvcnQgeyBBdXRvY29tcGxldGlvbiB9IGZyb20gXCIuL0F1dG9jb21wbGV0aW9uLmpzXCI7XHJcblxyXG5jbGFzcyBEZWZhdWx0UGFyc2VkTm9kZSB7XHJcblxyXG4gICAgcHJpdmF0ZSBwYXJlbnQ6IERlZmF1bHRQYXJzZWROb2RlIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBjaGlsZHJlbjogRGVmYXVsdFBhcnNlZE5vZGVbXSA9IFtdO1xyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgc3ltYm9sOiBTeW07XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHByb2R1Y3Rpb246IFByb2R1Y3Rpb24gfCB1bmRlZmluZWQ7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IG1hdGNoZXI6IE1hdGNoZXI7XHJcblxyXG4gICAgcHJpdmF0ZSBuYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IobWF0Y2hlcjogTWF0Y2hlciwgc3ltYm9sOiBTeW0sIHByb2R1Y3Rpb246IFByb2R1Y3Rpb24gfCB1bmRlZmluZWQpIHtcclxuICAgICAgICB0aGlzLm1hdGNoZXIgPSBtYXRjaGVyO1xyXG5cdFx0dGhpcy5zeW1ib2wgPSBzeW1ib2w7XHJcblx0XHR0aGlzLnByb2R1Y3Rpb24gPSBwcm9kdWN0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFN5bWJvbCgpOiBTeW0ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN5bWJvbDtcclxuICAgIH1cclxuXHJcbiAgICBnZXROYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZSAhPT0gdW5kZWZpbmVkID8gdGhpcy5uYW1lIDogdGhpcy5zeW1ib2wuZ2V0U3ltYm9sKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0TmFtZShuYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFByb2R1Y3Rpb24oKTogUHJvZHVjdGlvbiB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvZHVjdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICBnZXRNYXRjaGVyKCk6IE1hdGNoZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1hdGNoZXI7XHJcbiAgICB9XHJcblxyXG4gICAgZG9lc0F1dG9jb21wbGV0ZSgpOiBib29sZWFuIHtcclxuICAgICAgICBsZXQgYXV0b2NvbXBsZXRpb246IEF1dG9jb21wbGV0aW9uW10gfCB1bmRlZmluZWQgPSB0aGlzLmdldEF1dG9jb21wbGV0aW9uKHRydWUpO1xyXG4gICAgICAgIHJldHVybiBhdXRvY29tcGxldGlvbiAhPT0gbnVsbCAmJiBhdXRvY29tcGxldGlvbiAhPT0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEF1dG9jb21wbGV0aW9uKF9qdXN0Q2hlY2s6IGJvb2xlYW4pOiBBdXRvY29tcGxldGlvbltdIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICBpZih0aGlzLnN5bWJvbCA9PT0gbnVsbCB8fCB0aGlzLnN5bWJvbCA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICBpZih0aGlzLnN5bWJvbCBpbnN0YW5jZW9mIExpdGVyYWwpXHJcbiAgICAgICAgICAgIHJldHVybiBBdXRvY29tcGxldGlvbi5saXRlcmFsKHRoaXMsIFt0aGlzLnN5bWJvbC5nZXRTeW1ib2woKV0pO1xyXG5cclxuICAgICAgICBsZXQgbmFtZTogc3RyaW5nID0gdGhpcy5nZXROYW1lKCk7XHJcbiAgICAgICAgaWYobmFtZSA9PT0gTmFtZWQuVU5OQU1FRClcclxuICAgICAgICAgICAgbmFtZSA9IHRoaXMuc3ltYm9sLmdldFN5bWJvbCgpO1xyXG5cclxuICAgICAgICBpZih0aGlzLnN5bWJvbC5pc1Rlcm1pbmFsKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyc2VkU3RyaW5nKCkubGVuZ3RoID4gMCA/IEF1dG9jb21wbGV0aW9uLnZldG8odGhpcykgOiBBdXRvY29tcGxldGlvbi5wYXJhbWV0ZXJpemVkKHRoaXMsIG5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIG51bUNoaWxkcmVuKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4ubGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIGdldENoaWxkcmVuKCk6IERlZmF1bHRQYXJzZWROb2RlW10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuO1xyXG4gICAgfVxyXG5cclxuICAgIGdldENoaWxkKGluZGV4OiBudW1iZXIpOiBEZWZhdWx0UGFyc2VkTm9kZTtcclxuICAgIGdldENoaWxkKG5hbWU6IHN0cmluZyk6IERlZmF1bHRQYXJzZWROb2RlO1xyXG4gICAgZ2V0Q2hpbGQobjogYW55KTogRGVmYXVsdFBhcnNlZE5vZGUgfCB1bmRlZmluZWQge1xyXG4gICAgICAgIGlmKHR5cGVvZihuKSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW5bbiBhcyBudW1iZXJdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKHR5cGVvZihuKSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4uZmluZCgodmFsdWU6IERlZmF1bHRQYXJzZWROb2RlKSA9PiB2YWx1ZS5nZXROYW1lKCkgPT09IG4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZENoaWxkcmVuKC4uLmNoaWxkcmVuOiBEZWZhdWx0UGFyc2VkTm9kZVtdKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKC4uLmNoaWxkcmVuKTtcclxuICAgICAgICBmb3IobGV0IGNoaWxkIG9mIGNoaWxkcmVuKVxyXG4gICAgICAgICAgICBjaGlsZC5wYXJlbnQgPSB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFBhcmVudCgpOiBEZWZhdWx0UGFyc2VkTm9kZSB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50O1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZUFsbENoaWxkcmVuKCk6IHZvaWQge1xyXG4gICAgICAgIGZvcihsZXQgY2hpbGQgb2YgdGhpcy5jaGlsZHJlbilcclxuICAgICAgICAgICAgY2hpbGQucGFyZW50ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuY2hpbGRyZW4ubGVuZ3RoID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBldmFsdWF0ZShuOiBudW1iZXIpOiBhbnk7XHJcblxyXG4gICAgZXZhbHVhdGUoLi4ubjogc3RyaW5nW10pOiBhbnk7XHJcblxyXG4gICAgZXZhbHVhdGUoLi4ubjogYW55KTogYW55IHtcclxuICAgICAgICBpZihuLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBpZih0aGlzLnN5bWJvbC5pc1Rlcm1pbmFsKCkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuc3ltYm9sIGFzIFRlcm1pbmFsKS5ldmFsdWF0ZSh0aGlzLmdldE1hdGNoZXIoKSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFBhcnNlZFN0cmluZygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYodHlwZW9mKG5bMF0pID09PSAnbnVtYmVyJylcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW5bbl0uZXZhbHVhdGUoKTtcclxuXHJcbiAgICAgICAgaWYodHlwZW9mKG5bMF0pID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBsZXQgcG46IERlZmF1bHRQYXJzZWROb2RlID0gdGhpcztcclxuICAgICAgICAgICAgZm9yKGxldCBuYW1lIG9mIG4pIHtcclxuICAgICAgICAgICAgICAgIHBuID0gcG4uZ2V0Q2hpbGQobmFtZSk7XHJcbiAgICAgICAgICAgICAgICBpZihwbiA9PT0gbnVsbCB8fCBwbiA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHBuLmV2YWx1YXRlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFBhcnNlZFN0cmluZyguLi5uYW1lczogc3RyaW5nW10pOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCBwbjogRGVmYXVsdFBhcnNlZE5vZGUgPSB0aGlzO1xyXG4gICAgICAgIGZvcihsZXQgbmFtZSBvZiBuYW1lcykge1xyXG4gICAgICAgICAgICBwbiA9IHBuLmdldENoaWxkKG5hbWUpO1xyXG4gICAgICAgICAgICBpZihwbiA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwbi5nZXRNYXRjaGVyKCkucGFyc2VkO1xyXG4gICAgfVxyXG5cclxuICAgIHRvU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TWF0Y2hlcigpLnBhcnNlZDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHsgRGVmYXVsdFBhcnNlZE5vZGUgfTsiLCJjbGFzcyBMZXhlciB7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGlucHV0OiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIHBvczogbnVtYmVyID0gMDtcclxuICBcclxuICAgIGNvbnN0cnVjdG9yKGlucHV0OiBzdHJpbmcpIHtcclxuICAgICAgdGhpcy5pbnB1dCA9IGlucHV0O1xyXG4gICAgfVxyXG4gIFxyXG4gICAgZ2V0UG9zaXRpb24oKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMucG9zO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFBvc2l0aW9uKHBvczogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgIHRoaXMucG9zID0gcG9zO1xyXG4gICAgfVxyXG5cclxuICAgIGZ3ZChsZW46IG51bWJlcik6IHZvaWQge1xyXG4gICAgICB0aGlzLnBvcyArPSBsZW47XHJcbiAgICB9XHJcbiAgXHJcbiAgICBwZWVrKG46IG51bWJlciA9IDApOiBzdHJpbmcge1xyXG4gICAgICBsZXQgcDogbnVtYmVyID0gdGhpcy5wb3MgKyBuO1xyXG4gICAgICByZXR1cm4gcCA8IHRoaXMuaW5wdXQubGVuZ3RoID8gdGhpcy5pbnB1dC5jaGFyQXQocCkgOiBcIiRcIjtcclxuICAgIH1cclxuXHJcbiAgICBzdWJzdHJpbmcoZnJvbTogbnVtYmVyLCB0bz86IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICAgIGlmICh0byAhPT0gdW5kZWZpbmVkICYmIHRvID4gdGhpcy5pbnB1dC5sZW5ndGgpIHtcclxuICAgICAgICB0byA9IHRoaXMuaW5wdXQubGVuZ3RoO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB0aGlzLmlucHV0LnN1YnN0cmluZyhmcm9tLCB0byk7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBpc0RvbmUoKTogYm9vbGVhbiB7XHJcbiAgICAgIHJldHVybiB0aGlzLnBvcyA+IHRoaXMuaW5wdXQubGVuZ3RoO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgaXNBdEVuZChmd2Q6IG51bWJlciA9IDApOiBib29sZWFuIHtcclxuICAgICAgcmV0dXJuIHRoaXMucG9zICsgZndkID09PSB0aGlzLmlucHV0Lmxlbmd0aDtcclxuICAgIH1cclxuICBcclxuICAgIHRvU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICAgIHJldHVybiB0aGlzLmlucHV0LnN1YnN0cmluZygwLCB0aGlzLnBvcykgKyBcIiAtLSBcIiArIHRoaXMuaW5wdXQuc3Vic3RyaW5nKHRoaXMucG9zKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGV4cG9ydCB7IExleGVyIH07XHJcbiAgIiwiaW1wb3J0IHsgUGFyc2luZ1N0YXRlIH0gZnJvbSAnLi9QYXJzaW5nU3RhdGUuanMnO1xyXG5cclxuY2xhc3MgTWF0Y2hlciB7XHJcblxyXG4gICAgcmVhZG9ubHkgc3RhdGU6IFBhcnNpbmdTdGF0ZTtcclxuICAgIHJlYWRvbmx5IHBvczogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgcGFyc2VkOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3Ioc3RhdGU6IFBhcnNpbmdTdGF0ZSwgcG9zOiBudW1iZXIsIHBhcnNlZDogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xyXG4gICAgICAgIHRoaXMucG9zID0gcG9zO1xyXG4gICAgICAgIHRoaXMucGFyc2VkID0gcGFyc2VkO1xyXG4gICAgfVxyXG5cclxuICAgIGlzQmV0dGVyVGhhbihvOiBNYXRjaGVyIHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYobyA9PT0gdW5kZWZpbmVkIHx8IG8gPT09IG51bGwpXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIGlmKHRoaXMuc3RhdGUuaXNCZXR0ZXJUaGFuKG8uc3RhdGUpKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICBpZihvLnN0YXRlLmlzQmV0dGVyVGhhbih0aGlzLnN0YXRlKSlcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIGxldCB0UGFyc2VkTGVuZ3RoID0gdGhpcy5wb3MgKyB0aGlzLnBhcnNlZC5sZW5ndGg7XHJcbiAgICAgICAgbGV0IG9QYXJzZWRMZW5ndGggPSBvLnBvcyArIG8ucGFyc2VkLmxlbmd0aDtcclxuICAgICAgICByZXR1cm4gdFBhcnNlZExlbmd0aCA+PSBvUGFyc2VkTGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIHRvU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuc3RhdGUudG9TdHJpbmcoKX06ICcke3RoaXMucGFyc2VkfScgKCR7dGhpcy5wb3N9KWA7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IE1hdGNoZXIgfTsiLCJpbXBvcnQgeyBSZXByZXNlbnRzU3ltYm9sIH0gZnJvbSBcIi4vUmVwcmVzZW50c1N5bWJvbC5qc1wiO1xyXG5pbXBvcnQgeyBTeW0gfSBmcm9tIFwiLi9TeW1ib2wuanNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBOYW1lZDxUIGV4dGVuZHMgUmVwcmVzZW50c1N5bWJvbD4ge1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgVU5OQU1FRDogc3RyaW5nID0gXCJVTk5BTUVEXCI7XHJcblxyXG4gICAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xyXG5cclxuICAgIHJlYWRvbmx5IG9iamVjdDogVDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihvYmplY3Q6IFQsIG5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHRoaXMub2JqZWN0ID0gb2JqZWN0O1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWUgIT09IHVuZGVmaW5lZCA/IG5hbWUgOiBOYW1lZC5VTk5BTUVEO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE5hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCgpOiBUIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5vYmplY3Q7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U3ltYm9sKCk6IFN5bSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub2JqZWN0LmdldFJlcHJlc2VudGVkU3ltYm9sKCk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBCTkYgfSBmcm9tIFwiLi9CTkYuanNcIjtcclxuaW1wb3J0IHsgTmFtZWQgfSBmcm9tIFwiLi9OYW1lZC5qc1wiO1xyXG5pbXBvcnQgeyBQcm9kdWN0aW9uIH0gZnJvbSBcIi4vUHJvZHVjdGlvbi5qc1wiO1xyXG5pbXBvcnQgeyBTeW0gfSBmcm9tIFwiLi9TeW1ib2wuanNcIjtcclxuXHJcbmNsYXNzIE5vblRlcm1pbmFsIGV4dGVuZHMgU3ltIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihzeW1ib2w6IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKHN5bWJvbCk7XHJcbiAgICB9XHJcblxyXG4gICAgb3ZlcnJpZGUgaXNUZXJtaW5hbCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgb3ZlcnJpZGUgaXNOb25UZXJtaW5hbCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBvdmVycmlkZSBpc0Vwc2lsb24oKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHdpdGhOYW1lKG5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCk6IE5hbWVkPE5vblRlcm1pbmFsPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBOYW1lZDxOb25UZXJtaW5hbD4odGhpcywgbmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgdXNlcyhzeW1ib2w6IFN5bSwgYm5mOiBCTkYsIHByb2dyZXNzaW5nPzogU2V0PHN0cmluZz4pOiBib29sZWFuIHtcclxuICAgICAgICBpZihwcm9ncmVzc2luZyA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICBwcm9ncmVzc2luZyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xyXG4gICAgICAgIGNvbnN0IHByb2R1Y3Rpb25zOiBQcm9kdWN0aW9uW10gPSBibmYuZ2V0UHJvZHVjdGlvbnModGhpcyk7XHJcbiAgICAgICAgZm9yKGNvbnN0IHAgb2YgcHJvZHVjdGlvbnMpIHtcclxuICAgICAgICAgICAgaWYocC50b1N0cmluZygpIGluIHByb2dyZXNzaW5nKVxyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIHByb2dyZXNzaW5nLmFkZChwLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICBjb25zdCByaHM6IFN5bVtdID0gcC5nZXRSaWdodCgpO1xyXG4gICAgICAgICAgICBmb3IoY29uc3QgclN5bSBvZiByaHMpIHtcclxuICAgICAgICAgICAgICAgIGlmKHJTeW0uZXF1YWxzKHN5bWJvbCkpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmKHJTeW0gaW5zdGFuY2VvZiBOb25UZXJtaW5hbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHJTeW0udXNlcyhzeW1ib2wsIGJuZiwgcHJvZ3Jlc3NpbmcpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgb3ZlcnJpZGUgdG9TdHJpbmcoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gXCI8XCIgKyB0aGlzLmdldFN5bWJvbCgpICsgXCI+XCI7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIG1ha2VSYW5kb21TeW1ib2woKTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgbGVuZ3RoID0gODtcclxuICAgICAgICBjb25zdCBjaGFyYWN0ZXJzID0nQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODknO1xyXG4gICAgICAgIGNvbnN0IGNoYXJhY3RlcnNMZW5ndGggPSBjaGFyYWN0ZXJzLmxlbmd0aDtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gJyc7XHJcbiAgICAgICAgZm9yICggbGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKysgKVxyXG4gICAgICAgICAgICByZXN1bHQgKz0gY2hhcmFjdGVycy5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2hhcmFjdGVyc0xlbmd0aCkpO1xyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBOb25UZXJtaW5hbCB9O1xyXG4iLCJpbXBvcnQgeyBEZWZhdWx0UGFyc2VkTm9kZSB9IGZyb20gXCIuL0RlZmF1bHRQYXJzZWROb2RlLmpzXCI7XHJcbmltcG9ydCB7IE1hdGNoZXIgfSBmcm9tIFwiLi9NYXRjaGVyLmpzXCI7XHJcbmltcG9ydCB7IFByb2R1Y3Rpb24gfSBmcm9tIFwiLi9Qcm9kdWN0aW9uLmpzXCI7XHJcbmltcG9ydCB7IFN5bSB9IGZyb20gXCIuL1N5bWJvbC5qc1wiO1xyXG5cclxuaW50ZXJmYWNlIFBhcnNlZE5vZGVGYWN0b3J5IHtcclxuICAgIGNyZWF0ZU5vZGUobWF0Y2hlcjogTWF0Y2hlciwgc3ltYm9sOiBTeW0sIHByb2R1Y3Rpb246IFByb2R1Y3Rpb24gfCB1bmRlZmluZWQpOiBEZWZhdWx0UGFyc2VkTm9kZVxyXG59XHJcblxyXG5tb2R1bGUgUGFyc2VkTm9kZUZhY3Rvcnkge1xyXG4gICAgZXhwb3J0IGNvbnN0IERFRkFVTFQ6IFBhcnNlZE5vZGVGYWN0b3J5ID0ge1xyXG4gICAgICAgIGNyZWF0ZU5vZGU6IChtYXRjaGVyOiBNYXRjaGVyLCBzeW1ib2w6IFN5bSwgcHJvZHVjdGlvbjogUHJvZHVjdGlvbiB8IHVuZGVmaW5lZCk6IERlZmF1bHRQYXJzZWROb2RlID0+IG5ldyBEZWZhdWx0UGFyc2VkTm9kZShtYXRjaGVyLCBzeW1ib2wsIHByb2R1Y3Rpb24pXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IFBhcnNlZE5vZGVGYWN0b3J5IH07XHJcbiIsImNsYXNzIFBhcnNpbmdTdGF0ZSB7XHJcblxyXG4gICAgc3RhdGljIHJlYWRvbmx5IFNVQ0NFU1NGVUw6ICAgUGFyc2luZ1N0YXRlID0gbmV3IFBhcnNpbmdTdGF0ZSgwLCAnU1VDQ0VTU0ZVTCcpO1xyXG4gICAgc3RhdGljIHJlYWRvbmx5IEVORF9PRl9JTlBVVDogUGFyc2luZ1N0YXRlID0gbmV3IFBhcnNpbmdTdGF0ZSgxLCAnRU5EX09GX0lOUFVUJyk7XHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgRkFJTEVEOiAgICAgICBQYXJzaW5nU3RhdGUgPSBuZXcgUGFyc2luZ1N0YXRlKDIsICdGQUlMRUQnKTtcclxuICAgIHN0YXRpYyByZWFkb25seSBOT1RfUEFSU0VEOiAgIFBhcnNpbmdTdGF0ZSA9IG5ldyBQYXJzaW5nU3RhdGUoMywgJ05PVF9QQVJTRUQnKTtcclxuXHJcbiAgICByZWFkb25seSBvcmRpbmFsOiBudW1iZXI7XHJcbiAgICByZWFkb25seSBsYWJlbDogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG9yZGluYWw6IG51bWJlciwgbGFiZWw6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMub3JkaW5hbCA9IG9yZGluYWw7XHJcbiAgICAgICAgdGhpcy5sYWJlbCA9IGxhYmVsO1xyXG4gICAgfVxyXG5cclxuICAgIGlzQmV0dGVyVGhhbihvOiBQYXJzaW5nU3RhdGUpOiBib29sZWFuIHtcclxuICAgICAgcmV0dXJuIHRoaXMub3JkaW5hbCA8IG8ub3JkaW5hbFxyXG4gICAgfVxyXG5cclxuICAgIHRvU3RyaW5nKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxhYmVsO1xyXG4gICAgfVxyXG5cclxuICAgIGVxdWFscyhvOiBhbnkpOiBib29sZWFuIHtcclxuICAgICAgaWYoIShvIGluc3RhbmNlb2YgUGFyc2luZ1N0YXRlKSlcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIHJldHVybiB0aGlzLm9yZGluYWwgPT09IChvIGFzIFBhcnNpbmdTdGF0ZSkub3JkaW5hbDtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgZXhwb3J0IHsgUGFyc2luZ1N0YXRlIH07XHJcbiAgIiwiaW1wb3J0IHsgTm9uVGVybWluYWwgfSBmcm9tIFwiLi9Ob25UZXJtaW5hbC5qc1wiO1xyXG5pbXBvcnQgeyBUZXJtaW5hbCB9IGZyb20gXCIuL1Rlcm1pbmFsLmpzXCI7XHJcbmltcG9ydCB7IFN5bSB9IGZyb20gXCIuL1N5bWJvbC5qc1wiO1xyXG5pbXBvcnQgeyBEZWZhdWx0UGFyc2VkTm9kZSB9IGZyb20gXCIuL0RlZmF1bHRQYXJzZWROb2RlLmpzXCI7XHJcblxyXG50eXBlIEFzdEJ1aWxkZXIgPSAocGFyZW50OiBEZWZhdWx0UGFyc2VkTm9kZSwgLi4uY2hpbGRyZW46IERlZmF1bHRQYXJzZWROb2RlW10pID0+IHZvaWQ7XHJcbnR5cGUgRXh0ZW5zaW9uTGlzdGVuZXIgPSAocGFyZW50OiBEZWZhdWx0UGFyc2VkTm9kZSwgLi4uY2hpbGRyZW46IERlZmF1bHRQYXJzZWROb2RlW10pID0+IHZvaWQ7XHJcblxyXG5tb2R1bGUgQXN0QnVpbGRlciB7XHJcblx0ZXhwb3J0IGNvbnN0IERFRkFVTFQ6IEFzdEJ1aWxkZXIgPSAocGFyZW50OiBEZWZhdWx0UGFyc2VkTm9kZSwgLi4uY2hpbGRyZW46IERlZmF1bHRQYXJzZWROb2RlW10pOiB2b2lkID0+IHBhcmVudC5hZGRDaGlsZHJlbiguLi5jaGlsZHJlbik7XHJcbn1cclxuXHJcbmNsYXNzIFByb2R1Y3Rpb24ge1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBsZWZ0OiBOb25UZXJtaW5hbDtcclxuXHRwcml2YXRlIHJlYWRvbmx5IHJpZ2h0OiBTeW1bXTtcclxuXHJcblx0cHJpdmF0ZSBhc3RCdWlsZGVyOiBBc3RCdWlsZGVyIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xyXG5cdHByaXZhdGUgZXh0ZW5zaW9uTGlzdGVuZXI6IEV4dGVuc2lvbkxpc3RlbmVyIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGxlZnQ6IE5vblRlcm1pbmFsLCAuLi5yaWdodDogU3ltW10pIHtcclxuICAgICAgICB0aGlzLmxlZnQgPSBsZWZ0O1xyXG4gICAgICAgIHRoaXMucmlnaHQgPSBQcm9kdWN0aW9uLnJlbW92ZUVwc2lsb24ocmlnaHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyByZW1vdmVFcHNpbG9uKGFycjogU3ltW10pOiBTeW1bXSB7XHJcbiAgICAgICAgcmV0dXJuIGFyci5maWx0ZXIoKHZhbHVlOiBTeW0pID0+ICF2YWx1ZS5lcXVhbHMoVGVybWluYWwuRVBTSUxPTikpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldExlZnQoKTogTm9uVGVybWluYWwge1xyXG5cdFx0cmV0dXJuIHRoaXMubGVmdDtcclxuXHR9XHJcblxyXG5cdGdldFJpZ2h0KCk6IFN5bVtdIHtcclxuXHRcdHJldHVybiB0aGlzLnJpZ2h0O1xyXG5cdH1cclxuXHJcblx0c2V0QXN0QnVpbGRlcihhc3RCdWlsZGVyOiBBc3RCdWlsZGVyKSB7XHJcblx0XHR0aGlzLmFzdEJ1aWxkZXIgPSBhc3RCdWlsZGVyO1xyXG5cdH1cclxuXHJcblx0YnVpbHRBU1QocGFyZW50OiBEZWZhdWx0UGFyc2VkTm9kZSwgLi4uY2hpbGRyZW46IERlZmF1bHRQYXJzZWROb2RlW10pOiB2b2lkIHtcclxuXHRcdGlmKHRoaXMuYXN0QnVpbGRlciAhPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdHRoaXMuYXN0QnVpbGRlcihwYXJlbnQsIC4uLmNoaWxkcmVuKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0cGFyZW50LmFkZENoaWxkcmVuKC4uLmNoaWxkcmVuKTtcclxuXHR9XHJcblxyXG5cdHdhc0V4dGVuZGVkKHBhcmVudDogRGVmYXVsdFBhcnNlZE5vZGUsIC4uLmNoaWxkcmVuOiBEZWZhdWx0UGFyc2VkTm9kZVtdKTogdm9pZCB7XHJcblx0XHRpZih0aGlzLmV4dGVuc2lvbkxpc3RlbmVyICE9PSB1bmRlZmluZWQpXHJcblx0XHRcdHRoaXMuZXh0ZW5zaW9uTGlzdGVuZXIocGFyZW50LCAuLi5jaGlsZHJlbik7XHJcblx0fVxyXG5cclxuXHRvbkV4dGVuc2lvbihsaXN0ZW5lcjogRXh0ZW5zaW9uTGlzdGVuZXIpOiB2b2lkIHtcclxuXHRcdGlmKHRoaXMuZXh0ZW5zaW9uTGlzdGVuZXIgIT09IHVuZGVmaW5lZClcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiRXh0ZW5zaW9uTGlzdGVuZXIgY2Fubm90IGJlIG92ZXJ3cml0dGVuXCIpO1xyXG5cdFx0dGhpcy5leHRlbnNpb25MaXN0ZW5lciA9IGxpc3RlbmVyO1xyXG5cdH1cclxuXHJcblx0dG9TdHJpbmcoKTogc3RyaW5nIHtcclxuXHRcdGxldCBsZWZ0OiBzdHJpbmcgPSB0aGlzLmdldExlZnQoKS50b1N0cmluZygpO1xyXG4gICAgICAgIGxldCBzYjogc3RyaW5nID0gXCJcIjtcclxuXHRcdGZvcihsZXQgazogbnVtYmVyID0gMDsgayA8ICg1MCAtIGxlZnQubGVuZ3RoKTsgaysrKVxyXG5cdFx0XHRzYiArPSAnICc7XHJcblx0XHRzYiArPSBsZWZ0O1xyXG5cdFx0c2IgKz0gXCIgLT4gXCI7XHJcblx0XHRsZXQgcmlnaHQ6IFN5bVtdID0gdGhpcy5nZXRSaWdodCgpO1xyXG5cdFx0Zm9yKGxldCBzeW1ib2wgb2YgcmlnaHQpIHtcclxuICAgICAgICAgICAgc2IgKz0gc3ltYm9sICsgXCIgXCI7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gc2I7XHJcblx0fVxyXG5cclxuICAgIGVxdWFscyhvOiBhbnkpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoIShvIGluc3RhbmNlb2YgUHJvZHVjdGlvbikpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICBjb25zdCBwOiBQcm9kdWN0aW9uID0gbyBhcyBQcm9kdWN0aW9uO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxlZnQuZXF1YWxzKHAubGVmdCkgJiYgUHJvZHVjdGlvbi5hcnJheXNFcXVhbCh0aGlzLnJpZ2h0LCBwLnJpZ2h0KTtcclxuXHR9XHJcblxyXG4gICAgc3RhdGljIGFycmF5c0VxdWFsKGE6IGFueVtdLCBiOiBhbnlbXSkge1xyXG4gICAgICAgIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcclxuICAgICAgXHJcbiAgICAgICAgLy8gSWYgeW91IGRvbid0IGNhcmUgYWJvdXQgdGhlIG9yZGVyIG9mIHRoZSBlbGVtZW50cyBpbnNpZGVcclxuICAgICAgICAvLyB0aGUgYXJyYXksIHlvdSBzaG91bGQgc29ydCBib3RoIGFycmF5cyBoZXJlLlxyXG4gICAgICAgIC8vIFBsZWFzZSBub3RlIHRoYXQgY2FsbGluZyBzb3J0IG9uIGFuIGFycmF5IHdpbGwgbW9kaWZ5IHRoYXQgYXJyYXkuXHJcbiAgICAgICAgLy8geW91IG1pZ2h0IHdhbnQgdG8gY2xvbmUgeW91ciBhcnJheSBmaXJzdC5cclxuICAgICAgXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICBpZiAoIWFbaV0uZXF1YWxzKGJbaV0pKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBQcm9kdWN0aW9uLCBBc3RCdWlsZGVyLCBFeHRlbnNpb25MaXN0ZW5lciB9O1xyXG4iLCJpbXBvcnQgeyBBdXRvY29tcGxldGVyIH0gZnJvbSBcIi4uL0F1dG9jb21wbGV0ZXIuanNcIjtcclxuaW1wb3J0IHsgQXV0b2NvbXBsZXRpb24gfSBmcm9tIFwiLi9BdXRvY29tcGxldGlvbi5qc1wiO1xyXG5pbXBvcnQgeyBQYXJzZWROb2RlRmFjdG9yeSB9IGZyb20gXCIuL1BhcnNlZE5vZGVGYWN0b3J5LmpzXCI7XHJcbmltcG9ydCB7IEJORiB9IGZyb20gXCIuL0JORi5qc1wiO1xyXG5pbXBvcnQgeyBEZWZhdWx0UGFyc2VkTm9kZSB9IGZyb20gXCIuL0RlZmF1bHRQYXJzZWROb2RlLmpzXCI7XHJcbmltcG9ydCB7IExleGVyIH0gZnJvbSBcIi4vTGV4ZXIuanNcIjtcclxuaW1wb3J0IHsgTWF0Y2hlciB9IGZyb20gXCIuL01hdGNoZXIuanNcIjtcclxuaW1wb3J0IHsgTm9uVGVybWluYWwgfSBmcm9tIFwiLi9Ob25UZXJtaW5hbC5qc1wiO1xyXG5pbXBvcnQgeyBQYXJzaW5nU3RhdGUgfSBmcm9tIFwiLi9QYXJzaW5nU3RhdGUuanNcIjtcclxuaW1wb3J0IHsgUHJvZHVjdGlvbiB9IGZyb20gXCIuL1Byb2R1Y3Rpb24uanNcIjtcclxuaW1wb3J0IHsgU3ltIH0gZnJvbSBcIi4vU3ltYm9sLmpzXCI7XHJcbmltcG9ydCB7IFRlcm1pbmFsIH0gZnJvbSBcIi4vVGVybWluYWwuanNcIjtcclxuaW1wb3J0IHsgUGFyc2VFeGNlcHRpb24gfSBmcm9tIFwiLi4vUGFyc2VFeGNlcHRpb24uanNcIjtcclxuXHJcbmNsYXNzIFJEUGFyc2VyIHtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgcGFyc2VkTm9kZUZhY3Rvcnk6IFBhcnNlZE5vZGVGYWN0b3J5O1xyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZ3JhbW1hcjogQk5GO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBsZXhlcjogTGV4ZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoZ3JhbW1hcjogQk5GLCBsZXhlcjogTGV4ZXIsIHBhcnNlZE5vZGVGYWN0b3J5OiBQYXJzZWROb2RlRmFjdG9yeSkge1xyXG4gICAgICAgIHRoaXMuZ3JhbW1hciA9IGdyYW1tYXI7XHJcbiAgICAgICAgdGhpcy5sZXhlciA9IGxleGVyO1xyXG4gICAgICAgIHRoaXMucGFyc2VkTm9kZUZhY3RvcnkgPSBwYXJzZWROb2RlRmFjdG9yeTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRMZXhlcigpOiBMZXhlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGV4ZXI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0R3JhbW1hcigpOiBCTkYge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdyYW1tYXI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UGFyc2VkTm9kZUZhY3RvcnkoKTogUGFyc2VkTm9kZUZhY3Rvcnkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlZE5vZGVGYWN0b3J5O1xyXG4gICAgfVxyXG5cclxuICAgIHBhcnNlKGF1dG9jb21wbGV0aW9ucz86IEFycmF5PEF1dG9jb21wbGV0aW9uIHwgdW5kZWZpbmVkPik6IERlZmF1bHRQYXJzZWROb2RlIHtcclxuICAgICAgICBsZXQgc2VxID0gbmV3IFN5bWJvbFNlcXVlbmNlKEJORi5BUlRJRklDSUFMX1NUQVJUX1NZTUJPTCwgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xyXG4gICAgICAgIGxldCBlbmRPZklucHV0OiBTeW1ib2xTZXF1ZW5jZVtdID0gW107XHJcbiAgICAgICAgbGV0IHBhcnNlZFNlcXVlbmNlOiBTeW1ib2xTZXF1ZW5jZSA9IHRoaXMucGFyc2VSZWN1cnNpdmUoc2VxLCBlbmRPZklucHV0KTtcclxuICAgICAgICBpZihhdXRvY29tcGxldGlvbnMgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgdGhpcy5jb2xsZWN0QXV0b2NvbXBsZXRpb25zKGVuZE9mSW5wdXQsIGF1dG9jb21wbGV0aW9ucyBhcyBBdXRvY29tcGxldGlvbltdKVxyXG4gICAgICAgIGxldCBsYXN0OiBEZWZhdWx0UGFyc2VkTm9kZVtdID0gW107XHJcbiAgICAgICAgbGV0IHJldDogRGVmYXVsdFBhcnNlZE5vZGUgPSB0aGlzLmNyZWF0ZVBhcnNlZFRyZWUocGFyc2VkU2VxdWVuY2UsIGxhc3QpO1xyXG4gICAgICAgIHJldCA9IHRoaXMuYnVpbGRBc3QocmV0KTtcclxuICAgICAgICBpZihyZXQuZ2V0TWF0Y2hlcigpLnN0YXRlID09PSBQYXJzaW5nU3RhdGUuRkFJTEVEKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgUGFyc2VFeGNlcHRpb24ocmV0LCBsYXN0WzBdLCB0aGlzKTtcclxuICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYnVpbGRBc3QocG46IERlZmF1bHRQYXJzZWROb2RlKTogRGVmYXVsdFBhcnNlZE5vZGUge1xyXG4gICAgICAgIGxldCBjaGlsZHJlbjogRGVmYXVsdFBhcnNlZE5vZGVbXSA9IFtdO1xyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBwbi5udW1DaGlsZHJlbigpOyBpKyspIHtcclxuICAgICAgICAgICAgY2hpbGRyZW4ucHVzaCh0aGlzLmJ1aWxkQXN0KHBuLmdldENoaWxkKGkpKSlcclxuICAgICAgICB9XHJcbiAgICAgICAgcG4ucmVtb3ZlQWxsQ2hpbGRyZW4oKTtcclxuICAgICAgICBsZXQgcHJvZHVjdGlvbiA9IHBuLmdldFByb2R1Y3Rpb24oKTtcclxuICAgICAgICBpZihwcm9kdWN0aW9uICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHByb2R1Y3Rpb24uYnVpbHRBU1QocG4sIC4uLmNoaWxkcmVuKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHBuO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY29sbGVjdEF1dG9jb21wbGV0aW9ucyhlbmRPZklucHV0OiBTeW1ib2xTZXF1ZW5jZVtdLCBhdXRvY29tcGxldGlvbnM6IEF1dG9jb21wbGV0aW9uW10pOiB2b2lkIHtcclxuICAgICAgICBpZihhdXRvY29tcGxldGlvbnMgPT09IG51bGwgfHwgYXV0b2NvbXBsZXRpb25zID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImF1dG9jb21wbGV0aW9ucyBzaG91bGQgYmUgZGVmaW5lZCBhdCB0aGlzIHBvaW50XCIpO1xyXG5cclxuICAgICAgICBjb25zdCBhdXRvY29tcGxldGluZ1BhcmVudHM6IERlZmF1bHRQYXJzZWROb2RlW10gPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IHNlcSBvZiBlbmRPZklucHV0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29sbGVjdEF1dG9jb21wbGV0aW5nUGFyZW50cyhzZXEsIGF1dG9jb21wbGV0aW5nUGFyZW50cyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBkb25lOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoKTtcclxuICAgICAgICBmb3IoY29uc3QgYXV0b2NvbXBsZXRpbmdQYXJlbnQgb2YgYXV0b2NvbXBsZXRpbmdQYXJlbnRzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHByb2QgPSBhdXRvY29tcGxldGluZ1BhcmVudC5nZXRQcm9kdWN0aW9uKCk7XHJcbiAgICAgICAgICAgIGxldCBrZXk6IHN0cmluZztcclxuICAgICAgICAgICAgaWYocHJvZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBrZXkgPSBwcm9kLmdldExlZnQoKS5nZXRTeW1ib2woKSArIFwiOlwiO1xyXG4gICAgICAgICAgICAgICAgZm9yKGNvbnN0IHMgb2YgcHJvZC5nZXRSaWdodCgpKVxyXG4gICAgICAgICAgICAgICAgICAgIGtleSArPSBzLmdldFN5bWJvbCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAga2V5ID0gYXV0b2NvbXBsZXRpbmdQYXJlbnQuZ2V0U3ltYm9sKCkuZ2V0U3ltYm9sKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoIWRvbmUuaGFzKGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHZldG86IGJvb2xlYW4gPSB0aGlzLmFkZEF1dG9jb21wbGV0aW9ucyhhdXRvY29tcGxldGluZ1BhcmVudCwgYXV0b2NvbXBsZXRpb25zKTtcclxuICAgICAgICAgICAgICAgIGRvbmUuYWRkKGtleSk7XHJcbiAgICAgICAgICAgICAgICBpZih2ZXRvKVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY29sbGVjdEF1dG9jb21wbGV0aW5nUGFyZW50cyhzeW1ib2xTZXF1ZW5jZTogU3ltYm9sU2VxdWVuY2UsIGF1dG9jb21wbGV0aW5nUGFyZW50czogQXJyYXk8RGVmYXVsdFBhcnNlZE5vZGU+KTogdm9pZCB7XHJcbiAgICAgICAgbGV0IGxhc3Q6IERlZmF1bHRQYXJzZWROb2RlW10gPSBbXTtcclxuICAgICAgICB0aGlzLmNyZWF0ZVBhcnNlZFRyZWUoc3ltYm9sU2VxdWVuY2UsIGxhc3QpO1xyXG5cclxuICAgICAgICAvLyBnZXQgYSB0cmFjZSB0byB0aGUgcm9vdFxyXG4gICAgICAgIGxldCBwYXRoVG9Sb290OiBEZWZhdWx0UGFyc2VkTm9kZVtdID0gW107XHJcbiAgICAgICAgbGV0IHBhcmVudDogRGVmYXVsdFBhcnNlZE5vZGUgfCB1bmRlZmluZWQgPSBsYXN0WzBdO1xyXG4gICAgICAgIHdoaWxlKHBhcmVudCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHBhdGhUb1Jvb3QucHVzaChwYXJlbnQpO1xyXG4gICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQuZ2V0UGFyZW50KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBmaW5kIHRoZSBub2RlIGNsb3Nlc3QgdG8gcm9vdCB3aGljaCBwcm92aWRlcyBhdXRvY29tcGxldGlvblxyXG4gICAgICAgIGxldCBhdXRvY29tcGxldGluZ1BhcmVudDogRGVmYXVsdFBhcnNlZE5vZGUgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgZm9yKGxldCBpID0gcGF0aFRvUm9vdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICBsZXQgdG1wID0gcGF0aFRvUm9vdFtpXTtcclxuICAgICAgICAgICAgaWYodG1wLmRvZXNBdXRvY29tcGxldGUoKSkge1xyXG4gICAgICAgICAgICAgICAgYXV0b2NvbXBsZXRpbmdQYXJlbnQgPSB0bXA7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZihhdXRvY29tcGxldGluZ1BhcmVudCAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICBhdXRvY29tcGxldGluZ1BhcmVudHMucHVzaChhdXRvY29tcGxldGluZ1BhcmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhZGRBdXRvY29tcGxldGlvbnMoYXV0b2NvbXBsZXRpbmdQYXJlbnQ6IERlZmF1bHRQYXJzZWROb2RlLCBhdXRvY29tcGxldGlvbnM6IEFycmF5PEF1dG9jb21wbGV0aW9uIHwgdW5kZWZpbmVkPik6IGJvb2xlYW4ge1xyXG4gICAgICAgIGxldCBhdXRvY29tcGxldGluZ1BhcmVudFN0YXJ0OiBudW1iZXIgPSBhdXRvY29tcGxldGluZ1BhcmVudC5nZXRNYXRjaGVyKCkucG9zO1xyXG4gICAgICAgIGxldCBhbHJlYWR5RW50ZXJlZDogc3RyaW5nID0gdGhpcy5sZXhlci5zdWJzdHJpbmcoYXV0b2NvbXBsZXRpbmdQYXJlbnRTdGFydCk7XHJcbiAgICAgICAgbGV0IGNvbXBsZXRpb246IEF1dG9jb21wbGV0aW9uW10gfCB1bmRlZmluZWQgPSBhdXRvY29tcGxldGluZ1BhcmVudC5nZXRBdXRvY29tcGxldGlvbihmYWxzZSk7XHJcbiAgICAgICAgaWYoY29tcGxldGlvbiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGZvcihsZXQgYyBvZiBjb21wbGV0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBpZihjID09PSB1bmRlZmluZWQgfHwgYy5pc0VtcHR5TGl0ZXJhbCgpKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgaWYoYyBpbnN0YW5jZW9mIEF1dG9jb21wbGV0aW9uLlZldG8pIHtcclxuICAgICAgICAgICAgICAgICAgICBhdXRvY29tcGxldGlvbnMubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGMuc2V0QWxyZWFkeUVudGVyZWQoYWxyZWFkeUVudGVyZWQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY0NvbXBsZXRpb246IHN0cmluZyA9IGMuZ2V0Q29tcGxldGlvbihBdXRvY29tcGxldGlvbi5QdXJwb3NlLkZPUl9NRU5VKTtcclxuICAgICAgICAgICAgICAgIGlmKCFhdXRvY29tcGxldGlvbnMuc29tZShhYyA9PiBhYz8uZ2V0Q29tcGxldGlvbihBdXRvY29tcGxldGlvbi5QdXJwb3NlLkZPUl9NRU5VKSA9PT0gY0NvbXBsZXRpb24pKVxyXG4gICAgICAgICAgICAgICAgICAgIGF1dG9jb21wbGV0aW9ucy5wdXNoKGMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHBhcnNlUmVjdXJzaXZlKHN5bWJvbFNlcXVlbmNlOiBTeW1ib2xTZXF1ZW5jZSwgZW5kT2ZJbnB1dDogQXJyYXk8U3ltYm9sU2VxdWVuY2U+KTogU3ltYm9sU2VxdWVuY2Uge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwicGFyc2VSZWN1cnNpdmVcIik7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCIgIHN5bWJvbCBzZXF1ZW5jZSA9IFwiICsgc3ltYm9sU2VxdWVuY2UpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiICBsZXhlciAgICAgICAgICAgPSBcIiArIHRoaXMubGV4ZXIpO1xyXG4gICAgICAgIGxldCBuZXh0OiBTeW0gPSBzeW1ib2xTZXF1ZW5jZS5nZXRDdXJyZW50U3ltYm9sKCk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJuZXh0ID0gXCIgKyBuZXh0KTtcclxuXHJcbiAgICAgICAgd2hpbGUobmV4dC5pc1Rlcm1pbmFsKCkpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJuZXh0IGlzIGEgdGVybWluYWwgbm9kZSwgbGV4ZXIgcG9zID0gXCIgKyB0aGlzLmxleGVyLmdldFBvc2l0aW9uKCkpO1xyXG4gICAgICAgICAgICBsZXQgbWF0Y2hlciA9IChuZXh0IGFzIFRlcm1pbmFsKS5tYXRjaGVzKHRoaXMubGV4ZXIpO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIm1hdGNoZXIgPSBcIiArIG1hdGNoZXIpO1xyXG4gICAgICAgICAgICBzeW1ib2xTZXF1ZW5jZS5hZGRNYXRjaGVyKG1hdGNoZXIpO1xyXG4gICAgICAgICAgICBpZihtYXRjaGVyLnN0YXRlLmVxdWFscyhQYXJzaW5nU3RhdGUuRU5EX09GX0lOUFVUKSAmJiBlbmRPZklucHV0ICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICBlbmRPZklucHV0LnB1c2goc3ltYm9sU2VxdWVuY2UpO1xyXG5cclxuICAgICAgICAgICAgaWYoIW1hdGNoZXIuc3RhdGUuZXF1YWxzKFBhcnNpbmdTdGF0ZS5TVUNDRVNTRlVMKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xTZXF1ZW5jZTtcclxuXHJcbiAgICAgICAgICAgIHN5bWJvbFNlcXVlbmNlLmluY3JlbWVudFBvc2l0aW9uKCk7XHJcbiAgICAgICAgICAgIHRoaXMubGV4ZXIuZndkKG1hdGNoZXIucGFyc2VkLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIGlmKHRoaXMubGV4ZXIuaXNEb25lKCkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sU2VxdWVuY2U7XHJcbiAgICAgICAgICAgIG5leHQgPSBzeW1ib2xTZXF1ZW5jZS5nZXRDdXJyZW50U3ltYm9sKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgdTogTm9uVGVybWluYWwgPSBuZXh0IGFzIE5vblRlcm1pbmFsO1xyXG4gICAgICAgIGxldCBhbHRlcm5hdGVzOiBQcm9kdWN0aW9uW10gPSB0aGlzLmdyYW1tYXIuZ2V0UHJvZHVjdGlvbnModSk7XHJcbiAgICAgICAgbGV0IGJlc3Q6IFN5bWJvbFNlcXVlbmNlIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIGxldCBsZXhlclBvc09mQmVzdDogbnVtYmVyID0gdGhpcy5sZXhlci5nZXRQb3NpdGlvbigpO1xyXG4gICAgICAgIGZvcihsZXQgYWx0ZXJuYXRlIG9mIGFsdGVybmF0ZXMpIHtcclxuICAgICAgICAgICAgbGV0IGxleGVyUG9zOiBudW1iZXIgPSB0aGlzLmxleGVyLmdldFBvc2l0aW9uKCk7XHJcbiAgICAgICAgICAgIGxldCBuZXh0U2VxdWVuY2U6IFN5bWJvbFNlcXVlbmNlID0gc3ltYm9sU2VxdWVuY2UucmVwbGFjZUN1cnJlbnRTeW1ib2woYWx0ZXJuYXRlKTtcclxuICAgICAgICAgICAgbGV0IHBhcnNlZFNlcXVlbmNlOiBTeW1ib2xTZXF1ZW5jZSA9IHRoaXMucGFyc2VSZWN1cnNpdmUobmV4dFNlcXVlbmNlLCBlbmRPZklucHV0KTtcclxuICAgICAgICAgICAgbGV0IG06IE1hdGNoZXIgfCB1bmRlZmluZWQgPSBwYXJzZWRTZXF1ZW5jZS5nZXRMYXN0TWF0Y2hlcigpO1xyXG4gICAgICAgICAgICBpZihtICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmKG0uc3RhdGUuZXF1YWxzKFBhcnNpbmdTdGF0ZS5TVUNDRVNTRlVMKSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VkU2VxdWVuY2U7XHJcbiAgICAgICAgICAgICAgICBpZihiZXN0ID09PSB1bmRlZmluZWQgfHwgbS5pc0JldHRlclRoYW4oYmVzdC5nZXRMYXN0TWF0Y2hlcigpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJlc3QgPSBwYXJzZWRTZXF1ZW5jZTtcclxuICAgICAgICAgICAgICAgICAgICBsZXhlclBvc09mQmVzdCA9IHRoaXMubGV4ZXIuZ2V0UG9zaXRpb24oKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmxleGVyLnNldFBvc2l0aW9uKGxleGVyUG9zKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKGJlc3QgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgdGhpcy5sZXhlci5zZXRQb3NpdGlvbihsZXhlclBvc09mQmVzdCk7XHJcblxyXG4gICAgICAgIHJldHVybiBiZXN0IGFzIFN5bWJvbFNlcXVlbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBjcmVhdGVQYXJzZWRUcmVlKGxlYWZTZXF1ZW5jZTogU3ltYm9sU2VxdWVuY2UsIHJldExhc3Q6IERlZmF1bHRQYXJzZWROb2RlW10pOiBEZWZhdWx0UGFyc2VkTm9kZSB7XHJcblx0XHRjb25zdCBwYXJzZWROb2RlU2VxdWVuY2U6IERlZmF1bHRQYXJzZWROb2RlW10gPSBbXTtcclxuXHRcdGNvbnN0IG5QYXJzZWRNYXRjaGVyczogbnVtYmVyID0gbGVhZlNlcXVlbmNlLnBhcnNlZE1hdGNoZXJzLmxlbmd0aDtcclxuXHRcdGZvcihsZXQgaSA9IDA7IGkgPCBsZWFmU2VxdWVuY2Uuc2VxdWVuY2UubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IHN5bWJvbDogU3ltID0gbGVhZlNlcXVlbmNlLnNlcXVlbmNlW2ldO1xyXG5cdFx0XHRsZXQgbWF0Y2hlcjogTWF0Y2hlciA9IGkgPCBuUGFyc2VkTWF0Y2hlcnNcclxuXHRcdFx0XHRcdD8gbGVhZlNlcXVlbmNlLnBhcnNlZE1hdGNoZXJzW2ldXHJcblx0XHRcdFx0XHQ6IG5ldyBNYXRjaGVyKFBhcnNpbmdTdGF0ZS5OT1RfUEFSU0VELCAwLCBcIlwiKTsgIC8vIFRPRE8gbWF5YmUgdGhpcyBzaG91bGQgbm90IGJlIDBcclxuXHJcblx0XHRcdGxldCBwbjogRGVmYXVsdFBhcnNlZE5vZGUgPSB0aGlzLnBhcnNlZE5vZGVGYWN0b3J5LmNyZWF0ZU5vZGUobWF0Y2hlciwgc3ltYm9sLCB1bmRlZmluZWQpO1xyXG5cdFx0XHRwYXJzZWROb2RlU2VxdWVuY2UucHVzaChwbik7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYocmV0TGFzdCAhPT0gdW5kZWZpbmVkKVxyXG5cdFx0XHRyZXRMYXN0WzBdID0gcGFyc2VkTm9kZVNlcXVlbmNlW25QYXJzZWRNYXRjaGVycyAtIDFdO1xyXG5cclxuXHRcdGxldCBjaGlsZFNlcXVlbmNlOiBTeW1ib2xTZXF1ZW5jZSA9IGxlYWZTZXF1ZW5jZTtcclxuXHRcdHdoaWxlKGNoaWxkU2VxdWVuY2UucGFyZW50ICE9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0bGV0IHBhcmVudFNlcXVlbmNlOiBTeW1ib2xTZXF1ZW5jZSA9IGNoaWxkU2VxdWVuY2UucGFyZW50O1xyXG5cdFx0XHRsZXQgcHJvZHVjdGlvblRvQ3JlYXRlQ2hpbGRTZXF1ZW5jZTogUHJvZHVjdGlvbiB8IHVuZGVmaW5lZCA9IGNoaWxkU2VxdWVuY2UucHJvZHVjdGlvbjtcclxuXHRcdFx0aWYocHJvZHVjdGlvblRvQ3JlYXRlQ2hpbGRTZXF1ZW5jZSA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicHJvZHVjdGlvbiBtYXkgbm90IGJlIHVuZGVmaW5lZCBhdCB0aGlzIHBvaW50XCIpO1xyXG5cdFx0XHRsZXQgcG9zOiBudW1iZXIgPSBwYXJlbnRTZXF1ZW5jZS5wb3M7XHJcblx0XHRcdGxldCByaHM6IFN5bVtdID0gcHJvZHVjdGlvblRvQ3JlYXRlQ2hpbGRTZXF1ZW5jZS5nZXRSaWdodCgpO1xyXG5cdFx0XHRsZXQgbGhzOiBTeW0gPSBwcm9kdWN0aW9uVG9DcmVhdGVDaGlsZFNlcXVlbmNlLmdldExlZnQoKTtcclxuXHRcdFx0bGV0IHJoc1NpemUgPSByaHMubGVuZ3RoO1xyXG5cdFx0XHRsZXQgY2hpbGRMaXN0OiBEZWZhdWx0UGFyc2VkTm9kZVtdID0gcGFyc2VkTm9kZVNlcXVlbmNlLnNsaWNlKHBvcywgcG9zICsgcmhzU2l6ZSk7XHJcblxyXG5cdFx0XHRsZXQgbWF0Y2hlcjogTWF0Y2hlciA9IFJEUGFyc2VyLm1hdGNoZXJGcm9tQ2hpbGRTZXF1ZW5jZShjaGlsZExpc3QpO1xyXG5cdFx0XHRsZXQgbmV3UGFyZW50OiBEZWZhdWx0UGFyc2VkTm9kZSA9IHRoaXMucGFyc2VkTm9kZUZhY3RvcnkuY3JlYXRlTm9kZShtYXRjaGVyLCBsaHMsIHByb2R1Y3Rpb25Ub0NyZWF0ZUNoaWxkU2VxdWVuY2UpO1xyXG5cdFx0XHRuZXdQYXJlbnQuYWRkQ2hpbGRyZW4oLi4uY2hpbGRMaXN0KTtcclxuXHRcdFx0cGFyc2VkTm9kZVNlcXVlbmNlLnNwbGljZShwb3MsIHJoc1NpemUsIG5ld1BhcmVudCk7XHJcblxyXG5cdFx0XHRjaGlsZFNlcXVlbmNlID0gY2hpbGRTZXF1ZW5jZS5wYXJlbnQ7XHJcblx0XHR9XHJcblxyXG5cdFx0bGV0IHJvb3Q6IERlZmF1bHRQYXJzZWROb2RlID0gcGFyc2VkTm9kZVNlcXVlbmNlWzBdO1xyXG5cdFx0aWYoIXJvb3QuZ2V0U3ltYm9sKCkuZXF1YWxzKEJORi5BUlRJRklDSUFMX1NUQVJUX1NZTUJPTCkpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlwiKTtcclxuXHJcblx0XHRSRFBhcnNlci5ub3RpZnlFeHRlbnNpb25MaXN0ZW5lcnMocm9vdCk7XHJcblxyXG5cdFx0cmV0dXJuIHJvb3Q7XHJcblx0fVxyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIG5vdGlmeUV4dGVuc2lvbkxpc3RlbmVycyhwbjogRGVmYXVsdFBhcnNlZE5vZGUpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBwcm9kdWN0aW9uID0gcG4uZ2V0UHJvZHVjdGlvbigpO1xyXG4gICAgICAgIGlmKHByb2R1Y3Rpb24gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBwcm9kdWN0aW9uLndhc0V4dGVuZGVkKHBuLCAuLi5wbi5nZXRDaGlsZHJlbigpKTtcclxuICAgICAgICAgICAgZm9yKGxldCBjaGlsZCBvZiBwbi5nZXRDaGlsZHJlbigpKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5ub3RpZnlFeHRlbnNpb25MaXN0ZW5lcnMoY2hpbGQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHN0YXRpYyBtYXRjaGVyRnJvbUNoaWxkU2VxdWVuY2UoY2hpbGRyZW46IERlZmF1bHRQYXJzZWROb2RlW10pOiBNYXRjaGVyIHtcclxuICAgICAgICBsZXQgcG9zID0gLTE7XHJcbiAgICAgICAgbGV0IHN0YXRlID0gUGFyc2luZ1N0YXRlLk5PVF9QQVJTRUQ7XHJcbiAgICAgICAgbGV0IHBhcnNlZCA9IFwiXCI7XHJcbiAgICAgICAgZm9yKGxldCBjaGlsZCBvZiBjaGlsZHJlbikge1xyXG4gICAgICAgICAgICAvLyBhbHJlYWR5IGVuY291bnRlcmVkIEVPSSBvciBGQUlMRUQgYmVmb3JlLCBkbyBub3RoaW5nXHJcbiAgICAgICAgICAgIGlmKHN0YXRlLmVxdWFscyhQYXJzaW5nU3RhdGUuRU5EX09GX0lOUFVUKSB8fCBzdGF0ZS5lcXVhbHMoUGFyc2luZ1N0YXRlLkZBSUxFRCkpXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZXIgPSBjaGlsZC5nZXRNYXRjaGVyKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkU3RhdGUgPSBtYXRjaGVyLnN0YXRlO1xyXG4gICAgICAgICAgICBpZighY2hpbGRTdGF0ZS5lcXVhbHMoUGFyc2luZ1N0YXRlLk5PVF9QQVJTRUQpKSB7XHJcbiAgICAgICAgICAgICAgICBpZihwb3MgPT09IC0xKVxyXG4gICAgICAgICAgICAgICAgICAgIHBvcyA9IG1hdGNoZXIucG9zOyAvLyBwYXJlbnQgcG9zIGlzIHRoZSBwb3Mgb2YgdGhlIGZpcnN0IGNoaWxkIHdoaWNoIGlzIG5vdCBOT1RfUEFSU0VEXHJcbiAgICAgICAgICAgICAgICBpZihzdGF0ZS5lcXVhbHMoUGFyc2luZ1N0YXRlLk5PVF9QQVJTRUQpIHx8ICFjaGlsZFN0YXRlLmlzQmV0dGVyVGhhbihzdGF0ZSkpXHJcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IGNoaWxkU3RhdGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcGFyc2VkID0gcGFyc2VkICsgbWF0Y2hlci5wYXJzZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKHBvcyA9PT0gLTEpXHJcbiAgICAgICAgICAgIHBvcyA9IDA7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBNYXRjaGVyKHN0YXRlLCBwb3MsIHBhcnNlZCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIFN5bWJvbFNlcXVlbmNlIHtcclxuICAgIHJlYWRvbmx5IHNlcXVlbmNlOiBTeW1bXSA9IFtdO1xyXG5cclxuICAgIHBvczogbnVtYmVyID0gMDtcclxuXHJcbiAgICByZWFkb25seSBwYXJlbnQ6IFN5bWJvbFNlcXVlbmNlIHwgdW5kZWZpbmVkO1xyXG4gICAgcmVhZG9ubHkgcGFyc2VkTWF0Y2hlcnM6IE1hdGNoZXJbXSA9IFtdO1xyXG4gICAgcmVhZG9ubHkgcHJvZHVjdGlvbjogUHJvZHVjdGlvbiB8IHVuZGVmaW5lZDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGwgaXQgd2l0aCBhbGwgdGhyZWUgcGFyYW1ldGVyLCB3aXRoIHRoZSBub3QgYXBwbGljYWJsZSBvbmVzIHNldCB0byB1bmRlZmluZWRcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3Ioc3RhcnQ6IFN5bSB8IHVuZGVmaW5lZCwgcGFyZW50OiBTeW1ib2xTZXF1ZW5jZSB8IHVuZGVmaW5lZCwgcHJvZHVjdGlvbjogUHJvZHVjdGlvbiB8IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGlmKHN0YXJ0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaWYocGFyZW50ICE9PSB1bmRlZmluZWQgfHwgcHJvZHVjdGlvbiAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSWYgJ3N0YXJ0JyBpcyBkZWZpbmVkLCBwYXJlbnQgYW5kIHByb2R1Y3Rpb24gc2hvdWxkIGJlIHVuZGVmaW5lZFwiKTtcclxuICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZS5wdXNoKHN0YXJ0KTtcclxuICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIHRoaXMucHJvZHVjdGlvbiA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmKHBhcmVudCA9PT0gdW5kZWZpbmVkIHx8IHByb2R1Y3Rpb24gPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIklmICdzdGFydCcgaXMgbm90IGRlZmluZWQsIHBhcmVudCBhbmQgcHJvZHVjdGlvbiBzaG91bGQgYmUgZGVmaW5lZFwiKTtcclxuICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZS5wdXNoKC4uLnBhcmVudC5zZXF1ZW5jZSk7XHJcbiAgICAgICAgICAgIHRoaXMucG9zID0gcGFyZW50LnBvcztcclxuICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XHJcbiAgICAgICAgICAgIHRoaXMucHJvZHVjdGlvbiA9IHByb2R1Y3Rpb247XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldExhc3RNYXRjaGVyKCk6IE1hdGNoZXIgfCB1bmRlZmluZWQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlZE1hdGNoZXJzLmF0KC0xKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRNYXRjaGVyKG1hdGNoZXI6IE1hdGNoZXIpIHtcclxuICAgICAgICB0aGlzLnBhcnNlZE1hdGNoZXJzLnB1c2gobWF0Y2hlcik7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q3VycmVudFN5bWJvbCgpOiBTeW0ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlcXVlbmNlW3RoaXMucG9zXTtcclxuICAgIH1cclxuXHJcbiAgICByZXBsYWNlQ3VycmVudFN5bWJvbChwcm9kdWN0aW9uOiBQcm9kdWN0aW9uKTogU3ltYm9sU2VxdWVuY2Uge1xyXG4gICAgICAgIGxldCBjb3B5OiBTeW1ib2xTZXF1ZW5jZSA9IG5ldyBTeW1ib2xTZXF1ZW5jZSh1bmRlZmluZWQsIHRoaXMsIHByb2R1Y3Rpb24pO1xyXG4gICAgICAgIGNvcHkucGFyc2VkTWF0Y2hlcnMucHVzaCguLi50aGlzLnBhcnNlZE1hdGNoZXJzKTtcclxuICAgICAgICBjb3B5LnNlcXVlbmNlLnNwbGljZSh0aGlzLnBvcywgMSk7XHJcbiAgICAgICAgbGV0IHJlcGxhY2VtZW50OiBTeW1bXSA9IHByb2R1Y3Rpb24uZ2V0UmlnaHQoKTtcclxuICAgICAgICBjb3B5LnNlcXVlbmNlLnNwbGljZSh0aGlzLnBvcywgMCwgLi4ucmVwbGFjZW1lbnQpO1xyXG4gICAgICAgIHJldHVybiBjb3B5O1xyXG4gICAgfVxyXG5cclxuICAgIGluY3JlbWVudFBvc2l0aW9uKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucG9zKys7XHJcbiAgICB9XHJcblxyXG4gICAgdG9TdHJpbmcoKTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgcmV0OiBzdHJpbmcgPSBcIlwiO1xyXG4gICAgICAgIGxldCBpID0gMDtcclxuICAgICAgICBmb3IobGV0IHN5bSBvZiB0aGlzLnNlcXVlbmNlKSB7XHJcbiAgICAgICAgICAgIGlmKGkrKyA9PT0gdGhpcy5wb3MpXHJcbiAgICAgICAgICAgICAgICByZXQgKz0gXCIuXCJcclxuICAgICAgICAgICAgcmV0ICs9IHN5bSArIFwiIC0tIFwiXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IFJEUGFyc2VyLCBTeW1ib2xTZXF1ZW5jZSB9O1xyXG4iLCJpbXBvcnQgeyBSZXByZXNlbnRzU3ltYm9sIH0gZnJvbSBcIi4vUmVwcmVzZW50c1N5bWJvbC5qc1wiO1xyXG5cclxuYWJzdHJhY3QgY2xhc3MgU3ltIGltcGxlbWVudHMgUmVwcmVzZW50c1N5bWJvbHtcclxuICAgIFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBzeW1ib2w6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihzeW1ib2w6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuc3ltYm9sID0gc3ltYm9sO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFN5bWJvbCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN5bWJvbDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRSZXByZXNlbnRlZFN5bWJvbCgpOiBTeW0ge1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGFic3RyYWN0IGlzVGVybWluYWwoKTogYm9vbGVhbjtcclxuXHJcbiAgICBhYnN0cmFjdCBpc05vblRlcm1pbmFsKCk6IGJvb2xlYW47XHJcblxyXG4gICAgYWJzdHJhY3QgaXNFcHNpbG9uKCk6IGJvb2xlYW47XHJcblxyXG4gICAgdG9TdHJpbmcoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zeW1ib2w7XHJcbiAgICB9XHJcblxyXG4gICAgZXF1YWxzKG86IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICghKG8gaW5zdGFuY2VvZiBTeW0pKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3ltYm9sID09PSBvLnN5bWJvbDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHsgU3ltIH07XHJcbiIsImltcG9ydCB7IE5hbWVkIH0gZnJvbSAnLi9OYW1lZC5qcyc7XHJcbmltcG9ydCB7IExleGVyIH0gZnJvbSAnLi9MZXhlci5qcyc7XHJcbmltcG9ydCB7IE1hdGNoZXIgfSBmcm9tICcuL01hdGNoZXIuanMnO1xyXG5pbXBvcnQgeyBQYXJzaW5nU3RhdGUgfSBmcm9tICcuL1BhcnNpbmdTdGF0ZS5qcyc7XHJcbmltcG9ydCB7IFN5bSB9IGZyb20gJy4vU3ltYm9sLmpzJztcclxuXHJcblxyXG5hYnN0cmFjdCBjbGFzcyBUZXJtaW5hbCBleHRlbmRzIFN5bSB7XHJcblxyXG4gIHN0YXRpYyBsaXRlcmFsKHM6IHN0cmluZyk6IFRlcm1pbmFsIHtcclxuICAgIHJldHVybiBuZXcgTGl0ZXJhbChzKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjaGFyYWN0ZXJDbGFzcyhwYXR0ZXJuOiBzdHJpbmcpOiBUZXJtaW5hbCB7XHJcbiAgICByZXR1cm4gbmV3IENoYXJhY3RlckNsYXNzKHBhdHRlcm4pO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3Ioc3ltYm9sOiBzdHJpbmcpIHtcclxuICAgIHN1cGVyKHN5bWJvbCk7XHJcbiAgfVxyXG5cclxuICBvdmVycmlkZSBpc1Rlcm1pbmFsKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBvdmVycmlkZSBpc05vblRlcm1pbmFsKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgb3ZlcnJpZGUgaXNFcHNpbG9uKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgYWJzdHJhY3QgbWF0Y2hlcyhsZXhlcjogTGV4ZXIpOiBNYXRjaGVyO1xyXG5cclxuICBhYnN0cmFjdCBldmFsdWF0ZShtYXRjaGVyOiBNYXRjaGVyKTogYW55O1xyXG5cclxuICB3aXRoTmFtZShuYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQpOiBOYW1lZDxUZXJtaW5hbD4ge1xyXG4gICAgcmV0dXJuIG5ldyBOYW1lZDxUZXJtaW5hbD4odGhpcywgbmFtZSk7XHJcbiAgfVxyXG59XHJcblxyXG5jbGFzcyBFcHNpbG9uIGV4dGVuZHMgVGVybWluYWwge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoXCJlcHNpbG9uXCIpO1xyXG4gIH1cclxuXHJcbiAgb3ZlcnJpZGUgaXNFcHNpbG9uKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBvdmVycmlkZSBtYXRjaGVzKGxleGVyOiBMZXhlcik6IE1hdGNoZXIge1xyXG4gICAgcmV0dXJuIG5ldyBNYXRjaGVyKFBhcnNpbmdTdGF0ZS5TVUNDRVNTRlVMLCBsZXhlci5nZXRQb3NpdGlvbigpLCBcIlwiKTtcclxuICB9XHJcblxyXG4gIG92ZXJyaWRlIGV2YWx1YXRlKF9tYXRjaGVyOiBNYXRjaGVyKSB7XHJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gIH1cclxufVxyXG5cclxuY2xhc3MgRW5kT2ZJbnB1dCBleHRlbmRzIFRlcm1pbmFsIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKFwiRU9JXCIpO1xyXG4gIH1cclxuXHJcbiAgb3ZlcnJpZGUgbWF0Y2hlcyhsZXhlcjogTGV4ZXIpOiBNYXRjaGVyIHtcclxuICAgIGNvbnN0IHBvcyA9IGxleGVyLmdldFBvc2l0aW9uKCk7XHJcbiAgICBpZiAobGV4ZXIuaXNBdEVuZCgpKVxyXG4gICAgICByZXR1cm4gbmV3IE1hdGNoZXIoUGFyc2luZ1N0YXRlLlNVQ0NFU1NGVUwsIHBvcywgXCIgXCIpO1xyXG4gICAgcmV0dXJuIG5ldyBNYXRjaGVyKFBhcnNpbmdTdGF0ZS5GQUlMRUQsIHBvcywgXCJcIik7XHJcbiAgfVxyXG5cclxuICBvdmVycmlkZSBldmFsdWF0ZShfbWF0Y2hlcjogTWF0Y2hlcikge1xyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICB9XHJcbn1cclxuXHJcbmNsYXNzIERpZ2l0IGV4dGVuZHMgVGVybWluYWwge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoXCJkaWdpdFwiKTtcclxuICB9XHJcblxyXG4gIG92ZXJyaWRlIG1hdGNoZXMobGV4ZXI6IExleGVyKTogTWF0Y2hlciB7XHJcbiAgICBjb25zdCBwb3MgPSBsZXhlci5nZXRQb3NpdGlvbigpO1xyXG4gICAgaWYgKGxleGVyLmlzQXRFbmQoKSlcclxuICAgICAgcmV0dXJuIG5ldyBNYXRjaGVyKFBhcnNpbmdTdGF0ZS5FTkRfT0ZfSU5QVVQsIHBvcywgXCJcIik7XHJcbiAgICBjb25zdCBjID0gbGV4ZXIucGVlaygpO1xyXG4gICAgaWYgKGMubWF0Y2goL1swLTldLykpXHJcbiAgICAgIHJldHVybiBuZXcgTWF0Y2hlcihQYXJzaW5nU3RhdGUuU1VDQ0VTU0ZVTCwgcG9zLCBjKTtcclxuICAgIHJldHVybiBuZXcgTWF0Y2hlcihQYXJzaW5nU3RhdGUuRkFJTEVELCBwb3MsIGMpO1xyXG4gIH1cclxuXHJcbiAgb3ZlcnJpZGUgZXZhbHVhdGUobWF0Y2hlcjogTWF0Y2hlcikge1xyXG4gICAgcmV0dXJuIG1hdGNoZXIucGFyc2VkLmNoYXJBdCgwKTtcclxuICB9XHJcbn1cclxuXHJcbmNsYXNzIExpdGVyYWwgZXh0ZW5kcyBUZXJtaW5hbCB7XHJcbiAgY29uc3RydWN0b3Ioc3ltYm9sOiBzdHJpbmcpIHtcclxuICAgIHN1cGVyKHN5bWJvbCk7XHJcbiAgfVxyXG5cclxuICBvdmVycmlkZSBtYXRjaGVzKGxleGVyOiBMZXhlcik6IE1hdGNoZXIge1xyXG4gICAgY29uc3QgcG9zID0gbGV4ZXIuZ2V0UG9zaXRpb24oKTtcclxuICAgIGNvbnN0IHN5bWJvbCA9IHRoaXMuZ2V0U3ltYm9sKCk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN5bWJvbC5sZW5ndGg7IGkrKykge1xyXG4gICAgICBpZiAobGV4ZXIuaXNBdEVuZChpKSlcclxuICAgICAgICByZXR1cm4gbmV3IE1hdGNoZXIoXHJcbiAgICAgICAgICBQYXJzaW5nU3RhdGUuRU5EX09GX0lOUFVULFxyXG4gICAgICAgICAgcG9zLFxyXG4gICAgICAgICAgbGV4ZXIuc3Vic3RyaW5nKHBvcywgcG9zICsgaSArIDEpXHJcbiAgICAgICAgKTtcclxuICAgICAgaWYgKGxleGVyLnBlZWsoaSkgIT09IHN5bWJvbC5jaGFyQXQoaSkpXHJcbiAgICAgICAgcmV0dXJuIG5ldyBNYXRjaGVyKFxyXG4gICAgICAgICAgUGFyc2luZ1N0YXRlLkZBSUxFRCxcclxuICAgICAgICAgIHBvcyxcclxuICAgICAgICAgIGxleGVyLnN1YnN0cmluZyhwb3MsIHBvcyArIGkgKyAxKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3IE1hdGNoZXIoUGFyc2luZ1N0YXRlLlNVQ0NFU1NGVUwsIHBvcywgc3ltYm9sKTtcclxuICB9XHJcblxyXG4gIG92ZXJyaWRlIGV2YWx1YXRlKG1hdGNoZXI6IE1hdGNoZXIpIHtcclxuICAgIHJldHVybiBtYXRjaGVyLnBhcnNlZDtcclxuICB9XHJcblxyXG4gIG92ZXJyaWRlIHRvU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gYCcke3RoaXMuZ2V0U3ltYm9sKCl9J2A7XHJcbiAgfVxyXG59XHJcblxyXG5jbGFzcyBMZXR0ZXIgZXh0ZW5kcyBUZXJtaW5hbCB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcihcImxldHRlclwiKTtcclxuICB9XHJcblxyXG4gIG92ZXJyaWRlIG1hdGNoZXMobGV4ZXI6IExleGVyKTogTWF0Y2hlciB7XHJcbiAgICBjb25zdCBwb3MgPSBsZXhlci5nZXRQb3NpdGlvbigpO1xyXG4gICAgaWYgKGxleGVyLmlzQXRFbmQoKSlcclxuICAgICAgcmV0dXJuIG5ldyBNYXRjaGVyKFBhcnNpbmdTdGF0ZS5FTkRfT0ZfSU5QVVQsIHBvcywgXCJcIik7XHJcbiAgICBjb25zdCBjID0gbGV4ZXIucGVlaygpO1xyXG4gICAgY29uc29sZS5kZWJ1ZyhcIlRlc3QgaWYgXCIgKyBjICsgXCIgaXMgYSBsZXR0ZXJcIik7XHJcbiAgICBpZiAoYy5tYXRjaCgvW2EtekEtWl0vKSkge1xyXG4gICAgICBjb25zb2xlLmRlYnVnKFwiSXQgaXNcIik7XHJcbiAgICAgIHJldHVybiBuZXcgTWF0Y2hlcihQYXJzaW5nU3RhdGUuU1VDQ0VTU0ZVTCwgcG9zLCBjKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmRlYnVnKFwiaXQgaXMgbm90XCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ldyBNYXRjaGVyKFBhcnNpbmdTdGF0ZS5GQUlMRUQsIHBvcywgYyk7XHJcbiAgfVxyXG5cclxuICBvdmVycmlkZSBldmFsdWF0ZShtYXRjaGVyOiBNYXRjaGVyKSB7XHJcbiAgICByZXR1cm4gbWF0Y2hlci5wYXJzZWQuY2hhckF0KDApO1xyXG4gIH1cclxufVxyXG5cclxuY2xhc3MgV2hpdGVzcGFjZSBleHRlbmRzIFRlcm1pbmFsIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKFwid2hpdGVzcGFjZVwiKTtcclxuICB9XHJcblxyXG4gIG92ZXJyaWRlIG1hdGNoZXMobGV4ZXI6IExleGVyKTogTWF0Y2hlciB7XHJcbiAgICBjb25zdCBwb3MgPSBsZXhlci5nZXRQb3NpdGlvbigpO1xyXG4gICAgaWYgKGxleGVyLmlzQXRFbmQoKSlcclxuICAgICAgcmV0dXJuIG5ldyBNYXRjaGVyKFBhcnNpbmdTdGF0ZS5FTkRfT0ZfSU5QVVQsIHBvcywgXCJcIik7XHJcbiAgICBjb25zdCBjID0gbGV4ZXIucGVlaygpO1xyXG4gICAgaWYgKGMgPT09IFwiIFwiIHx8IGMgPT09IFwiXFx0XCIpXHJcbiAgICAgIHJldHVybiBuZXcgTWF0Y2hlcihQYXJzaW5nU3RhdGUuU1VDQ0VTU0ZVTCwgcG9zLCBjKTtcclxuICAgIHJldHVybiBuZXcgTWF0Y2hlcihQYXJzaW5nU3RhdGUuRkFJTEVELCBwb3MsIGMpO1xyXG4gIH1cclxuXHJcbiAgb3ZlcnJpZGUgZXZhbHVhdGUobWF0Y2hlcjogTWF0Y2hlcikge1xyXG4gICAgcmV0dXJuIG1hdGNoZXIucGFyc2VkLmNoYXJBdCgwKTtcclxuICB9XHJcbn1cclxuXHJcbmNsYXNzIENoYXJhY3RlckNsYXNzIGV4dGVuZHMgVGVybWluYWwge1xyXG4gIHByaXZhdGUgcmFuZ2VzOiBSYW5nZXM7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHBhdHRlcm46IHN0cmluZykge1xyXG4gICAgc3VwZXIocGF0dGVybi50cmltKCkpO1xyXG4gICAgY29uc3QgYiA9IHBhdHRlcm4udHJpbSgpO1xyXG4gICAgaWYgKGIubGVuZ3RoID09PSAwKVxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJlbXB0eSBjaGFyYWN0ZXIgY2xhc3MgcGF0dGVyblwiKTtcclxuICAgIGlmIChiLmNoYXJBdCgwKSAhPT0gXCJbXCIgfHwgYi5jaGFyQXQoYi5sZW5ndGggLSAxKSAhPT0gXCJdXCIpXHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIldyb25nIGNoYXJhY3RlciBjbGFzcyBmb3JtYXQ6IFwiICsgcGF0dGVybik7XHJcblxyXG4gICAgbGV0IHN0YXJ0ID0gMTtcclxuICAgIGxldCBlbmQgPSBiLmxlbmd0aCAtIDI7XHJcblxyXG4gICAgY29uc3QgbmVnYXRlZCA9IGIuY2hhckF0KDEpID09PSBcIl5cIjtcclxuICAgIGlmIChuZWdhdGVkKVxyXG4gICAgICBzdGFydCsrO1xyXG5cclxuICAgIHRoaXMucmFuZ2VzID0gbmV3IFJhbmdlcyhuZWdhdGVkKTtcclxuXHJcbiAgICBpZiAoYi5jaGFyQXQoc3RhcnQpID09PSBcIi1cIikge1xyXG4gICAgICB0aGlzLnJhbmdlcy5hZGQobmV3IFNpbmdsZUNoYXJhY3RlclJhbmdlKCctJy5jaGFyQ29kZUF0KDApKSk7XHJcbiAgICAgIHN0YXJ0Kys7XHJcbiAgICB9XHJcbiAgICBpZiAoYi5jaGFyQXQoZW5kKSA9PT0gXCItXCIpIHtcclxuICAgICAgdGhpcy5yYW5nZXMuYWRkKG5ldyBTaW5nbGVDaGFyYWN0ZXJSYW5nZSgnLScuY2hhckNvZGVBdCgwKSkpO1xyXG4gICAgICBlbmQtLTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgaWR4ID0gc3RhcnQ7XHJcbiAgICB3aGlsZSAoaWR4IDw9IGVuZCkge1xyXG4gICAgICBjb25zdCBuSWR4ID0gaWR4ICsgMTtcclxuICAgICAgY29uc3QgYyA9IGIuY2hhckF0KGlkeCk7XHJcbiAgICAgIGlmIChuSWR4IDw9IGVuZCAmJiBiLmNoYXJBdChuSWR4KSA9PT0gXCItXCIpIHtcclxuICAgICAgICBjb25zdCB1ID0gYi5jaGFyQXQoaWR4ICsgMik7XHJcbiAgICAgICAgaWYgKGMgPT09IFwiLVwiIHx8IHUgPT09IFwiLVwiKVxyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiV3JvbmcgY2hhcmFjdGVyIGNsYXNzIGZvcm1hdDogXCIgKyBwYXR0ZXJuKTtcclxuICAgICAgICB0aGlzLnJhbmdlcy5hZGQobmV3IENoYXJhY3RlclJhbmdlKGMuY2hhckNvZGVBdCgwKSwgdS5jaGFyQ29kZUF0KDApKSk7XHJcbiAgICAgICAgaWR4ID0gaWR4ICsgMztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnJhbmdlcy5hZGQobmV3IFNpbmdsZUNoYXJhY3RlclJhbmdlKGMuY2hhckNvZGVBdCgwKSkpO1xyXG4gICAgICAgIGlkeCsrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvdmVycmlkZSBtYXRjaGVzKGxleGVyOiBMZXhlcik6IE1hdGNoZXIge1xyXG4gICAgY29uc3QgcG9zID0gbGV4ZXIuZ2V0UG9zaXRpb24oKTtcclxuICAgIGlmIChsZXhlci5pc0F0RW5kKCkpXHJcbiAgICAgIHJldHVybiBuZXcgTWF0Y2hlcihQYXJzaW5nU3RhdGUuRU5EX09GX0lOUFVULCBwb3MsIFwiXCIpO1xyXG4gICAgY29uc3QgYyA9IGxleGVyLnBlZWsoKTtcclxuICAgIGlmICh0aGlzLnJhbmdlcy5jaGVja0NoYXJhY3RlcihjLmNoYXJDb2RlQXQoMCkpKVxyXG4gICAgICByZXR1cm4gbmV3IE1hdGNoZXIoUGFyc2luZ1N0YXRlLlNVQ0NFU1NGVUwsIHBvcywgYyk7XHJcbiAgICByZXR1cm4gbmV3IE1hdGNoZXIoUGFyc2luZ1N0YXRlLkZBSUxFRCwgcG9zLCBjKTtcclxuICB9XHJcblxyXG4gIG92ZXJyaWRlIGV2YWx1YXRlKG1hdGNoZXI6IE1hdGNoZXIpIHtcclxuICAgIHJldHVybiBtYXRjaGVyLnBhcnNlZC5jaGFyQXQoMCk7XHJcbiAgfVxyXG5cclxuICBvdmVycmlkZSB0b1N0cmluZygpOiBzdHJpbmcge1xyXG4gICAgbGV0IHJldDogc3RyaW5nID0gc3VwZXIudG9TdHJpbmcoKTtcclxuICAgIC8vIFRPRE8gcmV0ID0gcmV0LnJlcGxhY2VBbGwoL1xcbi9naSwgXCJcXFxcblwiKTtcclxuICAgIHJldHVybiByZXQ7XHJcbiAgfVxyXG59XHJcblxyXG5jbGFzcyBDaGFyYWN0ZXJSYW5nZSB7XHJcbiAgcmVhZG9ubHkgbG93ZXI6IG51bWJlcjtcclxuICByZWFkb25seSB1cHBlcjogbnVtYmVyO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihsb3dlcjogbnVtYmVyLCB1cHBlcjogbnVtYmVyKSB7XHJcbiAgICB0aGlzLmxvd2VyID0gbG93ZXI7XHJcbiAgICB0aGlzLnVwcGVyID0gdXBwZXI7XHJcbiAgfVxyXG5cclxuICBjaGVja0NoYXJhY3RlcihpOiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBpID49IHRoaXMubG93ZXIgJiYgaSA8PSB0aGlzLnVwcGVyO1xyXG4gIH1cclxuXHJcbiAgZXF1YWxzKG86IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKCEobyBpbnN0YW5jZW9mIENoYXJhY3RlclJhbmdlKSlcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgY29uc3QgYyA9IG8gYXMgQ2hhcmFjdGVyUmFuZ2U7XHJcbiAgICByZXR1cm4gdGhpcy5sb3dlciA9PT0gYy5sb3dlciAmJiB0aGlzLnVwcGVyID09PSBjLnVwcGVyO1xyXG4gIH1cclxufVxyXG5cclxuY2xhc3MgU2luZ2xlQ2hhcmFjdGVyUmFuZ2UgZXh0ZW5kcyBDaGFyYWN0ZXJSYW5nZSB7XHJcbiAgcmVhZG9ubHkgbnVtYmVyOiBudW1iZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKG51bWJlcjogbnVtYmVyKSB7XHJcbiAgICBzdXBlcihudW1iZXIsIG51bWJlcik7XHJcbiAgICB0aGlzLm51bWJlciA9IG51bWJlcjtcclxuICB9XHJcblxyXG4gIG92ZXJyaWRlIGNoZWNrQ2hhcmFjdGVyKGk6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIGkgPT09IHRoaXMubnVtYmVyO1xyXG4gIH1cclxufVxyXG5cclxuY2xhc3MgUmFuZ2VzIHtcclxuICBwcml2YXRlIHJlYWRvbmx5IHJhbmdlczogQ2hhcmFjdGVyUmFuZ2VbXSA9IFtdO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgbmVnYXRlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICBjb25zdHJ1Y3RvcihuZWdhdGVkOiBib29sZWFuKSB7XHJcbiAgICB0aGlzLm5lZ2F0ZWQgPSBuZWdhdGVkO1xyXG4gIH1cclxuXHJcbiAgYWRkKHJhbmdlOiBDaGFyYWN0ZXJSYW5nZSkge1xyXG4gICAgdGhpcy5yYW5nZXMucHVzaChyYW5nZSk7XHJcbiAgfVxyXG5cclxuICBjaGVja0NoYXJhY3RlcihpOiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgIGZvcih2YXIgcmFuZ2Ugb2YgdGhpcy5yYW5nZXMpIHtcclxuICAgICAgbGV0IGNoZWNrID0gcmFuZ2UuY2hlY2tDaGFyYWN0ZXIoaSk7XHJcbiAgICAgIGlmKCF0aGlzLm5lZ2F0ZWQgJiYgY2hlY2spXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIGlmKHRoaXMubmVnYXRlZCAmJiBjaGVjaylcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5uZWdhdGVkO1xyXG4gIH1cclxuXHJcbiAgZXF1YWxzKG86IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKCEobyBpbnN0YW5jZW9mIFJhbmdlcykpXHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIFxyXG4gICAgbGV0IHNvcnRlciA9IChhOiBDaGFyYWN0ZXJSYW5nZSwgYjogQ2hhcmFjdGVyUmFuZ2UpID0+IHtcclxuICAgICAgaWYoYS5sb3dlciA8IGIubG93ZXIpIHJldHVybiAtMTtcclxuICAgICAgaWYoYS5sb3dlciA+IGIubG93ZXIpIHJldHVybiAxO1xyXG4gICAgICBpZihhLnVwcGVyIDwgYi51cHBlcikgcmV0dXJuIC0xO1xyXG4gICAgICBpZihhLnVwcGVyID4gYi51cHBlcikgcmV0dXJuIDE7XHJcbiAgICAgIHJldHVybiAwO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgbGV0IGFycjEgPSB0aGlzLnJhbmdlcy5zbGljZSgpO1xyXG4gICAgbGV0IGFycjIgPSAgICBvLnJhbmdlcy5zbGljZSgpO1xyXG5cclxuICAgIGFycjEuc29ydChzb3J0ZXIpO1xyXG4gICAgYXJyMi5zb3J0KHNvcnRlcik7XHJcblxyXG4gICAgcmV0dXJuIGFycmF5c0VxdWFsKGFycjEsIGFycjIpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gYXJyYXlzRXF1YWwoYTogQ2hhcmFjdGVyUmFuZ2VbXSwgYjogQ2hhcmFjdGVyUmFuZ2VbXSkge1xyXG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcclxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xyXG4gIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcclxuXHJcbiAgLy8gSWYgeW91IGRvbid0IGNhcmUgYWJvdXQgdGhlIG9yZGVyIG9mIHRoZSBlbGVtZW50cyBpbnNpZGVcclxuICAvLyB0aGUgYXJyYXksIHlvdSBzaG91bGQgc29ydCBib3RoIGFycmF5cyBoZXJlLlxyXG4gIC8vIFBsZWFzZSBub3RlIHRoYXQgY2FsbGluZyBzb3J0IG9uIGFuIGFycmF5IHdpbGwgbW9kaWZ5IHRoYXQgYXJyYXkuXHJcbiAgLy8geW91IG1pZ2h0IHdhbnQgdG8gY2xvbmUgeW91ciBhcnJheSBmaXJzdC5cclxuXHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgKytpKSB7XHJcbiAgICBpZiAoIWFbaV0uZXF1YWxzKGJbaV0pKSByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG4gIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG5tb2R1bGUgVGVybWluYWwge1xyXG4gIGV4cG9ydCBjb25zdCBFUFNJTE9OOiAgICAgIFRlcm1pbmFsID0gbmV3IEVwc2lsb24oKTtcclxuICBleHBvcnQgY29uc3QgRElHSVQ6ICAgICAgICBUZXJtaW5hbCA9IG5ldyBEaWdpdCgpO1xyXG4gIGV4cG9ydCBjb25zdCBMRVRURVI6ICAgICAgIFRlcm1pbmFsID0gbmV3IExldHRlcigpO1xyXG4gIGV4cG9ydCBjb25zdCBXSElURVNQQUNFOiAgIFRlcm1pbmFsID0gbmV3IFdoaXRlc3BhY2UoKTtcclxuICBleHBvcnQgY29uc3QgRU5EX09GX0lOUFVUOiBUZXJtaW5hbCA9IG5ldyBFbmRPZklucHV0KCk7XHJcbn1cclxuXHJcbmV4cG9ydCB7IFRlcm1pbmFsLCBMaXRlcmFsLCBFcHNpbG9uLCBDaGFyYWN0ZXJDbGFzcyB9XHJcbiIsImV4cG9ydCAqIGZyb20gXCIuL0F1dG9jb21wbGV0aW9uLmpzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL0JORi5qc1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9EZWZhdWx0UGFyc2VkTm9kZS5qc1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9MZXhlci5qc1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9NYXRjaGVyLmpzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL05hbWVkLmpzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL05vblRlcm1pbmFsLmpzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL1BhcnNlZE5vZGVGYWN0b3J5LmpzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL1BhcnNpbmdTdGF0ZS5qc1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9Qcm9kdWN0aW9uLmpzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL1JEUGFyc2VyLmpzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL1JlcHJlc2VudHNTeW1ib2wuanNcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vU3ltYm9sLmpzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL1Rlcm1pbmFsLmpzXCI7XHJcbiIsImltcG9ydCB7IFBhcnNlZE5vZGUgfSBmcm9tIFwic3JjL1BhcnNlZE5vZGUuanNcIjtcclxuaW1wb3J0IHsgQXV0b2NvbXBsZXRlciwgRW50aXJlU2VxdWVuY2VDb21wbGV0ZXIsIElmTm90aGluZ1lldEVudGVyZWRBdXRvY29tcGxldGVyIH0gZnJvbSBcIi4uL0F1dG9jb21wbGV0ZXIuanNcIjtcclxuaW1wb3J0IHsgVGVybWluYWwgfSBmcm9tIFwiLi4vY29yZS9UZXJtaW5hbC5qc1wiO1xyXG5pbXBvcnQgeyBJbnRSYW5nZSB9IGZyb20gXCIuLi91dGlsL0ludFJhbmdlLmpzXCI7XHJcbmltcG9ydCB7IEVCTkZDb3JlIH0gZnJvbSBcIi4vRUJORkNvcmUuanNcIjtcclxuaW1wb3J0IHsgUnVsZSB9IGZyb20gXCIuL1J1bGUuanNcIjtcclxuaW1wb3J0IHsgQXV0b2NvbXBsZXRpb24gfSBmcm9tIFwic3JjL2NvcmUvQXV0b2NvbXBsZXRpb24uanNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBFQk5GIGV4dGVuZHMgRUJORkNvcmUge1xyXG5cclxuICAgIHN0YXRpYyByZWFkb25seSBESUdJVF9OQU1FICAgICAgICAgIDogc3RyaW5nID0gVGVybWluYWwuRElHSVQuZ2V0U3ltYm9sKCk7XHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgTEVUVEVSX05BTUUgICAgICAgICA6IHN0cmluZyA9IFRlcm1pbmFsLkxFVFRFUi5nZXRTeW1ib2woKTtcclxuICAgIHN0YXRpYyByZWFkb25seSBTSUdOX05BTUUgICAgICAgICAgIDogc3RyaW5nID0gXCJzaWduXCI7XHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgSU5URUdFUl9OQU1FICAgICAgICA6IHN0cmluZyA9IFwiaW50XCI7XHJcblx0c3RhdGljIHJlYWRvbmx5IEZMT0FUX05BTUUgICAgICAgICAgOiBzdHJpbmcgPSBcImZsb2F0XCI7XHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgTU9OVEhfTkFNRSAgICAgICAgICA6IHN0cmluZyA9IFwibW9udGhcIjtcclxuICAgIHN0YXRpYyByZWFkb25seSBXRUVLREFZX05BTUUgICAgICAgIDogc3RyaW5nID0gXCJ3ZWVrZGF5XCI7XHJcblx0c3RhdGljIHJlYWRvbmx5IFdISVRFU1BBQ0VfU1RBUl9OQU1FOiBzdHJpbmcgPSBcIndoaXRlc3BhY2Utc3RhclwiO1xyXG5cdHN0YXRpYyByZWFkb25seSBXSElURVNQQUNFX1BMVVNfTkFNRTogc3RyaW5nID0gXCJ3aGl0ZXNwYWNlLXBsdXNcIjtcclxuXHRzdGF0aWMgcmVhZG9ubHkgSU5URUdFUl9SQU5HRV9OQU1FICA6IHN0cmluZyA9IFwiaW50ZWdlci1yYW5nZVwiO1xyXG5cdHN0YXRpYyByZWFkb25seSBQQVRIX05BTUUgICAgICAgICAgIDogc3RyaW5nID0gXCJwYXRoXCI7XHJcblx0c3RhdGljIHJlYWRvbmx5IFRJTUVfTkFNRSAgICAgICAgICAgOiBzdHJpbmcgPSBcInRpbWVcIjtcclxuICAgIHN0YXRpYyByZWFkb25seSBEQVRFX05BTUUgICAgICAgICAgIDogc3RyaW5nID0gXCJkYXRlXCI7XHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgREFURVRJTUVfTkFNRSAgICAgICA6IHN0cmluZyA9IFwiZGF0ZS10aW1lXCI7XHJcblx0c3RhdGljIHJlYWRvbmx5IENPTE9SX05BTUUgICAgICAgICAgOiBzdHJpbmcgPSBcImNvbG9yXCI7XHJcblxyXG4gICAgcmVhZG9ubHkgU0lHTjogUnVsZTtcclxuXHRyZWFkb25seSBJTlRFR0VSOiBSdWxlO1xyXG5cdHJlYWRvbmx5IEZMT0FUOiBSdWxlO1xyXG4gICAgcmVhZG9ubHkgTU9OVEg6IFJ1bGU7XHJcbiAgICByZWFkb25seSBXRUVLREFZOiBSdWxlO1xyXG5cdHJlYWRvbmx5IFdISVRFU1BBQ0VfU1RBUjogUnVsZTtcclxuXHRyZWFkb25seSBXSElURVNQQUNFX1BMVVM6IFJ1bGU7XHJcblx0cmVhZG9ubHkgSU5URUdFUl9SQU5HRTogUnVsZTtcclxuXHQvLyByZWFkb25seSBQQVRIOiBSdWxlOyAvLyBUT0RPIGltcGxlbWVudFxyXG5cdHJlYWRvbmx5IFRJTUU6IFJ1bGU7XHJcbiAgICByZWFkb25seSBEQVRFOiBSdWxlO1xyXG4gICAgcmVhZG9ubHkgREFURVRJTUU6IFJ1bGU7XHJcblx0cmVhZG9ubHkgQ09MT1I6IFJ1bGU7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLlNJR04gICAgICAgICAgICA9IHRoaXMubWFrZVNpZ24oKTtcclxuICAgICAgICB0aGlzLklOVEVHRVIgICAgICAgICA9IHRoaXMubWFrZUludGVnZXIoKTtcclxuXHRcdHRoaXMuRkxPQVQgICAgICAgICAgID0gdGhpcy5tYWtlRmxvYXQoKTtcclxuICAgICAgICB0aGlzLk1PTlRIICAgICAgICAgICA9IHRoaXMubWFrZU1vbnRoKCk7XHJcbiAgICAgICAgdGhpcy5XRUVLREFZICAgICAgICAgPSB0aGlzLm1ha2VXZWVrZGF5KCk7XHJcblx0XHR0aGlzLldISVRFU1BBQ0VfU1RBUiA9IHRoaXMubWFrZVdoaXRlc3BhY2VTdGFyKCk7XHJcblx0XHR0aGlzLldISVRFU1BBQ0VfUExVUyA9IHRoaXMubWFrZVdoaXRlc3BhY2VQbHVzKCk7XHJcblx0XHR0aGlzLklOVEVHRVJfUkFOR0UgICA9IHRoaXMubWFrZUludGVnZXJSYW5nZSgpO1xyXG5cdFx0Ly8gdGhpcy5QQVRIICAgICAgICAgICAgPSB0aGlzLm1ha2VQYXRoKCk7XHJcblx0XHR0aGlzLlRJTUUgICAgICAgICAgICA9IHRoaXMubWFrZVRpbWUoKTtcclxuICAgICAgICB0aGlzLkRBVEUgICAgICAgICAgICA9IHRoaXMubWFrZURhdGUoKTtcclxuICAgICAgICB0aGlzLkRBVEVUSU1FICAgICAgICA9IHRoaXMubWFrZURhdGV0aW1lKCk7XHJcblx0XHR0aGlzLkNPTE9SICAgICAgICAgICA9IHRoaXMubWFrZUNvbG9yKCk7XHJcbiAgICAgICAgdGhpcy5zeW1ib2xzLnNldChUZXJtaW5hbC5ESUdJVC5nZXRTeW1ib2woKSwgVGVybWluYWwuRElHSVQpO1xyXG4gICAgICAgIHRoaXMuc3ltYm9scy5zZXQoVGVybWluYWwuTEVUVEVSLmdldFN5bWJvbCgpLCBUZXJtaW5hbC5MRVRURVIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHN0YXRpYyBjbGVhckZpbGVzeXN0ZW1DYWNoZSgpIHtcclxuICAgIC8vIFRPRE8gaW1wbGVtZW50XHJcbiAgICAvLyAgICAgRUJORi5wYXRoQXV0b2NvbXBsZXRlci5jbGVhckZpbGVzeXN0ZW1DYWNoZSgpO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIHByaXZhdGUgbWFrZVNpZ24oKTogUnVsZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3IoRUJORi5TSUdOX05BTUUsXHJcbiAgICAgICAgICAgIFRlcm1pbmFsLmxpdGVyYWwoXCItXCIpLndpdGhOYW1lKCksXHJcbiAgICAgICAgICAgIFRlcm1pbmFsLmxpdGVyYWwoXCIrXCIpLndpdGhOYW1lKClcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgbWFrZUludGVnZXIoKTogUnVsZSB7XHJcbiAgICAgICAgLy8gaW50IC0+ICgtfCspP2RpZ2l0K1xyXG5cdFx0Y29uc3QgcmV0OiBSdWxlID0gdGhpcy5zZXF1ZW5jZShFQk5GLklOVEVHRVJfTkFNRSxcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25hbCh1bmRlZmluZWQsIHRoaXMuU0lHTi53aXRoTmFtZShcInNpZ25cIikpLndpdGhOYW1lKFwib3B0aW9uYWxcIiksXHJcbiAgICAgICAgICAgIHRoaXMucGx1cyh1bmRlZmluZWQsIFRlcm1pbmFsLkRJR0lULndpdGhOYW1lKFwiZGlnaXRcIikpLndpdGhOYW1lKFwicGx1c1wiKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0LnNldEV2YWx1YXRvcihwbiA9PiBwYXJzZUludChwbi5nZXRQYXJzZWRTdHJpbmcoKSkpO1xyXG4gICAgICAgIHJldC5zZXRBdXRvY29tcGxldGVyKEF1dG9jb21wbGV0ZXIuREVGQVVMVF9JTkxJTkVfQVVUT0NPTVBMRVRFUik7XHJcbiAgICAgICAgcmV0dXJuIHJldDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG1ha2VGbG9hdCgpOiBSdWxlIHtcclxuICAgICAgICBjb25zdCByZXQ6IFJ1bGUgPSB0aGlzLnNlcXVlbmNlKEVCTkYuRkxPQVRfTkFNRSxcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25hbCh1bmRlZmluZWQsIHRoaXMuU0lHTi53aXRoTmFtZSgpKS53aXRoTmFtZSgpLFxyXG4gICAgICAgICAgICB0aGlzLnBsdXModW5kZWZpbmVkLCBUZXJtaW5hbC5ESUdJVC53aXRoTmFtZSgpKS53aXRoTmFtZSgpLFxyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbmFsKHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VxdWVuY2UodW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgIFRlcm1pbmFsLmxpdGVyYWwoXCIuXCIpLndpdGhOYW1lKCksXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFyKHVuZGVmaW5lZCwgVGVybWluYWwuRElHSVQud2l0aE5hbWUoKSkud2l0aE5hbWUoXCJzdGFyXCIpXHJcbiAgICAgICAgICAgICAgICApLndpdGhOYW1lKFwic2VxdWVuY2VcIilcclxuICAgICAgICAgICAgKS53aXRoTmFtZSgpXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXQuc2V0RXZhbHVhdG9yKHBuID0+IHBhcnNlRmxvYXQocG4uZ2V0UGFyc2VkU3RyaW5nKCkpKTtcclxuICAgICAgICByZXQuc2V0QXV0b2NvbXBsZXRlcihBdXRvY29tcGxldGVyLkRFRkFVTFRfSU5MSU5FX0FVVE9DT01QTEVURVIpO1xyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBtYWtlV2hpdGVzcGFjZVN0YXIoKTogUnVsZSB7XHJcbiAgICAgICAgY29uc3QgcmV0OiBSdWxlID0gdGhpcy5zdGFyKEVCTkYuV0hJVEVTUEFDRV9TVEFSX05BTUUsIFRlcm1pbmFsLldISVRFU1BBQ0Uud2l0aE5hbWUoKSk7XHJcbiAgICAgICAgcmV0LnNldEF1dG9jb21wbGV0ZXIobmV3IElmTm90aGluZ1lldEVudGVyZWRBdXRvY29tcGxldGVyKFwiIFwiLCBcIlwiKSk7XHJcbiAgICAgICAgcmV0dXJuIHJldDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG1ha2VXaGl0ZXNwYWNlUGx1cygpOiBSdWxlIHtcclxuICAgICAgICBjb25zdCByZXQ6IFJ1bGUgPSB0aGlzLnBsdXMoRUJORi5XSElURVNQQUNFX1BMVVNfTkFNRSwgVGVybWluYWwuV0hJVEVTUEFDRS53aXRoTmFtZSgpKTtcclxuICAgICAgICByZXQuc2V0QXV0b2NvbXBsZXRlcihuZXcgSWZOb3RoaW5nWWV0RW50ZXJlZEF1dG9jb21wbGV0ZXIoXCIgXCIsIFwiXCIpKTtcclxuICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgbWFrZUludGVnZXJSYW5nZSgpOiBSdWxlIHtcclxuICAgICAgICBjb25zdCBkZWxpbWl0ZXI6IFJ1bGUgPSB0aGlzLnNlcXVlbmNlKHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgdGhpcy5XSElURVNQQUNFX1NUQVIud2l0aE5hbWUoXCJ3cypcIiksXHJcbiAgICAgICAgICAgIFRlcm1pbmFsLmxpdGVyYWwoXCItXCIpLndpdGhOYW1lKCksXHJcbiAgICAgICAgICAgIHRoaXMuV0hJVEVTUEFDRV9TVEFSLndpdGhOYW1lKFwid3MqXCIpXHJcbiAgICAgICAgKTtcclxuICAgICAgICBjb25zdCByZXQ6IFJ1bGUgPSB0aGlzLmpvaW4oRUJORi5JTlRFR0VSX1JBTkdFX05BTUUsXHJcbiAgICAgICAgICAgIHRoaXMuSU5URUdFUi53aXRoTmFtZSgpLFxyXG4gICAgICAgICAgICB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgZGVsaW1pdGVyLmdldFRhcmdldCgpLFxyXG4gICAgICAgICAgICB0cnVlLFxyXG4gICAgICAgICAgICBbXCJmcm9tXCIsIFwidG9cIl1cclxuICAgICAgICApO1xyXG4gICAgICAgIHJldC5zZXRFdmFsdWF0b3IocG4gPT4gbmV3IEludFJhbmdlKHBhcnNlSW50KHBuLmV2YWx1YXRlKDApKSwgcGFyc2VJbnQocG4uZXZhbHVhdGUoMSkpKSk7XHJcbiAgICAgICAgcmV0dXJuIHJldDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG1ha2VDb2xvcigpOiBSdWxlIHtcclxuICAgICAgICBjb25zdCBibGFjayAgICAgIDogUnVsZSA9IHRoaXMuc2VxdWVuY2UodW5kZWZpbmVkLCBUZXJtaW5hbC5saXRlcmFsKFwiYmxhY2tcIiAgICAgICApLndpdGhOYW1lKCkpLnNldEV2YWx1YXRvcihfcG4gPT4gRUJORi5yZ2IyaW50KCAgMCwgICAwLCAgIDApKTtcclxuXHRcdGNvbnN0IHdoaXRlICAgICAgOiBSdWxlID0gdGhpcy5zZXF1ZW5jZSh1bmRlZmluZWQsIFRlcm1pbmFsLmxpdGVyYWwoXCJ3aGl0ZVwiICAgICAgICkud2l0aE5hbWUoKSkuc2V0RXZhbHVhdG9yKF9wbiA9PiBFQk5GLnJnYjJpbnQoMjU1LCAyNTUsIDI1NSkpO1xyXG5cdFx0Y29uc3QgcmVkICAgICAgICA6IFJ1bGUgPSB0aGlzLnNlcXVlbmNlKHVuZGVmaW5lZCwgVGVybWluYWwubGl0ZXJhbChcInJlZFwiICAgICAgICAgKS53aXRoTmFtZSgpKS5zZXRFdmFsdWF0b3IoX3BuID0+IEVCTkYucmdiMmludCgyNTUsICAgMCwgICAwKSk7XHJcblx0XHRjb25zdCBvcmFuZ2UgICAgIDogUnVsZSA9IHRoaXMuc2VxdWVuY2UodW5kZWZpbmVkLCBUZXJtaW5hbC5saXRlcmFsKFwib3JhbmdlXCIgICAgICApLndpdGhOYW1lKCkpLnNldEV2YWx1YXRvcihfcG4gPT4gRUJORi5yZ2IyaW50KDI1NSwgMTI4LCAgIDApKTtcclxuXHRcdGNvbnN0IHllbGxvdyAgICAgOiBSdWxlID0gdGhpcy5zZXF1ZW5jZSh1bmRlZmluZWQsIFRlcm1pbmFsLmxpdGVyYWwoXCJ5ZWxsb3dcIiAgICAgICkud2l0aE5hbWUoKSkuc2V0RXZhbHVhdG9yKF9wbiA9PiBFQk5GLnJnYjJpbnQoMjU1LCAyNTUsICAgMCkpO1xyXG5cdFx0Y29uc3QgbGF3bmdyZWVuICA6IFJ1bGUgPSB0aGlzLnNlcXVlbmNlKHVuZGVmaW5lZCwgVGVybWluYWwubGl0ZXJhbChcImxhd24gZ3JlZW5cIiAgKS53aXRoTmFtZSgpKS5zZXRFdmFsdWF0b3IoX3BuID0+IEVCTkYucmdiMmludCgxMjgsIDI1NSwgICAwKSk7XHJcblx0XHRjb25zdCBncmVlbiAgICAgIDogUnVsZSA9IHRoaXMuc2VxdWVuY2UodW5kZWZpbmVkLCBUZXJtaW5hbC5saXRlcmFsKFwiZ3JlZW5cIiAgICAgICApLndpdGhOYW1lKCkpLnNldEV2YWx1YXRvcihfcG4gPT4gRUJORi5yZ2IyaW50KCAgMCwgMjU1LCAgIDApKTtcclxuXHRcdGNvbnN0IHNwcmluZ2dyZWVuOiBSdWxlID0gdGhpcy5zZXF1ZW5jZSh1bmRlZmluZWQsIFRlcm1pbmFsLmxpdGVyYWwoXCJzcHJpbmcgZ3JlZW5cIikud2l0aE5hbWUoKSkuc2V0RXZhbHVhdG9yKF9wbiA9PiBFQk5GLnJnYjJpbnQoICAwLCAyNTUsIDE4MCkpO1xyXG5cdFx0Y29uc3QgY3lhbiAgICAgICA6IFJ1bGUgPSB0aGlzLnNlcXVlbmNlKHVuZGVmaW5lZCwgVGVybWluYWwubGl0ZXJhbChcImN5YW5cIiAgICAgICAgKS53aXRoTmFtZSgpKS5zZXRFdmFsdWF0b3IoX3BuID0+IEVCTkYucmdiMmludCggIDAsIDI1NSwgMjU1KSk7XHJcblx0XHRjb25zdCBhenVyZSAgICAgIDogUnVsZSA9IHRoaXMuc2VxdWVuY2UodW5kZWZpbmVkLCBUZXJtaW5hbC5saXRlcmFsKFwiYXp1cmVcIiAgICAgICApLndpdGhOYW1lKCkpLnNldEV2YWx1YXRvcihfcG4gPT4gRUJORi5yZ2IyaW50KCAgMCwgMTI4LCAyNTUpKTtcclxuXHRcdGNvbnN0IGJsdWUgICAgICAgOiBSdWxlID0gdGhpcy5zZXF1ZW5jZSh1bmRlZmluZWQsIFRlcm1pbmFsLmxpdGVyYWwoXCJibHVlXCIgICAgICAgICkud2l0aE5hbWUoKSkuc2V0RXZhbHVhdG9yKF9wbiA9PiBFQk5GLnJnYjJpbnQoICAwLCAgIDAsIDI1NSkpO1xyXG5cdFx0Y29uc3QgdmlvbGV0ICAgICA6IFJ1bGUgPSB0aGlzLnNlcXVlbmNlKHVuZGVmaW5lZCwgVGVybWluYWwubGl0ZXJhbChcInZpb2xldFwiICAgICAgKS53aXRoTmFtZSgpKS5zZXRFdmFsdWF0b3IoX3BuID0+IEVCTkYucmdiMmludCgxMjgsICAgMCwgMjU1KSk7XHJcblx0XHRjb25zdCBtYWdlbnRhICAgIDogUnVsZSA9IHRoaXMuc2VxdWVuY2UodW5kZWZpbmVkLCBUZXJtaW5hbC5saXRlcmFsKFwibWFnZW50YVwiICAgICApLndpdGhOYW1lKCkpLnNldEV2YWx1YXRvcihfcG4gPT4gRUJORi5yZ2IyaW50KDI1NSwgICAwLCAyNTUpKTtcclxuXHRcdGNvbnN0IHBpbmsgICAgICAgOiBSdWxlID0gdGhpcy5zZXF1ZW5jZSh1bmRlZmluZWQsIFRlcm1pbmFsLmxpdGVyYWwoXCJwaW5rXCIgICAgICAgICkud2l0aE5hbWUoKSkuc2V0RXZhbHVhdG9yKF9wbiA9PiBFQk5GLnJnYjJpbnQoMjU1LCAgIDAsIDEyOCkpO1xyXG5cdFx0Y29uc3QgZ3JheSAgICAgICA6IFJ1bGUgPSB0aGlzLnNlcXVlbmNlKHVuZGVmaW5lZCwgVGVybWluYWwubGl0ZXJhbChcImdyYXlcIiAgICAgICAgKS53aXRoTmFtZSgpKS5zZXRFdmFsdWF0b3IoX3BuID0+IEVCTkYucmdiMmludCgxMjgsIDEyOCwgMTI4KSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGN1c3RvbTogUnVsZSA9IHRoaXMudHVwbGUodW5kZWZpbmVkLCB0aGlzLklOVEVHRVIud2l0aE5hbWUoKSwgXCJyZWRcIiwgXCJncmVlblwiLCBcImJsdWVcIik7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLm9yKEVCTkYuQ09MT1JfTkFNRSxcclxuICAgICAgICAgICAgY3VzdG9tLndpdGhOYW1lKCksXHJcbiAgICAgICAgICAgIGJsYWNrLndpdGhOYW1lKCksXHJcbiAgICAgICAgICAgIHdoaXRlLndpdGhOYW1lKCksXHJcbiAgICAgICAgICAgIHJlZC53aXRoTmFtZSgpLFxyXG4gICAgICAgICAgICBvcmFuZ2Uud2l0aE5hbWUoKSxcclxuICAgICAgICAgICAgeWVsbG93LndpdGhOYW1lKCksXHJcbiAgICAgICAgICAgIGxhd25ncmVlbi53aXRoTmFtZSgpLFxyXG4gICAgICAgICAgICBncmVlbi53aXRoTmFtZSgpLFxyXG4gICAgICAgICAgICBzcHJpbmdncmVlbi53aXRoTmFtZSgpLFxyXG4gICAgICAgICAgICBjeWFuLndpdGhOYW1lKCksXHJcbiAgICAgICAgICAgIGF6dXJlLndpdGhOYW1lKCksXHJcbiAgICAgICAgICAgIGJsdWUud2l0aE5hbWUoKSxcclxuICAgICAgICAgICAgdmlvbGV0LndpdGhOYW1lKCksXHJcbiAgICAgICAgICAgIG1hZ2VudGEud2l0aE5hbWUoKSxcclxuICAgICAgICAgICAgcGluay53aXRoTmFtZSgpLFxyXG4gICAgICAgICAgICBncmF5LndpdGhOYW1lKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIHJnYjJpbnQocjogbnVtYmVyLCBnOiBudW1iZXIsIGI6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuICgweGZmIDw8IDI0KSB8ICgociAmIDB4ZmYpIDw8IDE2KSB8ICgoZyAmIDB4ZmYpIDw8IDgpIHwgKGIgJiAweGZmKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG1ha2VUaW1lKCk6IFJ1bGUge1xyXG4gICAgICAgIGNvbnN0IGhvdXI6IFJ1bGUgPSB0aGlzLnNlcXVlbmNlKHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25hbCh1bmRlZmluZWQsIFRlcm1pbmFsLkRJR0lULndpdGhOYW1lKCkpLndpdGhOYW1lKCksXHJcbiAgICAgICAgICAgIFRlcm1pbmFsLkRJR0lULndpdGhOYW1lKCkpO1xyXG4gICAgICAgIGhvdXIuc2V0QXV0b2NvbXBsZXRlcihBdXRvY29tcGxldGVyLkRFRkFVTFRfSU5MSU5FX0FVVE9DT01QTEVURVIpO1xyXG5cclxuICAgICAgICBjb25zdCBtaW51dGU6IFJ1bGUgPSB0aGlzLnNlcXVlbmNlKHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgVGVybWluYWwuRElHSVQud2l0aE5hbWUoKSxcclxuXHRcdFx0VGVybWluYWwuRElHSVQud2l0aE5hbWUoKSk7XHJcbiAgICAgICAgbWludXRlLnNldEF1dG9jb21wbGV0ZXIoQXV0b2NvbXBsZXRlci5ERUZBVUxUX0lOTElORV9BVVRPQ09NUExFVEVSKTtcclxuXHJcblx0XHRjb25zdCByZXQ6IFJ1bGUgPSB0aGlzLnNlcXVlbmNlKEVCTkYuVElNRV9OQU1FLFxyXG4gICAgICAgICAgICBob3VyLndpdGhOYW1lKFwiSEhcIiksXHJcbiAgICAgICAgICAgIFRlcm1pbmFsLmxpdGVyYWwoXCI6XCIpLndpdGhOYW1lKCksXHJcblx0XHRcdG1pbnV0ZS53aXRoTmFtZShcIk1NXCIpKTtcclxuXHJcblx0XHRyZXQuc2V0RXZhbHVhdG9yKHBuID0+IEVCTkYucGFyc2VUaW1lKHBuLmdldFBhcnNlZFN0cmluZygpKSk7XHJcblx0XHRyZXQuc2V0QXV0b2NvbXBsZXRlcihuZXcgRW50aXJlU2VxdWVuY2VDb21wbGV0ZXIodGhpcywgbmV3IE1hcDxzdHJpbmcsIEF1dG9jb21wbGV0aW9uW10+KCkpKTtcclxuXHRcdHJldHVybiByZXQ7XHJcblx0fVxyXG5cclxuICAgIHByaXZhdGUgbWFrZU1vbnRoKCk6IFJ1bGUge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9yKEVCTkYuTU9OVEhfTkFNRSxcclxuICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZSh1bmRlZmluZWQsIFRlcm1pbmFsLmxpdGVyYWwoXCJKYW51YXJ5XCIpICAud2l0aE5hbWUoKSkuc2V0RXZhbHVhdG9yKF9wbiA9PiAgMCkud2l0aE5hbWUoXCJqYW51YXJ5XCIpLFxyXG4gICAgICAgICAgICB0aGlzLnNlcXVlbmNlKHVuZGVmaW5lZCwgVGVybWluYWwubGl0ZXJhbChcIkZlYnJ1YXJ5XCIpIC53aXRoTmFtZSgpKS5zZXRFdmFsdWF0b3IoX3BuID0+ICAxKS53aXRoTmFtZShcImZlYnJ1YXJ5XCIpLFxyXG4gICAgICAgICAgICB0aGlzLnNlcXVlbmNlKHVuZGVmaW5lZCwgVGVybWluYWwubGl0ZXJhbChcIk1hcmNoXCIpICAgIC53aXRoTmFtZSgpKS5zZXRFdmFsdWF0b3IoX3BuID0+ICAyKS53aXRoTmFtZShcIm1hcmNoXCIpLFxyXG4gICAgICAgICAgICB0aGlzLnNlcXVlbmNlKHVuZGVmaW5lZCwgVGVybWluYWwubGl0ZXJhbChcIkFwcmlsXCIpICAgIC53aXRoTmFtZSgpKS5zZXRFdmFsdWF0b3IoX3BuID0+ICAzKS53aXRoTmFtZShcImFwcmlsXCIpLFxyXG4gICAgICAgICAgICB0aGlzLnNlcXVlbmNlKHVuZGVmaW5lZCwgVGVybWluYWwubGl0ZXJhbChcIk1heVwiKSAgICAgIC53aXRoTmFtZSgpKS5zZXRFdmFsdWF0b3IoX3BuID0+ICA0KS53aXRoTmFtZShcIm1heVwiKSxcclxuICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZSh1bmRlZmluZWQsIFRlcm1pbmFsLmxpdGVyYWwoXCJKdW5lXCIpICAgICAud2l0aE5hbWUoKSkuc2V0RXZhbHVhdG9yKF9wbiA9PiAgNSkud2l0aE5hbWUoXCJqdW5lXCIpLFxyXG4gICAgICAgICAgICB0aGlzLnNlcXVlbmNlKHVuZGVmaW5lZCwgVGVybWluYWwubGl0ZXJhbChcIkp1bHlcIikgICAgIC53aXRoTmFtZSgpKS5zZXRFdmFsdWF0b3IoX3BuID0+ICA2KS53aXRoTmFtZShcImp1bHlcIiksXHJcbiAgICAgICAgICAgIHRoaXMuc2VxdWVuY2UodW5kZWZpbmVkLCBUZXJtaW5hbC5saXRlcmFsKFwiQXVndXN0XCIpICAgLndpdGhOYW1lKCkpLnNldEV2YWx1YXRvcihfcG4gPT4gIDcpLndpdGhOYW1lKFwiYXVndXN0XCIpLFxyXG4gICAgICAgICAgICB0aGlzLnNlcXVlbmNlKHVuZGVmaW5lZCwgVGVybWluYWwubGl0ZXJhbChcIlNlcHRlbWJlclwiKS53aXRoTmFtZSgpKS5zZXRFdmFsdWF0b3IoX3BuID0+ICA4KS53aXRoTmFtZShcInNlcHRlbWJlclwiKSxcclxuICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZSh1bmRlZmluZWQsIFRlcm1pbmFsLmxpdGVyYWwoXCJPY3RvYmVyXCIpICAud2l0aE5hbWUoKSkuc2V0RXZhbHVhdG9yKF9wbiA9PiAgOSkud2l0aE5hbWUoXCJvY3RvYmVyXCIpLFxyXG4gICAgICAgICAgICB0aGlzLnNlcXVlbmNlKHVuZGVmaW5lZCwgVGVybWluYWwubGl0ZXJhbChcIk5vdmVtYmVyXCIpIC53aXRoTmFtZSgpKS5zZXRFdmFsdWF0b3IoX3BuID0+IDEwKS53aXRoTmFtZShcIm5vdmVtYmVyXCIpLFxyXG4gICAgICAgICAgICB0aGlzLnNlcXVlbmNlKHVuZGVmaW5lZCwgVGVybWluYWwubGl0ZXJhbChcIkRlY2VtYmVyXCIpIC53aXRoTmFtZSgpKS5zZXRFdmFsdWF0b3IoX3BuID0+IDExKS53aXRoTmFtZShcImRlY2VtYmVyXCIpLFxyXG4gICAgICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgbWFrZVdlZWtkYXkoKTogUnVsZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3IoRUJORi5XRUVLREFZX05BTUUsXHJcbiAgICAgICAgICAgIHRoaXMuc2VxdWVuY2UodW5kZWZpbmVkLCBUZXJtaW5hbC5saXRlcmFsKFwiTW9uZGF5XCIpICAgLndpdGhOYW1lKCkpLnNldEV2YWx1YXRvcihfcG4gPT4gIDApLndpdGhOYW1lKFwibW9uZGF5XCIpLFxyXG4gICAgICAgICAgICB0aGlzLnNlcXVlbmNlKHVuZGVmaW5lZCwgVGVybWluYWwubGl0ZXJhbChcIlR1ZXNkYXlcIikgIC53aXRoTmFtZSgpKS5zZXRFdmFsdWF0b3IoX3BuID0+ICAxKS53aXRoTmFtZShcInR1ZXNkYXlcIiksXHJcbiAgICAgICAgICAgIHRoaXMuc2VxdWVuY2UodW5kZWZpbmVkLCBUZXJtaW5hbC5saXRlcmFsKFwiV2VkbmVzZGF5XCIpLndpdGhOYW1lKCkpLnNldEV2YWx1YXRvcihfcG4gPT4gIDIpLndpdGhOYW1lKFwid2VkbmVzZGF5XCIpLFxyXG4gICAgICAgICAgICB0aGlzLnNlcXVlbmNlKHVuZGVmaW5lZCwgVGVybWluYWwubGl0ZXJhbChcIlRodXJzZGF5XCIpIC53aXRoTmFtZSgpKS5zZXRFdmFsdWF0b3IoX3BuID0+ICAzKS53aXRoTmFtZShcInRodXJzZGF5XCIpLFxyXG4gICAgICAgICAgICB0aGlzLnNlcXVlbmNlKHVuZGVmaW5lZCwgVGVybWluYWwubGl0ZXJhbChcIkZyaWRheVwiKSAgIC53aXRoTmFtZSgpKS5zZXRFdmFsdWF0b3IoX3BuID0+ICA0KS53aXRoTmFtZShcImZyaWRheVwiKSxcclxuICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZSh1bmRlZmluZWQsIFRlcm1pbmFsLmxpdGVyYWwoXCJTYXR1cmRheVwiKSAud2l0aE5hbWUoKSkuc2V0RXZhbHVhdG9yKF9wbiA9PiAgNSkud2l0aE5hbWUoXCJzYXR1cmRheVwiKSxcclxuICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZSh1bmRlZmluZWQsIFRlcm1pbmFsLmxpdGVyYWwoXCJTdW5kYXlcIikgICAud2l0aE5hbWUoKSkuc2V0RXZhbHVhdG9yKF9wbiA9PiAgNikud2l0aE5hbWUoXCJzdW5kYXlcIiksXHJcbiAgICAgICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBtYWtlRGF0ZSgpOiBSdWxlIHtcclxuICAgICAgICBjb25zdCBkYXk6IFJ1bGUgPSB0aGlzLnNlcXVlbmNlKHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25hbCh1bmRlZmluZWQsIFRlcm1pbmFsLkRJR0lULndpdGhOYW1lKCkpLndpdGhOYW1lKCksXHJcbiAgICAgICAgICAgIFRlcm1pbmFsLkRJR0lULndpdGhOYW1lKCkpO1xyXG4gICAgICAgIGRheS5zZXRBdXRvY29tcGxldGVyKEF1dG9jb21wbGV0ZXIuREVGQVVMVF9JTkxJTkVfQVVUT0NPTVBMRVRFUik7XHJcbiAgICAgICAgZGF5LnNldEV2YWx1YXRvcihwbiA9PiBwYXJzZUludChwbi5nZXRQYXJzZWRTdHJpbmcoKSkpO1xyXG5cclxuICAgICAgICBjb25zdCB5ZWFyOiBSdWxlID0gdGhpcy5zZXF1ZW5jZSh1bmRlZmluZWQsXHJcbiAgICAgICAgICAgIFRlcm1pbmFsLkRJR0lULndpdGhOYW1lKCksXHJcbiAgICAgICAgICAgIFRlcm1pbmFsLkRJR0lULndpdGhOYW1lKCksXHJcbiAgICAgICAgICAgIFRlcm1pbmFsLkRJR0lULndpdGhOYW1lKCksXHJcbiAgICAgICAgICAgIFRlcm1pbmFsLkRJR0lULndpdGhOYW1lKCksXHJcbiAgICAgICAgKTtcclxuICAgICAgICB5ZWFyLnNldEF1dG9jb21wbGV0ZXIoQXV0b2NvbXBsZXRlci5ERUZBVUxUX0lOTElORV9BVVRPQ09NUExFVEVSKTtcclxuICAgICAgICB5ZWFyLnNldEV2YWx1YXRvcihwbiA9PiBwYXJzZUludChwbi5nZXRQYXJzZWRTdHJpbmcoKSkpO1xyXG5cclxuXHJcbiAgICAgICAgY29uc3QgcmV0OiBSdWxlID0gdGhpcy5zZXF1ZW5jZShFQk5GLkRBVEVfTkFNRSxcclxuICAgICAgICAgICAgZGF5LndpdGhOYW1lKFwiZGF5XCIpLFxyXG4gICAgICAgICAgICBUZXJtaW5hbC5saXRlcmFsKFwiIFwiKS53aXRoTmFtZSgpLFxyXG4gICAgICAgICAgICB0aGlzLk1PTlRILndpdGhOYW1lKFwibW9udGhcIiksXHJcbiAgICAgICAgICAgIFRlcm1pbmFsLmxpdGVyYWwoXCIgXCIpLndpdGhOYW1lKCksXHJcbiAgICAgICAgICAgIHllYXIud2l0aE5hbWUoXCJ5ZWFyXCIpXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXQuc2V0RXZhbHVhdG9yKHBuID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZGF5OiBudW1iZXIgPSBwbi5ldmFsdWF0ZShcImRheVwiKTtcclxuICAgICAgICAgICAgY29uc3QgbW9udGg6IG51bWJlciA9IHBuLmV2YWx1YXRlKFwibW9udGhcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IHllYXI6IG51bWJlciA9IHBuLmV2YWx1YXRlKFwieWVhclwiKTtcclxuICAgICAgICAgICAgbGV0IGRhdGU6IERhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICBkYXRlLnNldERhdGUoZGF5KTtcclxuICAgICAgICAgICAgZGF0ZS5zZXRNb250aChtb250aCk7XHJcbiAgICAgICAgICAgIGRhdGUuc2V0RnVsbFllYXIoeWVhcik7XHJcbiAgICAgICAgICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHJldHVybiBkYXRlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldC5zZXRBdXRvY29tcGxldGVyKG5ldyBFbnRpcmVTZXF1ZW5jZUNvbXBsZXRlcih0aGlzLCBuZXcgTWFwPHN0cmluZywgQXV0b2NvbXBsZXRpb25bXT4oKSkpO1xyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBtYWtlRGF0ZXRpbWUoKTogUnVsZSB7XHJcbiAgICAgICAgY29uc3QgcmV0OiBSdWxlID0gdGhpcy5zZXF1ZW5jZShFQk5GLkRBVEVUSU1FX05BTUUsXHJcbiAgICAgICAgICAgIHRoaXMuREFURS53aXRoTmFtZShcImRhdGVcIiksXHJcbiAgICAgICAgICAgIFRlcm1pbmFsLmxpdGVyYWwoXCIgXCIpLndpdGhOYW1lKCksXHJcbiAgICAgICAgICAgIHRoaXMuVElNRS53aXRoTmFtZShcInRpbWVcIikpO1xyXG5cclxuICAgICAgICByZXQuc2V0RXZhbHVhdG9yKHBuID0+IHtcclxuICAgICAgICAgICAgbGV0IGRhdGU6IERhdGUgPSBwbi5ldmFsdWF0ZShcImRhdGVcIik7XHJcbiAgICAgICAgICAgIGxldCB0aW1lOiBEYXRlID0gcG4uZXZhbHVhdGUoXCJ0aW1lXCIpO1xyXG4gICAgICAgICAgICBkYXRlLnNldEhvdXJzKHRpbWUuZ2V0SG91cnMoKSk7XHJcbiAgICAgICAgICAgIGRhdGUuc2V0TWludXRlcyh0aW1lLmdldE1pbnV0ZXMoKSk7XHJcbiAgICAgICAgICAgIGRhdGUuc2V0U2Vjb25kcyh0aW1lLmdldFNlY29uZHMoKSk7XHJcbiAgICAgICAgICAgIGRhdGUuc2V0TWlsbGlzZWNvbmRzKHRpbWUuZ2V0TWlsbGlzZWNvbmRzKCkpO1xyXG4gICAgICAgICAgICByZXR1cm4gZGF0ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXQuc2V0QXV0b2NvbXBsZXRlcihuZXcgRW50aXJlU2VxdWVuY2VDb21wbGV0ZXIodGhpcywgbmV3IE1hcDxzdHJpbmcsIEF1dG9jb21wbGV0aW9uW10+KSk7XHJcbiAgICAgICAgcmV0dXJuIHJldDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHN0YXRpYyBwYXJzZVRpbWUodGltZTogc3RyaW5nKTogRGF0ZSB7XHJcbiAgICAgICAgY29uc3QgdG9rczogc3RyaW5nW10gPSB0aW1lLnNwbGl0KFwiOlwiKTtcclxuICAgICAgICBpZih0b2tzLmxlbmd0aCAhPSAyKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gcGFyc2UgXCIgKyB0aW1lKTtcclxuICAgICAgICBjb25zdCBoOiBudW1iZXIgPSBwYXJzZUludCh0b2tzWzBdKTtcclxuICAgICAgICBjb25zdCBtOiBudW1iZXIgPSBwYXJzZUludCh0b2tzWzFdKTtcclxuXHJcbiAgICAgICAgaWYoaCA9PT0gdW5kZWZpbmVkIHx8IGggPCAwIHx8IGggPiAyMylcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIHBhcnNlIFwiICsgdGltZSk7XHJcbiAgICAgICAgaWYobSA9PT0gdW5kZWZpbmVkIHx8IG0gPCAwIHx8IG0gPiA1OSlcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIHBhcnNlIFwiICsgdGltZSk7XHJcbiAgICAgICAgY29uc3QgZCA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgZC5zZXRIb3VycyhoKTtcclxuICAgICAgICBkLnNldE1pbnV0ZXMobSk7XHJcbiAgICAgICAgZC5zZXRTZWNvbmRzKDApO1xyXG4gICAgICAgIGQuc2V0TWlsbGlzZWNvbmRzKDApO1xyXG4gICAgICAgIHJldHVybiBkO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRPRE8gcGF0aFxyXG59XHJcbiIsImltcG9ydCB7IEF1dG9jb21wbGV0ZXIsIElmTm90aGluZ1lldEVudGVyZWRBdXRvY29tcGxldGVyIH0gZnJvbSBcIi4uL0F1dG9jb21wbGV0ZXIuanNcIjtcclxuaW1wb3J0IHsgTmFtZWQgfSBmcm9tIFwiLi4vY29yZS9OYW1lZC5qc1wiO1xyXG5pbXBvcnQgeyBCTkYgfSBmcm9tIFwiLi4vY29yZS9CTkYuanNcIjtcclxuaW1wb3J0IHsgTm9uVGVybWluYWwgfSBmcm9tIFwiLi4vY29yZS9Ob25UZXJtaW5hbC5qc1wiO1xyXG5pbXBvcnQgeyBTeW0gfSBmcm9tIFwiLi4vY29yZS9TeW1ib2wuanNcIjtcclxuaW1wb3J0IHsgVGVybWluYWwgfSBmcm9tIFwiLi4vY29yZS9UZXJtaW5hbC5qc1wiO1xyXG5pbXBvcnQgeyBJbnRSYW5nZSB9IGZyb20gXCIuLi91dGlsL0ludFJhbmdlLmpzXCI7XHJcbmltcG9ydCB7IEpvaW4gfSBmcm9tIFwiLi9Kb2luLmpzXCI7XHJcbmltcG9ydCB7IE5hbWVkUnVsZSB9IGZyb20gXCIuL05hbWVkUnVsZS5qc1wiO1xyXG5pbXBvcnQgeyBPcHRpb25hbCB9IGZyb20gXCIuL09wdGlvbmFsLmpzXCI7XHJcbmltcG9ydCB7IE9yIH0gZnJvbSBcIi4vT3IuanNcIjtcclxuaW1wb3J0IHsgUGx1cyB9IGZyb20gXCIuL1BsdXMuanNcIjtcclxuaW1wb3J0IHsgUmVwZWF0IH0gZnJvbSBcIi4vUmVwZWF0LmpzXCI7XHJcbmltcG9ydCB7IFJ1bGUgfSBmcm9tIFwiLi9SdWxlLmpzXCI7XHJcbmltcG9ydCB7IFNlcXVlbmNlIH0gZnJvbSBcIi4vU2VxdWVuY2UuanNcIjtcclxuaW1wb3J0IHsgU3RhciB9IGZyb20gXCIuL1N0YXIuanNcIjtcclxuaW1wb3J0IHsgRXZhbHVhdG9yIH0gZnJvbSBcIi4uL0V2YWx1YXRvci5qc1wiXHJcbmltcG9ydCB7IEF1dG9jb21wbGV0aW9uIH0gZnJvbSBcIi4uL2NvcmUvQXV0b2NvbXBsZXRpb24uanNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBFQk5GQ29yZSB7XHJcblxyXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IHN5bWJvbHM6IE1hcDxzdHJpbmcsIFN5bT4gPSBuZXcgTWFwKCk7XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBydWxlczogUnVsZVtdID0gW107XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBibmY6IEJORiA9IG5ldyBCTkYoKTtcclxuXHJcbiAgICBwcml2YXRlIGNvbXBpbGVkOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgY29uc3RydWN0b3Iob3RoZXI/OiBFQk5GQ29yZSkge1xyXG4gICAgICAgIGlmKG90aGVyICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgZm9yKGxldCBba2V5LCB2YWx1ZV0gb2Ygb3RoZXIuc3ltYm9scylcclxuICAgICAgICAgICAgICAgIHRoaXMuc3ltYm9scy5zZXQoa2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMucnVsZXMucHVzaCguLi5vdGhlci5ydWxlcyk7XHJcbiAgICAgICAgICAgIHRoaXMuY29tcGlsZWQgPSBvdGhlci5jb21waWxlZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U3ltYm9sKHR5cGU6IHN0cmluZyk6IFN5bSB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3ltYm9scy5nZXQodHlwZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29tcGlsZSh0b3BMZXZlbFN5bWJvbDogU3ltKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jb21waWxlZCA9IGZhbHNlOyAvLyBvdGhlcndpc2UgcmVtb3ZlUnVsZXMoKSBhbmQgYWRkUnVsZSgpIHdpbGwgY29tcGxhaW5cclxuICAgICAgICAvLyB1cGRhdGUgdGhlIHN0YXJ0IHN5bWJvbFxyXG4gICAgICAgIHRoaXMucmVtb3ZlUnVsZXMoQk5GLkFSVElGSUNJQUxfU1RBUlRfU1lNQk9MKTtcclxuICAgICAgICBjb25zdCBzZXF1ZW5jZTogU2VxdWVuY2UgPSBuZXcgU2VxdWVuY2UoQk5GLkFSVElGSUNJQUxfU1RBUlRfU1lNQk9MLCB0b3BMZXZlbFN5bWJvbCwgQk5GLkFSVElGSUNJQUxfU1RPUF9TWU1CT0wpO1xyXG4gICAgICAgIHRoaXMuYWRkUnVsZShzZXF1ZW5jZSk7XHJcbiAgICAgICAgc2VxdWVuY2Uuc2V0RXZhbHVhdG9yKEV2YWx1YXRvci5GSVJTVF9DSElMRF9FVkFMVUFUT1IpO1xyXG5cclxuICAgICAgICB0aGlzLmJuZi5yZXNldCgpO1xyXG5cclxuICAgICAgICBmb3IobGV0IHIgb2YgdGhpcy5ydWxlcylcclxuICAgICAgICAgICAgci5jcmVhdGVCTkYodGhpcy5ibmYpO1xyXG5cclxuICAgICAgICB0aGlzLmNvbXBpbGVkID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRCTkYoKTogQk5GIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ibmY7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UnVsZXModGFyZ2V0OiBOb25UZXJtaW5hbCk6IFJ1bGVbXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucnVsZXMuZmlsdGVyKHAgPT4gcC5nZXRUYXJnZXQoKS5lcXVhbHModGFyZ2V0KSk7XHJcbiAgICB9XHJcblxyXG4gICAgcGx1cyh0eXBlOiBzdHJpbmcgfCB1bmRlZmluZWQsIGNoaWxkOiBOYW1lZDxhbnk+KTogUnVsZSB7XHJcbiAgICAgICAgY29uc3QgdGd0OiBOb25UZXJtaW5hbCB8IHVuZGVmaW5lZCA9IHRoaXMubmV3T3JFeGlzdGluZ05vblRlcm1pbmFsKHR5cGUpO1xyXG4gICAgICAgIGNvbnN0IHBsdXM6IFBsdXMgPSBuZXcgUGx1cyh0Z3QsIGNoaWxkLmdldFN5bWJvbCgpKTtcclxuICAgICAgICBwbHVzLnNldFBhcnNlZENoaWxkTmFtZXMoY2hpbGQuZ2V0TmFtZSgpKTtcclxuICAgICAgICB0aGlzLmFkZFJ1bGUocGx1cyk7XHJcbiAgICAgICAgcmV0dXJuIHBsdXM7XHJcbiAgICB9XHJcblxyXG4gICAgc3Rhcih0eXBlOiBzdHJpbmcgfCB1bmRlZmluZWQsIGNoaWxkOiBOYW1lZDxhbnk+KTogUnVsZSB7XHJcbiAgICAgICAgY29uc3QgdGd0ID0gdGhpcy5uZXdPckV4aXN0aW5nTm9uVGVybWluYWwodHlwZSk7XHJcbiAgICAgICAgY29uc3Qgc3RhcjogU3RhciA9IG5ldyBTdGFyKHRndCwgY2hpbGQuZ2V0U3ltYm9sKCkpO1xyXG4gICAgICAgIHN0YXIuc2V0UGFyc2VkQ2hpbGROYW1lcyhjaGlsZC5nZXROYW1lKCkpO1xyXG4gICAgICAgIHRoaXMuYWRkUnVsZShzdGFyKTtcclxuICAgICAgICByZXR1cm4gc3RhcjtcclxuICAgIH1cclxuXHJcbiAgICBvcih0eXBlOiBzdHJpbmcgfCB1bmRlZmluZWQsIC4uLm9wdGlvbnM6IE5hbWVkPGFueT5bXSk6IFJ1bGUge1xyXG4gICAgICAgIGNvbnN0IHRndCA9IHRoaXMubmV3T3JFeGlzdGluZ05vblRlcm1pbmFsKHR5cGUpO1xyXG4gICAgICAgIGNvbnN0IG9yOiBPciA9IG5ldyBPcih0Z3QsIC4uLkVCTkZDb3JlLmdldFN5bWJvbHMoLi4ub3B0aW9ucykpO1xyXG4gICAgICAgIG9yLnNldFBhcnNlZENoaWxkTmFtZXMoLi4uRUJORkNvcmUuZ2V0TmFtZXMoLi4ub3B0aW9ucykpO1xyXG4gICAgICAgIHRoaXMuYWRkUnVsZShvcik7XHJcbiAgICAgICAgcmV0dXJuIG9yO1xyXG4gICAgfVxyXG5cclxuICAgIG9wdGlvbmFsKHR5cGU6IHN0cmluZyB8IHVuZGVmaW5lZCwgY2hpbGQ6IE5hbWVkPGFueT4pOiBSdWxlIHtcclxuICAgICAgICBjb25zdCB0Z3QgPSB0aGlzLm5ld09yRXhpc3RpbmdOb25UZXJtaW5hbCh0eXBlKTtcclxuICAgICAgICBjb25zdCBvcHRpb25hbDogT3B0aW9uYWwgPSBuZXcgT3B0aW9uYWwodGd0LCBjaGlsZC5nZXRTeW1ib2woKSk7XHJcbiAgICAgICAgb3B0aW9uYWwuc2V0UGFyc2VkQ2hpbGROYW1lcyhjaGlsZC5nZXROYW1lKCkpO1xyXG4gICAgICAgIHRoaXMuYWRkUnVsZShvcHRpb25hbCk7XHJcbiAgICAgICAgcmV0dXJuIG9wdGlvbmFsO1xyXG4gICAgfVxyXG5cclxuICAgIHJlcGVhdCh0eXBlOiBzdHJpbmcgfCB1bmRlZmluZWQsIGNoaWxkOiBOYW1lZDxhbnk+LCBmcm9tOiBudW1iZXIsIHRvOiBudW1iZXIpOiBSdWxlIHtcclxuICAgICAgICBjb25zdCB0Z3QgPSB0aGlzLm5ld09yRXhpc3RpbmdOb25UZXJtaW5hbCh0eXBlKTtcclxuICAgICAgICBjb25zdCByZXBlYXQ6IFJlcGVhdCA9IG5ldyBSZXBlYXQodGd0LCBjaGlsZC5nZXRTeW1ib2woKSwgZnJvbSwgdG8pO1xyXG4gICAgICAgIHJlcGVhdC5zZXRQYXJzZWRDaGlsZE5hbWVzKGNoaWxkLmdldE5hbWUoKSk7XHJcbiAgICAgICAgdGhpcy5hZGRSdWxlKHJlcGVhdCk7XHJcbiAgICAgICAgcmV0dXJuIHJlcGVhdDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUT0RPIG1pc3Npbmc6IHJlcGVhdCh0eXBlOiBzdHJpbmcsIGNoaWxkOiBOYW1lZCwgLi4ubmFtZXM6IHN0cmluZ1tdKTogUnVsZSB7fVxyXG5cclxuICAgIGpvaW4odHlwZTogc3RyaW5nIHwgdW5kZWZpbmVkLCBjaGlsZDogTmFtZWQ8YW55Piwgb3BlbjogU3ltIHwgdW5kZWZpbmVkLCBjbG9zZTogU3ltIHwgdW5kZWZpbmVkLCBkZWxpbWl0ZXI6IFN5bSB8IHVuZGVmaW5lZCwgb25seUtlZXBFbnRyaWVzOiBib29sZWFuLCBjYXJkaW5hbGl0eTogSW50UmFuZ2UpOiBSdWxlO1xyXG4gICAgam9pbih0eXBlOiBzdHJpbmcgfCB1bmRlZmluZWQsIGNoaWxkOiBOYW1lZDxhbnk+LCBvcGVuOiBTeW0gfCB1bmRlZmluZWQsIGNsb3NlOiBTeW0gfCB1bmRlZmluZWQsIGRlbGltaXRlcjogU3ltIHwgdW5kZWZpbmVkLCBvbmx5S2VlcEVudHJpZXM6IGJvb2xlYW4sIG5hbWVzOiBzdHJpbmdbXSk6IFJ1bGU7XHJcbiAgICBqb2luKHR5cGU6IHN0cmluZyB8IHVuZGVmaW5lZCwgY2hpbGQ6IE5hbWVkPGFueT4sIG9wZW46IFN5bSB8IHVuZGVmaW5lZCwgY2xvc2U6IFN5bSB8IHVuZGVmaW5lZCwgZGVsaW1pdGVyOiBTeW0gfCB1bmRlZmluZWQsIG9ubHlLZWVwRW50cmllczogYm9vbGVhbiwgbzogYW55KTogUnVsZSB7XHJcbiAgICAgICAgY29uc3QgdGd0ID0gdGhpcy5uZXdPckV4aXN0aW5nTm9uVGVybWluYWwodHlwZSk7XHJcbiAgICAgICAgbGV0IGNhcmRpbmFsaXR5OiBJbnRSYW5nZSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcclxuICAgICAgICBsZXQgbmFtZXM6IHN0cmluZ1tdIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIGlmKG8gaW5zdGFuY2VvZiBJbnRSYW5nZSkge1xyXG4gICAgICAgICAgICBuYW1lcyA9IFtjaGlsZC5nZXROYW1lKCldO1xyXG4gICAgICAgICAgICBjYXJkaW5hbGl0eSA9IG8gYXMgSW50UmFuZ2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBuYW1lcyA9IG8gYXMgc3RyaW5nW107XHJcbiAgICAgICAgICAgIGNhcmRpbmFsaXR5ID0gbmV3IEludFJhbmdlKG5hbWVzLmxlbmd0aCwgbmFtZXMubGVuZ3RoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgam9pbjogSm9pbiA9IG5ldyBKb2luKHRndCwgY2hpbGQuZ2V0U3ltYm9sKCksIG9wZW4sIGNsb3NlLCBkZWxpbWl0ZXIsIGNhcmRpbmFsaXR5KTtcclxuICAgICAgICBqb2luLnNldE9ubHlLZWVwRW50cmllcyhvbmx5S2VlcEVudHJpZXMpO1xyXG4gICAgICAgIGpvaW4uc2V0UGFyc2VkQ2hpbGROYW1lcyguLi5uYW1lcyk7XHJcbiAgICAgICAgdGhpcy5hZGRSdWxlKGpvaW4pO1xyXG4gICAgICAgIHJldHVybiBqb2luO1xyXG4gICAgfVxyXG5cclxuICAgIGxpc3QodHlwZTogc3RyaW5nIHwgdW5kZWZpbmVkLCBjaGlsZDogTmFtZWQ8YW55Pik6IFJ1bGUge1xyXG4gICAgICAgIGNvbnN0IHdzU3RhcjogTmFtZWRSdWxlID0gdGhpcy5zdGFyKHVuZGVmaW5lZCwgVGVybWluYWwuV0hJVEVTUEFDRS53aXRoTmFtZSgpKS53aXRoTmFtZShcIndzKlwiKTtcclxuICAgICAgICBjb25zdCBkZWxpbWl0ZXI6IFJ1bGUgPSB0aGlzLnNlcXVlbmNlKHVuZGVmaW5lZCwgd3NTdGFyLCBUZXJtaW5hbC5saXRlcmFsKFwiLFwiKS53aXRoTmFtZSgpLCB3c1N0YXIpO1xyXG4gICAgICAgIGRlbGltaXRlci5zZXRBdXRvY29tcGxldGVyKG5ldyBJZk5vdGhpbmdZZXRFbnRlcmVkQXV0b2NvbXBsZXRlcihcIiwgXCIsIFwiXCIpKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5qb2luKHR5cGUsIGNoaWxkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZGVsaW1pdGVyLmdldFRhcmdldCgpLCB0cnVlLCBJbnRSYW5nZS5TVEFSKTtcclxuICAgIH1cclxuXHJcbiAgICB0dXBsZSh0eXBlOiBzdHJpbmcgfCB1bmRlZmluZWQsIGNoaWxkOiBOYW1lZDxhbnk+LCAuLi5uYW1lczogc3RyaW5nW10pOiBSdWxlIHtcclxuICAgICAgICBjb25zdCB3c1N0YXI6IE5hbWVkUnVsZSA9IHRoaXMuc3Rhcih1bmRlZmluZWQsIFRlcm1pbmFsLldISVRFU1BBQ0Uud2l0aE5hbWUoKSkud2l0aE5hbWUoXCJ3cypcIik7XHJcbiAgICAgICAgd3NTdGFyLmdldCgpLnNldEF1dG9jb21wbGV0ZXIoKHBuLCBfanVzdENoZWNrKSA9PiBBdXRvY29tcGxldGlvbi5saXRlcmFsKHBuLCBbXCJcIl0pKTtcclxuICAgICAgICBjb25zdCBvcGVuOiBSdWxlICAgICAgPSB0aGlzLnNlcXVlbmNlKHVuZGVmaW5lZCwgVGVybWluYWwubGl0ZXJhbChcIihcIikud2l0aE5hbWUoXCJvcGVuXCIpLCB3c1N0YXIpO1xyXG4gICAgICAgIGNvbnN0IGNsb3NlOiBSdWxlICAgICA9IHRoaXMuc2VxdWVuY2UodW5kZWZpbmVkLCB3c1N0YXIsIFRlcm1pbmFsLmxpdGVyYWwoXCIpXCIpLndpdGhOYW1lKFwiY2xvc2VcIikpO1xyXG4gICAgICAgIGNvbnN0IGRlbGltaXRlcjogUnVsZSA9IHRoaXMuc2VxdWVuY2UodW5kZWZpbmVkLCB3c1N0YXIsIFRlcm1pbmFsLmxpdGVyYWwoXCIsXCIpLndpdGhOYW1lKFwiZGVsaW1pdGVyXCIpLCB3c1N0YXIpO1xyXG4gICAgICAgIGNvbnN0IHJldDogUnVsZSA9IHRoaXMuam9pbih0eXBlLCBjaGlsZCwgb3Blbi5nZXRUYXJnZXQoKSwgY2xvc2UuZ2V0VGFyZ2V0KCksIGRlbGltaXRlci5nZXRUYXJnZXQoKSwgdHJ1ZSwgbmFtZXMpO1xyXG4gICAgICAgIHJldC5zZXRBdXRvY29tcGxldGVyKChwbiwganVzdENoZWNrKSA9PiB7XHJcbiAgICAgICAgICAgIGlmKHBuLmdldFBhcnNlZFN0cmluZygpLmxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICBpZihqdXN0Q2hlY2spXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQXV0b2NvbXBsZXRpb24uZG9lc0F1dG9jb21wbGV0ZShwbik7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlcTogQXV0b2NvbXBsZXRpb24uRW50aXJlU2VxdWVuY2UgPSBuZXcgQXV0b2NvbXBsZXRpb24uRW50aXJlU2VxdWVuY2UocG4pO1xyXG4gICAgICAgICAgICBzZXEuYWRkTGl0ZXJhbChvcGVuLmdldFRhcmdldCgpLCBcIm9wZW5cIiwgXCIoXCIpO1xyXG4gICAgICAgICAgICBzZXEuYWRkUGFyYW1ldGVyaXplZChjaGlsZC5nZXRTeW1ib2woKSwgbmFtZXNbMF0sIG5hbWVzWzBdKTtcclxuICAgICAgICAgICAgZm9yKGxldCBpID0gMTsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBzZXEuYWRkTGl0ZXJhbChkZWxpbWl0ZXIuZ2V0VGFyZ2V0KCksIFwiZGVsaW1pdGVyXCIsIFwiLCBcIik7XHJcbiAgICAgICAgICAgICAgICBzZXEuYWRkUGFyYW1ldGVyaXplZChjaGlsZC5nZXRTeW1ib2woKSwgbmFtZXNbaV0sIG5hbWVzW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZXEuYWRkTGl0ZXJhbChjbG9zZS5nZXRUYXJnZXQoKSwgXCJjbG9zZVwiLCBcIilcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBzZXEuYXNBcnJheSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9XHJcblxyXG4gICAgc2VxdWVuY2UodHlwZTogc3RyaW5nIHwgdW5kZWZpbmVkLCAuLi5jaGlsZHJlbjogTmFtZWQ8YW55PltdKTogUnVsZSB7XHJcbiAgICAgICAgY29uc3QgdGd0OiBOb25UZXJtaW5hbCB8IHVuZGVmaW5lZCA9IHRoaXMubmV3T3JFeGlzdGluZ05vblRlcm1pbmFsKHR5cGUpO1xyXG4gICAgICAgIGNvbnN0IHNlcXVlbmNlOiBTZXF1ZW5jZSA9IG5ldyBTZXF1ZW5jZSh0Z3QsIC4uLkVCTkZDb3JlLmdldFN5bWJvbHMoLi4uY2hpbGRyZW4pKTtcclxuICAgICAgICBzZXF1ZW5jZS5zZXRQYXJzZWRDaGlsZE5hbWVzKC4uLkVCTkZDb3JlLmdldE5hbWVzKC4uLmNoaWxkcmVuKSk7XHJcbiAgICAgICAgdGhpcy5hZGRSdWxlKHNlcXVlbmNlKTtcclxuICAgICAgICByZXR1cm4gc2VxdWVuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIHN0YXRpYyBnZXRTeW1ib2xzKC4uLm5hbWVkOiBOYW1lZDxhbnk+W10pOiBTeW1bXSB7XHJcbiAgICAgICAgY29uc3QgcmV0OiBTeW1bXSA9IG5ldyBBcnJheShuYW1lZC5sZW5ndGgpO1xyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBuYW1lZC5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgcmV0W2ldID0gbmFtZWRbaV0uZ2V0U3ltYm9sKCk7XHJcbiAgICAgICAgcmV0dXJuIHJldDtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgc3RhdGljIGdldE5hbWVzKC4uLm5hbWVkOiBOYW1lZDxhbnk+W10pOiBzdHJpbmdbXSB7XHJcbiAgICAgICAgY29uc3QgcmV0OiBzdHJpbmdbXSA9IG5ldyBBcnJheShuYW1lZC5sZW5ndGgpO1xyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBuYW1lZC5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgcmV0W2ldID0gbmFtZWRbaV0uZ2V0TmFtZSgpO1xyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhZGRSdWxlKHJ1bGU6IFJ1bGUpOiB2b2lkIHtcclxuICAgICAgICBsZXQgczogU3ltID0gcnVsZS5nZXRUYXJnZXQoKTtcclxuICAgICAgICBpZih0aGlzLnN5bWJvbHMuZ2V0KHMuZ2V0U3ltYm9sKCkpID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHRoaXMuc3ltYm9scy5zZXQocy5nZXRTeW1ib2woKSwgcyk7XHJcblxyXG4gICAgICAgIGZvcihsZXQgcyBvZiBydWxlLmdldENoaWxkcmVuKCkpIHtcclxuICAgICAgICAgICAgaWYoIXMuaXNFcHNpbG9uKCkgJiYgdGhpcy5zeW1ib2xzLmdldChzLmdldFN5bWJvbCgpKSA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zeW1ib2xzLnNldChzLmdldFN5bWJvbCgpLCBzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ydWxlcy5wdXNoKHJ1bGUpO1xyXG4gICAgICAgIHRoaXMuY29tcGlsZWQgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVtb3ZlUnVsZXMoc3ltYm9sOiBOb25UZXJtaW5hbCk6IHZvaWQge1xyXG4gICAgICAgIGZvcihsZXQgaSA9IHRoaXMucnVsZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pXHJcbiAgICAgICAgICAgIGlmKHRoaXMucnVsZXNbaV0uZ2V0VGFyZ2V0KCkuZXF1YWxzKHN5bWJvbCkpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnJ1bGVzLnNwbGljZShpLCAxKTtcclxuICAgICAgICB0aGlzLmNvbXBpbGVkID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBuZXdPckV4aXN0aW5nTm9uVGVybWluYWwodHlwZTogc3RyaW5nIHwgdW5kZWZpbmVkKTogTm9uVGVybWluYWwgfCB1bmRlZmluZWQge1xyXG4gICAgICAgIGlmKHR5cGUgPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICBsZXQgczogU3ltIHwgdW5kZWZpbmVkID0gdGhpcy5zeW1ib2xzLmdldCh0eXBlKTtcclxuICAgICAgICBpZihzID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHMgPSBuZXcgTm9uVGVybWluYWwodHlwZSk7XHJcbiAgICAgICAgcmV0dXJuIHMgYXMgTm9uVGVybWluYWw7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgUGFyc2VkTm9kZSB9IGZyb20gXCIuLi9QYXJzZWROb2RlLmpzXCI7XHJcbmltcG9ydCB7IFBhcnNlZE5vZGVGYWN0b3J5IH0gZnJvbSBcIi4uL2NvcmUvUGFyc2VkTm9kZUZhY3RvcnkuanNcIjtcclxuaW1wb3J0IHsgRGVmYXVsdFBhcnNlZE5vZGUgfSBmcm9tIFwiLi4vY29yZS9EZWZhdWx0UGFyc2VkTm9kZS5qc1wiO1xyXG5pbXBvcnQgeyBNYXRjaGVyIH0gZnJvbSBcIi4uL2NvcmUvTWF0Y2hlci5qc1wiO1xyXG5pbXBvcnQgeyBQcm9kdWN0aW9uIH0gZnJvbSBcIi4uL2NvcmUvUHJvZHVjdGlvbi5qc1wiO1xyXG5pbXBvcnQgeyBTeW0gfSBmcm9tIFwiLi4vY29yZS9TeW1ib2wuanNcIjtcclxuXHJcbm1vZHVsZSBFQk5GUGFyc2VkTm9kZUZhY3Rvcnkge1xyXG4gICAgZXhwb3J0IGNvbnN0IElOU1RBTkNFOiBQYXJzZWROb2RlRmFjdG9yeSA9IHtcclxuICAgICAgICBjcmVhdGVOb2RlOiAobWF0Y2hlcjogTWF0Y2hlciwgc3ltYm9sOiBTeW0sIHByb2R1Y3Rpb246IFByb2R1Y3Rpb24pOiBEZWZhdWx0UGFyc2VkTm9kZSA9PiBuZXcgUGFyc2VkTm9kZShtYXRjaGVyLCBzeW1ib2wsIHByb2R1Y3Rpb24pXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IEVCTkZQYXJzZWROb2RlRmFjdG9yeSB9O1xyXG4iLCJpbXBvcnQgeyBQYXJzZWROb2RlIH0gZnJvbSBcIi4uL1BhcnNlZE5vZGUuanNcIjtcclxuaW1wb3J0IHsgQk5GIH0gZnJvbSBcIi4uL2NvcmUvQk5GLmpzXCI7XHJcbmltcG9ydCB7IERlZmF1bHRQYXJzZWROb2RlIH0gZnJvbSBcIi4uL2NvcmUvRGVmYXVsdFBhcnNlZE5vZGUuanNcIjtcclxuaW1wb3J0IHsgTGV4ZXIgfSBmcm9tIFwiLi4vY29yZS9MZXhlci5qc1wiO1xyXG5pbXBvcnQgeyBSRFBhcnNlciwgU3ltYm9sU2VxdWVuY2UgfSBmcm9tIFwiLi4vY29yZS9SRFBhcnNlci5qc1wiO1xyXG5pbXBvcnQgeyBFQk5GUGFyc2VkTm9kZUZhY3RvcnkgfSBmcm9tIFwiLi9FQk5GUGFyc2VkTm9kZUZhY3RvcnkuanNcIjtcclxuXHJcbnR5cGUgUGFyc2VTdGFydExpc3RlbmVyID0gKCkgPT4gdm9pZDtcclxuXHJcbmNsYXNzIEVCTkZQYXJzZXIgZXh0ZW5kcyBSRFBhcnNlciB7XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBwYXJzZVN0YXJ0TGlzdGVuZXJzOiBQYXJzZVN0YXJ0TGlzdGVuZXJbXSA9IFtdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGdyYW1tYXI6IEJORiwgbGV4ZXI6IExleGVyKSB7XHJcbiAgICAgICAgc3VwZXIoZ3JhbW1hciwgbGV4ZXIsIEVCTkZQYXJzZWROb2RlRmFjdG9yeS5JTlNUQU5DRSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIGNyZWF0ZVBhcnNlZFRyZWUobGVhZlNlcXVlbmNlOiBTeW1ib2xTZXF1ZW5jZSwgcmV0TGFzdDogRGVmYXVsdFBhcnNlZE5vZGVbXSk6IERlZmF1bHRQYXJzZWROb2RlIHtcclxuICAgICAgICB0aGlzLmZpcmVQYXJzaW5nU3RhcnRlZCgpO1xyXG4gICAgICAgIGxldCByb290ID0gc3VwZXIuY3JlYXRlUGFyc2VkVHJlZShsZWFmU2VxdWVuY2UsIHJldExhc3QpO1xyXG4gICAgICAgIChyb290IGFzIFBhcnNlZE5vZGUpLm5vdGlmeUxpc3RlbmVycygpO1xyXG4gICAgICAgIHJldHVybiByb290O1xyXG4gICAgfVxyXG5cclxuICAgIGFkZFBhcnNlU3RhcnRMaXN0ZW5lcihsOiBQYXJzZVN0YXJ0TGlzdGVuZXIpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnBhcnNlU3RhcnRMaXN0ZW5lcnMucHVzaChsKTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVQYXJzZVN0YXJ0TGlzdGVuZXIobDogUGFyc2VTdGFydExpc3RlbmVyKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IGlkeCA9IHRoaXMucGFyc2VTdGFydExpc3RlbmVycy5pbmRleE9mKGwpO1xyXG4gICAgICAgIGlmKGlkeCAhPT0gLTEpXHJcbiAgICAgICAgICAgIHRoaXMucGFyc2VTdGFydExpc3RlbmVycy5zcGxpY2UoaWR4LCAxKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGZpcmVQYXJzaW5nU3RhcnRlZCgpOiB2b2lkIHtcclxuICAgICAgICBmb3IobGV0IGwgb2YgdGhpcy5wYXJzZVN0YXJ0TGlzdGVuZXJzKVxyXG4gICAgICAgICAgICBsKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IFBhcnNlU3RhcnRMaXN0ZW5lciwgRUJORlBhcnNlciB9O1xyXG4iLCJpbXBvcnQgeyBOb25UZXJtaW5hbCB9IGZyb20gXCIuLi9jb3JlL05vblRlcm1pbmFsLmpzXCI7XHJcbmltcG9ydCB7IFByb2R1Y3Rpb24gfSBmcm9tIFwiLi4vY29yZS9Qcm9kdWN0aW9uLmpzXCI7XHJcbmltcG9ydCB7IFN5bSB9IGZyb20gXCIuLi9jb3JlL1N5bWJvbC5qc1wiO1xyXG5pbXBvcnQgeyBSdWxlIH0gZnJvbSBcIi4vUnVsZS5qc1wiO1xyXG5cclxuY2xhc3MgRUJORlByb2R1Y3Rpb24gZXh0ZW5kcyBQcm9kdWN0aW9uIHtcclxuICAgIFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBydWxlOiBSdWxlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJ1bGU6IFJ1bGUsIGxlZnQ6IE5vblRlcm1pbmFsLCAuLi5yaWdodDogU3ltW10pIHtcclxuICAgICAgICBzdXBlcihsZWZ0LCAuLi5yaWdodCk7XHJcbiAgICAgICAgdGhpcy5ydWxlID0gcnVsZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRSdWxlKCk6IFJ1bGUge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJ1bGU7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IEVCTkZQcm9kdWN0aW9uIH07XHJcbiIsImltcG9ydCB7IFBhcnNlZE5vZGUgfSBmcm9tIFwiLi4vUGFyc2VkTm9kZS5qc1wiO1xyXG5pbXBvcnQgeyBCTkYgfSBmcm9tIFwiLi4vY29yZS9CTkYuanNcIjtcclxuaW1wb3J0IHsgTm9uVGVybWluYWwgfSBmcm9tIFwiLi4vY29yZS9Ob25UZXJtaW5hbC5qc1wiO1xyXG5pbXBvcnQgeyBBc3RCdWlsZGVyLCBQcm9kdWN0aW9uIH0gZnJvbSBcIi4uL2NvcmUvUHJvZHVjdGlvbi5qc1wiO1xyXG5pbXBvcnQgeyBTeW0gfSBmcm9tIFwiLi4vY29yZS9TeW1ib2wuanNcIjtcclxuaW1wb3J0IHsgVGVybWluYWwgfSBmcm9tIFwiLi4vY29yZS9UZXJtaW5hbC5qc1wiO1xyXG5pbXBvcnQgeyBFdmFsdWF0b3IgfSBmcm9tIFwiLi4vRXZhbHVhdG9yLmpzXCI7XHJcbmltcG9ydCB7IEludFJhbmdlIH0gZnJvbSBcIi4uL3V0aWwvSW50UmFuZ2UuanNcIjtcclxuaW1wb3J0IHsgUmVwZWF0IH0gZnJvbSBcIi4vUmVwZWF0LmpzXCI7XHJcbmltcG9ydCB7IFJ1bGUgfSBmcm9tIFwiLi9SdWxlLmpzXCI7XHJcbmltcG9ydCB7IFN0YXIgfSBmcm9tIFwiLi9TdGFyLmpzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgSm9pbiBleHRlbmRzIFJ1bGUge1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBvcGVuOiBTeW0gfCB1bmRlZmluZWQ7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNsb3NlOiBTeW0gfCB1bmRlZmluZWQ7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGRlbGltaXRlcjogU3ltIHwgdW5kZWZpbmVkO1xyXG4gICAgcHJpdmF0ZSBjYXJkaW5hbGl0eTogSW50UmFuZ2U7XHJcbiAgICBwcml2YXRlIG9ubHlLZWVwRW50cmllczogYm9vbGVhbiA9IHRydWU7XHJcblxyXG4gICAgY29uc3RydWN0b3IodGd0OiBOb25UZXJtaW5hbCB8IHVuZGVmaW5lZCwgZW50cnk6IFN5bSwgb3BlbjogU3ltIHwgdW5kZWZpbmVkLCBjbG9zZTogU3ltIHwgdW5kZWZpbmVkLCBkZWxpbWl0ZXI6IFN5bSB8IHVuZGVmaW5lZCwgY2FyZGluYWxpdHk6IEludFJhbmdlKSB7XHJcbiAgICAgICAgc3VwZXIoXCJqb2luXCIsIHRndCwgZW50cnkpO1xyXG4gICAgICAgIHRoaXMub3BlbiA9IG9wZW47XHJcbiAgICAgICAgdGhpcy5jbG9zZSA9IGNsb3NlO1xyXG4gICAgICAgIHRoaXMuZGVsaW1pdGVyID0gZGVsaW1pdGVyO1xyXG4gICAgICAgIHRoaXMuY2FyZGluYWxpdHkgPSBjYXJkaW5hbGl0eTtcclxuICAgICAgICB0aGlzLnNldEV2YWx1YXRvcihFdmFsdWF0b3IuQUxMX0NISUxEUkVOX0VWQUxVQVRPUik7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RW50cnkoKTogU3ltIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlblswXTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDYXJkaW5hbGl0eSgpOiBJbnRSYW5nZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FyZGluYWxpdHk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0Q2FyZGluYWxpdHkoY2FyZGluYWxpdHk6IEludFJhbmdlKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jYXJkaW5hbGl0eSA9IGNhcmRpbmFsaXR5O1xyXG4gICAgfVxyXG5cclxuICAgIHNldE9ubHlLZWVwRW50cmllcyhvbmx5S2VlcEVudHJpZXM6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICB0aGlzLm9ubHlLZWVwRW50cmllcyA9IG9ubHlLZWVwRW50cmllcztcclxuICAgIH1cclxuXHJcbiAgICBvdmVycmlkZSBjcmVhdGVCTkYoZ3JhbW1hcjogQk5GKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgZmlyc3Q6IFN5bSA9IHRoaXMuY2hpbGRyZW5bMF07XHJcbiAgICAgICAgY29uc3QgbmV4dDogTm9uVGVybWluYWwgPSBuZXcgTm9uVGVybWluYWwoXCJuZXh0LVwiICsgTm9uVGVybWluYWwubWFrZVJhbmRvbVN5bWJvbCgpKTtcclxuICAgICAgICBjb25zdCBoYXNPcGVuOiBib29sZWFuID0gdGhpcy5vcGVuICE9PSB1bmRlZmluZWQgJiYgIXRoaXMub3Blbi5pc0Vwc2lsb24oKTtcclxuICAgICAgICBjb25zdCBoYXNDbG9zZTogYm9vbGVhbiA9IHRoaXMuY2xvc2UgIT09IHVuZGVmaW5lZCAmJiAhdGhpcy5jbG9zZS5pc0Vwc2lsb24oKTtcclxuICAgICAgICBjb25zdCBoYXNEZWxpbWl0ZXI6IGJvb2xlYW4gPSB0aGlzLmRlbGltaXRlciAhPT0gdW5kZWZpbmVkICYmICF0aGlzLmRlbGltaXRlci5pc0Vwc2lsb24oKTtcclxuXHJcbiAgICAgICAgaWYoKGhhc09wZW4gJiYgIWhhc0Nsb3NlKSB8fCAoIWhhc09wZW4gJiYgaGFzQ2xvc2UpKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJKb2luIG11c3QgaGF2ZSBlaXRoZXIgYm90aCBvcGVuIGFuZCBjbG9zZSBvciBuZWl0aGVyXCIpO1xyXG5cclxuICAgICAgICBpZihoYXNEZWxpbWl0ZXIpIHtcclxuICAgICAgICAgICAgY29uc3QgcDogUHJvZHVjdGlvbiA9IFJ1bGUuYWRkUHJvZHVjdGlvbihncmFtbWFyLCB0aGlzLCBuZXh0LCB0aGlzLmRlbGltaXRlciBhcyBTeW0sIGZpcnN0KTtcclxuICAgICAgICAgICAgY29uc3QgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgICAgIHAub25FeHRlbnNpb24oKHBhcmVudCwgLi4uY2hpbGRyZW4pID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG50aEVudHJ5OiBudW1iZXIgPSAocGFyZW50IGFzIFBhcnNlZE5vZGUpLmdldE50aEVudHJ5SW5QYXJlbnQoKSArIDE7XHJcbiAgICAgICAgICAgICAgICBjaGlsZHJlblswXS5zZXROYW1lKFwiZGVsaW1pdGVyXCIpO1xyXG4gICAgICAgICAgICAgICAgY2hpbGRyZW5bMV0uc2V0TmFtZSh0aGF0LmdldE5hbWVGb3JDaGlsZChudGhFbnRyeSkpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmKHRoaXMub25seUtlZXBFbnRyaWVzKVxyXG4gICAgICAgICAgICAgICAgcC5zZXRBc3RCdWlsZGVyKChwYXJlbnQsIC4uLmNoaWxkcmVuKSA9PiBwYXJlbnQuYWRkQ2hpbGRyZW4oY2hpbGRyZW5bMV0pKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgcC5zZXRBc3RCdWlsZGVyKEFzdEJ1aWxkZXIuREVGQVVMVClcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHA6IFByb2R1Y3Rpb24gPSBSdWxlLmFkZFByb2R1Y3Rpb24oZ3JhbW1hciwgdGhpcywgbmV4dCwgZmlyc3QpO1xyXG4gICAgICAgICAgICBjb25zdCB0aGF0ID0gdGhpcztcclxuICAgICAgICAgICAgcC5vbkV4dGVuc2lvbigocGFyZW50LCAuLi5jaGlsZHJlbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbnRoRW50cnk6IG51bWJlciA9IChwYXJlbnQgYXMgUGFyc2VkTm9kZSkuZ2V0TnRoRW50cnlJblBhcmVudCgpICsgMTtcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuWzBdLnNldE5hbWUodGhhdC5nZXROYW1lRm9yQ2hpbGQobnRoRW50cnkpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHAuc2V0QXN0QnVpbGRlcigocGFyZW50LCAuLi5jaGlsZHJlbikgPT4gcGFyZW50LmFkZENoaWxkcmVuKGNoaWxkcmVuWzBdKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBBc3N1bWUgTCAtPiBmaXJzdCBuZXh0XHJcbiAgICAgICAgY29uc3QgYXN0QnVpbGRlcjogQXN0QnVpbGRlciA9IChwYXJlbnQsIC4uLmNoaWxkcmVuKSA9PiB7XHJcbiAgICAgICAgICAgIHBhcmVudC5hZGRDaGlsZHJlbihjaGlsZHJlblswXSk7XHJcbiAgICAgICAgICAgIGZvcihsZXQgcG4gb2YgY2hpbGRyZW5bMV0uZ2V0Q2hpbGRyZW4oKSlcclxuICAgICAgICAgICAgICAgIHBhcmVudC5hZGRDaGlsZHJlbiguLi5wbi5nZXRDaGlsZHJlbigpKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCByZXBldGl0aW9uOiBOb25UZXJtaW5hbCA9IG5ldyBOb25UZXJtaW5hbChcInJlcGV0aXRpb246XCIgKyBOb25UZXJtaW5hbC5tYWtlUmFuZG9tU3ltYm9sKCkpO1xyXG5cclxuICAgICAgICAvLyArIDogTCAtPiBmaXJzdCBuZXh0KlxyXG4gICAgICAgIGlmKHRoaXMuY2FyZGluYWxpdHkuZXF1YWxzKEludFJhbmdlLlBMVVMpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXI6IFN0YXIgPSBuZXcgU3Rhcih1bmRlZmluZWQsIG5leHQpO1xyXG4gICAgICAgICAgICBzdGFyLnNldFBhcnNlZENoaWxkTmFtZXMoXCJuZXh0XCIpO1xyXG4gICAgICAgICAgICBzdGFyLmNyZWF0ZUJORihncmFtbWFyKTtcclxuICAgICAgICAgICAgY29uc3QgcDogUHJvZHVjdGlvbiA9IFJ1bGUuYWRkUHJvZHVjdGlvbihncmFtbWFyLCB0aGlzLCByZXBldGl0aW9uLCBmaXJzdCwgc3Rhci5nZXRUYXJnZXQoKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xyXG4gICAgICAgICAgICBwLm9uRXh0ZW5zaW9uKChfcGFyZW50LCAuLi5jaGlsZHJlbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY2hpbGRyZW5bMF0uc2V0TmFtZSh0aGF0LmdldE5hbWVGb3JDaGlsZCgwKSk7XHJcbiAgICAgICAgICAgICAgICBjaGlsZHJlblsxXS5zZXROYW1lKFwic3RhclwiKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHAuc2V0QXN0QnVpbGRlcihhc3RCdWlsZGVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEwgLT4gZmlyc3QgTFxyXG5cdFx0Ly8gTCAtPiBuZXh0IExcclxuXHRcdC8vIEwgLT4gZVxyXG5cclxuXHRcdC8vICogOiBMIC0+IGZpcnN0IG5leHQqXHJcblx0XHQvLyAgICAgTCAtPiBlcHNpbG9uXHJcblx0XHRlbHNlIGlmKHRoaXMuY2FyZGluYWxpdHkuZXF1YWxzKEludFJhbmdlLlNUQVIpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXIgPSBuZXcgU3Rhcih1bmRlZmluZWQsIG5leHQpO1xyXG4gICAgICAgICAgICBzdGFyLnNldFBhcnNlZENoaWxkTmFtZXMoXCJuZXh0XCIpO1xyXG4gICAgICAgICAgICBzdGFyLmNyZWF0ZUJORihncmFtbWFyKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHAxID0gUnVsZS5hZGRQcm9kdWN0aW9uKGdyYW1tYXIsIHRoaXMsIHJlcGV0aXRpb24sIGZpcnN0LCBzdGFyLmdldFRhcmdldCgpKTtcclxuICAgICAgICAgICAgY29uc3QgcDIgPSBSdWxlLmFkZFByb2R1Y3Rpb24oZ3JhbW1hciwgdGhpcywgcmVwZXRpdGlvbiwgVGVybWluYWwuRVBTSUxPTik7XHJcbiAgICAgICAgICAgIHAxLnNldEFzdEJ1aWxkZXIoYXN0QnVpbGRlcik7XHJcbiAgICAgICAgICAgIHAyLnNldEFzdEJ1aWxkZXIoKF9wYXJlbnQsIC4uLl9jaGlsZHJlbikgPT4ge30pO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdGhhdCA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICBwMS5vbkV4dGVuc2lvbigoX3BhcmVudCwgLi4uY2hpbGRyZW4pID0+IHtcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuWzBdLnNldE5hbWUodGhhdC5nZXROYW1lRm9yQ2hpbGQoMCkpXHJcbiAgICAgICAgICAgICAgICBjaGlsZHJlblsxXS5zZXROYW1lKFwic3RhclwiKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyA/IDogTCAtPiBmaXJzdFxyXG5cdFx0Ly8gICAgIEwgLT4gZXBzaWxvblxyXG5cdFx0ZWxzZSBpZih0aGlzLmNhcmRpbmFsaXR5LmVxdWFscyhJbnRSYW5nZS5PUFRJT05BTCkpIHtcclxuXHRcdFx0Y29uc3QgcDE6IFByb2R1Y3Rpb24gPSBSdWxlLmFkZFByb2R1Y3Rpb24oZ3JhbW1hciwgdGhpcywgcmVwZXRpdGlvbiwgZmlyc3QpOyAvLyB1c2luZyBkZWZhdWx0IEFTVEJ1aWxkZXJcclxuICAgICAgICAgICAgY29uc3QgdGhhdCA9IHRoaXM7XHJcblx0XHRcdHAxLm9uRXh0ZW5zaW9uKChfcGFyZW50LCAuLi5jaGlsZHJlbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY2hpbGRyZW5bMF0uc2V0TmFtZSh0aGF0LmdldE5hbWVGb3JDaGlsZCgwKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cdFx0XHRjb25zdCBwMjogUHJvZHVjdGlvbiA9IFJ1bGUuYWRkUHJvZHVjdGlvbihncmFtbWFyLCB0aGlzLCByZXBldGl0aW9uLCBUZXJtaW5hbC5FUFNJTE9OKTtcclxuXHRcdFx0cDIuc2V0QXN0QnVpbGRlcigoX3BhcmVudCwgLi4uX2NoaWxkcmVuKSA9PiB7fSk7XHJcblx0XHR9XHJcblxyXG4gICAgICAgIC8vIERlYWxpbmcgd2l0aCBhIHNwZWNpZmljIHJhbmdlXHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxvd2VyID0gdGhpcy5jYXJkaW5hbGl0eS5nZXRMb3dlcigpO1xyXG4gICAgICAgICAgICBjb25zdCB1cHBlciA9IHRoaXMuY2FyZGluYWxpdHkuZ2V0VXBwZXIoKTtcclxuICAgICAgICAgICAgaWYobG93ZXIgPT09IDAgJiYgdXBwZXIgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIFJ1bGUuYWRkUHJvZHVjdGlvbihncmFtbWFyLCB0aGlzLCByZXBldGl0aW9uLCBUZXJtaW5hbC5FUFNJTE9OKS5zZXRBc3RCdWlsZGVyKChfcGFyZW50LCAuLi5fY2hpbGRyZW4pID0+IHt9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKGxvd2VyID09PSAxICYmIHVwcGVyID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwOiBQcm9kdWN0aW9uID0gUnVsZS5hZGRQcm9kdWN0aW9uKGdyYW1tYXIsIHRoaXMsIHJlcGV0aXRpb24sIGZpcnN0KTsgLy8gdXNpbmcgZGVmYXVsdCBBU1RCdWlsZGVyXHJcbiAgICAgICAgICAgICAgICBjb25zdCB0aGF0ID0gdGhpcztcclxuICAgICAgICAgICAgICAgIHAub25FeHRlbnNpb24oKF9wYXJlbnQsIC4uLmNoaWxkcmVuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW5bMF0uc2V0TmFtZSh0aGF0LmdldE5hbWVGb3JDaGlsZCgwKSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmKGxvd2VyIDw9IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXBlYXQ6IFJlcGVhdCA9IG5ldyBSZXBlYXQodW5kZWZpbmVkLCBuZXh0LCAwLCB1cHBlciAtIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcGVhdC5zZXRQYXJzZWRDaGlsZE5hbWVzKFwibmV4dFwiKTtcclxuICAgICAgICAgICAgICAgICAgICByZXBlYXQuY3JlYXRlQk5GKGdyYW1tYXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHAgPSBSdWxlLmFkZFByb2R1Y3Rpb24oZ3JhbW1hciwgdGhpcywgcmVwZXRpdGlvbiwgZmlyc3QsIHJlcGVhdC5nZXRUYXJnZXQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgcC5zZXRBc3RCdWlsZGVyKGFzdEJ1aWxkZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHAub25FeHRlbnNpb24oKF9wYXJlbnQsIC4uLmNoaWxkcmVuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuWzBdLnNldE5hbWUodGhhdC5nZXROYW1lRm9yQ2hpbGQoMCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlblsxXS5zZXROYW1lKFwicmVwZWF0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIFJ1bGUuYWRkUHJvZHVjdGlvbihncmFtbWFyLCB0aGlzLCByZXBldGl0aW9uLCBUZXJtaW5hbC5FUFNJTE9OKS5zZXRBc3RCdWlsZGVyKChfcGFyZW50LCAuLi5fY2hpbGRyZW4pID0+IHt9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcGVhdDogUmVwZWF0ID0gbmV3IFJlcGVhdCh1bmRlZmluZWQsIG5leHQsIGxvd2VyIC0gMSwgdXBwZXIgLSAxKTtcclxuICAgICAgICAgICAgICAgICAgICByZXBlYXQuc2V0UGFyc2VkQ2hpbGROYW1lcyhcIm5leHRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVwZWF0LmNyZWF0ZUJORihncmFtbWFyKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwID0gUnVsZS5hZGRQcm9kdWN0aW9uKGdyYW1tYXIsIHRoaXMsIHJlcGV0aXRpb24sIGZpcnN0LCByZXBlYXQuZ2V0VGFyZ2V0KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgIHAuc2V0QXN0QnVpbGRlcihhc3RCdWlsZGVyKTtcclxuICAgICAgICAgICAgICAgICAgICBwLm9uRXh0ZW5zaW9uKChfcGFyZW50LCAuLi5jaGlsZHJlbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlblswXS5zZXROYW1lKHRoYXQuZ2V0TmFtZUZvckNoaWxkKDApKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW5bMV0uc2V0TmFtZShcInJlcGVhdFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYoIWhhc09wZW4gJiYgIWhhc0Nsb3NlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHA6IFByb2R1Y3Rpb24gPSBSdWxlLmFkZFByb2R1Y3Rpb24oZ3JhbW1hciwgdGhpcywgdGhpcy50Z3QsIHJlcGV0aXRpb24pO1xyXG4gICAgICAgICAgICBwLm9uRXh0ZW5zaW9uKChfcGFyZW50LCAuLi5jaGlsZHJlbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY2hpbGRyZW5bMF0uc2V0TmFtZShcInJlcGV0aXRpb25cIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBwLnNldEFzdEJ1aWxkZXIoKHBhcmVudCwgLi4uY2hpbGRyZW4pID0+IHBhcmVudC5hZGRDaGlsZHJlbiguLi5jaGlsZHJlblswXS5nZXRDaGlsZHJlbigpKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBwOiBQcm9kdWN0aW9uID0gUnVsZS5hZGRQcm9kdWN0aW9uKGdyYW1tYXIsIHRoaXMsIHRoaXMudGd0LCB0aGlzLm9wZW4gYXMgU3ltLCByZXBldGl0aW9uLCB0aGlzLmNsb3NlIGFzIFN5bSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xyXG4gICAgICAgICAgICBwLm9uRXh0ZW5zaW9uKChfcGFyZW50LCAuLi5jaGlsZHJlbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYoIXRoYXQub25seUtlZXBFbnRyaWVzKVxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuWzBdLnNldE5hbWUoXCJvcGVuXCIpO1xyXG4gICAgICAgICAgICAgICAgY2hpbGRyZW5bMV0uc2V0TmFtZShcInJlcGV0aXRpb25cIik7XHJcbiAgICAgICAgICAgICAgICBpZighdGhhdC5vbmx5S2VlcEVudHJpZXMpXHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW5bMl0uc2V0TmFtZShcImNsb3NlXCIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcC5zZXRBc3RCdWlsZGVyKChwYXJlbnQsIC4uLmNoaWxkcmVuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZighdGhhdC5vbmx5S2VlcEVudHJpZXMpXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50LmFkZENoaWxkcmVuKGNoaWxkcmVuWzBdKTtcclxuICAgICAgICAgICAgICAgIHBhcmVudC5hZGRDaGlsZHJlbiguLi5jaGlsZHJlblsxXS5nZXRDaGlsZHJlbigpKTtcclxuICAgICAgICAgICAgICAgIGlmKCF0aGF0Lm9ubHlLZWVwRW50cmllcylcclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQuYWRkQ2hpbGRyZW4oY2hpbGRyZW5bMl0pO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBOYW1lZCB9IGZyb20gXCIuLi9jb3JlL05hbWVkLmpzXCI7XHJcbmltcG9ydCB7IFBhcnNlTGlzdGVuZXIgfSBmcm9tIFwiLi9QYXJzZUxpc3RlbmVyLmpzXCI7XHJcbmltcG9ydCB7IFJ1bGUgfSBmcm9tIFwiLi9SdWxlLmpzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgTmFtZWRSdWxlIGV4dGVuZHMgTmFtZWQ8UnVsZT4ge1xyXG4gICAgXHJcbiAgICBjb25zdHJ1Y3RvcihvYmplY3Q6IFJ1bGUsIG5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHN1cGVyKG9iamVjdCwgbmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgb25TdWNjZXNzZnVsUGFyc2VkKGxpc3RlbmVyOiBQYXJzZUxpc3RlbmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5nZXQoKS5vblN1Y2Nlc3NmdWxQYXJzZWQobGlzdGVuZXIpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFBhcnNlZE5vZGUgfSBmcm9tIFwiLi4vUGFyc2VkTm9kZS5qc1wiO1xyXG5pbXBvcnQgeyBCTkYgfSBmcm9tIFwiLi4vY29yZS9CTkYuanNcIjtcclxuaW1wb3J0IHsgTm9uVGVybWluYWwgfSBmcm9tIFwiLi4vY29yZS9Ob25UZXJtaW5hbC5qc1wiO1xyXG5pbXBvcnQgeyBTeW0gfSBmcm9tIFwiLi4vY29yZS9TeW1ib2wuanNcIjtcclxuaW1wb3J0IHsgRXZhbHVhdG9yIH0gZnJvbSBcIi4uL0V2YWx1YXRvci5qc1wiO1xyXG5pbXBvcnQgeyBSdWxlIH0gZnJvbSBcIi4vUnVsZS5qc1wiO1xyXG5pbXBvcnQgeyBBc3RCdWlsZGVyIH0gZnJvbSBcIi4uL2NvcmUvUHJvZHVjdGlvbi5qc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIE9wdGlvbmFsIGV4dGVuZHMgUnVsZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0Z3Q6IE5vblRlcm1pbmFsIHwgdW5kZWZpbmVkLCBjaGlsZDogU3ltKSB7XHJcbiAgICAgICAgc3VwZXIoXCJvcHRpb25hbFwiLCB0Z3QsIGNoaWxkKTtcclxuICAgICAgICB0aGlzLnNldEV2YWx1YXRvcihFdmFsdWF0b3IuQUxMX0NISUxEUkVOX0VWQUxVQVRPUik7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RW50cnkoKTogU3ltIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlblswXTtcclxuICAgIH1cclxuXHJcbiAgICBvdmVycmlkZSBjcmVhdGVCTkYoZ3JhbW1hcjogQk5GKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgcDEgPSBSdWxlLmFkZFByb2R1Y3Rpb24oZ3JhbW1hciwgdGhpcywgdGhpcy50Z3QsIHRoaXMuY2hpbGRyZW5bMF0pO1xyXG4gICAgICAgIFJ1bGUuYWRkUHJvZHVjdGlvbihncmFtbWFyLCB0aGlzLCB0aGlzLnRndCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xyXG5cclxuICAgICAgICBwMS5vbkV4dGVuc2lvbigoX3BhcmVudCwgLi4uY2hpbGRyZW4pID0+IHtcclxuICAgICAgICAgICAgbGV0IGMwOiBQYXJzZWROb2RlID0gY2hpbGRyZW5bMF0gYXMgUGFyc2VkTm9kZTtcclxuICAgICAgICAgICAgYzAuc2V0TnRoRW50cnlJblBhcmVudCgwKTtcclxuICAgICAgICAgICAgYzAuc2V0TmFtZSh0aGF0LmdldE5hbWVGb3JDaGlsZCgwKSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHAxLnNldEFzdEJ1aWxkZXIoQXN0QnVpbGRlci5ERUZBVUxUKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBBc3RCdWlsZGVyIH0gZnJvbSBcIi4uL2NvcmUvUHJvZHVjdGlvbi5qc1wiO1xyXG5pbXBvcnQgeyBQYXJzZWROb2RlIH0gZnJvbSBcIi4uL1BhcnNlZE5vZGUuanNcIjtcclxuaW1wb3J0IHsgQk5GIH0gZnJvbSBcIi4uL2NvcmUvQk5GLmpzXCI7XHJcbmltcG9ydCB7IE5vblRlcm1pbmFsIH0gZnJvbSBcIi4uL2NvcmUvTm9uVGVybWluYWwuanNcIjtcclxuaW1wb3J0IHsgU3ltIH0gZnJvbSBcIi4uL2NvcmUvU3ltYm9sLmpzXCI7XHJcbmltcG9ydCB7IEV2YWx1YXRvciB9IGZyb20gXCIuLi9FdmFsdWF0b3IuanNcIjtcclxuaW1wb3J0IHsgUnVsZSB9IGZyb20gXCIuL1J1bGUuanNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBPciBleHRlbmRzIFJ1bGUge1xyXG4gICAgY29uc3RydWN0b3IodGd0OiBOb25UZXJtaW5hbCB8IHVuZGVmaW5lZCwgLi4uY2hpbGRyZW46IFN5bVtdKSB7XHJcbiAgICAgICAgc3VwZXIoXCJvclwiLCB0Z3QsIC4uLmNoaWxkcmVuKTtcclxuICAgICAgICB0aGlzLnNldEV2YWx1YXRvcihFdmFsdWF0b3IuRklSU1RfQ0hJTERfRVZBTFVBVE9SKTtcclxuICAgIH1cclxuXHJcbiAgICBvdmVycmlkZSBjcmVhdGVCTkYoZ3JhbW1hcjogQk5GKTogdm9pZCB7XHJcbiAgICAgICAgZm9yKGxldCBpbyA9IDA7IGlvIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGlvKyspIHtcclxuICAgICAgICAgICAgY29uc3QgZmlvID0gaW87XHJcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbiA9IHRoaXMuY2hpbGRyZW5baW9dO1xyXG4gICAgICAgICAgICBjb25zdCBwID0gUnVsZS5hZGRQcm9kdWN0aW9uKGdyYW1tYXIsIHRoaXMsIHRoaXMudGd0LCBvcHRpb24pO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBwLm9uRXh0ZW5zaW9uKChfcGFyZW50LCAuLi5jaGlsZHJlbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGMwOiBQYXJzZWROb2RlID0gY2hpbGRyZW5bMF0gYXMgUGFyc2VkTm9kZTtcclxuICAgICAgICAgICAgICAgIGMwLnNldE50aEVudHJ5SW5QYXJlbnQoZmlvKTtcclxuICAgICAgICAgICAgICAgIGMwLnNldE5hbWUodGhhdC5nZXROYW1lRm9yQ2hpbGQoZmlvKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgXHJcbiAgICAgICAgICAgIHAuc2V0QXN0QnVpbGRlcihBc3RCdWlsZGVyLkRFRkFVTFQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBQYXJzZWROb2RlIH0gZnJvbSBcIi4uL1BhcnNlZE5vZGUuanNcIjtcclxuaW1wb3J0IHsgQk5GIH0gZnJvbSBcIi4uL2NvcmUvQk5GLmpzXCI7XHJcbmltcG9ydCB7IE5vblRlcm1pbmFsIH0gZnJvbSBcIi4uL2NvcmUvTm9uVGVybWluYWwuanNcIjtcclxuaW1wb3J0IHsgU3ltIH0gZnJvbSBcIi4uL2NvcmUvU3ltYm9sLmpzXCI7XHJcbmltcG9ydCB7IEV2YWx1YXRvciB9IGZyb20gXCIuLi9FdmFsdWF0b3IuanNcIjtcclxuaW1wb3J0IHsgUnVsZSB9IGZyb20gXCIuL1J1bGUuanNcIjtcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgUGx1cyBleHRlbmRzIFJ1bGUge1xyXG4gICAgY29uc3RydWN0b3IodGd0OiBOb25UZXJtaW5hbCB8IHVuZGVmaW5lZCwgY2hpbGQ6IFN5bSkge1xyXG4gICAgICAgIHN1cGVyKFwicGx1c1wiLCB0Z3QsIGNoaWxkKTtcclxuICAgICAgICB0aGlzLnNldEV2YWx1YXRvcihFdmFsdWF0b3IuQUxMX0NISUxEUkVOX0VWQUxVQVRPUik7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RW50cnkoKTogU3ltIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlblswXTtcclxuICAgIH1cclxuXHJcbiAgICBvdmVycmlkZSBjcmVhdGVCTkYoZ3JhbW1hcjogQk5GKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgcDEgPSBSdWxlLmFkZFByb2R1Y3Rpb24oZ3JhbW1hciwgdGhpcywgdGhpcy50Z3QsIHRoaXMuY2hpbGRyZW5bMF0sIHRoaXMudGd0KTtcclxuICAgICAgICBjb25zdCBwMiA9IFJ1bGUuYWRkUHJvZHVjdGlvbihncmFtbWFyLCB0aGlzLCB0aGlzLnRndCwgdGhpcy5jaGlsZHJlblswXSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xyXG5cclxuICAgICAgICBwMS5vbkV4dGVuc2lvbigocGFyZW50LCAuLi5jaGlsZHJlbikgPT4ge1xyXG4gICAgICAgICAgICBsZXQgbnRoRW50cnkgPSAocGFyZW50IGFzIFBhcnNlZE5vZGUpLmdldE50aEVudHJ5SW5QYXJlbnQoKTtcclxuICAgICAgICAgICAgbGV0IGMwOiBQYXJzZWROb2RlID0gY2hpbGRyZW5bMF0gYXMgUGFyc2VkTm9kZTtcclxuICAgICAgICAgICAgbGV0IGMxOiBQYXJzZWROb2RlID0gY2hpbGRyZW5bMV0gYXMgUGFyc2VkTm9kZTtcclxuXHJcbiAgICAgICAgICAgIGMwLnNldE50aEVudHJ5SW5QYXJlbnQobnRoRW50cnkpO1xyXG4gICAgICAgICAgICBjMC5zZXROYW1lKHRoYXQuZ2V0TmFtZUZvckNoaWxkKG50aEVudHJ5KSk7XHJcblxyXG4gICAgICAgICAgICBjMS5zZXROdGhFbnRyeUluUGFyZW50KG50aEVudHJ5ICsgMSk7XHJcbiAgICAgICAgICAgIGMxLnNldE5hbWUocGFyZW50LmdldE5hbWUoKSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHAyLm9uRXh0ZW5zaW9uKChwYXJlbnQsIC4uLmNoaWxkcmVuKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBudGhFbnRyeSA9IChwYXJlbnQgYXMgUGFyc2VkTm9kZSkuZ2V0TnRoRW50cnlJblBhcmVudCgpO1xyXG4gICAgICAgICAgICBsZXQgYzA6IFBhcnNlZE5vZGUgPSBjaGlsZHJlblswXSBhcyBQYXJzZWROb2RlO1xyXG4gICAgICAgICAgICBjMC5zZXROdGhFbnRyeUluUGFyZW50KG50aEVudHJ5KTtcclxuICAgICAgICAgICAgYzAuc2V0TmFtZSh0aGF0LmdldE5hbWVGb3JDaGlsZChudGhFbnRyeSkpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBwMS5zZXRBc3RCdWlsZGVyKChwYXJlbnQsIC4uLmNoaWxkcmVuKSA9PiB7XHJcbiAgICAgICAgICAgIHBhcmVudC5hZGRDaGlsZHJlbihjaGlsZHJlblswXSk7XHJcbiAgICAgICAgICAgIHBhcmVudC5hZGRDaGlsZHJlbiguLi5jaGlsZHJlblsxXS5nZXRDaGlsZHJlbigpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcDIuc2V0QXN0QnVpbGRlcigocGFyZW50LCAuLi5jaGlsZHJlbikgPT4ge1xyXG4gICAgICAgICAgICBwYXJlbnQuYWRkQ2hpbGRyZW4oY2hpbGRyZW5bMF0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEFzdEJ1aWxkZXIgfSBmcm9tIFwiLi4vY29yZS9Qcm9kdWN0aW9uLmpzXCI7XHJcbmltcG9ydCB7IFBhcnNlZE5vZGUgfSBmcm9tIFwiLi4vUGFyc2VkTm9kZS5qc1wiO1xyXG5pbXBvcnQgeyBCTkYgfSBmcm9tIFwiLi4vY29yZS9CTkYuanNcIjtcclxuaW1wb3J0IHsgTm9uVGVybWluYWwgfSBmcm9tIFwiLi4vY29yZS9Ob25UZXJtaW5hbC5qc1wiO1xyXG5pbXBvcnQgeyBTeW0gfSBmcm9tIFwiLi4vY29yZS9TeW1ib2wuanNcIjtcclxuaW1wb3J0IHsgRXZhbHVhdG9yIH0gZnJvbSBcIi4uL0V2YWx1YXRvci5qc1wiO1xyXG5pbXBvcnQgeyBSdWxlIH0gZnJvbSBcIi4vUnVsZS5qc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFJlcGVhdCBleHRlbmRzIFJ1bGUge1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBmcm9tOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHRvOiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IodGd0OiBOb25UZXJtaW5hbCB8IHVuZGVmaW5lZCwgY2hpbGQ6IFN5bSwgZnJvbTogbnVtYmVyLCB0bzogbnVtYmVyKSB7XHJcbiAgICAgICAgc3VwZXIoXCJyZXBlYXRcIiwgdGd0LCBjaGlsZCk7XHJcbiAgICAgICAgdGhpcy5mcm9tID0gZnJvbTtcclxuICAgICAgICB0aGlzLnRvID0gdG87XHJcbiAgICAgICAgdGhpcy5zZXRFdmFsdWF0b3IoRXZhbHVhdG9yLkFMTF9DSElMRFJFTl9FVkFMVUFUT1IpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEZyb20oKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5mcm9tO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFRvKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudG87XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RW50cnkoKTogU3ltIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlblswXTtcclxuICAgIH1cclxuXHJcbiAgICBvdmVycmlkZSBjcmVhdGVCTkYoZ3JhbW1hcjogQk5GKTogdm9pZCB7XHJcbiAgICAgICAgZm9yKGxldCBzZXFMZW4gPSB0aGlzLnRvOyBzZXFMZW4gPj0gdGhpcy5mcm9tOyBzZXFMZW4tLSkge1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcmhzOiBTeW1bXSA9IFtdO1xyXG4gICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgc2VxTGVuOyBpKyspXHJcbiAgICAgICAgICAgICAgICByaHNbaV0gPSB0aGlzLmNoaWxkcmVuWzBdO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc3QgcCA9IFJ1bGUuYWRkUHJvZHVjdGlvbihncmFtbWFyLCB0aGlzLCB0aGlzLnRndCwgLi4ucmhzKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xyXG4gICAgICAgICAgICBwLm9uRXh0ZW5zaW9uKChfcGFyZW50LCAuLi5jaGlsZHJlbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBjID0gMDsgYyA8IGNoaWxkcmVuLmxlbmd0aDsgYysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoOiBQYXJzZWROb2RlID0gY2hpbGRyZW5bY10gYXMgUGFyc2VkTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICBjaC5zZXROdGhFbnRyeUluUGFyZW50KGMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNoLnNldE5hbWUodGhhdC5nZXROYW1lRm9yQ2hpbGQoYykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHAuc2V0QXN0QnVpbGRlcihBc3RCdWlsZGVyLkRFRkFVTFQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBBdXRvY29tcGxldGVyLCBHZXRBdXRvY29tcGxldGlvbkZ1bmN0aW9uIH0gZnJvbSBcIi4uL0F1dG9jb21wbGV0ZXIuanNcIjtcclxuaW1wb3J0IHsgUmVwcmVzZW50c1N5bWJvbCB9IGZyb20gXCIuLi9jb3JlL1JlcHJlc2VudHNTeW1ib2wuanNcIjtcclxuaW1wb3J0IHsgQk5GIH0gZnJvbSBcIi4uL2NvcmUvQk5GLmpzXCI7XHJcbmltcG9ydCB7IE5vblRlcm1pbmFsIH0gZnJvbSBcIi4uL2NvcmUvTm9uVGVybWluYWwuanNcIjtcclxuaW1wb3J0IHsgU3ltIH0gZnJvbSBcIi4uL2NvcmUvU3ltYm9sLmpzXCI7XHJcbmltcG9ydCB7IEV2YWx1YXRvciwgRXZhbHVhdGVGdW5jdGlvbiB9IGZyb20gXCIuLi9FdmFsdWF0b3IuanNcIjtcclxuaW1wb3J0IHsgRUJORlByb2R1Y3Rpb24gfSBmcm9tIFwiLi9FQk5GUHJvZHVjdGlvbi5qc1wiO1xyXG5pbXBvcnQgeyBOYW1lZFJ1bGUgfSBmcm9tIFwiLi9OYW1lZFJ1bGUuanNcIjtcclxuaW1wb3J0IHsgUGFyc2VMaXN0ZW5lciB9IGZyb20gXCIuL1BhcnNlTGlzdGVuZXIuanNcIjtcclxuXHJcbmFic3RyYWN0IGNsYXNzIFJ1bGUgaW1wbGVtZW50cyBSZXByZXNlbnRzU3ltYm9sIHtcclxuXHJcblx0cHJvdGVjdGVkIHJlYWRvbmx5IHR5cGU6IHN0cmluZztcclxuXHRwcm90ZWN0ZWQgcmVhZG9ubHkgdGd0OiBOb25UZXJtaW5hbDtcclxuXHRwcm90ZWN0ZWQgcmVhZG9ubHkgY2hpbGRyZW46IFN5bVtdO1xyXG5cdFxyXG4gICAgcHJvdGVjdGVkIHBhcnNlZENoaWxkTmFtZXM6IChzdHJpbmcgfCB1bmRlZmluZWQpW107XHJcblxyXG5cdHByaXZhdGUgZXZhbHVhdG9yOiBFdmFsdWF0b3I7IC8vIChwbjogRGVmYXVsdFBhcnNlZE5vZGUpID0+IGFueTsgLy8gRXZhbHVhdG9yO1xyXG5cdHByaXZhdGUgYXV0b2NvbXBsZXRlcjogQXV0b2NvbXBsZXRlciB8IHVuZGVmaW5lZDtcclxuXHRwcml2YXRlIF9vblN1Y2Nlc3NmdWxQYXJzZWQ6IFBhcnNlTGlzdGVuZXI7XHJcblxyXG5cdGNvbnN0cnVjdG9yKHR5cGU6IHN0cmluZywgdGd0OiBOb25UZXJtaW5hbCB8IHVuZGVmaW5lZCwgLi4uY2hpbGRyZW46IFN5bVtdKSB7XHJcblx0XHR0aGlzLnR5cGUgPSB0eXBlO1xyXG5cdFx0dGhpcy50Z3QgPSB0Z3QgIT09IHVuZGVmaW5lZFxyXG5cdFx0XHRcdD8gdGd0XHJcblx0XHRcdFx0OiBuZXcgTm9uVGVybWluYWwodHlwZSArIFwiOlwiICsgTm9uVGVybWluYWwubWFrZVJhbmRvbVN5bWJvbCgpKTtcclxuXHRcdHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcclxuXHR9XHJcblxyXG4gICAgd2l0aE5hbWUobmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkKTogTmFtZWRSdWxlIHtcclxuICAgICAgICByZXR1cm4gbmV3IE5hbWVkUnVsZSh0aGlzLCBuYW1lKTtcclxuICAgIH1cclxuXHJcblx0Z2V0VGFyZ2V0KCk6IE5vblRlcm1pbmFsIHtcclxuXHRcdHJldHVybiB0aGlzLnRndDtcclxuXHR9XHJcblxyXG4gICAgZ2V0UmVwcmVzZW50ZWRTeW1ib2woKTogU3ltIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50Z3Q7XHJcbiAgICB9XHJcblxyXG5cdGdldENoaWxkcmVuKCk6IFN5bVtdICB7XHJcblx0XHRyZXR1cm4gdGhpcy5jaGlsZHJlbjtcclxuXHR9XHJcblxyXG5cdGdldEV2YWx1YXRvcigpOiBFdmFsdWF0b3Ige1xyXG5cdFx0cmV0dXJuIHRoaXMuZXZhbHVhdG9yO1xyXG5cdH1cclxuXHJcblx0c2V0RXZhbHVhdG9yKGV2YWx1YXRvcjogRXZhbHVhdG9yIHwgRXZhbHVhdGVGdW5jdGlvbik6IFJ1bGUge1xyXG5cdFx0aWYodHlwZW9mKGV2YWx1YXRvcikgPT09ICdmdW5jdGlvbicpXHJcblx0XHRcdGV2YWx1YXRvciA9IHsgZXZhbHVhdGU6IGV2YWx1YXRvciB9O1xyXG5cdFx0dGhpcy5ldmFsdWF0b3IgPSBldmFsdWF0b3I7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblxyXG5cdGdldEF1dG9jb21wbGV0ZXIoKTogQXV0b2NvbXBsZXRlciB8IHVuZGVmaW5lZHtcclxuXHRcdHJldHVybiB0aGlzLmF1dG9jb21wbGV0ZXI7XHJcblx0fVxyXG5cclxuXHRzZXRBdXRvY29tcGxldGVyKGF1dG9jb21wbGV0ZXI6IEF1dG9jb21wbGV0ZXIgfCBHZXRBdXRvY29tcGxldGlvbkZ1bmN0aW9uIHwgdW5kZWZpbmVkKTogUnVsZSB7XHJcblx0XHRpZih0eXBlb2YoYXV0b2NvbXBsZXRlcikgPT09ICdmdW5jdGlvbicpXHJcblx0XHRcdGF1dG9jb21wbGV0ZXIgPSB7IGdldEF1dG9jb21wbGV0aW9uOiBhdXRvY29tcGxldGVyIH07XHJcblx0XHR0aGlzLmF1dG9jb21wbGV0ZXIgPSBhdXRvY29tcGxldGVyO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHRvblN1Y2Nlc3NmdWxQYXJzZWQobGlzdGVuZXI6IFBhcnNlTGlzdGVuZXIpOiBSdWxlIHtcclxuXHRcdHRoaXMuX29uU3VjY2Vzc2Z1bFBhcnNlZCA9IGxpc3RlbmVyO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHRnZXRPblN1Y2Nlc3NmdWxQYXJzZWQoKTogUGFyc2VMaXN0ZW5lciB7XHJcblx0XHRyZXR1cm4gdGhpcy5fb25TdWNjZXNzZnVsUGFyc2VkO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGFkZFByb2R1Y3Rpb24oZ3JhbW1hcjogQk5GLCBydWxlOiBSdWxlLCBsZWZ0OiBOb25UZXJtaW5hbCwgLi4ucmlnaHQ6IFN5bVtdKTogRUJORlByb2R1Y3Rpb24ge1xyXG5cdFx0bGV0IHByb2R1Y3Rpb246IEVCTkZQcm9kdWN0aW9uID0gbmV3IEVCTkZQcm9kdWN0aW9uKHJ1bGUsIGxlZnQsIC4uLnJpZ2h0KTtcclxuXHRcdGdyYW1tYXIuYWRkUHJvZHVjdGlvbihwcm9kdWN0aW9uKTtcclxuXHRcdHJldHVybiBwcm9kdWN0aW9uO1xyXG5cdH1cclxuXHJcblx0Z2V0TmFtZUZvckNoaWxkKGlkeDogbnVtYmVyKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuXHRcdGlmKHRoaXMucGFyc2VkQ2hpbGROYW1lcyA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblx0XHRpZih0aGlzLnBhcnNlZENoaWxkTmFtZXMubGVuZ3RoID09IDEpXHJcblx0XHRcdHJldHVybiB0aGlzLnBhcnNlZENoaWxkTmFtZXNbMF07XHJcblx0XHRpZihpZHggPj0gdGhpcy5wYXJzZWRDaGlsZE5hbWVzLmxlbmd0aClcclxuXHRcdFx0cmV0dXJuIFwibm8gbmFtZVwiO1xyXG5cdFx0cmV0dXJuIHRoaXMucGFyc2VkQ2hpbGROYW1lc1tpZHhdO1xyXG5cdH1cclxuXHJcblx0c2V0UGFyc2VkQ2hpbGROYW1lcyguLi5wYXJzZWRDaGlsZE5hbWVzOiAoc3RyaW5nIHwgdW5kZWZpbmVkKVtdKTogdm9pZCB7XHJcblx0XHR0aGlzLnBhcnNlZENoaWxkTmFtZXMgPSBwYXJzZWRDaGlsZE5hbWVzO1xyXG5cdH1cclxuXHJcblx0YWJzdHJhY3QgY3JlYXRlQk5GKGdyYW1tYXI6IEJORik6IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCB7IFJ1bGUgfTtcclxuIiwiaW1wb3J0IHsgQXN0QnVpbGRlciB9IGZyb20gXCIuLi9jb3JlL1Byb2R1Y3Rpb24uanNcIjtcclxuaW1wb3J0IHsgUGFyc2VkTm9kZSB9IGZyb20gXCIuLi9QYXJzZWROb2RlLmpzXCI7XHJcbmltcG9ydCB7IEJORiB9IGZyb20gXCIuLi9jb3JlL0JORi5qc1wiO1xyXG5pbXBvcnQgeyBOb25UZXJtaW5hbCB9IGZyb20gXCIuLi9jb3JlL05vblRlcm1pbmFsLmpzXCI7XHJcbmltcG9ydCB7IFN5bSB9IGZyb20gXCIuLi9jb3JlL1N5bWJvbC5qc1wiO1xyXG5pbXBvcnQgeyBSdWxlIH0gZnJvbSBcIi4vUnVsZS5qc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNlcXVlbmNlIGV4dGVuZHMgUnVsZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0Z3Q6IE5vblRlcm1pbmFsIHwgdW5kZWZpbmVkLCAuLi5jaGlsZHJlbjogU3ltW10pIHtcclxuICAgICAgICBzdXBlcihcInNlcXVlbmNlXCIsIHRndCwgLi4uY2hpbGRyZW4pO1xyXG4gICAgfVxyXG5cclxuICAgIG92ZXJyaWRlIGNyZWF0ZUJORihncmFtbWFyOiBCTkYpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBwID0gUnVsZS5hZGRQcm9kdWN0aW9uKGdyYW1tYXIsIHRoaXMsIHRoaXMudGd0LCAuLi50aGlzLmNoaWxkcmVuKTtcclxuICAgICAgICBjb25zdCB0aGF0ID0gdGhpcztcclxuXHJcbiAgICAgICAgcC5vbkV4dGVuc2lvbigoX3BhcmVudCwgLi4uY2hpbGRyZW4pID0+IHtcclxuICAgICAgICAgICAgZm9yKGxldCBjID0gMDsgYyA8IGNoaWxkcmVuLmxlbmd0aDsgYysrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2g6IFBhcnNlZE5vZGUgPSBjaGlsZHJlbltjXSBhcyBQYXJzZWROb2RlO1xyXG4gICAgICAgICAgICAgICAgY2guc2V0TnRoRW50cnlJblBhcmVudChjKTtcclxuICAgICAgICAgICAgICAgIGNoLnNldE5hbWUodGhhdC5nZXROYW1lRm9yQ2hpbGQoYykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHAuc2V0QXN0QnVpbGRlcihBc3RCdWlsZGVyLkRFRkFVTFQpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFBhcnNlZE5vZGUgfSBmcm9tIFwiLi4vUGFyc2VkTm9kZS5qc1wiO1xyXG5pbXBvcnQgeyBCTkYgfSBmcm9tIFwiLi4vY29yZS9CTkYuanNcIjtcclxuaW1wb3J0IHsgTm9uVGVybWluYWwgfSBmcm9tIFwiLi4vY29yZS9Ob25UZXJtaW5hbC5qc1wiO1xyXG5pbXBvcnQgeyBTeW0gfSBmcm9tIFwiLi4vY29yZS9TeW1ib2wuanNcIjtcclxuaW1wb3J0IHsgRXZhbHVhdG9yIH0gZnJvbSBcIi4uL0V2YWx1YXRvci5qc1wiO1xyXG5pbXBvcnQgeyBSdWxlIH0gZnJvbSBcIi4vUnVsZS5qc1wiO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBTdGFyIGV4dGVuZHMgUnVsZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0Z3Q6IE5vblRlcm1pbmFsIHwgdW5kZWZpbmVkLCBjaGlsZDogU3ltKSB7XHJcbiAgICAgICAgc3VwZXIoXCJzdGFyXCIsIHRndCwgY2hpbGQpO1xyXG4gICAgICAgIHRoaXMuc2V0RXZhbHVhdG9yKEV2YWx1YXRvci5BTExfQ0hJTERSRU5fRVZBTFVBVE9SKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRFbnRyeSgpOiBTeW0ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuWzBdO1xyXG4gICAgfVxyXG5cclxuICAgIG92ZXJyaWRlIGNyZWF0ZUJORihncmFtbWFyOiBCTkYpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBwMSA9IFJ1bGUuYWRkUHJvZHVjdGlvbihncmFtbWFyLCB0aGlzLCB0aGlzLnRndCwgdGhpcy5jaGlsZHJlblswXSwgdGhpcy50Z3QpO1xyXG4gICAgICAgIFJ1bGUuYWRkUHJvZHVjdGlvbihncmFtbWFyLCB0aGlzLCB0aGlzLnRndCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xyXG5cclxuICAgICAgICBwMS5vbkV4dGVuc2lvbigocGFyZW50LCAuLi5jaGlsZHJlbikgPT4ge1xyXG4gICAgICAgICAgICBsZXQgbnRoRW50cnkgPSAocGFyZW50IGFzIFBhcnNlZE5vZGUpLmdldE50aEVudHJ5SW5QYXJlbnQoKTtcclxuICAgICAgICAgICAgbGV0IGMwOiBQYXJzZWROb2RlID0gY2hpbGRyZW5bMF0gYXMgUGFyc2VkTm9kZTtcclxuICAgICAgICAgICAgbGV0IGMxOiBQYXJzZWROb2RlID0gY2hpbGRyZW5bMV0gYXMgUGFyc2VkTm9kZTtcclxuXHJcbiAgICAgICAgICAgIGMwLnNldE50aEVudHJ5SW5QYXJlbnQobnRoRW50cnkpO1xyXG4gICAgICAgICAgICBjMC5zZXROYW1lKHRoYXQuZ2V0TmFtZUZvckNoaWxkKG50aEVudHJ5KSk7XHJcblxyXG4gICAgICAgICAgICBjMS5zZXROdGhFbnRyeUluUGFyZW50KG50aEVudHJ5ICsgMSk7XHJcbiAgICAgICAgICAgIGMxLnNldE5hbWUocGFyZW50LmdldE5hbWUoKSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHAxLnNldEFzdEJ1aWxkZXIoKHBhcmVudCwgLi4uY2hpbGRyZW4pID0+IHtcclxuICAgICAgICAgICAgcGFyZW50LmFkZENoaWxkcmVuKGNoaWxkcmVuWzBdKTtcclxuICAgICAgICAgICAgcGFyZW50LmFkZENoaWxkcmVuKC4uLmNoaWxkcmVuWzFdLmdldENoaWxkcmVuKCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCAqIGZyb20gXCIuL0VCTkYuanNcIlxyXG5leHBvcnQgKiBmcm9tIFwiLi9FQk5GQ29yZS5qc1wiXHJcbmV4cG9ydCAqIGZyb20gXCIuL0VCTkZQYXJzZWROb2RlRmFjdG9yeS5qc1wiXHJcbmV4cG9ydCAqIGZyb20gXCIuL0VCTkZQYXJzZXIuanNcIlxyXG5leHBvcnQgKiBmcm9tIFwiLi9FQk5GUHJvZHVjdGlvbi5qc1wiXHJcbmV4cG9ydCAqIGZyb20gXCIuL0pvaW4uanNcIlxyXG5leHBvcnQgKiBmcm9tIFwiLi9OYW1lZFJ1bGUuanNcIlxyXG5leHBvcnQgKiBmcm9tIFwiLi9PcHRpb25hbC5qc1wiXHJcbmV4cG9ydCAqIGZyb20gXCIuL09wdGlvbmFsLmpzXCJcclxuZXhwb3J0ICogZnJvbSBcIi4vT3IuanNcIlxyXG5leHBvcnQgKiBmcm9tIFwiLi9QYXJzZUxpc3RlbmVyLmpzXCJcclxuZXhwb3J0ICogZnJvbSBcIi4vUGx1cy5qc1wiXHJcbmV4cG9ydCAqIGZyb20gXCIuL1JlcGVhdC5qc1wiXHJcbmV4cG9ydCAqIGZyb20gXCIuL1J1bGUuanNcIlxyXG5leHBvcnQgKiBmcm9tIFwiLi9TZXF1ZW5jZS5qc1wiXHJcbmV4cG9ydCAqIGZyb20gXCIuL1N0YXIuanNcIlxyXG4iLCJpbXBvcnQgeyBQYXJzZXIgfSBmcm9tIFwiLi9QYXJzZXIuanNcIjtcclxuaW1wb3J0IHsgQUNFZGl0b3IgfSBmcm9tIFwiLi91aS9BQ0VkaXRvci5qc1wiO1xyXG5pbXBvcnQgeyBtYWtlTWljcm9zY29wZVBhcnNlciB9IGZyb20gXCIuL21pY3Jvc2NvcGUvTGFuZ3VhZ2VDb250cm9sLmpzXCI7XHJcblxyXG5leHBvcnQgKiBmcm9tIFwiLi9jb3JlL2luZGV4LmpzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2VibmYvaW5kZXguanNcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vdXRpbC9pbmRleC5qc1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9taWNyb3Njb3BlL2luZGV4LmpzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3VpL2luZGV4LmpzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL0F1dG9jb21wbGV0ZXIuanNcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vRXZhbHVhdG9yLmpzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL1BhcnNlZE5vZGUuanNcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vUGFyc2VyLmpzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL1BhcnNlRXhjZXB0aW9uLmpzXCI7XHJcblxyXG5cclxuZnVuY3Rpb24gbWFrZVNpbXBsZVBhcnNlcigpOiBQYXJzZXIge1xyXG4gICAgY29uc3QgcGFyc2VyID0gbmV3IFBhcnNlcigpO1xyXG5cclxuICAgIHBhcnNlci5kZWZpbmVUeXBlKFwibXktY29sb3JcIiwgXCJibHVlXCIsIHVuZGVmaW5lZCk7XHJcbiAgICBwYXJzZXIuZGVmaW5lVHlwZShcIm15LWNvbG9yXCIsIFwiZ3JlZW5cIiwgdW5kZWZpbmVkKTtcclxuICAgIHBhcnNlci5kZWZpbmVUeXBlKFwibXktY29sb3JcIiwgJyh7cjppbnR9LCB7ZzppbnR9LCB7YjppbnR9KScsIHVuZGVmaW5lZCwgdHJ1ZSk7XHJcbiAgICBwYXJzZXIuZGVmaW5lVHlwZShcInR3by1udW1iZXJzXCIsIFwie24xOmludH0gYW5kIHtuMjppbnR9XCIsIHVuZGVmaW5lZCwgdHJ1ZSk7XHJcbiAgICBcclxuICAgIHBhcnNlci5kZWZpbmVTZW50ZW5jZShcIk15IGZhdm91cml0ZSBjb2xvciBpcyB7Y29sb3I6bXktY29sb3J9LlwiLCB1bmRlZmluZWQpO1xyXG4gICAgcGFyc2VyLmRlZmluZVNlbnRlbmNlKFwiSSBsaWtlIHt0d28tbnVtYmVyczp0d28tbnVtYmVyc30uXCIsIHVuZGVmaW5lZCk7XHJcbiAgICByZXR1cm4gcGFyc2VyO1xyXG59XHJcblxyXG5cclxuLy8gY29uc3QgcGFyc2VyID0gbWFrZU1pY3Jvc2NvcGVQYXJzZXIoKTtcclxuLy8gY29uc3QgcGFyc2VyID0gbWFrZVNpbXBsZVBhcnNlcigpO1xyXG5cclxuLy8gY29uc3QgZWRpdG9yID0gbmV3IEFDRWRpdG9yKHBhcnNlciwgZG9jdW1lbnQuYm9keSk7XHJcbiIsIlxyXG50eXBlIFNldHRlciA9IChjOiBudW1iZXIsIHY6IG51bWJlcikgPT4gdm9pZDtcclxudHlwZSBHZXR0ZXIgPSAoKSA9PiBudW1iZXI7XHJcblxyXG5leHBvcnQgY2xhc3MgSW50ZXJwb2xhdG9yIHtcclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNldHRlcjogU2V0dGVyO1xyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZ2V0dGVyOiBHZXR0ZXI7XHJcblxyXG4gICAgcHJpdmF0ZSB2RnJvbTogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSB2VG86IG51bWJlcjtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgbkN5Y2xlczogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGdldHRlcjogR2V0dGVyLCBzZXR0ZXI6IFNldHRlciwgdlRvOiBudW1iZXIsIG5DeWNsZXM6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuZ2V0dGVyID0gZ2V0dGVyO1xyXG4gICAgICAgIHRoaXMuc2V0dGVyID0gc2V0dGVyO1xyXG4gICAgICAgIHRoaXMudlRvID0gdlRvO1xyXG4gICAgICAgIHRoaXMubkN5Y2xlcyA9IG5DeWNsZXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpbml0aWFsaXplKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudkZyb20gPSB0aGlzLmdldHRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIGludGVycG9sYXRlKGN5Y2xlOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBpZihjeWNsZSA9PT0gMClcclxuICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplKCk7XHJcbiAgICAgICAgY29uc3QgaW50ZXJwb2xhdGVkOiBudW1iZXIgPSB0aGlzLnZGcm9tICsgKGN5Y2xlICsgMSkgKiAodGhpcy52VG8gLSB0aGlzLnZGcm9tKSAvIHRoaXMubkN5Y2xlcztcclxuICAgICAgICB0aGlzLnNldHRlcihjeWNsZSwgaW50ZXJwb2xhdGVkKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFBhcnNlciB9IGZyb20gXCIuLi9QYXJzZXIuanNcIjtcclxuaW1wb3J0IHsgSWZOb3RoaW5nWWV0RW50ZXJlZEF1dG9jb21wbGV0ZXIgfSBmcm9tIFwiLi4vQXV0b2NvbXBsZXRlci5qc1wiO1xyXG5pbXBvcnQgeyBBTExfQ0hBTk5FTFMsIEFMTF9QT1NJVElPTlMsIEJpbm5pbmcsIENoYW5uZWwsIExFRCwgTEVEU2V0dGluZywgTEVEcywgTGVucywgTWFnbmlmaWNhdGlvbkNoYW5nZXIsIE1pY3Jvc2NvcGUsIFBvc2l0aW9uIH0gZnJvbSBcIi4vTWljcm9zY29wZS5qc1wiO1xyXG5pbXBvcnQgeyBUaW1lbGluZSB9IGZyb20gXCIuL1RpbWVsaW5lLmpzXCI7XHJcbmltcG9ydCB7IEludGVycG9sYXRvciB9IGZyb20gXCIuL0ludGVycG9sYXRvci5qc1wiO1xyXG5pbXBvcnQgeyBBdXRvY29tcGxldGlvbiB9IGZyb20gXCIuLi9jb3JlL0F1dG9jb21wbGV0aW9uLmpzXCI7XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIExhbmd1YWdlQ29udHJvbCB7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IG1pY3Jvc2NvcGU6IE1pY3Jvc2NvcGU7XHJcblxyXG4gICAgcHJpdmF0ZSB0aW1lbGluZTogVGltZWxpbmU8KCkgPT4gdm9pZD4gPSBuZXcgVGltZWxpbmUoKTtcclxuXHJcbiAgICBwcml2YXRlIGdsb2JhbFN0YXJ0OiBEYXRlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG1pY3Jvc2NvcGU6IE1pY3Jvc2NvcGUgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQpIHtcclxuICAgICAgICB0aGlzLm1pY3Jvc2NvcGUgPSBtaWNyb3Njb3BlICE9PSB1bmRlZmluZWQgPyBtaWNyb3Njb3BlIDogbmV3IE1pY3Jvc2NvcGUoKTtcclxuICAgIH1cclxuXHJcbiAgICByZXNldCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmdsb2JhbFN0YXJ0ID0gbmV3IERhdGUoKTtcclxuICAgICAgICB0aGlzLnRpbWVsaW5lLmNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5taWNyb3Njb3BlLnJlc2V0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VGltZWxpbmUoKTogVGltZWxpbmU8KCkgPT4gdm9pZD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRpbWVsaW5lO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE1pY3Jvc2NvcGUoKTogTWljcm9zY29wZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWljcm9zY29wZTtcclxuICAgIH1cclxuXHJcbiAgICBpbml0UGFyc2VyKCk6IFBhcnNlciB7XHJcblxyXG4gICAgICAgIGNvbnN0IGRlZmluZWRDaGFubmVsczogc3RyaW5nW10gPSBbXTtcclxuICAgICAgICBjb25zdCBkZWZpbmVkUmVnaW9uczogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgICAgICAgbGV0IHBhcnNlciA9IG5ldyBQYXJzZXIoKTtcclxuICAgICAgICBwYXJzZXIuYWRkUGFyc2VTdGFydExpc3RlbmVyKCgpID0+IHtcclxuICAgICAgICAgICAgZGVmaW5lZENoYW5uZWxzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIGRlZmluZWRSZWdpb25zLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICBwYXJzZXIuZGVmaW5lVHlwZShcImxlZFwiLCBcIjM4NW5tXCIsIF9lID0+IExFRC5MRURfMzg1KTtcclxuICAgICAgICBwYXJzZXIuZGVmaW5lVHlwZShcImxlZFwiLCBcIjQ3MG5tXCIsIF9lID0+IExFRC5MRURfNDcwKTtcclxuICAgICAgICBwYXJzZXIuZGVmaW5lVHlwZShcImxlZFwiLCBcIjU2N25tXCIsIF9lID0+IExFRC5MRURfNTY3KTtcclxuICAgICAgICBwYXJzZXIuZGVmaW5lVHlwZShcImxlZFwiLCBcIjYyNW5tXCIsIF9lID0+IExFRC5MRURfNjI1KTtcclxuXHJcbiAgICAgICAgcGFyc2VyLmRlZmluZVR5cGUoXCJsZWQtcG93ZXJcIiwgXCJ7PGxlZC1wb3dlcj46aW50fSVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBlID0+IGUuZXZhbHVhdGUoXCI8bGVkLXBvd2VyPlwiKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB0cnVlKTtcclxuXHJcbiAgICAgICAgcGFyc2VyLmRlZmluZVR5cGUoXCJleHBvc3VyZS10aW1lXCIsIFwiezxleHBvc3VyZS10aW1lPjppbnR9bXNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBlID0+IGUuZXZhbHVhdGUoXCI8ZXhwb3N1cmUtdGltZT5cIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSk7XHJcblxyXG4gICAgICAgIHBhcnNlci5kZWZpbmVUeXBlKFwibGVkLXNldHRpbmdcIiwgXCJ7bGVkLXBvd2VyOmxlZC1wb3dlcn0gYXQge3dhdmVsZW5ndGg6bGVkfVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwb3dlciA9IGUuZXZhbHVhdGUoXCJsZWQtcG93ZXJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlZCA9IGUuZXZhbHVhdGUoXCJ3YXZlbGVuZ3RoXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IExFRFNldHRpbmcobGVkLCBwb3dlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB0cnVlKTtcclxuXHJcbiAgICAgICAgcGFyc2VyLmRlZmluZVR5cGUoXCJhbm90aGVyLWxlZC1zZXR0aW5nXCIsIFwiLCB7bGVkLXNldHRpbmc6bGVkLXNldHRpbmd9XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9PiBlLmV2YWx1YXRlKFwibGVkLXNldHRpbmdcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSk7XHJcblxyXG4gICAgICAgIHBhcnNlci5kZWZpbmVUeXBlKFwiY2hhbm5lbC1uYW1lXCIsIFwiJ3s8bmFtZT46W0EtWmEtejAtOV06K30nXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9PiBlLmdldFBhcnNlZFN0cmluZyhcIjxuYW1lPlwiKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB0cnVlKTtcclxuXHJcbiAgICAgICAgcGFyc2VyLmRlZmluZVNlbnRlbmNlKFxyXG4gICAgICAgICAgICBcIkRlZmluZSBjaGFubmVsIHtjaGFubmVsLW5hbWU6Y2hhbm5lbC1uYW1lfTpcIiArXHJcbiAgICAgICAgICAgIFwie1xcbiAgfWV4Y2l0ZSB3aXRoIHtsZWQtc2V0dGluZzpsZWQtc2V0dGluZ317YW5vdGhlci1sZWQtc2V0dGluZzphbm90aGVyLWxlZC1zZXR0aW5nOjAtM31cIiArXHJcbiAgICAgICAgICAgIFwie1xcbiAgfXVzZSBhbiBleHBvc3VyZSB0aW1lIG9mIHtleHBvc3VyZS10aW1lOmV4cG9zdXJlLXRpbWV9LlwiLFxyXG4gICAgICAgICAgICBlID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5hbWU6IHN0cmluZyA9IGUuZXZhbHVhdGUoXCJjaGFubmVsLW5hbWVcIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmaXJzdExlZFNldHRpbmc6IExFRFNldHRpbmcgPSBlLmV2YWx1YXRlKFwibGVkLXNldHRpbmdcIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvdGhlckxlZFNldHRpbmdzOiBMRURTZXR0aW5nW10gPSBlLmV2YWx1YXRlKFwiYW5vdGhlci1sZWQtc2V0dGluZ1wiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGV4cG9zdXJlVGltZTogbnVtYmVyID0gZS5ldmFsdWF0ZShcImV4cG9zdXJlLXRpbWVcIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFubmVsOiBDaGFubmVsID0gbmV3IENoYW5uZWwobmFtZSwgZmlyc3RMZWRTZXR0aW5nLCBvdGhlckxlZFNldHRpbmdzLCBleHBvc3VyZVRpbWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5taWNyb3Njb3BlLmFkZENoYW5uZWwoY2hhbm5lbCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKS5vblN1Y2Nlc3NmdWxQYXJzZWQobiA9PiB7XHJcbiAgICAgICAgICAgIGRlZmluZWRDaGFubmVscy5wdXNoKG4uZ2V0UGFyc2VkU3RyaW5nKFwiY2hhbm5lbC1uYW1lXCIpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcGFyc2VyLmRlZmluZVR5cGUoXCJyZWdpb24tbmFtZVwiLCBcIid7PHJlZ2lvbi1uYW1lPjpbYS16QS1aMC05XTorfSdcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBlID0+IGUuZ2V0UGFyc2VkU3RyaW5nKFwiPHJlZ2lvbi1uYW1lPlwiKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB0cnVlKTtcclxuXHJcbiAgICAgICAgcGFyc2VyLmRlZmluZVR5cGUoXCJyZWdpb24tZGltZW5zaW9uc1wiLCBcIns8d2lkdGg+OmZsb2F0fSB4IHs8aGVpZ2h0PjpmbG9hdH0geCB7PGRlcHRoPjpmbG9hdH0gbWljcm9uc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3OiBudW1iZXIgPSBlLmV2YWx1YXRlKFwiPHdpZHRoPlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaDogbnVtYmVyID0gZS5ldmFsdWF0ZShcIjxoZWlnaHQ+XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkOiBudW1iZXIgPSBlLmV2YWx1YXRlKFwiPGRlcHRoPlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt3LCBoLCBkXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRydWUpO1xyXG5cclxuICAgICAgICBwYXJzZXIuZGVmaW5lVHlwZShcInJlZ2lvbi1jZW50ZXJcIiwgXCJ7PGNlbnRlcj46dHVwbGU8ZmxvYXQseCx5LHo+fSBtaWNyb25zXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9PiBlLmV2YWx1YXRlKFwiPGNlbnRlcj5cIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcGFyc2VyLmRlZmluZVNlbnRlbmNlKFxyXG4gICAgICAgICAgICBcIkRlZmluZSBhIHBvc2l0aW9uIHtyZWdpb24tbmFtZTpyZWdpb24tbmFtZX06XCIgK1xyXG4gICAgICAgICAgICBcIntcXG4gIH17cmVnaW9uLWRpbWVuc2lvbnM6cmVnaW9uLWRpbWVuc2lvbnN9XCIgK1xyXG4gICAgICAgICAgICBcIntcXG4gIH1jZW50ZXJlZCBhdCB7cmVnaW9uLWNlbnRlcjpyZWdpb24tY2VudGVyfS5cIixcclxuICAgICAgICAgICAgZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuYW1lOiBzdHJpbmcgPSBlLmV2YWx1YXRlKFwicmVnaW9uLW5hbWVcIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkaW1lbnNpb25zOiBudW1iZXJbXSA9IGUuZXZhbHVhdGUoXCJyZWdpb24tZGltZW5zaW9uc1wiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNlbnRlcjogbnVtYmVyW10gPSBlLmV2YWx1YXRlKFwicmVnaW9uLWNlbnRlclwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubWljcm9zY29wZS5hZGRQb3NpdGlvbihuZXcgUG9zaXRpb24obmFtZSwgY2VudGVyLCBkaW1lbnNpb25zKSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKS5vblN1Y2Nlc3NmdWxQYXJzZWQobiA9PiB7XHJcbiAgICAgICAgICAgIGRlZmluZWRSZWdpb25zLnB1c2gobi5nZXRQYXJzZWRTdHJpbmcoXCJyZWdpb24tbmFtZVwiKSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHBhcnNlci5kZWZpbmVUeXBlKFwiZGVmaW5lZC1jaGFubmVsc1wiLCBcIid7Y2hhbm5lbDpbQS1aYS16MC05XTorfSdcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBlID0+IGUuZ2V0UGFyc2VkU3RyaW5nKFwiY2hhbm5lbFwiKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBlID0+IEF1dG9jb21wbGV0aW9uLmxpdGVyYWwoZSwgZGVmaW5lZENoYW5uZWxzKSk7XHJcblxyXG4gICAgICAgIHBhcnNlci5kZWZpbmVUeXBlKFwiZGVmaW5lZC1wb3NpdGlvbnNcIiwgXCIne3Bvc2l0aW9uOltBLVphLXowLTldOit9J1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGUgPT4gZS5nZXRQYXJzZWRTdHJpbmcoXCJwb3NpdGlvblwiKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBlID0+IEF1dG9jb21wbGV0aW9uLmxpdGVyYWwoZSwgZGVmaW5lZFJlZ2lvbnMpKTtcclxuXHJcbiAgICAgICAgcGFyc2VyLmRlZmluZVR5cGUoXCJ0aW1lLXVuaXRcIiwgXCJzZWNvbmQocylcIiwgX2UgPT4gMSk7XHJcbiAgICAgICAgcGFyc2VyLmRlZmluZVR5cGUoXCJ0aW1lLXVuaXRcIiwgXCJtaW51dGUocylcIiwgX2UgPT4gNjApO1xyXG4gICAgICAgIHBhcnNlci5kZWZpbmVUeXBlKFwidGltZS11bml0XCIsIFwiaG91cihzKVwiLCAgIF9lID0+IDM2MDApO1xyXG5cclxuICAgICAgICBwYXJzZXIuZGVmaW5lVHlwZShcInRpbWUtaW50ZXJ2YWxcIiwgXCJ7bjpmbG9hdH0ge3RpbWUtdW5pdDp0aW1lLXVuaXR9XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5Vbml0czogbnVtYmVyID0gZS5ldmFsdWF0ZShcIm5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVuaXRJblNlY29uZHM6IG51bWJlciA9IGUuZXZhbHVhdGUoXCJ0aW1lLXVuaXRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKG5Vbml0cyAqIHVuaXRJblNlY29uZHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSk7XHJcblxyXG4gICAgICAgIHBhcnNlci5kZWZpbmVUeXBlKFwicmVwZXRpdGlvblwiLCBcIm9uY2VcIiwgX2UgPT4gIFsxLCAwXSk7XHJcbiAgICAgICAgcGFyc2VyLmRlZmluZVR5cGUoXCJyZXBldGl0aW9uXCIsIFwiZXZlcnkge2ludGVydmFsOnRpbWUtaW50ZXJ2YWx9IGZvciB7ZHVyYXRpb246dGltZS1pbnRlcnZhbH1cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW50ZXJ2YWw6IG51bWJlciA9IGUuZXZhbHVhdGUoXCJpbnRlcnZhbFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZHVyYXRpb246IG51bWJlciA9IGUuZXZhbHVhdGUoXCJkdXJhdGlvblwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgaW50ZXJ2YWwsIGR1cmF0aW9uIF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB0cnVlKTtcclxuXHJcbiAgICAgICAgcGFyc2VyLmRlZmluZVR5cGUoXCJ6LWRpc3RhbmNlXCIsIFwie3otZGlzdGFuY2U6ZmxvYXR9IG1pY3JvbnNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBlID0+IGUuZXZhbHVhdGUoXCJ6LWRpc3RhbmNlXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRydWUpO1xyXG5cclxuICAgICAgICBwYXJzZXIuZGVmaW5lVHlwZShcImxlbnNcIiwgIFwiNXggbGVuc1wiLCBfZSA9PiBMZW5zLkZJVkUpO1xyXG4gICAgICAgIHBhcnNlci5kZWZpbmVUeXBlKFwibGVuc1wiLCBcIjIweCBsZW5zXCIsIF9lID0+IExlbnMuVFdFTlRZKTtcclxuXHJcbiAgICAgICAgcGFyc2VyLmRlZmluZVR5cGUoXCJtYWdcIiwgXCIwLjV4IG1hZ25pZmljYXRpb24gY2hhbmdlclwiLCBfZSA9PiBNYWduaWZpY2F0aW9uQ2hhbmdlci5aRVJPX0ZJVkUpO1xyXG4gICAgICAgIHBhcnNlci5kZWZpbmVUeXBlKFwibWFnXCIsIFwiMS4weCBtYWduaWZpY2F0aW9uIGNoYW5nZXJcIiwgX2UgPT4gTWFnbmlmaWNhdGlvbkNoYW5nZXIuT05FX1pFUk8pO1xyXG4gICAgICAgIHBhcnNlci5kZWZpbmVUeXBlKFwibWFnXCIsIFwiMi4weCBtYWduaWZpY2F0aW9uIGNoYW5nZXJcIiwgX2UgPT4gTWFnbmlmaWNhdGlvbkNoYW5nZXIuVFdPX1pFUk8pO1xyXG5cclxuICAgICAgICBwYXJzZXIuZGVmaW5lVHlwZShcImJpbm5pbmdcIiwgXCIxIHggMVwiLCBfZSA9PiBCaW5uaW5nLk9ORSk7XHJcbiAgICAgICAgcGFyc2VyLmRlZmluZVR5cGUoXCJiaW5uaW5nXCIsIFwiMiB4IDJcIiwgX2UgPT4gQmlubmluZy5UV08pO1xyXG4gICAgICAgIHBhcnNlci5kZWZpbmVUeXBlKFwiYmlubmluZ1wiLCBcIjMgeCAzXCIsIF9lID0+IEJpbm5pbmcuVEhSRUUpO1xyXG4gICAgICAgIHBhcnNlci5kZWZpbmVUeXBlKFwiYmlubmluZ1wiLCBcIjQgeCA0XCIsIF9lID0+IEJpbm5pbmcuRk9VUik7XHJcbiAgICAgICAgcGFyc2VyLmRlZmluZVR5cGUoXCJiaW5uaW5nXCIsIFwiNSB4IDVcIiwgX2UgPT4gQmlubmluZy5GSVZFKTtcclxuXHJcbiAgICAgICAgcGFyc2VyLmRlZmluZVR5cGUoXCJzdGFydFwiLCBcIkF0IHRoZSBiZWdpbm5pbmdcIiwgX2UgPT4gdGhpcy5nbG9iYWxTdGFydCk7XHJcbiAgICAgICAgcGFyc2VyLmRlZmluZVR5cGUoXCJzdGFydFwiLCBcIkF0IHt0aW1lOnRpbWV9XCIsICAgIGUgPT4gZS5ldmFsdWF0ZShcInRpbWVcIiksIHRydWUpO1xyXG4gICAgICAgIHBhcnNlci5kZWZpbmVUeXBlKFwic3RhcnRcIiwgXCJBZnRlciB7ZGVsYXk6dGltZS1pbnRlcnZhbH1cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWZ0ZXJTZWNvbmRzOiBudW1iZXIgPSBlLmV2YWx1YXRlKFwiZGVsYXlcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGQ6IERhdGUgPSBuZXcgRGF0ZSh0aGlzLmdsb2JhbFN0YXJ0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5zZXRTZWNvbmRzKGQuZ2V0U2Vjb25kcygpICsgYWZ0ZXJTZWNvbmRzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB0cnVlKTtcclxuXHJcbiAgICAgICAgcGFyc2VyLmRlZmluZVR5cGUoXCJwb3NpdGlvbi1saXN0XCIsIFwiYWxsIHBvc2l0aW9uc1wiLCBfZSA9PiBbIEFMTF9QT1NJVElPTlMgXSk7XHJcbiAgICAgICAgcGFyc2VyLmRlZmluZVR5cGUoXCJwb3NpdGlvbi1saXN0XCIsIFwicG9zaXRpb24ocykge3Bvc2l0aW9uczpsaXN0PGRlZmluZWQtcG9zaXRpb25zPn1cIiwgZSA9PiBlLmV2YWx1YXRlKFwicG9zaXRpb25zXCIpKTtcclxuICAgICAgICBcclxuICAgICAgICBwYXJzZXIuZGVmaW5lVHlwZShcImNoYW5uZWwtbGlzdFwiLCBcImFsbCBjaGFubmVsc1wiLCBfZSA9PiBbIEFMTF9DSEFOTkVMUyBdKTtcclxuICAgICAgICBwYXJzZXIuZGVmaW5lVHlwZShcImNoYW5uZWwtbGlzdFwiLCBcImNoYW5uZWwocykge2NoYW5uZWxzOmxpc3Q8ZGVmaW5lZC1jaGFubmVscz59XCIsIGUgPT4gZS5ldmFsdWF0ZShcImNoYW5uZWxzXCIpKTtcclxuXHJcbiAgICAgICAgcGFyc2VyLmRlZmluZVNlbnRlbmNlKFxyXG4gICAgICAgICAgICBcIntzdGFydDpzdGFydH17LCB9YWNxdWlyZS4uLlwiICtcclxuICAgICAgICAgICAgXCJ7XFxuICB9e3JlcGV0aXRpb246cmVwZXRpdGlvbn1cIiArXHJcbiAgICAgICAgICAgIFwie1xcbiAgfXtwb3NpdGlvbi1saXN0OnBvc2l0aW9uLWxpc3R9XCIgK1xyXG4gICAgICAgICAgICBcIntcXG4gIH17Y2hhbm5lbC1saXN0OmNoYW5uZWwtbGlzdH1cIiArXHJcbiAgICAgICAgICAgIFwie1xcbiAgfXdpdGggYSBwbGFuZSBkaXN0YW5jZSBvZiB7ZHo6ei1kaXN0YW5jZX1cIiArXHJcbiAgICAgICAgICAgIFwie1xcbiAgfXVzaW5nIHRoZSB7bGVuczpsZW5zfSB3aXRoIHRoZSB7bWFnbmlmaWNhdGlvbjptYWd9IGFuZCBhIGJpbm5pbmcgb2Yge2Jpbm5pbmc6YmlubmluZ30uXCIsXHJcbiAgICAgICAgICAgIGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGltZTogRGF0ZSA9IGUuZXZhbHVhdGUoXCJzdGFydFwiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlcGV0aXRpb246IG51bWJlcltdID0gZS5ldmFsdWF0ZShcInJlcGV0aXRpb25cIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbnRlcnZhbDogbnVtYmVyID0gcmVwZXRpdGlvblswXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGR1cmF0aW9uOiBudW1iZXIgPSByZXBldGl0aW9uWzFdO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uTmFtZXM6IHN0cmluZ1tdID0gZS5ldmFsdWF0ZShcInBvc2l0aW9uLWxpc3RcIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFubmVsTmFtZXM6IHN0cmluZ1tdID0gZS5ldmFsdWF0ZShcImNoYW5uZWwtbGlzdFwiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxlbnM6IExlbnMgPSBlLmV2YWx1YXRlKFwibGVuc1wiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1hZzogTWFnbmlmaWNhdGlvbkNoYW5nZXIgPSBlLmV2YWx1YXRlKFwibWFnbmlmaWNhdGlvblwiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJpbm5pbmc6IEJpbm5pbmcgPSBlLmV2YWx1YXRlKFwiYmlubmluZ1wiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGR6OiBudW1iZXIgPSBlLmV2YWx1YXRlKFwiZHpcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnQ6IERhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgc3RhcnQuc2V0SG91cnModGhpcy5nbG9iYWxTdGFydC5nZXRIb3VycygpKTtcclxuICAgICAgICAgICAgICAgIHN0YXJ0LnNldE1pbnV0ZXModGhpcy5nbG9iYWxTdGFydC5nZXRNaW51dGVzKCkpO1xyXG4gICAgICAgICAgICAgICAgc3RhcnQuc2V0U2Vjb25kcyh0aGlzLmdsb2JhbFN0YXJ0LmdldFNlY29uZHMoKSk7XHJcbiAgICAgICAgICAgICAgICBzdGFydC5zZXRNaWxsaXNlY29uZHModGhpcy5nbG9iYWxTdGFydC5nZXRNaWxsaXNlY29uZHMoKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5nbG9iYWxTdGFydC5nZXRUaW1lKCkgPiBzdGFydC5nZXRUaW1lKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQuc2V0RGF0ZShzdGFydC5nZXREYXRlKCkgKyAxKTsgLy8gYWRkIG9uZSBkYXlcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgY29uc3QgbkN5Y2xlczogbnVtYmVyID0gZHVyYXRpb24gPCBpbnRlcnZhbCA/IDEgOiBNYXRoLmZsb29yKGR1cmF0aW9uIC8gaW50ZXJ2YWwpICsgMTtcclxuICAgICAgICAgICAgICAgIGZvcihsZXQgYyA9IDA7IGMgPCBuQ3ljbGVzOyBjKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwbGFubmVkRXhlY3V0aW9uVGltZTogRGF0ZSA9IG5ldyBEYXRlKHN0YXJ0KTtcclxuICAgICAgICAgICAgICAgICAgICBwbGFubmVkRXhlY3V0aW9uVGltZS5zZXRTZWNvbmRzKHN0YXJ0LmdldFNlY29uZHMoKSArIChjICogaW50ZXJ2YWwpKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRpbWVsaW5lLnB1dChwbGFubmVkRXhlY3V0aW9uVGltZSwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1pY3Jvc2NvcGUuc2V0TGVucyhsZW5zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5taWNyb3Njb3BlLnNldE1hZ25pZmljYXRpb25DaGFuZ2VyKG1hZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWljcm9zY29wZS5zZXRCaW5uaW5nKGJpbm5pbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1pY3Jvc2NvcGUuYWNxdWlyZShwb3NpdGlvbk5hbWVzLCBjaGFubmVsTmFtZXMsIGR6KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHBhcnNlci5kZWZpbmVTZW50ZW5jZShcclxuICAgICAgICAgICAgXCJ7c3RhcnQ6c3RhcnR9eywgfWFkanVzdC4uLlwiICtcclxuICAgICAgICAgICAgXCJ7XFxuICB9e3JlcGV0aXRpb246cmVwZXRpdGlvbn1cIiArXHJcbiAgICAgICAgICAgIFwie1xcbiAgfXRoZSBwb3dlciBvZiB0aGUge2xlZDpsZWR9IGxlZCBvZiBjaGFubmVsIHtjaGFubmVsOmRlZmluZWQtY2hhbm5lbHN9IHRvIHtwb3dlcjpsZWQtcG93ZXJ9LlwiLFxyXG4gICAgICAgICAgICBlID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWU6IERhdGUgPSBlLmV2YWx1YXRlKFwic3RhcnRcIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXBldGl0aW9uOiBudW1iZXJbXSA9IGUuZXZhbHVhdGUoXCJyZXBldGl0aW9uXCIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW50ZXJ2YWw6IG51bWJlciA9IHJlcGV0aXRpb25bMF07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkdXJhdGlvbjogbnVtYmVyID0gcmVwZXRpdGlvblsxXTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBsZWQ6IExFRCA9IGUuZXZhbHVhdGUoXCJsZWRcIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFubmVsOiBzdHJpbmcgPSBlLmV2YWx1YXRlKFwiY2hhbm5lbFwiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBvd2VyOiBudW1iZXIgPSBlLmV2YWx1YXRlKFwicG93ZXJcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnQ6IERhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgc3RhcnQuc2V0SG91cnModGhpcy5nbG9iYWxTdGFydC5nZXRIb3VycygpKTtcclxuICAgICAgICAgICAgICAgIHN0YXJ0LnNldE1pbnV0ZXModGhpcy5nbG9iYWxTdGFydC5nZXRNaW51dGVzKCkpO1xyXG4gICAgICAgICAgICAgICAgc3RhcnQuc2V0U2Vjb25kcyh0aGlzLmdsb2JhbFN0YXJ0LmdldFNlY29uZHMoKSk7XHJcbiAgICAgICAgICAgICAgICBzdGFydC5zZXRNaWxsaXNlY29uZHModGhpcy5nbG9iYWxTdGFydC5nZXRNaWxsaXNlY29uZHMoKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5nbG9iYWxTdGFydC5nZXRUaW1lKCkgPiBzdGFydC5nZXRUaW1lKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQuc2V0RGF0ZShzdGFydC5nZXREYXRlKCkgKyAxKTsgLy8gYWRkIG9uZSBkYXlcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgY29uc3QgbkN5Y2xlczogbnVtYmVyID0gZHVyYXRpb24gPCBpbnRlcnZhbCA/IDEgOiBNYXRoLmZsb29yKGR1cmF0aW9uIC8gaW50ZXJ2YWwpICsgMTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbnRlcnBvbGF0b3I6IEludGVycG9sYXRvciA9IG5ldyBJbnRlcnBvbGF0b3IoXHJcbiAgICAgICAgICAgICAgICAgICAgKCkgPT4gdGhpcy5taWNyb3Njb3BlLmdldENoYW5uZWwoY2hhbm5lbCk/LmdldExFRFNldHRpbmcobGVkKT8uZ2V0SW50ZW5zaXR5KCkgYXMgbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgICAgIChfYywgdikgPT4gdGhpcy5taWNyb3Njb3BlLmdldENoYW5uZWwoY2hhbm5lbCk/LmdldExFRFNldHRpbmcobGVkKT8uc2V0SW50ZW5zaXR5KE1hdGgucm91bmQodikpLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvd2VyLCBuQ3ljbGVzKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IobGV0IGMgPSAwOyBjIDwgbkN5Y2xlczsgYysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3ljbGUgPSBjO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBsYW5uZWRFeGVjdXRpb25UaW1lOiBEYXRlID0gbmV3IERhdGUoc3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBsYW5uZWRFeGVjdXRpb25UaW1lLnNldFNlY29uZHMoc3RhcnQuZ2V0U2Vjb25kcygpICsgKGMgKiBpbnRlcnZhbCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGltZWxpbmUucHV0KHBsYW5uZWRFeGVjdXRpb25UaW1lLCAoKSA9PiBpbnRlcnBvbGF0b3IuaW50ZXJwb2xhdGUoY3ljbGUpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcGFyc2VyLmRlZmluZVNlbnRlbmNlKFxyXG4gICAgICAgICAgICBcIntzdGFydDpzdGFydH17LCB9YWRqdXN0Li4uXCIgK1xyXG4gICAgICAgICAgICBcIntcXG4gIH17cmVwZXRpdGlvbjpyZXBldGl0aW9ufVwiICtcclxuICAgICAgICAgICAgXCJ7XFxuICB9dGhlIGV4cG9zdXJlIHRpbWUgb2YgY2hhbm5lbCB7Y2hhbm5lbDpkZWZpbmVkLWNoYW5uZWxzfSB0byB7ZXhwb3N1cmUtdGltZTpleHBvc3VyZS10aW1lfS5cIixcclxuICAgICAgICAgICAgZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0aW1lOiBEYXRlID0gZS5ldmFsdWF0ZShcInN0YXJ0XCIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVwZXRpdGlvbjogbnVtYmVyW10gPSBlLmV2YWx1YXRlKFwicmVwZXRpdGlvblwiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGludGVydmFsOiBudW1iZXIgPSByZXBldGl0aW9uWzBdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZHVyYXRpb246IG51bWJlciA9IHJlcGV0aXRpb25bMV07XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hhbm5lbDogc3RyaW5nID0gZS5ldmFsdWF0ZShcImNoYW5uZWxcIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBleHBvc3VyZVRpbWU6IG51bWJlciA9IGUuZXZhbHVhdGUoXCJleHBvc3VyZS10aW1lXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0OiBEYXRlID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgICAgIHN0YXJ0LnNldEhvdXJzKHRoaXMuZ2xvYmFsU3RhcnQuZ2V0SG91cnMoKSk7XHJcbiAgICAgICAgICAgICAgICBzdGFydC5zZXRNaW51dGVzKHRoaXMuZ2xvYmFsU3RhcnQuZ2V0TWludXRlcygpKTtcclxuICAgICAgICAgICAgICAgIHN0YXJ0LnNldFNlY29uZHModGhpcy5nbG9iYWxTdGFydC5nZXRTZWNvbmRzKCkpO1xyXG4gICAgICAgICAgICAgICAgc3RhcnQuc2V0TWlsbGlzZWNvbmRzKHRoaXMuZ2xvYmFsU3RhcnQuZ2V0TWlsbGlzZWNvbmRzKCkpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKHRoaXMuZ2xvYmFsU3RhcnQuZ2V0VGltZSgpID4gc3RhcnQuZ2V0VGltZSgpKVxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0LnNldERhdGUoc3RhcnQuZ2V0RGF0ZSgpICsgMSk7IC8vIGFkZCBvbmUgZGF5XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5DeWNsZXM6IG51bWJlciA9IGR1cmF0aW9uIDwgaW50ZXJ2YWwgPyAxIDogTWF0aC5mbG9vcihkdXJhdGlvbiAvIGludGVydmFsKSArIDE7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgaW50ZXJwb2xhdG9yOiBJbnRlcnBvbGF0b3IgPSBuZXcgSW50ZXJwb2xhdG9yKFxyXG4gICAgICAgICAgICAgICAgICAgICgpID0+IHRoaXMubWljcm9zY29wZS5nZXRDaGFubmVsKGNoYW5uZWwpPy5nZXRFeHBvc3VyZVRpbWUoKSBhcyBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgKF9jLCB2KSA9PiB0aGlzLm1pY3Jvc2NvcGUuZ2V0Q2hhbm5lbChjaGFubmVsKT8uc2V0RXhwb3N1cmVUaW1lKE1hdGgucm91bmQodikpLFxyXG4gICAgICAgICAgICAgICAgICAgIGV4cG9zdXJlVGltZSwgbkN5Y2xlcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBjID0gMDsgYyA8IG5DeWNsZXM7IGMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGN5Y2xlID0gYztcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwbGFubmVkRXhlY3V0aW9uVGltZTogRGF0ZSA9IG5ldyBEYXRlKHN0YXJ0KTtcclxuICAgICAgICAgICAgICAgICAgICBwbGFubmVkRXhlY3V0aW9uVGltZS5zZXRTZWNvbmRzKHN0YXJ0LmdldFNlY29uZHMoKSArIChjICogaW50ZXJ2YWwpKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRpbWVsaW5lLnB1dChwbGFubmVkRXhlY3V0aW9uVGltZSwgKCkgPT4gaW50ZXJwb2xhdG9yLmludGVycG9sYXRlKGN5Y2xlKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcGFyc2VyLmRlZmluZVR5cGUoXCJ0ZW1wZXJhdHVyZVwiLCBcInt0ZW1wZXJhdHVyZTpmbG9hdH1cXHUwMEIwQ1wiLCBlID0+IGUuZXZhbHVhdGUoXCJ0ZW1wZXJhdHVyZVwiKSwgdHJ1ZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcGFyc2VyLmRlZmluZVR5cGUoXCJjbzItY29uY2VudHJhdGlvblwiLCBcIntDTzIgY29uY2VudHJhdGlvbjpmbG9hdH0lXCIsIGUgPT4gZS5ldmFsdWF0ZShcIkNPMiBjb25jZW50cmF0aW9uXCIpLCB0cnVlKTtcclxuXHJcbiAgICAgICAgcGFyc2VyLmRlZmluZVNlbnRlbmNlKFxyXG4gICAgICAgICAgICBcIntzdGFydDpzdGFydH17LCB9YWRqdXN0Li4uXCIgK1xyXG4gICAgICAgICAgICBcIntcXG4gIH17cmVwZXRpdGlvbjpyZXBldGl0aW9ufVwiICtcclxuICAgICAgICAgICAgXCJ7XFxuICB9dGhlIENPMiBjb25jZW50cmF0aW9uIHRvIHtjbzItY29uY2VudHJhdGlvbjpjbzItY29uY2VudHJhdGlvbn0uXCIsXHJcbiAgICAgICAgICAgIGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGltZTogRGF0ZSA9IGUuZXZhbHVhdGUoXCJzdGFydFwiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlcGV0aXRpb246IG51bWJlcltdID0gZS5ldmFsdWF0ZShcInJlcGV0aXRpb25cIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbnRlcnZhbDogbnVtYmVyID0gcmVwZXRpdGlvblswXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGR1cmF0aW9uOiBudW1iZXIgPSByZXBldGl0aW9uWzFdO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvMkNvbmNlbnRyYXRpb246IG51bWJlciA9IGUuZXZhbHVhdGUoXCJjbzItY29uY2VudHJhdGlvblwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydDogRGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgICAgICBzdGFydC5zZXRIb3Vycyh0aGlzLmdsb2JhbFN0YXJ0LmdldEhvdXJzKCkpO1xyXG4gICAgICAgICAgICAgICAgc3RhcnQuc2V0TWludXRlcyh0aGlzLmdsb2JhbFN0YXJ0LmdldE1pbnV0ZXMoKSk7XHJcbiAgICAgICAgICAgICAgICBzdGFydC5zZXRTZWNvbmRzKHRoaXMuZ2xvYmFsU3RhcnQuZ2V0U2Vjb25kcygpKTtcclxuICAgICAgICAgICAgICAgIHN0YXJ0LnNldE1pbGxpc2Vjb25kcyh0aGlzLmdsb2JhbFN0YXJ0LmdldE1pbGxpc2Vjb25kcygpKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLmdsb2JhbFN0YXJ0LmdldFRpbWUoKSA+IHN0YXJ0LmdldFRpbWUoKSlcclxuICAgICAgICAgICAgICAgICAgICBzdGFydC5zZXREYXRlKHN0YXJ0LmdldERhdGUoKSArIDEpOyAvLyBhZGQgb25lIGRheVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBjb25zdCBuQ3ljbGVzOiBudW1iZXIgPSBkdXJhdGlvbiA8IGludGVydmFsID8gMSA6IE1hdGguZmxvb3IoZHVyYXRpb24gLyBpbnRlcnZhbCkgKyAxO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGludGVycG9sYXRvcjogSW50ZXJwb2xhdG9yID0gbmV3IEludGVycG9sYXRvcihcclxuICAgICAgICAgICAgICAgICAgICAoKSA9PiB0aGlzLm1pY3Jvc2NvcGUuZ2V0Q08yQ29uY2VudHJhdGlvbigpLFxyXG4gICAgICAgICAgICAgICAgICAgIChfYywgdikgPT4gdGhpcy5taWNyb3Njb3BlLnNldENPMkNvbmNlbnRyYXRpb24odiksXHJcbiAgICAgICAgICAgICAgICAgICAgY28yQ29uY2VudHJhdGlvbiwgbkN5Y2xlcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBjID0gMDsgYyA8IG5DeWNsZXM7IGMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGN5Y2xlID0gYztcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwbGFubmVkRXhlY3V0aW9uVGltZTogRGF0ZSA9IG5ldyBEYXRlKHN0YXJ0KTtcclxuICAgICAgICAgICAgICAgICAgICBwbGFubmVkRXhlY3V0aW9uVGltZS5zZXRTZWNvbmRzKHN0YXJ0LmdldFNlY29uZHMoKSArIChjICogaW50ZXJ2YWwpKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRpbWVsaW5lLnB1dChwbGFubmVkRXhlY3V0aW9uVGltZSwgKCkgPT4gaW50ZXJwb2xhdG9yLmludGVycG9sYXRlKGN5Y2xlKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICBwYXJzZXIuZGVmaW5lU2VudGVuY2UoXHJcbiAgICAgICAgICAgIFwie3N0YXJ0OnN0YXJ0fXssIH1hZGp1c3QuLi5cIiArXHJcbiAgICAgICAgICAgIFwie1xcbiAgfXtyZXBldGl0aW9uOnJlcGV0aXRpb259XCIgK1xyXG4gICAgICAgICAgICBcIntcXG4gIH10aGUgdGVtcGVyYXR1cmUgdG8ge3RlbXBlcmF0dXJlOnRlbXBlcmF0dXJlfS5cIixcclxuICAgICAgICAgICAgZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0aW1lOiBEYXRlID0gZS5ldmFsdWF0ZShcInN0YXJ0XCIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVwZXRpdGlvbjogbnVtYmVyW10gPSBlLmV2YWx1YXRlKFwicmVwZXRpdGlvblwiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGludGVydmFsOiBudW1iZXIgPSByZXBldGl0aW9uWzBdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZHVyYXRpb246IG51bWJlciA9IHJlcGV0aXRpb25bMV07XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgdGVtcGVyYXR1cmU6IG51bWJlciA9IGUuZXZhbHVhdGUoXCJ0ZW1wZXJhdHVyZVwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydDogRGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgICAgICBzdGFydC5zZXRIb3Vycyh0aGlzLmdsb2JhbFN0YXJ0LmdldEhvdXJzKCkpO1xyXG4gICAgICAgICAgICAgICAgc3RhcnQuc2V0TWludXRlcyh0aGlzLmdsb2JhbFN0YXJ0LmdldE1pbnV0ZXMoKSk7XHJcbiAgICAgICAgICAgICAgICBzdGFydC5zZXRTZWNvbmRzKHRoaXMuZ2xvYmFsU3RhcnQuZ2V0U2Vjb25kcygpKTtcclxuICAgICAgICAgICAgICAgIHN0YXJ0LnNldE1pbGxpc2Vjb25kcyh0aGlzLmdsb2JhbFN0YXJ0LmdldE1pbGxpc2Vjb25kcygpKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLmdsb2JhbFN0YXJ0LmdldFRpbWUoKSA+IHN0YXJ0LmdldFRpbWUoKSlcclxuICAgICAgICAgICAgICAgICAgICBzdGFydC5zZXREYXRlKHN0YXJ0LmdldERhdGUoKSArIDEpOyAvLyBhZGQgb25lIGRheVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBjb25zdCBuQ3ljbGVzOiBudW1iZXIgPSBkdXJhdGlvbiA8IGludGVydmFsID8gMSA6IE1hdGguZmxvb3IoZHVyYXRpb24gLyBpbnRlcnZhbCkgKyAxO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGludGVycG9sYXRvcjogSW50ZXJwb2xhdG9yID0gbmV3IEludGVycG9sYXRvcihcclxuICAgICAgICAgICAgICAgICAgICAoKSA9PiB0aGlzLm1pY3Jvc2NvcGUuZ2V0VGVtcGVyYXR1cmUoKSxcclxuICAgICAgICAgICAgICAgICAgICAoX2MsIHYpID0+IHRoaXMubWljcm9zY29wZS5zZXRUZW1wZXJhdHVyZSh2KSxcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wZXJhdHVyZSwgbkN5Y2xlcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBjID0gMDsgYyA8IG5DeWNsZXM7IGMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGN5Y2xlID0gYztcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwbGFubmVkRXhlY3V0aW9uVGltZTogRGF0ZSA9IG5ldyBEYXRlKHN0YXJ0KTtcclxuICAgICAgICAgICAgICAgICAgICBwbGFubmVkRXhlY3V0aW9uVGltZS5zZXRTZWNvbmRzKHN0YXJ0LmdldFNlY29uZHMoKSArIChjICogaW50ZXJ2YWwpKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRpbWVsaW5lLnB1dChwbGFubmVkRXhlY3V0aW9uVGltZSwgKCkgPT4gaW50ZXJwb2xhdG9yLmludGVycG9sYXRlKGN5Y2xlKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgIFxyXG4gICAgICAgIHJldHVybiBwYXJzZXI7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWFrZU1pY3Jvc2NvcGVQYXJzZXIoKTogUGFyc2VyIHtcclxuXHJcbiAgICBsZXQgcGFyc2VyID0gbmV3IFBhcnNlcigpO1xyXG5cclxuICAgIGNvbnN0IGRlZmluZWRDaGFubmVsczogc3RyaW5nW10gPSBbXTtcclxuICAgIGNvbnN0IGRlZmluZWRSZWdpb25zOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgIHBhcnNlci5hZGRQYXJzZVN0YXJ0TGlzdGVuZXIoKCkgPT4ge1xyXG4gICAgICAgIGRlZmluZWRDaGFubmVscy5sZW5ndGggPSAwO1xyXG4gICAgICAgIGRlZmluZWRSZWdpb25zLmxlbmd0aCA9IDA7XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgcGFyc2VyLmRlZmluZVR5cGUoXCJsZWRcIiwgXCIzODVubVwiLCBfZSA9PiAzODUpO1xyXG4gICAgcGFyc2VyLmRlZmluZVR5cGUoXCJsZWRcIiwgXCI0NzBubVwiLCBfZSA9PiA0NzApO1xyXG4gICAgcGFyc2VyLmRlZmluZVR5cGUoXCJsZWRcIiwgXCI1NjdubVwiLCBfZSA9PiA1NjcpO1xyXG4gICAgcGFyc2VyLmRlZmluZVR5cGUoXCJsZWRcIiwgXCI2MjVubVwiLCBfZSA9PiA2MjUpO1xyXG5cclxuICAgIHBhcnNlci5kZWZpbmVUeXBlKFwibGVkLXBvd2VyXCIsIFwiezxsZWQtcG93ZXI+OmludH0lXCIsIGUgPT4gZS5ldmFsdWF0ZShcIjxsZWQtcG93ZXI+XCIpLCB0cnVlKTtcclxuXHJcbiAgICBwYXJzZXIuZGVmaW5lVHlwZShcImV4cG9zdXJlLXRpbWVcIiwgXCJ7PGV4cG9zdXJlLXRpbWU+OmludH1tc1wiLCBlID0+IGUuZXZhbHVhdGUoXCI8ZXhwb3N1cmUtdGltZT5cIiksIHRydWUpO1xyXG5cclxuICAgIHBhcnNlci5kZWZpbmVUeXBlKFwibGVkLXNldHRpbmdcIiwgXCJ7bGVkLXBvd2VyOmxlZC1wb3dlcn0gYXQge3dhdmVsZW5ndGg6bGVkfVwiLCBlID0+IHtcclxuICAgICAgICBjb25zdCBwb3dlciA9IGUuZXZhbHVhdGUoXCJsZWQtcG93ZXJcIik7XHJcbiAgICAgICAgY29uc3QgbGVkID0gZS5ldmFsdWF0ZShcIndhdmVsZW5ndGhcIik7XHJcbiAgICAgICAgcmV0dXJuIHsgbGVkOiBsZWQsIHBvd2VyOiBwb3dlciB9O1xyXG4gICAgfSwgdHJ1ZSk7XHJcblxyXG4gICAgcGFyc2VyLmRlZmluZVR5cGUoXCJhbm90aGVyLWxlZC1zZXR0aW5nXCIsIFwiLCB7bGVkLXNldHRpbmc6bGVkLXNldHRpbmd9XCIsIGUgPT4gZS5ldmFsdWF0ZShcImxlZC1zZXR0aW5nXCIpLCB0cnVlKTtcclxuXHJcbiAgICBwYXJzZXIuZGVmaW5lVHlwZShcImNoYW5uZWwtbmFtZVwiLCBcIid7PG5hbWU+OltBLVphLXowLTldOit9J1wiLCBlID0+IGUuZ2V0UGFyc2VkU3RyaW5nKFwiPG5hbWU+XCIpLCB0cnVlKTtcclxuXHJcbiAgICBwYXJzZXIuZGVmaW5lU2VudGVuY2UoXHJcbiAgICAgICAgXCJEZWZpbmUgY2hhbm5lbCB7Y2hhbm5lbC1uYW1lOmNoYW5uZWwtbmFtZX06XCIgK1xyXG4gICAgICAgIFwie1xcbiAgfWV4Y2l0ZSB3aXRoIHtsZWQtc2V0dGluZzpsZWQtc2V0dGluZ317YW5vdGhlci1sZWQtc2V0dGluZzphbm90aGVyLWxlZC1zZXR0aW5nOjAtM31cIiArXHJcbiAgICAgICAgXCJ7XFxuICB9dXNlIGFuIGV4cG9zdXJlIHRpbWUgb2Yge2V4cG9zdXJlLXRpbWU6ZXhwb3N1cmUtdGltZX0uXCIsXHJcbiAgICAgICAgdW5kZWZpbmVkXHJcbiAgICApLm9uU3VjY2Vzc2Z1bFBhcnNlZChuID0+IHtcclxuICAgICAgICBkZWZpbmVkQ2hhbm5lbHMucHVzaChuLmdldFBhcnNlZFN0cmluZyhcImNoYW5uZWwtbmFtZVwiKSk7XHJcbiAgICB9KTtcclxuXHJcblxyXG5cclxuICAgIHBhcnNlci5kZWZpbmVUeXBlKFwicmVnaW9uLW5hbWVcIiwgXCInezxyZWdpb24tbmFtZT46W2EtekEtWjAtOV06K30nXCIsIHVuZGVmaW5lZCwgdHJ1ZSk7XHJcblxyXG4gICAgcGFyc2VyLmRlZmluZVR5cGUoXCJyZWdpb24tZGltZW5zaW9uc1wiLCBcIns8d2lkdGg+OmZsb2F0fSB4IHs8aGVpZ2h0PjpmbG9hdH0geCB7PGRlcHRoPjpmbG9hdH0gbWljcm9uc1wiLCB1bmRlZmluZWQsIHRydWUpO1xyXG4gICAgcGFyc2VyLmRlZmluZVR5cGUoXCJyZWdpb24tY2VudGVyXCIsIFwiezxjZW50ZXI+OnR1cGxlPGZsb2F0LHgseSx6Pn0gbWljcm9uc1wiLCB1bmRlZmluZWQsIHRydWUpO1xyXG4gICAgcGFyc2VyLmRlZmluZVR5cGUoXCJzZW50ZW5jZVwiLFxyXG4gICAgICAgICAgICBcIkRlZmluZSBhIHBvc2l0aW9uIHtyZWdpb24tbmFtZTpyZWdpb24tbmFtZX06XCIgK1xyXG4gICAgICAgICAgICBcIntcXG4gIH17cmVnaW9uLWRpbWVuc2lvbnM6cmVnaW9uLWRpbWVuc2lvbnN9XCIgK1xyXG4gICAgICAgICAgICBcIntcXG4gIH1jZW50ZXJlZCBhdCB7cmVnaW9uLWNlbnRlcjpyZWdpb24tY2VudGVyfS5cIixcclxuICAgICAgICAgICAgdW5kZWZpbmVkXHJcbiAgICApLm9uU3VjY2Vzc2Z1bFBhcnNlZChuID0+IHtcclxuICAgICAgICBkZWZpbmVkUmVnaW9ucy5wdXNoKG4uZ2V0UGFyc2VkU3RyaW5nKFwicmVnaW9uLW5hbWVcIikpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcGFyc2VyLmRlZmluZVR5cGUoXCJkZWZpbmVkLWNoYW5uZWxzXCIsIFwiJ3tjaGFubmVsOltBLVphLXowLTldOit9J1wiLFxyXG4gICAgICAgICAgICBfZSA9PiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgIGUgPT4gQXV0b2NvbXBsZXRpb24ubGl0ZXJhbChlLCBkZWZpbmVkQ2hhbm5lbHMpKTtcclxuXHJcbiAgICBwYXJzZXIuZGVmaW5lVHlwZShcImRlZmluZWQtcG9zaXRpb25zXCIsIFwiJ3twb3NpdGlvbjpbQS1aYS16MC05XTorfSdcIixcclxuICAgICAgICAgICAgZSA9PiBlLmdldFBhcnNlZFN0cmluZyhcInBvc2l0aW9uXCIpLFxyXG4gICAgICAgICAgICBlID0+IEF1dG9jb21wbGV0aW9uLmxpdGVyYWwoZSwgZGVmaW5lZFJlZ2lvbnMpKTtcclxuXHJcbiAgICBwYXJzZXIuZGVmaW5lVHlwZShcInRpbWUtdW5pdFwiLCBcInNlY29uZChzKVwiLCBfZSA9PiAxKTtcclxuICAgIHBhcnNlci5kZWZpbmVUeXBlKFwidGltZS11bml0XCIsIFwibWludXRlKHMpXCIsIF9lID0+IDYwKTtcclxuICAgIHBhcnNlci5kZWZpbmVUeXBlKFwidGltZS11bml0XCIsIFwiaG91cihzKVwiLCAgIF9lID0+IDM2MDApO1xyXG5cclxuICAgIHBhcnNlci5kZWZpbmVUeXBlKFwidGltZS1pbnRlcnZhbFwiLCBcIntuOmZsb2F0fSB7dGltZS11bml0OnRpbWUtdW5pdH1cIiwgZSA9PiB7XHJcbiAgICAgICAgY29uc3QgbjogbnVtYmVyID0gZS5ldmFsdWF0ZShcIm5cIik7XHJcbiAgICAgICAgY29uc3QgdW5pdDogbnVtYmVyID0gZS5ldmFsdWF0ZShcInRpbWUtdW5pdFwiKTtcclxuICAgICAgICBjb25zdCBzZWNvbmRzOiBudW1iZXIgPSBNYXRoLnJvdW5kKG4gKiB1bml0KTtcclxuICAgICAgICByZXR1cm4gc2Vjb25kcztcclxuICAgIH0sIHRydWUpO1xyXG5cclxuICAgIHBhcnNlci5kZWZpbmVUeXBlKFwicmVwZXRpdGlvblwiLCBcIm9uY2VcIiwgX2UgPT4gIFsxLCAwXSk7XHJcblxyXG4gICAgcGFyc2VyLmRlZmluZVR5cGUoXCJyZXBldGl0aW9uXCIsIFwiZXZlcnkge2ludGVydmFsOnRpbWUtaW50ZXJ2YWx9IGZvciB7ZHVyYXRpb246dGltZS1pbnRlcnZhbH1cIiwgZSA9PiB7XHJcbiAgICAgICAgY29uc3QgaW50ZXJ2YWw6IG51bWJlciA9IGUuZXZhbHVhdGUoXCJpbnRlcnZhbFwiKTtcclxuICAgICAgICBjb25zdCBkdXJhdGlvbjogbnVtYmVyID0gZS5ldmFsdWF0ZShcImR1cmF0aW9uXCIpO1xyXG4gICAgICAgIHJldHVybiBbIGludGVydmFsLCBkdXJhdGlvbiBdO1xyXG4gICAgfSwgdHJ1ZSk7XHJcblxyXG4gICAgcGFyc2VyLmRlZmluZVR5cGUoXCJ6LWRpc3RhbmNlXCIsIFwie3otZGlzdGFuY2U6ZmxvYXR9IG1pY3JvbnNcIiwgdW5kZWZpbmVkLCB0cnVlKTtcclxuXHJcbiAgICBwYXJzZXIuZGVmaW5lVHlwZShcImxlbnNcIiwgIFwiNXggbGVuc1wiLCB1bmRlZmluZWQpO1xyXG4gICAgcGFyc2VyLmRlZmluZVR5cGUoXCJsZW5zXCIsIFwiMjB4IGxlbnNcIiwgdW5kZWZpbmVkKTtcclxuXHJcbiAgICBwYXJzZXIuZGVmaW5lVHlwZShcIm1hZ1wiLCBcIjAuNXggbWFnbmlmaWNhdGlvbiBjaGFuZ2VyXCIsIHVuZGVmaW5lZCk7XHJcbiAgICBwYXJzZXIuZGVmaW5lVHlwZShcIm1hZ1wiLCBcIjEuMHggbWFnbmlmaWNhdGlvbiBjaGFuZ2VyXCIsIHVuZGVmaW5lZCk7XHJcbiAgICBwYXJzZXIuZGVmaW5lVHlwZShcIm1hZ1wiLCBcIjIuMHggbWFnbmlmaWNhdGlvbiBjaGFuZ2VyXCIsIHVuZGVmaW5lZCk7XHJcblxyXG4gICAgcGFyc2VyLmRlZmluZVR5cGUoXCJiaW5uaW5nXCIsIFwiMSB4IDFcIiwgX2UgPT4gMSk7XHJcbiAgICBwYXJzZXIuZGVmaW5lVHlwZShcImJpbm5pbmdcIiwgXCIyIHggMlwiLCBfZSA9PiAyKTtcclxuICAgIHBhcnNlci5kZWZpbmVUeXBlKFwiYmlubmluZ1wiLCBcIjQgeCA0XCIsIF9lID0+IDQpO1xyXG4gICAgcGFyc2VyLmRlZmluZVR5cGUoXCJiaW5uaW5nXCIsIFwiOCB4IDhcIiwgX2UgPT4gOCk7XHJcblxyXG4gICAgcGFyc2VyLmRlZmluZVR5cGUoXCJ0ZW1wZXJhdHVyZVwiLCBcInt0ZW1wZXJhdHVyZTpmbG9hdH1cXHUwMEIwQ1wiLCB1bmRlZmluZWQsIHRydWUpO1xyXG4gICAgcGFyc2VyLmRlZmluZVR5cGUoXCJjbzItY29uY2VudHJhdGlvblwiLCBcIntDTzIgY29uY2VudHJhdGlvbjpmbG9hdH0lXCIsIHVuZGVmaW5lZCwgdHJ1ZSk7XHJcblxyXG4gICAgcGFyc2VyLmRlZmluZVR5cGUoXCJpbmN1YmF0aW9uXCIsXHJcbiAgICAgICAgICAgIFwic2V0IHRoZSB0ZW1wZXJhdHVyZSB0byB7dGVtcGVyYXR1cmU6dGVtcGVyYXR1cmV9XCIsXHJcbiAgICAgICAgICAgIHVuZGVmaW5lZCk7XHJcblxyXG4gICAgcGFyc2VyLmRlZmluZVR5cGUoXCJpbmN1YmF0aW9uXCIsXHJcbiAgICAgICAgICAgIFwic2V0IHRoZSBDTzIgY29uY2VudHJhdGlvbiB0byB7Y28yLWNvbmNlbnRyYXRpb246Y28yLWNvbmNlbnRyYXRpb259XCIsXHJcbiAgICAgICAgICAgIHVuZGVmaW5lZCk7XHJcblxyXG4gICAgcGFyc2VyLmRlZmluZVR5cGUoXCJhY3F1aXNpdGlvblwiLFxyXG4gICAgICAgICAgICBcImFjcXVpcmUuLi5cIiArXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ7XFxuICB9ZXZlcnkge2ludGVydmFsOnRpbWUtaW50ZXJ2YWx9IGZvciB7ZHVyYXRpb246dGltZS1pbnRlcnZhbH1cIiArXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ7XFxuICB9cG9zaXRpb24ocykge3Bvc2l0aW9uczpsaXN0PGRlZmluZWQtcG9zaXRpb25zPn1cIiArXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ7XFxuICB9Y2hhbm5lbChzKSB7Y2hhbm5lbHM6bGlzdDxkZWZpbmVkLWNoYW5uZWxzPn1cIiArXHJcbiAgICAvL1x0XHRcdFx0XCJ7XFxuICB9d2l0aCBhIHJlc29sdXRpb24gb2Yge2R4OmZsb2F0fSB4IHtkeTpmbG9hdH0geCB7ZHo6ZmxvYXR9IG1pY3JvbnMuXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ7XFxuICB9d2l0aCBhIHBsYW5lIGRpc3RhbmNlIG9mIHtkejp6LWRpc3RhbmNlfVwiICtcclxuICAgICAgICAgICAgICAgICAgICBcIntcXG4gIH11c2luZyB0aGUge2xlbnM6bGVuc30gd2l0aCB0aGUge21hZ25pZmljYXRpb246bWFnfSBhbmQgYSBiaW5uaW5nIG9mIHtiaW5uaW5nOmJpbm5pbmd9XCIsXHJcbiAgICAgICAgICAgIHVuZGVmaW5lZCk7XHJcblxyXG5cclxuICAgIHBhcnNlci5kZWZpbmVUeXBlKFwic3RhcnRcIiwgXCJBdCB0aGUgYmVnaW5uaW5nXCIsICAgICAgICAgICAgdW5kZWZpbmVkKTtcclxuICAgIHBhcnNlci5kZWZpbmVUeXBlKFwic3RhcnRcIiwgXCJBdCB7dGltZTp0aW1lfVwiLCAgICAgICAgICAgICAgdW5kZWZpbmVkLCB0cnVlKTtcclxuICAgIHBhcnNlci5kZWZpbmVUeXBlKFwic3RhcnRcIiwgXCJBZnRlciB7ZGVsYXk6dGltZS1pbnRlcnZhbH1cIiwgdW5kZWZpbmVkLCB0cnVlKTtcclxuXHJcbiAgICBwYXJzZXIuZGVmaW5lU2VudGVuY2UoXCJ7c3RhcnQ6c3RhcnR9LCB7YWNxdWlzaXRpb246YWNxdWlzaXRpb259LlwiLCB1bmRlZmluZWQpO1xyXG5cclxuICAgIHBhcnNlci5kZWZpbmVTZW50ZW5jZShcIntzdGFydDpzdGFydH0sIHtpbmN1YmF0aW9uOmluY3ViYXRpb259LlwiLCB1bmRlZmluZWQpO1xyXG5cclxuICAgIHJldHVybiBwYXJzZXI7XHJcbn1cclxuIiwiZXhwb3J0IGNsYXNzIExFRCB7XHJcbiAgICByZWFkb25seSBXQVZFTEVOR1RIOiBudW1iZXI7XHJcblxyXG4gICAgc3RhdGljIHJlYWRvbmx5IExFRF8zODU6IExFRCA9IG5ldyBMRUQoMzg1KTtcclxuICAgIHN0YXRpYyByZWFkb25seSBMRURfNDcwOiBMRUQgPSBuZXcgTEVEKDQ3MCk7XHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgTEVEXzU2NzogTEVEID0gbmV3IExFRCg1NjcpO1xyXG4gICAgc3RhdGljIHJlYWRvbmx5IExFRF82MjU6IExFRCA9IG5ldyBMRUQoNjI1KTtcclxuICAgIFxyXG4gICAgcHJpdmF0ZSBjb25zdHJ1Y3Rvcih3YXZlbGVuZ3RoOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLldBVkVMRU5HVEggPSB3YXZlbGVuZ3RoO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgTEVEczogTEVEW10gPSBbXHJcbiAgICBMRUQuTEVEXzM4NSxcclxuICAgIExFRC5MRURfNDcwLFxyXG4gICAgTEVELkxFRF81NjcsXHJcbiAgICBMRUQuTEVEXzYyNVxyXG5dO1xyXG5cclxuZXhwb3J0IGNsYXNzIExFRFNldHRpbmcge1xyXG4gICAgcmVhZG9ubHkgbGVkOiBMRUQ7XHJcbiAgICBwcml2YXRlIGludGVuc2l0eTogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGxlZDogTEVELCBpbnRlbnNpdHk6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMubGVkID0gbGVkO1xyXG4gICAgICAgIHRoaXMuaW50ZW5zaXR5ID0gaW50ZW5zaXR5O1xyXG4gICAgfVxyXG5cclxuICAgIHNldEludGVuc2l0eShpbnRlbnNpdHk6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuaW50ZW5zaXR5ID0gaW50ZW5zaXR5O1xyXG4gICAgfVxyXG5cclxuICAgIGdldEludGVuc2l0eSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmludGVuc2l0eTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENoYW5uZWwge1xyXG4gICAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBsZWRTZXR0aW5nczogTEVEU2V0dGluZ1tdO1xyXG4gICAgcHJpdmF0ZSBleHBvc3VyZVRpbWU6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIGZpcnN0OiBMRURTZXR0aW5nLCByZW1haW5pbmc6IExFRFNldHRpbmdbXSwgZXhwb3N1cmVUaW1lOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMubGVkU2V0dGluZ3MgPSBbZmlyc3RdO1xyXG4gICAgICAgIHRoaXMubGVkU2V0dGluZ3MucHVzaCguLi5yZW1haW5pbmcpO1xyXG4gICAgICAgIHRoaXMuZXhwb3N1cmVUaW1lID0gZXhwb3N1cmVUaW1lO1xyXG4gICAgfVxyXG5cclxuICAgIGdldExFRFNldHRpbmcobGVkOiBMRUQpOiBMRURTZXR0aW5nIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5sZWRTZXR0aW5ncy5maW5kKCh2YWx1ZTogTEVEU2V0dGluZykgPT4gdmFsdWUubGVkLldBVkVMRU5HVEggPT09IGxlZC5XQVZFTEVOR1RIKVxyXG4gICAgfVxyXG5cclxuICAgIGdldEV4cG9zdXJlVGltZSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmV4cG9zdXJlVGltZTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRFeHBvc3VyZVRpbWUoZXhwb3N1cmVUaW1lOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmV4cG9zdXJlVGltZSA9IGV4cG9zdXJlVGltZTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIExlbnMge1xyXG4gICAgcmVhZG9ubHkgbWFnbmlmaWNhdGlvbjogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgbGFiZWw6IHN0cmluZztcclxuXHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgRklWRTogTGVucyA9IG5ldyBMZW5zKDUsIFwiNXhcIik7XHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgVFdFTlRZOiBMZW5zID0gbmV3IExlbnMoMjAsIFwiMjB4XCIpO1xyXG5cclxuICAgIHByaXZhdGUgY29uc3RydWN0b3IobWFnbmlmaWNhdGlvbjogbnVtYmVyLCBsYWJlbDogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5tYWduaWZpY2F0aW9uID0gbWFnbmlmaWNhdGlvbjtcclxuICAgICAgICB0aGlzLmxhYmVsID0gbGFiZWw7XHJcbiAgICB9XHJcblxyXG4gICAgdG9TdHJpbmcoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5sYWJlbDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IExFTlNFUzogTGVuc1tdID0gW1xyXG4gICAgTGVucy5GSVZFLFxyXG4gICAgTGVucy5UV0VOVFlcclxuXTtcclxuXHJcbmV4cG9ydCBjbGFzcyBNYWduaWZpY2F0aW9uQ2hhbmdlciB7XHJcbiAgICByZWFkb25seSBtYWduaWZpY2F0aW9uOiBudW1iZXI7XHJcbiAgICByZWFkb25seSBsYWJlbDogc3RyaW5nO1xyXG5cclxuICAgIHN0YXRpYyByZWFkb25seSBaRVJPX0ZJVkU6IE1hZ25pZmljYXRpb25DaGFuZ2VyID0gbmV3IE1hZ25pZmljYXRpb25DaGFuZ2VyKDAuNSwgXCIwLjV4XCIpO1xyXG4gICAgc3RhdGljIHJlYWRvbmx5IE9ORV9aRVJPOiAgTWFnbmlmaWNhdGlvbkNoYW5nZXIgPSBuZXcgTWFnbmlmaWNhdGlvbkNoYW5nZXIoMS4wLCBcIjEuMHhcIik7XHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgVFdPX1pFUk86ICBNYWduaWZpY2F0aW9uQ2hhbmdlciA9IG5ldyBNYWduaWZpY2F0aW9uQ2hhbmdlcigyLjAsIFwiMi4weFwiKTtcclxuXHJcbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKG1hZ25pZmljYXRpb246IG51bWJlciwgbGFiZWw6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMubWFnbmlmaWNhdGlvbiA9IG1hZ25pZmljYXRpb247XHJcbiAgICAgICAgdGhpcy5sYWJlbCA9IGxhYmVsO1xyXG4gICAgfVxyXG5cclxuICAgIHRvU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGFiZWw7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBNQUdOSUZJQ0FUSU9OX0NIQU5HRVMgPSBbXHJcbiAgICBNYWduaWZpY2F0aW9uQ2hhbmdlci5aRVJPX0ZJVkUsXHJcbiAgICBNYWduaWZpY2F0aW9uQ2hhbmdlci5PTkVfWkVSTyxcclxuICAgIE1hZ25pZmljYXRpb25DaGFuZ2VyLlRXT19aRVJPXHJcbl1cclxuXHJcbmV4cG9ydCBjbGFzcyBCaW5uaW5nIHtcclxuICAgIHJlYWRvbmx5IGJpbm5pbmc6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGxhYmVsOiBzdHJpbmc7XHJcblxyXG4gICAgc3RhdGljIHJlYWRvbmx5IE9ORTogICBCaW5uaW5nID0gbmV3IEJpbm5pbmcoMSwgXCIxeDFcIik7XHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgVFdPOiAgIEJpbm5pbmcgPSBuZXcgQmlubmluZygyLCBcIjJ4MlwiKTtcclxuICAgIHN0YXRpYyByZWFkb25seSBUSFJFRTogQmlubmluZyA9IG5ldyBCaW5uaW5nKDMsIFwiM3gzXCIpO1xyXG4gICAgc3RhdGljIHJlYWRvbmx5IEZPVVI6ICBCaW5uaW5nID0gbmV3IEJpbm5pbmcoNCwgXCI0eDRcIik7XHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgRklWRTogIEJpbm5pbmcgPSBuZXcgQmlubmluZyg1LCBcIjV4NVwiKTtcclxuXHJcbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKGJpbm5pbmc6IG51bWJlciwgbGFiZWw6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuYmlubmluZyA9IGJpbm5pbmc7XHJcbiAgICAgICAgdGhpcy5sYWJlbCA9IGxhYmVsO1xyXG4gICAgfVxyXG5cclxuICAgIHRvU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGFiZWw7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBUdXBsZTNEIHtcclxuICAgIHJlYWRvbmx5IHg6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHk6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHo6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih0OiBudW1iZXJbXSkge1xyXG4gICAgICAgIHRoaXMueCA9IHRbMF07XHJcbiAgICAgICAgdGhpcy55ID0gdFsxXTtcclxuICAgICAgICB0aGlzLnogPSB0WzJdO1xyXG4gICAgfVxyXG5cclxuICAgIHRvU3RyaW5nKCkgOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBcIihcIiArIHRoaXMueCArIFwiLCBcIiArIHRoaXMueSArIFwiLCBcIiArIHRoaXMueiArIFwiKVwiO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUG9zaXRpb24ge1xyXG4gICAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xyXG4gICAgcmVhZG9ubHkgY2VudGVyOiBUdXBsZTNEO1xyXG4gICAgcmVhZG9ubHkgZXh0ZW50OiBUdXBsZTNEO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgY2VudGVyOiBudW1iZXJbXSwgZXh0ZW50OiBudW1iZXJbXSkge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5jZW50ZXIgPSBuZXcgVHVwbGUzRChjZW50ZXIpO1xyXG4gICAgICAgIHRoaXMuZXh0ZW50ID0gbmV3IFR1cGxlM0QoZXh0ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICB0b1N0cmluZygpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5hbWUgKyBcIiBcIiArIHRoaXMuY2VudGVyLnRvU3RyaW5nKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIEluY3ViYXRpb24ge1xyXG4gICAgdGVtcGVyYXR1cmU6IG51bWJlciA9IDIwO1xyXG4gICAgY28yQ29uY2VudHJhdGlvbjogbnVtYmVyID0gMDtcclxuXHJcbiAgICBzZXRUZW1wZXJhdHVyZSh0ZW1wZXJhdHVyZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy50ZW1wZXJhdHVyZSA9IHRlbXBlcmF0dXJlO1xyXG4gICAgfVxyXG5cclxuICAgIHNldENPMkNvbmNlbnRyYXRpb24oY28yQ29uY2VudHJhdGlvbjogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jbzJDb25jZW50cmF0aW9uID0gY28yQ29uY2VudHJhdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICByZXNldCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnRlbXBlcmF0dXJlID0gMjA7XHJcbiAgICAgICAgdGhpcy5jbzJDb25jZW50cmF0aW9uID0gMDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEFMTF9DSEFOTkVMUzogc3RyaW5nID0gXCJBTExfQ0hBTk5FTFNcIjtcclxuZXhwb3J0IGNvbnN0IEFMTF9QT1NJVElPTlM6IHN0cmluZyA9IFwiQUxMX1BPU0lUSU9OU1wiO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBNaWNyb3Njb3BlIHtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgY2hhbm5lbHM6IENoYW5uZWxbXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBwb3NpdGlvbnM6IFBvc2l0aW9uW10gPSBbXTtcclxuXHJcbiAgICBwcml2YXRlIGxlbnM6IExlbnMgPSBMZW5zLkZJVkU7XHJcbiAgICBwcml2YXRlIG1hZ25pZmljYXRpb25DaGFuZ2VyOiBNYWduaWZpY2F0aW9uQ2hhbmdlciA9IE1hZ25pZmljYXRpb25DaGFuZ2VyLk9ORV9aRVJPO1xyXG4gICAgcHJpdmF0ZSBiaW5uaW5nOiBCaW5uaW5nID0gQmlubmluZy5PTkU7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGluY3ViYXRpb24gPSBuZXcgSW5jdWJhdGlvbigpO1xyXG5cclxuICAgIG9uQWNxdWlyZTogKHBvc2l0aW9uOiBQb3NpdGlvbiwgY2hhbm5lbDogQ2hhbm5lbCkgPT4gdm9pZCA9IHRoaXMuYWNxdWlyZVNpbmdsZVBvc2l0aW9uQW5kQ2hhbm5lbDtcclxuXHJcbiAgICByZXNldCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmNoYW5uZWxzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbnMubGVuZ3RoID0gMDtcclxuICAgICAgICB0aGlzLmxlbnMgPSBMZW5zLkZJVkU7XHJcbiAgICAgICAgdGhpcy5tYWduaWZpY2F0aW9uQ2hhbmdlciA9IE1hZ25pZmljYXRpb25DaGFuZ2VyLk9ORV9aRVJPO1xyXG4gICAgICAgIHRoaXMuYmlubmluZyA9IEJpbm5pbmcuT05FO1xyXG4gICAgICAgIHRoaXMuaW5jdWJhdGlvbi5yZXNldCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldE9uQWNxdWlyZShmdW5jOiAocG9zaXRpb246IFBvc2l0aW9uLCBjaGFubmVsOiBDaGFubmVsKSA9PiB2b2lkKSB7XHJcbiAgICAgICAgdGhpcy5vbkFjcXVpcmUgPSBmdW5jO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZENoYW5uZWwoY2hhbm5lbDogQ2hhbm5lbCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuY2hhbm5lbHMucHVzaChjaGFubmVsKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDaGFubmVsKG5hbWU6IHN0cmluZyk6IENoYW5uZWwgfCB1bmRlZmluZWQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNoYW5uZWxzLmZpbmQoKHZhbHVlOiBDaGFubmVsKSA9PiB2YWx1ZS5uYW1lID09PSBuYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBjbGVhckNoYW5uZWxzKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuY2hhbm5lbHMubGVuZ3RoID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBhZGRQb3NpdGlvbihwb3NpdGlvbjogUG9zaXRpb24pOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnBvc2l0aW9ucy5wdXNoKHBvc2l0aW9uKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRQb3NpdGlvbihuYW1lOiBzdHJpbmcpOiBQb3NpdGlvbiB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zaXRpb25zLmZpbmQoKHZhbHVlOiBQb3NpdGlvbikgPT4gdmFsdWUubmFtZSA9PT0gbmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJQb3NpdGlvbnMoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbnMubGVuZ3RoID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRUZW1wZXJhdHVyZSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmluY3ViYXRpb24udGVtcGVyYXR1cmU7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VGVtcGVyYXR1cmUodGVtcGVyYXR1cmU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuaW5jdWJhdGlvbi5zZXRUZW1wZXJhdHVyZSh0ZW1wZXJhdHVyZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q08yQ29uY2VudHJhdGlvbigpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmluY3ViYXRpb24uY28yQ29uY2VudHJhdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICBzZXRDTzJDb25jZW50cmF0aW9uKGNvMkNvbmNlbnRyYXRpb246IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuaW5jdWJhdGlvbi5zZXRDTzJDb25jZW50cmF0aW9uKGNvMkNvbmNlbnRyYXRpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldExlbnMoKTogTGVucyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGVucztcclxuICAgIH1cclxuXHJcbiAgICBzZXRMZW5zKGxlbnM6IExlbnMpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmxlbnMgPSBsZW5zO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE1hZ25pZmljYXRpb25DaGFuZ2VyKCk6IE1hZ25pZmljYXRpb25DaGFuZ2VyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tYWduaWZpY2F0aW9uQ2hhbmdlcjtcclxuICAgIH1cclxuXHJcbiAgICBzZXRNYWduaWZpY2F0aW9uQ2hhbmdlcihtYWc6IE1hZ25pZmljYXRpb25DaGFuZ2VyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5tYWduaWZpY2F0aW9uQ2hhbmdlciA9IG1hZztcclxuICAgIH1cclxuXHJcbiAgICBzZXRCaW5uaW5nKGJpbm5pbmc6IEJpbm5pbmcpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmJpbm5pbmcgPSBiaW5uaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIGFjcXVpcmUocG9zaXRpb25OYW1lczogc3RyaW5nW10sIGNoYW5uZWxOYW1lczogc3RyaW5nW10sIGR6OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBjaGFubmVsczogQ2hhbm5lbFtdID0gY2hhbm5lbE5hbWVzLmxlbmd0aCA+IDAgJiYgY2hhbm5lbE5hbWVzWzBdID09PSBBTExfQ0hBTk5FTFNcclxuICAgICAgICAgICAgPyB0aGlzLmNoYW5uZWxzXHJcbiAgICAgICAgICAgIDogY2hhbm5lbE5hbWVzLm1hcCgodmFsdWU6IHN0cmluZykgPT4gdGhpcy5nZXRDaGFubmVsKHZhbHVlKSkgYXMgQ2hhbm5lbFtdO1xyXG4gICAgXHJcbiAgICAgICAgY29uc3QgcG9zaXRpb25zOiBQb3NpdGlvbltdID0gcG9zaXRpb25OYW1lcy5sZW5ndGggPiAwICYmIHBvc2l0aW9uTmFtZXNbMF0gPT09IEFMTF9QT1NJVElPTlNcclxuICAgICAgICAgICAgPyB0aGlzLnBvc2l0aW9uc1xyXG4gICAgICAgICAgICA6IHBvc2l0aW9uTmFtZXMubWFwKCh2YWx1ZSkgPT4gdGhpcy5nZXRQb3NpdGlvbih2YWx1ZSkpIGFzIFBvc2l0aW9uW107XHJcbiAgICBcclxuICAgICAgICB0aGlzLmFjcXVpcmVQb3NpdGlvbnNBbmRDaGFubmVscyhwb3NpdGlvbnMsIGNoYW5uZWxzLCBkeik7XHJcbiAgICB9XHJcblxyXG4gICAgYWNxdWlyZVBvc2l0aW9uc0FuZENoYW5uZWxzKHBvc2l0aW9uczogUG9zaXRpb25bXSwgY2hhbm5lbHM6IENoYW5uZWxbXSwgX2R6OiBudW1iZXIpIHtcclxuICAgICAgICBmb3IoY29uc3QgcG9zaXRpb24gb2YgcG9zaXRpb25zKSB7XHJcbiAgICAgICAgICAgIGZvcihjb25zdCBjaGFubmVsIG9mIGNoYW5uZWxzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uQWNxdWlyZShwb3NpdGlvbiwgY2hhbm5lbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYWNxdWlyZVNpbmdsZVBvc2l0aW9uQW5kQ2hhbm5lbChwb3NpdGlvbjogUG9zaXRpb24sIGNoYW5uZWw6IENoYW5uZWwpIHtcclxuICAgICAgICBjb25zdCB0aW1lU3RhbXAgPSBuZXcgRGF0ZSgpLnRvTG9jYWxlU3RyaW5nKCdlbi11cycsIHt5ZWFyOiAnbnVtZXJpYycsIG1vbnRoOiAnc2hvcnQnLCBkYXk6ICdudW1lcmljJywgaG91cjEyOmZhbHNlLCBob3VyOidudW1lcmljJywgbWludXRlOidudW1lcmljJywgc2Vjb25kOidudW1lcmljJ30pO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHRpbWVTdGFtcCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCI9PT09PT09PT09PT09PT09PT09PT09XCIpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiU3RhZ2UgcG9zaXRpb246IFwiICsgcG9zaXRpb24ubmFtZSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCIgIC0gXCIgKyBwb3NpdGlvbi5jZW50ZXIudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIkNoYW5uZWwgc2V0dGluZ3M6IFwiICsgY2hhbm5lbC5uYW1lKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIiAgLSBFeHBvc3VyZSB0aW1lOiBcIiArIGNoYW5uZWwuZ2V0RXhwb3N1cmVUaW1lKCkgKyBcIm1zXCIpO1xyXG4gICAgICAgIGZvcihjb25zdCBsZWQgb2YgTEVEcykge1xyXG4gICAgICAgICAgICBjb25zdCBsZWRTZXR0aW5nOiBMRURTZXR0aW5nIHwgdW5kZWZpbmVkPSBjaGFubmVsLmdldExFRFNldHRpbmcobGVkKTtcclxuICAgICAgICAgICAgaWYobGVkU2V0dGluZyAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCIgIC0gTEVEIFwiICsgbGVkLldBVkVMRU5HVEggKyBcIjogXCIgKyBsZWRTZXR0aW5nLmdldEludGVuc2l0eSgpICsgXCIlXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLmxvZygpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiT3B0aWNzOlwiKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIiAgLSBMZW5zOiBcIiArIHRoaXMubGVucyk7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCIgIC0gTWFnLkNoYW5nZXI6IFwiICsgdGhpcy5tYWduaWZpY2F0aW9uQ2hhbmdlcik7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCIgIC0gQmlubmluZzogXCIgKyB0aGlzLmJpbm5pbmcpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJJbmN1YmF0aW9uOlwiKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIiAgLSBUZW1wZXJhdHVyZTogXCIgKyB0aGlzLmdldFRlbXBlcmF0dXJlKCkgKyBcIkNcIik7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCIgIC0gQ08yIGNvbmNlbnRyYXRpb246IFwiICsgdGhpcy5nZXRDTzJDb25jZW50cmF0aW9uKCkgKyBcIiVcIik7XHJcbiAgICAgICAgY29uc29sZS5sb2coKTsgICAgXHJcbiAgICAgICAgY29uc29sZS5sb2coXCJBY3F1aXJlIHN0YWNrXCIpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coKTtcclxuICAgIH1cclxufSIsImV4cG9ydCBjbGFzcyBUaW1lbGluZTxFPiB7XHJcbiAgICBcclxuICAgIHByaXZhdGUgdGltZWxpbmU6IEFycmF5PFtEYXRlLCBFW11dPiA9IFtdO1xyXG4gICAgcHJpdmF0ZSBzdG9wOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIGV4ZWN1dG9yOiBQcm9taXNlPHZvaWQ+IHwgbnVsbCA9IG51bGw7XHJcbiAgXHJcbiAgICBwdWJsaWMgcHV0KHRpbWU6IERhdGUsIGVudHJ5OiBFKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy50aW1lbGluZS5wdXNoKFt0aW1lLCBbZW50cnldXSk7XHJcbiAgICAgICAgdGhpcy50aW1lbGluZS5zb3J0KChhLCBiKSA9PiBhWzBdLmdldFRpbWUoKSAtIGJbMF0uZ2V0VGltZSgpKTtcclxuICAgIH1cclxuICBcclxuICAgIHB1YmxpYyBydW5BbmRSZW1vdmVFbnRyaWVzQmVmb3JlKHRpbWU6IERhdGUsIGZ1bmM6IChlbnRyeTogRSkgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHRpbWVzVG9SZW1vdmU6IERhdGVbXSA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy50aW1lbGluZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBbZW50cnlUaW1lLCBlbnRyaWVzXSA9IHRoaXMudGltZWxpbmVbaV07XHJcbiAgICAgICAgICAgIGlmIChlbnRyeVRpbWUgPCB0aW1lKSB7XHJcbiAgICAgICAgICAgICAgICB0aW1lc1RvUmVtb3ZlLnB1c2goZW50cnlUaW1lKTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmMoZW50cnkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgXHJcbiAgICAgICAgZm9yIChjb25zdCB0aW1lVG9SZW1vdmUgb2YgdGltZXNUb1JlbW92ZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMudGltZWxpbmUuZmluZEluZGV4KChba2V5XSkgPT4ga2V5ID09PSB0aW1lVG9SZW1vdmUpO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWVsaW5lLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgXHJcbiAgICBwdWJsaWMgYXN5bmMgcHJvY2VzcyhmdW5jOiAoZW50cnk6IEUpID0+IHZvaWQpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICB0aGlzLnN0b3AgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmV4ZWN1dG9yID0gbmV3IFByb21pc2U8dm9pZD4oYXN5bmMgKHJlc29sdmUpID0+IHtcclxuICAgICAgICAgICAgd2hpbGUgKCF0aGlzLnN0b3AgJiYgdGhpcy50aW1lbGluZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJ1bkFuZFJlbW92ZUVudHJpZXNCZWZvcmUobmV3IERhdGUoKSwgZnVuYyk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50aW1lbGluZS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTAwMCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICB9KTtcclxuICBcclxuICAgICAgICBhd2FpdCB0aGlzLmV4ZWN1dG9yO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgcHVibGljIGFzeW5jIHdhaXRGb3JQcm9jZXNzaW5nKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGlmICh0aGlzLmV4ZWN1dG9yKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZXhlY3V0b3I7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gIFxyXG4gICAgcHVibGljIGNhbmNlbCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnN0b3AgPSB0cnVlO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgcHVibGljIGNsZWFyKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudGltZWxpbmUgPSBbXTtcclxuICAgIH1cclxuICBcclxuICAgIHB1YmxpYyB0b1N0cmluZygpOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCBzYiA9ICcnO1xyXG4gICAgICAgIGZvciAoY29uc3QgW3QsIGVudHJpZXNdIG9mIHRoaXMudGltZWxpbmUpIHtcclxuICAgICAgICAgICAgc2IgKz0gdCArICcgLT4gJyArIGVudHJpZXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzYjtcclxuICAgIH1cclxufVxyXG4gICIsImV4cG9ydCAqIGZyb20gXCIuL0xhbmd1YWdlQ29udHJvbC5qc1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9NaWNyb3Njb3BlLmpzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL1RpbWVsaW5lLmpzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL0ludGVycG9sYXRvci5qc1wiOyIsImltcG9ydCB7IEF1dG9jb21wbGV0aW9uIH0gZnJvbSBcIi4uL2NvcmUvQXV0b2NvbXBsZXRpb24uanNcIjtcclxuaW1wb3J0IHsgQ29tcGxldGlvbkNvbnRleHQsIENvbXBsZXRpb24sIENvbXBsZXRpb25SZXN1bHQsIGF1dG9jb21wbGV0aW9uLCBzZWxlY3RlZENvbXBsZXRpb24sICBzdGFydENvbXBsZXRpb24sIGNvbXBsZXRpb25TdGF0dXMsIGN1cnJlbnRDb21wbGV0aW9ucywgbW92ZUNvbXBsZXRpb25TZWxlY3Rpb24sIGNsb3NlQ29tcGxldGlvbiB9IGZyb20gXCJAY29kZW1pcnJvci9hdXRvY29tcGxldGVcIjtcclxuaW1wb3J0IHsgRXh0ZW5zaW9uLCBFZGl0b3JTdGF0ZSB9IGZyb20gXCJAY29kZW1pcnJvci9zdGF0ZVwiO1xyXG5pbXBvcnQgeyBFZGl0b3JWaWV3IH0gZnJvbSBcIkBjb2RlbWlycm9yL3ZpZXdcIjtcclxuXHJcbmZ1bmN0aW9uIHJlbmRlcihjb21wbGV0aW9uOiBDb21wbGV0aW9uLCBfc3RhdGU6IEVkaXRvclN0YXRlKTogTm9kZSB8IG51bGwge1xyXG4gICAgbGV0IHRleHQ6IHN0cmluZyA9IGNvbXBsZXRpb24uYXBwbHkgPyBjb21wbGV0aW9uLmFwcGx5IGFzIHN0cmluZyA6IGNvbXBsZXRpb24ubGFiZWw7XHJcblxyXG4gICAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcclxuICAgIGVsLmlubmVySFRNTCA9IHRleHQ7XHJcblxyXG4gICAgY29tcGxldGlvbi5sYWJlbCA9IFwiXCI7XHJcbiAgICByZXR1cm4gZWw7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGlzIGNsYXNzIGNvcnJlc3BvbmRzIHRvIHRoZSBQeXRob24gTXlDb21wbGV0ZXIgY2xhc3MuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQUNDb21wbGV0ZXIge1xyXG5cclxuICAgIHByaXZhdGUgY29tcGxldGlvbnM6IEF1dG9jb21wbGV0aW9uW10gPSBbXTtcclxuXHJcbiAgICByZWFkb25seSBhdXRvY29tcGxldGlvbkV4dGVuc2lvbjogRXh0ZW5zaW9uO1xyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgdmlldzogRWRpdG9yVmlldztcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih2aWV3OiBFZGl0b3JWaWV3KSB7XHJcbiAgICAgICAgdGhpcy52aWV3ID0gdmlldztcclxuICAgICAgICBjb25zdCBnZXRDb21wbGV0aW9uc0ZuID0gKGM6IENvbXBsZXRpb25Db250ZXh0KSA9PiB0aGlzLmdldENvbXBsZXRpb25zKGMpO1xyXG4gICAgICAgIHRoaXMuYXV0b2NvbXBsZXRpb25FeHRlbnNpb24gPSBhdXRvY29tcGxldGlvbih7XHJcbiAgICAgICAgICAgIGFjdGl2YXRlT25UeXBpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICBkZWZhdWx0S2V5bWFwOiBmYWxzZSxcclxuICAgICAgICAgICAgaW50ZXJhY3Rpb25EZWxheTogMCxcclxuICAgICAgICAgICAgY2xvc2VPbkJsdXI6IGZhbHNlLFxyXG4gICAgICAgICAgICBvdmVycmlkZTogW2dldENvbXBsZXRpb25zRm5dLFxyXG4gICAgICAgICAgICBhZGRUb09wdGlvbnM6IFt7XHJcbiAgICAgICAgICAgICAgICByZW5kZXI6IHJlbmRlcixcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAwXHJcbiAgICAgICAgICAgIH1dXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2VsZWN0TmV4dCgpOiB2b2lkIHtcclxuICAgICAgICBtb3ZlQ29tcGxldGlvblNlbGVjdGlvbih0cnVlKSh0aGlzLnZpZXcpO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbGVjdFByZXZpb3VzKCk6IHZvaWQge1xyXG4gICAgICAgIG1vdmVDb21wbGV0aW9uU2VsZWN0aW9uKGZhbHNlKSh0aGlzLnZpZXcpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldENvbXBsZXRpb25zKGNvbXBsZXRpb25zOiBBdXRvY29tcGxldGlvbltdKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jb21wbGV0aW9ucyA9IGNvbXBsZXRpb25zO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFNlbGVjdGVkKCk6IEF1dG9jb21wbGV0aW9uIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICBjb25zdCByZXQgPSBzZWxlY3RlZENvbXBsZXRpb24odGhpcy52aWV3LnN0YXRlKTtcclxuICAgICAgICBpZihyZXQgPT09IG51bGwpXHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgIGNvbnN0IGlkeDogbnVtYmVyID0gY3VycmVudENvbXBsZXRpb25zKHRoaXMudmlldy5zdGF0ZSkuaW5kZXhPZihyZXQpO1xyXG4gICAgICAgIGlmKGlkeCA8IDApXHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWRcclxuXHJcbiAgICAgICAgcmV0dXJuIHJldCA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IHRoaXMuY29tcGxldGlvbnNbaWR4XTtcclxuICAgIH1cclxuXHJcbiAgICBjb21wbGV0aW9uUHJlZml4KCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGlvbnNbMF0uZ2V0QWxyZWFkeUVudGVyZWQoKTtcclxuICAgIH1cclxuXHJcbiAgICBoaWRlUG9wdXAoKTogdm9pZCB7XHJcbiAgICAgICAgY2xvc2VDb21wbGV0aW9uKHRoaXMudmlldyk7XHJcbiAgICB9XHJcblxyXG4gICAgY29tcGxldGUoKTogdm9pZCB7XHJcbiAgICAgICAgc3RhcnRDb21wbGV0aW9uKHRoaXMudmlldyk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNBY3RpdmUoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIGNvbXBsZXRpb25TdGF0dXModGhpcy52aWV3LnN0YXRlKSAhPT0gbnVsbCAmJiBjdXJyZW50Q29tcGxldGlvbnModGhpcy52aWV3LnN0YXRlKS5sZW5ndGggPiAxO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0Q29tcGxldGlvbnMoY29udGV4dDogQ29tcGxldGlvbkNvbnRleHQpOiBDb21wbGV0aW9uUmVzdWx0IHtcclxuICAgICAgICBsZXQgYWxyZWFkeUVudGVyZWRMZW5ndGg6IG51bWJlciB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcclxuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5jb21wbGV0aW9ucy5tYXAoKGE6IEF1dG9jb21wbGV0aW9uKSA9PiB7XHJcbiAgICAgICAgICAgIGlmKGFscmVhZHlFbnRlcmVkTGVuZ3RoID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICBhbHJlYWR5RW50ZXJlZExlbmd0aCA9IGEuZ2V0QWxyZWFkeUVudGVyZWQoKS5sZW5ndGg7XHJcbiAgICAgICAgICAgIGxldCBhcHBseSA9IGEuZ2V0Q29tcGxldGlvbihBdXRvY29tcGxldGlvbi5QdXJwb3NlLkZPUl9NRU5VKTtcclxuICAgICAgICAgICAgbGV0IGNvbXBsZXRpb246IHN0cmluZyA9IGFwcGx5O1xyXG5cclxuICAgICAgICAgICAgYXBwbHkgPSBhcHBseS5yZXBsYWNlQWxsKFwiJHtcIiwgXCI8Yj5cIikucmVwbGFjZUFsbChcIn1cIiwgXCI8L2I+XCIpO1xyXG5cclxuICAgICAgICAgICAgLy8gY29uc3QgcGFyc2VkUGFyYW1zOiBQYXJzZWRQYXJhbVtdID0gW107XHJcbiAgICAgICAgICAgIC8vIGNvbnN0IGluc2VydGlvblN0cmluZzogc3RyaW5nID0gUGFyYW1ldGVyaXplZENvbXBsZXRpb24ucGFyc2VQYXJhbWV0ZXJzKGEsIHBhcnNlZFBhcmFtcyk7XHJcbiAgICAgICAgICAgIC8vIGlmKHBhcnNlZFBhcmFtcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIC8vICAgICBsZXQgc2IgPSBpbnNlcnRpb25TdHJpbmc7XHJcbiAgICAgICAgICAgIC8vICAgICBmb3IobGV0IGkgPSBwYXJzZWRQYXJhbXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgLy8gICAgICAgICBsZXQgcGFyYW06IFBhcnNlZFBhcmFtID0gcGFyc2VkUGFyYW1zW2ldO1xyXG4gICAgICAgICAgICAvLyAgICAgICAgIHNiID0gc2Iuc3Vic3RyaW5nKDAsIHBhcmFtLmkxKSArIFwiPC9iPlwiICsgc2Iuc3Vic3RyaW5nKHBhcmFtLmkxKTtcclxuICAgICAgICAgICAgLy8gICAgICAgICBzYiA9IHNiLnN1YnN0cmluZygwLCBwYXJhbS5pMCkgKyBcIjxiPlwiICsgc2Iuc3Vic3RyaW5nKHBhcmFtLmkwKTtcclxuICAgICAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAgICAgLy8gICAgIGFwcGx5ID0gc2I7XHJcbiAgICAgICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgICAgIGlmKGFwcGx5LnN0YXJ0c1dpdGgoXCJcXG5cIikgfHwgYXBwbHkuc3RhcnRzV2l0aChcIlxcclwiKSlcclxuICAgICAgICAgICAgICAgIGFwcGx5ID0gXCImbHQ7bmV3IGxpbmUmZ3Q7XCI7XHJcbiAgICAgICAgICAgIGlmKGFwcGx5ID09PSBcIlwiKVxyXG4gICAgICAgICAgICAgICAgYXBwbHkgPSBcIiZsdDtlbXB0eSZndDtcIjtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB7IGxhYmVsOiBjb21wbGV0aW9uLCBhcHBseTogYXBwbHkgfTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZihhbHJlYWR5RW50ZXJlZExlbmd0aCA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICBhbHJlYWR5RW50ZXJlZExlbmd0aCA9IDA7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGZyb206IGNvbnRleHQucG9zIC0gYWxyZWFkeUVudGVyZWRMZW5ndGgsXHJcbiAgICAgICAgICAgIGZpbHRlcjogZmFsc2UsXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnNcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IGhpZ2hsaWdodF9leHRlbnNpb24sIFBhcmFtZXRlcml6ZWRDb21wbGV0aW9uLCBQYXJzZWRQYXJhbSB9IGZyb20gXCIuL1BhcmFtZXRlcml6ZWRDb21wbGV0aW9uLmpzXCI7XHJcbmltcG9ydCB7IGVycm9yX2hpZ2hsaWdodF9leHRlbnNpb24sIEVycm9ySGlnaGxpZ2h0IH0gZnJvbSBcIi4vRXJyb3JIaWdobGlnaHQuanNcIjtcclxuaW1wb3J0IHsgU3RhdGVFZmZlY3QgfSBmcm9tIFwiQGNvZGVtaXJyb3Ivc3RhdGVcIjtcclxuaW1wb3J0IHsgUGFyc2VyIH0gZnJvbSBcIi4uL1BhcnNlci5qc1wiO1xyXG5pbXBvcnQgeyBQYXJzZWROb2RlIH0gZnJvbSBcIi4uL1BhcnNlZE5vZGUuanNcIjtcclxuaW1wb3J0IHsgQXV0b2NvbXBsZXRpb24gfSBmcm9tIFwiLi4vY29yZS9BdXRvY29tcGxldGlvbi5qc1wiO1xyXG5pbXBvcnQgeyBBQ0NvbXBsZXRlciB9IGZyb20gXCIuL0FDQ29tcGxldGVyLmpzXCI7XHJcbmltcG9ydCB7IFBhcnNlRXhjZXB0aW9uIH0gZnJvbSBcIi4uL1BhcnNlRXhjZXB0aW9uLmpzXCI7XHJcbmltcG9ydCB7IE1hdGNoZXIgfSBmcm9tIFwiLi4vY29yZS9NYXRjaGVyLmpzXCI7XHJcbmltcG9ydCB7IEJORiB9IGZyb20gXCIuLi9jb3JlL0JORi5qc1wiO1xyXG5pbXBvcnQgeyBTeW0gfSBmcm9tIFwiLi4vY29yZS9TeW1ib2wuanNcIjtcclxuaW1wb3J0IHsgTm9uVGVybWluYWwgfSBmcm9tIFwiLi4vY29yZS9Ob25UZXJtaW5hbC5qc1wiO1xyXG5cclxuaW1wb3J0IHtrZXltYXAsIGhpZ2hsaWdodFNwZWNpYWxDaGFycywgZHJhd1NlbGVjdGlvbiwgaGlnaGxpZ2h0QWN0aXZlTGluZSwgZHJvcEN1cnNvcixcclxuICAgIHJlY3Rhbmd1bGFyU2VsZWN0aW9uLCBjcm9zc2hhaXJDdXJzb3IsXHJcbiAgICBsaW5lTnVtYmVycywgaGlnaGxpZ2h0QWN0aXZlTGluZUd1dHRlciwgRWRpdG9yVmlld30gZnJvbSBcIkBjb2RlbWlycm9yL3ZpZXdcIlxyXG5pbXBvcnQge0V4dGVuc2lvbiwgRWRpdG9yU3RhdGV9IGZyb20gXCJAY29kZW1pcnJvci9zdGF0ZVwiXHJcbmltcG9ydCB7ZGVmYXVsdEhpZ2hsaWdodFN0eWxlLCBzeW50YXhIaWdobGlnaHRpbmcsIGluZGVudE9uSW5wdXQsIGJyYWNrZXRNYXRjaGluZyxcclxuICAgIGZvbGRHdXR0ZXIsIGZvbGRLZXltYXB9IGZyb20gXCJAY29kZW1pcnJvci9sYW5ndWFnZVwiXHJcbmltcG9ydCB7ZGVmYXVsdEtleW1hcCwgaGlzdG9yeSwgaGlzdG9yeUtleW1hcH0gZnJvbSBcIkBjb2RlbWlycm9yL2NvbW1hbmRzXCJcclxuaW1wb3J0IHtzZWFyY2hLZXltYXB9IGZyb20gXCJAY29kZW1pcnJvci9zZWFyY2hcIlxyXG5pbXBvcnQge2F1dG9jb21wbGV0aW9uLCBjb21wbGV0aW9uS2V5bWFwLCBjbG9zZUJyYWNrZXRzLCBjbG9zZUJyYWNrZXRzS2V5bWFwfSBmcm9tIFwiQGNvZGVtaXJyb3IvYXV0b2NvbXBsZXRlXCJcclxuaW1wb3J0IHtsaW50S2V5bWFwfSBmcm9tIFwiQGNvZGVtaXJyb3IvbGludFwiXHJcblxyXG5cclxuY29uc3QgYmFzaWNTZXR1cDogRXh0ZW5zaW9uID0gKCgpID0+IFtcclxuICAgIGxpbmVOdW1iZXJzKCksXHJcbiAgICBoaWdobGlnaHRBY3RpdmVMaW5lR3V0dGVyKCksXHJcbiAgICBoaWdobGlnaHRTcGVjaWFsQ2hhcnMoKSxcclxuICAgIGhpc3RvcnkoKSxcclxuICAgIGZvbGRHdXR0ZXIoKSxcclxuICAgIGRyYXdTZWxlY3Rpb24oKSxcclxuICAgIGRyb3BDdXJzb3IoKSxcclxuICAgIEVkaXRvclN0YXRlLmFsbG93TXVsdGlwbGVTZWxlY3Rpb25zLm9mKHRydWUpLFxyXG4gICAgaW5kZW50T25JbnB1dCgpLFxyXG4gICAgc3ludGF4SGlnaGxpZ2h0aW5nKGRlZmF1bHRIaWdobGlnaHRTdHlsZSwge2ZhbGxiYWNrOiB0cnVlfSksXHJcbiAgICBicmFja2V0TWF0Y2hpbmcoKSxcclxuICAgIGNsb3NlQnJhY2tldHMoKSxcclxuICAgIGF1dG9jb21wbGV0aW9uKCksXHJcbiAgICByZWN0YW5ndWxhclNlbGVjdGlvbigpLFxyXG4gICAgY3Jvc3NoYWlyQ3Vyc29yKCksXHJcbiAgICBoaWdobGlnaHRBY3RpdmVMaW5lKCksXHJcbiAgICAvLyBoaWdobGlnaHRTZWxlY3Rpb25NYXRjaGVzKCksXHJcbiAgICBrZXltYXAub2YoW1xyXG4gICAgICAuLi5jbG9zZUJyYWNrZXRzS2V5bWFwLFxyXG4gICAgICAuLi5kZWZhdWx0S2V5bWFwLFxyXG4gICAgICAuLi5zZWFyY2hLZXltYXAsXHJcbiAgICAgIC4uLmhpc3RvcnlLZXltYXAsXHJcbiAgICAgIC4uLmZvbGRLZXltYXAsXHJcbiAgICAgIC4uLmNvbXBsZXRpb25LZXltYXAsXHJcbiAgICAgIC4uLmxpbnRLZXltYXBcclxuICAgIF0pXHJcbiAgXSkoKVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBBQ0VkaXRvciB7XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBlZGl0b3I6IEVkaXRvclZpZXc7XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBwYXJzZXI6IFBhcnNlcjtcclxuXHJcbiAgICBwcml2YXRlIHBhcmFtZXRlcml6ZWRDb21wbGV0aW9uPzogUGFyYW1ldGVyaXplZENvbXBsZXRpb24gPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBlcnJvckhpZ2hsaWdodD86IEVycm9ySGlnaGxpZ2h0ID0gdW5kZWZpbmVkO1xyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgb3V0cHV0RWxlbWVudDogSFRNTEVsZW1lbnQ7XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBjb21wbGV0ZXI6IEFDQ29tcGxldGVyO1xyXG5cclxuICAgIHByaXZhdGUgb25SdW46ICgpID0+IHZvaWQgPSAoKSA9PiB0aGlzLnJ1bigpO1xyXG5cclxuICAgIHByaXZhdGUgYmVmb3JlUnVuOiAoKSA9PiB2b2lkID0gKCkgPT4ge307XHJcblxyXG4gICAgcHJpdmF0ZSBhZnRlclJ1bjogKCkgPT4gdm9pZCA9ICgpID0+IHt9O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHBhcnNlcjogUGFyc2VyLCBwYXJlbnQ6IEhUTUxFbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy5wYXJzZXIgPSBwYXJzZXI7XHJcbiAgICAgICAgY29uc3QgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgY29uc3QgZWRpdG9yRWxlbWVudCA9IHRoaXMuY3JlYXRlRWRpdG9yRWxlbWVudChwYXJlbnQpO1xyXG4gICAgICAgIHRoaXMub3V0cHV0RWxlbWVudCA9IHRoaXMuY3JlYXRlT3V0cHV0RWxlbWVudChwYXJlbnQpO1xyXG4gICAgICAgIGNvbnN0IHJ1bkJ1dHRvbiA9IHRoaXMuY3JlYXRlQnV0dG9uKHBhcmVudCk7XHJcbiAgICAgICAgcnVuQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB0aGF0Lm9uUnVuKCk7XHJcbiAgICAgICAgdGhpcy5lZGl0b3IgPSBuZXcgRWRpdG9yVmlldyh7XHJcbiAgICAgICAgICAgIGV4dGVuc2lvbnM6IFtdLFxyXG4gICAgICAgICAgICBwYXJlbnQ6IGVkaXRvckVsZW1lbnRcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmVycm9ySGlnaGxpZ2h0ID0gbmV3IEVycm9ySGlnaGxpZ2h0KHRoaXMuZWRpdG9yKTtcclxuICAgICAgICB0aGlzLmNvbXBsZXRlciA9IG5ldyBBQ0NvbXBsZXRlcih0aGlzLmVkaXRvcik7XHJcbiAgICAgICAgdGhpcy5lZGl0b3IuZGlzcGF0Y2goe1xyXG4gICAgICAgICAgICBlZmZlY3RzOiBTdGF0ZUVmZmVjdC5yZWNvbmZpZ3VyZS5vZihbXHJcbiAgICAgICAgICAgICAgICBFZGl0b3JWaWV3LmRvbUV2ZW50SGFuZGxlcnMoe1xyXG4gICAgICAgICAgICAgICAgICAgIGtleWRvd246IChlOiBLZXlib2FyZEV2ZW50LCB2aWV3OiBFZGl0b3JWaWV3KSA9PiB0aGF0LmhhbmRsZUtleUV2ZW50KGUsIHZpZXcpLFxyXG4gICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBsZXRlci5hdXRvY29tcGxldGlvbkV4dGVuc2lvbixcclxuICAgICAgICAgICAgICAgIGJhc2ljU2V0dXAsXHJcbiAgICAgICAgICAgICAgICBFZGl0b3JWaWV3LmxpbmVXcmFwcGluZyxcclxuICAgICAgICAgICAgICAgIGhpZ2hsaWdodF9leHRlbnNpb24sXHJcbiAgICAgICAgICAgICAgICBlcnJvcl9oaWdobGlnaHRfZXh0ZW5zaW9uLFxyXG4gICAgICAgICAgICBdKSxcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBlZGl0b3IuZGlzcGF0Y2goZWRpdG9yLnN0YXRlLnJlcGxhY2VTZWxlY3Rpb24oXCJoYWhhaGFoYWhhaCBcIikpO1xyXG4gICAgICAgIC8vIGVkaXRvci5kaXNwYXRjaCh7c2VsZWN0aW9uOiB7YW5jaG9yOiA4LCBoZWFkOiAxMX19KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRTZWxlY3RlZExpbmVzU3RhcnQoKTogbnVtYmVyIHtcclxuICAgICAgICBjb25zdCBzZWxGcm9tOiBudW1iZXIgPSB0aGlzLmVkaXRvci5zdGF0ZS5zZWxlY3Rpb24ubWFpbi5mcm9tO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVkaXRvci5zdGF0ZS5kb2MubGluZUF0KHNlbEZyb20pLmZyb207XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U2VsZWN0ZWRMaW5lc0VuZCgpOiBudW1iZXIge1xyXG4gICAgICAgIGNvbnN0IHNlbFRvOiBudW1iZXIgPSB0aGlzLmVkaXRvci5zdGF0ZS5zZWxlY3Rpb24ubWFpbi50bztcclxuICAgICAgICByZXR1cm4gdGhpcy5lZGl0b3Iuc3RhdGUuZG9jLmxpbmVBdChzZWxUbykudG87XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U2VsZWN0ZWRMaW5lcygpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IGZyb206IG51bWJlciA9IHRoaXMuZ2V0U2VsZWN0ZWRMaW5lc1N0YXJ0KCk7XHJcbiAgICAgICAgY29uc3QgdG86IG51bWJlciA9IHRoaXMuZ2V0U2VsZWN0ZWRMaW5lc0VuZCgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVkaXRvci5zdGF0ZS5zbGljZURvYyhmcm9tLCB0byk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0T25SdW4ob25SdW46ICgpID0+IHZvaWQpIHtcclxuICAgICAgICB0aGlzLm9uUnVuID0gb25SdW47XHJcbiAgICB9XHJcblxyXG4gICAgc2V0QmVmb3JlUnVuKGJlZm9yZVJ1bjogKCkgPT4gdm9pZCkge1xyXG4gICAgICAgIHRoaXMuYmVmb3JlUnVuID0gYmVmb3JlUnVuO1xyXG4gICAgfVxyXG5cclxuICAgIHNldEFmdGVyUnVuKGFmdGVyUnVuOiAoKSA9PiB2b2lkKSB7XHJcbiAgICAgICAgdGhpcy5hZnRlclJ1biA9IGFmdGVyUnVuO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY3JlYXRlRWRpdG9yRWxlbWVudChwYXJlbnQ6IEhUTUxFbGVtZW50KTogSFRNTEVsZW1lbnQge1xyXG4gICAgICAgIGNvbnN0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBlbC5pZCA9IFwibmxzLWVkaXRvclwiO1xyXG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZShcInN0eWxlXCIsIFwid2lkdGg6IDEwMCU7IGhlaWdodDogMzAwcHg7IG1hcmdpbi1ib3R0b206IDNweDsgYm9yZGVyOiAxcHggc29saWQgZ3JheTsgZmxleC1ncm93OiAzOyBvdmVyZmxvdzogYXV0bztcIik7XHJcbiAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKGVsKTtcclxuICAgICAgICByZXR1cm4gZWw7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjcmVhdGVPdXRwdXRFbGVtZW50KHBhcmVudDogSFRNTEVsZW1lbnQpOiBIVE1MRWxlbWVudCB7XHJcbiAgICAgICAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIik7XHJcbiAgICAgICAgZWwuaWQgPSBcIm5scy1vdXRwdXRcIjtcclxuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLCBcIndpZHRoOiAxMDAlOyBoZWlnaHQ6IDEwMHB4OyBtYXJnaW4tdG9wOiAzcHg7IGJvcmRlcjogMXB4IHNvbGlkIGdyYXk7IGZsZXgtZ3JvdzogMjsgcGFkZGluZzogMHB4OyByZXNpemU6IG5vbmU7IG92ZXJmbG93OiBhdXRvO1wiKTtcclxuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoXCJyZWFkb25seVwiLCBcInRydWVcIik7XHJcbiAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKGVsKTtcclxuICAgICAgICByZXR1cm4gZWw7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjcmVhdGVCdXR0b24ocGFyZW50OiBIVE1MRWxlbWVudCk6IEhUTUxFbGVtZW50IHtcclxuICAgICAgICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XHJcbiAgICAgICAgZWwuaWQgPSBcIm5scy1ydW5cIjtcclxuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLCBcIm1hcmdpbi10b3A6IDEwcHg7IG1hcmdpbi1sZWZ0OiBhdXRvOyBtYXJnaW4tcmlnaHQ6IGF1dG87IGRpc3BsYXk6IGJsb2NrOyBtYXJnaW4tYm90dG9tOiAxMHB4O1wiKTtcclxuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwiYnV0dG9uXCIpO1xyXG4gICAgICAgIGVsLmlubmVyVGV4dCA9IFwiUnVuXCI7XHJcbiAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKGVsKTtcclxuICAgICAgICByZXR1cm4gZWw7XHJcbiAgICB9XHJcblxyXG4gICAgcnVuKHNlbGVjdGVkTGluZXNPbmx5OiBib29sZWFuID0gZmFsc2UpOiB2b2lkIHtcclxuICAgICAgICBjb25zb2xlLmRlYnVnKFwicnVubmluZ1wiKTtcclxuICAgICAgICB0aGlzLm91dHB1dEVsZW1lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xyXG4gICAgICAgIGNvbnN0IGVudGlyZVRleHQ6IHN0cmluZyA9IHRoaXMuZWRpdG9yLnN0YXRlLmRvYy50b1N0cmluZygpO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHRoaXMuYmVmb3JlUnVuKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRleHRUb0V2YWx1YXRlOiBzdHJpbmcgPSBzZWxlY3RlZExpbmVzT25seSA/IHRoaXMuZ2V0U2VsZWN0ZWRMaW5lcygpIDogZW50aXJlVGV4dDtcclxuICAgICAgICAgICAgY29uc3QgcG46IFBhcnNlZE5vZGUgPSB0aGlzLnBhcnNlci5wYXJzZSh0ZXh0VG9FdmFsdWF0ZSk7XHJcbiAgICAgICAgICAgIHBuLmV2YWx1YXRlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYWZ0ZXJSdW4oKTtcclxuICAgICAgICB9IGNhdGNoKGU6IGFueSkge1xyXG4gICAgICAgICAgICBpZihlIGluc3RhbmNlb2YgRXJyb3IpXHJcbiAgICAgICAgICAgICAgICB0aGlzLm91dHB1dEVsZW1lbnQudGV4dENvbnRlbnQgPSAoZSBhcyBFcnJvcikubWVzc2FnZTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgdGhpcy5vdXRwdXRFbGVtZW50LnRleHRDb250ZW50ID0gZS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAoY29uc29sZS5lcnJvciB8fCBjb25zb2xlLmxvZykuY2FsbChjb25zb2xlLCBlLnN0YWNrIHx8IGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBjb3JyZXNwb25kcyB0byBBdXRvY29tcGxldGlvbkNvbnRleHQuaW5zZXJ0Q29tcGxldGlvbigpXHJcbiAgICBpbnNlcnRDb21wbGV0aW9uKGNvbXBsZXRpb246IEF1dG9jb21wbGV0aW9uIHwgdW5kZWZpbmVkKTogdm9pZCB7XHJcbiAgICAgICAgaWYoIWNvbXBsZXRpb24pXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBjb25zdCBzZWxlY3Rpb24gPSB0aGlzLmVkaXRvci5zdGF0ZS5zZWxlY3Rpb247XHJcbiAgICAgICAgY29uc3QgY2FyZXQgPSBzZWxlY3Rpb24ubWFpbi5oZWFkO1xyXG5cclxuICAgICAgICBjb25zdCBlbnRpcmVUZXh0OiBzdHJpbmcgPSB0aGlzLmVkaXRvci5zdGF0ZS5kb2MudG9TdHJpbmcoKTtcclxuICAgICAgICBjb25zdCBjdXJzb3JJc0F0RW5kOiBib29sZWFuID0gY2FyZXQgPT09IGVudGlyZVRleHQubGVuZ3RoIHx8IGVudGlyZVRleHQuc3Vic3RyaW5nKGNhcmV0KS50cmltKCkubGVuZ3RoID09IDA7XHJcblxyXG4gICAgICAgIGlmKHNlbGVjdGlvbi5tYWluLmVtcHR5KVxyXG4gICAgICAgICAgICB0aGlzLmVkaXRvci5kaXNwYXRjaCh7c2VsZWN0aW9uOiB7IGFuY2hvcjogY2FyZXQsIGhlYWQ6IGNhcmV0IC0gdGhpcy5jb21wbGV0ZXIuY29tcGxldGlvblByZWZpeCgpLmxlbmd0aCB9fSlcclxuXHJcbiAgICAgICAgY29uc3QgcmVwbCA9IGNvbXBsZXRpb24uZ2V0Q29tcGxldGlvbihBdXRvY29tcGxldGlvbi5QdXJwb3NlLkZPUl9JTlNFUlRJT04pO1xyXG4gICAgICAgIGlmKHJlcGwuaW5kZXhPZihcIiR7XCIpID49IDApIHtcclxuICAgICAgICAgICAgdGhpcy5jYW5jZWxQYXJhbWV0ZXJpemVkQ29tcGxldGlvbigpO1xyXG4gICAgICAgICAgICB0aGlzLnBhcmFtZXRlcml6ZWRDb21wbGV0aW9uID0gbmV3IFBhcmFtZXRlcml6ZWRDb21wbGV0aW9uKHRoaXMuZWRpdG9yKTtcclxuICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJpemVkQ29tcGxldGlvbi5zZXRQYXJhbWV0ZXJDaGFuZ2VMaXN0ZW5lcigocElkeDogbnVtYmVyLCB3YXNMYXN0OiBib29sZWFuKSA9PiB0aGlzLnBhcmFtZXRlckNoYW5nZWQocElkeCwgd2FzTGFzdCkpO1xyXG4gICAgICAgICAgICB0aGlzLnBhcmFtZXRlcml6ZWRDb21wbGV0aW9uLnJlcGxhY2VTZWxlY3Rpb24oY29tcGxldGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmVkaXRvci5kaXNwYXRjaCh0aGlzLmVkaXRvci5zdGF0ZS5yZXBsYWNlU2VsZWN0aW9uKHJlcGwpKTtcclxuICAgICAgICAgICAgdGhpcy5jb21wbGV0ZXIuaGlkZVBvcHVwKCk7XHJcbiAgICAgICAgICAgIGlmKGN1cnNvcklzQXRFbmQpXHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuYXV0b2NvbXBsZXRlKCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwYXJhbWV0ZXJDaGFuZ2VkKF9wSWR4OiBudW1iZXIsIHdhc0xhc3Q6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICBpZih3YXNMYXN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FuY2VsUGFyYW1ldGVyaXplZENvbXBsZXRpb24oKTtcclxuICAgICAgICAgICAgdGhpcy5hdXRvY29tcGxldGUoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmF1dG9jb21wbGV0ZShmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNhbmNlbFBhcmFtZXRlcml6ZWRDb21wbGV0aW9uKCkge1xyXG4gICAgICAgIGlmKHRoaXMucGFyYW1ldGVyaXplZENvbXBsZXRpb24gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLnBhcmFtZXRlcml6ZWRDb21wbGV0aW9uLmNhbmNlbCgpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucGFyYW1ldGVyaXplZENvbXBsZXRpb24gPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxlS2V5RXZlbnQoZTogS2V5Ym9hcmRFdmVudCwgdmlldzogRWRpdG9yVmlldyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwia2V5ZG93blwiLCBlLmtleSwgZSk7XHJcbiAgICAgICAgaWYodGhpcy5jb21wbGV0ZXIuaXNBY3RpdmUoKSkge1xyXG4gICAgICAgICAgICBpZihlLmtleSA9PT0gXCJFbnRlclwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluc2VydENvbXBsZXRpb24odGhpcy5jb21wbGV0ZXIuZ2V0U2VsZWN0ZWQoKSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihlLmtleSA9PT0gXCJBcnJvd1VwXCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29tcGxldGVyLnNlbGVjdFByZXZpb3VzKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKGUua2V5ID09PSBcIkFycm93RG93blwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBsZXRlci5zZWxlY3ROZXh0KCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKGUua2V5ID09PSBcIkVzY2FwZVwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBsZXRlci5oaWRlUG9wdXAoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYoZS5rZXkgPT09IFwiVGFiXCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29tcGxldGVyLmhpZGVQb3B1cCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihlLmtleSA9PT0gXCIgXCIgJiYgZS5jdHJsS2V5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXV0b2NvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYodGhpcy5wYXJhbWV0ZXJpemVkQ29tcGxldGlvbikge1xyXG4gICAgICAgICAgICBpZihlLmtleSA9PT0gXCJFc2NhcGVcIikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW5jZWxQYXJhbWV0ZXJpemVkQ29tcGxldGlvbigpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJpemVkQ29tcGxldGlvbi5oYW5kbGVLZXlFdmVudChlKTtcclxuICAgICAgICAgICAgaWYoZS5kZWZhdWx0UHJldmVudGVkKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZihlLmtleS5sZW5ndGggPT09IDEgJiYgIWUuY3RybEtleSAmJiAhZS5tZXRhS2V5ICYmICFlLmFsdEtleSkge1xyXG4gICAgICAgICAgICB2aWV3LmRpc3BhdGNoKHZpZXcuc3RhdGUucmVwbGFjZVNlbGVjdGlvbihlLmtleSkpO1xyXG4gICAgICAgICAgICB0aGlzLmF1dG9jb21wbGV0ZSgpXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY29ycmVzcG9uZHMgdG8gQXV0b2NvbXBsZXRpb25Db250ZXh0LmRvQXV0b2NvbXBsZXRpb24oKVxyXG4gICAgYXV0b2NvbXBsZXRlKGF1dG9pbnNlcnRTaW5nbGVPcHRpb246IGJvb2xlYW4gPSB0cnVlKSB7XHJcbiAgICAgICAgY29uc3QgZW50aXJlVGV4dDogc3RyaW5nID0gdGhpcy5lZGl0b3Iuc3RhdGUuZG9jLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgY29uc3QgYW5jaG9yOiBudW1iZXIgPSB0aGlzLmVkaXRvci5zdGF0ZS5zZWxlY3Rpb24ubWFpbi5hbmNob3I7XHJcblxyXG4gICAgICAgIGNvbnN0IHRleHRUb0N1cnNvcjogc3RyaW5nID0gZW50aXJlVGV4dC5zdWJzdHJpbmcoMCwgYW5jaG9yKTtcclxuICAgICAgICB0aGlzLmVycm9ySGlnaGxpZ2h0Py5jbGVhckVycm9yKCk7XHJcbiAgICAgICAgY29uc3QgYXV0b2NvbXBsZXRpb25zOiBBdXRvY29tcGxldGlvbltdID0gW107XHJcbiAgICAgICAgbGV0IHBuOiBQYXJzZWROb2RlO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHBuID0gdGhpcy5wYXJzZXIucGFyc2UodGV4dFRvQ3Vyc29yLCBhdXRvY29tcGxldGlvbnMpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhwbi5nZXRNYXRjaGVyKCkuc3RhdGUpO1xyXG4gICAgICAgIH0gY2F0Y2goZTogYW55KSB7XHJcbiAgICAgICAgICAgIGlmKGUgaW5zdGFuY2VvZiBQYXJzZUV4Y2VwdGlvbikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZjogTWF0Y2hlciA9IGUuZ2V0Rmlyc3RBdXRvY29tcGxldGluZ0FuY2VzdG9yVGhhdEZhaWxlZCgpLmdldE1hdGNoZXIoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JIaWdobGlnaHQ/LnNldEVycm9yKGYucG9zLCBmLnBvcyArIGYucGFyc2VkLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGJuZjogQk5GID0gdGhpcy5wYXJzZXIuZ2V0VGFyZ2V0R3JhbW1hcigpLmdldEJORigpO1xyXG4gICAgICAgIGlmKHRoaXMucGFyYW1ldGVyaXplZENvbXBsZXRpb24gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBpZihhdXRvY29tcGxldGlvbnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGF0TGVhc3RPbmVDb21wbGV0aW9uRm9yQ3VycmVudFBhcmFtdGVyOiBib29sZWFuPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGZvcihsZXQgY29tcCBvZiBhdXRvY29tcGxldGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgc3ltYm9sOiBTeW0gPSBjb21wLmZvclN5bWJvbDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgY29tcCBpcyBhbiBFbnRpcmVTZXF1ZW5jZSBjb21wbGV0aW9uLCB3ZSBzaG91bGQganVzdCBjaGVjayB0aGUgZmlyc3RcclxuICAgICAgICAgICAgICAgICAgICAvLyB3ZSBjYW4gZG8gdGhhdCB1c2luZyBQYXJhbWV0ZXJpemVkQ29tcGxldGlvbkNvbnRleHQucGFyc2VQYXJhbWV0ZXJzXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoY29tcCBpbnN0YW5jZW9mIEF1dG9jb21wbGV0aW9uLkVudGlyZVNlcXVlbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0bXA6IFBhcnNlZFBhcmFtW10gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUGFyYW1ldGVyaXplZENvbXBsZXRpb24ucGFyc2VQYXJhbWV0ZXJzKGNvbXAsIHRtcCwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXAgPSB0bXBbMF0uYXV0b2NvbXBsZXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN5bWJvbCA9IGNvbXAuZm9yU3ltYm9sO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZihzeW1ib2wuZXF1YWxzKHRoaXMucGFyYW1ldGVyaXplZENvbXBsZXRpb24uZ2V0Rm9yQXV0b2NvbXBsZXRpb24oKS5mb3JTeW1ib2wpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0TGVhc3RPbmVDb21wbGV0aW9uRm9yQ3VycmVudFBhcmFtdGVyID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiBzeW1ib2wgaXMgYSBkZXNjZW5kZW50IG9mIHRoZSBwYXJhbWV0ZXJzIGF1dG9jb21wbGV0aW9uIHN5bWJvbFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBwOiBQYXJzZWRQYXJhbSB8IHVuZGVmaW5lZCA9IHRoaXMucGFyYW1ldGVyaXplZENvbXBsZXRpb24uZ2V0Q3VycmVudFBhcmFtZXRlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiY3VycmVudCBwYXJhbTogXCIgKyBwcD8udG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyYW1ldGVyU3ltYm9sOiBTeW0gfCB1bmRlZmluZWQgPSBwcD8uYXV0b2NvbXBsZXRpb24uZm9yU3ltYm9sO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHN5bWJvbCA9PSBwYXJhbWV0ZXJTeW1ib2w/IC0+IGZpbmVcclxuICAgICAgICAgICAgICAgICAgICBpZihzeW1ib2wuZXF1YWxzKHBhcmFtZXRlclN5bWJvbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXRMZWFzdE9uZUNvbXBsZXRpb25Gb3JDdXJyZW50UGFyYW10ZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKHBhcmFtZXRlclN5bWJvbCBpbnN0YW5jZW9mIE5vblRlcm1pbmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIHJlY3Vyc2l2ZWx5IGlmIHN5bWJvbCBpcyBpbiB0aGUgbGlzdCBvZiBjaGlsZCBzeW1ib2xzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHBhcmFtZXRlclN5bWJvbC51c2VzKHN5bWJvbCwgYm5mKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXRMZWFzdE9uZUNvbXBsZXRpb25Gb3JDdXJyZW50UGFyYW10ZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZighYXRMZWFzdE9uZUNvbXBsZXRpb25Gb3JDdXJyZW50UGFyYW10ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIm5vdyBJJ2QgY2FsbCBuZXh0LlwiKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmFtZXRlcml6ZWRDb21wbGV0aW9uLm5leHQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIm5vIGNvbXBsZXRpb25zXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInBhcmFtZXRlcml6ZWQgY29tcGxldGlvbiA9PSBudWxsXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYoYXV0b2NvbXBsZXRpb25zLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICBpZihhdXRvaW5zZXJ0U2luZ2xlT3B0aW9uIHx8IChhdXRvY29tcGxldGlvbiBpbnN0YW5jZW9mIEF1dG9jb21wbGV0aW9uLkxpdGVyYWwpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBsZXRlci5zZXRDb21wbGV0aW9ucyhhdXRvY29tcGxldGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbnNlcnRDb21wbGV0aW9uKGF1dG9jb21wbGV0aW9uc1swXSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBsZXRlci5oaWRlUG9wdXAoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKGF1dG9jb21wbGV0aW9ucy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29tcGxldGVyLnNldENvbXBsZXRpb25zKGF1dG9jb21wbGV0aW9ucyk7XHJcbiAgICAgICAgICAgIHRoaXMuY29tcGxldGVyLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNvbXBsZXRlci5oaWRlUG9wdXAoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbiIsImltcG9ydCB7IFN0YXRlRWZmZWN0LCBTdGF0ZUZpZWxkLCBSYW5nZSwgUmFuZ2VDdXJzb3IgfSBmcm9tIFwiQGNvZGVtaXJyb3Ivc3RhdGVcIlxyXG5pbXBvcnQgeyBEZWNvcmF0aW9uLCBEZWNvcmF0aW9uU2V0LCBXaWRnZXRUeXBlLCBFZGl0b3JWaWV3IH0gZnJvbSBcIkBjb2RlbWlycm9yL3ZpZXdcIlxyXG5cclxuLy8gY29kZSBtaXJyb3IgZWZmZWN0IHRoYXQgeW91IHdpbGwgdXNlIHRvIGRlZmluZSB0aGUgZWZmZWN0IHlvdSB3YW50ICh0aGUgZGVjb3JhdGlvbilcclxuY29uc3QgYWRkRXJyb3JFZmZlY3QgPSBTdGF0ZUVmZmVjdC5kZWZpbmU8UmFuZ2U8RGVjb3JhdGlvbj5bXT4oKTtcclxuY29uc3QgcmVtb3ZlRXJyb3JFZmZlY3QgPSBTdGF0ZUVmZmVjdC5kZWZpbmU8KGZyb206IG51bWJlciwgdG86IG51bWJlciwgdmFsdWU6IGFueSkgPT4gYm9vbGVhbj4oKTtcclxuXHJcbi8vIGRlZmluZSBhIG5ldyBmaWVsZCB0aGF0IHdpbGwgYmUgYXR0YWNoZWQgdG8geW91ciB2aWV3IHN0YXRlIGFzIGFuIGV4dGVuc2lvbiwgdXBkYXRlIHdpbGwgYmUgY2FsbGVkIGF0IGVhY2ggZWRpdG9yJ3MgY2hhbmdlXHJcbmV4cG9ydCBjb25zdCBlcnJvcl9oaWdobGlnaHRfZXh0ZW5zaW9uID0gU3RhdGVGaWVsZC5kZWZpbmU8RGVjb3JhdGlvblNldD4oe1xyXG4gIGNyZWF0ZSgpIHsgcmV0dXJuIERlY29yYXRpb24ubm9uZSB9LFxyXG4gIHVwZGF0ZSh2YWx1ZSwgdHJhbnNhY3Rpb24pIHtcclxuICAgIHZhbHVlID0gdmFsdWUubWFwKHRyYW5zYWN0aW9uLmNoYW5nZXMpXHJcblxyXG4gICAgZm9yIChsZXQgZWZmZWN0IG9mIHRyYW5zYWN0aW9uLmVmZmVjdHMpIHtcclxuICAgICAgaWYgKGVmZmVjdC5pcyhhZGRFcnJvckVmZmVjdCkpIHZhbHVlID0gdmFsdWUudXBkYXRlKHthZGQ6IGVmZmVjdC52YWx1ZSwgc29ydDogdHJ1ZX0pXHJcbiAgICAgIGVsc2UgaWYgKGVmZmVjdC5pcyhyZW1vdmVFcnJvckVmZmVjdCkpIHZhbHVlID0gdmFsdWUudXBkYXRlKHtmaWx0ZXI6IGVmZmVjdC52YWx1ZX0pXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZhbHVlXHJcbiAgfSxcclxuICBwcm92aWRlOiBmID0+IEVkaXRvclZpZXcuZGVjb3JhdGlvbnMuZnJvbShmKSxcclxufSk7XHJcblxyXG5cclxuLy8gdGhpcyBpcyB5b3VyIGRlY29yYXRpb24gd2hlcmUgeW91IGNhbiBkZWZpbmUgdGhlIGNoYW5nZSB5b3Ugd2FudCA6IGEgY3NzIGNsYXNzIG9yIGRpcmVjdGx5IGNzcyBhdHRyaWJ1dGVzXHJcbmNvbnN0IGVycm9yX2RlY29yYXRpb24gPSBEZWNvcmF0aW9uLm1hcmsoe1xyXG4gIGluY2x1c2l2ZTogdHJ1ZSxcclxuICBhdHRyaWJ1dGVzOiB7c3R5bGU6IFwiLyogYmFja2dyb3VuZC1jb2xvcjogI2I3YzFlODsgYm9yZGVyOiByZWQgMXB4IHNvbGlkOyAqLyBjb2xvcjogcmVkOyBmb250LXdlaWdodDogYm9sZDsgXCJ9LFxyXG4gIHRhZ05hbWU6IFwic3BhblwiLFxyXG5cclxuICAvLyBjbGFzczogJ3JlZF9iYWNrJ1xyXG59KTtcclxuXHJcbmZ1bmN0aW9uIGhpZ2hsaWdodEVycm9yKGVkaXRvcjogRWRpdG9yVmlldywgZnJvbTogbnVtYmVyLCB0bzogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAvLyB0aGlzIGlzIHdoZXJlIHRoZSBjaGFuZ2UgdGFrZXMgZWZmZWN0IGJ5IHRoZSBkaXNwYXRjaC4gVGhlIG9mIG1ldGhvZCBpbnN0YW5jaWF0ZSB0aGUgZWZmZWN0LiBZb3UgbmVlZCB0byBwdXQgdGhpcyBjb2RlIHdoZXJlIHlvdSB3YW50IHRoZSBjaGFuZ2UgdG8gdGFrZSBwbGFjZVxyXG4gICAgZWRpdG9yLmRpc3BhdGNoKHtcclxuICAgICAgICBlZmZlY3RzOiBhZGRFcnJvckVmZmVjdC5vZihbZXJyb3JfZGVjb3JhdGlvbi5yYW5nZShmcm9tLCB0byldKVxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbW92ZUVycm9ycyhlZGl0b3I6IEVkaXRvclZpZXcpOiB2b2lkIHtcclxuICAgIGVkaXRvci5kaXNwYXRjaCh7XHJcbiAgICAgICAgZWZmZWN0czogcmVtb3ZlRXJyb3JFZmZlY3Qub2YoKCkgPT4gZmFsc2UpXHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgUGFyYW1ldGVyQ2hhbmdlTGlzdGVuZXIgPSAocGFyYW1ldGVySW5kZXg6IG51bWJlciwgaXNMYXN0OiBib29sZWFuKSA9PiB2b2lkO1xyXG5cclxuZXhwb3J0IGNsYXNzIEVycm9ySGlnaGxpZ2h0IHtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgdGM6IEVkaXRvclZpZXc7XHJcbiAgICBwcml2YXRlIHBhcmFtZXRlckNoYW5nZUxpc3RlbmVyOiBQYXJhbWV0ZXJDaGFuZ2VMaXN0ZW5lciB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih0YzogRWRpdG9yVmlldykge1xyXG4gICAgICAgIHRoaXMudGMgPSB0YztcclxuICAgIH1cclxuXHJcbiAgICBzZXRFcnJvcihpMDogbnVtYmVyLCBpMTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jbGVhckVycm9yKCk7XHJcbiAgICAgICAgaWYoaTAgPT09IGkxKVxyXG4gICAgICAgICAgaTErKztcclxuICAgICAgICBoaWdobGlnaHRFcnJvcih0aGlzLnRjLCBpMCwgaTEpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyRXJyb3IoKTogdm9pZCB7XHJcbiAgICAgICAgcmVtb3ZlRXJyb3JzKHRoaXMudGMpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFN0YXRlRWZmZWN0LCBTdGF0ZUZpZWxkLCBSYW5nZSwgUmFuZ2VDdXJzb3IgfSBmcm9tIFwiQGNvZGVtaXJyb3Ivc3RhdGVcIlxyXG5pbXBvcnQgeyBEZWNvcmF0aW9uLCBEZWNvcmF0aW9uU2V0LCBXaWRnZXRUeXBlLCBFZGl0b3JWaWV3IH0gZnJvbSBcIkBjb2RlbWlycm9yL3ZpZXdcIlxyXG5pbXBvcnQgeyBBdXRvY29tcGxldGlvbiB9IGZyb20gXCIuLi9jb3JlL0F1dG9jb21wbGV0aW9uLmpzXCI7XHJcbmltcG9ydCB7IFJ1bGUgfSBmcm9tIFwic3JjL2VibmYvUnVsZS5qc1wiO1xyXG5cclxuLy8gY29kZSBtaXJyb3IgZWZmZWN0IHRoYXQgeW91IHdpbGwgdXNlIHRvIGRlZmluZSB0aGUgZWZmZWN0IHlvdSB3YW50ICh0aGUgZGVjb3JhdGlvbilcclxuY29uc3QgYWRkSGlnaGxpZ2h0ID0gU3RhdGVFZmZlY3QuZGVmaW5lPFJhbmdlPERlY29yYXRpb24+W10+KCk7XHJcbmNvbnN0IHJlbW92ZUhpZ2hsaWdodCA9IFN0YXRlRWZmZWN0LmRlZmluZTwoZnJvbTogbnVtYmVyLCB0bzogbnVtYmVyLCB2YWx1ZTogYW55KSA9PiBib29sZWFuPigpO1xyXG5cclxuLy8gZGVmaW5lIGEgbmV3IGZpZWxkIHRoYXQgd2lsbCBiZSBhdHRhY2hlZCB0byB5b3VyIHZpZXcgc3RhdGUgYXMgYW4gZXh0ZW5zaW9uLCB1cGRhdGUgd2lsbCBiZSBjYWxsZWQgYXQgZWFjaCBlZGl0b3IncyBjaGFuZ2VcclxuZXhwb3J0IGNvbnN0IGhpZ2hsaWdodF9leHRlbnNpb24gPSBTdGF0ZUZpZWxkLmRlZmluZTxEZWNvcmF0aW9uU2V0Pih7XHJcbiAgY3JlYXRlKCkgeyByZXR1cm4gRGVjb3JhdGlvbi5ub25lIH0sXHJcbiAgdXBkYXRlKHZhbHVlLCB0cmFuc2FjdGlvbikge1xyXG4gICAgdmFsdWUgPSB2YWx1ZS5tYXAodHJhbnNhY3Rpb24uY2hhbmdlcylcclxuXHJcbiAgICBmb3IgKGxldCBlZmZlY3Qgb2YgdHJhbnNhY3Rpb24uZWZmZWN0cykge1xyXG4gICAgICBpZiAoZWZmZWN0LmlzKGFkZEhpZ2hsaWdodCkpIHZhbHVlID0gdmFsdWUudXBkYXRlKHthZGQ6IGVmZmVjdC52YWx1ZSwgc29ydDogdHJ1ZX0pXHJcbiAgICAgIGVsc2UgaWYgKGVmZmVjdC5pcyhyZW1vdmVIaWdobGlnaHQpKSB2YWx1ZSA9IHZhbHVlLnVwZGF0ZSh7ZmlsdGVyOiBlZmZlY3QudmFsdWV9KVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB2YWx1ZVxyXG4gIH0sXHJcbiAgcHJvdmlkZTogZiA9PiBFZGl0b3JWaWV3LmRlY29yYXRpb25zLmZyb20oZiksXHJcbn0pO1xyXG5cclxuXHJcbi8vIHRoaXMgaXMgeW91ciBkZWNvcmF0aW9uIHdoZXJlIHlvdSBjYW4gZGVmaW5lIHRoZSBjaGFuZ2UgeW91IHdhbnQgOiBhIGNzcyBjbGFzcyBvciBkaXJlY3RseSBjc3MgYXR0cmlidXRlc1xyXG5jb25zdCBoaWdobGlnaHRfZGVjb3JhdGlvbiA9IERlY29yYXRpb24ubWFyayh7XHJcbiAgaW5jbHVzaXZlOiB0cnVlLFxyXG4gIGF0dHJpYnV0ZXM6IHtzdHlsZTogXCIvKiBiYWNrZ3JvdW5kLWNvbG9yOiAjYjdjMWU4OyAqL2JvcmRlcjogZ3JheSAxcHggc29saWQ7XCJ9LFxyXG4gIHRhZ05hbWU6IFwic3BhblwiLFxyXG5cclxuICAvLyBjbGFzczogJ3JlZF9iYWNrJ1xyXG59KTtcclxuXHJcbmNsYXNzIE15V2lkZ2V0VHlwZSBleHRlbmRzIFdpZGdldFR5cGUge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgIH1cclxuICAgIHRvRE9NKF92aWV3OiBFZGl0b3JWaWV3KSB7XHJcbiAgICAgICAgbGV0IHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcclxuICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZShcInN0eWxlXCIsIFwiYm9yZGVyLXJpZ2h0OiBncmF5IDFweCBzb2xpZDsgbWFyZ2luLWxlZnQ6IDFweDtcIik7XHJcbiAgICAgICAgcmV0dXJuIHNwYW47XHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IGVuZF9kZWNvcmF0aW9uID0gRGVjb3JhdGlvbi53aWRnZXQoe1xyXG4gICAgLy8gYXR0cmlidXRlczoge3N0eWxlOiBcImJvcmRlci1yaWdodDogZ3JheSAxcHggc29saWQ7XCJ9LFxyXG4gICAgLy8gaW5jbHVzaXZlOiBmYWxzZSxcclxuICAgIC8vIHRhZ05hbWU6IFwic3BhblwiLFxyXG4gICAgd2lkZ2V0OiBuZXcgTXlXaWRnZXRUeXBlKCksXHJcbiAgICBzaWRlOiAxMDAwLFxyXG59KTtcclxuXHJcbi8vIHlvdXIgZWRpdG9yJ3Mgdmlld1xyXG4vLyBsZXQgbWFpbl92aWV3ID0gbmV3IEVkaXRvclZpZXcoeyBcclxuLy8gICBleHRlbnNpb25zOiBbaGlnaGxpZ2h0X2V4dGVuc2lvbl1cclxuLy8gfSk7XHJcblxyXG5mdW5jdGlvbiBoaWdobGlnaHQoZWRpdG9yOiBFZGl0b3JWaWV3LCBmcm9tOiBudW1iZXIsIHRvOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIC8vIHRoaXMgaXMgd2hlcmUgdGhlIGNoYW5nZSB0YWtlcyBlZmZlY3QgYnkgdGhlIGRpc3BhdGNoLiBUaGUgb2YgbWV0aG9kIGluc3RhbmNpYXRlIHRoZSBlZmZlY3QuIFlvdSBuZWVkIHRvIHB1dCB0aGlzIGNvZGUgd2hlcmUgeW91IHdhbnQgdGhlIGNoYW5nZSB0byB0YWtlIHBsYWNlXHJcbiAgICBlZGl0b3IuZGlzcGF0Y2goe1xyXG4gICAgICAgIGVmZmVjdHM6IGFkZEhpZ2hsaWdodC5vZihbaGlnaGxpZ2h0X2RlY29yYXRpb24ucmFuZ2UoZnJvbSwgdG8pXSlcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoaWdobGlnaHRFbmQoZWRpdG9yOiBFZGl0b3JWaWV3LCBhdDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBlZGl0b3IuZGlzcGF0Y2goe1xyXG4gICAgICAgIGVmZmVjdHM6IGFkZEhpZ2hsaWdodC5vZihbZW5kX2RlY29yYXRpb24ucmFuZ2UoYXQsIGF0KV0pXHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVtb3ZlSGlnaGxpZ2h0cyhlZGl0b3I6IEVkaXRvclZpZXcpOiB2b2lkIHtcclxuICAgIGVkaXRvci5kaXNwYXRjaCh7XHJcbiAgICAgICAgZWZmZWN0czogcmVtb3ZlSGlnaGxpZ2h0Lm9mKCgpID0+IGZhbHNlKVxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFBhcmFtZXRlckNoYW5nZUxpc3RlbmVyID0gKHBhcmFtZXRlckluZGV4OiBudW1iZXIsIGlzTGFzdDogYm9vbGVhbikgPT4gdm9pZDtcclxuXHJcbmV4cG9ydCBjbGFzcyBQYXJhbWV0ZXJpemVkQ29tcGxldGlvbiB7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHRjOiBFZGl0b3JWaWV3O1xyXG4gICAgcHJpdmF0ZSBwYXJhbWV0ZXJzOiBQYXJzZWRQYXJhbVtdID0gW107XHJcbiAgICBwcml2YXRlIGZvckF1dG9jb21wbGV0aW9uOiBBdXRvY29tcGxldGlvbiB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcclxuICAgIHByaXZhdGUgcGFyYW1ldGVyQ2hhbmdlTGlzdGVuZXI6IFBhcmFtZXRlckNoYW5nZUxpc3RlbmVyIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHRjOiBFZGl0b3JWaWV3KSB7XHJcbiAgICAgICAgdGhpcy50YyA9IHRjO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEZvckF1dG9jb21wbGV0aW9uKCk6IEF1dG9jb21wbGV0aW9uIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5mb3JBdXRvY29tcGxldGlvbiBhcyBBdXRvY29tcGxldGlvbjtcclxuICAgIH1cclxuXHJcbiAgICBzZXRQYXJhbWV0ZXJDaGFuZ2VMaXN0ZW5lcihsOiBQYXJhbWV0ZXJDaGFuZ2VMaXN0ZW5lcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVyQ2hhbmdlTGlzdGVuZXIgPSBsO1xyXG4gICAgfVxyXG5cclxuICAgIHJlcGxhY2VTZWxlY3Rpb24oYXV0b2NvbXBsZXRpb246IEF1dG9jb21wbGV0aW9uKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5mb3JBdXRvY29tcGxldGlvbiA9IGF1dG9jb21wbGV0aW9uO1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVycyA9IFtdO1xyXG4gICAgICAgIGNvbnN0IGluc2VydGlvblN0cmluZyA9IFBhcmFtZXRlcml6ZWRDb21wbGV0aW9uLnBhcnNlUGFyYW1ldGVycyhhdXRvY29tcGxldGlvbiwgdGhpcy5wYXJhbWV0ZXJzKTtcclxuICAgICAgICBjb25zdCBvZmZzZXQgPSB0aGlzLnRjLnN0YXRlLnNlbGVjdGlvbi5tYWluLmFuY2hvcjtcclxuICAgICAgICB0aGlzLnRjLmRpc3BhdGNoKHRoaXMudGMuc3RhdGUucmVwbGFjZVNlbGVjdGlvbihpbnNlcnRpb25TdHJpbmcpKTtcclxuICAgICAgICByZW1vdmVIaWdobGlnaHRzKHRoaXMudGMpO1xyXG4gICAgICAgIGZvcihsZXQgcHAgb2YgdGhpcy5wYXJhbWV0ZXJzKSB7XHJcbiAgICAgICAgICAgIGhpZ2hsaWdodCh0aGlzLnRjLCBvZmZzZXQgKyBwcC5pMCwgb2Zmc2V0ICsgcHAuaTEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBhdEVuZCA9IG9mZnNldCArIGluc2VydGlvblN0cmluZy5sZW5ndGg7XHJcbiAgICAgICAgaGlnaGxpZ2h0RW5kKHRoaXMudGMsIGF0RW5kKTtcclxuICAgICAgICB0aGlzLmN5Y2xlKDApO1xyXG4gICAgfVxyXG5cclxuICAgIG5leHQoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgZHM6IERlY29yYXRpb25TZXQgPSB0aGlzLnRjLnN0YXRlLmZpZWxkKGhpZ2hsaWdodF9leHRlbnNpb24pO1xyXG4gICAgICAgIGxldCBpdDogUmFuZ2VDdXJzb3I8RGVjb3JhdGlvbj4gPSBkcy5pdGVyKDApO1xyXG4gICAgICAgIGxldCBjdXJzb3I6IG51bWJlciA9IHRoaXMudGMuc3RhdGUuc2VsZWN0aW9uLm1haW4uaGVhZDtcclxuICAgICAgICAvLyBpdGVyYXRlIG92ZXIgYWxsIHBhcmFtZXRlcnMgKHJhbmdlcylcclxuICAgICAgICBsZXQgaSA9IDA7XHJcbiAgICAgICAgd2hpbGUoaXQudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgaWYoY3Vyc29yIDwgaXQuZnJvbSB8fCBpID09PSBkcy5zaXplIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jeWNsZShpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpdC5uZXh0KCk7XHJcbiAgICAgICAgICAgIGkrKztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRQYXJhbUluZGV4Rm9yQ3Vyc29yKCk6IG51bWJlciB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgY29uc3QgZHM6IERlY29yYXRpb25TZXQgPSB0aGlzLnRjLnN0YXRlLmZpZWxkKGhpZ2hsaWdodF9leHRlbnNpb24pO1xyXG4gICAgICAgIGxldCBpdDogUmFuZ2VDdXJzb3I8RGVjb3JhdGlvbj4gPSBkcy5pdGVyKDApO1xyXG4gICAgICAgIGxldCBjdXJzb3I6IG51bWJlciA9IHRoaXMudGMuc3RhdGUuc2VsZWN0aW9uLm1haW4uaGVhZDtcclxuICAgICAgICAvLyBpdGVyYXRlIG92ZXIgYWxsIHBhcmFtZXRlcnMgKHJhbmdlcylcclxuICAgICAgICBsZXQgaSA9IDA7XHJcbiAgICAgICAgd2hpbGUoaXQudmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgaWYoY3Vyc29yID49IGl0LmZyb20gJiYgY3Vyc29yIDw9IGl0LnRvKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpdC5uZXh0KCk7XHJcbiAgICAgICAgICAgIGkrKztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDdXJyZW50UGFyYW1ldGVyKCk6IFBhcnNlZFBhcmFtIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICBjb25zdCBpZHg6IG51bWJlciB8IHVuZGVmaW5lZCA9IHRoaXMuZ2V0UGFyYW1JbmRleEZvckN1cnNvcigpO1xyXG4gICAgICAgIGlmKGlkeCA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBhcmFtZXRlcnNbaWR4XTtcclxuICAgIH1cclxuXHJcbiAgICBwcmV2aW91cygpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBkczogRGVjb3JhdGlvblNldCA9IHRoaXMudGMuc3RhdGUuZmllbGQoaGlnaGxpZ2h0X2V4dGVuc2lvbik7XHJcbiAgICAgICAgbGV0IGl0OiBSYW5nZUN1cnNvcjxEZWNvcmF0aW9uPiA9IGRzLml0ZXIoMCk7XHJcbiAgICAgICAgbGV0IGN1cnNvcjogbnVtYmVyID0gdGhpcy50Yy5zdGF0ZS5zZWxlY3Rpb24ubWFpbi5oZWFkO1xyXG4gICAgICAgIC8vIGl0ZXJhdGUgb3ZlciBhbGwgcGFyYW1ldGVycyAocmFuZ2VzKVxyXG4gICAgICAgIGxldCBpID0gMDtcclxuICAgICAgICB3aGlsZShpdC52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZihjdXJzb3IgPD0gaXQudG8pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3ljbGUoaSAtIDEpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGl0Lm5leHQoKTtcclxuICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmN5Y2xlKGkgLSAxKTsgLy8gbmVlZGVkIGluIGNhc2UgdGhlIGN1cnNvciBpcyBiZWhpbmQgdGhlIGxhc3QgbWFya1xyXG4gICAgfVxyXG5cclxuICAgIGN5Y2xlKGN1cnJlbnRQYXJhbWV0ZXJJbmRleDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgZHM6IERlY29yYXRpb25TZXQgPSB0aGlzLnRjLnN0YXRlLmZpZWxkKGhpZ2hsaWdodF9leHRlbnNpb24pO1xyXG4gICAgICAgIGNvbnN0IG5QYXJhbWV0ZXJzID0gZHMuc2l6ZTtcclxuICAgICAgICBpZihuUGFyYW1ldGVycyA9PT0gMClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICBpZihjdXJyZW50UGFyYW1ldGVySW5kZXggPT09IC0xKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgIGxldCBpdDogUmFuZ2VDdXJzb3I8RGVjb3JhdGlvbj4gPSBkcy5pdGVyKDApO1xyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBuUGFyYW1ldGVycyAmJiBpIDwgY3VycmVudFBhcmFtZXRlckluZGV4OyBpKyspIHtcclxuICAgICAgICAgICAgaXQubmV4dCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBsYXN0ID0gY3VycmVudFBhcmFtZXRlckluZGV4ID09PSBuUGFyYW1ldGVycyAtIDFcclxuXHJcbiAgICAgICAgLy8gY29uc3QgZnJvbTogbnVtYmVyID0gbGFzdCA/IGl0LmZyb20gKyAxIDogaXQuZnJvbTtcclxuICAgICAgICBjb25zdCBmcm9tID0gaXQuZnJvbTtcclxuICAgICAgICB0aGlzLnRjLmRpc3BhdGNoKHtzZWxlY3Rpb246IHthbmNob3I6IGZyb20sIGhlYWQ6IGl0LnRvfX0pO1xyXG5cclxuXHJcbiAgICAgICAgaWYodGhpcy5wYXJhbWV0ZXJDaGFuZ2VMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFyYW1ldGVyQ2hhbmdlTGlzdGVuZXIoY3VycmVudFBhcmFtZXRlckluZGV4LCBsYXN0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGlmKGxhc3QpXHJcbiAgICAgICAgLy8gICAgIHRoaXMuY2FuY2VsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2FuY2VsKCk6IHZvaWQge1xyXG4gICAgICAgIHJlbW92ZUhpZ2hsaWdodHModGhpcy50Yyk7XHJcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJDaGFuZ2VMaXN0ZW5lciA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVLZXlFdmVudChldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xyXG4gICAgICAgIGlmKHRoaXMudGMuc3RhdGUuZmllbGQoaGlnaGxpZ2h0X2V4dGVuc2lvbikuc2l6ZSA9PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FuY2VsKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gXCJUYWJcIiB8fCBldmVudC5rZXkgPT09IFwiRW50ZXJcIikge1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBpZiAoZXZlbnQuc2hpZnRLZXkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJldmlvdXMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubmV4dCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIHN0YXRpYyBwYXJzZVBhcmFtZXRlcnNPbGQocGFyYW1TdHJpbmc6IHN0cmluZywgcmV0OiBQYXJzZWRQYXJhbVtdKTogc3RyaW5nIHtcclxuICAgIC8vICAgICBsZXQgdmFyTmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xyXG4gICAgLy8gICAgIGxldCBpbnNlcnRTdHJpbmcgPSBcIlwiO1xyXG4gICAgLy8gICAgIGNvbnN0IGwgPSBwYXJhbVN0cmluZy5sZW5ndGg7XHJcbiAgICAvLyAgICAgbGV0IGhsU3RhcnQgPSAtMTtcclxuICAgIC8vICAgICBsZXQgaSA9IDA7XHJcbiAgICAvLyAgICAgd2hpbGUoaSA8IGwpIHtcclxuICAgIC8vICAgICAgICAgbGV0IGNoYSA9IHBhcmFtU3RyaW5nW2ldO1xyXG4gICAgLy8gICAgICAgICBpZihjaGEgPT09ICckJyAmJiBpIDwgbCAtIDEgJiYgcGFyYW1TdHJpbmdbaSArIDFdID09PSAneycpIHtcclxuICAgIC8vICAgICAgICAgICAgIGlmKHZhck5hbWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIHZhck5hbWUgPSBcIlwiO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGhsU3RhcnQgPSBpbnNlcnRTdHJpbmcubGVuZ3RoO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGkgPSBpICsgMTtcclxuICAgIC8vICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkICd9JyBiZWZvcmUgbmV4dCAnJHsnXCIpO1xyXG4gICAgLy8gICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgIGVsc2UgaWYodmFyTmFtZSAhPT0gdW5kZWZpbmVkICYmIGNoYSA9PT0gJ30nKSB7XHJcbiAgICAvLyAgICAgICAgICAgICBjb25zdCBobEVuZCA9IGluc2VydFN0cmluZy5sZW5ndGg7XHJcbiAgICAvLyAgICAgICAgICAgICByZXQucHVzaChuZXcgUGFyc2VkUGFyYW0odmFyTmFtZSwgaGxTdGFydCwgaGxFbmQpKTsgLy8gaGxFbmQgaXMgZXhjbHVzaXZlXHJcbiAgICAvLyAgICAgICAgICAgICB2YXJOYW1lID0gdW5kZWZpbmVkO1xyXG4gICAgLy8gICAgICAgICB9XHJcblxyXG4gICAgLy8gICAgICAgICBlbHNlIGlmKHZhck5hbWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgLy8gICAgICAgICAgICAgdmFyTmFtZSA9IHZhck5hbWUgKyBjaGE7XHJcbiAgICAvLyAgICAgICAgICAgICBpbnNlcnRTdHJpbmcgPSBpbnNlcnRTdHJpbmcgKyBjaGE7XHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgZWxzZSB7XHJcbiAgICAvLyAgICAgICAgICAgICBpbnNlcnRTdHJpbmcgPSBpbnNlcnRTdHJpbmcgKyBjaGE7XHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgaSA9IGkgKyAxO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vICAgICByZXR1cm4gaW5zZXJ0U3RyaW5nO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIHN0YXRpYyBwYXJzZVBhcmFtZXRlcnMoYXV0b2NvbXBsZXRpb246IEF1dG9jb21wbGV0aW9uLCByZXQ6IFBhcnNlZFBhcmFtW10sIG9mZnNldDogbnVtYmVyID0gMCk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYoYXV0b2NvbXBsZXRpb24gaW5zdGFuY2VvZiBBdXRvY29tcGxldGlvbi5MaXRlcmFsKVxyXG4gICAgICAgICAgICByZXR1cm4gYXV0b2NvbXBsZXRpb24uZ2V0Q29tcGxldGlvbihBdXRvY29tcGxldGlvbi5QdXJwb3NlLkZPUl9JTlNFUlRJT04pXHJcblxyXG4gICAgICAgIGlmKGF1dG9jb21wbGV0aW9uIGluc3RhbmNlb2YgQXV0b2NvbXBsZXRpb24uUGFyYW1ldGVyaXplZCkge1xyXG4gICAgICAgICAgICBjb25zdCBzOiBzdHJpbmcgPSBhdXRvY29tcGxldGlvbi5nZXRQYXJhbU5hbWUoKTtcclxuICAgICAgICAgICAgcmV0LnB1c2gobmV3IFBhcnNlZFBhcmFtKHMsIDAsIHMubGVuZ3RoLCBhdXRvY29tcGxldGlvbikpO1xyXG4gICAgICAgICAgICByZXR1cm4gcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKGF1dG9jb21wbGV0aW9uIGluc3RhbmNlb2YgQXV0b2NvbXBsZXRpb24uRW50aXJlU2VxdWVuY2UpIHtcclxuICAgICAgICAgICAgY29uc3QgZW50aXJlU2VxdWVuY2U6IEF1dG9jb21wbGV0aW9uLkVudGlyZVNlcXVlbmNlID0gYXV0b2NvbXBsZXRpb24gYXMgQXV0b2NvbXBsZXRpb24uRW50aXJlU2VxdWVuY2U7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlcXVlbmNlT2ZDb21wbGV0aW9uczogQXV0b2NvbXBsZXRpb25bXVtdID0gZW50aXJlU2VxdWVuY2UuZ2V0U2VxdWVuY2VPZkNvbXBsZXRpb25zKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlcXVlbmNlOiBSdWxlID0gYXV0b2NvbXBsZXRpb24uZ2V0U2VxdWVuY2UoKTtcclxuICAgICAgICAgICAgbGV0IGluc2VydGlvblN0cmluZzogc3RyaW5nID0gXCJcIjtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBbaWR4LCBhdXRvY29tcGxldGlvbnNdIG9mIHNlcXVlbmNlT2ZDb21wbGV0aW9ucy5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG46IG51bWJlciA9IGF1dG9jb21wbGV0aW9ucy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBpZihuID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5hbWU6IHN0cmluZyA9IHNlcXVlbmNlLmdldE5hbWVGb3JDaGlsZChpZHgpIGFzIHN0cmluZztcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwOiBBdXRvY29tcGxldGlvbi5QYXJhbWV0ZXJpemVkID0gbmV3IEF1dG9jb21wbGV0aW9uLlBhcmFtZXRlcml6ZWQoc2VxdWVuY2UuZ2V0Q2hpbGRyZW4oKVtpZHhdLCBuYW1lLCBuYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpMDogbnVtYmVyID0gb2Zmc2V0ICsgaW5zZXJ0aW9uU3RyaW5nLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpMSA9IGkwICsgbmFtZS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0LnB1c2gobmV3IFBhcnNlZFBhcmFtKG5hbWUsIGkwLCBpMSwgcCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGluc2VydGlvblN0cmluZyArPSBuYW1lO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZihuID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2luZ2xlOiBBdXRvY29tcGxldGlvbiA9IGF1dG9jb21wbGV0aW9uc1swXTtcclxuICAgICAgICAgICAgICAgICAgICBpZihzaW5nbGUgaW5zdGFuY2VvZiBBdXRvY29tcGxldGlvbi5MaXRlcmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydGlvblN0cmluZyArPSBzaW5nbGUuZ2V0Q29tcGxldGlvbihBdXRvY29tcGxldGlvbi5QdXJwb3NlLkZPUl9JTlNFUlRJT04pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKHNpbmdsZSBpbnN0YW5jZW9mIEF1dG9jb21wbGV0aW9uLlBhcmFtZXRlcml6ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyYW1ldGVyaXplZDogQXV0b2NvbXBsZXRpb24uUGFyYW1ldGVyaXplZCA9IHNpbmdsZSBhcyBBdXRvY29tcGxldGlvbi5QYXJhbWV0ZXJpemVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzOiBzdHJpbmcgPSBwYXJhbWV0ZXJpemVkLmdldFBhcmFtTmFtZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpMDogbnVtYmVyID0gb2Zmc2V0ICsgaW5zZXJ0aW9uU3RyaW5nLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaTE6IG51bWJlciA9IGkwICsgcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldC5wdXNoKG5ldyBQYXJzZWRQYXJhbShzLCBpMCwgaTEsIHBhcmFtZXRlcml6ZWQpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0aW9uU3RyaW5nICs9IHM7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoc2luZ2xlIGluc3RhbmNlb2YgQXV0b2NvbXBsZXRpb24uRW50aXJlU2VxdWVuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZW50aXJlOiBBdXRvY29tcGxldGlvbi5FbnRpcmVTZXF1ZW5jZSA9IHNpbmdsZSBhcyBBdXRvY29tcGxldGlvbi5FbnRpcmVTZXF1ZW5jZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2ZmczogbnVtYmVyID0gb2Zmc2V0ICsgaW5zZXJ0aW9uU3RyaW5nLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgczogc3RyaW5nID0gUGFyYW1ldGVyaXplZENvbXBsZXRpb24ucGFyc2VQYXJhbWV0ZXJzKGVudGlyZSwgcmV0LCBvZmZzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0aW9uU3RyaW5nICs9IHM7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlVua25vd24gY29tcGxldGlvbiB0eXBlOiBcIiArIHR5cGVvZihhdXRvY29tcGxldGlvbikpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBpbnNlcnRpb25TdHJpbmc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgY29tcGxldGlvbiB0eXBlOiBcIiArIHR5cGVvZihhdXRvY29tcGxldGlvbikpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUGFyc2VkUGFyYW0ge1xyXG5cclxuICAgIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcclxuICAgIHJlYWRvbmx5IGkwOiBudW1iZXI7XHJcbiAgICByZWFkb25seSBpMTogbnVtYmVyO1xyXG5cclxuICAgIHJlYWRvbmx5IGF1dG9jb21wbGV0aW9uOiBBdXRvY29tcGxldGlvbjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIGkwOiBudW1iZXIsIGkxOiBudW1iZXIsIGF1dG9jb21wbGV0aW9uOiBBdXRvY29tcGxldGlvbikge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5pMCA9IGkwO1xyXG4gICAgICAgIHRoaXMuaTEgPSBpMTtcclxuICAgICAgICB0aGlzLmF1dG9jb21wbGV0aW9uID0gYXV0b2NvbXBsZXRpb247XHJcbiAgICB9XHJcblxyXG4gICAgdG9TdHJpbmcoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCAqIGZyb20gXCIuL0FDQ29tcGxldGVyLmpzXCJcclxuZXhwb3J0ICogZnJvbSBcIi4vQUNFZGl0b3IuanNcIlxyXG5leHBvcnQgKiBmcm9tIFwiLi9QYXJhbWV0ZXJpemVkQ29tcGxldGlvbi5qc1wiXHJcbiIsImNsYXNzIEludFJhbmdlIHtcclxuXHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgTUFYX0lOVCA9IDIxNDc0ODM2NDc7XHJcblxyXG4gICAgc3RhdGljIHJlYWRvbmx5IFNUQVI6ICAgICBJbnRSYW5nZSA9IG5ldyBJbnRSYW5nZSgwLCBJbnRSYW5nZS5NQVhfSU5UKTtcclxuICAgIHN0YXRpYyByZWFkb25seSBQTFVTOiAgICAgSW50UmFuZ2UgPSBuZXcgSW50UmFuZ2UoMSwgSW50UmFuZ2UuTUFYX0lOVCk7XHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgT1BUSU9OQUw6IEludFJhbmdlID0gbmV3IEludFJhbmdlKDAsIDEpO1xyXG4gICAgXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGxvd2VyOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHVwcGVyOiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IobG93ZXI6IG51bWJlciwgdXBwZXI/OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLmxvd2VyID0gbG93ZXI7XHJcbiAgICAgICAgdGhpcy51cHBlciA9IHVwcGVyICE9PSB1bmRlZmluZWQgPyB1cHBlciA6IGxvd2VyO1xyXG4gICAgfVxyXG5cclxuICAgIGdldExvd2VyKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubG93ZXI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VXBwZXIoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy51cHBlcjtcclxuICAgIH1cclxuXHJcbiAgICBlcXVhbHMobzogYW55KTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYoIShvIGluc3RhbmNlb2YgSW50UmFuZ2UpKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgY29uc3QgciA9IG8gYXMgSW50UmFuZ2U7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubG93ZXIgPT09IHIubG93ZXIgJiYgdGhpcy51cHBlciA9PT0gci51cHBlcjtcclxuICAgIH1cclxuXHJcbiAgICB0b1N0cmluZygpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBcIltcIiArIHRoaXMubG93ZXIgKyBcIiAtIFwiICsgdGhpcy51cHBlciArIFwiXVwiO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBJbnRSYW5nZSB9IiwiZXhwb3J0ICogZnJvbSBcIi4vSW50UmFuZ2UuanNcIjsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBzdGF0ZSA9IHJlcXVpcmUoJ0Bjb2RlbWlycm9yL3N0YXRlJyk7XG52YXIgdmlldyA9IHJlcXVpcmUoJ0Bjb2RlbWlycm9yL3ZpZXcnKTtcbnZhciBsYW5ndWFnZSA9IHJlcXVpcmUoJ0Bjb2RlbWlycm9yL2xhbmd1YWdlJyk7XG5cbi8qKlxuQW4gaW5zdGFuY2Ugb2YgdGhpcyBpcyBwYXNzZWQgdG8gY29tcGxldGlvbiBzb3VyY2UgZnVuY3Rpb25zLlxuKi9cbmNsYXNzIENvbXBsZXRpb25Db250ZXh0IHtcbiAgICAvKipcbiAgICBDcmVhdGUgYSBuZXcgY29tcGxldGlvbiBjb250ZXh0LiAoTW9zdGx5IHVzZWZ1bCBmb3IgdGVzdGluZ1xuICAgIGNvbXBsZXRpb24gc291cmNlc+KAlGluIHRoZSBlZGl0b3IsIHRoZSBleHRlbnNpb24gd2lsbCBjcmVhdGVcbiAgICB0aGVzZSBmb3IgeW91LilcbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgIFRoZSBlZGl0b3Igc3RhdGUgdGhhdCB0aGUgY29tcGxldGlvbiBoYXBwZW5zIGluLlxuICAgICovXG4gICAgc3RhdGUsIFxuICAgIC8qKlxuICAgIFRoZSBwb3NpdGlvbiBhdCB3aGljaCB0aGUgY29tcGxldGlvbiBpcyBoYXBwZW5pbmcuXG4gICAgKi9cbiAgICBwb3MsIFxuICAgIC8qKlxuICAgIEluZGljYXRlcyB3aGV0aGVyIGNvbXBsZXRpb24gd2FzIGFjdGl2YXRlZCBleHBsaWNpdGx5LCBvclxuICAgIGltcGxpY2l0bHkgYnkgdHlwaW5nLiBUaGUgdXN1YWwgd2F5IHRvIHJlc3BvbmQgdG8gdGhpcyBpcyB0b1xuICAgIG9ubHkgcmV0dXJuIGNvbXBsZXRpb25zIHdoZW4gZWl0aGVyIHRoZXJlIGlzIHBhcnQgb2YgYVxuICAgIGNvbXBsZXRhYmxlIGVudGl0eSBiZWZvcmUgdGhlIGN1cnNvciwgb3IgYGV4cGxpY2l0YCBpcyB0cnVlLlxuICAgICovXG4gICAgZXhwbGljaXQpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB0aGlzLnBvcyA9IHBvcztcbiAgICAgICAgdGhpcy5leHBsaWNpdCA9IGV4cGxpY2l0O1xuICAgICAgICAvKipcbiAgICAgICAgQGludGVybmFsXG4gICAgICAgICovXG4gICAgICAgIHRoaXMuYWJvcnRMaXN0ZW5lcnMgPSBbXTtcbiAgICB9XG4gICAgLyoqXG4gICAgR2V0IHRoZSBleHRlbnQsIGNvbnRlbnQsIGFuZCAoaWYgdGhlcmUgaXMgYSB0b2tlbikgdHlwZSBvZiB0aGVcbiAgICB0b2tlbiBiZWZvcmUgYHRoaXMucG9zYC5cbiAgICAqL1xuICAgIHRva2VuQmVmb3JlKHR5cGVzKSB7XG4gICAgICAgIGxldCB0b2tlbiA9IGxhbmd1YWdlLnN5bnRheFRyZWUodGhpcy5zdGF0ZSkucmVzb2x2ZUlubmVyKHRoaXMucG9zLCAtMSk7XG4gICAgICAgIHdoaWxlICh0b2tlbiAmJiB0eXBlcy5pbmRleE9mKHRva2VuLm5hbWUpIDwgMClcbiAgICAgICAgICAgIHRva2VuID0gdG9rZW4ucGFyZW50O1xuICAgICAgICByZXR1cm4gdG9rZW4gPyB7IGZyb206IHRva2VuLmZyb20sIHRvOiB0aGlzLnBvcyxcbiAgICAgICAgICAgIHRleHQ6IHRoaXMuc3RhdGUuc2xpY2VEb2ModG9rZW4uZnJvbSwgdGhpcy5wb3MpLFxuICAgICAgICAgICAgdHlwZTogdG9rZW4udHlwZSB9IDogbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgR2V0IHRoZSBtYXRjaCBvZiB0aGUgZ2l2ZW4gZXhwcmVzc2lvbiBkaXJlY3RseSBiZWZvcmUgdGhlXG4gICAgY3Vyc29yLlxuICAgICovXG4gICAgbWF0Y2hCZWZvcmUoZXhwcikge1xuICAgICAgICBsZXQgbGluZSA9IHRoaXMuc3RhdGUuZG9jLmxpbmVBdCh0aGlzLnBvcyk7XG4gICAgICAgIGxldCBzdGFydCA9IE1hdGgubWF4KGxpbmUuZnJvbSwgdGhpcy5wb3MgLSAyNTApO1xuICAgICAgICBsZXQgc3RyID0gbGluZS50ZXh0LnNsaWNlKHN0YXJ0IC0gbGluZS5mcm9tLCB0aGlzLnBvcyAtIGxpbmUuZnJvbSk7XG4gICAgICAgIGxldCBmb3VuZCA9IHN0ci5zZWFyY2goZW5zdXJlQW5jaG9yKGV4cHIsIGZhbHNlKSk7XG4gICAgICAgIHJldHVybiBmb3VuZCA8IDAgPyBudWxsIDogeyBmcm9tOiBzdGFydCArIGZvdW5kLCB0bzogdGhpcy5wb3MsIHRleHQ6IHN0ci5zbGljZShmb3VuZCkgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgWWllbGRzIHRydWUgd2hlbiB0aGUgcXVlcnkgaGFzIGJlZW4gYWJvcnRlZC4gQ2FuIGJlIHVzZWZ1bCBpblxuICAgIGFzeW5jaHJvbm91cyBxdWVyaWVzIHRvIGF2b2lkIGRvaW5nIHdvcmsgdGhhdCB3aWxsIGJlIGlnbm9yZWQuXG4gICAgKi9cbiAgICBnZXQgYWJvcnRlZCgpIHsgcmV0dXJuIHRoaXMuYWJvcnRMaXN0ZW5lcnMgPT0gbnVsbDsgfVxuICAgIC8qKlxuICAgIEFsbG93cyB5b3UgdG8gcmVnaXN0ZXIgYWJvcnQgaGFuZGxlcnMsIHdoaWNoIHdpbGwgYmUgY2FsbGVkIHdoZW5cbiAgICB0aGUgcXVlcnkgaXNcbiAgICBbYWJvcnRlZF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNhdXRvY29tcGxldGUuQ29tcGxldGlvbkNvbnRleHQuYWJvcnRlZCkuXG4gICAgKi9cbiAgICBhZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICAgIGlmICh0eXBlID09IFwiYWJvcnRcIiAmJiB0aGlzLmFib3J0TGlzdGVuZXJzKVxuICAgICAgICAgICAgdGhpcy5hYm9ydExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9XG59XG5mdW5jdGlvbiB0b1NldChjaGFycykge1xuICAgIGxldCBmbGF0ID0gT2JqZWN0LmtleXMoY2hhcnMpLmpvaW4oXCJcIik7XG4gICAgbGV0IHdvcmRzID0gL1xcdy8udGVzdChmbGF0KTtcbiAgICBpZiAod29yZHMpXG4gICAgICAgIGZsYXQgPSBmbGF0LnJlcGxhY2UoL1xcdy9nLCBcIlwiKTtcbiAgICByZXR1cm4gYFske3dvcmRzID8gXCJcXFxcd1wiIDogXCJcIn0ke2ZsYXQucmVwbGFjZSgvW15cXHdcXHNdL2csIFwiXFxcXCQmXCIpfV1gO1xufVxuZnVuY3Rpb24gcHJlZml4TWF0Y2gob3B0aW9ucykge1xuICAgIGxldCBmaXJzdCA9IE9iamVjdC5jcmVhdGUobnVsbCksIHJlc3QgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGZvciAobGV0IHsgbGFiZWwgfSBvZiBvcHRpb25zKSB7XG4gICAgICAgIGZpcnN0W2xhYmVsWzBdXSA9IHRydWU7XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbGFiZWwubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICByZXN0W2xhYmVsW2ldXSA9IHRydWU7XG4gICAgfVxuICAgIGxldCBzb3VyY2UgPSB0b1NldChmaXJzdCkgKyB0b1NldChyZXN0KSArIFwiKiRcIjtcbiAgICByZXR1cm4gW25ldyBSZWdFeHAoXCJeXCIgKyBzb3VyY2UpLCBuZXcgUmVnRXhwKHNvdXJjZSldO1xufVxuLyoqXG5HaXZlbiBhIGEgZml4ZWQgYXJyYXkgb2Ygb3B0aW9ucywgcmV0dXJuIGFuIGF1dG9jb21wbGV0ZXIgdGhhdFxuY29tcGxldGVzIHRoZW0uXG4qL1xuZnVuY3Rpb24gY29tcGxldGVGcm9tTGlzdChsaXN0KSB7XG4gICAgbGV0IG9wdGlvbnMgPSBsaXN0Lm1hcChvID0+IHR5cGVvZiBvID09IFwic3RyaW5nXCIgPyB7IGxhYmVsOiBvIH0gOiBvKTtcbiAgICBsZXQgW3ZhbGlkRm9yLCBtYXRjaF0gPSBvcHRpb25zLmV2ZXJ5KG8gPT4gL15cXHcrJC8udGVzdChvLmxhYmVsKSkgPyBbL1xcdyokLywgL1xcdyskL10gOiBwcmVmaXhNYXRjaChvcHRpb25zKTtcbiAgICByZXR1cm4gKGNvbnRleHQpID0+IHtcbiAgICAgICAgbGV0IHRva2VuID0gY29udGV4dC5tYXRjaEJlZm9yZShtYXRjaCk7XG4gICAgICAgIHJldHVybiB0b2tlbiB8fCBjb250ZXh0LmV4cGxpY2l0ID8geyBmcm9tOiB0b2tlbiA/IHRva2VuLmZyb20gOiBjb250ZXh0LnBvcywgb3B0aW9ucywgdmFsaWRGb3IgfSA6IG51bGw7XG4gICAgfTtcbn1cbi8qKlxuV3JhcCB0aGUgZ2l2ZW4gY29tcGxldGlvbiBzb3VyY2Ugc28gdGhhdCBpdCB3aWxsIG9ubHkgZmlyZSB3aGVuIHRoZVxuY3Vyc29yIGlzIGluIGEgc3ludGF4IG5vZGUgd2l0aCBvbmUgb2YgdGhlIGdpdmVuIG5hbWVzLlxuKi9cbmZ1bmN0aW9uIGlmSW4obm9kZXMsIHNvdXJjZSkge1xuICAgIHJldHVybiAoY29udGV4dCkgPT4ge1xuICAgICAgICBmb3IgKGxldCBwb3MgPSBsYW5ndWFnZS5zeW50YXhUcmVlKGNvbnRleHQuc3RhdGUpLnJlc29sdmVJbm5lcihjb250ZXh0LnBvcywgLTEpOyBwb3M7IHBvcyA9IHBvcy5wYXJlbnQpIHtcbiAgICAgICAgICAgIGlmIChub2Rlcy5pbmRleE9mKHBvcy5uYW1lKSA+IC0xKVxuICAgICAgICAgICAgICAgIHJldHVybiBzb3VyY2UoY29udGV4dCk7XG4gICAgICAgICAgICBpZiAocG9zLnR5cGUuaXNUb3ApXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbn1cbi8qKlxuV3JhcCB0aGUgZ2l2ZW4gY29tcGxldGlvbiBzb3VyY2Ugc28gdGhhdCBpdCB3aWxsIG5vdCBmaXJlIHdoZW4gdGhlXG5jdXJzb3IgaXMgaW4gYSBzeW50YXggbm9kZSB3aXRoIG9uZSBvZiB0aGUgZ2l2ZW4gbmFtZXMuXG4qL1xuZnVuY3Rpb24gaWZOb3RJbihub2Rlcywgc291cmNlKSB7XG4gICAgcmV0dXJuIChjb250ZXh0KSA9PiB7XG4gICAgICAgIGZvciAobGV0IHBvcyA9IGxhbmd1YWdlLnN5bnRheFRyZWUoY29udGV4dC5zdGF0ZSkucmVzb2x2ZUlubmVyKGNvbnRleHQucG9zLCAtMSk7IHBvczsgcG9zID0gcG9zLnBhcmVudCkge1xuICAgICAgICAgICAgaWYgKG5vZGVzLmluZGV4T2YocG9zLm5hbWUpID4gLTEpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBpZiAocG9zLnR5cGUuaXNUb3ApXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNvdXJjZShjb250ZXh0KTtcbiAgICB9O1xufVxuY2xhc3MgT3B0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb21wbGV0aW9uLCBzb3VyY2UsIG1hdGNoLCBzY29yZSkge1xuICAgICAgICB0aGlzLmNvbXBsZXRpb24gPSBjb21wbGV0aW9uO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgdGhpcy5tYXRjaCA9IG1hdGNoO1xuICAgICAgICB0aGlzLnNjb3JlID0gc2NvcmU7XG4gICAgfVxufVxuZnVuY3Rpb24gY3VyKHN0YXRlKSB7IHJldHVybiBzdGF0ZS5zZWxlY3Rpb24ubWFpbi5mcm9tOyB9XG4vLyBNYWtlIHN1cmUgdGhlIGdpdmVuIHJlZ2V4cCBoYXMgYSAkIGF0IGl0cyBlbmQgYW5kLCBpZiBgc3RhcnRgIGlzXG4vLyB0cnVlLCBhIF4gYXQgaXRzIHN0YXJ0LlxuZnVuY3Rpb24gZW5zdXJlQW5jaG9yKGV4cHIsIHN0YXJ0KSB7XG4gICAgdmFyIF9hO1xuICAgIGxldCB7IHNvdXJjZSB9ID0gZXhwcjtcbiAgICBsZXQgYWRkU3RhcnQgPSBzdGFydCAmJiBzb3VyY2VbMF0gIT0gXCJeXCIsIGFkZEVuZCA9IHNvdXJjZVtzb3VyY2UubGVuZ3RoIC0gMV0gIT0gXCIkXCI7XG4gICAgaWYgKCFhZGRTdGFydCAmJiAhYWRkRW5kKVxuICAgICAgICByZXR1cm4gZXhwcjtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChgJHthZGRTdGFydCA/IFwiXlwiIDogXCJcIn0oPzoke3NvdXJjZX0pJHthZGRFbmQgPyBcIiRcIiA6IFwiXCJ9YCwgKF9hID0gZXhwci5mbGFncykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogKGV4cHIuaWdub3JlQ2FzZSA/IFwiaVwiIDogXCJcIikpO1xufVxuLyoqXG5UaGlzIGFubm90YXRpb24gaXMgYWRkZWQgdG8gdHJhbnNhY3Rpb25zIHRoYXQgYXJlIHByb2R1Y2VkIGJ5XG5waWNraW5nIGEgY29tcGxldGlvbi5cbiovXG5jb25zdCBwaWNrZWRDb21wbGV0aW9uID0gc3RhdGUuQW5ub3RhdGlvbi5kZWZpbmUoKTtcbi8qKlxuSGVscGVyIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHRyYW5zYWN0aW9uIHNwZWMgd2hpY2ggaW5zZXJ0cyBhXG5jb21wbGV0aW9uJ3MgdGV4dCBpbiB0aGUgbWFpbiBzZWxlY3Rpb24gcmFuZ2UsIGFuZCBhbnkgb3RoZXJcbnNlbGVjdGlvbiByYW5nZSB0aGF0IGhhcyB0aGUgc2FtZSB0ZXh0IGluIGZyb250IG9mIGl0LlxuKi9cbmZ1bmN0aW9uIGluc2VydENvbXBsZXRpb25UZXh0KHN0YXRlJDEsIHRleHQsIGZyb20sIHRvKSB7XG4gICAgbGV0IHsgbWFpbiB9ID0gc3RhdGUkMS5zZWxlY3Rpb24sIGZyb21PZmYgPSBmcm9tIC0gbWFpbi5mcm9tLCB0b09mZiA9IHRvIC0gbWFpbi5mcm9tO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHN0YXRlJDEuY2hhbmdlQnlSYW5nZShyYW5nZSA9PiB7XG4gICAgICAgIGlmIChyYW5nZSAhPSBtYWluICYmIGZyb20gIT0gdG8gJiZcbiAgICAgICAgICAgIHN0YXRlJDEuc2xpY2VEb2MocmFuZ2UuZnJvbSArIGZyb21PZmYsIHJhbmdlLmZyb20gKyB0b09mZikgIT0gc3RhdGUkMS5zbGljZURvYyhmcm9tLCB0bykpXG4gICAgICAgICAgICByZXR1cm4geyByYW5nZSB9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2hhbmdlczogeyBmcm9tOiByYW5nZS5mcm9tICsgZnJvbU9mZiwgdG86IHRvID09IG1haW4uZnJvbSA/IHJhbmdlLnRvIDogcmFuZ2UuZnJvbSArIHRvT2ZmLCBpbnNlcnQ6IHRleHQgfSxcbiAgICAgICAgICAgIHJhbmdlOiBzdGF0ZS5FZGl0b3JTZWxlY3Rpb24uY3Vyc29yKHJhbmdlLmZyb20gKyBmcm9tT2ZmICsgdGV4dC5sZW5ndGgpXG4gICAgICAgIH07XG4gICAgfSkpLCB7IHNjcm9sbEludG9WaWV3OiB0cnVlLCB1c2VyRXZlbnQ6IFwiaW5wdXQuY29tcGxldGVcIiB9KTtcbn1cbmNvbnN0IFNvdXJjZUNhY2hlID0gbmV3IFdlYWtNYXAoKTtcbmZ1bmN0aW9uIGFzU291cmNlKHNvdXJjZSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShzb3VyY2UpKVxuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgIGxldCBrbm93biA9IFNvdXJjZUNhY2hlLmdldChzb3VyY2UpO1xuICAgIGlmICgha25vd24pXG4gICAgICAgIFNvdXJjZUNhY2hlLnNldChzb3VyY2UsIGtub3duID0gY29tcGxldGVGcm9tTGlzdChzb3VyY2UpKTtcbiAgICByZXR1cm4ga25vd247XG59XG5jb25zdCBzdGFydENvbXBsZXRpb25FZmZlY3QgPSBzdGF0ZS5TdGF0ZUVmZmVjdC5kZWZpbmUoKTtcbmNvbnN0IGNsb3NlQ29tcGxldGlvbkVmZmVjdCA9IHN0YXRlLlN0YXRlRWZmZWN0LmRlZmluZSgpO1xuXG4vLyBBIHBhdHRlcm4gbWF0Y2hlciBmb3IgZnV6enkgY29tcGxldGlvbiBtYXRjaGluZy4gQ3JlYXRlIGFuIGluc3RhbmNlXG4vLyBvbmNlIGZvciBhIHBhdHRlcm4sIGFuZCB0aGVuIHVzZSB0aGF0IHRvIG1hdGNoIGFueSBudW1iZXIgb2Zcbi8vIGNvbXBsZXRpb25zLlxuY2xhc3MgRnV6enlNYXRjaGVyIHtcbiAgICBjb25zdHJ1Y3RvcihwYXR0ZXJuKSB7XG4gICAgICAgIHRoaXMucGF0dGVybiA9IHBhdHRlcm47XG4gICAgICAgIHRoaXMuY2hhcnMgPSBbXTtcbiAgICAgICAgdGhpcy5mb2xkZWQgPSBbXTtcbiAgICAgICAgLy8gQnVmZmVycyByZXVzZWQgYnkgY2FsbHMgdG8gYG1hdGNoYCB0byB0cmFjayBtYXRjaGVkIGNoYXJhY3RlclxuICAgICAgICAvLyBwb3NpdGlvbnMuXG4gICAgICAgIHRoaXMuYW55ID0gW107XG4gICAgICAgIHRoaXMucHJlY2lzZSA9IFtdO1xuICAgICAgICB0aGlzLmJ5V29yZCA9IFtdO1xuICAgICAgICB0aGlzLnNjb3JlID0gMDtcbiAgICAgICAgdGhpcy5tYXRjaGVkID0gW107XG4gICAgICAgIGZvciAobGV0IHAgPSAwOyBwIDwgcGF0dGVybi5sZW5ndGg7KSB7XG4gICAgICAgICAgICBsZXQgY2hhciA9IHN0YXRlLmNvZGVQb2ludEF0KHBhdHRlcm4sIHApLCBzaXplID0gc3RhdGUuY29kZVBvaW50U2l6ZShjaGFyKTtcbiAgICAgICAgICAgIHRoaXMuY2hhcnMucHVzaChjaGFyKTtcbiAgICAgICAgICAgIGxldCBwYXJ0ID0gcGF0dGVybi5zbGljZShwLCBwICsgc2l6ZSksIHVwcGVyID0gcGFydC50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgdGhpcy5mb2xkZWQucHVzaChzdGF0ZS5jb2RlUG9pbnRBdCh1cHBlciA9PSBwYXJ0ID8gcGFydC50b0xvd2VyQ2FzZSgpIDogdXBwZXIsIDApKTtcbiAgICAgICAgICAgIHAgKz0gc2l6ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFzdHJhbCA9IHBhdHRlcm4ubGVuZ3RoICE9IHRoaXMuY2hhcnMubGVuZ3RoO1xuICAgIH1cbiAgICByZXQoc2NvcmUsIG1hdGNoZWQpIHtcbiAgICAgICAgdGhpcy5zY29yZSA9IHNjb3JlO1xuICAgICAgICB0aGlzLm1hdGNoZWQgPSBtYXRjaGVkO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLy8gTWF0Y2hlcyBhIGdpdmVuIHdvcmQgKGNvbXBsZXRpb24pIGFnYWluc3QgdGhlIHBhdHRlcm4gKGlucHV0KS5cbiAgICAvLyBXaWxsIHJldHVybiBhIGJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZXJlIHdhcyBhIG1hdGNoIGFuZCxcbiAgICAvLyBvbiBzdWNjZXNzLCBzZXQgYHRoaXMuc2NvcmVgIHRvIHRoZSBzY29yZSwgYHRoaXMubWF0Y2hlZGAgdG8gYW5cbiAgICAvLyBhcnJheSBvZiBgZnJvbSwgdG9gIHBhaXJzIGluZGljYXRpbmcgdGhlIG1hdGNoZWQgcGFydHMgb2YgYHdvcmRgLlxuICAgIC8vXG4gICAgLy8gVGhlIHNjb3JlIGlzIGEgbnVtYmVyIHRoYXQgaXMgbW9yZSBuZWdhdGl2ZSB0aGUgd29yc2UgdGhlIG1hdGNoXG4gICAgLy8gaXMuIFNlZSBgUGVuYWx0eWAgYWJvdmUuXG4gICAgbWF0Y2god29yZCkge1xuICAgICAgICBpZiAodGhpcy5wYXR0ZXJuLmxlbmd0aCA9PSAwKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmV0KC0xMDAgLyogUGVuYWx0eS5Ob3RGdWxsICovLCBbXSk7XG4gICAgICAgIGlmICh3b3JkLmxlbmd0aCA8IHRoaXMucGF0dGVybi5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgbGV0IHsgY2hhcnMsIGZvbGRlZCwgYW55LCBwcmVjaXNlLCBieVdvcmQgfSA9IHRoaXM7XG4gICAgICAgIC8vIEZvciBzaW5nbGUtY2hhcmFjdGVyIHF1ZXJpZXMsIG9ubHkgbWF0Y2ggd2hlbiB0aGV5IG9jY3VyIHJpZ2h0XG4gICAgICAgIC8vIGF0IHRoZSBzdGFydFxuICAgICAgICBpZiAoY2hhcnMubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgIGxldCBmaXJzdCA9IHN0YXRlLmNvZGVQb2ludEF0KHdvcmQsIDApLCBmaXJzdFNpemUgPSBzdGF0ZS5jb2RlUG9pbnRTaXplKGZpcnN0KTtcbiAgICAgICAgICAgIGxldCBzY29yZSA9IGZpcnN0U2l6ZSA9PSB3b3JkLmxlbmd0aCA/IDAgOiAtMTAwIC8qIFBlbmFsdHkuTm90RnVsbCAqLztcbiAgICAgICAgICAgIGlmIChmaXJzdCA9PSBjaGFyc1swXSkgO1xuICAgICAgICAgICAgZWxzZSBpZiAoZmlyc3QgPT0gZm9sZGVkWzBdKVxuICAgICAgICAgICAgICAgIHNjb3JlICs9IC0yMDAgLyogUGVuYWx0eS5DYXNlRm9sZCAqLztcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJldChzY29yZSwgWzAsIGZpcnN0U2l6ZV0pO1xuICAgICAgICB9XG4gICAgICAgIGxldCBkaXJlY3QgPSB3b3JkLmluZGV4T2YodGhpcy5wYXR0ZXJuKTtcbiAgICAgICAgaWYgKGRpcmVjdCA9PSAwKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmV0KHdvcmQubGVuZ3RoID09IHRoaXMucGF0dGVybi5sZW5ndGggPyAwIDogLTEwMCAvKiBQZW5hbHR5Lk5vdEZ1bGwgKi8sIFswLCB0aGlzLnBhdHRlcm4ubGVuZ3RoXSk7XG4gICAgICAgIGxldCBsZW4gPSBjaGFycy5sZW5ndGgsIGFueVRvID0gMDtcbiAgICAgICAgaWYgKGRpcmVjdCA8IDApIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBlID0gTWF0aC5taW4od29yZC5sZW5ndGgsIDIwMCk7IGkgPCBlICYmIGFueVRvIDwgbGVuOykge1xuICAgICAgICAgICAgICAgIGxldCBuZXh0ID0gc3RhdGUuY29kZVBvaW50QXQod29yZCwgaSk7XG4gICAgICAgICAgICAgICAgaWYgKG5leHQgPT0gY2hhcnNbYW55VG9dIHx8IG5leHQgPT0gZm9sZGVkW2FueVRvXSlcbiAgICAgICAgICAgICAgICAgICAgYW55W2FueVRvKytdID0gaTtcbiAgICAgICAgICAgICAgICBpICs9IHN0YXRlLmNvZGVQb2ludFNpemUobmV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBObyBtYXRjaCwgZXhpdCBpbW1lZGlhdGVseVxuICAgICAgICAgICAgaWYgKGFueVRvIDwgbGVuKVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRoaXMgdHJhY2tzIHRoZSBleHRlbnQgb2YgdGhlIHByZWNpc2UgKG5vbi1mb2xkZWQsIG5vdFxuICAgICAgICAvLyBuZWNlc3NhcmlseSBhZGphY2VudCkgbWF0Y2hcbiAgICAgICAgbGV0IHByZWNpc2VUbyA9IDA7XG4gICAgICAgIC8vIFRyYWNrcyB3aGV0aGVyIHRoZXJlIGlzIGEgbWF0Y2ggdGhhdCBoaXRzIG9ubHkgY2hhcmFjdGVycyB0aGF0XG4gICAgICAgIC8vIGFwcGVhciB0byBiZSBzdGFydGluZyB3b3Jkcy4gYGJ5V29yZEZvbGRlZGAgaXMgc2V0IHRvIHRydWUgd2hlblxuICAgICAgICAvLyBhIGNhc2UgZm9sZGVkIGNoYXJhY3RlciBpcyBlbmNvdW50ZXJlZCBpbiBzdWNoIGEgbWF0Y2hcbiAgICAgICAgbGV0IGJ5V29yZFRvID0gMCwgYnlXb3JkRm9sZGVkID0gZmFsc2U7XG4gICAgICAgIC8vIElmIHdlJ3ZlIGZvdW5kIGEgcGFydGlhbCBhZGphY2VudCBtYXRjaCwgdGhlc2UgdHJhY2sgaXRzIHN0YXRlXG4gICAgICAgIGxldCBhZGphY2VudFRvID0gMCwgYWRqYWNlbnRTdGFydCA9IC0xLCBhZGphY2VudEVuZCA9IC0xO1xuICAgICAgICBsZXQgaGFzTG93ZXIgPSAvW2Etel0vLnRlc3Qod29yZCksIHdvcmRBZGphY2VudCA9IHRydWU7XG4gICAgICAgIC8vIEdvIG92ZXIgdGhlIG9wdGlvbidzIHRleHQsIHNjYW5uaW5nIGZvciB0aGUgdmFyaW91cyBraW5kcyBvZiBtYXRjaGVzXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBlID0gTWF0aC5taW4od29yZC5sZW5ndGgsIDIwMCksIHByZXZUeXBlID0gMCAvKiBUcC5Ob25Xb3JkICovOyBpIDwgZSAmJiBieVdvcmRUbyA8IGxlbjspIHtcbiAgICAgICAgICAgIGxldCBuZXh0ID0gc3RhdGUuY29kZVBvaW50QXQod29yZCwgaSk7XG4gICAgICAgICAgICBpZiAoZGlyZWN0IDwgMCkge1xuICAgICAgICAgICAgICAgIGlmIChwcmVjaXNlVG8gPCBsZW4gJiYgbmV4dCA9PSBjaGFyc1twcmVjaXNlVG9dKVxuICAgICAgICAgICAgICAgICAgICBwcmVjaXNlW3ByZWNpc2VUbysrXSA9IGk7XG4gICAgICAgICAgICAgICAgaWYgKGFkamFjZW50VG8gPCBsZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHQgPT0gY2hhcnNbYWRqYWNlbnRUb10gfHwgbmV4dCA9PSBmb2xkZWRbYWRqYWNlbnRUb10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhZGphY2VudFRvID09IDApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRqYWNlbnRTdGFydCA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGphY2VudEVuZCA9IGkgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRqYWNlbnRUbysrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRqYWNlbnRUbyA9IDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgY2gsIHR5cGUgPSBuZXh0IDwgMHhmZlxuICAgICAgICAgICAgICAgID8gKG5leHQgPj0gNDggJiYgbmV4dCA8PSA1NyB8fCBuZXh0ID49IDk3ICYmIG5leHQgPD0gMTIyID8gMiAvKiBUcC5Mb3dlciAqLyA6IG5leHQgPj0gNjUgJiYgbmV4dCA8PSA5MCA/IDEgLyogVHAuVXBwZXIgKi8gOiAwIC8qIFRwLk5vbldvcmQgKi8pXG4gICAgICAgICAgICAgICAgOiAoKGNoID0gc3RhdGUuZnJvbUNvZGVQb2ludChuZXh0KSkgIT0gY2gudG9Mb3dlckNhc2UoKSA/IDEgLyogVHAuVXBwZXIgKi8gOiBjaCAhPSBjaC50b1VwcGVyQ2FzZSgpID8gMiAvKiBUcC5Mb3dlciAqLyA6IDAgLyogVHAuTm9uV29yZCAqLyk7XG4gICAgICAgICAgICBpZiAoIWkgfHwgdHlwZSA9PSAxIC8qIFRwLlVwcGVyICovICYmIGhhc0xvd2VyIHx8IHByZXZUeXBlID09IDAgLyogVHAuTm9uV29yZCAqLyAmJiB0eXBlICE9IDAgLyogVHAuTm9uV29yZCAqLykge1xuICAgICAgICAgICAgICAgIGlmIChjaGFyc1tieVdvcmRUb10gPT0gbmV4dCB8fCAoZm9sZGVkW2J5V29yZFRvXSA9PSBuZXh0ICYmIChieVdvcmRGb2xkZWQgPSB0cnVlKSkpXG4gICAgICAgICAgICAgICAgICAgIGJ5V29yZFtieVdvcmRUbysrXSA9IGk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYnlXb3JkLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgd29yZEFkamFjZW50ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmV2VHlwZSA9IHR5cGU7XG4gICAgICAgICAgICBpICs9IHN0YXRlLmNvZGVQb2ludFNpemUobmV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJ5V29yZFRvID09IGxlbiAmJiBieVdvcmRbMF0gPT0gMCAmJiB3b3JkQWRqYWNlbnQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXN1bHQoLTEwMCAvKiBQZW5hbHR5LkJ5V29yZCAqLyArIChieVdvcmRGb2xkZWQgPyAtMjAwIC8qIFBlbmFsdHkuQ2FzZUZvbGQgKi8gOiAwKSwgYnlXb3JkLCB3b3JkKTtcbiAgICAgICAgaWYgKGFkamFjZW50VG8gPT0gbGVuICYmIGFkamFjZW50U3RhcnQgPT0gMClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJldCgtMjAwIC8qIFBlbmFsdHkuQ2FzZUZvbGQgKi8gLSB3b3JkLmxlbmd0aCArIChhZGphY2VudEVuZCA9PSB3b3JkLmxlbmd0aCA/IDAgOiAtMTAwIC8qIFBlbmFsdHkuTm90RnVsbCAqLyksIFswLCBhZGphY2VudEVuZF0pO1xuICAgICAgICBpZiAoZGlyZWN0ID4gLTEpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXQoLTcwMCAvKiBQZW5hbHR5Lk5vdFN0YXJ0ICovIC0gd29yZC5sZW5ndGgsIFtkaXJlY3QsIGRpcmVjdCArIHRoaXMucGF0dGVybi5sZW5ndGhdKTtcbiAgICAgICAgaWYgKGFkamFjZW50VG8gPT0gbGVuKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmV0KC0yMDAgLyogUGVuYWx0eS5DYXNlRm9sZCAqLyArIC03MDAgLyogUGVuYWx0eS5Ob3RTdGFydCAqLyAtIHdvcmQubGVuZ3RoLCBbYWRqYWNlbnRTdGFydCwgYWRqYWNlbnRFbmRdKTtcbiAgICAgICAgaWYgKGJ5V29yZFRvID09IGxlbilcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlc3VsdCgtMTAwIC8qIFBlbmFsdHkuQnlXb3JkICovICsgKGJ5V29yZEZvbGRlZCA/IC0yMDAgLyogUGVuYWx0eS5DYXNlRm9sZCAqLyA6IDApICsgLTcwMCAvKiBQZW5hbHR5Lk5vdFN0YXJ0ICovICtcbiAgICAgICAgICAgICAgICAod29yZEFkamFjZW50ID8gMCA6IC0xMTAwIC8qIFBlbmFsdHkuR2FwICovKSwgYnlXb3JkLCB3b3JkKTtcbiAgICAgICAgcmV0dXJuIGNoYXJzLmxlbmd0aCA9PSAyID8gbnVsbFxuICAgICAgICAgICAgOiB0aGlzLnJlc3VsdCgoYW55WzBdID8gLTcwMCAvKiBQZW5hbHR5Lk5vdFN0YXJ0ICovIDogMCkgKyAtMjAwIC8qIFBlbmFsdHkuQ2FzZUZvbGQgKi8gKyAtMTEwMCAvKiBQZW5hbHR5LkdhcCAqLywgYW55LCB3b3JkKTtcbiAgICB9XG4gICAgcmVzdWx0KHNjb3JlLCBwb3NpdGlvbnMsIHdvcmQpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdLCBpID0gMDtcbiAgICAgICAgZm9yIChsZXQgcG9zIG9mIHBvc2l0aW9ucykge1xuICAgICAgICAgICAgbGV0IHRvID0gcG9zICsgKHRoaXMuYXN0cmFsID8gc3RhdGUuY29kZVBvaW50U2l6ZShzdGF0ZS5jb2RlUG9pbnRBdCh3b3JkLCBwb3MpKSA6IDEpO1xuICAgICAgICAgICAgaWYgKGkgJiYgcmVzdWx0W2kgLSAxXSA9PSBwb3MpXG4gICAgICAgICAgICAgICAgcmVzdWx0W2kgLSAxXSA9IHRvO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0W2krK10gPSBwb3M7XG4gICAgICAgICAgICAgICAgcmVzdWx0W2krK10gPSB0bztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5yZXQoc2NvcmUgLSB3b3JkLmxlbmd0aCwgcmVzdWx0KTtcbiAgICB9XG59XG5jbGFzcyBTdHJpY3RNYXRjaGVyIHtcbiAgICBjb25zdHJ1Y3RvcihwYXR0ZXJuKSB7XG4gICAgICAgIHRoaXMucGF0dGVybiA9IHBhdHRlcm47XG4gICAgICAgIHRoaXMubWF0Y2hlZCA9IFtdO1xuICAgICAgICB0aGlzLnNjb3JlID0gMDtcbiAgICAgICAgdGhpcy5mb2xkZWQgPSBwYXR0ZXJuLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICAgIG1hdGNoKHdvcmQpIHtcbiAgICAgICAgaWYgKHdvcmQubGVuZ3RoIDwgdGhpcy5wYXR0ZXJuLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBsZXQgc3RhcnQgPSB3b3JkLnNsaWNlKDAsIHRoaXMucGF0dGVybi5sZW5ndGgpO1xuICAgICAgICBsZXQgbWF0Y2ggPSBzdGFydCA9PSB0aGlzLnBhdHRlcm4gPyAwIDogc3RhcnQudG9Mb3dlckNhc2UoKSA9PSB0aGlzLmZvbGRlZCA/IC0yMDAgLyogUGVuYWx0eS5DYXNlRm9sZCAqLyA6IG51bGw7XG4gICAgICAgIGlmIChtYXRjaCA9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIHRoaXMubWF0Y2hlZCA9IFswLCBzdGFydC5sZW5ndGhdO1xuICAgICAgICB0aGlzLnNjb3JlID0gbWF0Y2ggKyAod29yZC5sZW5ndGggPT0gdGhpcy5wYXR0ZXJuLmxlbmd0aCA/IDAgOiAtMTAwIC8qIFBlbmFsdHkuTm90RnVsbCAqLyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cblxuY29uc3QgY29tcGxldGlvbkNvbmZpZyA9IHN0YXRlLkZhY2V0LmRlZmluZSh7XG4gICAgY29tYmluZShjb25maWdzKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZS5jb21iaW5lQ29uZmlnKGNvbmZpZ3MsIHtcbiAgICAgICAgICAgIGFjdGl2YXRlT25UeXBpbmc6IHRydWUsXG4gICAgICAgICAgICBhY3RpdmF0ZU9uQ29tcGxldGlvbjogKCkgPT4gZmFsc2UsXG4gICAgICAgICAgICBhY3RpdmF0ZU9uVHlwaW5nRGVsYXk6IDEwMCxcbiAgICAgICAgICAgIHNlbGVjdE9uT3BlbjogdHJ1ZSxcbiAgICAgICAgICAgIG92ZXJyaWRlOiBudWxsLFxuICAgICAgICAgICAgY2xvc2VPbkJsdXI6IHRydWUsXG4gICAgICAgICAgICBtYXhSZW5kZXJlZE9wdGlvbnM6IDEwMCxcbiAgICAgICAgICAgIGRlZmF1bHRLZXltYXA6IHRydWUsXG4gICAgICAgICAgICB0b29sdGlwQ2xhc3M6ICgpID0+IFwiXCIsXG4gICAgICAgICAgICBvcHRpb25DbGFzczogKCkgPT4gXCJcIixcbiAgICAgICAgICAgIGFib3ZlQ3Vyc29yOiBmYWxzZSxcbiAgICAgICAgICAgIGljb25zOiB0cnVlLFxuICAgICAgICAgICAgYWRkVG9PcHRpb25zOiBbXSxcbiAgICAgICAgICAgIHBvc2l0aW9uSW5mbzogZGVmYXVsdFBvc2l0aW9uSW5mbyxcbiAgICAgICAgICAgIGZpbHRlclN0cmljdDogZmFsc2UsXG4gICAgICAgICAgICBjb21wYXJlQ29tcGxldGlvbnM6IChhLCBiKSA9PiBhLmxhYmVsLmxvY2FsZUNvbXBhcmUoYi5sYWJlbCksXG4gICAgICAgICAgICBpbnRlcmFjdGlvbkRlbGF5OiA3NSxcbiAgICAgICAgICAgIHVwZGF0ZVN5bmNUaW1lOiAxMDBcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgZGVmYXVsdEtleW1hcDogKGEsIGIpID0+IGEgJiYgYixcbiAgICAgICAgICAgIGNsb3NlT25CbHVyOiAoYSwgYikgPT4gYSAmJiBiLFxuICAgICAgICAgICAgaWNvbnM6IChhLCBiKSA9PiBhICYmIGIsXG4gICAgICAgICAgICB0b29sdGlwQ2xhc3M6IChhLCBiKSA9PiBjID0+IGpvaW5DbGFzcyhhKGMpLCBiKGMpKSxcbiAgICAgICAgICAgIG9wdGlvbkNsYXNzOiAoYSwgYikgPT4gYyA9PiBqb2luQ2xhc3MoYShjKSwgYihjKSksXG4gICAgICAgICAgICBhZGRUb09wdGlvbnM6IChhLCBiKSA9PiBhLmNvbmNhdChiKSxcbiAgICAgICAgICAgIGZpbHRlclN0cmljdDogKGEsIGIpID0+IGEgfHwgYixcbiAgICAgICAgfSk7XG4gICAgfVxufSk7XG5mdW5jdGlvbiBqb2luQ2xhc3MoYSwgYikge1xuICAgIHJldHVybiBhID8gYiA/IGEgKyBcIiBcIiArIGIgOiBhIDogYjtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRQb3NpdGlvbkluZm8odmlldyQxLCBsaXN0LCBvcHRpb24sIGluZm8sIHNwYWNlLCB0b29sdGlwKSB7XG4gICAgbGV0IHJ0bCA9IHZpZXckMS50ZXh0RGlyZWN0aW9uID09IHZpZXcuRGlyZWN0aW9uLlJUTCwgbGVmdCA9IHJ0bCwgbmFycm93ID0gZmFsc2U7XG4gICAgbGV0IHNpZGUgPSBcInRvcFwiLCBvZmZzZXQsIG1heFdpZHRoO1xuICAgIGxldCBzcGFjZUxlZnQgPSBsaXN0LmxlZnQgLSBzcGFjZS5sZWZ0LCBzcGFjZVJpZ2h0ID0gc3BhY2UucmlnaHQgLSBsaXN0LnJpZ2h0O1xuICAgIGxldCBpbmZvV2lkdGggPSBpbmZvLnJpZ2h0IC0gaW5mby5sZWZ0LCBpbmZvSGVpZ2h0ID0gaW5mby5ib3R0b20gLSBpbmZvLnRvcDtcbiAgICBpZiAobGVmdCAmJiBzcGFjZUxlZnQgPCBNYXRoLm1pbihpbmZvV2lkdGgsIHNwYWNlUmlnaHQpKVxuICAgICAgICBsZWZ0ID0gZmFsc2U7XG4gICAgZWxzZSBpZiAoIWxlZnQgJiYgc3BhY2VSaWdodCA8IE1hdGgubWluKGluZm9XaWR0aCwgc3BhY2VMZWZ0KSlcbiAgICAgICAgbGVmdCA9IHRydWU7XG4gICAgaWYgKGluZm9XaWR0aCA8PSAobGVmdCA/IHNwYWNlTGVmdCA6IHNwYWNlUmlnaHQpKSB7XG4gICAgICAgIG9mZnNldCA9IE1hdGgubWF4KHNwYWNlLnRvcCwgTWF0aC5taW4ob3B0aW9uLnRvcCwgc3BhY2UuYm90dG9tIC0gaW5mb0hlaWdodCkpIC0gbGlzdC50b3A7XG4gICAgICAgIG1heFdpZHRoID0gTWF0aC5taW4oNDAwIC8qIEluZm8uV2lkdGggKi8sIGxlZnQgPyBzcGFjZUxlZnQgOiBzcGFjZVJpZ2h0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG5hcnJvdyA9IHRydWU7XG4gICAgICAgIG1heFdpZHRoID0gTWF0aC5taW4oNDAwIC8qIEluZm8uV2lkdGggKi8sIChydGwgPyBsaXN0LnJpZ2h0IDogc3BhY2UucmlnaHQgLSBsaXN0LmxlZnQpIC0gMzAgLyogSW5mby5NYXJnaW4gKi8pO1xuICAgICAgICBsZXQgc3BhY2VCZWxvdyA9IHNwYWNlLmJvdHRvbSAtIGxpc3QuYm90dG9tO1xuICAgICAgICBpZiAoc3BhY2VCZWxvdyA+PSBpbmZvSGVpZ2h0IHx8IHNwYWNlQmVsb3cgPiBsaXN0LnRvcCkgeyAvLyBCZWxvdyB0aGUgY29tcGxldGlvblxuICAgICAgICAgICAgb2Zmc2V0ID0gb3B0aW9uLmJvdHRvbSAtIGxpc3QudG9wO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgeyAvLyBBYm92ZSBpdFxuICAgICAgICAgICAgc2lkZSA9IFwiYm90dG9tXCI7XG4gICAgICAgICAgICBvZmZzZXQgPSBsaXN0LmJvdHRvbSAtIG9wdGlvbi50b3A7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IHNjYWxlWSA9IChsaXN0LmJvdHRvbSAtIGxpc3QudG9wKSAvIHRvb2x0aXAub2Zmc2V0SGVpZ2h0O1xuICAgIGxldCBzY2FsZVggPSAobGlzdC5yaWdodCAtIGxpc3QubGVmdCkgLyB0b29sdGlwLm9mZnNldFdpZHRoO1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0eWxlOiBgJHtzaWRlfTogJHtvZmZzZXQgLyBzY2FsZVl9cHg7IG1heC13aWR0aDogJHttYXhXaWR0aCAvIHNjYWxlWH1weGAsXG4gICAgICAgIGNsYXNzOiBcImNtLWNvbXBsZXRpb25JbmZvLVwiICsgKG5hcnJvdyA/IChydGwgPyBcImxlZnQtbmFycm93XCIgOiBcInJpZ2h0LW5hcnJvd1wiKSA6IGxlZnQgPyBcImxlZnRcIiA6IFwicmlnaHRcIilcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBvcHRpb25Db250ZW50KGNvbmZpZykge1xuICAgIGxldCBjb250ZW50ID0gY29uZmlnLmFkZFRvT3B0aW9ucy5zbGljZSgpO1xuICAgIGlmIChjb25maWcuaWNvbnMpXG4gICAgICAgIGNvbnRlbnQucHVzaCh7XG4gICAgICAgICAgICByZW5kZXIoY29tcGxldGlvbikge1xuICAgICAgICAgICAgICAgIGxldCBpY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgICAgICBpY29uLmNsYXNzTGlzdC5hZGQoXCJjbS1jb21wbGV0aW9uSWNvblwiKTtcbiAgICAgICAgICAgICAgICBpZiAoY29tcGxldGlvbi50eXBlKVxuICAgICAgICAgICAgICAgICAgICBpY29uLmNsYXNzTGlzdC5hZGQoLi4uY29tcGxldGlvbi50eXBlLnNwbGl0KC9cXHMrL2cpLm1hcChjbHMgPT4gXCJjbS1jb21wbGV0aW9uSWNvbi1cIiArIGNscykpO1xuICAgICAgICAgICAgICAgIGljb24uc2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIiwgXCJ0cnVlXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpY29uO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAyMFxuICAgICAgICB9KTtcbiAgICBjb250ZW50LnB1c2goe1xuICAgICAgICByZW5kZXIoY29tcGxldGlvbiwgX3MsIF92LCBtYXRjaCkge1xuICAgICAgICAgICAgbGV0IGxhYmVsRWx0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgICAgICBsYWJlbEVsdC5jbGFzc05hbWUgPSBcImNtLWNvbXBsZXRpb25MYWJlbFwiO1xuICAgICAgICAgICAgbGV0IGxhYmVsID0gY29tcGxldGlvbi5kaXNwbGF5TGFiZWwgfHwgY29tcGxldGlvbi5sYWJlbCwgb2ZmID0gMDtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbWF0Y2gubGVuZ3RoOykge1xuICAgICAgICAgICAgICAgIGxldCBmcm9tID0gbWF0Y2hbaisrXSwgdG8gPSBtYXRjaFtqKytdO1xuICAgICAgICAgICAgICAgIGlmIChmcm9tID4gb2ZmKVxuICAgICAgICAgICAgICAgICAgICBsYWJlbEVsdC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShsYWJlbC5zbGljZShvZmYsIGZyb20pKSk7XG4gICAgICAgICAgICAgICAgbGV0IHNwYW4gPSBsYWJlbEVsdC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKSk7XG4gICAgICAgICAgICAgICAgc3Bhbi5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShsYWJlbC5zbGljZShmcm9tLCB0bykpKTtcbiAgICAgICAgICAgICAgICBzcGFuLmNsYXNzTmFtZSA9IFwiY20tY29tcGxldGlvbk1hdGNoZWRUZXh0XCI7XG4gICAgICAgICAgICAgICAgb2ZmID0gdG87XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob2ZmIDwgbGFiZWwubGVuZ3RoKVxuICAgICAgICAgICAgICAgIGxhYmVsRWx0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGxhYmVsLnNsaWNlKG9mZikpKTtcbiAgICAgICAgICAgIHJldHVybiBsYWJlbEVsdDtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zaXRpb246IDUwXG4gICAgfSwge1xuICAgICAgICByZW5kZXIoY29tcGxldGlvbikge1xuICAgICAgICAgICAgaWYgKCFjb21wbGV0aW9uLmRldGFpbClcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIGxldCBkZXRhaWxFbHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgICAgIGRldGFpbEVsdC5jbGFzc05hbWUgPSBcImNtLWNvbXBsZXRpb25EZXRhaWxcIjtcbiAgICAgICAgICAgIGRldGFpbEVsdC50ZXh0Q29udGVudCA9IGNvbXBsZXRpb24uZGV0YWlsO1xuICAgICAgICAgICAgcmV0dXJuIGRldGFpbEVsdDtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zaXRpb246IDgwXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnQuc29ydCgoYSwgYikgPT4gYS5wb3NpdGlvbiAtIGIucG9zaXRpb24pLm1hcChhID0+IGEucmVuZGVyKTtcbn1cbmZ1bmN0aW9uIHJhbmdlQXJvdW5kU2VsZWN0ZWQodG90YWwsIHNlbGVjdGVkLCBtYXgpIHtcbiAgICBpZiAodG90YWwgPD0gbWF4KVxuICAgICAgICByZXR1cm4geyBmcm9tOiAwLCB0bzogdG90YWwgfTtcbiAgICBpZiAoc2VsZWN0ZWQgPCAwKVxuICAgICAgICBzZWxlY3RlZCA9IDA7XG4gICAgaWYgKHNlbGVjdGVkIDw9ICh0b3RhbCA+PiAxKSkge1xuICAgICAgICBsZXQgb2ZmID0gTWF0aC5mbG9vcihzZWxlY3RlZCAvIG1heCk7XG4gICAgICAgIHJldHVybiB7IGZyb206IG9mZiAqIG1heCwgdG86IChvZmYgKyAxKSAqIG1heCB9O1xuICAgIH1cbiAgICBsZXQgb2ZmID0gTWF0aC5mbG9vcigodG90YWwgLSBzZWxlY3RlZCkgLyBtYXgpO1xuICAgIHJldHVybiB7IGZyb206IHRvdGFsIC0gKG9mZiArIDEpICogbWF4LCB0bzogdG90YWwgLSBvZmYgKiBtYXggfTtcbn1cbmNsYXNzIENvbXBsZXRpb25Ub29sdGlwIHtcbiAgICBjb25zdHJ1Y3Rvcih2aWV3LCBzdGF0ZUZpZWxkLCBhcHBseUNvbXBsZXRpb24pIHtcbiAgICAgICAgdGhpcy52aWV3ID0gdmlldztcbiAgICAgICAgdGhpcy5zdGF0ZUZpZWxkID0gc3RhdGVGaWVsZDtcbiAgICAgICAgdGhpcy5hcHBseUNvbXBsZXRpb24gPSBhcHBseUNvbXBsZXRpb247XG4gICAgICAgIHRoaXMuaW5mbyA9IG51bGw7XG4gICAgICAgIHRoaXMuaW5mb0Rlc3Ryb3kgPSBudWxsO1xuICAgICAgICB0aGlzLnBsYWNlSW5mb1JlcSA9IHtcbiAgICAgICAgICAgIHJlYWQ6ICgpID0+IHRoaXMubWVhc3VyZUluZm8oKSxcbiAgICAgICAgICAgIHdyaXRlOiAocG9zKSA9PiB0aGlzLnBsYWNlSW5mbyhwb3MpLFxuICAgICAgICAgICAga2V5OiB0aGlzXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc3BhY2UgPSBudWxsO1xuICAgICAgICB0aGlzLmN1cnJlbnRDbGFzcyA9IFwiXCI7XG4gICAgICAgIGxldCBjU3RhdGUgPSB2aWV3LnN0YXRlLmZpZWxkKHN0YXRlRmllbGQpO1xuICAgICAgICBsZXQgeyBvcHRpb25zLCBzZWxlY3RlZCB9ID0gY1N0YXRlLm9wZW47XG4gICAgICAgIGxldCBjb25maWcgPSB2aWV3LnN0YXRlLmZhY2V0KGNvbXBsZXRpb25Db25maWcpO1xuICAgICAgICB0aGlzLm9wdGlvbkNvbnRlbnQgPSBvcHRpb25Db250ZW50KGNvbmZpZyk7XG4gICAgICAgIHRoaXMub3B0aW9uQ2xhc3MgPSBjb25maWcub3B0aW9uQ2xhc3M7XG4gICAgICAgIHRoaXMudG9vbHRpcENsYXNzID0gY29uZmlnLnRvb2x0aXBDbGFzcztcbiAgICAgICAgdGhpcy5yYW5nZSA9IHJhbmdlQXJvdW5kU2VsZWN0ZWQob3B0aW9ucy5sZW5ndGgsIHNlbGVjdGVkLCBjb25maWcubWF4UmVuZGVyZWRPcHRpb25zKTtcbiAgICAgICAgdGhpcy5kb20gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB0aGlzLmRvbS5jbGFzc05hbWUgPSBcImNtLXRvb2x0aXAtYXV0b2NvbXBsZXRlXCI7XG4gICAgICAgIHRoaXMudXBkYXRlVG9vbHRpcENsYXNzKHZpZXcuc3RhdGUpO1xuICAgICAgICB0aGlzLmRvbS5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIChlKSA9PiB7XG4gICAgICAgICAgICBsZXQgeyBvcHRpb25zIH0gPSB2aWV3LnN0YXRlLmZpZWxkKHN0YXRlRmllbGQpLm9wZW47XG4gICAgICAgICAgICBmb3IgKGxldCBkb20gPSBlLnRhcmdldCwgbWF0Y2g7IGRvbSAmJiBkb20gIT0gdGhpcy5kb207IGRvbSA9IGRvbS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRvbS5ub2RlTmFtZSA9PSBcIkxJXCIgJiYgKG1hdGNoID0gLy0oXFxkKykkLy5leGVjKGRvbS5pZCkpICYmICttYXRjaFsxXSA8IG9wdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlDb21wbGV0aW9uKHZpZXcsIG9wdGlvbnNbK21hdGNoWzFdXSk7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZG9tLmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c291dFwiLCAoZSkgPT4ge1xuICAgICAgICAgICAgbGV0IHN0YXRlID0gdmlldy5zdGF0ZS5maWVsZCh0aGlzLnN0YXRlRmllbGQsIGZhbHNlKTtcbiAgICAgICAgICAgIGlmIChzdGF0ZSAmJiBzdGF0ZS50b29sdGlwICYmIHZpZXcuc3RhdGUuZmFjZXQoY29tcGxldGlvbkNvbmZpZykuY2xvc2VPbkJsdXIgJiZcbiAgICAgICAgICAgICAgICBlLnJlbGF0ZWRUYXJnZXQgIT0gdmlldy5jb250ZW50RE9NKVxuICAgICAgICAgICAgICAgIHZpZXcuZGlzcGF0Y2goeyBlZmZlY3RzOiBjbG9zZUNvbXBsZXRpb25FZmZlY3Qub2YobnVsbCkgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNob3dPcHRpb25zKG9wdGlvbnMsIGNTdGF0ZS5pZCk7XG4gICAgfVxuICAgIG1vdW50KCkgeyB0aGlzLnVwZGF0ZVNlbCgpOyB9XG4gICAgc2hvd09wdGlvbnMob3B0aW9ucywgaWQpIHtcbiAgICAgICAgaWYgKHRoaXMubGlzdClcbiAgICAgICAgICAgIHRoaXMubGlzdC5yZW1vdmUoKTtcbiAgICAgICAgdGhpcy5saXN0ID0gdGhpcy5kb20uYXBwZW5kQ2hpbGQodGhpcy5jcmVhdGVMaXN0Qm94KG9wdGlvbnMsIGlkLCB0aGlzLnJhbmdlKSk7XG4gICAgICAgIHRoaXMubGlzdC5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmluZm8pXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LnJlcXVlc3RNZWFzdXJlKHRoaXMucGxhY2VJbmZvUmVxKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHVwZGF0ZSh1cGRhdGUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBsZXQgY1N0YXRlID0gdXBkYXRlLnN0YXRlLmZpZWxkKHRoaXMuc3RhdGVGaWVsZCk7XG4gICAgICAgIGxldCBwcmV2U3RhdGUgPSB1cGRhdGUuc3RhcnRTdGF0ZS5maWVsZCh0aGlzLnN0YXRlRmllbGQpO1xuICAgICAgICB0aGlzLnVwZGF0ZVRvb2x0aXBDbGFzcyh1cGRhdGUuc3RhdGUpO1xuICAgICAgICBpZiAoY1N0YXRlICE9IHByZXZTdGF0ZSkge1xuICAgICAgICAgICAgbGV0IHsgb3B0aW9ucywgc2VsZWN0ZWQsIGRpc2FibGVkIH0gPSBjU3RhdGUub3BlbjtcbiAgICAgICAgICAgIGlmICghcHJldlN0YXRlLm9wZW4gfHwgcHJldlN0YXRlLm9wZW4ub3B0aW9ucyAhPSBvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yYW5nZSA9IHJhbmdlQXJvdW5kU2VsZWN0ZWQob3B0aW9ucy5sZW5ndGgsIHNlbGVjdGVkLCB1cGRhdGUuc3RhdGUuZmFjZXQoY29tcGxldGlvbkNvbmZpZykubWF4UmVuZGVyZWRPcHRpb25zKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dPcHRpb25zKG9wdGlvbnMsIGNTdGF0ZS5pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNlbCgpO1xuICAgICAgICAgICAgaWYgKGRpc2FibGVkICE9ICgoX2EgPSBwcmV2U3RhdGUub3BlbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRpc2FibGVkKSlcbiAgICAgICAgICAgICAgICB0aGlzLmRvbS5jbGFzc0xpc3QudG9nZ2xlKFwiY20tdG9vbHRpcC1hdXRvY29tcGxldGUtZGlzYWJsZWRcIiwgISFkaXNhYmxlZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlVG9vbHRpcENsYXNzKHN0YXRlKSB7XG4gICAgICAgIGxldCBjbHMgPSB0aGlzLnRvb2x0aXBDbGFzcyhzdGF0ZSk7XG4gICAgICAgIGlmIChjbHMgIT0gdGhpcy5jdXJyZW50Q2xhc3MpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGMgb2YgdGhpcy5jdXJyZW50Q2xhc3Muc3BsaXQoXCIgXCIpKVxuICAgICAgICAgICAgICAgIGlmIChjKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvbS5jbGFzc0xpc3QucmVtb3ZlKGMpO1xuICAgICAgICAgICAgZm9yIChsZXQgYyBvZiBjbHMuc3BsaXQoXCIgXCIpKVxuICAgICAgICAgICAgICAgIGlmIChjKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvbS5jbGFzc0xpc3QuYWRkKGMpO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50Q2xhc3MgPSBjbHM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcG9zaXRpb25lZChzcGFjZSkge1xuICAgICAgICB0aGlzLnNwYWNlID0gc3BhY2U7XG4gICAgICAgIGlmICh0aGlzLmluZm8pXG4gICAgICAgICAgICB0aGlzLnZpZXcucmVxdWVzdE1lYXN1cmUodGhpcy5wbGFjZUluZm9SZXEpO1xuICAgIH1cbiAgICB1cGRhdGVTZWwoKSB7XG4gICAgICAgIGxldCBjU3RhdGUgPSB0aGlzLnZpZXcuc3RhdGUuZmllbGQodGhpcy5zdGF0ZUZpZWxkKSwgb3BlbiA9IGNTdGF0ZS5vcGVuO1xuICAgICAgICBpZiAob3Blbi5zZWxlY3RlZCA+IC0xICYmIG9wZW4uc2VsZWN0ZWQgPCB0aGlzLnJhbmdlLmZyb20gfHwgb3Blbi5zZWxlY3RlZCA+PSB0aGlzLnJhbmdlLnRvKSB7XG4gICAgICAgICAgICB0aGlzLnJhbmdlID0gcmFuZ2VBcm91bmRTZWxlY3RlZChvcGVuLm9wdGlvbnMubGVuZ3RoLCBvcGVuLnNlbGVjdGVkLCB0aGlzLnZpZXcuc3RhdGUuZmFjZXQoY29tcGxldGlvbkNvbmZpZykubWF4UmVuZGVyZWRPcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXMuc2hvd09wdGlvbnMob3Blbi5vcHRpb25zLCBjU3RhdGUuaWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnVwZGF0ZVNlbGVjdGVkT3B0aW9uKG9wZW4uc2VsZWN0ZWQpKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3Ryb3lJbmZvKCk7XG4gICAgICAgICAgICBsZXQgeyBjb21wbGV0aW9uIH0gPSBvcGVuLm9wdGlvbnNbb3Blbi5zZWxlY3RlZF07XG4gICAgICAgICAgICBsZXQgeyBpbmZvIH0gPSBjb21wbGV0aW9uO1xuICAgICAgICAgICAgaWYgKCFpbmZvKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGxldCBpbmZvUmVzdWx0ID0gdHlwZW9mIGluZm8gPT09IFwic3RyaW5nXCIgPyBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShpbmZvKSA6IGluZm8oY29tcGxldGlvbik7XG4gICAgICAgICAgICBpZiAoIWluZm9SZXN1bHQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKFwidGhlblwiIGluIGluZm9SZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBpbmZvUmVzdWx0LnRoZW4ob2JqID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9iaiAmJiB0aGlzLnZpZXcuc3RhdGUuZmllbGQodGhpcy5zdGF0ZUZpZWxkLCBmYWxzZSkgPT0gY1N0YXRlKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRJbmZvUGFuZShvYmosIGNvbXBsZXRpb24pO1xuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGUgPT4gdmlldy5sb2dFeGNlcHRpb24odGhpcy52aWV3LnN0YXRlLCBlLCBcImNvbXBsZXRpb24gaW5mb1wiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZEluZm9QYW5lKGluZm9SZXN1bHQsIGNvbXBsZXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGFkZEluZm9QYW5lKGNvbnRlbnQsIGNvbXBsZXRpb24pIHtcbiAgICAgICAgdGhpcy5kZXN0cm95SW5mbygpO1xuICAgICAgICBsZXQgd3JhcCA9IHRoaXMuaW5mbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHdyYXAuY2xhc3NOYW1lID0gXCJjbS10b29sdGlwIGNtLWNvbXBsZXRpb25JbmZvXCI7XG4gICAgICAgIGlmIChjb250ZW50Lm5vZGVUeXBlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHdyYXAuYXBwZW5kQ2hpbGQoY29udGVudCk7XG4gICAgICAgICAgICB0aGlzLmluZm9EZXN0cm95ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCB7IGRvbSwgZGVzdHJveSB9ID0gY29udGVudDtcbiAgICAgICAgICAgIHdyYXAuYXBwZW5kQ2hpbGQoZG9tKTtcbiAgICAgICAgICAgIHRoaXMuaW5mb0Rlc3Ryb3kgPSBkZXN0cm95IHx8IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kb20uYXBwZW5kQ2hpbGQod3JhcCk7XG4gICAgICAgIHRoaXMudmlldy5yZXF1ZXN0TWVhc3VyZSh0aGlzLnBsYWNlSW5mb1JlcSk7XG4gICAgfVxuICAgIHVwZGF0ZVNlbGVjdGVkT3B0aW9uKHNlbGVjdGVkKSB7XG4gICAgICAgIGxldCBzZXQgPSBudWxsO1xuICAgICAgICBmb3IgKGxldCBvcHQgPSB0aGlzLmxpc3QuZmlyc3RDaGlsZCwgaSA9IHRoaXMucmFuZ2UuZnJvbTsgb3B0OyBvcHQgPSBvcHQubmV4dFNpYmxpbmcsIGkrKykge1xuICAgICAgICAgICAgaWYgKG9wdC5ub2RlTmFtZSAhPSBcIkxJXCIgfHwgIW9wdC5pZCkge1xuICAgICAgICAgICAgICAgIGktLTsgLy8gQSBzZWN0aW9uIGhlYWRlclxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaSA9PSBzZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgIGlmICghb3B0Lmhhc0F0dHJpYnV0ZShcImFyaWEtc2VsZWN0ZWRcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0LnNldEF0dHJpYnV0ZShcImFyaWEtc2VsZWN0ZWRcIiwgXCJ0cnVlXCIpO1xuICAgICAgICAgICAgICAgICAgICBzZXQgPSBvcHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdC5oYXNBdHRyaWJ1dGUoXCJhcmlhLXNlbGVjdGVkXCIpKVxuICAgICAgICAgICAgICAgICAgICBvcHQucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1zZWxlY3RlZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc2V0KVxuICAgICAgICAgICAgc2Nyb2xsSW50b1ZpZXcodGhpcy5saXN0LCBzZXQpO1xuICAgICAgICByZXR1cm4gc2V0O1xuICAgIH1cbiAgICBtZWFzdXJlSW5mbygpIHtcbiAgICAgICAgbGV0IHNlbCA9IHRoaXMuZG9tLnF1ZXJ5U2VsZWN0b3IoXCJbYXJpYS1zZWxlY3RlZF1cIik7XG4gICAgICAgIGlmICghc2VsIHx8ICF0aGlzLmluZm8pXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgbGV0IGxpc3RSZWN0ID0gdGhpcy5kb20uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGxldCBpbmZvUmVjdCA9IHRoaXMuaW5mby5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgbGV0IHNlbFJlY3QgPSBzZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGxldCBzcGFjZSA9IHRoaXMuc3BhY2U7XG4gICAgICAgIGlmICghc3BhY2UpIHtcbiAgICAgICAgICAgIGxldCB3aW4gPSB0aGlzLmRvbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IHx8IHdpbmRvdztcbiAgICAgICAgICAgIHNwYWNlID0geyBsZWZ0OiAwLCB0b3A6IDAsIHJpZ2h0OiB3aW4uaW5uZXJXaWR0aCwgYm90dG9tOiB3aW4uaW5uZXJIZWlnaHQgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VsUmVjdC50b3AgPiBNYXRoLm1pbihzcGFjZS5ib3R0b20sIGxpc3RSZWN0LmJvdHRvbSkgLSAxMCB8fFxuICAgICAgICAgICAgc2VsUmVjdC5ib3R0b20gPCBNYXRoLm1heChzcGFjZS50b3AsIGxpc3RSZWN0LnRvcCkgKyAxMClcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3LnN0YXRlLmZhY2V0KGNvbXBsZXRpb25Db25maWcpLnBvc2l0aW9uSW5mbyh0aGlzLnZpZXcsIGxpc3RSZWN0LCBzZWxSZWN0LCBpbmZvUmVjdCwgc3BhY2UsIHRoaXMuZG9tKTtcbiAgICB9XG4gICAgcGxhY2VJbmZvKHBvcykge1xuICAgICAgICBpZiAodGhpcy5pbmZvKSB7XG4gICAgICAgICAgICBpZiAocG9zKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBvcy5zdHlsZSlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmZvLnN0eWxlLmNzc1RleHQgPSBwb3Muc3R5bGU7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmZvLmNsYXNzTmFtZSA9IFwiY20tdG9vbHRpcCBjbS1jb21wbGV0aW9uSW5mbyBcIiArIChwb3MuY2xhc3MgfHwgXCJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmluZm8uc3R5bGUuY3NzVGV4dCA9IFwidG9wOiAtMWU2cHhcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjcmVhdGVMaXN0Qm94KG9wdGlvbnMsIGlkLCByYW5nZSkge1xuICAgICAgICBjb25zdCB1bCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ1bFwiKTtcbiAgICAgICAgdWwuaWQgPSBpZDtcbiAgICAgICAgdWwuc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcImxpc3Rib3hcIik7XG4gICAgICAgIHVsLnNldEF0dHJpYnV0ZShcImFyaWEtZXhwYW5kZWRcIiwgXCJ0cnVlXCIpO1xuICAgICAgICB1bC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIHRoaXMudmlldy5zdGF0ZS5waHJhc2UoXCJDb21wbGV0aW9uc1wiKSk7XG4gICAgICAgIGxldCBjdXJTZWN0aW9uID0gbnVsbDtcbiAgICAgICAgZm9yIChsZXQgaSA9IHJhbmdlLmZyb207IGkgPCByYW5nZS50bzsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgeyBjb21wbGV0aW9uLCBtYXRjaCB9ID0gb3B0aW9uc1tpXSwgeyBzZWN0aW9uIH0gPSBjb21wbGV0aW9uO1xuICAgICAgICAgICAgaWYgKHNlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBsZXQgbmFtZSA9IHR5cGVvZiBzZWN0aW9uID09IFwic3RyaW5nXCIgPyBzZWN0aW9uIDogc2VjdGlvbi5uYW1lO1xuICAgICAgICAgICAgICAgIGlmIChuYW1lICE9IGN1clNlY3Rpb24gJiYgKGkgPiByYW5nZS5mcm9tIHx8IHJhbmdlLmZyb20gPT0gMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VyU2VjdGlvbiA9IG5hbWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VjdGlvbiAhPSBcInN0cmluZ1wiICYmIHNlY3Rpb24uaGVhZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1bC5hcHBlbmRDaGlsZChzZWN0aW9uLmhlYWRlcihzZWN0aW9uKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaGVhZGVyID0gdWwuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNvbXBsZXRpb24tc2VjdGlvblwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXIudGV4dENvbnRlbnQgPSBuYW1lO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbGkgPSB1bC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIikpO1xuICAgICAgICAgICAgbGkuaWQgPSBpZCArIFwiLVwiICsgaTtcbiAgICAgICAgICAgIGxpLnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJvcHRpb25cIik7XG4gICAgICAgICAgICBsZXQgY2xzID0gdGhpcy5vcHRpb25DbGFzcyhjb21wbGV0aW9uKTtcbiAgICAgICAgICAgIGlmIChjbHMpXG4gICAgICAgICAgICAgICAgbGkuY2xhc3NOYW1lID0gY2xzO1xuICAgICAgICAgICAgZm9yIChsZXQgc291cmNlIG9mIHRoaXMub3B0aW9uQ29udGVudCkge1xuICAgICAgICAgICAgICAgIGxldCBub2RlID0gc291cmNlKGNvbXBsZXRpb24sIHRoaXMudmlldy5zdGF0ZSwgdGhpcy52aWV3LCBtYXRjaCk7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUpXG4gICAgICAgICAgICAgICAgICAgIGxpLmFwcGVuZENoaWxkKG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChyYW5nZS5mcm9tKVxuICAgICAgICAgICAgdWwuY2xhc3NMaXN0LmFkZChcImNtLWNvbXBsZXRpb25MaXN0SW5jb21wbGV0ZVRvcFwiKTtcbiAgICAgICAgaWYgKHJhbmdlLnRvIDwgb3B0aW9ucy5sZW5ndGgpXG4gICAgICAgICAgICB1bC5jbGFzc0xpc3QuYWRkKFwiY20tY29tcGxldGlvbkxpc3RJbmNvbXBsZXRlQm90dG9tXCIpO1xuICAgICAgICByZXR1cm4gdWw7XG4gICAgfVxuICAgIGRlc3Ryb3lJbmZvKCkge1xuICAgICAgICBpZiAodGhpcy5pbmZvKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pbmZvRGVzdHJveSlcbiAgICAgICAgICAgICAgICB0aGlzLmluZm9EZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLmluZm8ucmVtb3ZlKCk7XG4gICAgICAgICAgICB0aGlzLmluZm8gPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuZGVzdHJveUluZm8oKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjb21wbGV0aW9uVG9vbHRpcChzdGF0ZUZpZWxkLCBhcHBseUNvbXBsZXRpb24pIHtcbiAgICByZXR1cm4gKHZpZXcpID0+IG5ldyBDb21wbGV0aW9uVG9vbHRpcCh2aWV3LCBzdGF0ZUZpZWxkLCBhcHBseUNvbXBsZXRpb24pO1xufVxuZnVuY3Rpb24gc2Nyb2xsSW50b1ZpZXcoY29udGFpbmVyLCBlbGVtZW50KSB7XG4gICAgbGV0IHBhcmVudCA9IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBsZXQgc2VsZiA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgbGV0IHNjYWxlWSA9IHBhcmVudC5oZWlnaHQgLyBjb250YWluZXIub2Zmc2V0SGVpZ2h0O1xuICAgIGlmIChzZWxmLnRvcCA8IHBhcmVudC50b3ApXG4gICAgICAgIGNvbnRhaW5lci5zY3JvbGxUb3AgLT0gKHBhcmVudC50b3AgLSBzZWxmLnRvcCkgLyBzY2FsZVk7XG4gICAgZWxzZSBpZiAoc2VsZi5ib3R0b20gPiBwYXJlbnQuYm90dG9tKVxuICAgICAgICBjb250YWluZXIuc2Nyb2xsVG9wICs9IChzZWxmLmJvdHRvbSAtIHBhcmVudC5ib3R0b20pIC8gc2NhbGVZO1xufVxuXG4vLyBVc2VkIHRvIHBpY2sgYSBwcmVmZXJyZWQgb3B0aW9uIHdoZW4gdHdvIG9wdGlvbnMgd2l0aCB0aGUgc2FtZVxuLy8gbGFiZWwgb2NjdXIgaW4gdGhlIHJlc3VsdC5cbmZ1bmN0aW9uIHNjb3JlKG9wdGlvbikge1xuICAgIHJldHVybiAob3B0aW9uLmJvb3N0IHx8IDApICogMTAwICsgKG9wdGlvbi5hcHBseSA/IDEwIDogMCkgKyAob3B0aW9uLmluZm8gPyA1IDogMCkgK1xuICAgICAgICAob3B0aW9uLnR5cGUgPyAxIDogMCk7XG59XG5mdW5jdGlvbiBzb3J0T3B0aW9ucyhhY3RpdmUsIHN0YXRlKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBbXTtcbiAgICBsZXQgc2VjdGlvbnMgPSBudWxsO1xuICAgIGxldCBhZGRPcHRpb24gPSAob3B0aW9uKSA9PiB7XG4gICAgICAgIG9wdGlvbnMucHVzaChvcHRpb24pO1xuICAgICAgICBsZXQgeyBzZWN0aW9uIH0gPSBvcHRpb24uY29tcGxldGlvbjtcbiAgICAgICAgaWYgKHNlY3Rpb24pIHtcbiAgICAgICAgICAgIGlmICghc2VjdGlvbnMpXG4gICAgICAgICAgICAgICAgc2VjdGlvbnMgPSBbXTtcbiAgICAgICAgICAgIGxldCBuYW1lID0gdHlwZW9mIHNlY3Rpb24gPT0gXCJzdHJpbmdcIiA/IHNlY3Rpb24gOiBzZWN0aW9uLm5hbWU7XG4gICAgICAgICAgICBpZiAoIXNlY3Rpb25zLnNvbWUocyA9PiBzLm5hbWUgPT0gbmFtZSkpXG4gICAgICAgICAgICAgICAgc2VjdGlvbnMucHVzaCh0eXBlb2Ygc2VjdGlvbiA9PSBcInN0cmluZ1wiID8geyBuYW1lIH0gOiBzZWN0aW9uKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgbGV0IGNvbmYgPSBzdGF0ZS5mYWNldChjb21wbGV0aW9uQ29uZmlnKTtcbiAgICBmb3IgKGxldCBhIG9mIGFjdGl2ZSlcbiAgICAgICAgaWYgKGEuaGFzUmVzdWx0KCkpIHtcbiAgICAgICAgICAgIGxldCBnZXRNYXRjaCA9IGEucmVzdWx0LmdldE1hdGNoO1xuICAgICAgICAgICAgaWYgKGEucmVzdWx0LmZpbHRlciA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBvcHRpb24gb2YgYS5yZXN1bHQub3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICBhZGRPcHRpb24obmV3IE9wdGlvbihvcHRpb24sIGEuc291cmNlLCBnZXRNYXRjaCA/IGdldE1hdGNoKG9wdGlvbikgOiBbXSwgMWU5IC0gb3B0aW9ucy5sZW5ndGgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgcGF0dGVybiA9IHN0YXRlLnNsaWNlRG9jKGEuZnJvbSwgYS50byksIG1hdGNoO1xuICAgICAgICAgICAgICAgIGxldCBtYXRjaGVyID0gY29uZi5maWx0ZXJTdHJpY3QgPyBuZXcgU3RyaWN0TWF0Y2hlcihwYXR0ZXJuKSA6IG5ldyBGdXp6eU1hdGNoZXIocGF0dGVybik7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgb3B0aW9uIG9mIGEucmVzdWx0Lm9wdGlvbnMpXG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCA9IG1hdGNoZXIubWF0Y2gob3B0aW9uLmxhYmVsKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1hdGNoZWQgPSAhb3B0aW9uLmRpc3BsYXlMYWJlbCA/IG1hdGNoLm1hdGNoZWQgOiBnZXRNYXRjaCA/IGdldE1hdGNoKG9wdGlvbiwgbWF0Y2gubWF0Y2hlZCkgOiBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZE9wdGlvbihuZXcgT3B0aW9uKG9wdGlvbiwgYS5zb3VyY2UsIG1hdGNoZWQsIG1hdGNoLnNjb3JlICsgKG9wdGlvbi5ib29zdCB8fCAwKSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBpZiAoc2VjdGlvbnMpIHtcbiAgICAgICAgbGV0IHNlY3Rpb25PcmRlciA9IE9iamVjdC5jcmVhdGUobnVsbCksIHBvcyA9IDA7XG4gICAgICAgIGxldCBjbXAgPSAoYSwgYikgPT4geyB2YXIgX2EsIF9iOyByZXR1cm4gKChfYSA9IGEucmFuaykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMWU5KSAtICgoX2IgPSBiLnJhbmspICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IDFlOSkgfHwgKGEubmFtZSA8IGIubmFtZSA/IC0xIDogMSk7IH07XG4gICAgICAgIGZvciAobGV0IHMgb2Ygc2VjdGlvbnMuc29ydChjbXApKSB7XG4gICAgICAgICAgICBwb3MgLT0gMWU1O1xuICAgICAgICAgICAgc2VjdGlvbk9yZGVyW3MubmFtZV0gPSBwb3M7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgb3B0aW9uIG9mIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGxldCB7IHNlY3Rpb24gfSA9IG9wdGlvbi5jb21wbGV0aW9uO1xuICAgICAgICAgICAgaWYgKHNlY3Rpb24pXG4gICAgICAgICAgICAgICAgb3B0aW9uLnNjb3JlICs9IHNlY3Rpb25PcmRlclt0eXBlb2Ygc2VjdGlvbiA9PSBcInN0cmluZ1wiID8gc2VjdGlvbiA6IHNlY3Rpb24ubmFtZV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IHJlc3VsdCA9IFtdLCBwcmV2ID0gbnVsbDtcbiAgICBsZXQgY29tcGFyZSA9IGNvbmYuY29tcGFyZUNvbXBsZXRpb25zO1xuICAgIGZvciAobGV0IG9wdCBvZiBvcHRpb25zLnNvcnQoKGEsIGIpID0+IChiLnNjb3JlIC0gYS5zY29yZSkgfHwgY29tcGFyZShhLmNvbXBsZXRpb24sIGIuY29tcGxldGlvbikpKSB7XG4gICAgICAgIGxldCBjdXIgPSBvcHQuY29tcGxldGlvbjtcbiAgICAgICAgaWYgKCFwcmV2IHx8IHByZXYubGFiZWwgIT0gY3VyLmxhYmVsIHx8IHByZXYuZGV0YWlsICE9IGN1ci5kZXRhaWwgfHxcbiAgICAgICAgICAgIChwcmV2LnR5cGUgIT0gbnVsbCAmJiBjdXIudHlwZSAhPSBudWxsICYmIHByZXYudHlwZSAhPSBjdXIudHlwZSkgfHxcbiAgICAgICAgICAgIHByZXYuYXBwbHkgIT0gY3VyLmFwcGx5IHx8IHByZXYuYm9vc3QgIT0gY3VyLmJvb3N0KVxuICAgICAgICAgICAgcmVzdWx0LnB1c2gob3B0KTtcbiAgICAgICAgZWxzZSBpZiAoc2NvcmUob3B0LmNvbXBsZXRpb24pID4gc2NvcmUocHJldikpXG4gICAgICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdID0gb3B0O1xuICAgICAgICBwcmV2ID0gb3B0LmNvbXBsZXRpb247XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5jbGFzcyBDb21wbGV0aW9uRGlhbG9nIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zLCBhdHRycywgdG9vbHRpcCwgdGltZXN0YW1wLCBzZWxlY3RlZCwgZGlzYWJsZWQpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5hdHRycyA9IGF0dHJzO1xuICAgICAgICB0aGlzLnRvb2x0aXAgPSB0b29sdGlwO1xuICAgICAgICB0aGlzLnRpbWVzdGFtcCA9IHRpbWVzdGFtcDtcbiAgICAgICAgdGhpcy5zZWxlY3RlZCA9IHNlbGVjdGVkO1xuICAgICAgICB0aGlzLmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gICAgfVxuICAgIHNldFNlbGVjdGVkKHNlbGVjdGVkLCBpZCkge1xuICAgICAgICByZXR1cm4gc2VsZWN0ZWQgPT0gdGhpcy5zZWxlY3RlZCB8fCBzZWxlY3RlZCA+PSB0aGlzLm9wdGlvbnMubGVuZ3RoID8gdGhpc1xuICAgICAgICAgICAgOiBuZXcgQ29tcGxldGlvbkRpYWxvZyh0aGlzLm9wdGlvbnMsIG1ha2VBdHRycyhpZCwgc2VsZWN0ZWQpLCB0aGlzLnRvb2x0aXAsIHRoaXMudGltZXN0YW1wLCBzZWxlY3RlZCwgdGhpcy5kaXNhYmxlZCk7XG4gICAgfVxuICAgIHN0YXRpYyBidWlsZChhY3RpdmUsIHN0YXRlLCBpZCwgcHJldiwgY29uZikge1xuICAgICAgICBsZXQgb3B0aW9ucyA9IHNvcnRPcHRpb25zKGFjdGl2ZSwgc3RhdGUpO1xuICAgICAgICBpZiAoIW9wdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJldiAmJiBhY3RpdmUuc29tZShhID0+IGEuc3RhdGUgPT0gMSAvKiBTdGF0ZS5QZW5kaW5nICovKSA/XG4gICAgICAgICAgICAgICAgbmV3IENvbXBsZXRpb25EaWFsb2cocHJldi5vcHRpb25zLCBwcmV2LmF0dHJzLCBwcmV2LnRvb2x0aXAsIHByZXYudGltZXN0YW1wLCBwcmV2LnNlbGVjdGVkLCB0cnVlKSA6IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNlbGVjdGVkID0gc3RhdGUuZmFjZXQoY29tcGxldGlvbkNvbmZpZykuc2VsZWN0T25PcGVuID8gMCA6IC0xO1xuICAgICAgICBpZiAocHJldiAmJiBwcmV2LnNlbGVjdGVkICE9IHNlbGVjdGVkICYmIHByZXYuc2VsZWN0ZWQgIT0gLTEpIHtcbiAgICAgICAgICAgIGxldCBzZWxlY3RlZFZhbHVlID0gcHJldi5vcHRpb25zW3ByZXYuc2VsZWN0ZWRdLmNvbXBsZXRpb247XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9wdGlvbnMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnNbaV0uY29tcGxldGlvbiA9PSBzZWxlY3RlZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkID0gaTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgQ29tcGxldGlvbkRpYWxvZyhvcHRpb25zLCBtYWtlQXR0cnMoaWQsIHNlbGVjdGVkKSwge1xuICAgICAgICAgICAgcG9zOiBhY3RpdmUucmVkdWNlKChhLCBiKSA9PiBiLmhhc1Jlc3VsdCgpID8gTWF0aC5taW4oYSwgYi5mcm9tKSA6IGEsIDFlOCksXG4gICAgICAgICAgICBjcmVhdGU6IGNyZWF0ZVRvb2x0aXAsXG4gICAgICAgICAgICBhYm92ZTogY29uZi5hYm92ZUN1cnNvcixcbiAgICAgICAgfSwgcHJldiA/IHByZXYudGltZXN0YW1wIDogRGF0ZS5ub3coKSwgc2VsZWN0ZWQsIGZhbHNlKTtcbiAgICB9XG4gICAgbWFwKGNoYW5nZXMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb21wbGV0aW9uRGlhbG9nKHRoaXMub3B0aW9ucywgdGhpcy5hdHRycywgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0aGlzLnRvb2x0aXApLCB7IHBvczogY2hhbmdlcy5tYXBQb3ModGhpcy50b29sdGlwLnBvcykgfSksIHRoaXMudGltZXN0YW1wLCB0aGlzLnNlbGVjdGVkLCB0aGlzLmRpc2FibGVkKTtcbiAgICB9XG59XG5jbGFzcyBDb21wbGV0aW9uU3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKGFjdGl2ZSwgaWQsIG9wZW4pIHtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBhY3RpdmU7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5vcGVuID0gb3BlbjtcbiAgICB9XG4gICAgc3RhdGljIHN0YXJ0KCkge1xuICAgICAgICByZXR1cm4gbmV3IENvbXBsZXRpb25TdGF0ZShub25lLCBcImNtLWFjLVwiICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMmU2KS50b1N0cmluZygzNiksIG51bGwpO1xuICAgIH1cbiAgICB1cGRhdGUodHIpIHtcbiAgICAgICAgbGV0IHsgc3RhdGUgfSA9IHRyLCBjb25mID0gc3RhdGUuZmFjZXQoY29tcGxldGlvbkNvbmZpZyk7XG4gICAgICAgIGxldCBzb3VyY2VzID0gY29uZi5vdmVycmlkZSB8fFxuICAgICAgICAgICAgc3RhdGUubGFuZ3VhZ2VEYXRhQXQoXCJhdXRvY29tcGxldGVcIiwgY3VyKHN0YXRlKSkubWFwKGFzU291cmNlKTtcbiAgICAgICAgbGV0IGFjdGl2ZSA9IHNvdXJjZXMubWFwKHNvdXJjZSA9PiB7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSB0aGlzLmFjdGl2ZS5maW5kKHMgPT4gcy5zb3VyY2UgPT0gc291cmNlKSB8fFxuICAgICAgICAgICAgICAgIG5ldyBBY3RpdmVTb3VyY2Uoc291cmNlLCB0aGlzLmFjdGl2ZS5zb21lKGEgPT4gYS5zdGF0ZSAhPSAwIC8qIFN0YXRlLkluYWN0aXZlICovKSA/IDEgLyogU3RhdGUuUGVuZGluZyAqLyA6IDAgLyogU3RhdGUuSW5hY3RpdmUgKi8pO1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnVwZGF0ZSh0ciwgY29uZik7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoYWN0aXZlLmxlbmd0aCA9PSB0aGlzLmFjdGl2ZS5sZW5ndGggJiYgYWN0aXZlLmV2ZXJ5KChhLCBpKSA9PiBhID09IHRoaXMuYWN0aXZlW2ldKSlcbiAgICAgICAgICAgIGFjdGl2ZSA9IHRoaXMuYWN0aXZlO1xuICAgICAgICBsZXQgb3BlbiA9IHRoaXMub3BlbjtcbiAgICAgICAgaWYgKG9wZW4gJiYgdHIuZG9jQ2hhbmdlZClcbiAgICAgICAgICAgIG9wZW4gPSBvcGVuLm1hcCh0ci5jaGFuZ2VzKTtcbiAgICAgICAgaWYgKHRyLnNlbGVjdGlvbiB8fCBhY3RpdmUuc29tZShhID0+IGEuaGFzUmVzdWx0KCkgJiYgdHIuY2hhbmdlcy50b3VjaGVzUmFuZ2UoYS5mcm9tLCBhLnRvKSkgfHxcbiAgICAgICAgICAgICFzYW1lUmVzdWx0cyhhY3RpdmUsIHRoaXMuYWN0aXZlKSlcbiAgICAgICAgICAgIG9wZW4gPSBDb21wbGV0aW9uRGlhbG9nLmJ1aWxkKGFjdGl2ZSwgc3RhdGUsIHRoaXMuaWQsIG9wZW4sIGNvbmYpO1xuICAgICAgICBlbHNlIGlmIChvcGVuICYmIG9wZW4uZGlzYWJsZWQgJiYgIWFjdGl2ZS5zb21lKGEgPT4gYS5zdGF0ZSA9PSAxIC8qIFN0YXRlLlBlbmRpbmcgKi8pKVxuICAgICAgICAgICAgb3BlbiA9IG51bGw7XG4gICAgICAgIGlmICghb3BlbiAmJiBhY3RpdmUuZXZlcnkoYSA9PiBhLnN0YXRlICE9IDEgLyogU3RhdGUuUGVuZGluZyAqLykgJiYgYWN0aXZlLnNvbWUoYSA9PiBhLmhhc1Jlc3VsdCgpKSlcbiAgICAgICAgICAgIGFjdGl2ZSA9IGFjdGl2ZS5tYXAoYSA9PiBhLmhhc1Jlc3VsdCgpID8gbmV3IEFjdGl2ZVNvdXJjZShhLnNvdXJjZSwgMCAvKiBTdGF0ZS5JbmFjdGl2ZSAqLykgOiBhKTtcbiAgICAgICAgZm9yIChsZXQgZWZmZWN0IG9mIHRyLmVmZmVjdHMpXG4gICAgICAgICAgICBpZiAoZWZmZWN0LmlzKHNldFNlbGVjdGVkRWZmZWN0KSlcbiAgICAgICAgICAgICAgICBvcGVuID0gb3BlbiAmJiBvcGVuLnNldFNlbGVjdGVkKGVmZmVjdC52YWx1ZSwgdGhpcy5pZCk7XG4gICAgICAgIHJldHVybiBhY3RpdmUgPT0gdGhpcy5hY3RpdmUgJiYgb3BlbiA9PSB0aGlzLm9wZW4gPyB0aGlzIDogbmV3IENvbXBsZXRpb25TdGF0ZShhY3RpdmUsIHRoaXMuaWQsIG9wZW4pO1xuICAgIH1cbiAgICBnZXQgdG9vbHRpcCgpIHsgcmV0dXJuIHRoaXMub3BlbiA/IHRoaXMub3Blbi50b29sdGlwIDogbnVsbDsgfVxuICAgIGdldCBhdHRycygpIHsgcmV0dXJuIHRoaXMub3BlbiA/IHRoaXMub3Blbi5hdHRycyA6IHRoaXMuYWN0aXZlLmxlbmd0aCA/IGJhc2VBdHRycyA6IG5vQXR0cnM7IH1cbn1cbmZ1bmN0aW9uIHNhbWVSZXN1bHRzKGEsIGIpIHtcbiAgICBpZiAoYSA9PSBiKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICBmb3IgKGxldCBpQSA9IDAsIGlCID0gMDs7KSB7XG4gICAgICAgIHdoaWxlIChpQSA8IGEubGVuZ3RoICYmICFhW2lBXS5oYXNSZXN1bHQpXG4gICAgICAgICAgICBpQSsrO1xuICAgICAgICB3aGlsZSAoaUIgPCBiLmxlbmd0aCAmJiAhYltpQl0uaGFzUmVzdWx0KVxuICAgICAgICAgICAgaUIrKztcbiAgICAgICAgbGV0IGVuZEEgPSBpQSA9PSBhLmxlbmd0aCwgZW5kQiA9IGlCID09IGIubGVuZ3RoO1xuICAgICAgICBpZiAoZW5kQSB8fCBlbmRCKVxuICAgICAgICAgICAgcmV0dXJuIGVuZEEgPT0gZW5kQjtcbiAgICAgICAgaWYgKGFbaUErK10ucmVzdWx0ICE9IGJbaUIrK10ucmVzdWx0KVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmNvbnN0IGJhc2VBdHRycyA9IHtcbiAgICBcImFyaWEtYXV0b2NvbXBsZXRlXCI6IFwibGlzdFwiXG59O1xuY29uc3Qgbm9BdHRycyA9IHt9O1xuZnVuY3Rpb24gbWFrZUF0dHJzKGlkLCBzZWxlY3RlZCkge1xuICAgIGxldCByZXN1bHQgPSB7XG4gICAgICAgIFwiYXJpYS1hdXRvY29tcGxldGVcIjogXCJsaXN0XCIsXG4gICAgICAgIFwiYXJpYS1oYXNwb3B1cFwiOiBcImxpc3Rib3hcIixcbiAgICAgICAgXCJhcmlhLWNvbnRyb2xzXCI6IGlkXG4gICAgfTtcbiAgICBpZiAoc2VsZWN0ZWQgPiAtMSlcbiAgICAgICAgcmVzdWx0W1wiYXJpYS1hY3RpdmVkZXNjZW5kYW50XCJdID0gaWQgKyBcIi1cIiArIHNlbGVjdGVkO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5jb25zdCBub25lID0gW107XG5mdW5jdGlvbiBnZXRVc2VyRXZlbnQodHIsIGNvbmYpIHtcbiAgICBpZiAodHIuaXNVc2VyRXZlbnQoXCJpbnB1dC5jb21wbGV0ZVwiKSkge1xuICAgICAgICBsZXQgY29tcGxldGlvbiA9IHRyLmFubm90YXRpb24ocGlja2VkQ29tcGxldGlvbik7XG4gICAgICAgIGlmIChjb21wbGV0aW9uICYmIGNvbmYuYWN0aXZhdGVPbkNvbXBsZXRpb24oY29tcGxldGlvbikpXG4gICAgICAgICAgICByZXR1cm4gXCJpbnB1dFwiO1xuICAgIH1cbiAgICByZXR1cm4gdHIuaXNVc2VyRXZlbnQoXCJpbnB1dC50eXBlXCIpID8gXCJpbnB1dFwiIDogdHIuaXNVc2VyRXZlbnQoXCJkZWxldGUuYmFja3dhcmRcIikgPyBcImRlbGV0ZVwiIDogbnVsbDtcbn1cbmNsYXNzIEFjdGl2ZVNvdXJjZSB7XG4gICAgY29uc3RydWN0b3Ioc291cmNlLCBzdGF0ZSwgZXhwbGljaXRQb3MgPSAtMSkge1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB0aGlzLmV4cGxpY2l0UG9zID0gZXhwbGljaXRQb3M7XG4gICAgfVxuICAgIGhhc1Jlc3VsdCgpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgdXBkYXRlKHRyLCBjb25mKSB7XG4gICAgICAgIGxldCBldmVudCA9IGdldFVzZXJFdmVudCh0ciwgY29uZiksIHZhbHVlID0gdGhpcztcbiAgICAgICAgaWYgKGV2ZW50KVxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5oYW5kbGVVc2VyRXZlbnQodHIsIGV2ZW50LCBjb25mKTtcbiAgICAgICAgZWxzZSBpZiAodHIuZG9jQ2hhbmdlZClcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuaGFuZGxlQ2hhbmdlKHRyKTtcbiAgICAgICAgZWxzZSBpZiAodHIuc2VsZWN0aW9uICYmIHZhbHVlLnN0YXRlICE9IDAgLyogU3RhdGUuSW5hY3RpdmUgKi8pXG4gICAgICAgICAgICB2YWx1ZSA9IG5ldyBBY3RpdmVTb3VyY2UodmFsdWUuc291cmNlLCAwIC8qIFN0YXRlLkluYWN0aXZlICovKTtcbiAgICAgICAgZm9yIChsZXQgZWZmZWN0IG9mIHRyLmVmZmVjdHMpIHtcbiAgICAgICAgICAgIGlmIChlZmZlY3QuaXMoc3RhcnRDb21wbGV0aW9uRWZmZWN0KSlcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG5ldyBBY3RpdmVTb3VyY2UodmFsdWUuc291cmNlLCAxIC8qIFN0YXRlLlBlbmRpbmcgKi8sIGVmZmVjdC52YWx1ZSA/IGN1cih0ci5zdGF0ZSkgOiAtMSk7XG4gICAgICAgICAgICBlbHNlIGlmIChlZmZlY3QuaXMoY2xvc2VDb21wbGV0aW9uRWZmZWN0KSlcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG5ldyBBY3RpdmVTb3VyY2UodmFsdWUuc291cmNlLCAwIC8qIFN0YXRlLkluYWN0aXZlICovKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGVmZmVjdC5pcyhzZXRBY3RpdmVFZmZlY3QpKVxuICAgICAgICAgICAgICAgIGZvciAobGV0IGFjdGl2ZSBvZiBlZmZlY3QudmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIGlmIChhY3RpdmUuc291cmNlID09IHZhbHVlLnNvdXJjZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gYWN0aXZlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaGFuZGxlVXNlckV2ZW50KHRyLCB0eXBlLCBjb25mKSB7XG4gICAgICAgIHJldHVybiB0eXBlID09IFwiZGVsZXRlXCIgfHwgIWNvbmYuYWN0aXZhdGVPblR5cGluZyA/IHRoaXMubWFwKHRyLmNoYW5nZXMpIDogbmV3IEFjdGl2ZVNvdXJjZSh0aGlzLnNvdXJjZSwgMSAvKiBTdGF0ZS5QZW5kaW5nICovKTtcbiAgICB9XG4gICAgaGFuZGxlQ2hhbmdlKHRyKSB7XG4gICAgICAgIHJldHVybiB0ci5jaGFuZ2VzLnRvdWNoZXNSYW5nZShjdXIodHIuc3RhcnRTdGF0ZSkpID8gbmV3IEFjdGl2ZVNvdXJjZSh0aGlzLnNvdXJjZSwgMCAvKiBTdGF0ZS5JbmFjdGl2ZSAqLykgOiB0aGlzLm1hcCh0ci5jaGFuZ2VzKTtcbiAgICB9XG4gICAgbWFwKGNoYW5nZXMpIHtcbiAgICAgICAgcmV0dXJuIGNoYW5nZXMuZW1wdHkgfHwgdGhpcy5leHBsaWNpdFBvcyA8IDAgPyB0aGlzIDogbmV3IEFjdGl2ZVNvdXJjZSh0aGlzLnNvdXJjZSwgdGhpcy5zdGF0ZSwgY2hhbmdlcy5tYXBQb3ModGhpcy5leHBsaWNpdFBvcykpO1xuICAgIH1cbn1cbmNsYXNzIEFjdGl2ZVJlc3VsdCBleHRlbmRzIEFjdGl2ZVNvdXJjZSB7XG4gICAgY29uc3RydWN0b3Ioc291cmNlLCBleHBsaWNpdFBvcywgcmVzdWx0LCBmcm9tLCB0bykge1xuICAgICAgICBzdXBlcihzb3VyY2UsIDIgLyogU3RhdGUuUmVzdWx0ICovLCBleHBsaWNpdFBvcyk7XG4gICAgICAgIHRoaXMucmVzdWx0ID0gcmVzdWx0O1xuICAgICAgICB0aGlzLmZyb20gPSBmcm9tO1xuICAgICAgICB0aGlzLnRvID0gdG87XG4gICAgfVxuICAgIGhhc1Jlc3VsdCgpIHsgcmV0dXJuIHRydWU7IH1cbiAgICBoYW5kbGVVc2VyRXZlbnQodHIsIHR5cGUsIGNvbmYpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXN1bHQ7XG4gICAgICAgIGlmIChyZXN1bHQubWFwICYmICF0ci5jaGFuZ2VzLmVtcHR5KVxuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0Lm1hcChyZXN1bHQsIHRyLmNoYW5nZXMpO1xuICAgICAgICBsZXQgZnJvbSA9IHRyLmNoYW5nZXMubWFwUG9zKHRoaXMuZnJvbSksIHRvID0gdHIuY2hhbmdlcy5tYXBQb3ModGhpcy50bywgMSk7XG4gICAgICAgIGxldCBwb3MgPSBjdXIodHIuc3RhdGUpO1xuICAgICAgICBpZiAoKHRoaXMuZXhwbGljaXRQb3MgPCAwID8gcG9zIDw9IGZyb20gOiBwb3MgPCB0aGlzLmZyb20pIHx8XG4gICAgICAgICAgICBwb3MgPiB0byB8fCAhcmVzdWx0IHx8XG4gICAgICAgICAgICB0eXBlID09IFwiZGVsZXRlXCIgJiYgY3VyKHRyLnN0YXJ0U3RhdGUpID09IHRoaXMuZnJvbSlcbiAgICAgICAgICAgIHJldHVybiBuZXcgQWN0aXZlU291cmNlKHRoaXMuc291cmNlLCB0eXBlID09IFwiaW5wdXRcIiAmJiBjb25mLmFjdGl2YXRlT25UeXBpbmcgPyAxIC8qIFN0YXRlLlBlbmRpbmcgKi8gOiAwIC8qIFN0YXRlLkluYWN0aXZlICovKTtcbiAgICAgICAgbGV0IGV4cGxpY2l0UG9zID0gdGhpcy5leHBsaWNpdFBvcyA8IDAgPyAtMSA6IHRyLmNoYW5nZXMubWFwUG9zKHRoaXMuZXhwbGljaXRQb3MpO1xuICAgICAgICBpZiAoY2hlY2tWYWxpZChyZXN1bHQudmFsaWRGb3IsIHRyLnN0YXRlLCBmcm9tLCB0bykpXG4gICAgICAgICAgICByZXR1cm4gbmV3IEFjdGl2ZVJlc3VsdCh0aGlzLnNvdXJjZSwgZXhwbGljaXRQb3MsIHJlc3VsdCwgZnJvbSwgdG8pO1xuICAgICAgICBpZiAocmVzdWx0LnVwZGF0ZSAmJlxuICAgICAgICAgICAgKHJlc3VsdCA9IHJlc3VsdC51cGRhdGUocmVzdWx0LCBmcm9tLCB0bywgbmV3IENvbXBsZXRpb25Db250ZXh0KHRyLnN0YXRlLCBwb3MsIGV4cGxpY2l0UG9zID49IDApKSkpXG4gICAgICAgICAgICByZXR1cm4gbmV3IEFjdGl2ZVJlc3VsdCh0aGlzLnNvdXJjZSwgZXhwbGljaXRQb3MsIHJlc3VsdCwgcmVzdWx0LmZyb20sIChfYSA9IHJlc3VsdC50bykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogY3VyKHRyLnN0YXRlKSk7XG4gICAgICAgIHJldHVybiBuZXcgQWN0aXZlU291cmNlKHRoaXMuc291cmNlLCAxIC8qIFN0YXRlLlBlbmRpbmcgKi8sIGV4cGxpY2l0UG9zKTtcbiAgICB9XG4gICAgaGFuZGxlQ2hhbmdlKHRyKSB7XG4gICAgICAgIHJldHVybiB0ci5jaGFuZ2VzLnRvdWNoZXNSYW5nZSh0aGlzLmZyb20sIHRoaXMudG8pID8gbmV3IEFjdGl2ZVNvdXJjZSh0aGlzLnNvdXJjZSwgMCAvKiBTdGF0ZS5JbmFjdGl2ZSAqLykgOiB0aGlzLm1hcCh0ci5jaGFuZ2VzKTtcbiAgICB9XG4gICAgbWFwKG1hcHBpbmcpIHtcbiAgICAgICAgaWYgKG1hcHBpbmcuZW1wdHkpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMucmVzdWx0Lm1hcCA/IHRoaXMucmVzdWx0Lm1hcCh0aGlzLnJlc3VsdCwgbWFwcGluZykgOiB0aGlzLnJlc3VsdDtcbiAgICAgICAgaWYgKCFyZXN1bHQpXG4gICAgICAgICAgICByZXR1cm4gbmV3IEFjdGl2ZVNvdXJjZSh0aGlzLnNvdXJjZSwgMCAvKiBTdGF0ZS5JbmFjdGl2ZSAqLyk7XG4gICAgICAgIHJldHVybiBuZXcgQWN0aXZlUmVzdWx0KHRoaXMuc291cmNlLCB0aGlzLmV4cGxpY2l0UG9zIDwgMCA/IC0xIDogbWFwcGluZy5tYXBQb3ModGhpcy5leHBsaWNpdFBvcyksIHRoaXMucmVzdWx0LCBtYXBwaW5nLm1hcFBvcyh0aGlzLmZyb20pLCBtYXBwaW5nLm1hcFBvcyh0aGlzLnRvLCAxKSk7XG4gICAgfVxufVxuZnVuY3Rpb24gY2hlY2tWYWxpZCh2YWxpZEZvciwgc3RhdGUsIGZyb20sIHRvKSB7XG4gICAgaWYgKCF2YWxpZEZvcilcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGxldCB0ZXh0ID0gc3RhdGUuc2xpY2VEb2MoZnJvbSwgdG8pO1xuICAgIHJldHVybiB0eXBlb2YgdmFsaWRGb3IgPT0gXCJmdW5jdGlvblwiID8gdmFsaWRGb3IodGV4dCwgZnJvbSwgdG8sIHN0YXRlKSA6IGVuc3VyZUFuY2hvcih2YWxpZEZvciwgdHJ1ZSkudGVzdCh0ZXh0KTtcbn1cbmNvbnN0IHNldEFjdGl2ZUVmZmVjdCA9IHN0YXRlLlN0YXRlRWZmZWN0LmRlZmluZSh7XG4gICAgbWFwKHNvdXJjZXMsIG1hcHBpbmcpIHsgcmV0dXJuIHNvdXJjZXMubWFwKHMgPT4gcy5tYXAobWFwcGluZykpOyB9XG59KTtcbmNvbnN0IHNldFNlbGVjdGVkRWZmZWN0ID0gc3RhdGUuU3RhdGVFZmZlY3QuZGVmaW5lKCk7XG5jb25zdCBjb21wbGV0aW9uU3RhdGUgPSBzdGF0ZS5TdGF0ZUZpZWxkLmRlZmluZSh7XG4gICAgY3JlYXRlKCkgeyByZXR1cm4gQ29tcGxldGlvblN0YXRlLnN0YXJ0KCk7IH0sXG4gICAgdXBkYXRlKHZhbHVlLCB0cikgeyByZXR1cm4gdmFsdWUudXBkYXRlKHRyKTsgfSxcbiAgICBwcm92aWRlOiBmID0+IFtcbiAgICAgICAgdmlldy5zaG93VG9vbHRpcC5mcm9tKGYsIHZhbCA9PiB2YWwudG9vbHRpcCksXG4gICAgICAgIHZpZXcuRWRpdG9yVmlldy5jb250ZW50QXR0cmlidXRlcy5mcm9tKGYsIHN0YXRlID0+IHN0YXRlLmF0dHJzKVxuICAgIF1cbn0pO1xuZnVuY3Rpb24gYXBwbHlDb21wbGV0aW9uKHZpZXcsIG9wdGlvbikge1xuICAgIGNvbnN0IGFwcGx5ID0gb3B0aW9uLmNvbXBsZXRpb24uYXBwbHkgfHwgb3B0aW9uLmNvbXBsZXRpb24ubGFiZWw7XG4gICAgbGV0IHJlc3VsdCA9IHZpZXcuc3RhdGUuZmllbGQoY29tcGxldGlvblN0YXRlKS5hY3RpdmUuZmluZChhID0+IGEuc291cmNlID09IG9wdGlvbi5zb3VyY2UpO1xuICAgIGlmICghKHJlc3VsdCBpbnN0YW5jZW9mIEFjdGl2ZVJlc3VsdCkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAodHlwZW9mIGFwcGx5ID09IFwic3RyaW5nXCIpXG4gICAgICAgIHZpZXcuZGlzcGF0Y2goT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBpbnNlcnRDb21wbGV0aW9uVGV4dCh2aWV3LnN0YXRlLCBhcHBseSwgcmVzdWx0LmZyb20sIHJlc3VsdC50bykpLCB7IGFubm90YXRpb25zOiBwaWNrZWRDb21wbGV0aW9uLm9mKG9wdGlvbi5jb21wbGV0aW9uKSB9KSk7XG4gICAgZWxzZVxuICAgICAgICBhcHBseSh2aWV3LCBvcHRpb24uY29tcGxldGlvbiwgcmVzdWx0LmZyb20sIHJlc3VsdC50byk7XG4gICAgcmV0dXJuIHRydWU7XG59XG5jb25zdCBjcmVhdGVUb29sdGlwID0gY29tcGxldGlvblRvb2x0aXAoY29tcGxldGlvblN0YXRlLCBhcHBseUNvbXBsZXRpb24pO1xuXG4vKipcblJldHVybnMgYSBjb21tYW5kIHRoYXQgbW92ZXMgdGhlIGNvbXBsZXRpb24gc2VsZWN0aW9uIGZvcndhcmQgb3JcbmJhY2t3YXJkIGJ5IHRoZSBnaXZlbiBhbW91bnQuXG4qL1xuZnVuY3Rpb24gbW92ZUNvbXBsZXRpb25TZWxlY3Rpb24oZm9yd2FyZCwgYnkgPSBcIm9wdGlvblwiKSB7XG4gICAgcmV0dXJuICh2aWV3JDEpID0+IHtcbiAgICAgICAgbGV0IGNTdGF0ZSA9IHZpZXckMS5zdGF0ZS5maWVsZChjb21wbGV0aW9uU3RhdGUsIGZhbHNlKTtcbiAgICAgICAgaWYgKCFjU3RhdGUgfHwgIWNTdGF0ZS5vcGVuIHx8IGNTdGF0ZS5vcGVuLmRpc2FibGVkIHx8XG4gICAgICAgICAgICBEYXRlLm5vdygpIC0gY1N0YXRlLm9wZW4udGltZXN0YW1wIDwgdmlldyQxLnN0YXRlLmZhY2V0KGNvbXBsZXRpb25Db25maWcpLmludGVyYWN0aW9uRGVsYXkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGxldCBzdGVwID0gMSwgdG9vbHRpcDtcbiAgICAgICAgaWYgKGJ5ID09IFwicGFnZVwiICYmICh0b29sdGlwID0gdmlldy5nZXRUb29sdGlwKHZpZXckMSwgY1N0YXRlLm9wZW4udG9vbHRpcCkpKVxuICAgICAgICAgICAgc3RlcCA9IE1hdGgubWF4KDIsIE1hdGguZmxvb3IodG9vbHRpcC5kb20ub2Zmc2V0SGVpZ2h0IC9cbiAgICAgICAgICAgICAgICB0b29sdGlwLmRvbS5xdWVyeVNlbGVjdG9yKFwibGlcIikub2Zmc2V0SGVpZ2h0KSAtIDEpO1xuICAgICAgICBsZXQgeyBsZW5ndGggfSA9IGNTdGF0ZS5vcGVuLm9wdGlvbnM7XG4gICAgICAgIGxldCBzZWxlY3RlZCA9IGNTdGF0ZS5vcGVuLnNlbGVjdGVkID4gLTEgPyBjU3RhdGUub3Blbi5zZWxlY3RlZCArIHN0ZXAgKiAoZm9yd2FyZCA/IDEgOiAtMSkgOiBmb3J3YXJkID8gMCA6IGxlbmd0aCAtIDE7XG4gICAgICAgIGlmIChzZWxlY3RlZCA8IDApXG4gICAgICAgICAgICBzZWxlY3RlZCA9IGJ5ID09IFwicGFnZVwiID8gMCA6IGxlbmd0aCAtIDE7XG4gICAgICAgIGVsc2UgaWYgKHNlbGVjdGVkID49IGxlbmd0aClcbiAgICAgICAgICAgIHNlbGVjdGVkID0gYnkgPT0gXCJwYWdlXCIgPyBsZW5ndGggLSAxIDogMDtcbiAgICAgICAgdmlldyQxLmRpc3BhdGNoKHsgZWZmZWN0czogc2V0U2VsZWN0ZWRFZmZlY3Qub2Yoc2VsZWN0ZWQpIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xufVxuLyoqXG5BY2NlcHQgdGhlIGN1cnJlbnQgY29tcGxldGlvbi5cbiovXG5jb25zdCBhY2NlcHRDb21wbGV0aW9uID0gKHZpZXcpID0+IHtcbiAgICBsZXQgY1N0YXRlID0gdmlldy5zdGF0ZS5maWVsZChjb21wbGV0aW9uU3RhdGUsIGZhbHNlKTtcbiAgICBpZiAodmlldy5zdGF0ZS5yZWFkT25seSB8fCAhY1N0YXRlIHx8ICFjU3RhdGUub3BlbiB8fCBjU3RhdGUub3Blbi5zZWxlY3RlZCA8IDAgfHwgY1N0YXRlLm9wZW4uZGlzYWJsZWQgfHxcbiAgICAgICAgRGF0ZS5ub3coKSAtIGNTdGF0ZS5vcGVuLnRpbWVzdGFtcCA8IHZpZXcuc3RhdGUuZmFjZXQoY29tcGxldGlvbkNvbmZpZykuaW50ZXJhY3Rpb25EZWxheSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBhcHBseUNvbXBsZXRpb24odmlldywgY1N0YXRlLm9wZW4ub3B0aW9uc1tjU3RhdGUub3Blbi5zZWxlY3RlZF0pO1xufTtcbi8qKlxuRXhwbGljaXRseSBzdGFydCBhdXRvY29tcGxldGlvbi5cbiovXG5jb25zdCBzdGFydENvbXBsZXRpb24gPSAodmlldykgPT4ge1xuICAgIGxldCBjU3RhdGUgPSB2aWV3LnN0YXRlLmZpZWxkKGNvbXBsZXRpb25TdGF0ZSwgZmFsc2UpO1xuICAgIGlmICghY1N0YXRlKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgdmlldy5kaXNwYXRjaCh7IGVmZmVjdHM6IHN0YXJ0Q29tcGxldGlvbkVmZmVjdC5vZih0cnVlKSB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbn07XG4vKipcbkNsb3NlIHRoZSBjdXJyZW50bHkgYWN0aXZlIGNvbXBsZXRpb24uXG4qL1xuY29uc3QgY2xvc2VDb21wbGV0aW9uID0gKHZpZXcpID0+IHtcbiAgICBsZXQgY1N0YXRlID0gdmlldy5zdGF0ZS5maWVsZChjb21wbGV0aW9uU3RhdGUsIGZhbHNlKTtcbiAgICBpZiAoIWNTdGF0ZSB8fCAhY1N0YXRlLmFjdGl2ZS5zb21lKGEgPT4gYS5zdGF0ZSAhPSAwIC8qIFN0YXRlLkluYWN0aXZlICovKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHZpZXcuZGlzcGF0Y2goeyBlZmZlY3RzOiBjbG9zZUNvbXBsZXRpb25FZmZlY3Qub2YobnVsbCkgfSk7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuY2xhc3MgUnVubmluZ1F1ZXJ5IHtcbiAgICBjb25zdHJ1Y3RvcihhY3RpdmUsIGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBhY3RpdmU7XG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIHRoaXMudGltZSA9IERhdGUubm93KCk7XG4gICAgICAgIHRoaXMudXBkYXRlcyA9IFtdO1xuICAgICAgICAvLyBOb3RlIHRoYXQgJ3VuZGVmaW5lZCcgbWVhbnMgJ25vdCBkb25lIHlldCcsIHdoZXJlYXMgJ251bGwnIG1lYW5zXG4gICAgICAgIC8vICdxdWVyeSByZXR1cm5lZCBudWxsJy5cbiAgICAgICAgdGhpcy5kb25lID0gdW5kZWZpbmVkO1xuICAgIH1cbn1cbmNvbnN0IE1heFVwZGF0ZUNvdW50ID0gNTAsIE1pbkFib3J0VGltZSA9IDEwMDA7XG5jb25zdCBjb21wbGV0aW9uUGx1Z2luID0gdmlldy5WaWV3UGx1Z2luLmZyb21DbGFzcyhjbGFzcyB7XG4gICAgY29uc3RydWN0b3Iodmlldykge1xuICAgICAgICB0aGlzLnZpZXcgPSB2aWV3O1xuICAgICAgICB0aGlzLmRlYm91bmNlVXBkYXRlID0gLTE7XG4gICAgICAgIHRoaXMucnVubmluZyA9IFtdO1xuICAgICAgICB0aGlzLmRlYm91bmNlQWNjZXB0ID0gLTE7XG4gICAgICAgIHRoaXMucGVuZGluZ1N0YXJ0ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY29tcG9zaW5nID0gMCAvKiBDb21wb3NpdGlvblN0YXRlLk5vbmUgKi87XG4gICAgICAgIGZvciAobGV0IGFjdGl2ZSBvZiB2aWV3LnN0YXRlLmZpZWxkKGNvbXBsZXRpb25TdGF0ZSkuYWN0aXZlKVxuICAgICAgICAgICAgaWYgKGFjdGl2ZS5zdGF0ZSA9PSAxIC8qIFN0YXRlLlBlbmRpbmcgKi8pXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydFF1ZXJ5KGFjdGl2ZSk7XG4gICAgfVxuICAgIHVwZGF0ZSh1cGRhdGUpIHtcbiAgICAgICAgbGV0IGNTdGF0ZSA9IHVwZGF0ZS5zdGF0ZS5maWVsZChjb21wbGV0aW9uU3RhdGUpO1xuICAgICAgICBsZXQgY29uZiA9IHVwZGF0ZS5zdGF0ZS5mYWNldChjb21wbGV0aW9uQ29uZmlnKTtcbiAgICAgICAgaWYgKCF1cGRhdGUuc2VsZWN0aW9uU2V0ICYmICF1cGRhdGUuZG9jQ2hhbmdlZCAmJiB1cGRhdGUuc3RhcnRTdGF0ZS5maWVsZChjb21wbGV0aW9uU3RhdGUpID09IGNTdGF0ZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbGV0IGRvZXNSZXNldCA9IHVwZGF0ZS50cmFuc2FjdGlvbnMuc29tZSh0ciA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKHRyLnNlbGVjdGlvbiB8fCB0ci5kb2NDaGFuZ2VkKSAmJiAhZ2V0VXNlckV2ZW50KHRyLCBjb25mKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ydW5uaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgcXVlcnkgPSB0aGlzLnJ1bm5pbmdbaV07XG4gICAgICAgICAgICBpZiAoZG9lc1Jlc2V0IHx8XG4gICAgICAgICAgICAgICAgcXVlcnkudXBkYXRlcy5sZW5ndGggKyB1cGRhdGUudHJhbnNhY3Rpb25zLmxlbmd0aCA+IE1heFVwZGF0ZUNvdW50ICYmIERhdGUubm93KCkgLSBxdWVyeS50aW1lID4gTWluQWJvcnRUaW1lKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaGFuZGxlciBvZiBxdWVyeS5jb250ZXh0LmFib3J0TGlzdGVuZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXcubG9nRXhjZXB0aW9uKHRoaXMudmlldy5zdGF0ZSwgZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcXVlcnkuY29udGV4dC5hYm9ydExpc3RlbmVycyA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5ydW5uaW5nLnNwbGljZShpLS0sIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcXVlcnkudXBkYXRlcy5wdXNoKC4uLnVwZGF0ZS50cmFuc2FjdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmRlYm91bmNlVXBkYXRlID4gLTEpXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5kZWJvdW5jZVVwZGF0ZSk7XG4gICAgICAgIGlmICh1cGRhdGUudHJhbnNhY3Rpb25zLnNvbWUodHIgPT4gdHIuZWZmZWN0cy5zb21lKGUgPT4gZS5pcyhzdGFydENvbXBsZXRpb25FZmZlY3QpKSkpXG4gICAgICAgICAgICB0aGlzLnBlbmRpbmdTdGFydCA9IHRydWU7XG4gICAgICAgIGxldCBkZWxheSA9IHRoaXMucGVuZGluZ1N0YXJ0ID8gNTAgOiBjb25mLmFjdGl2YXRlT25UeXBpbmdEZWxheTtcbiAgICAgICAgdGhpcy5kZWJvdW5jZVVwZGF0ZSA9IGNTdGF0ZS5hY3RpdmUuc29tZShhID0+IGEuc3RhdGUgPT0gMSAvKiBTdGF0ZS5QZW5kaW5nICovICYmICF0aGlzLnJ1bm5pbmcuc29tZShxID0+IHEuYWN0aXZlLnNvdXJjZSA9PSBhLnNvdXJjZSkpXG4gICAgICAgICAgICA/IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zdGFydFVwZGF0ZSgpLCBkZWxheSkgOiAtMTtcbiAgICAgICAgaWYgKHRoaXMuY29tcG9zaW5nICE9IDAgLyogQ29tcG9zaXRpb25TdGF0ZS5Ob25lICovKVxuICAgICAgICAgICAgZm9yIChsZXQgdHIgb2YgdXBkYXRlLnRyYW5zYWN0aW9ucykge1xuICAgICAgICAgICAgICAgIGlmIChnZXRVc2VyRXZlbnQodHIsIGNvbmYpID09IFwiaW5wdXRcIilcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wb3NpbmcgPSAyIC8qIENvbXBvc2l0aW9uU3RhdGUuQ2hhbmdlZCAqLztcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLmNvbXBvc2luZyA9PSAyIC8qIENvbXBvc2l0aW9uU3RhdGUuQ2hhbmdlZCAqLyAmJiB0ci5zZWxlY3Rpb24pXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcG9zaW5nID0gMyAvKiBDb21wb3NpdGlvblN0YXRlLkNoYW5nZWRBbmRNb3ZlZCAqLztcbiAgICAgICAgICAgIH1cbiAgICB9XG4gICAgc3RhcnRVcGRhdGUoKSB7XG4gICAgICAgIHRoaXMuZGVib3VuY2VVcGRhdGUgPSAtMTtcbiAgICAgICAgdGhpcy5wZW5kaW5nU3RhcnQgPSBmYWxzZTtcbiAgICAgICAgbGV0IHsgc3RhdGUgfSA9IHRoaXMudmlldywgY1N0YXRlID0gc3RhdGUuZmllbGQoY29tcGxldGlvblN0YXRlKTtcbiAgICAgICAgZm9yIChsZXQgYWN0aXZlIG9mIGNTdGF0ZS5hY3RpdmUpIHtcbiAgICAgICAgICAgIGlmIChhY3RpdmUuc3RhdGUgPT0gMSAvKiBTdGF0ZS5QZW5kaW5nICovICYmICF0aGlzLnJ1bm5pbmcuc29tZShyID0+IHIuYWN0aXZlLnNvdXJjZSA9PSBhY3RpdmUuc291cmNlKSlcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0UXVlcnkoYWN0aXZlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGFydFF1ZXJ5KGFjdGl2ZSkge1xuICAgICAgICBsZXQgeyBzdGF0ZSB9ID0gdGhpcy52aWV3LCBwb3MgPSBjdXIoc3RhdGUpO1xuICAgICAgICBsZXQgY29udGV4dCA9IG5ldyBDb21wbGV0aW9uQ29udGV4dChzdGF0ZSwgcG9zLCBhY3RpdmUuZXhwbGljaXRQb3MgPT0gcG9zKTtcbiAgICAgICAgbGV0IHBlbmRpbmcgPSBuZXcgUnVubmluZ1F1ZXJ5KGFjdGl2ZSwgY29udGV4dCk7XG4gICAgICAgIHRoaXMucnVubmluZy5wdXNoKHBlbmRpbmcpO1xuICAgICAgICBQcm9taXNlLnJlc29sdmUoYWN0aXZlLnNvdXJjZShjb250ZXh0KSkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgaWYgKCFwZW5kaW5nLmNvbnRleHQuYWJvcnRlZCkge1xuICAgICAgICAgICAgICAgIHBlbmRpbmcuZG9uZSA9IHJlc3VsdCB8fCBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVBY2NlcHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZXJyID0+IHtcbiAgICAgICAgICAgIHRoaXMudmlldy5kaXNwYXRjaCh7IGVmZmVjdHM6IGNsb3NlQ29tcGxldGlvbkVmZmVjdC5vZihudWxsKSB9KTtcbiAgICAgICAgICAgIHZpZXcubG9nRXhjZXB0aW9uKHRoaXMudmlldy5zdGF0ZSwgZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHNjaGVkdWxlQWNjZXB0KCkge1xuICAgICAgICBpZiAodGhpcy5ydW5uaW5nLmV2ZXJ5KHEgPT4gcS5kb25lICE9PSB1bmRlZmluZWQpKVxuICAgICAgICAgICAgdGhpcy5hY2NlcHQoKTtcbiAgICAgICAgZWxzZSBpZiAodGhpcy5kZWJvdW5jZUFjY2VwdCA8IDApXG4gICAgICAgICAgICB0aGlzLmRlYm91bmNlQWNjZXB0ID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLmFjY2VwdCgpLCB0aGlzLnZpZXcuc3RhdGUuZmFjZXQoY29tcGxldGlvbkNvbmZpZykudXBkYXRlU3luY1RpbWUpO1xuICAgIH1cbiAgICAvLyBGb3IgZWFjaCBmaW5pc2hlZCBxdWVyeSBpbiB0aGlzLnJ1bm5pbmcsIHRyeSB0byBjcmVhdGUgYSByZXN1bHRcbiAgICAvLyBvciwgaWYgYXBwcm9wcmlhdGUsIHJlc3RhcnQgdGhlIHF1ZXJ5LlxuICAgIGFjY2VwdCgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodGhpcy5kZWJvdW5jZUFjY2VwdCA+IC0xKVxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZGVib3VuY2VBY2NlcHQpO1xuICAgICAgICB0aGlzLmRlYm91bmNlQWNjZXB0ID0gLTE7XG4gICAgICAgIGxldCB1cGRhdGVkID0gW107XG4gICAgICAgIGxldCBjb25mID0gdGhpcy52aWV3LnN0YXRlLmZhY2V0KGNvbXBsZXRpb25Db25maWcpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucnVubmluZy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHF1ZXJ5ID0gdGhpcy5ydW5uaW5nW2ldO1xuICAgICAgICAgICAgaWYgKHF1ZXJ5LmRvbmUgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIHRoaXMucnVubmluZy5zcGxpY2UoaS0tLCAxKTtcbiAgICAgICAgICAgIGlmIChxdWVyeS5kb25lKSB7XG4gICAgICAgICAgICAgICAgbGV0IGFjdGl2ZSA9IG5ldyBBY3RpdmVSZXN1bHQocXVlcnkuYWN0aXZlLnNvdXJjZSwgcXVlcnkuYWN0aXZlLmV4cGxpY2l0UG9zLCBxdWVyeS5kb25lLCBxdWVyeS5kb25lLmZyb20sIChfYSA9IHF1ZXJ5LmRvbmUudG8pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGN1cihxdWVyeS51cGRhdGVzLmxlbmd0aCA/IHF1ZXJ5LnVwZGF0ZXNbMF0uc3RhcnRTdGF0ZSA6IHRoaXMudmlldy5zdGF0ZSkpO1xuICAgICAgICAgICAgICAgIC8vIFJlcGxheSB0aGUgdHJhbnNhY3Rpb25zIHRoYXQgaGFwcGVuZWQgc2luY2UgdGhlIHN0YXJ0IG9mXG4gICAgICAgICAgICAgICAgLy8gdGhlIHJlcXVlc3QgYW5kIHNlZSBpZiB0aGF0IHByZXNlcnZlcyB0aGUgcmVzdWx0XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgdHIgb2YgcXVlcnkudXBkYXRlcylcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlID0gYWN0aXZlLnVwZGF0ZSh0ciwgY29uZik7XG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2ZS5oYXNSZXN1bHQoKSkge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVkLnB1c2goYWN0aXZlKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGN1cnJlbnQgPSB0aGlzLnZpZXcuc3RhdGUuZmllbGQoY29tcGxldGlvblN0YXRlKS5hY3RpdmUuZmluZChhID0+IGEuc291cmNlID09IHF1ZXJ5LmFjdGl2ZS5zb3VyY2UpO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnQgJiYgY3VycmVudC5zdGF0ZSA9PSAxIC8qIFN0YXRlLlBlbmRpbmcgKi8pIHtcbiAgICAgICAgICAgICAgICBpZiAocXVlcnkuZG9uZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEV4cGxpY2l0bHkgZmFpbGVkLiBTaG91bGQgY2xlYXIgdGhlIHBlbmRpbmcgc3RhdHVzIGlmIGl0XG4gICAgICAgICAgICAgICAgICAgIC8vIGhhc24ndCBiZWVuIHJlLXNldCBpbiB0aGUgbWVhbnRpbWUuXG4gICAgICAgICAgICAgICAgICAgIGxldCBhY3RpdmUgPSBuZXcgQWN0aXZlU291cmNlKHF1ZXJ5LmFjdGl2ZS5zb3VyY2UsIDAgLyogU3RhdGUuSW5hY3RpdmUgKi8pO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCB0ciBvZiBxdWVyeS51cGRhdGVzKVxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlID0gYWN0aXZlLnVwZGF0ZSh0ciwgY29uZik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhY3RpdmUuc3RhdGUgIT0gMSAvKiBTdGF0ZS5QZW5kaW5nICovKVxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZC5wdXNoKGFjdGl2ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBDbGVhcmVkIGJ5IHN1YnNlcXVlbnQgdHJhbnNhY3Rpb25zLiBSZXN0YXJ0LlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0UXVlcnkoY3VycmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh1cGRhdGVkLmxlbmd0aClcbiAgICAgICAgICAgIHRoaXMudmlldy5kaXNwYXRjaCh7IGVmZmVjdHM6IHNldEFjdGl2ZUVmZmVjdC5vZih1cGRhdGVkKSB9KTtcbiAgICB9XG59LCB7XG4gICAgZXZlbnRIYW5kbGVyczoge1xuICAgICAgICBibHVyKGV2ZW50KSB7XG4gICAgICAgICAgICBsZXQgc3RhdGUgPSB0aGlzLnZpZXcuc3RhdGUuZmllbGQoY29tcGxldGlvblN0YXRlLCBmYWxzZSk7XG4gICAgICAgICAgICBpZiAoc3RhdGUgJiYgc3RhdGUudG9vbHRpcCAmJiB0aGlzLnZpZXcuc3RhdGUuZmFjZXQoY29tcGxldGlvbkNvbmZpZykuY2xvc2VPbkJsdXIpIHtcbiAgICAgICAgICAgICAgICBsZXQgZGlhbG9nID0gc3RhdGUub3BlbiAmJiB2aWV3LmdldFRvb2x0aXAodGhpcy52aWV3LCBzdGF0ZS5vcGVuLnRvb2x0aXApO1xuICAgICAgICAgICAgICAgIGlmICghZGlhbG9nIHx8ICFkaWFsb2cuZG9tLmNvbnRhaW5zKGV2ZW50LnJlbGF0ZWRUYXJnZXQpKVxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMudmlldy5kaXNwYXRjaCh7IGVmZmVjdHM6IGNsb3NlQ29tcGxldGlvbkVmZmVjdC5vZihudWxsKSB9KSwgMTApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjb21wb3NpdGlvbnN0YXJ0KCkge1xuICAgICAgICAgICAgdGhpcy5jb21wb3NpbmcgPSAxIC8qIENvbXBvc2l0aW9uU3RhdGUuU3RhcnRlZCAqLztcbiAgICAgICAgfSxcbiAgICAgICAgY29tcG9zaXRpb25lbmQoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jb21wb3NpbmcgPT0gMyAvKiBDb21wb3NpdGlvblN0YXRlLkNoYW5nZWRBbmRNb3ZlZCAqLykge1xuICAgICAgICAgICAgICAgIC8vIFNhZmFyaSBmaXJlcyBjb21wb3NpdGlvbmVuZCBldmVudHMgc3luY2hyb25vdXNseSwgcG9zc2libHlcbiAgICAgICAgICAgICAgICAvLyBmcm9tIGluc2lkZSBhbiB1cGRhdGUsIHNvIGRpc3BhdGNoIGFzeW5jaHJvbm91c2x5IHRvIGF2b2lkIHJlZW50cmFuY3lcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMudmlldy5kaXNwYXRjaCh7IGVmZmVjdHM6IHN0YXJ0Q29tcGxldGlvbkVmZmVjdC5vZihmYWxzZSkgfSksIDIwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY29tcG9zaW5nID0gMCAvKiBDb21wb3NpdGlvblN0YXRlLk5vbmUgKi87XG4gICAgICAgIH1cbiAgICB9XG59KTtcbmNvbnN0IHdpbmRvd3MgPSB0eXBlb2YgbmF2aWdhdG9yID09IFwib2JqZWN0XCIgJiYgL1dpbi8udGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pO1xuY29uc3QgY29tbWl0Q2hhcmFjdGVycyA9IHN0YXRlLlByZWMuaGlnaGVzdCh2aWV3LkVkaXRvclZpZXcuZG9tRXZlbnRIYW5kbGVycyh7XG4gICAga2V5ZG93bihldmVudCwgdmlldykge1xuICAgICAgICBsZXQgZmllbGQgPSB2aWV3LnN0YXRlLmZpZWxkKGNvbXBsZXRpb25TdGF0ZSwgZmFsc2UpO1xuICAgICAgICBpZiAoIWZpZWxkIHx8ICFmaWVsZC5vcGVuIHx8IGZpZWxkLm9wZW4uZGlzYWJsZWQgfHwgZmllbGQub3Blbi5zZWxlY3RlZCA8IDAgfHxcbiAgICAgICAgICAgIGV2ZW50LmtleS5sZW5ndGggPiAxIHx8IGV2ZW50LmN0cmxLZXkgJiYgISh3aW5kb3dzICYmIGV2ZW50LmFsdEtleSkgfHwgZXZlbnQubWV0YUtleSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgbGV0IG9wdGlvbiA9IGZpZWxkLm9wZW4ub3B0aW9uc1tmaWVsZC5vcGVuLnNlbGVjdGVkXTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IGZpZWxkLmFjdGl2ZS5maW5kKGEgPT4gYS5zb3VyY2UgPT0gb3B0aW9uLnNvdXJjZSk7XG4gICAgICAgIGxldCBjb21taXRDaGFycyA9IG9wdGlvbi5jb21wbGV0aW9uLmNvbW1pdENoYXJhY3RlcnMgfHwgcmVzdWx0LnJlc3VsdC5jb21taXRDaGFyYWN0ZXJzO1xuICAgICAgICBpZiAoY29tbWl0Q2hhcnMgJiYgY29tbWl0Q2hhcnMuaW5kZXhPZihldmVudC5rZXkpID4gLTEpXG4gICAgICAgICAgICBhcHBseUNvbXBsZXRpb24odmlldywgb3B0aW9uKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn0pKTtcblxuY29uc3QgYmFzZVRoZW1lID0gdmlldy5FZGl0b3JWaWV3LmJhc2VUaGVtZSh7XG4gICAgXCIuY20tdG9vbHRpcC5jbS10b29sdGlwLWF1dG9jb21wbGV0ZVwiOiB7XG4gICAgICAgIFwiJiA+IHVsXCI6IHtcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6IFwibW9ub3NwYWNlXCIsXG4gICAgICAgICAgICB3aGl0ZVNwYWNlOiBcIm5vd3JhcFwiLFxuICAgICAgICAgICAgb3ZlcmZsb3c6IFwiaGlkZGVuIGF1dG9cIixcbiAgICAgICAgICAgIG1heFdpZHRoX2ZhbGxiYWNrOiBcIjcwMHB4XCIsXG4gICAgICAgICAgICBtYXhXaWR0aDogXCJtaW4oNzAwcHgsIDk1dncpXCIsXG4gICAgICAgICAgICBtaW5XaWR0aDogXCIyNTBweFwiLFxuICAgICAgICAgICAgbWF4SGVpZ2h0OiBcIjEwZW1cIixcbiAgICAgICAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICAgICAgICBsaXN0U3R5bGU6IFwibm9uZVwiLFxuICAgICAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICAgICAgcGFkZGluZzogMCxcbiAgICAgICAgICAgIFwiJiA+IGxpLCAmID4gY29tcGxldGlvbi1zZWN0aW9uXCI6IHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiBcIjFweCAzcHhcIixcbiAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIiYgPiBsaVwiOiB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3dYOiBcImhpZGRlblwiLFxuICAgICAgICAgICAgICAgIHRleHRPdmVyZmxvdzogXCJlbGxpcHNpc1wiLFxuICAgICAgICAgICAgICAgIGN1cnNvcjogXCJwb2ludGVyXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIiYgPiBjb21wbGV0aW9uLXNlY3Rpb25cIjoge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IFwibGlzdC1pdGVtXCIsXG4gICAgICAgICAgICAgICAgYm9yZGVyQm90dG9tOiBcIjFweCBzb2xpZCBzaWx2ZXJcIixcbiAgICAgICAgICAgICAgICBwYWRkaW5nTGVmdDogXCIwLjVlbVwiLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAuN1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIiZsaWdodCAuY20tdG9vbHRpcC1hdXRvY29tcGxldGUgdWwgbGlbYXJpYS1zZWxlY3RlZF1cIjoge1xuICAgICAgICBiYWNrZ3JvdW5kOiBcIiMxN2NcIixcbiAgICAgICAgY29sb3I6IFwid2hpdGVcIixcbiAgICB9LFxuICAgIFwiJmxpZ2h0IC5jbS10b29sdGlwLWF1dG9jb21wbGV0ZS1kaXNhYmxlZCB1bCBsaVthcmlhLXNlbGVjdGVkXVwiOiB7XG4gICAgICAgIGJhY2tncm91bmQ6IFwiIzc3N1wiLFxuICAgIH0sXG4gICAgXCImZGFyayAuY20tdG9vbHRpcC1hdXRvY29tcGxldGUgdWwgbGlbYXJpYS1zZWxlY3RlZF1cIjoge1xuICAgICAgICBiYWNrZ3JvdW5kOiBcIiMzNDdcIixcbiAgICAgICAgY29sb3I6IFwid2hpdGVcIixcbiAgICB9LFxuICAgIFwiJmRhcmsgLmNtLXRvb2x0aXAtYXV0b2NvbXBsZXRlLWRpc2FibGVkIHVsIGxpW2FyaWEtc2VsZWN0ZWRdXCI6IHtcbiAgICAgICAgYmFja2dyb3VuZDogXCIjNDQ0XCIsXG4gICAgfSxcbiAgICBcIi5jbS1jb21wbGV0aW9uTGlzdEluY29tcGxldGVUb3A6YmVmb3JlLCAuY20tY29tcGxldGlvbkxpc3RJbmNvbXBsZXRlQm90dG9tOmFmdGVyXCI6IHtcbiAgICAgICAgY29udGVudDogJ1wiwrfCt8K3XCInLFxuICAgICAgICBvcGFjaXR5OiAwLjUsXG4gICAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIixcbiAgICAgICAgdGV4dEFsaWduOiBcImNlbnRlclwiXG4gICAgfSxcbiAgICBcIi5jbS10b29sdGlwLmNtLWNvbXBsZXRpb25JbmZvXCI6IHtcbiAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgcGFkZGluZzogXCIzcHggOXB4XCIsXG4gICAgICAgIHdpZHRoOiBcIm1heC1jb250ZW50XCIsXG4gICAgICAgIG1heFdpZHRoOiBgJHs0MDAgLyogSW5mby5XaWR0aCAqL31weGAsXG4gICAgICAgIGJveFNpemluZzogXCJib3JkZXItYm94XCJcbiAgICB9LFxuICAgIFwiLmNtLWNvbXBsZXRpb25JbmZvLmNtLWNvbXBsZXRpb25JbmZvLWxlZnRcIjogeyByaWdodDogXCIxMDAlXCIgfSxcbiAgICBcIi5jbS1jb21wbGV0aW9uSW5mby5jbS1jb21wbGV0aW9uSW5mby1yaWdodFwiOiB7IGxlZnQ6IFwiMTAwJVwiIH0sXG4gICAgXCIuY20tY29tcGxldGlvbkluZm8uY20tY29tcGxldGlvbkluZm8tbGVmdC1uYXJyb3dcIjogeyByaWdodDogYCR7MzAgLyogSW5mby5NYXJnaW4gKi99cHhgIH0sXG4gICAgXCIuY20tY29tcGxldGlvbkluZm8uY20tY29tcGxldGlvbkluZm8tcmlnaHQtbmFycm93XCI6IHsgbGVmdDogYCR7MzAgLyogSW5mby5NYXJnaW4gKi99cHhgIH0sXG4gICAgXCImbGlnaHQgLmNtLXNuaXBwZXRGaWVsZFwiOiB7IGJhY2tncm91bmRDb2xvcjogXCIjMDAwMDAwMjJcIiB9LFxuICAgIFwiJmRhcmsgLmNtLXNuaXBwZXRGaWVsZFwiOiB7IGJhY2tncm91bmRDb2xvcjogXCIjZmZmZmZmMjJcIiB9LFxuICAgIFwiLmNtLXNuaXBwZXRGaWVsZFBvc2l0aW9uXCI6IHtcbiAgICAgICAgdmVydGljYWxBbGlnbjogXCJ0ZXh0LXRvcFwiLFxuICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgaGVpZ2h0OiBcIjEuMTVlbVwiLFxuICAgICAgICBkaXNwbGF5OiBcImlubGluZS1ibG9ja1wiLFxuICAgICAgICBtYXJnaW46IFwiMCAtMC43cHggLS43ZW1cIixcbiAgICAgICAgYm9yZGVyTGVmdDogXCIxLjRweCBkb3R0ZWQgIzg4OFwiXG4gICAgfSxcbiAgICBcIi5jbS1jb21wbGV0aW9uTWF0Y2hlZFRleHRcIjoge1xuICAgICAgICB0ZXh0RGVjb3JhdGlvbjogXCJ1bmRlcmxpbmVcIlxuICAgIH0sXG4gICAgXCIuY20tY29tcGxldGlvbkRldGFpbFwiOiB7XG4gICAgICAgIG1hcmdpbkxlZnQ6IFwiMC41ZW1cIixcbiAgICAgICAgZm9udFN0eWxlOiBcIml0YWxpY1wiXG4gICAgfSxcbiAgICBcIi5jbS1jb21wbGV0aW9uSWNvblwiOiB7XG4gICAgICAgIGZvbnRTaXplOiBcIjkwJVwiLFxuICAgICAgICB3aWR0aDogXCIuOGVtXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiaW5saW5lLWJsb2NrXCIsXG4gICAgICAgIHRleHRBbGlnbjogXCJjZW50ZXJcIixcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiBcIi42ZW1cIixcbiAgICAgICAgb3BhY2l0eTogXCIwLjZcIixcbiAgICAgICAgYm94U2l6aW5nOiBcImNvbnRlbnQtYm94XCJcbiAgICB9LFxuICAgIFwiLmNtLWNvbXBsZXRpb25JY29uLWZ1bmN0aW9uLCAuY20tY29tcGxldGlvbkljb24tbWV0aG9kXCI6IHtcbiAgICAgICAgXCImOmFmdGVyXCI6IHsgY29udGVudDogXCInxpInXCIgfVxuICAgIH0sXG4gICAgXCIuY20tY29tcGxldGlvbkljb24tY2xhc3NcIjoge1xuICAgICAgICBcIiY6YWZ0ZXJcIjogeyBjb250ZW50OiBcIifil4snXCIgfVxuICAgIH0sXG4gICAgXCIuY20tY29tcGxldGlvbkljb24taW50ZXJmYWNlXCI6IHtcbiAgICAgICAgXCImOmFmdGVyXCI6IHsgY29udGVudDogXCIn4peMJ1wiIH1cbiAgICB9LFxuICAgIFwiLmNtLWNvbXBsZXRpb25JY29uLXZhcmlhYmxlXCI6IHtcbiAgICAgICAgXCImOmFmdGVyXCI6IHsgY29udGVudDogXCIn8J2RpSdcIiB9XG4gICAgfSxcbiAgICBcIi5jbS1jb21wbGV0aW9uSWNvbi1jb25zdGFudFwiOiB7XG4gICAgICAgIFwiJjphZnRlclwiOiB7IGNvbnRlbnQ6IFwiJ/CdkLYnXCIgfVxuICAgIH0sXG4gICAgXCIuY20tY29tcGxldGlvbkljb24tdHlwZVwiOiB7XG4gICAgICAgIFwiJjphZnRlclwiOiB7IGNvbnRlbnQ6IFwiJ/CdkaEnXCIgfVxuICAgIH0sXG4gICAgXCIuY20tY29tcGxldGlvbkljb24tZW51bVwiOiB7XG4gICAgICAgIFwiJjphZnRlclwiOiB7IGNvbnRlbnQ6IFwiJ+KIqidcIiB9XG4gICAgfSxcbiAgICBcIi5jbS1jb21wbGV0aW9uSWNvbi1wcm9wZXJ0eVwiOiB7XG4gICAgICAgIFwiJjphZnRlclwiOiB7IGNvbnRlbnQ6IFwiJ+KWoSdcIiB9XG4gICAgfSxcbiAgICBcIi5jbS1jb21wbGV0aW9uSWNvbi1rZXl3b3JkXCI6IHtcbiAgICAgICAgXCImOmFmdGVyXCI6IHsgY29udGVudDogXCIn8J+UkVxcdUZFMEUnXCIgfSAvLyBEaXNhYmxlIGVtb2ppIHJlbmRlcmluZ1xuICAgIH0sXG4gICAgXCIuY20tY29tcGxldGlvbkljb24tbmFtZXNwYWNlXCI6IHtcbiAgICAgICAgXCImOmFmdGVyXCI6IHsgY29udGVudDogXCIn4paiJ1wiIH1cbiAgICB9LFxuICAgIFwiLmNtLWNvbXBsZXRpb25JY29uLXRleHRcIjoge1xuICAgICAgICBcIiY6YWZ0ZXJcIjogeyBjb250ZW50OiBcIidhYmMnXCIsIGZvbnRTaXplOiBcIjUwJVwiLCB2ZXJ0aWNhbEFsaWduOiBcIm1pZGRsZVwiIH1cbiAgICB9XG59KTtcblxuY2xhc3MgRmllbGRQb3Mge1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkLCBsaW5lLCBmcm9tLCB0bykge1xuICAgICAgICB0aGlzLmZpZWxkID0gZmllbGQ7XG4gICAgICAgIHRoaXMubGluZSA9IGxpbmU7XG4gICAgICAgIHRoaXMuZnJvbSA9IGZyb207XG4gICAgICAgIHRoaXMudG8gPSB0bztcbiAgICB9XG59XG5jbGFzcyBGaWVsZFJhbmdlIHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZCwgZnJvbSwgdG8pIHtcbiAgICAgICAgdGhpcy5maWVsZCA9IGZpZWxkO1xuICAgICAgICB0aGlzLmZyb20gPSBmcm9tO1xuICAgICAgICB0aGlzLnRvID0gdG87XG4gICAgfVxuICAgIG1hcChjaGFuZ2VzKSB7XG4gICAgICAgIGxldCBmcm9tID0gY2hhbmdlcy5tYXBQb3ModGhpcy5mcm9tLCAtMSwgc3RhdGUuTWFwTW9kZS5UcmFja0RlbCk7XG4gICAgICAgIGxldCB0byA9IGNoYW5nZXMubWFwUG9zKHRoaXMudG8sIDEsIHN0YXRlLk1hcE1vZGUuVHJhY2tEZWwpO1xuICAgICAgICByZXR1cm4gZnJvbSA9PSBudWxsIHx8IHRvID09IG51bGwgPyBudWxsIDogbmV3IEZpZWxkUmFuZ2UodGhpcy5maWVsZCwgZnJvbSwgdG8pO1xuICAgIH1cbn1cbmNsYXNzIFNuaXBwZXQge1xuICAgIGNvbnN0cnVjdG9yKGxpbmVzLCBmaWVsZFBvc2l0aW9ucykge1xuICAgICAgICB0aGlzLmxpbmVzID0gbGluZXM7XG4gICAgICAgIHRoaXMuZmllbGRQb3NpdGlvbnMgPSBmaWVsZFBvc2l0aW9ucztcbiAgICB9XG4gICAgaW5zdGFudGlhdGUoc3RhdGUsIHBvcykge1xuICAgICAgICBsZXQgdGV4dCA9IFtdLCBsaW5lU3RhcnQgPSBbcG9zXTtcbiAgICAgICAgbGV0IGxpbmVPYmogPSBzdGF0ZS5kb2MubGluZUF0KHBvcyksIGJhc2VJbmRlbnQgPSAvXlxccyovLmV4ZWMobGluZU9iai50ZXh0KVswXTtcbiAgICAgICAgZm9yIChsZXQgbGluZSBvZiB0aGlzLmxpbmVzKSB7XG4gICAgICAgICAgICBpZiAodGV4dC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBsZXQgaW5kZW50ID0gYmFzZUluZGVudCwgdGFicyA9IC9eXFx0Ki8uZXhlYyhsaW5lKVswXS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0YWJzOyBpKyspXG4gICAgICAgICAgICAgICAgICAgIGluZGVudCArPSBzdGF0ZS5mYWNldChsYW5ndWFnZS5pbmRlbnRVbml0KTtcbiAgICAgICAgICAgICAgICBsaW5lU3RhcnQucHVzaChwb3MgKyBpbmRlbnQubGVuZ3RoIC0gdGFicyk7XG4gICAgICAgICAgICAgICAgbGluZSA9IGluZGVudCArIGxpbmUuc2xpY2UodGFicyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZXh0LnB1c2gobGluZSk7XG4gICAgICAgICAgICBwb3MgKz0gbGluZS5sZW5ndGggKyAxO1xuICAgICAgICB9XG4gICAgICAgIGxldCByYW5nZXMgPSB0aGlzLmZpZWxkUG9zaXRpb25zLm1hcChwb3MgPT4gbmV3IEZpZWxkUmFuZ2UocG9zLmZpZWxkLCBsaW5lU3RhcnRbcG9zLmxpbmVdICsgcG9zLmZyb20sIGxpbmVTdGFydFtwb3MubGluZV0gKyBwb3MudG8pKTtcbiAgICAgICAgcmV0dXJuIHsgdGV4dCwgcmFuZ2VzIH07XG4gICAgfVxuICAgIHN0YXRpYyBwYXJzZSh0ZW1wbGF0ZSkge1xuICAgICAgICBsZXQgZmllbGRzID0gW107XG4gICAgICAgIGxldCBsaW5lcyA9IFtdLCBwb3NpdGlvbnMgPSBbXSwgbTtcbiAgICAgICAgZm9yIChsZXQgbGluZSBvZiB0ZW1wbGF0ZS5zcGxpdCgvXFxyXFxuP3xcXG4vKSkge1xuICAgICAgICAgICAgd2hpbGUgKG0gPSAvWyMkXVxceyg/OihcXGQrKSg/OjooW159XSopKT98KCg/OlxcXFxbe31dfFtefV0pKikpXFx9Ly5leGVjKGxpbmUpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNlcSA9IG1bMV0gPyArbVsxXSA6IG51bGwsIHJhd05hbWUgPSBtWzJdIHx8IG1bM10gfHwgXCJcIiwgZm91bmQgPSAtMTtcbiAgICAgICAgICAgICAgICBsZXQgbmFtZSA9IHJhd05hbWUucmVwbGFjZSgvXFxcXFt7fV0vZywgbSA9PiBtWzFdKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VxICE9IG51bGwgPyBmaWVsZHNbaV0uc2VxID09IHNlcSA6IG5hbWUgPyBmaWVsZHNbaV0ubmFtZSA9PSBuYW1lIDogZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChmb3VuZCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaSA8IGZpZWxkcy5sZW5ndGggJiYgKHNlcSA9PSBudWxsIHx8IChmaWVsZHNbaV0uc2VxICE9IG51bGwgJiYgZmllbGRzW2ldLnNlcSA8IHNlcSkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgICAgICBmaWVsZHMuc3BsaWNlKGksIDAsIHsgc2VxLCBuYW1lIH0pO1xuICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IGk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHBvcyBvZiBwb3NpdGlvbnMpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zLmZpZWxkID49IGZvdW5kKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcy5maWVsZCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwb3NpdGlvbnMucHVzaChuZXcgRmllbGRQb3MoZm91bmQsIGxpbmVzLmxlbmd0aCwgbS5pbmRleCwgbS5pbmRleCArIG5hbWUubGVuZ3RoKSk7XG4gICAgICAgICAgICAgICAgbGluZSA9IGxpbmUuc2xpY2UoMCwgbS5pbmRleCkgKyByYXdOYW1lICsgbGluZS5zbGljZShtLmluZGV4ICsgbVswXS5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGluZSA9IGxpbmUucmVwbGFjZSgvXFxcXChbe31dKS9nLCAoXywgYnJhY2UsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgcG9zIG9mIHBvc2l0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvcy5saW5lID09IGxpbmVzLmxlbmd0aCAmJiBwb3MuZnJvbSA+IGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3MuZnJvbS0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zLnRvLS07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYnJhY2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxpbmVzLnB1c2gobGluZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBTbmlwcGV0KGxpbmVzLCBwb3NpdGlvbnMpO1xuICAgIH1cbn1cbmxldCBmaWVsZE1hcmtlciA9IHZpZXcuRGVjb3JhdGlvbi53aWRnZXQoeyB3aWRnZXQ6IG5ldyBjbGFzcyBleHRlbmRzIHZpZXcuV2lkZ2V0VHlwZSB7XG4gICAgICAgIHRvRE9NKCkge1xuICAgICAgICAgICAgbGV0IHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgICAgIHNwYW4uY2xhc3NOYW1lID0gXCJjbS1zbmlwcGV0RmllbGRQb3NpdGlvblwiO1xuICAgICAgICAgICAgcmV0dXJuIHNwYW47XG4gICAgICAgIH1cbiAgICAgICAgaWdub3JlRXZlbnQoKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIH0gfSk7XG5sZXQgZmllbGRSYW5nZSA9IHZpZXcuRGVjb3JhdGlvbi5tYXJrKHsgY2xhc3M6IFwiY20tc25pcHBldEZpZWxkXCIgfSk7XG5jbGFzcyBBY3RpdmVTbmlwcGV0IHtcbiAgICBjb25zdHJ1Y3RvcihyYW5nZXMsIGFjdGl2ZSkge1xuICAgICAgICB0aGlzLnJhbmdlcyA9IHJhbmdlcztcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBhY3RpdmU7XG4gICAgICAgIHRoaXMuZGVjbyA9IHZpZXcuRGVjb3JhdGlvbi5zZXQocmFuZ2VzLm1hcChyID0+IChyLmZyb20gPT0gci50byA/IGZpZWxkTWFya2VyIDogZmllbGRSYW5nZSkucmFuZ2Uoci5mcm9tLCByLnRvKSkpO1xuICAgIH1cbiAgICBtYXAoY2hhbmdlcykge1xuICAgICAgICBsZXQgcmFuZ2VzID0gW107XG4gICAgICAgIGZvciAobGV0IHIgb2YgdGhpcy5yYW5nZXMpIHtcbiAgICAgICAgICAgIGxldCBtYXBwZWQgPSByLm1hcChjaGFuZ2VzKTtcbiAgICAgICAgICAgIGlmICghbWFwcGVkKVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgcmFuZ2VzLnB1c2gobWFwcGVkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEFjdGl2ZVNuaXBwZXQocmFuZ2VzLCB0aGlzLmFjdGl2ZSk7XG4gICAgfVxuICAgIHNlbGVjdGlvbkluc2lkZUZpZWxkKHNlbCkge1xuICAgICAgICByZXR1cm4gc2VsLnJhbmdlcy5ldmVyeShyYW5nZSA9PiB0aGlzLnJhbmdlcy5zb21lKHIgPT4gci5maWVsZCA9PSB0aGlzLmFjdGl2ZSAmJiByLmZyb20gPD0gcmFuZ2UuZnJvbSAmJiByLnRvID49IHJhbmdlLnRvKSk7XG4gICAgfVxufVxuY29uc3Qgc2V0QWN0aXZlID0gc3RhdGUuU3RhdGVFZmZlY3QuZGVmaW5lKHtcbiAgICBtYXAodmFsdWUsIGNoYW5nZXMpIHsgcmV0dXJuIHZhbHVlICYmIHZhbHVlLm1hcChjaGFuZ2VzKTsgfVxufSk7XG5jb25zdCBtb3ZlVG9GaWVsZCA9IHN0YXRlLlN0YXRlRWZmZWN0LmRlZmluZSgpO1xuY29uc3Qgc25pcHBldFN0YXRlID0gc3RhdGUuU3RhdGVGaWVsZC5kZWZpbmUoe1xuICAgIGNyZWF0ZSgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgdXBkYXRlKHZhbHVlLCB0cikge1xuICAgICAgICBmb3IgKGxldCBlZmZlY3Qgb2YgdHIuZWZmZWN0cykge1xuICAgICAgICAgICAgaWYgKGVmZmVjdC5pcyhzZXRBY3RpdmUpKVxuICAgICAgICAgICAgICAgIHJldHVybiBlZmZlY3QudmFsdWU7XG4gICAgICAgICAgICBpZiAoZWZmZWN0LmlzKG1vdmVUb0ZpZWxkKSAmJiB2YWx1ZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFjdGl2ZVNuaXBwZXQodmFsdWUucmFuZ2VzLCBlZmZlY3QudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSAmJiB0ci5kb2NDaGFuZ2VkKVxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5tYXAodHIuY2hhbmdlcyk7XG4gICAgICAgIGlmICh2YWx1ZSAmJiB0ci5zZWxlY3Rpb24gJiYgIXZhbHVlLnNlbGVjdGlvbkluc2lkZUZpZWxkKHRyLnNlbGVjdGlvbikpXG4gICAgICAgICAgICB2YWx1ZSA9IG51bGw7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHByb3ZpZGU6IGYgPT4gdmlldy5FZGl0b3JWaWV3LmRlY29yYXRpb25zLmZyb20oZiwgdmFsID0+IHZhbCA/IHZhbC5kZWNvIDogdmlldy5EZWNvcmF0aW9uLm5vbmUpXG59KTtcbmZ1bmN0aW9uIGZpZWxkU2VsZWN0aW9uKHJhbmdlcywgZmllbGQpIHtcbiAgICByZXR1cm4gc3RhdGUuRWRpdG9yU2VsZWN0aW9uLmNyZWF0ZShyYW5nZXMuZmlsdGVyKHIgPT4gci5maWVsZCA9PSBmaWVsZCkubWFwKHIgPT4gc3RhdGUuRWRpdG9yU2VsZWN0aW9uLnJhbmdlKHIuZnJvbSwgci50bykpKTtcbn1cbi8qKlxuQ29udmVydCBhIHNuaXBwZXQgdGVtcGxhdGUgdG8gYSBmdW5jdGlvbiB0aGF0IGNhblxuW2FwcGx5XShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2F1dG9jb21wbGV0ZS5Db21wbGV0aW9uLmFwcGx5KSBpdC4gU25pcHBldHMgYXJlIHdyaXR0ZW5cbnVzaW5nIHN5bnRheCBsaWtlIHRoaXM6XG5cbiAgICBcImZvciAobGV0ICR7aW5kZXh9ID0gMDsgJHtpbmRleH0gPCAke2VuZH07ICR7aW5kZXh9KyspIHtcXG5cXHQke31cXG59XCJcblxuRWFjaCBgJHt9YCBwbGFjZWhvbGRlciAoeW91IG1heSBhbHNvIHVzZSBgI3t9YCkgaW5kaWNhdGVzIGEgZmllbGRcbnRoYXQgdGhlIHVzZXIgY2FuIGZpbGwgaW4uIEl0cyBuYW1lLCBpZiBhbnksIHdpbGwgYmUgdGhlIGRlZmF1bHRcbmNvbnRlbnQgZm9yIHRoZSBmaWVsZC5cblxuV2hlbiB0aGUgc25pcHBldCBpcyBhY3RpdmF0ZWQgYnkgY2FsbGluZyB0aGUgcmV0dXJuZWQgZnVuY3Rpb24sXG50aGUgY29kZSBpcyBpbnNlcnRlZCBhdCB0aGUgZ2l2ZW4gcG9zaXRpb24uIE5ld2xpbmVzIGluIHRoZVxudGVtcGxhdGUgYXJlIGluZGVudGVkIGJ5IHRoZSBpbmRlbnRhdGlvbiBvZiB0aGUgc3RhcnQgbGluZSwgcGx1c1xub25lIFtpbmRlbnQgdW5pdF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNsYW5ndWFnZS5pbmRlbnRVbml0KSBwZXIgdGFiIGNoYXJhY3RlciBhZnRlclxudGhlIG5ld2xpbmUuXG5cbk9uIGFjdGl2YXRpb24sIChhbGwgaW5zdGFuY2VzIG9mKSB0aGUgZmlyc3QgZmllbGQgYXJlIHNlbGVjdGVkLlxuVGhlIHVzZXIgY2FuIG1vdmUgYmV0d2VlbiBmaWVsZHMgd2l0aCBUYWIgYW5kIFNoaWZ0LVRhYiBhcyBsb25nIGFzXG50aGUgZmllbGRzIGFyZSBhY3RpdmUuIE1vdmluZyB0byB0aGUgbGFzdCBmaWVsZCBvciBtb3ZpbmcgdGhlXG5jdXJzb3Igb3V0IG9mIHRoZSBjdXJyZW50IGZpZWxkIGRlYWN0aXZhdGVzIHRoZSBmaWVsZHMuXG5cblRoZSBvcmRlciBvZiBmaWVsZHMgZGVmYXVsdHMgdG8gdGV4dHVhbCBvcmRlciwgYnV0IHlvdSBjYW4gYWRkXG5udW1iZXJzIHRvIHBsYWNlaG9sZGVycyAoYCR7MX1gIG9yIGAkezE6ZGVmYXVsdFRleHR9YCkgdG8gcHJvdmlkZVxuYSBjdXN0b20gb3JkZXIuXG5cblRvIGluY2x1ZGUgYSBsaXRlcmFsIGB7YCBvciBgfWAgaW4geW91ciB0ZW1wbGF0ZSwgcHV0IGEgYmFja3NsYXNoXG5pbiBmcm9udCBvZiBpdC4gVGhpcyB3aWxsIGJlIHJlbW92ZWQgYW5kIHRoZSBicmFjZSB3aWxsIG5vdCBiZVxuaW50ZXJwcmV0ZWQgYXMgaW5kaWNhdGluZyBhIHBsYWNlaG9sZGVyLlxuKi9cbmZ1bmN0aW9uIHNuaXBwZXQodGVtcGxhdGUpIHtcbiAgICBsZXQgc25pcHBldCA9IFNuaXBwZXQucGFyc2UodGVtcGxhdGUpO1xuICAgIHJldHVybiAoZWRpdG9yLCBjb21wbGV0aW9uLCBmcm9tLCB0bykgPT4ge1xuICAgICAgICBsZXQgeyB0ZXh0LCByYW5nZXMgfSA9IHNuaXBwZXQuaW5zdGFudGlhdGUoZWRpdG9yLnN0YXRlLCBmcm9tKTtcbiAgICAgICAgbGV0IHNwZWMgPSB7XG4gICAgICAgICAgICBjaGFuZ2VzOiB7IGZyb20sIHRvLCBpbnNlcnQ6IHN0YXRlLlRleHQub2YodGV4dCkgfSxcbiAgICAgICAgICAgIHNjcm9sbEludG9WaWV3OiB0cnVlLFxuICAgICAgICAgICAgYW5ub3RhdGlvbnM6IGNvbXBsZXRpb24gPyBbcGlja2VkQ29tcGxldGlvbi5vZihjb21wbGV0aW9uKSwgc3RhdGUuVHJhbnNhY3Rpb24udXNlckV2ZW50Lm9mKFwiaW5wdXQuY29tcGxldGVcIildIDogdW5kZWZpbmVkXG4gICAgICAgIH07XG4gICAgICAgIGlmIChyYW5nZXMubGVuZ3RoKVxuICAgICAgICAgICAgc3BlYy5zZWxlY3Rpb24gPSBmaWVsZFNlbGVjdGlvbihyYW5nZXMsIDApO1xuICAgICAgICBpZiAocmFuZ2VzLnNvbWUociA9PiByLmZpZWxkID4gMCkpIHtcbiAgICAgICAgICAgIGxldCBhY3RpdmUgPSBuZXcgQWN0aXZlU25pcHBldChyYW5nZXMsIDApO1xuICAgICAgICAgICAgbGV0IGVmZmVjdHMgPSBzcGVjLmVmZmVjdHMgPSBbc2V0QWN0aXZlLm9mKGFjdGl2ZSldO1xuICAgICAgICAgICAgaWYgKGVkaXRvci5zdGF0ZS5maWVsZChzbmlwcGV0U3RhdGUsIGZhbHNlKSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIGVmZmVjdHMucHVzaChzdGF0ZS5TdGF0ZUVmZmVjdC5hcHBlbmRDb25maWcub2YoW3NuaXBwZXRTdGF0ZSwgYWRkU25pcHBldEtleW1hcCwgc25pcHBldFBvaW50ZXJIYW5kbGVyLCBiYXNlVGhlbWVdKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWRpdG9yLmRpc3BhdGNoKGVkaXRvci5zdGF0ZS51cGRhdGUoc3BlYykpO1xuICAgIH07XG59XG5mdW5jdGlvbiBtb3ZlRmllbGQoZGlyKSB7XG4gICAgcmV0dXJuICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XG4gICAgICAgIGxldCBhY3RpdmUgPSBzdGF0ZS5maWVsZChzbmlwcGV0U3RhdGUsIGZhbHNlKTtcbiAgICAgICAgaWYgKCFhY3RpdmUgfHwgZGlyIDwgMCAmJiBhY3RpdmUuYWN0aXZlID09IDApXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGxldCBuZXh0ID0gYWN0aXZlLmFjdGl2ZSArIGRpciwgbGFzdCA9IGRpciA+IDAgJiYgIWFjdGl2ZS5yYW5nZXMuc29tZShyID0+IHIuZmllbGQgPT0gbmV4dCArIGRpcik7XG4gICAgICAgIGRpc3BhdGNoKHN0YXRlLnVwZGF0ZSh7XG4gICAgICAgICAgICBzZWxlY3Rpb246IGZpZWxkU2VsZWN0aW9uKGFjdGl2ZS5yYW5nZXMsIG5leHQpLFxuICAgICAgICAgICAgZWZmZWN0czogc2V0QWN0aXZlLm9mKGxhc3QgPyBudWxsIDogbmV3IEFjdGl2ZVNuaXBwZXQoYWN0aXZlLnJhbmdlcywgbmV4dCkpLFxuICAgICAgICAgICAgc2Nyb2xsSW50b1ZpZXc6IHRydWVcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xufVxuLyoqXG5BIGNvbW1hbmQgdGhhdCBjbGVhcnMgdGhlIGFjdGl2ZSBzbmlwcGV0LCBpZiBhbnkuXG4qL1xuY29uc3QgY2xlYXJTbmlwcGV0ID0gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcbiAgICBsZXQgYWN0aXZlID0gc3RhdGUuZmllbGQoc25pcHBldFN0YXRlLCBmYWxzZSk7XG4gICAgaWYgKCFhY3RpdmUpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBkaXNwYXRjaChzdGF0ZS51cGRhdGUoeyBlZmZlY3RzOiBzZXRBY3RpdmUub2YobnVsbCkgfSkpO1xuICAgIHJldHVybiB0cnVlO1xufTtcbi8qKlxuTW92ZSB0byB0aGUgbmV4dCBzbmlwcGV0IGZpZWxkLCBpZiBhdmFpbGFibGUuXG4qL1xuY29uc3QgbmV4dFNuaXBwZXRGaWVsZCA9IG1vdmVGaWVsZCgxKTtcbi8qKlxuTW92ZSB0byB0aGUgcHJldmlvdXMgc25pcHBldCBmaWVsZCwgaWYgYXZhaWxhYmxlLlxuKi9cbmNvbnN0IHByZXZTbmlwcGV0RmllbGQgPSBtb3ZlRmllbGQoLTEpO1xuLyoqXG5DaGVjayBpZiB0aGVyZSBpcyBhbiBhY3RpdmUgc25pcHBldCB3aXRoIGEgbmV4dCBmaWVsZCBmb3JcbmBuZXh0U25pcHBldEZpZWxkYCB0byBtb3ZlIHRvLlxuKi9cbmZ1bmN0aW9uIGhhc05leHRTbmlwcGV0RmllbGQoc3RhdGUpIHtcbiAgICBsZXQgYWN0aXZlID0gc3RhdGUuZmllbGQoc25pcHBldFN0YXRlLCBmYWxzZSk7XG4gICAgcmV0dXJuICEhKGFjdGl2ZSAmJiBhY3RpdmUucmFuZ2VzLnNvbWUociA9PiByLmZpZWxkID09IGFjdGl2ZS5hY3RpdmUgKyAxKSk7XG59XG4vKipcblJldHVybnMgdHJ1ZSBpZiB0aGVyZSBpcyBhbiBhY3RpdmUgc25pcHBldCBhbmQgYSBwcmV2aW91cyBmaWVsZFxuZm9yIGBwcmV2U25pcHBldEZpZWxkYCB0byBtb3ZlIHRvLlxuKi9cbmZ1bmN0aW9uIGhhc1ByZXZTbmlwcGV0RmllbGQoc3RhdGUpIHtcbiAgICBsZXQgYWN0aXZlID0gc3RhdGUuZmllbGQoc25pcHBldFN0YXRlLCBmYWxzZSk7XG4gICAgcmV0dXJuICEhKGFjdGl2ZSAmJiBhY3RpdmUuYWN0aXZlID4gMCk7XG59XG5jb25zdCBkZWZhdWx0U25pcHBldEtleW1hcCA9IFtcbiAgICB7IGtleTogXCJUYWJcIiwgcnVuOiBuZXh0U25pcHBldEZpZWxkLCBzaGlmdDogcHJldlNuaXBwZXRGaWVsZCB9LFxuICAgIHsga2V5OiBcIkVzY2FwZVwiLCBydW46IGNsZWFyU25pcHBldCB9XG5dO1xuLyoqXG5BIGZhY2V0IHRoYXQgY2FuIGJlIHVzZWQgdG8gY29uZmlndXJlIHRoZSBrZXkgYmluZGluZ3MgdXNlZCBieVxuc25pcHBldHMuIFRoZSBkZWZhdWx0IGJpbmRzIFRhYiB0b1xuW2BuZXh0U25pcHBldEZpZWxkYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNhdXRvY29tcGxldGUubmV4dFNuaXBwZXRGaWVsZCksIFNoaWZ0LVRhYiB0b1xuW2BwcmV2U25pcHBldEZpZWxkYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNhdXRvY29tcGxldGUucHJldlNuaXBwZXRGaWVsZCksIGFuZCBFc2NhcGVcbnRvIFtgY2xlYXJTbmlwcGV0YF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNhdXRvY29tcGxldGUuY2xlYXJTbmlwcGV0KS5cbiovXG5jb25zdCBzbmlwcGV0S2V5bWFwID0gc3RhdGUuRmFjZXQuZGVmaW5lKHtcbiAgICBjb21iaW5lKG1hcHMpIHsgcmV0dXJuIG1hcHMubGVuZ3RoID8gbWFwc1swXSA6IGRlZmF1bHRTbmlwcGV0S2V5bWFwOyB9XG59KTtcbmNvbnN0IGFkZFNuaXBwZXRLZXltYXAgPSBzdGF0ZS5QcmVjLmhpZ2hlc3Qodmlldy5rZXltYXAuY29tcHV0ZShbc25pcHBldEtleW1hcF0sIHN0YXRlID0+IHN0YXRlLmZhY2V0KHNuaXBwZXRLZXltYXApKSk7XG4vKipcbkNyZWF0ZSBhIGNvbXBsZXRpb24gZnJvbSBhIHNuaXBwZXQuIFJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlXG5wcm9wZXJ0aWVzIGZyb20gYGNvbXBsZXRpb25gLCBwbHVzIGFuIGBhcHBseWAgZnVuY3Rpb24gdGhhdFxuYXBwbGllcyB0aGUgc25pcHBldC5cbiovXG5mdW5jdGlvbiBzbmlwcGV0Q29tcGxldGlvbih0ZW1wbGF0ZSwgY29tcGxldGlvbikge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGNvbXBsZXRpb24pLCB7IGFwcGx5OiBzbmlwcGV0KHRlbXBsYXRlKSB9KTtcbn1cbmNvbnN0IHNuaXBwZXRQb2ludGVySGFuZGxlciA9IHZpZXcuRWRpdG9yVmlldy5kb21FdmVudEhhbmRsZXJzKHtcbiAgICBtb3VzZWRvd24oZXZlbnQsIHZpZXcpIHtcbiAgICAgICAgbGV0IGFjdGl2ZSA9IHZpZXcuc3RhdGUuZmllbGQoc25pcHBldFN0YXRlLCBmYWxzZSksIHBvcztcbiAgICAgICAgaWYgKCFhY3RpdmUgfHwgKHBvcyA9IHZpZXcucG9zQXRDb29yZHMoeyB4OiBldmVudC5jbGllbnRYLCB5OiBldmVudC5jbGllbnRZIH0pKSA9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBsZXQgbWF0Y2ggPSBhY3RpdmUucmFuZ2VzLmZpbmQociA9PiByLmZyb20gPD0gcG9zICYmIHIudG8gPj0gcG9zKTtcbiAgICAgICAgaWYgKCFtYXRjaCB8fCBtYXRjaC5maWVsZCA9PSBhY3RpdmUuYWN0aXZlKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2aWV3LmRpc3BhdGNoKHtcbiAgICAgICAgICAgIHNlbGVjdGlvbjogZmllbGRTZWxlY3Rpb24oYWN0aXZlLnJhbmdlcywgbWF0Y2guZmllbGQpLFxuICAgICAgICAgICAgZWZmZWN0czogc2V0QWN0aXZlLm9mKGFjdGl2ZS5yYW5nZXMuc29tZShyID0+IHIuZmllbGQgPiBtYXRjaC5maWVsZClcbiAgICAgICAgICAgICAgICA/IG5ldyBBY3RpdmVTbmlwcGV0KGFjdGl2ZS5yYW5nZXMsIG1hdGNoLmZpZWxkKSA6IG51bGwpLFxuICAgICAgICAgICAgc2Nyb2xsSW50b1ZpZXc6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn0pO1xuXG5mdW5jdGlvbiB3b3JkUkUod29yZENoYXJzKSB7XG4gICAgbGV0IGVzY2FwZWQgPSB3b3JkQ2hhcnMucmVwbGFjZSgvW1xcXVxcLVxcXFxdL2csIFwiXFxcXCQmXCIpO1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVnRXhwKGBbXFxcXHB7QWxwaGFiZXRpY31cXFxccHtOdW1iZXJ9XyR7ZXNjYXBlZH1dK2AsIFwidWdcIik7XG4gICAgfVxuICAgIGNhdGNoIChfYSkge1xuICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChgW1xcdyR7ZXNjYXBlZH1dYCwgXCJnXCIpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1hcFJFKHJlLCBmKSB7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoZihyZS5zb3VyY2UpLCByZS51bmljb2RlID8gXCJ1XCIgOiBcIlwiKTtcbn1cbmNvbnN0IHdvcmRDYWNoZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuZnVuY3Rpb24gd29yZENhY2hlKHdvcmRDaGFycykge1xuICAgIHJldHVybiB3b3JkQ2FjaGVzW3dvcmRDaGFyc10gfHwgKHdvcmRDYWNoZXNbd29yZENoYXJzXSA9IG5ldyBXZWFrTWFwKTtcbn1cbmZ1bmN0aW9uIHN0b3JlV29yZHMoZG9jLCB3b3JkUkUsIHJlc3VsdCwgc2VlbiwgaWdub3JlQXQpIHtcbiAgICBmb3IgKGxldCBsaW5lcyA9IGRvYy5pdGVyTGluZXMoKSwgcG9zID0gMDsgIWxpbmVzLm5leHQoKS5kb25lOykge1xuICAgICAgICBsZXQgeyB2YWx1ZSB9ID0gbGluZXMsIG07XG4gICAgICAgIHdvcmRSRS5sYXN0SW5kZXggPSAwO1xuICAgICAgICB3aGlsZSAobSA9IHdvcmRSRS5leGVjKHZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKCFzZWVuW21bMF1dICYmIHBvcyArIG0uaW5kZXggIT0gaWdub3JlQXQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7IHR5cGU6IFwidGV4dFwiLCBsYWJlbDogbVswXSB9KTtcbiAgICAgICAgICAgICAgICBzZWVuW21bMF1dID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCA+PSAyMDAwIC8qIEMuTWF4TGlzdCAqLylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHBvcyArPSB2YWx1ZS5sZW5ndGggKyAxO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNvbGxlY3RXb3Jkcyhkb2MsIGNhY2hlLCB3b3JkUkUsIHRvLCBpZ25vcmVBdCkge1xuICAgIGxldCBiaWcgPSBkb2MubGVuZ3RoID49IDEwMDAgLyogQy5NaW5DYWNoZUxlbiAqLztcbiAgICBsZXQgY2FjaGVkID0gYmlnICYmIGNhY2hlLmdldChkb2MpO1xuICAgIGlmIChjYWNoZWQpXG4gICAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgbGV0IHJlc3VsdCA9IFtdLCBzZWVuID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBpZiAoZG9jLmNoaWxkcmVuKSB7XG4gICAgICAgIGxldCBwb3MgPSAwO1xuICAgICAgICBmb3IgKGxldCBjaCBvZiBkb2MuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGlmIChjaC5sZW5ndGggPj0gMTAwMCAvKiBDLk1pbkNhY2hlTGVuICovKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgYyBvZiBjb2xsZWN0V29yZHMoY2gsIGNhY2hlLCB3b3JkUkUsIHRvIC0gcG9zLCBpZ25vcmVBdCAtIHBvcykpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWVuW2MubGFiZWxdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWVuW2MubGFiZWxdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RvcmVXb3JkcyhjaCwgd29yZFJFLCByZXN1bHQsIHNlZW4sIGlnbm9yZUF0IC0gcG9zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBvcyArPSBjaC5sZW5ndGggKyAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzdG9yZVdvcmRzKGRvYywgd29yZFJFLCByZXN1bHQsIHNlZW4sIGlnbm9yZUF0KTtcbiAgICB9XG4gICAgaWYgKGJpZyAmJiByZXN1bHQubGVuZ3RoIDwgMjAwMCAvKiBDLk1heExpc3QgKi8pXG4gICAgICAgIGNhY2hlLnNldChkb2MsIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuQSBjb21wbGV0aW9uIHNvdXJjZSB0aGF0IHdpbGwgc2NhbiB0aGUgZG9jdW1lbnQgZm9yIHdvcmRzICh1c2luZyBhXG5bY2hhcmFjdGVyIGNhdGVnb3JpemVyXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLkVkaXRvclN0YXRlLmNoYXJDYXRlZ29yaXplcikpLCBhbmRcbnJldHVybiB0aG9zZSBhcyBjb21wbGV0aW9ucy5cbiovXG5jb25zdCBjb21wbGV0ZUFueVdvcmQgPSBjb250ZXh0ID0+IHtcbiAgICBsZXQgd29yZENoYXJzID0gY29udGV4dC5zdGF0ZS5sYW5ndWFnZURhdGFBdChcIndvcmRDaGFyc1wiLCBjb250ZXh0LnBvcykuam9pbihcIlwiKTtcbiAgICBsZXQgcmUgPSB3b3JkUkUod29yZENoYXJzKTtcbiAgICBsZXQgdG9rZW4gPSBjb250ZXh0Lm1hdGNoQmVmb3JlKG1hcFJFKHJlLCBzID0+IHMgKyBcIiRcIikpO1xuICAgIGlmICghdG9rZW4gJiYgIWNvbnRleHQuZXhwbGljaXQpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIGxldCBmcm9tID0gdG9rZW4gPyB0b2tlbi5mcm9tIDogY29udGV4dC5wb3M7XG4gICAgbGV0IG9wdGlvbnMgPSBjb2xsZWN0V29yZHMoY29udGV4dC5zdGF0ZS5kb2MsIHdvcmRDYWNoZSh3b3JkQ2hhcnMpLCByZSwgNTAwMDAgLyogQy5SYW5nZSAqLywgZnJvbSk7XG4gICAgcmV0dXJuIHsgZnJvbSwgb3B0aW9ucywgdmFsaWRGb3I6IG1hcFJFKHJlLCBzID0+IFwiXlwiICsgcykgfTtcbn07XG5cbmNvbnN0IGRlZmF1bHRzID0ge1xuICAgIGJyYWNrZXRzOiBbXCIoXCIsIFwiW1wiLCBcIntcIiwgXCInXCIsICdcIiddLFxuICAgIGJlZm9yZTogXCIpXX06Oz5cIixcbiAgICBzdHJpbmdQcmVmaXhlczogW11cbn07XG5jb25zdCBjbG9zZUJyYWNrZXRFZmZlY3QgPSBzdGF0ZS5TdGF0ZUVmZmVjdC5kZWZpbmUoe1xuICAgIG1hcCh2YWx1ZSwgbWFwcGluZykge1xuICAgICAgICBsZXQgbWFwcGVkID0gbWFwcGluZy5tYXBQb3ModmFsdWUsIC0xLCBzdGF0ZS5NYXBNb2RlLlRyYWNrQWZ0ZXIpO1xuICAgICAgICByZXR1cm4gbWFwcGVkID09IG51bGwgPyB1bmRlZmluZWQgOiBtYXBwZWQ7XG4gICAgfVxufSk7XG5jb25zdCBjbG9zZWRCcmFja2V0ID0gbmV3IGNsYXNzIGV4dGVuZHMgc3RhdGUuUmFuZ2VWYWx1ZSB7XG59O1xuY2xvc2VkQnJhY2tldC5zdGFydFNpZGUgPSAxO1xuY2xvc2VkQnJhY2tldC5lbmRTaWRlID0gLTE7XG5jb25zdCBicmFja2V0U3RhdGUgPSBzdGF0ZS5TdGF0ZUZpZWxkLmRlZmluZSh7XG4gICAgY3JlYXRlKCkgeyByZXR1cm4gc3RhdGUuUmFuZ2VTZXQuZW1wdHk7IH0sXG4gICAgdXBkYXRlKHZhbHVlLCB0cikge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLm1hcCh0ci5jaGFuZ2VzKTtcbiAgICAgICAgaWYgKHRyLnNlbGVjdGlvbikge1xuICAgICAgICAgICAgbGV0IGxpbmUgPSB0ci5zdGF0ZS5kb2MubGluZUF0KHRyLnNlbGVjdGlvbi5tYWluLmhlYWQpO1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS51cGRhdGUoeyBmaWx0ZXI6IGZyb20gPT4gZnJvbSA+PSBsaW5lLmZyb20gJiYgZnJvbSA8PSBsaW5lLnRvIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGVmZmVjdCBvZiB0ci5lZmZlY3RzKVxuICAgICAgICAgICAgaWYgKGVmZmVjdC5pcyhjbG9zZUJyYWNrZXRFZmZlY3QpKVxuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUudXBkYXRlKHsgYWRkOiBbY2xvc2VkQnJhY2tldC5yYW5nZShlZmZlY3QudmFsdWUsIGVmZmVjdC52YWx1ZSArIDEpXSB9KTtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbn0pO1xuLyoqXG5FeHRlbnNpb24gdG8gZW5hYmxlIGJyYWNrZXQtY2xvc2luZyBiZWhhdmlvci4gV2hlbiBhIGNsb3NlYWJsZVxuYnJhY2tldCBpcyB0eXBlZCwgaXRzIGNsb3NpbmcgYnJhY2tldCBpcyBpbW1lZGlhdGVseSBpbnNlcnRlZFxuYWZ0ZXIgdGhlIGN1cnNvci4gV2hlbiBjbG9zaW5nIGEgYnJhY2tldCBkaXJlY3RseSBpbiBmcm9udCBvZiBhXG5jbG9zaW5nIGJyYWNrZXQgaW5zZXJ0ZWQgYnkgdGhlIGV4dGVuc2lvbiwgdGhlIGN1cnNvciBtb3ZlcyBvdmVyXG50aGF0IGJyYWNrZXQuXG4qL1xuZnVuY3Rpb24gY2xvc2VCcmFja2V0cygpIHtcbiAgICByZXR1cm4gW2lucHV0SGFuZGxlciwgYnJhY2tldFN0YXRlXTtcbn1cbmNvbnN0IGRlZmluZWRDbG9zaW5nID0gXCIoKVtde308PlwiO1xuZnVuY3Rpb24gY2xvc2luZyhjaCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVmaW5lZENsb3NpbmcubGVuZ3RoOyBpICs9IDIpXG4gICAgICAgIGlmIChkZWZpbmVkQ2xvc2luZy5jaGFyQ29kZUF0KGkpID09IGNoKVxuICAgICAgICAgICAgcmV0dXJuIGRlZmluZWRDbG9zaW5nLmNoYXJBdChpICsgMSk7XG4gICAgcmV0dXJuIHN0YXRlLmZyb21Db2RlUG9pbnQoY2ggPCAxMjggPyBjaCA6IGNoICsgMSk7XG59XG5mdW5jdGlvbiBjb25maWcoc3RhdGUsIHBvcykge1xuICAgIHJldHVybiBzdGF0ZS5sYW5ndWFnZURhdGFBdChcImNsb3NlQnJhY2tldHNcIiwgcG9zKVswXSB8fCBkZWZhdWx0cztcbn1cbmNvbnN0IGFuZHJvaWQgPSB0eXBlb2YgbmF2aWdhdG9yID09IFwib2JqZWN0XCIgJiYgL0FuZHJvaWRcXGIvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5jb25zdCBpbnB1dEhhbmRsZXIgPSB2aWV3LkVkaXRvclZpZXcuaW5wdXRIYW5kbGVyLm9mKCh2aWV3LCBmcm9tLCB0bywgaW5zZXJ0KSA9PiB7XG4gICAgaWYgKChhbmRyb2lkID8gdmlldy5jb21wb3NpbmcgOiB2aWV3LmNvbXBvc2l0aW9uU3RhcnRlZCkgfHwgdmlldy5zdGF0ZS5yZWFkT25seSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGxldCBzZWwgPSB2aWV3LnN0YXRlLnNlbGVjdGlvbi5tYWluO1xuICAgIGlmIChpbnNlcnQubGVuZ3RoID4gMiB8fCBpbnNlcnQubGVuZ3RoID09IDIgJiYgc3RhdGUuY29kZVBvaW50U2l6ZShzdGF0ZS5jb2RlUG9pbnRBdChpbnNlcnQsIDApKSA9PSAxIHx8XG4gICAgICAgIGZyb20gIT0gc2VsLmZyb20gfHwgdG8gIT0gc2VsLnRvKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0IHRyID0gaW5zZXJ0QnJhY2tldCh2aWV3LnN0YXRlLCBpbnNlcnQpO1xuICAgIGlmICghdHIpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB2aWV3LmRpc3BhdGNoKHRyKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn0pO1xuLyoqXG5Db21tYW5kIHRoYXQgaW1wbGVtZW50cyBkZWxldGluZyBhIHBhaXIgb2YgbWF0Y2hpbmcgYnJhY2tldHMgd2hlblxudGhlIGN1cnNvciBpcyBiZXR3ZWVuIHRoZW0uXG4qL1xuY29uc3QgZGVsZXRlQnJhY2tldFBhaXIgPSAoeyBzdGF0ZTogc3RhdGUkMSwgZGlzcGF0Y2ggfSkgPT4ge1xuICAgIGlmIChzdGF0ZSQxLnJlYWRPbmx5KVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0IGNvbmYgPSBjb25maWcoc3RhdGUkMSwgc3RhdGUkMS5zZWxlY3Rpb24ubWFpbi5oZWFkKTtcbiAgICBsZXQgdG9rZW5zID0gY29uZi5icmFja2V0cyB8fCBkZWZhdWx0cy5icmFja2V0cztcbiAgICBsZXQgZG9udCA9IG51bGwsIGNoYW5nZXMgPSBzdGF0ZSQxLmNoYW5nZUJ5UmFuZ2UocmFuZ2UgPT4ge1xuICAgICAgICBpZiAocmFuZ2UuZW1wdHkpIHtcbiAgICAgICAgICAgIGxldCBiZWZvcmUgPSBwcmV2Q2hhcihzdGF0ZSQxLmRvYywgcmFuZ2UuaGVhZCk7XG4gICAgICAgICAgICBmb3IgKGxldCB0b2tlbiBvZiB0b2tlbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAodG9rZW4gPT0gYmVmb3JlICYmIG5leHRDaGFyKHN0YXRlJDEuZG9jLCByYW5nZS5oZWFkKSA9PSBjbG9zaW5nKHN0YXRlLmNvZGVQb2ludEF0KHRva2VuLCAwKSkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGNoYW5nZXM6IHsgZnJvbTogcmFuZ2UuaGVhZCAtIHRva2VuLmxlbmd0aCwgdG86IHJhbmdlLmhlYWQgKyB0b2tlbi5sZW5ndGggfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlOiBzdGF0ZS5FZGl0b3JTZWxlY3Rpb24uY3Vyc29yKHJhbmdlLmhlYWQgLSB0b2tlbi5sZW5ndGgpIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgcmFuZ2U6IGRvbnQgPSByYW5nZSB9O1xuICAgIH0pO1xuICAgIGlmICghZG9udClcbiAgICAgICAgZGlzcGF0Y2goc3RhdGUkMS51cGRhdGUoY2hhbmdlcywgeyBzY3JvbGxJbnRvVmlldzogdHJ1ZSwgdXNlckV2ZW50OiBcImRlbGV0ZS5iYWNrd2FyZFwiIH0pKTtcbiAgICByZXR1cm4gIWRvbnQ7XG59O1xuLyoqXG5DbG9zZS1icmFja2V0cyByZWxhdGVkIGtleSBiaW5kaW5ncy4gQmluZHMgQmFja3NwYWNlIHRvXG5bYGRlbGV0ZUJyYWNrZXRQYWlyYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNhdXRvY29tcGxldGUuZGVsZXRlQnJhY2tldFBhaXIpLlxuKi9cbmNvbnN0IGNsb3NlQnJhY2tldHNLZXltYXAgPSBbXG4gICAgeyBrZXk6IFwiQmFja3NwYWNlXCIsIHJ1bjogZGVsZXRlQnJhY2tldFBhaXIgfVxuXTtcbi8qKlxuSW1wbGVtZW50cyB0aGUgZXh0ZW5zaW9uJ3MgYmVoYXZpb3Igb24gdGV4dCBpbnNlcnRpb24uIElmIHRoZVxuZ2l2ZW4gc3RyaW5nIGNvdW50cyBhcyBhIGJyYWNrZXQgaW4gdGhlIGxhbmd1YWdlIGFyb3VuZCB0aGVcbnNlbGVjdGlvbiwgYW5kIHJlcGxhY2luZyB0aGUgc2VsZWN0aW9uIHdpdGggaXQgcmVxdWlyZXMgY3VzdG9tXG5iZWhhdmlvciAoaW5zZXJ0aW5nIGEgY2xvc2luZyB2ZXJzaW9uIG9yIHNraXBwaW5nIHBhc3QgYVxucHJldmlvdXNseS1jbG9zZWQgYnJhY2tldCksIHRoaXMgZnVuY3Rpb24gcmV0dXJucyBhIHRyYW5zYWN0aW9uXG5yZXByZXNlbnRpbmcgdGhhdCBjdXN0b20gYmVoYXZpb3IuIChZb3Ugb25seSBuZWVkIHRoaXMgaWYgeW91IHdhbnRcbnRvIHByb2dyYW1tYXRpY2FsbHkgaW5zZXJ0IGJyYWNrZXRz4oCUdGhlXG5bYGNsb3NlQnJhY2tldHNgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2F1dG9jb21wbGV0ZS5jbG9zZUJyYWNrZXRzKSBleHRlbnNpb24gd2lsbFxudGFrZSBjYXJlIG9mIHJ1bm5pbmcgdGhpcyBmb3IgdXNlciBpbnB1dC4pXG4qL1xuZnVuY3Rpb24gaW5zZXJ0QnJhY2tldChzdGF0ZSQxLCBicmFja2V0KSB7XG4gICAgbGV0IGNvbmYgPSBjb25maWcoc3RhdGUkMSwgc3RhdGUkMS5zZWxlY3Rpb24ubWFpbi5oZWFkKTtcbiAgICBsZXQgdG9rZW5zID0gY29uZi5icmFja2V0cyB8fCBkZWZhdWx0cy5icmFja2V0cztcbiAgICBmb3IgKGxldCB0b2sgb2YgdG9rZW5zKSB7XG4gICAgICAgIGxldCBjbG9zZWQgPSBjbG9zaW5nKHN0YXRlLmNvZGVQb2ludEF0KHRvaywgMCkpO1xuICAgICAgICBpZiAoYnJhY2tldCA9PSB0b2spXG4gICAgICAgICAgICByZXR1cm4gY2xvc2VkID09IHRvayA/IGhhbmRsZVNhbWUoc3RhdGUkMSwgdG9rLCB0b2tlbnMuaW5kZXhPZih0b2sgKyB0b2sgKyB0b2spID4gLTEsIGNvbmYpXG4gICAgICAgICAgICAgICAgOiBoYW5kbGVPcGVuKHN0YXRlJDEsIHRvaywgY2xvc2VkLCBjb25mLmJlZm9yZSB8fCBkZWZhdWx0cy5iZWZvcmUpO1xuICAgICAgICBpZiAoYnJhY2tldCA9PSBjbG9zZWQgJiYgY2xvc2VkQnJhY2tldEF0KHN0YXRlJDEsIHN0YXRlJDEuc2VsZWN0aW9uLm1haW4uZnJvbSkpXG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlQ2xvc2Uoc3RhdGUkMSwgdG9rLCBjbG9zZWQpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGNsb3NlZEJyYWNrZXRBdChzdGF0ZSwgcG9zKSB7XG4gICAgbGV0IGZvdW5kID0gZmFsc2U7XG4gICAgc3RhdGUuZmllbGQoYnJhY2tldFN0YXRlKS5iZXR3ZWVuKDAsIHN0YXRlLmRvYy5sZW5ndGgsIGZyb20gPT4ge1xuICAgICAgICBpZiAoZnJvbSA9PSBwb3MpXG4gICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZvdW5kO1xufVxuZnVuY3Rpb24gbmV4dENoYXIoZG9jLCBwb3MpIHtcbiAgICBsZXQgbmV4dCA9IGRvYy5zbGljZVN0cmluZyhwb3MsIHBvcyArIDIpO1xuICAgIHJldHVybiBuZXh0LnNsaWNlKDAsIHN0YXRlLmNvZGVQb2ludFNpemUoc3RhdGUuY29kZVBvaW50QXQobmV4dCwgMCkpKTtcbn1cbmZ1bmN0aW9uIHByZXZDaGFyKGRvYywgcG9zKSB7XG4gICAgbGV0IHByZXYgPSBkb2Muc2xpY2VTdHJpbmcocG9zIC0gMiwgcG9zKTtcbiAgICByZXR1cm4gc3RhdGUuY29kZVBvaW50U2l6ZShzdGF0ZS5jb2RlUG9pbnRBdChwcmV2LCAwKSkgPT0gcHJldi5sZW5ndGggPyBwcmV2IDogcHJldi5zbGljZSgxKTtcbn1cbmZ1bmN0aW9uIGhhbmRsZU9wZW4oc3RhdGUkMSwgb3BlbiwgY2xvc2UsIGNsb3NlQmVmb3JlKSB7XG4gICAgbGV0IGRvbnQgPSBudWxsLCBjaGFuZ2VzID0gc3RhdGUkMS5jaGFuZ2VCeVJhbmdlKHJhbmdlID0+IHtcbiAgICAgICAgaWYgKCFyYW5nZS5lbXB0eSlcbiAgICAgICAgICAgIHJldHVybiB7IGNoYW5nZXM6IFt7IGluc2VydDogb3BlbiwgZnJvbTogcmFuZ2UuZnJvbSB9LCB7IGluc2VydDogY2xvc2UsIGZyb206IHJhbmdlLnRvIH1dLFxuICAgICAgICAgICAgICAgIGVmZmVjdHM6IGNsb3NlQnJhY2tldEVmZmVjdC5vZihyYW5nZS50byArIG9wZW4ubGVuZ3RoKSxcbiAgICAgICAgICAgICAgICByYW5nZTogc3RhdGUuRWRpdG9yU2VsZWN0aW9uLnJhbmdlKHJhbmdlLmFuY2hvciArIG9wZW4ubGVuZ3RoLCByYW5nZS5oZWFkICsgb3Blbi5sZW5ndGgpIH07XG4gICAgICAgIGxldCBuZXh0ID0gbmV4dENoYXIoc3RhdGUkMS5kb2MsIHJhbmdlLmhlYWQpO1xuICAgICAgICBpZiAoIW5leHQgfHwgL1xccy8udGVzdChuZXh0KSB8fCBjbG9zZUJlZm9yZS5pbmRleE9mKG5leHQpID4gLTEpXG4gICAgICAgICAgICByZXR1cm4geyBjaGFuZ2VzOiB7IGluc2VydDogb3BlbiArIGNsb3NlLCBmcm9tOiByYW5nZS5oZWFkIH0sXG4gICAgICAgICAgICAgICAgZWZmZWN0czogY2xvc2VCcmFja2V0RWZmZWN0Lm9mKHJhbmdlLmhlYWQgKyBvcGVuLmxlbmd0aCksXG4gICAgICAgICAgICAgICAgcmFuZ2U6IHN0YXRlLkVkaXRvclNlbGVjdGlvbi5jdXJzb3IocmFuZ2UuaGVhZCArIG9wZW4ubGVuZ3RoKSB9O1xuICAgICAgICByZXR1cm4geyByYW5nZTogZG9udCA9IHJhbmdlIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIGRvbnQgPyBudWxsIDogc3RhdGUkMS51cGRhdGUoY2hhbmdlcywge1xuICAgICAgICBzY3JvbGxJbnRvVmlldzogdHJ1ZSxcbiAgICAgICAgdXNlckV2ZW50OiBcImlucHV0LnR5cGVcIlxuICAgIH0pO1xufVxuZnVuY3Rpb24gaGFuZGxlQ2xvc2Uoc3RhdGUkMSwgX29wZW4sIGNsb3NlKSB7XG4gICAgbGV0IGRvbnQgPSBudWxsLCBjaGFuZ2VzID0gc3RhdGUkMS5jaGFuZ2VCeVJhbmdlKHJhbmdlID0+IHtcbiAgICAgICAgaWYgKHJhbmdlLmVtcHR5ICYmIG5leHRDaGFyKHN0YXRlJDEuZG9jLCByYW5nZS5oZWFkKSA9PSBjbG9zZSlcbiAgICAgICAgICAgIHJldHVybiB7IGNoYW5nZXM6IHsgZnJvbTogcmFuZ2UuaGVhZCwgdG86IHJhbmdlLmhlYWQgKyBjbG9zZS5sZW5ndGgsIGluc2VydDogY2xvc2UgfSxcbiAgICAgICAgICAgICAgICByYW5nZTogc3RhdGUuRWRpdG9yU2VsZWN0aW9uLmN1cnNvcihyYW5nZS5oZWFkICsgY2xvc2UubGVuZ3RoKSB9O1xuICAgICAgICByZXR1cm4gZG9udCA9IHsgcmFuZ2UgfTtcbiAgICB9KTtcbiAgICByZXR1cm4gZG9udCA/IG51bGwgOiBzdGF0ZSQxLnVwZGF0ZShjaGFuZ2VzLCB7XG4gICAgICAgIHNjcm9sbEludG9WaWV3OiB0cnVlLFxuICAgICAgICB1c2VyRXZlbnQ6IFwiaW5wdXQudHlwZVwiXG4gICAgfSk7XG59XG4vLyBIYW5kbGVzIGNhc2VzIHdoZXJlIHRoZSBvcGVuIGFuZCBjbG9zZSB0b2tlbiBhcmUgdGhlIHNhbWUsIGFuZFxuLy8gcG9zc2libHkgdHJpcGxlIHF1b3RlcyAoYXMgaW4gYFwiXCJcImFiY1wiXCJcImAtc3R5bGUgcXVvdGluZykuXG5mdW5jdGlvbiBoYW5kbGVTYW1lKHN0YXRlJDEsIHRva2VuLCBhbGxvd1RyaXBsZSwgY29uZmlnKSB7XG4gICAgbGV0IHN0cmluZ1ByZWZpeGVzID0gY29uZmlnLnN0cmluZ1ByZWZpeGVzIHx8IGRlZmF1bHRzLnN0cmluZ1ByZWZpeGVzO1xuICAgIGxldCBkb250ID0gbnVsbCwgY2hhbmdlcyA9IHN0YXRlJDEuY2hhbmdlQnlSYW5nZShyYW5nZSA9PiB7XG4gICAgICAgIGlmICghcmFuZ2UuZW1wdHkpXG4gICAgICAgICAgICByZXR1cm4geyBjaGFuZ2VzOiBbeyBpbnNlcnQ6IHRva2VuLCBmcm9tOiByYW5nZS5mcm9tIH0sIHsgaW5zZXJ0OiB0b2tlbiwgZnJvbTogcmFuZ2UudG8gfV0sXG4gICAgICAgICAgICAgICAgZWZmZWN0czogY2xvc2VCcmFja2V0RWZmZWN0Lm9mKHJhbmdlLnRvICsgdG9rZW4ubGVuZ3RoKSxcbiAgICAgICAgICAgICAgICByYW5nZTogc3RhdGUuRWRpdG9yU2VsZWN0aW9uLnJhbmdlKHJhbmdlLmFuY2hvciArIHRva2VuLmxlbmd0aCwgcmFuZ2UuaGVhZCArIHRva2VuLmxlbmd0aCkgfTtcbiAgICAgICAgbGV0IHBvcyA9IHJhbmdlLmhlYWQsIG5leHQgPSBuZXh0Q2hhcihzdGF0ZSQxLmRvYywgcG9zKSwgc3RhcnQ7XG4gICAgICAgIGlmIChuZXh0ID09IHRva2VuKSB7XG4gICAgICAgICAgICBpZiAobm9kZVN0YXJ0KHN0YXRlJDEsIHBvcykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBjaGFuZ2VzOiB7IGluc2VydDogdG9rZW4gKyB0b2tlbiwgZnJvbTogcG9zIH0sXG4gICAgICAgICAgICAgICAgICAgIGVmZmVjdHM6IGNsb3NlQnJhY2tldEVmZmVjdC5vZihwb3MgKyB0b2tlbi5sZW5ndGgpLFxuICAgICAgICAgICAgICAgICAgICByYW5nZTogc3RhdGUuRWRpdG9yU2VsZWN0aW9uLmN1cnNvcihwb3MgKyB0b2tlbi5sZW5ndGgpIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjbG9zZWRCcmFja2V0QXQoc3RhdGUkMSwgcG9zKSkge1xuICAgICAgICAgICAgICAgIGxldCBpc1RyaXBsZSA9IGFsbG93VHJpcGxlICYmIHN0YXRlJDEuc2xpY2VEb2MocG9zLCBwb3MgKyB0b2tlbi5sZW5ndGggKiAzKSA9PSB0b2tlbiArIHRva2VuICsgdG9rZW47XG4gICAgICAgICAgICAgICAgbGV0IGNvbnRlbnQgPSBpc1RyaXBsZSA/IHRva2VuICsgdG9rZW4gKyB0b2tlbiA6IHRva2VuO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGNoYW5nZXM6IHsgZnJvbTogcG9zLCB0bzogcG9zICsgY29udGVudC5sZW5ndGgsIGluc2VydDogY29udGVudCB9LFxuICAgICAgICAgICAgICAgICAgICByYW5nZTogc3RhdGUuRWRpdG9yU2VsZWN0aW9uLmN1cnNvcihwb3MgKyBjb250ZW50Lmxlbmd0aCkgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhbGxvd1RyaXBsZSAmJiBzdGF0ZSQxLnNsaWNlRG9jKHBvcyAtIDIgKiB0b2tlbi5sZW5ndGgsIHBvcykgPT0gdG9rZW4gKyB0b2tlbiAmJlxuICAgICAgICAgICAgKHN0YXJ0ID0gY2FuU3RhcnRTdHJpbmdBdChzdGF0ZSQxLCBwb3MgLSAyICogdG9rZW4ubGVuZ3RoLCBzdHJpbmdQcmVmaXhlcykpID4gLTEgJiZcbiAgICAgICAgICAgIG5vZGVTdGFydChzdGF0ZSQxLCBzdGFydCkpIHtcbiAgICAgICAgICAgIHJldHVybiB7IGNoYW5nZXM6IHsgaW5zZXJ0OiB0b2tlbiArIHRva2VuICsgdG9rZW4gKyB0b2tlbiwgZnJvbTogcG9zIH0sXG4gICAgICAgICAgICAgICAgZWZmZWN0czogY2xvc2VCcmFja2V0RWZmZWN0Lm9mKHBvcyArIHRva2VuLmxlbmd0aCksXG4gICAgICAgICAgICAgICAgcmFuZ2U6IHN0YXRlLkVkaXRvclNlbGVjdGlvbi5jdXJzb3IocG9zICsgdG9rZW4ubGVuZ3RoKSB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHN0YXRlJDEuY2hhckNhdGVnb3JpemVyKHBvcykobmV4dCkgIT0gc3RhdGUuQ2hhckNhdGVnb3J5LldvcmQpIHtcbiAgICAgICAgICAgIGlmIChjYW5TdGFydFN0cmluZ0F0KHN0YXRlJDEsIHBvcywgc3RyaW5nUHJlZml4ZXMpID4gLTEgJiYgIXByb2JhYmx5SW5TdHJpbmcoc3RhdGUkMSwgcG9zLCB0b2tlbiwgc3RyaW5nUHJlZml4ZXMpKVxuICAgICAgICAgICAgICAgIHJldHVybiB7IGNoYW5nZXM6IHsgaW5zZXJ0OiB0b2tlbiArIHRva2VuLCBmcm9tOiBwb3MgfSxcbiAgICAgICAgICAgICAgICAgICAgZWZmZWN0czogY2xvc2VCcmFja2V0RWZmZWN0Lm9mKHBvcyArIHRva2VuLmxlbmd0aCksXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlOiBzdGF0ZS5FZGl0b3JTZWxlY3Rpb24uY3Vyc29yKHBvcyArIHRva2VuLmxlbmd0aCkgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyByYW5nZTogZG9udCA9IHJhbmdlIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIGRvbnQgPyBudWxsIDogc3RhdGUkMS51cGRhdGUoY2hhbmdlcywge1xuICAgICAgICBzY3JvbGxJbnRvVmlldzogdHJ1ZSxcbiAgICAgICAgdXNlckV2ZW50OiBcImlucHV0LnR5cGVcIlxuICAgIH0pO1xufVxuZnVuY3Rpb24gbm9kZVN0YXJ0KHN0YXRlLCBwb3MpIHtcbiAgICBsZXQgdHJlZSA9IGxhbmd1YWdlLnN5bnRheFRyZWUoc3RhdGUpLnJlc29sdmVJbm5lcihwb3MgKyAxKTtcbiAgICByZXR1cm4gdHJlZS5wYXJlbnQgJiYgdHJlZS5mcm9tID09IHBvcztcbn1cbmZ1bmN0aW9uIHByb2JhYmx5SW5TdHJpbmcoc3RhdGUsIHBvcywgcXVvdGVUb2tlbiwgcHJlZml4ZXMpIHtcbiAgICBsZXQgbm9kZSA9IGxhbmd1YWdlLnN5bnRheFRyZWUoc3RhdGUpLnJlc29sdmVJbm5lcihwb3MsIC0xKTtcbiAgICBsZXQgbWF4UHJlZml4ID0gcHJlZml4ZXMucmVkdWNlKChtLCBwKSA9PiBNYXRoLm1heChtLCBwLmxlbmd0aCksIDApO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNTsgaSsrKSB7XG4gICAgICAgIGxldCBzdGFydCA9IHN0YXRlLnNsaWNlRG9jKG5vZGUuZnJvbSwgTWF0aC5taW4obm9kZS50bywgbm9kZS5mcm9tICsgcXVvdGVUb2tlbi5sZW5ndGggKyBtYXhQcmVmaXgpKTtcbiAgICAgICAgbGV0IHF1b3RlUG9zID0gc3RhcnQuaW5kZXhPZihxdW90ZVRva2VuKTtcbiAgICAgICAgaWYgKCFxdW90ZVBvcyB8fCBxdW90ZVBvcyA+IC0xICYmIHByZWZpeGVzLmluZGV4T2Yoc3RhcnQuc2xpY2UoMCwgcXVvdGVQb3MpKSA+IC0xKSB7XG4gICAgICAgICAgICBsZXQgZmlyc3QgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICB3aGlsZSAoZmlyc3QgJiYgZmlyc3QuZnJvbSA9PSBub2RlLmZyb20gJiYgZmlyc3QudG8gLSBmaXJzdC5mcm9tID4gcXVvdGVUb2tlbi5sZW5ndGggKyBxdW90ZVBvcykge1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5zbGljZURvYyhmaXJzdC50byAtIHF1b3RlVG9rZW4ubGVuZ3RoLCBmaXJzdC50bykgPT0gcXVvdGVUb2tlbilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIGZpcnN0ID0gZmlyc3QuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwYXJlbnQgPSBub2RlLnRvID09IHBvcyAmJiBub2RlLnBhcmVudDtcbiAgICAgICAgaWYgKCFwYXJlbnQpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgbm9kZSA9IHBhcmVudDtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gY2FuU3RhcnRTdHJpbmdBdChzdGF0ZSQxLCBwb3MsIHByZWZpeGVzKSB7XG4gICAgbGV0IGNoYXJDYXQgPSBzdGF0ZSQxLmNoYXJDYXRlZ29yaXplcihwb3MpO1xuICAgIGlmIChjaGFyQ2F0KHN0YXRlJDEuc2xpY2VEb2MocG9zIC0gMSwgcG9zKSkgIT0gc3RhdGUuQ2hhckNhdGVnb3J5LldvcmQpXG4gICAgICAgIHJldHVybiBwb3M7XG4gICAgZm9yIChsZXQgcHJlZml4IG9mIHByZWZpeGVzKSB7XG4gICAgICAgIGxldCBzdGFydCA9IHBvcyAtIHByZWZpeC5sZW5ndGg7XG4gICAgICAgIGlmIChzdGF0ZSQxLnNsaWNlRG9jKHN0YXJ0LCBwb3MpID09IHByZWZpeCAmJiBjaGFyQ2F0KHN0YXRlJDEuc2xpY2VEb2Moc3RhcnQgLSAxLCBzdGFydCkpICE9IHN0YXRlLkNoYXJDYXRlZ29yeS5Xb3JkKVxuICAgICAgICAgICAgcmV0dXJuIHN0YXJ0O1xuICAgIH1cbiAgICByZXR1cm4gLTE7XG59XG5cbi8qKlxuUmV0dXJucyBhbiBleHRlbnNpb24gdGhhdCBlbmFibGVzIGF1dG9jb21wbGV0aW9uLlxuKi9cbmZ1bmN0aW9uIGF1dG9jb21wbGV0aW9uKGNvbmZpZyA9IHt9KSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgY29tbWl0Q2hhcmFjdGVycyxcbiAgICAgICAgY29tcGxldGlvblN0YXRlLFxuICAgICAgICBjb21wbGV0aW9uQ29uZmlnLm9mKGNvbmZpZyksXG4gICAgICAgIGNvbXBsZXRpb25QbHVnaW4sXG4gICAgICAgIGNvbXBsZXRpb25LZXltYXBFeHQsXG4gICAgICAgIGJhc2VUaGVtZVxuICAgIF07XG59XG4vKipcbkJhc2ljIGtleWJpbmRpbmdzIGZvciBhdXRvY29tcGxldGlvbi5cblxuIC0gQ3RybC1TcGFjZTogW2BzdGFydENvbXBsZXRpb25gXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2F1dG9jb21wbGV0ZS5zdGFydENvbXBsZXRpb24pXG4gLSBFc2NhcGU6IFtgY2xvc2VDb21wbGV0aW9uYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNhdXRvY29tcGxldGUuY2xvc2VDb21wbGV0aW9uKVxuIC0gQXJyb3dEb3duOiBbYG1vdmVDb21wbGV0aW9uU2VsZWN0aW9uYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNhdXRvY29tcGxldGUubW92ZUNvbXBsZXRpb25TZWxlY3Rpb24pYCh0cnVlKWBcbiAtIEFycm93VXA6IFtgbW92ZUNvbXBsZXRpb25TZWxlY3Rpb25gXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2F1dG9jb21wbGV0ZS5tb3ZlQ29tcGxldGlvblNlbGVjdGlvbilgKGZhbHNlKWBcbiAtIFBhZ2VEb3duOiBbYG1vdmVDb21wbGV0aW9uU2VsZWN0aW9uYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNhdXRvY29tcGxldGUubW92ZUNvbXBsZXRpb25TZWxlY3Rpb24pYCh0cnVlLCBcInBhZ2VcIilgXG4gLSBQYWdlRG93bjogW2Btb3ZlQ29tcGxldGlvblNlbGVjdGlvbmBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jYXV0b2NvbXBsZXRlLm1vdmVDb21wbGV0aW9uU2VsZWN0aW9uKWAodHJ1ZSwgXCJwYWdlXCIpYFxuIC0gRW50ZXI6IFtgYWNjZXB0Q29tcGxldGlvbmBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jYXV0b2NvbXBsZXRlLmFjY2VwdENvbXBsZXRpb24pXG4qL1xuY29uc3QgY29tcGxldGlvbktleW1hcCA9IFtcbiAgICB7IGtleTogXCJDdHJsLVNwYWNlXCIsIHJ1bjogc3RhcnRDb21wbGV0aW9uIH0sXG4gICAgeyBrZXk6IFwiRXNjYXBlXCIsIHJ1bjogY2xvc2VDb21wbGV0aW9uIH0sXG4gICAgeyBrZXk6IFwiQXJyb3dEb3duXCIsIHJ1bjogbW92ZUNvbXBsZXRpb25TZWxlY3Rpb24odHJ1ZSkgfSxcbiAgICB7IGtleTogXCJBcnJvd1VwXCIsIHJ1bjogbW92ZUNvbXBsZXRpb25TZWxlY3Rpb24oZmFsc2UpIH0sXG4gICAgeyBrZXk6IFwiUGFnZURvd25cIiwgcnVuOiBtb3ZlQ29tcGxldGlvblNlbGVjdGlvbih0cnVlLCBcInBhZ2VcIikgfSxcbiAgICB7IGtleTogXCJQYWdlVXBcIiwgcnVuOiBtb3ZlQ29tcGxldGlvblNlbGVjdGlvbihmYWxzZSwgXCJwYWdlXCIpIH0sXG4gICAgeyBrZXk6IFwiRW50ZXJcIiwgcnVuOiBhY2NlcHRDb21wbGV0aW9uIH1cbl07XG5jb25zdCBjb21wbGV0aW9uS2V5bWFwRXh0ID0gc3RhdGUuUHJlYy5oaWdoZXN0KHZpZXcua2V5bWFwLmNvbXB1dGVOKFtjb21wbGV0aW9uQ29uZmlnXSwgc3RhdGUgPT4gc3RhdGUuZmFjZXQoY29tcGxldGlvbkNvbmZpZykuZGVmYXVsdEtleW1hcCA/IFtjb21wbGV0aW9uS2V5bWFwXSA6IFtdKSk7XG4vKipcbkdldCB0aGUgY3VycmVudCBjb21wbGV0aW9uIHN0YXR1cy4gV2hlbiBjb21wbGV0aW9ucyBhcmUgYXZhaWxhYmxlLFxudGhpcyB3aWxsIHJldHVybiBgXCJhY3RpdmVcImAuIFdoZW4gY29tcGxldGlvbnMgYXJlIHBlbmRpbmcgKGluIHRoZVxucHJvY2VzcyBvZiBiZWluZyBxdWVyaWVkKSwgdGhpcyByZXR1cm5zIGBcInBlbmRpbmdcImAuIE90aGVyd2lzZSwgaXRcbnJldHVybnMgYG51bGxgLlxuKi9cbmZ1bmN0aW9uIGNvbXBsZXRpb25TdGF0dXMoc3RhdGUpIHtcbiAgICBsZXQgY1N0YXRlID0gc3RhdGUuZmllbGQoY29tcGxldGlvblN0YXRlLCBmYWxzZSk7XG4gICAgcmV0dXJuIGNTdGF0ZSAmJiBjU3RhdGUuYWN0aXZlLnNvbWUoYSA9PiBhLnN0YXRlID09IDEgLyogU3RhdGUuUGVuZGluZyAqLykgPyBcInBlbmRpbmdcIlxuICAgICAgICA6IGNTdGF0ZSAmJiBjU3RhdGUuYWN0aXZlLnNvbWUoYSA9PiBhLnN0YXRlICE9IDAgLyogU3RhdGUuSW5hY3RpdmUgKi8pID8gXCJhY3RpdmVcIiA6IG51bGw7XG59XG5jb25zdCBjb21wbGV0aW9uQXJyYXlDYWNoZSA9IG5ldyBXZWFrTWFwO1xuLyoqXG5SZXR1cm5zIHRoZSBhdmFpbGFibGUgY29tcGxldGlvbnMgYXMgYW4gYXJyYXkuXG4qL1xuZnVuY3Rpb24gY3VycmVudENvbXBsZXRpb25zKHN0YXRlKSB7XG4gICAgdmFyIF9hO1xuICAgIGxldCBvcGVuID0gKF9hID0gc3RhdGUuZmllbGQoY29tcGxldGlvblN0YXRlLCBmYWxzZSkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5vcGVuO1xuICAgIGlmICghb3BlbiB8fCBvcGVuLmRpc2FibGVkKVxuICAgICAgICByZXR1cm4gW107XG4gICAgbGV0IGNvbXBsZXRpb25zID0gY29tcGxldGlvbkFycmF5Q2FjaGUuZ2V0KG9wZW4ub3B0aW9ucyk7XG4gICAgaWYgKCFjb21wbGV0aW9ucylcbiAgICAgICAgY29tcGxldGlvbkFycmF5Q2FjaGUuc2V0KG9wZW4ub3B0aW9ucywgY29tcGxldGlvbnMgPSBvcGVuLm9wdGlvbnMubWFwKG8gPT4gby5jb21wbGV0aW9uKSk7XG4gICAgcmV0dXJuIGNvbXBsZXRpb25zO1xufVxuLyoqXG5SZXR1cm4gdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBjb21wbGV0aW9uLCBpZiBhbnkuXG4qL1xuZnVuY3Rpb24gc2VsZWN0ZWRDb21wbGV0aW9uKHN0YXRlKSB7XG4gICAgdmFyIF9hO1xuICAgIGxldCBvcGVuID0gKF9hID0gc3RhdGUuZmllbGQoY29tcGxldGlvblN0YXRlLCBmYWxzZSkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5vcGVuO1xuICAgIHJldHVybiBvcGVuICYmICFvcGVuLmRpc2FibGVkICYmIG9wZW4uc2VsZWN0ZWQgPj0gMCA/IG9wZW4ub3B0aW9uc1tvcGVuLnNlbGVjdGVkXS5jb21wbGV0aW9uIDogbnVsbDtcbn1cbi8qKlxuUmV0dXJucyB0aGUgY3VycmVudGx5IHNlbGVjdGVkIHBvc2l0aW9uIGluIHRoZSBhY3RpdmUgY29tcGxldGlvblxubGlzdCwgb3IgbnVsbCBpZiBubyBjb21wbGV0aW9ucyBhcmUgYWN0aXZlLlxuKi9cbmZ1bmN0aW9uIHNlbGVjdGVkQ29tcGxldGlvbkluZGV4KHN0YXRlKSB7XG4gICAgdmFyIF9hO1xuICAgIGxldCBvcGVuID0gKF9hID0gc3RhdGUuZmllbGQoY29tcGxldGlvblN0YXRlLCBmYWxzZSkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5vcGVuO1xuICAgIHJldHVybiBvcGVuICYmICFvcGVuLmRpc2FibGVkICYmIG9wZW4uc2VsZWN0ZWQgPj0gMCA/IG9wZW4uc2VsZWN0ZWQgOiBudWxsO1xufVxuLyoqXG5DcmVhdGUgYW4gZWZmZWN0IHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGEgdHJhbnNhY3Rpb24gdG8gY2hhbmdlXG50aGUgY3VycmVudGx5IHNlbGVjdGVkIGNvbXBsZXRpb24uXG4qL1xuZnVuY3Rpb24gc2V0U2VsZWN0ZWRDb21wbGV0aW9uKGluZGV4KSB7XG4gICAgcmV0dXJuIHNldFNlbGVjdGVkRWZmZWN0Lm9mKGluZGV4KTtcbn1cblxuZXhwb3J0cy5Db21wbGV0aW9uQ29udGV4dCA9IENvbXBsZXRpb25Db250ZXh0O1xuZXhwb3J0cy5hY2NlcHRDb21wbGV0aW9uID0gYWNjZXB0Q29tcGxldGlvbjtcbmV4cG9ydHMuYXV0b2NvbXBsZXRpb24gPSBhdXRvY29tcGxldGlvbjtcbmV4cG9ydHMuY2xlYXJTbmlwcGV0ID0gY2xlYXJTbmlwcGV0O1xuZXhwb3J0cy5jbG9zZUJyYWNrZXRzID0gY2xvc2VCcmFja2V0cztcbmV4cG9ydHMuY2xvc2VCcmFja2V0c0tleW1hcCA9IGNsb3NlQnJhY2tldHNLZXltYXA7XG5leHBvcnRzLmNsb3NlQ29tcGxldGlvbiA9IGNsb3NlQ29tcGxldGlvbjtcbmV4cG9ydHMuY29tcGxldGVBbnlXb3JkID0gY29tcGxldGVBbnlXb3JkO1xuZXhwb3J0cy5jb21wbGV0ZUZyb21MaXN0ID0gY29tcGxldGVGcm9tTGlzdDtcbmV4cG9ydHMuY29tcGxldGlvbktleW1hcCA9IGNvbXBsZXRpb25LZXltYXA7XG5leHBvcnRzLmNvbXBsZXRpb25TdGF0dXMgPSBjb21wbGV0aW9uU3RhdHVzO1xuZXhwb3J0cy5jdXJyZW50Q29tcGxldGlvbnMgPSBjdXJyZW50Q29tcGxldGlvbnM7XG5leHBvcnRzLmRlbGV0ZUJyYWNrZXRQYWlyID0gZGVsZXRlQnJhY2tldFBhaXI7XG5leHBvcnRzLmhhc05leHRTbmlwcGV0RmllbGQgPSBoYXNOZXh0U25pcHBldEZpZWxkO1xuZXhwb3J0cy5oYXNQcmV2U25pcHBldEZpZWxkID0gaGFzUHJldlNuaXBwZXRGaWVsZDtcbmV4cG9ydHMuaWZJbiA9IGlmSW47XG5leHBvcnRzLmlmTm90SW4gPSBpZk5vdEluO1xuZXhwb3J0cy5pbnNlcnRCcmFja2V0ID0gaW5zZXJ0QnJhY2tldDtcbmV4cG9ydHMuaW5zZXJ0Q29tcGxldGlvblRleHQgPSBpbnNlcnRDb21wbGV0aW9uVGV4dDtcbmV4cG9ydHMubW92ZUNvbXBsZXRpb25TZWxlY3Rpb24gPSBtb3ZlQ29tcGxldGlvblNlbGVjdGlvbjtcbmV4cG9ydHMubmV4dFNuaXBwZXRGaWVsZCA9IG5leHRTbmlwcGV0RmllbGQ7XG5leHBvcnRzLnBpY2tlZENvbXBsZXRpb24gPSBwaWNrZWRDb21wbGV0aW9uO1xuZXhwb3J0cy5wcmV2U25pcHBldEZpZWxkID0gcHJldlNuaXBwZXRGaWVsZDtcbmV4cG9ydHMuc2VsZWN0ZWRDb21wbGV0aW9uID0gc2VsZWN0ZWRDb21wbGV0aW9uO1xuZXhwb3J0cy5zZWxlY3RlZENvbXBsZXRpb25JbmRleCA9IHNlbGVjdGVkQ29tcGxldGlvbkluZGV4O1xuZXhwb3J0cy5zZXRTZWxlY3RlZENvbXBsZXRpb24gPSBzZXRTZWxlY3RlZENvbXBsZXRpb247XG5leHBvcnRzLnNuaXBwZXQgPSBzbmlwcGV0O1xuZXhwb3J0cy5zbmlwcGV0Q29tcGxldGlvbiA9IHNuaXBwZXRDb21wbGV0aW9uO1xuZXhwb3J0cy5zbmlwcGV0S2V5bWFwID0gc25pcHBldEtleW1hcDtcbmV4cG9ydHMuc3RhcnRDb21wbGV0aW9uID0gc3RhcnRDb21wbGV0aW9uO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgc3RhdGUgPSByZXF1aXJlKCdAY29kZW1pcnJvci9zdGF0ZScpO1xudmFyIHZpZXcgPSByZXF1aXJlKCdAY29kZW1pcnJvci92aWV3Jyk7XG52YXIgbGFuZ3VhZ2UgPSByZXF1aXJlKCdAY29kZW1pcnJvci9sYW5ndWFnZScpO1xudmFyIGNvbW1vbiA9IHJlcXVpcmUoJ0BsZXplci9jb21tb24nKTtcblxuLyoqXG5Db21tZW50IG9yIHVuY29tbWVudCB0aGUgY3VycmVudCBzZWxlY3Rpb24uIFdpbGwgdXNlIGxpbmUgY29tbWVudHNcbmlmIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIGZhbGxpbmcgYmFjayB0byBibG9jayBjb21tZW50cy5cbiovXG5jb25zdCB0b2dnbGVDb21tZW50ID0gdGFyZ2V0ID0+IHtcbiAgICBsZXQgeyBzdGF0ZSB9ID0gdGFyZ2V0LCBsaW5lID0gc3RhdGUuZG9jLmxpbmVBdChzdGF0ZS5zZWxlY3Rpb24ubWFpbi5mcm9tKSwgY29uZmlnID0gZ2V0Q29uZmlnKHRhcmdldC5zdGF0ZSwgbGluZS5mcm9tKTtcbiAgICByZXR1cm4gY29uZmlnLmxpbmUgPyB0b2dnbGVMaW5lQ29tbWVudCh0YXJnZXQpIDogY29uZmlnLmJsb2NrID8gdG9nZ2xlQmxvY2tDb21tZW50QnlMaW5lKHRhcmdldCkgOiBmYWxzZTtcbn07XG5mdW5jdGlvbiBjb21tYW5kKGYsIG9wdGlvbikge1xuICAgIHJldHVybiAoeyBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xuICAgICAgICBpZiAoc3RhdGUucmVhZE9ubHkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGxldCB0ciA9IGYob3B0aW9uLCBzdGF0ZSk7XG4gICAgICAgIGlmICghdHIpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGRpc3BhdGNoKHN0YXRlLnVwZGF0ZSh0cikpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xufVxuLyoqXG5Db21tZW50IG9yIHVuY29tbWVudCB0aGUgY3VycmVudCBzZWxlY3Rpb24gdXNpbmcgbGluZSBjb21tZW50cy5cblRoZSBsaW5lIGNvbW1lbnQgc3ludGF4IGlzIHRha2VuIGZyb20gdGhlXG5bYGNvbW1lbnRUb2tlbnNgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLkNvbW1lbnRUb2tlbnMpIFtsYW5ndWFnZVxuZGF0YV0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5FZGl0b3JTdGF0ZS5sYW5ndWFnZURhdGFBdCkuXG4qL1xuY29uc3QgdG9nZ2xlTGluZUNvbW1lbnQgPSBjb21tYW5kKGNoYW5nZUxpbmVDb21tZW50LCAwIC8qIENvbW1lbnRPcHRpb24uVG9nZ2xlICovKTtcbi8qKlxuQ29tbWVudCB0aGUgY3VycmVudCBzZWxlY3Rpb24gdXNpbmcgbGluZSBjb21tZW50cy5cbiovXG5jb25zdCBsaW5lQ29tbWVudCA9IGNvbW1hbmQoY2hhbmdlTGluZUNvbW1lbnQsIDEgLyogQ29tbWVudE9wdGlvbi5Db21tZW50ICovKTtcbi8qKlxuVW5jb21tZW50IHRoZSBjdXJyZW50IHNlbGVjdGlvbiB1c2luZyBsaW5lIGNvbW1lbnRzLlxuKi9cbmNvbnN0IGxpbmVVbmNvbW1lbnQgPSBjb21tYW5kKGNoYW5nZUxpbmVDb21tZW50LCAyIC8qIENvbW1lbnRPcHRpb24uVW5jb21tZW50ICovKTtcbi8qKlxuQ29tbWVudCBvciB1bmNvbW1lbnQgdGhlIGN1cnJlbnQgc2VsZWN0aW9uIHVzaW5nIGJsb2NrIGNvbW1lbnRzLlxuVGhlIGJsb2NrIGNvbW1lbnQgc3ludGF4IGlzIHRha2VuIGZyb20gdGhlXG5bYGNvbW1lbnRUb2tlbnNgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLkNvbW1lbnRUb2tlbnMpIFtsYW5ndWFnZVxuZGF0YV0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5FZGl0b3JTdGF0ZS5sYW5ndWFnZURhdGFBdCkuXG4qL1xuY29uc3QgdG9nZ2xlQmxvY2tDb21tZW50ID0gY29tbWFuZChjaGFuZ2VCbG9ja0NvbW1lbnQsIDAgLyogQ29tbWVudE9wdGlvbi5Ub2dnbGUgKi8pO1xuLyoqXG5Db21tZW50IHRoZSBjdXJyZW50IHNlbGVjdGlvbiB1c2luZyBibG9jayBjb21tZW50cy5cbiovXG5jb25zdCBibG9ja0NvbW1lbnQgPSBjb21tYW5kKGNoYW5nZUJsb2NrQ29tbWVudCwgMSAvKiBDb21tZW50T3B0aW9uLkNvbW1lbnQgKi8pO1xuLyoqXG5VbmNvbW1lbnQgdGhlIGN1cnJlbnQgc2VsZWN0aW9uIHVzaW5nIGJsb2NrIGNvbW1lbnRzLlxuKi9cbmNvbnN0IGJsb2NrVW5jb21tZW50ID0gY29tbWFuZChjaGFuZ2VCbG9ja0NvbW1lbnQsIDIgLyogQ29tbWVudE9wdGlvbi5VbmNvbW1lbnQgKi8pO1xuLyoqXG5Db21tZW50IG9yIHVuY29tbWVudCB0aGUgbGluZXMgYXJvdW5kIHRoZSBjdXJyZW50IHNlbGVjdGlvbiB1c2luZ1xuYmxvY2sgY29tbWVudHMuXG4qL1xuY29uc3QgdG9nZ2xlQmxvY2tDb21tZW50QnlMaW5lID0gY29tbWFuZCgobywgcykgPT4gY2hhbmdlQmxvY2tDb21tZW50KG8sIHMsIHNlbGVjdGVkTGluZVJhbmdlcyhzKSksIDAgLyogQ29tbWVudE9wdGlvbi5Ub2dnbGUgKi8pO1xuZnVuY3Rpb24gZ2V0Q29uZmlnKHN0YXRlLCBwb3MpIHtcbiAgICBsZXQgZGF0YSA9IHN0YXRlLmxhbmd1YWdlRGF0YUF0KFwiY29tbWVudFRva2Vuc1wiLCBwb3MpO1xuICAgIHJldHVybiBkYXRhLmxlbmd0aCA/IGRhdGFbMF0gOiB7fTtcbn1cbmNvbnN0IFNlYXJjaE1hcmdpbiA9IDUwO1xuLyoqXG5EZXRlcm1pbmVzIGlmIHRoZSBnaXZlbiByYW5nZSBpcyBibG9jay1jb21tZW50ZWQgaW4gdGhlIGdpdmVuXG5zdGF0ZS5cbiovXG5mdW5jdGlvbiBmaW5kQmxvY2tDb21tZW50KHN0YXRlLCB7IG9wZW4sIGNsb3NlIH0sIGZyb20sIHRvKSB7XG4gICAgbGV0IHRleHRCZWZvcmUgPSBzdGF0ZS5zbGljZURvYyhmcm9tIC0gU2VhcmNoTWFyZ2luLCBmcm9tKTtcbiAgICBsZXQgdGV4dEFmdGVyID0gc3RhdGUuc2xpY2VEb2ModG8sIHRvICsgU2VhcmNoTWFyZ2luKTtcbiAgICBsZXQgc3BhY2VCZWZvcmUgPSAvXFxzKiQvLmV4ZWModGV4dEJlZm9yZSlbMF0ubGVuZ3RoLCBzcGFjZUFmdGVyID0gL15cXHMqLy5leGVjKHRleHRBZnRlcilbMF0ubGVuZ3RoO1xuICAgIGxldCBiZWZvcmVPZmYgPSB0ZXh0QmVmb3JlLmxlbmd0aCAtIHNwYWNlQmVmb3JlO1xuICAgIGlmICh0ZXh0QmVmb3JlLnNsaWNlKGJlZm9yZU9mZiAtIG9wZW4ubGVuZ3RoLCBiZWZvcmVPZmYpID09IG9wZW4gJiZcbiAgICAgICAgdGV4dEFmdGVyLnNsaWNlKHNwYWNlQWZ0ZXIsIHNwYWNlQWZ0ZXIgKyBjbG9zZS5sZW5ndGgpID09IGNsb3NlKSB7XG4gICAgICAgIHJldHVybiB7IG9wZW46IHsgcG9zOiBmcm9tIC0gc3BhY2VCZWZvcmUsIG1hcmdpbjogc3BhY2VCZWZvcmUgJiYgMSB9LFxuICAgICAgICAgICAgY2xvc2U6IHsgcG9zOiB0byArIHNwYWNlQWZ0ZXIsIG1hcmdpbjogc3BhY2VBZnRlciAmJiAxIH0gfTtcbiAgICB9XG4gICAgbGV0IHN0YXJ0VGV4dCwgZW5kVGV4dDtcbiAgICBpZiAodG8gLSBmcm9tIDw9IDIgKiBTZWFyY2hNYXJnaW4pIHtcbiAgICAgICAgc3RhcnRUZXh0ID0gZW5kVGV4dCA9IHN0YXRlLnNsaWNlRG9jKGZyb20sIHRvKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHN0YXJ0VGV4dCA9IHN0YXRlLnNsaWNlRG9jKGZyb20sIGZyb20gKyBTZWFyY2hNYXJnaW4pO1xuICAgICAgICBlbmRUZXh0ID0gc3RhdGUuc2xpY2VEb2ModG8gLSBTZWFyY2hNYXJnaW4sIHRvKTtcbiAgICB9XG4gICAgbGV0IHN0YXJ0U3BhY2UgPSAvXlxccyovLmV4ZWMoc3RhcnRUZXh0KVswXS5sZW5ndGgsIGVuZFNwYWNlID0gL1xccyokLy5leGVjKGVuZFRleHQpWzBdLmxlbmd0aDtcbiAgICBsZXQgZW5kT2ZmID0gZW5kVGV4dC5sZW5ndGggLSBlbmRTcGFjZSAtIGNsb3NlLmxlbmd0aDtcbiAgICBpZiAoc3RhcnRUZXh0LnNsaWNlKHN0YXJ0U3BhY2UsIHN0YXJ0U3BhY2UgKyBvcGVuLmxlbmd0aCkgPT0gb3BlbiAmJlxuICAgICAgICBlbmRUZXh0LnNsaWNlKGVuZE9mZiwgZW5kT2ZmICsgY2xvc2UubGVuZ3RoKSA9PSBjbG9zZSkge1xuICAgICAgICByZXR1cm4geyBvcGVuOiB7IHBvczogZnJvbSArIHN0YXJ0U3BhY2UgKyBvcGVuLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBtYXJnaW46IC9cXHMvLnRlc3Qoc3RhcnRUZXh0LmNoYXJBdChzdGFydFNwYWNlICsgb3Blbi5sZW5ndGgpKSA/IDEgOiAwIH0sXG4gICAgICAgICAgICBjbG9zZTogeyBwb3M6IHRvIC0gZW5kU3BhY2UgLSBjbG9zZS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAvXFxzLy50ZXN0KGVuZFRleHQuY2hhckF0KGVuZE9mZiAtIDEpKSA/IDEgOiAwIH0gfTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBzZWxlY3RlZExpbmVSYW5nZXMoc3RhdGUpIHtcbiAgICBsZXQgcmFuZ2VzID0gW107XG4gICAgZm9yIChsZXQgciBvZiBzdGF0ZS5zZWxlY3Rpb24ucmFuZ2VzKSB7XG4gICAgICAgIGxldCBmcm9tTGluZSA9IHN0YXRlLmRvYy5saW5lQXQoci5mcm9tKTtcbiAgICAgICAgbGV0IHRvTGluZSA9IHIudG8gPD0gZnJvbUxpbmUudG8gPyBmcm9tTGluZSA6IHN0YXRlLmRvYy5saW5lQXQoci50byk7XG4gICAgICAgIGxldCBsYXN0ID0gcmFuZ2VzLmxlbmd0aCAtIDE7XG4gICAgICAgIGlmIChsYXN0ID49IDAgJiYgcmFuZ2VzW2xhc3RdLnRvID4gZnJvbUxpbmUuZnJvbSlcbiAgICAgICAgICAgIHJhbmdlc1tsYXN0XS50byA9IHRvTGluZS50bztcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmFuZ2VzLnB1c2goeyBmcm9tOiBmcm9tTGluZS5mcm9tICsgL15cXHMqLy5leGVjKGZyb21MaW5lLnRleHQpWzBdLmxlbmd0aCwgdG86IHRvTGluZS50byB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJhbmdlcztcbn1cbi8vIFBlcmZvcm1zIHRvZ2dsZSwgY29tbWVudCBhbmQgdW5jb21tZW50IG9mIGJsb2NrIGNvbW1lbnRzIGluXG4vLyBsYW5ndWFnZXMgdGhhdCBzdXBwb3J0IHRoZW0uXG5mdW5jdGlvbiBjaGFuZ2VCbG9ja0NvbW1lbnQob3B0aW9uLCBzdGF0ZSwgcmFuZ2VzID0gc3RhdGUuc2VsZWN0aW9uLnJhbmdlcykge1xuICAgIGxldCB0b2tlbnMgPSByYW5nZXMubWFwKHIgPT4gZ2V0Q29uZmlnKHN0YXRlLCByLmZyb20pLmJsb2NrKTtcbiAgICBpZiAoIXRva2Vucy5ldmVyeShjID0+IGMpKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICBsZXQgY29tbWVudHMgPSByYW5nZXMubWFwKChyLCBpKSA9PiBmaW5kQmxvY2tDb21tZW50KHN0YXRlLCB0b2tlbnNbaV0sIHIuZnJvbSwgci50bykpO1xuICAgIGlmIChvcHRpb24gIT0gMiAvKiBDb21tZW50T3B0aW9uLlVuY29tbWVudCAqLyAmJiAhY29tbWVudHMuZXZlcnkoYyA9PiBjKSkge1xuICAgICAgICByZXR1cm4geyBjaGFuZ2VzOiBzdGF0ZS5jaGFuZ2VzKHJhbmdlcy5tYXAoKHJhbmdlLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbW1lbnRzW2ldKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICAgICAgcmV0dXJuIFt7IGZyb206IHJhbmdlLmZyb20sIGluc2VydDogdG9rZW5zW2ldLm9wZW4gKyBcIiBcIiB9LCB7IGZyb206IHJhbmdlLnRvLCBpbnNlcnQ6IFwiIFwiICsgdG9rZW5zW2ldLmNsb3NlIH1dO1xuICAgICAgICAgICAgfSkpIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKG9wdGlvbiAhPSAxIC8qIENvbW1lbnRPcHRpb24uQ29tbWVudCAqLyAmJiBjb21tZW50cy5zb21lKGMgPT4gYykpIHtcbiAgICAgICAgbGV0IGNoYW5nZXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGNvbW1lbnQ7IGkgPCBjb21tZW50cy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGlmIChjb21tZW50ID0gY29tbWVudHNbaV0pIHtcbiAgICAgICAgICAgICAgICBsZXQgdG9rZW4gPSB0b2tlbnNbaV0sIHsgb3BlbiwgY2xvc2UgfSA9IGNvbW1lbnQ7XG4gICAgICAgICAgICAgICAgY2hhbmdlcy5wdXNoKHsgZnJvbTogb3Blbi5wb3MgLSB0b2tlbi5vcGVuLmxlbmd0aCwgdG86IG9wZW4ucG9zICsgb3Blbi5tYXJnaW4gfSwgeyBmcm9tOiBjbG9zZS5wb3MgLSBjbG9zZS5tYXJnaW4sIHRvOiBjbG9zZS5wb3MgKyB0b2tlbi5jbG9zZS5sZW5ndGggfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGNoYW5nZXMgfTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG4vLyBQZXJmb3JtcyB0b2dnbGUsIGNvbW1lbnQgYW5kIHVuY29tbWVudCBvZiBsaW5lIGNvbW1lbnRzLlxuZnVuY3Rpb24gY2hhbmdlTGluZUNvbW1lbnQob3B0aW9uLCBzdGF0ZSwgcmFuZ2VzID0gc3RhdGUuc2VsZWN0aW9uLnJhbmdlcykge1xuICAgIGxldCBsaW5lcyA9IFtdO1xuICAgIGxldCBwcmV2TGluZSA9IC0xO1xuICAgIGZvciAobGV0IHsgZnJvbSwgdG8gfSBvZiByYW5nZXMpIHtcbiAgICAgICAgbGV0IHN0YXJ0SSA9IGxpbmVzLmxlbmd0aCwgbWluSW5kZW50ID0gMWU5O1xuICAgICAgICBsZXQgdG9rZW4gPSBnZXRDb25maWcoc3RhdGUsIGZyb20pLmxpbmU7XG4gICAgICAgIGlmICghdG9rZW4pXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgZm9yIChsZXQgcG9zID0gZnJvbTsgcG9zIDw9IHRvOykge1xuICAgICAgICAgICAgbGV0IGxpbmUgPSBzdGF0ZS5kb2MubGluZUF0KHBvcyk7XG4gICAgICAgICAgICBpZiAobGluZS5mcm9tID4gcHJldkxpbmUgJiYgKGZyb20gPT0gdG8gfHwgdG8gPiBsaW5lLmZyb20pKSB7XG4gICAgICAgICAgICAgICAgcHJldkxpbmUgPSBsaW5lLmZyb207XG4gICAgICAgICAgICAgICAgbGV0IGluZGVudCA9IC9eXFxzKi8uZXhlYyhsaW5lLnRleHQpWzBdLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBsZXQgZW1wdHkgPSBpbmRlbnQgPT0gbGluZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgbGV0IGNvbW1lbnQgPSBsaW5lLnRleHQuc2xpY2UoaW5kZW50LCBpbmRlbnQgKyB0b2tlbi5sZW5ndGgpID09IHRva2VuID8gaW5kZW50IDogLTE7XG4gICAgICAgICAgICAgICAgaWYgKGluZGVudCA8IGxpbmUudGV4dC5sZW5ndGggJiYgaW5kZW50IDwgbWluSW5kZW50KVxuICAgICAgICAgICAgICAgICAgICBtaW5JbmRlbnQgPSBpbmRlbnQ7XG4gICAgICAgICAgICAgICAgbGluZXMucHVzaCh7IGxpbmUsIGNvbW1lbnQsIHRva2VuLCBpbmRlbnQsIGVtcHR5LCBzaW5nbGU6IGZhbHNlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcG9zID0gbGluZS50byArIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1pbkluZGVudCA8IDFlOSlcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBzdGFydEk7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICBpZiAobGluZXNbaV0uaW5kZW50IDwgbGluZXNbaV0ubGluZS50ZXh0Lmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgbGluZXNbaV0uaW5kZW50ID0gbWluSW5kZW50O1xuICAgICAgICBpZiAobGluZXMubGVuZ3RoID09IHN0YXJ0SSArIDEpXG4gICAgICAgICAgICBsaW5lc1tzdGFydEldLnNpbmdsZSA9IHRydWU7XG4gICAgfVxuICAgIGlmIChvcHRpb24gIT0gMiAvKiBDb21tZW50T3B0aW9uLlVuY29tbWVudCAqLyAmJiBsaW5lcy5zb21lKGwgPT4gbC5jb21tZW50IDwgMCAmJiAoIWwuZW1wdHkgfHwgbC5zaW5nbGUpKSkge1xuICAgICAgICBsZXQgY2hhbmdlcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCB7IGxpbmUsIHRva2VuLCBpbmRlbnQsIGVtcHR5LCBzaW5nbGUgfSBvZiBsaW5lcylcbiAgICAgICAgICAgIGlmIChzaW5nbGUgfHwgIWVtcHR5KVxuICAgICAgICAgICAgICAgIGNoYW5nZXMucHVzaCh7IGZyb206IGxpbmUuZnJvbSArIGluZGVudCwgaW5zZXJ0OiB0b2tlbiArIFwiIFwiIH0pO1xuICAgICAgICBsZXQgY2hhbmdlU2V0ID0gc3RhdGUuY2hhbmdlcyhjaGFuZ2VzKTtcbiAgICAgICAgcmV0dXJuIHsgY2hhbmdlczogY2hhbmdlU2V0LCBzZWxlY3Rpb246IHN0YXRlLnNlbGVjdGlvbi5tYXAoY2hhbmdlU2V0LCAxKSB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChvcHRpb24gIT0gMSAvKiBDb21tZW50T3B0aW9uLkNvbW1lbnQgKi8gJiYgbGluZXMuc29tZShsID0+IGwuY29tbWVudCA+PSAwKSkge1xuICAgICAgICBsZXQgY2hhbmdlcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCB7IGxpbmUsIGNvbW1lbnQsIHRva2VuIH0gb2YgbGluZXMpXG4gICAgICAgICAgICBpZiAoY29tbWVudCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgbGV0IGZyb20gPSBsaW5lLmZyb20gKyBjb21tZW50LCB0byA9IGZyb20gKyB0b2tlbi5sZW5ndGg7XG4gICAgICAgICAgICAgICAgaWYgKGxpbmUudGV4dFt0byAtIGxpbmUuZnJvbV0gPT0gXCIgXCIpXG4gICAgICAgICAgICAgICAgICAgIHRvKys7XG4gICAgICAgICAgICAgICAgY2hhbmdlcy5wdXNoKHsgZnJvbSwgdG8gfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGNoYW5nZXMgfTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmNvbnN0IGZyb21IaXN0b3J5ID0gc3RhdGUuQW5ub3RhdGlvbi5kZWZpbmUoKTtcbi8qKlxuVHJhbnNhY3Rpb24gYW5ub3RhdGlvbiB0aGF0IHdpbGwgcHJldmVudCB0aGF0IHRyYW5zYWN0aW9uIGZyb21cbmJlaW5nIGNvbWJpbmVkIHdpdGggb3RoZXIgdHJhbnNhY3Rpb25zIGluIHRoZSB1bmRvIGhpc3RvcnkuIEdpdmVuXG5gXCJiZWZvcmVcImAsIGl0J2xsIHByZXZlbnQgbWVyZ2luZyB3aXRoIHByZXZpb3VzIHRyYW5zYWN0aW9ucy4gV2l0aFxuYFwiYWZ0ZXJcImAsIHN1YnNlcXVlbnQgdHJhbnNhY3Rpb25zIHdvbid0IGJlIGNvbWJpbmVkIHdpdGggdGhpc1xub25lLiBXaXRoIGBcImZ1bGxcImAsIHRoZSB0cmFuc2FjdGlvbiBpcyBpc29sYXRlZCBvbiBib3RoIHNpZGVzLlxuKi9cbmNvbnN0IGlzb2xhdGVIaXN0b3J5ID0gc3RhdGUuQW5ub3RhdGlvbi5kZWZpbmUoKTtcbi8qKlxuVGhpcyBmYWNldCBwcm92aWRlcyBhIHdheSB0byByZWdpc3RlciBmdW5jdGlvbnMgdGhhdCwgZ2l2ZW4gYVxudHJhbnNhY3Rpb24sIHByb3ZpZGUgYSBzZXQgb2YgZWZmZWN0cyB0aGF0IHRoZSBoaXN0b3J5IHNob3VsZFxuc3RvcmUgd2hlbiBpbnZlcnRpbmcgdGhlIHRyYW5zYWN0aW9uLiBUaGlzIGNhbiBiZSB1c2VkIHRvXG5pbnRlZ3JhdGUgc29tZSBraW5kcyBvZiBlZmZlY3RzIGluIHRoZSBoaXN0b3J5LCBzbyB0aGF0IHRoZXkgY2FuXG5iZSB1bmRvbmUgKGFuZCByZWRvbmUgYWdhaW4pLlxuKi9cbmNvbnN0IGludmVydGVkRWZmZWN0cyA9IHN0YXRlLkZhY2V0LmRlZmluZSgpO1xuY29uc3QgaGlzdG9yeUNvbmZpZyA9IHN0YXRlLkZhY2V0LmRlZmluZSh7XG4gICAgY29tYmluZShjb25maWdzKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZS5jb21iaW5lQ29uZmlnKGNvbmZpZ3MsIHtcbiAgICAgICAgICAgIG1pbkRlcHRoOiAxMDAsXG4gICAgICAgICAgICBuZXdHcm91cERlbGF5OiA1MDAsXG4gICAgICAgICAgICBqb2luVG9FdmVudDogKF90LCBpc0FkamFjZW50KSA9PiBpc0FkamFjZW50LFxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBtaW5EZXB0aDogTWF0aC5tYXgsXG4gICAgICAgICAgICBuZXdHcm91cERlbGF5OiBNYXRoLm1pbixcbiAgICAgICAgICAgIGpvaW5Ub0V2ZW50OiAoYSwgYikgPT4gKHRyLCBhZGopID0+IGEodHIsIGFkaikgfHwgYih0ciwgYWRqKVxuICAgICAgICB9KTtcbiAgICB9XG59KTtcbmNvbnN0IGhpc3RvcnlGaWVsZF8gPSBzdGF0ZS5TdGF0ZUZpZWxkLmRlZmluZSh7XG4gICAgY3JlYXRlKCkge1xuICAgICAgICByZXR1cm4gSGlzdG9yeVN0YXRlLmVtcHR5O1xuICAgIH0sXG4gICAgdXBkYXRlKHN0YXRlJDEsIHRyKSB7XG4gICAgICAgIGxldCBjb25maWcgPSB0ci5zdGF0ZS5mYWNldChoaXN0b3J5Q29uZmlnKTtcbiAgICAgICAgbGV0IGZyb21IaXN0ID0gdHIuYW5ub3RhdGlvbihmcm9tSGlzdG9yeSk7XG4gICAgICAgIGlmIChmcm9tSGlzdCkge1xuICAgICAgICAgICAgbGV0IGl0ZW0gPSBIaXN0RXZlbnQuZnJvbVRyYW5zYWN0aW9uKHRyLCBmcm9tSGlzdC5zZWxlY3Rpb24pLCBmcm9tID0gZnJvbUhpc3Quc2lkZTtcbiAgICAgICAgICAgIGxldCBvdGhlciA9IGZyb20gPT0gMCAvKiBCcmFuY2hOYW1lLkRvbmUgKi8gPyBzdGF0ZSQxLnVuZG9uZSA6IHN0YXRlJDEuZG9uZTtcbiAgICAgICAgICAgIGlmIChpdGVtKVxuICAgICAgICAgICAgICAgIG90aGVyID0gdXBkYXRlQnJhbmNoKG90aGVyLCBvdGhlci5sZW5ndGgsIGNvbmZpZy5taW5EZXB0aCwgaXRlbSk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgb3RoZXIgPSBhZGRTZWxlY3Rpb24ob3RoZXIsIHRyLnN0YXJ0U3RhdGUuc2VsZWN0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgSGlzdG9yeVN0YXRlKGZyb20gPT0gMCAvKiBCcmFuY2hOYW1lLkRvbmUgKi8gPyBmcm9tSGlzdC5yZXN0IDogb3RoZXIsIGZyb20gPT0gMCAvKiBCcmFuY2hOYW1lLkRvbmUgKi8gPyBvdGhlciA6IGZyb21IaXN0LnJlc3QpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBpc29sYXRlID0gdHIuYW5ub3RhdGlvbihpc29sYXRlSGlzdG9yeSk7XG4gICAgICAgIGlmIChpc29sYXRlID09IFwiZnVsbFwiIHx8IGlzb2xhdGUgPT0gXCJiZWZvcmVcIilcbiAgICAgICAgICAgIHN0YXRlJDEgPSBzdGF0ZSQxLmlzb2xhdGUoKTtcbiAgICAgICAgaWYgKHRyLmFubm90YXRpb24oc3RhdGUuVHJhbnNhY3Rpb24uYWRkVG9IaXN0b3J5KSA9PT0gZmFsc2UpXG4gICAgICAgICAgICByZXR1cm4gIXRyLmNoYW5nZXMuZW1wdHkgPyBzdGF0ZSQxLmFkZE1hcHBpbmcodHIuY2hhbmdlcy5kZXNjKSA6IHN0YXRlJDE7XG4gICAgICAgIGxldCBldmVudCA9IEhpc3RFdmVudC5mcm9tVHJhbnNhY3Rpb24odHIpO1xuICAgICAgICBsZXQgdGltZSA9IHRyLmFubm90YXRpb24oc3RhdGUuVHJhbnNhY3Rpb24udGltZSksIHVzZXJFdmVudCA9IHRyLmFubm90YXRpb24oc3RhdGUuVHJhbnNhY3Rpb24udXNlckV2ZW50KTtcbiAgICAgICAgaWYgKGV2ZW50KVxuICAgICAgICAgICAgc3RhdGUkMSA9IHN0YXRlJDEuYWRkQ2hhbmdlcyhldmVudCwgdGltZSwgdXNlckV2ZW50LCBjb25maWcsIHRyKTtcbiAgICAgICAgZWxzZSBpZiAodHIuc2VsZWN0aW9uKVxuICAgICAgICAgICAgc3RhdGUkMSA9IHN0YXRlJDEuYWRkU2VsZWN0aW9uKHRyLnN0YXJ0U3RhdGUuc2VsZWN0aW9uLCB0aW1lLCB1c2VyRXZlbnQsIGNvbmZpZy5uZXdHcm91cERlbGF5KTtcbiAgICAgICAgaWYgKGlzb2xhdGUgPT0gXCJmdWxsXCIgfHwgaXNvbGF0ZSA9PSBcImFmdGVyXCIpXG4gICAgICAgICAgICBzdGF0ZSQxID0gc3RhdGUkMS5pc29sYXRlKCk7XG4gICAgICAgIHJldHVybiBzdGF0ZSQxO1xuICAgIH0sXG4gICAgdG9KU09OKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB7IGRvbmU6IHZhbHVlLmRvbmUubWFwKGUgPT4gZS50b0pTT04oKSksIHVuZG9uZTogdmFsdWUudW5kb25lLm1hcChlID0+IGUudG9KU09OKCkpIH07XG4gICAgfSxcbiAgICBmcm9tSlNPTihqc29uKSB7XG4gICAgICAgIHJldHVybiBuZXcgSGlzdG9yeVN0YXRlKGpzb24uZG9uZS5tYXAoSGlzdEV2ZW50LmZyb21KU09OKSwganNvbi51bmRvbmUubWFwKEhpc3RFdmVudC5mcm9tSlNPTikpO1xuICAgIH1cbn0pO1xuLyoqXG5DcmVhdGUgYSBoaXN0b3J5IGV4dGVuc2lvbiB3aXRoIHRoZSBnaXZlbiBjb25maWd1cmF0aW9uLlxuKi9cbmZ1bmN0aW9uIGhpc3RvcnkoY29uZmlnID0ge30pIHtcbiAgICByZXR1cm4gW1xuICAgICAgICBoaXN0b3J5RmllbGRfLFxuICAgICAgICBoaXN0b3J5Q29uZmlnLm9mKGNvbmZpZyksXG4gICAgICAgIHZpZXcuRWRpdG9yVmlldy5kb21FdmVudEhhbmRsZXJzKHtcbiAgICAgICAgICAgIGJlZm9yZWlucHV0KGUsIHZpZXcpIHtcbiAgICAgICAgICAgICAgICBsZXQgY29tbWFuZCA9IGUuaW5wdXRUeXBlID09IFwiaGlzdG9yeVVuZG9cIiA/IHVuZG8gOiBlLmlucHV0VHlwZSA9PSBcImhpc3RvcnlSZWRvXCIgPyByZWRvIDogbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoIWNvbW1hbmQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmQodmlldyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgXTtcbn1cbi8qKlxuVGhlIHN0YXRlIGZpZWxkIHVzZWQgdG8gc3RvcmUgdGhlIGhpc3RvcnkgZGF0YS4gU2hvdWxkIHByb2JhYmx5XG5vbmx5IGJlIHVzZWQgd2hlbiB5b3Ugd2FudCB0b1xuW3NlcmlhbGl6ZV0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5FZGl0b3JTdGF0ZS50b0pTT04pIG9yXG5bZGVzZXJpYWxpemVdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuRWRpdG9yU3RhdGVeZnJvbUpTT04pIHN0YXRlIG9iamVjdHMgaW4gYSB3YXlcbnRoYXQgcHJlc2VydmVzIGhpc3RvcnkuXG4qL1xuY29uc3QgaGlzdG9yeUZpZWxkID0gaGlzdG9yeUZpZWxkXztcbmZ1bmN0aW9uIGNtZChzaWRlLCBzZWxlY3Rpb24pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHsgc3RhdGUsIGRpc3BhdGNoIH0pIHtcbiAgICAgICAgaWYgKCFzZWxlY3Rpb24gJiYgc3RhdGUucmVhZE9ubHkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGxldCBoaXN0b3J5U3RhdGUgPSBzdGF0ZS5maWVsZChoaXN0b3J5RmllbGRfLCBmYWxzZSk7XG4gICAgICAgIGlmICghaGlzdG9yeVN0YXRlKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBsZXQgdHIgPSBoaXN0b3J5U3RhdGUucG9wKHNpZGUsIHN0YXRlLCBzZWxlY3Rpb24pO1xuICAgICAgICBpZiAoIXRyKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBkaXNwYXRjaCh0cik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG59XG4vKipcblVuZG8gYSBzaW5nbGUgZ3JvdXAgb2YgaGlzdG9yeSBldmVudHMuIFJldHVybnMgZmFsc2UgaWYgbm8gZ3JvdXBcbndhcyBhdmFpbGFibGUuXG4qL1xuY29uc3QgdW5kbyA9IGNtZCgwIC8qIEJyYW5jaE5hbWUuRG9uZSAqLywgZmFsc2UpO1xuLyoqXG5SZWRvIGEgZ3JvdXAgb2YgaGlzdG9yeSBldmVudHMuIFJldHVybnMgZmFsc2UgaWYgbm8gZ3JvdXAgd2FzXG5hdmFpbGFibGUuXG4qL1xuY29uc3QgcmVkbyA9IGNtZCgxIC8qIEJyYW5jaE5hbWUuVW5kb25lICovLCBmYWxzZSk7XG4vKipcblVuZG8gYSBjaGFuZ2Ugb3Igc2VsZWN0aW9uIGNoYW5nZS5cbiovXG5jb25zdCB1bmRvU2VsZWN0aW9uID0gY21kKDAgLyogQnJhbmNoTmFtZS5Eb25lICovLCB0cnVlKTtcbi8qKlxuUmVkbyBhIGNoYW5nZSBvciBzZWxlY3Rpb24gY2hhbmdlLlxuKi9cbmNvbnN0IHJlZG9TZWxlY3Rpb24gPSBjbWQoMSAvKiBCcmFuY2hOYW1lLlVuZG9uZSAqLywgdHJ1ZSk7XG5mdW5jdGlvbiBkZXB0aChzaWRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICBsZXQgaGlzdFN0YXRlID0gc3RhdGUuZmllbGQoaGlzdG9yeUZpZWxkXywgZmFsc2UpO1xuICAgICAgICBpZiAoIWhpc3RTdGF0ZSlcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICBsZXQgYnJhbmNoID0gc2lkZSA9PSAwIC8qIEJyYW5jaE5hbWUuRG9uZSAqLyA/IGhpc3RTdGF0ZS5kb25lIDogaGlzdFN0YXRlLnVuZG9uZTtcbiAgICAgICAgcmV0dXJuIGJyYW5jaC5sZW5ndGggLSAoYnJhbmNoLmxlbmd0aCAmJiAhYnJhbmNoWzBdLmNoYW5nZXMgPyAxIDogMCk7XG4gICAgfTtcbn1cbi8qKlxuVGhlIGFtb3VudCBvZiB1bmRvYWJsZSBjaGFuZ2UgZXZlbnRzIGF2YWlsYWJsZSBpbiBhIGdpdmVuIHN0YXRlLlxuKi9cbmNvbnN0IHVuZG9EZXB0aCA9IGRlcHRoKDAgLyogQnJhbmNoTmFtZS5Eb25lICovKTtcbi8qKlxuVGhlIGFtb3VudCBvZiByZWRvYWJsZSBjaGFuZ2UgZXZlbnRzIGF2YWlsYWJsZSBpbiBhIGdpdmVuIHN0YXRlLlxuKi9cbmNvbnN0IHJlZG9EZXB0aCA9IGRlcHRoKDEgLyogQnJhbmNoTmFtZS5VbmRvbmUgKi8pO1xuLy8gSGlzdG9yeSBldmVudHMgc3RvcmUgZ3JvdXBzIG9mIGNoYW5nZXMgb3IgZWZmZWN0cyB0aGF0IG5lZWQgdG8gYmVcbi8vIHVuZG9uZS9yZWRvbmUgdG9nZXRoZXIuXG5jbGFzcyBIaXN0RXZlbnQge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8vIFRoZSBjaGFuZ2VzIGluIHRoaXMgZXZlbnQuIE5vcm1hbCBldmVudHMgaG9sZCBhdCBsZWFzdCBvbmVcbiAgICAvLyBjaGFuZ2Ugb3IgZWZmZWN0LiBCdXQgaXQgbWF5IGJlIG5lY2Vzc2FyeSB0byBzdG9yZSBzZWxlY3Rpb25cbiAgICAvLyBldmVudHMgYmVmb3JlIHRoZSBmaXJzdCBjaGFuZ2UsIGluIHdoaWNoIGNhc2UgYSBzcGVjaWFsIHR5cGUgb2ZcbiAgICAvLyBpbnN0YW5jZSBpcyBjcmVhdGVkIHdoaWNoIGRvZXNuJ3QgaG9sZCBhbnkgY2hhbmdlcywgd2l0aFxuICAgIC8vIGNoYW5nZXMgPT0gc3RhcnRTZWxlY3Rpb24gPT0gdW5kZWZpbmVkXG4gICAgY2hhbmdlcywgXG4gICAgLy8gVGhlIGVmZmVjdHMgYXNzb2NpYXRlZCB3aXRoIHRoaXMgZXZlbnRcbiAgICBlZmZlY3RzLCBcbiAgICAvLyBBY2N1bXVsYXRlZCBtYXBwaW5nIChmcm9tIGFkZFRvSGlzdG9yeT09ZmFsc2UpIHRoYXQgc2hvdWxkIGJlXG4gICAgLy8gYXBwbGllZCB0byBldmVudHMgYmVsb3cgdGhpcyBvbmUuXG4gICAgbWFwcGVkLCBcbiAgICAvLyBUaGUgc2VsZWN0aW9uIGJlZm9yZSB0aGlzIGV2ZW50XG4gICAgc3RhcnRTZWxlY3Rpb24sIFxuICAgIC8vIFN0b3JlcyBzZWxlY3Rpb24gY2hhbmdlcyBhZnRlciB0aGlzIGV2ZW50LCB0byBiZSB1c2VkIGZvclxuICAgIC8vIHNlbGVjdGlvbiB1bmRvL3JlZG8uXG4gICAgc2VsZWN0aW9uc0FmdGVyKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlcyA9IGNoYW5nZXM7XG4gICAgICAgIHRoaXMuZWZmZWN0cyA9IGVmZmVjdHM7XG4gICAgICAgIHRoaXMubWFwcGVkID0gbWFwcGVkO1xuICAgICAgICB0aGlzLnN0YXJ0U2VsZWN0aW9uID0gc3RhcnRTZWxlY3Rpb247XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uc0FmdGVyID0gc2VsZWN0aW9uc0FmdGVyO1xuICAgIH1cbiAgICBzZXRTZWxBZnRlcihhZnRlcikge1xuICAgICAgICByZXR1cm4gbmV3IEhpc3RFdmVudCh0aGlzLmNoYW5nZXMsIHRoaXMuZWZmZWN0cywgdGhpcy5tYXBwZWQsIHRoaXMuc3RhcnRTZWxlY3Rpb24sIGFmdGVyKTtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNoYW5nZXM6IChfYSA9IHRoaXMuY2hhbmdlcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRvSlNPTigpLFxuICAgICAgICAgICAgbWFwcGVkOiAoX2IgPSB0aGlzLm1hcHBlZCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnRvSlNPTigpLFxuICAgICAgICAgICAgc3RhcnRTZWxlY3Rpb246IChfYyA9IHRoaXMuc3RhcnRTZWxlY3Rpb24pID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy50b0pTT04oKSxcbiAgICAgICAgICAgIHNlbGVjdGlvbnNBZnRlcjogdGhpcy5zZWxlY3Rpb25zQWZ0ZXIubWFwKHMgPT4gcy50b0pTT04oKSlcbiAgICAgICAgfTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21KU09OKGpzb24pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBIaXN0RXZlbnQoanNvbi5jaGFuZ2VzICYmIHN0YXRlLkNoYW5nZVNldC5mcm9tSlNPTihqc29uLmNoYW5nZXMpLCBbXSwganNvbi5tYXBwZWQgJiYgc3RhdGUuQ2hhbmdlRGVzYy5mcm9tSlNPTihqc29uLm1hcHBlZCksIGpzb24uc3RhcnRTZWxlY3Rpb24gJiYgc3RhdGUuRWRpdG9yU2VsZWN0aW9uLmZyb21KU09OKGpzb24uc3RhcnRTZWxlY3Rpb24pLCBqc29uLnNlbGVjdGlvbnNBZnRlci5tYXAoc3RhdGUuRWRpdG9yU2VsZWN0aW9uLmZyb21KU09OKSk7XG4gICAgfVxuICAgIC8vIFRoaXMgZG9lcyBub3QgY2hlY2sgYGFkZFRvSGlzdG9yeWAgYW5kIHN1Y2gsIGl0IGFzc3VtZXMgdGhlXG4gICAgLy8gdHJhbnNhY3Rpb24gbmVlZHMgdG8gYmUgY29udmVydGVkIHRvIGFuIGl0ZW0uIFJldHVybnMgbnVsbCB3aGVuXG4gICAgLy8gdGhlcmUgYXJlIG5vIGNoYW5nZXMgb3IgZWZmZWN0cyBpbiB0aGUgdHJhbnNhY3Rpb24uXG4gICAgc3RhdGljIGZyb21UcmFuc2FjdGlvbih0ciwgc2VsZWN0aW9uKSB7XG4gICAgICAgIGxldCBlZmZlY3RzID0gbm9uZTtcbiAgICAgICAgZm9yIChsZXQgaW52ZXJ0IG9mIHRyLnN0YXJ0U3RhdGUuZmFjZXQoaW52ZXJ0ZWRFZmZlY3RzKSkge1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGludmVydCh0cik7XG4gICAgICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aClcbiAgICAgICAgICAgICAgICBlZmZlY3RzID0gZWZmZWN0cy5jb25jYXQocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWVmZmVjdHMubGVuZ3RoICYmIHRyLmNoYW5nZXMuZW1wdHkpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIG5ldyBIaXN0RXZlbnQodHIuY2hhbmdlcy5pbnZlcnQodHIuc3RhcnRTdGF0ZS5kb2MpLCBlZmZlY3RzLCB1bmRlZmluZWQsIHNlbGVjdGlvbiB8fCB0ci5zdGFydFN0YXRlLnNlbGVjdGlvbiwgbm9uZSk7XG4gICAgfVxuICAgIHN0YXRpYyBzZWxlY3Rpb24oc2VsZWN0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IEhpc3RFdmVudCh1bmRlZmluZWQsIG5vbmUsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBzZWxlY3Rpb25zKTtcbiAgICB9XG59XG5mdW5jdGlvbiB1cGRhdGVCcmFuY2goYnJhbmNoLCB0bywgbWF4TGVuLCBuZXdFdmVudCkge1xuICAgIGxldCBzdGFydCA9IHRvICsgMSA+IG1heExlbiArIDIwID8gdG8gLSBtYXhMZW4gLSAxIDogMDtcbiAgICBsZXQgbmV3QnJhbmNoID0gYnJhbmNoLnNsaWNlKHN0YXJ0LCB0byk7XG4gICAgbmV3QnJhbmNoLnB1c2gobmV3RXZlbnQpO1xuICAgIHJldHVybiBuZXdCcmFuY2g7XG59XG5mdW5jdGlvbiBpc0FkamFjZW50KGEsIGIpIHtcbiAgICBsZXQgcmFuZ2VzID0gW10sIGlzQWRqYWNlbnQgPSBmYWxzZTtcbiAgICBhLml0ZXJDaGFuZ2VkUmFuZ2VzKChmLCB0KSA9PiByYW5nZXMucHVzaChmLCB0KSk7XG4gICAgYi5pdGVyQ2hhbmdlZFJhbmdlcygoX2YsIF90LCBmLCB0KSA9PiB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmFuZ2VzLmxlbmd0aDspIHtcbiAgICAgICAgICAgIGxldCBmcm9tID0gcmFuZ2VzW2krK10sIHRvID0gcmFuZ2VzW2krK107XG4gICAgICAgICAgICBpZiAodCA+PSBmcm9tICYmIGYgPD0gdG8pXG4gICAgICAgICAgICAgICAgaXNBZGphY2VudCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gaXNBZGphY2VudDtcbn1cbmZ1bmN0aW9uIGVxU2VsZWN0aW9uU2hhcGUoYSwgYikge1xuICAgIHJldHVybiBhLnJhbmdlcy5sZW5ndGggPT0gYi5yYW5nZXMubGVuZ3RoICYmXG4gICAgICAgIGEucmFuZ2VzLmZpbHRlcigociwgaSkgPT4gci5lbXB0eSAhPSBiLnJhbmdlc1tpXS5lbXB0eSkubGVuZ3RoID09PSAwO1xufVxuZnVuY3Rpb24gY29uYyhhLCBiKSB7XG4gICAgcmV0dXJuICFhLmxlbmd0aCA/IGIgOiAhYi5sZW5ndGggPyBhIDogYS5jb25jYXQoYik7XG59XG5jb25zdCBub25lID0gW107XG5jb25zdCBNYXhTZWxlY3Rpb25zUGVyRXZlbnQgPSAyMDA7XG5mdW5jdGlvbiBhZGRTZWxlY3Rpb24oYnJhbmNoLCBzZWxlY3Rpb24pIHtcbiAgICBpZiAoIWJyYW5jaC5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtIaXN0RXZlbnQuc2VsZWN0aW9uKFtzZWxlY3Rpb25dKV07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsZXQgbGFzdEV2ZW50ID0gYnJhbmNoW2JyYW5jaC5sZW5ndGggLSAxXTtcbiAgICAgICAgbGV0IHNlbHMgPSBsYXN0RXZlbnQuc2VsZWN0aW9uc0FmdGVyLnNsaWNlKE1hdGgubWF4KDAsIGxhc3RFdmVudC5zZWxlY3Rpb25zQWZ0ZXIubGVuZ3RoIC0gTWF4U2VsZWN0aW9uc1BlckV2ZW50KSk7XG4gICAgICAgIGlmIChzZWxzLmxlbmd0aCAmJiBzZWxzW3NlbHMubGVuZ3RoIC0gMV0uZXEoc2VsZWN0aW9uKSlcbiAgICAgICAgICAgIHJldHVybiBicmFuY2g7XG4gICAgICAgIHNlbHMucHVzaChzZWxlY3Rpb24pO1xuICAgICAgICByZXR1cm4gdXBkYXRlQnJhbmNoKGJyYW5jaCwgYnJhbmNoLmxlbmd0aCAtIDEsIDFlOSwgbGFzdEV2ZW50LnNldFNlbEFmdGVyKHNlbHMpKTtcbiAgICB9XG59XG4vLyBBc3N1bWVzIHRoZSB0b3AgaXRlbSBoYXMgb25lIG9yIG1vcmUgc2VsZWN0aW9uQWZ0ZXIgdmFsdWVzXG5mdW5jdGlvbiBwb3BTZWxlY3Rpb24oYnJhbmNoKSB7XG4gICAgbGV0IGxhc3QgPSBicmFuY2hbYnJhbmNoLmxlbmd0aCAtIDFdO1xuICAgIGxldCBuZXdCcmFuY2ggPSBicmFuY2guc2xpY2UoKTtcbiAgICBuZXdCcmFuY2hbYnJhbmNoLmxlbmd0aCAtIDFdID0gbGFzdC5zZXRTZWxBZnRlcihsYXN0LnNlbGVjdGlvbnNBZnRlci5zbGljZSgwLCBsYXN0LnNlbGVjdGlvbnNBZnRlci5sZW5ndGggLSAxKSk7XG4gICAgcmV0dXJuIG5ld0JyYW5jaDtcbn1cbi8vIEFkZCBhIG1hcHBpbmcgdG8gdGhlIHRvcCBldmVudCBpbiB0aGUgZ2l2ZW4gYnJhbmNoLiBJZiB0aGlzIG1hcHNcbi8vIGF3YXkgYWxsIHRoZSBjaGFuZ2VzIGFuZCBlZmZlY3RzIGluIHRoYXQgaXRlbSwgZHJvcCBpdCBhbmRcbi8vIHByb3BhZ2F0ZSB0aGUgbWFwcGluZyB0byB0aGUgbmV4dCBpdGVtLlxuZnVuY3Rpb24gYWRkTWFwcGluZ1RvQnJhbmNoKGJyYW5jaCwgbWFwcGluZykge1xuICAgIGlmICghYnJhbmNoLmxlbmd0aClcbiAgICAgICAgcmV0dXJuIGJyYW5jaDtcbiAgICBsZXQgbGVuZ3RoID0gYnJhbmNoLmxlbmd0aCwgc2VsZWN0aW9ucyA9IG5vbmU7XG4gICAgd2hpbGUgKGxlbmd0aCkge1xuICAgICAgICBsZXQgZXZlbnQgPSBtYXBFdmVudChicmFuY2hbbGVuZ3RoIC0gMV0sIG1hcHBpbmcsIHNlbGVjdGlvbnMpO1xuICAgICAgICBpZiAoZXZlbnQuY2hhbmdlcyAmJiAhZXZlbnQuY2hhbmdlcy5lbXB0eSB8fCBldmVudC5lZmZlY3RzLmxlbmd0aCkgeyAvLyBFdmVudCBzdXJ2aXZlZCBtYXBwaW5nXG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gYnJhbmNoLnNsaWNlKDAsIGxlbmd0aCk7XG4gICAgICAgICAgICByZXN1bHRbbGVuZ3RoIC0gMV0gPSBldmVudDtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7IC8vIERyb3AgdGhpcyBldmVudCwgc2luY2UgdGhlcmUncyBubyBjaGFuZ2VzIG9yIGVmZmVjdHMgbGVmdFxuICAgICAgICAgICAgbWFwcGluZyA9IGV2ZW50Lm1hcHBlZDtcbiAgICAgICAgICAgIGxlbmd0aC0tO1xuICAgICAgICAgICAgc2VsZWN0aW9ucyA9IGV2ZW50LnNlbGVjdGlvbnNBZnRlcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2VsZWN0aW9ucy5sZW5ndGggPyBbSGlzdEV2ZW50LnNlbGVjdGlvbihzZWxlY3Rpb25zKV0gOiBub25lO1xufVxuZnVuY3Rpb24gbWFwRXZlbnQoZXZlbnQsIG1hcHBpbmcsIGV4dHJhU2VsZWN0aW9ucykge1xuICAgIGxldCBzZWxlY3Rpb25zID0gY29uYyhldmVudC5zZWxlY3Rpb25zQWZ0ZXIubGVuZ3RoID8gZXZlbnQuc2VsZWN0aW9uc0FmdGVyLm1hcChzID0+IHMubWFwKG1hcHBpbmcpKSA6IG5vbmUsIGV4dHJhU2VsZWN0aW9ucyk7XG4gICAgLy8gQ2hhbmdlLWxlc3MgZXZlbnRzIGRvbid0IHN0b3JlIG1hcHBpbmdzICh0aGV5IGFyZSBhbHdheXMgdGhlIGxhc3QgZXZlbnQgaW4gYSBicmFuY2gpXG4gICAgaWYgKCFldmVudC5jaGFuZ2VzKVxuICAgICAgICByZXR1cm4gSGlzdEV2ZW50LnNlbGVjdGlvbihzZWxlY3Rpb25zKTtcbiAgICBsZXQgbWFwcGVkQ2hhbmdlcyA9IGV2ZW50LmNoYW5nZXMubWFwKG1hcHBpbmcpLCBiZWZvcmUgPSBtYXBwaW5nLm1hcERlc2MoZXZlbnQuY2hhbmdlcywgdHJ1ZSk7XG4gICAgbGV0IGZ1bGxNYXBwaW5nID0gZXZlbnQubWFwcGVkID8gZXZlbnQubWFwcGVkLmNvbXBvc2VEZXNjKGJlZm9yZSkgOiBiZWZvcmU7XG4gICAgcmV0dXJuIG5ldyBIaXN0RXZlbnQobWFwcGVkQ2hhbmdlcywgc3RhdGUuU3RhdGVFZmZlY3QubWFwRWZmZWN0cyhldmVudC5lZmZlY3RzLCBtYXBwaW5nKSwgZnVsbE1hcHBpbmcsIGV2ZW50LnN0YXJ0U2VsZWN0aW9uLm1hcChiZWZvcmUpLCBzZWxlY3Rpb25zKTtcbn1cbmNvbnN0IGpvaW5hYmxlVXNlckV2ZW50ID0gL14oaW5wdXRcXC50eXBlfGRlbGV0ZSkoJHxcXC4pLztcbmNsYXNzIEhpc3RvcnlTdGF0ZSB7XG4gICAgY29uc3RydWN0b3IoZG9uZSwgdW5kb25lLCBwcmV2VGltZSA9IDAsIHByZXZVc2VyRXZlbnQgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5kb25lID0gZG9uZTtcbiAgICAgICAgdGhpcy51bmRvbmUgPSB1bmRvbmU7XG4gICAgICAgIHRoaXMucHJldlRpbWUgPSBwcmV2VGltZTtcbiAgICAgICAgdGhpcy5wcmV2VXNlckV2ZW50ID0gcHJldlVzZXJFdmVudDtcbiAgICB9XG4gICAgaXNvbGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJldlRpbWUgPyBuZXcgSGlzdG9yeVN0YXRlKHRoaXMuZG9uZSwgdGhpcy51bmRvbmUpIDogdGhpcztcbiAgICB9XG4gICAgYWRkQ2hhbmdlcyhldmVudCwgdGltZSwgdXNlckV2ZW50LCBjb25maWcsIHRyKSB7XG4gICAgICAgIGxldCBkb25lID0gdGhpcy5kb25lLCBsYXN0RXZlbnQgPSBkb25lW2RvbmUubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmIChsYXN0RXZlbnQgJiYgbGFzdEV2ZW50LmNoYW5nZXMgJiYgIWxhc3RFdmVudC5jaGFuZ2VzLmVtcHR5ICYmIGV2ZW50LmNoYW5nZXMgJiZcbiAgICAgICAgICAgICghdXNlckV2ZW50IHx8IGpvaW5hYmxlVXNlckV2ZW50LnRlc3QodXNlckV2ZW50KSkgJiZcbiAgICAgICAgICAgICgoIWxhc3RFdmVudC5zZWxlY3Rpb25zQWZ0ZXIubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgdGltZSAtIHRoaXMucHJldlRpbWUgPCBjb25maWcubmV3R3JvdXBEZWxheSAmJlxuICAgICAgICAgICAgICAgIGNvbmZpZy5qb2luVG9FdmVudCh0ciwgaXNBZGphY2VudChsYXN0RXZlbnQuY2hhbmdlcywgZXZlbnQuY2hhbmdlcykpKSB8fFxuICAgICAgICAgICAgICAgIC8vIEZvciBjb21wb3NlIChidXQgbm90IGNvbXBvc2Uuc3RhcnQpIGV2ZW50cywgYWx3YXlzIGpvaW4gd2l0aCBwcmV2aW91cyBldmVudFxuICAgICAgICAgICAgICAgIHVzZXJFdmVudCA9PSBcImlucHV0LnR5cGUuY29tcG9zZVwiKSkge1xuICAgICAgICAgICAgZG9uZSA9IHVwZGF0ZUJyYW5jaChkb25lLCBkb25lLmxlbmd0aCAtIDEsIGNvbmZpZy5taW5EZXB0aCwgbmV3IEhpc3RFdmVudChldmVudC5jaGFuZ2VzLmNvbXBvc2UobGFzdEV2ZW50LmNoYW5nZXMpLCBjb25jKGV2ZW50LmVmZmVjdHMsIGxhc3RFdmVudC5lZmZlY3RzKSwgbGFzdEV2ZW50Lm1hcHBlZCwgbGFzdEV2ZW50LnN0YXJ0U2VsZWN0aW9uLCBub25lKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkb25lID0gdXBkYXRlQnJhbmNoKGRvbmUsIGRvbmUubGVuZ3RoLCBjb25maWcubWluRGVwdGgsIGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEhpc3RvcnlTdGF0ZShkb25lLCBub25lLCB0aW1lLCB1c2VyRXZlbnQpO1xuICAgIH1cbiAgICBhZGRTZWxlY3Rpb24oc2VsZWN0aW9uLCB0aW1lLCB1c2VyRXZlbnQsIG5ld0dyb3VwRGVsYXkpIHtcbiAgICAgICAgbGV0IGxhc3QgPSB0aGlzLmRvbmUubGVuZ3RoID8gdGhpcy5kb25lW3RoaXMuZG9uZS5sZW5ndGggLSAxXS5zZWxlY3Rpb25zQWZ0ZXIgOiBub25lO1xuICAgICAgICBpZiAobGFzdC5sZW5ndGggPiAwICYmXG4gICAgICAgICAgICB0aW1lIC0gdGhpcy5wcmV2VGltZSA8IG5ld0dyb3VwRGVsYXkgJiZcbiAgICAgICAgICAgIHVzZXJFdmVudCA9PSB0aGlzLnByZXZVc2VyRXZlbnQgJiYgdXNlckV2ZW50ICYmIC9ec2VsZWN0KCR8XFwuKS8udGVzdCh1c2VyRXZlbnQpICYmXG4gICAgICAgICAgICBlcVNlbGVjdGlvblNoYXBlKGxhc3RbbGFzdC5sZW5ndGggLSAxXSwgc2VsZWN0aW9uKSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IEhpc3RvcnlTdGF0ZShhZGRTZWxlY3Rpb24odGhpcy5kb25lLCBzZWxlY3Rpb24pLCB0aGlzLnVuZG9uZSwgdGltZSwgdXNlckV2ZW50KTtcbiAgICB9XG4gICAgYWRkTWFwcGluZyhtYXBwaW5nKSB7XG4gICAgICAgIHJldHVybiBuZXcgSGlzdG9yeVN0YXRlKGFkZE1hcHBpbmdUb0JyYW5jaCh0aGlzLmRvbmUsIG1hcHBpbmcpLCBhZGRNYXBwaW5nVG9CcmFuY2godGhpcy51bmRvbmUsIG1hcHBpbmcpLCB0aGlzLnByZXZUaW1lLCB0aGlzLnByZXZVc2VyRXZlbnQpO1xuICAgIH1cbiAgICBwb3Aoc2lkZSwgc3RhdGUsIG9ubHlTZWxlY3Rpb24pIHtcbiAgICAgICAgbGV0IGJyYW5jaCA9IHNpZGUgPT0gMCAvKiBCcmFuY2hOYW1lLkRvbmUgKi8gPyB0aGlzLmRvbmUgOiB0aGlzLnVuZG9uZTtcbiAgICAgICAgaWYgKGJyYW5jaC5sZW5ndGggPT0gMClcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBsZXQgZXZlbnQgPSBicmFuY2hbYnJhbmNoLmxlbmd0aCAtIDFdLCBzZWxlY3Rpb24gPSBldmVudC5zZWxlY3Rpb25zQWZ0ZXJbMF0gfHwgc3RhdGUuc2VsZWN0aW9uO1xuICAgICAgICBpZiAob25seVNlbGVjdGlvbiAmJiBldmVudC5zZWxlY3Rpb25zQWZ0ZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhdGUudXBkYXRlKHtcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb246IGV2ZW50LnNlbGVjdGlvbnNBZnRlcltldmVudC5zZWxlY3Rpb25zQWZ0ZXIubGVuZ3RoIC0gMV0sXG4gICAgICAgICAgICAgICAgYW5ub3RhdGlvbnM6IGZyb21IaXN0b3J5Lm9mKHsgc2lkZSwgcmVzdDogcG9wU2VsZWN0aW9uKGJyYW5jaCksIHNlbGVjdGlvbiB9KSxcbiAgICAgICAgICAgICAgICB1c2VyRXZlbnQ6IHNpZGUgPT0gMCAvKiBCcmFuY2hOYW1lLkRvbmUgKi8gPyBcInNlbGVjdC51bmRvXCIgOiBcInNlbGVjdC5yZWRvXCIsXG4gICAgICAgICAgICAgICAgc2Nyb2xsSW50b1ZpZXc6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFldmVudC5jaGFuZ2VzKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCByZXN0ID0gYnJhbmNoLmxlbmd0aCA9PSAxID8gbm9uZSA6IGJyYW5jaC5zbGljZSgwLCBicmFuY2gubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICBpZiAoZXZlbnQubWFwcGVkKVxuICAgICAgICAgICAgICAgIHJlc3QgPSBhZGRNYXBwaW5nVG9CcmFuY2gocmVzdCwgZXZlbnQubWFwcGVkKTtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZS51cGRhdGUoe1xuICAgICAgICAgICAgICAgIGNoYW5nZXM6IGV2ZW50LmNoYW5nZXMsXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uOiBldmVudC5zdGFydFNlbGVjdGlvbixcbiAgICAgICAgICAgICAgICBlZmZlY3RzOiBldmVudC5lZmZlY3RzLFxuICAgICAgICAgICAgICAgIGFubm90YXRpb25zOiBmcm9tSGlzdG9yeS5vZih7IHNpZGUsIHJlc3QsIHNlbGVjdGlvbiB9KSxcbiAgICAgICAgICAgICAgICBmaWx0ZXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHVzZXJFdmVudDogc2lkZSA9PSAwIC8qIEJyYW5jaE5hbWUuRG9uZSAqLyA/IFwidW5kb1wiIDogXCJyZWRvXCIsXG4gICAgICAgICAgICAgICAgc2Nyb2xsSW50b1ZpZXc6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuSGlzdG9yeVN0YXRlLmVtcHR5ID0gbmV3IEhpc3RvcnlTdGF0ZShub25lLCBub25lKTtcbi8qKlxuRGVmYXVsdCBrZXkgYmluZGluZ3MgZm9yIHRoZSB1bmRvIGhpc3RvcnkuXG5cbi0gTW9kLXo6IFtgdW5kb2BdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMudW5kbykuXG4tIE1vZC15IChNb2QtU2hpZnQteiBvbiBtYWNPUykgKyBDdHJsLVNoaWZ0LXogb24gTGludXg6IFtgcmVkb2BdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMucmVkbykuXG4tIE1vZC11OiBbYHVuZG9TZWxlY3Rpb25gXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLnVuZG9TZWxlY3Rpb24pLlxuLSBBbHQtdSAoTW9kLVNoaWZ0LXUgb24gbWFjT1MpOiBbYHJlZG9TZWxlY3Rpb25gXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLnJlZG9TZWxlY3Rpb24pLlxuKi9cbmNvbnN0IGhpc3RvcnlLZXltYXAgPSBbXG4gICAgeyBrZXk6IFwiTW9kLXpcIiwgcnVuOiB1bmRvLCBwcmV2ZW50RGVmYXVsdDogdHJ1ZSB9LFxuICAgIHsga2V5OiBcIk1vZC15XCIsIG1hYzogXCJNb2QtU2hpZnQtelwiLCBydW46IHJlZG8sIHByZXZlbnREZWZhdWx0OiB0cnVlIH0sXG4gICAgeyBsaW51eDogXCJDdHJsLVNoaWZ0LXpcIiwgcnVuOiByZWRvLCBwcmV2ZW50RGVmYXVsdDogdHJ1ZSB9LFxuICAgIHsga2V5OiBcIk1vZC11XCIsIHJ1bjogdW5kb1NlbGVjdGlvbiwgcHJldmVudERlZmF1bHQ6IHRydWUgfSxcbiAgICB7IGtleTogXCJBbHQtdVwiLCBtYWM6IFwiTW9kLVNoaWZ0LXVcIiwgcnVuOiByZWRvU2VsZWN0aW9uLCBwcmV2ZW50RGVmYXVsdDogdHJ1ZSB9XG5dO1xuXG5mdW5jdGlvbiB1cGRhdGVTZWwoc2VsLCBieSkge1xuICAgIHJldHVybiBzdGF0ZS5FZGl0b3JTZWxlY3Rpb24uY3JlYXRlKHNlbC5yYW5nZXMubWFwKGJ5KSwgc2VsLm1haW5JbmRleCk7XG59XG5mdW5jdGlvbiBzZXRTZWwoc3RhdGUsIHNlbGVjdGlvbikge1xuICAgIHJldHVybiBzdGF0ZS51cGRhdGUoeyBzZWxlY3Rpb24sIHNjcm9sbEludG9WaWV3OiB0cnVlLCB1c2VyRXZlbnQ6IFwic2VsZWN0XCIgfSk7XG59XG5mdW5jdGlvbiBtb3ZlU2VsKHsgc3RhdGUsIGRpc3BhdGNoIH0sIGhvdykge1xuICAgIGxldCBzZWxlY3Rpb24gPSB1cGRhdGVTZWwoc3RhdGUuc2VsZWN0aW9uLCBob3cpO1xuICAgIGlmIChzZWxlY3Rpb24uZXEoc3RhdGUuc2VsZWN0aW9uLCB0cnVlKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGRpc3BhdGNoKHNldFNlbChzdGF0ZSwgc2VsZWN0aW9uKSk7XG4gICAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiByYW5nZUVuZChyYW5nZSwgZm9yd2FyZCkge1xuICAgIHJldHVybiBzdGF0ZS5FZGl0b3JTZWxlY3Rpb24uY3Vyc29yKGZvcndhcmQgPyByYW5nZS50byA6IHJhbmdlLmZyb20pO1xufVxuZnVuY3Rpb24gY3Vyc29yQnlDaGFyKHZpZXcsIGZvcndhcmQpIHtcbiAgICByZXR1cm4gbW92ZVNlbCh2aWV3LCByYW5nZSA9PiByYW5nZS5lbXB0eSA/IHZpZXcubW92ZUJ5Q2hhcihyYW5nZSwgZm9yd2FyZCkgOiByYW5nZUVuZChyYW5nZSwgZm9yd2FyZCkpO1xufVxuZnVuY3Rpb24gbHRyQXRDdXJzb3IodmlldyQxKSB7XG4gICAgcmV0dXJuIHZpZXckMS50ZXh0RGlyZWN0aW9uQXQodmlldyQxLnN0YXRlLnNlbGVjdGlvbi5tYWluLmhlYWQpID09IHZpZXcuRGlyZWN0aW9uLkxUUjtcbn1cbi8qKlxuTW92ZSB0aGUgc2VsZWN0aW9uIG9uZSBjaGFyYWN0ZXIgdG8gdGhlIGxlZnQgKHdoaWNoIGlzIGJhY2t3YXJkIGluXG5sZWZ0LXRvLXJpZ2h0IHRleHQsIGZvcndhcmQgaW4gcmlnaHQtdG8tbGVmdCB0ZXh0KS5cbiovXG5jb25zdCBjdXJzb3JDaGFyTGVmdCA9IHZpZXcgPT4gY3Vyc29yQnlDaGFyKHZpZXcsICFsdHJBdEN1cnNvcih2aWV3KSk7XG4vKipcbk1vdmUgdGhlIHNlbGVjdGlvbiBvbmUgY2hhcmFjdGVyIHRvIHRoZSByaWdodC5cbiovXG5jb25zdCBjdXJzb3JDaGFyUmlnaHQgPSB2aWV3ID0+IGN1cnNvckJ5Q2hhcih2aWV3LCBsdHJBdEN1cnNvcih2aWV3KSk7XG4vKipcbk1vdmUgdGhlIHNlbGVjdGlvbiBvbmUgY2hhcmFjdGVyIGZvcndhcmQuXG4qL1xuY29uc3QgY3Vyc29yQ2hhckZvcndhcmQgPSB2aWV3ID0+IGN1cnNvckJ5Q2hhcih2aWV3LCB0cnVlKTtcbi8qKlxuTW92ZSB0aGUgc2VsZWN0aW9uIG9uZSBjaGFyYWN0ZXIgYmFja3dhcmQuXG4qL1xuY29uc3QgY3Vyc29yQ2hhckJhY2t3YXJkID0gdmlldyA9PiBjdXJzb3JCeUNoYXIodmlldywgZmFsc2UpO1xuZnVuY3Rpb24gY3Vyc29yQnlHcm91cCh2aWV3LCBmb3J3YXJkKSB7XG4gICAgcmV0dXJuIG1vdmVTZWwodmlldywgcmFuZ2UgPT4gcmFuZ2UuZW1wdHkgPyB2aWV3Lm1vdmVCeUdyb3VwKHJhbmdlLCBmb3J3YXJkKSA6IHJhbmdlRW5kKHJhbmdlLCBmb3J3YXJkKSk7XG59XG4vKipcbk1vdmUgdGhlIHNlbGVjdGlvbiB0byB0aGUgbGVmdCBhY3Jvc3Mgb25lIGdyb3VwIG9mIHdvcmQgb3Jcbm5vbi13b3JkIChidXQgYWxzbyBub24tc3BhY2UpIGNoYXJhY3RlcnMuXG4qL1xuY29uc3QgY3Vyc29yR3JvdXBMZWZ0ID0gdmlldyA9PiBjdXJzb3JCeUdyb3VwKHZpZXcsICFsdHJBdEN1cnNvcih2aWV3KSk7XG4vKipcbk1vdmUgdGhlIHNlbGVjdGlvbiBvbmUgZ3JvdXAgdG8gdGhlIHJpZ2h0LlxuKi9cbmNvbnN0IGN1cnNvckdyb3VwUmlnaHQgPSB2aWV3ID0+IGN1cnNvckJ5R3JvdXAodmlldywgbHRyQXRDdXJzb3IodmlldykpO1xuLyoqXG5Nb3ZlIHRoZSBzZWxlY3Rpb24gb25lIGdyb3VwIGZvcndhcmQuXG4qL1xuY29uc3QgY3Vyc29yR3JvdXBGb3J3YXJkID0gdmlldyA9PiBjdXJzb3JCeUdyb3VwKHZpZXcsIHRydWUpO1xuLyoqXG5Nb3ZlIHRoZSBzZWxlY3Rpb24gb25lIGdyb3VwIGJhY2t3YXJkLlxuKi9cbmNvbnN0IGN1cnNvckdyb3VwQmFja3dhcmQgPSB2aWV3ID0+IGN1cnNvckJ5R3JvdXAodmlldywgZmFsc2UpO1xuY29uc3Qgc2VnbWVudGVyID0gdHlwZW9mIEludGwgIT0gXCJ1bmRlZmluZWRcIiAmJiBJbnRsLlNlZ21lbnRlciA/XG4gICAgbmV3IChJbnRsLlNlZ21lbnRlcikodW5kZWZpbmVkLCB7IGdyYW51bGFyaXR5OiBcIndvcmRcIiB9KSA6IG51bGw7XG5mdW5jdGlvbiBtb3ZlQnlTdWJ3b3JkKHZpZXcsIHJhbmdlLCBmb3J3YXJkKSB7XG4gICAgbGV0IGNhdGVnb3JpemUgPSB2aWV3LnN0YXRlLmNoYXJDYXRlZ29yaXplcihyYW5nZS5mcm9tKTtcbiAgICBsZXQgY2F0ID0gc3RhdGUuQ2hhckNhdGVnb3J5LlNwYWNlLCBwb3MgPSByYW5nZS5mcm9tLCBzdGVwcyA9IDA7XG4gICAgbGV0IGRvbmUgPSBmYWxzZSwgc2F3VXBwZXIgPSBmYWxzZSwgc2F3TG93ZXIgPSBmYWxzZTtcbiAgICBsZXQgc3RlcCA9IChuZXh0KSA9PiB7XG4gICAgICAgIGlmIChkb25lKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBwb3MgKz0gZm9yd2FyZCA/IG5leHQubGVuZ3RoIDogLW5leHQubGVuZ3RoO1xuICAgICAgICBsZXQgbmV4dENhdCA9IGNhdGVnb3JpemUobmV4dCksIGFoZWFkO1xuICAgICAgICBpZiAobmV4dENhdCA9PSBzdGF0ZS5DaGFyQ2F0ZWdvcnkuV29yZCAmJiBuZXh0LmNoYXJDb2RlQXQoMCkgPCAxMjggJiYgL1tcXFdfXS8udGVzdChuZXh0KSlcbiAgICAgICAgICAgIG5leHRDYXQgPSAtMTsgLy8gVHJlYXQgd29yZCBwdW5jdHVhdGlvbiBzcGVjaWFsbHlcbiAgICAgICAgaWYgKGNhdCA9PSBzdGF0ZS5DaGFyQ2F0ZWdvcnkuU3BhY2UpXG4gICAgICAgICAgICBjYXQgPSBuZXh0Q2F0O1xuICAgICAgICBpZiAoY2F0ICE9IG5leHRDYXQpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChjYXQgPT0gc3RhdGUuQ2hhckNhdGVnb3J5LldvcmQpIHtcbiAgICAgICAgICAgIGlmIChuZXh0LnRvTG93ZXJDYXNlKCkgPT0gbmV4dCkge1xuICAgICAgICAgICAgICAgIGlmICghZm9yd2FyZCAmJiBzYXdVcHBlcilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIHNhd0xvd2VyID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHNhd0xvd2VyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZvcndhcmQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChzYXdVcHBlciAmJiBmb3J3YXJkICYmIGNhdGVnb3JpemUoYWhlYWQgPSB2aWV3LnN0YXRlLnNsaWNlRG9jKHBvcywgcG9zICsgMSkpID09IHN0YXRlLkNoYXJDYXRlZ29yeS5Xb3JkICYmXG4gICAgICAgICAgICAgICAgICAgIGFoZWFkLnRvTG93ZXJDYXNlKCkgPT0gYWhlYWQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICBzYXdVcHBlciA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3RlcHMrKztcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBsZXQgZW5kID0gdmlldy5tb3ZlQnlDaGFyKHJhbmdlLCBmb3J3YXJkLCBzdGFydCA9PiB7XG4gICAgICAgIHN0ZXAoc3RhcnQpO1xuICAgICAgICByZXR1cm4gc3RlcDtcbiAgICB9KTtcbiAgICBpZiAoc2VnbWVudGVyICYmIGNhdCA9PSBzdGF0ZS5DaGFyQ2F0ZWdvcnkuV29yZCAmJiBlbmQuZnJvbSA9PSByYW5nZS5mcm9tICsgc3RlcHMgKiAoZm9yd2FyZCA/IDEgOiAtMSkpIHtcbiAgICAgICAgbGV0IGZyb20gPSBNYXRoLm1pbihyYW5nZS5oZWFkLCBlbmQuaGVhZCksIHRvID0gTWF0aC5tYXgocmFuZ2UuaGVhZCwgZW5kLmhlYWQpO1xuICAgICAgICBsZXQgc2tpcHBlZCA9IHZpZXcuc3RhdGUuc2xpY2VEb2MoZnJvbSwgdG8pO1xuICAgICAgICBpZiAoc2tpcHBlZC5sZW5ndGggPiAxICYmIC9bXFx1NEUwMC1cXHVmZmZmXS8udGVzdChza2lwcGVkKSkge1xuICAgICAgICAgICAgbGV0IHNlZ21lbnRzID0gQXJyYXkuZnJvbShzZWdtZW50ZXIuc2VnbWVudChza2lwcGVkKSk7XG4gICAgICAgICAgICBpZiAoc2VnbWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGlmIChmb3J3YXJkKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGUuRWRpdG9yU2VsZWN0aW9uLmN1cnNvcihyYW5nZS5oZWFkICsgc2VnbWVudHNbMV0uaW5kZXgsIC0xKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGUuRWRpdG9yU2VsZWN0aW9uLmN1cnNvcihlbmQuaGVhZCArIHNlZ21lbnRzW3NlZ21lbnRzLmxlbmd0aCAtIDFdLmluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZW5kO1xufVxuZnVuY3Rpb24gY3Vyc29yQnlTdWJ3b3JkKHZpZXcsIGZvcndhcmQpIHtcbiAgICByZXR1cm4gbW92ZVNlbCh2aWV3LCByYW5nZSA9PiByYW5nZS5lbXB0eSA/IG1vdmVCeVN1YndvcmQodmlldywgcmFuZ2UsIGZvcndhcmQpIDogcmFuZ2VFbmQocmFuZ2UsIGZvcndhcmQpKTtcbn1cbi8qKlxuTW92ZSB0aGUgc2VsZWN0aW9uIG9uZSBncm91cCBvciBjYW1lbC1jYXNlIHN1YndvcmQgZm9yd2FyZC5cbiovXG5jb25zdCBjdXJzb3JTdWJ3b3JkRm9yd2FyZCA9IHZpZXcgPT4gY3Vyc29yQnlTdWJ3b3JkKHZpZXcsIHRydWUpO1xuLyoqXG5Nb3ZlIHRoZSBzZWxlY3Rpb24gb25lIGdyb3VwIG9yIGNhbWVsLWNhc2Ugc3Vid29yZCBiYWNrd2FyZC5cbiovXG5jb25zdCBjdXJzb3JTdWJ3b3JkQmFja3dhcmQgPSB2aWV3ID0+IGN1cnNvckJ5U3Vid29yZCh2aWV3LCBmYWxzZSk7XG5mdW5jdGlvbiBpbnRlcmVzdGluZ05vZGUoc3RhdGUsIG5vZGUsIGJyYWNrZXRQcm9wKSB7XG4gICAgaWYgKG5vZGUudHlwZS5wcm9wKGJyYWNrZXRQcm9wKSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgbGV0IGxlbiA9IG5vZGUudG8gLSBub2RlLmZyb207XG4gICAgcmV0dXJuIGxlbiAmJiAobGVuID4gMiB8fCAvW15cXHMsLjs6XS8udGVzdChzdGF0ZS5zbGljZURvYyhub2RlLmZyb20sIG5vZGUudG8pKSkgfHwgbm9kZS5maXJzdENoaWxkO1xufVxuZnVuY3Rpb24gbW92ZUJ5U3ludGF4KHN0YXRlJDEsIHN0YXJ0LCBmb3J3YXJkKSB7XG4gICAgbGV0IHBvcyA9IGxhbmd1YWdlLnN5bnRheFRyZWUoc3RhdGUkMSkucmVzb2x2ZUlubmVyKHN0YXJ0LmhlYWQpO1xuICAgIGxldCBicmFja2V0UHJvcCA9IGZvcndhcmQgPyBjb21tb24uTm9kZVByb3AuY2xvc2VkQnkgOiBjb21tb24uTm9kZVByb3Aub3BlbmVkQnk7XG4gICAgLy8gU2NhbiBmb3J3YXJkIHRocm91Z2ggY2hpbGQgbm9kZXMgdG8gc2VlIGlmIHRoZXJlJ3MgYW4gaW50ZXJlc3RpbmdcbiAgICAvLyBub2RlIGFoZWFkLlxuICAgIGZvciAobGV0IGF0ID0gc3RhcnQuaGVhZDs7KSB7XG4gICAgICAgIGxldCBuZXh0ID0gZm9yd2FyZCA/IHBvcy5jaGlsZEFmdGVyKGF0KSA6IHBvcy5jaGlsZEJlZm9yZShhdCk7XG4gICAgICAgIGlmICghbmV4dClcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBpZiAoaW50ZXJlc3RpbmdOb2RlKHN0YXRlJDEsIG5leHQsIGJyYWNrZXRQcm9wKSlcbiAgICAgICAgICAgIHBvcyA9IG5leHQ7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGF0ID0gZm9yd2FyZCA/IG5leHQudG8gOiBuZXh0LmZyb207XG4gICAgfVxuICAgIGxldCBicmFja2V0ID0gcG9zLnR5cGUucHJvcChicmFja2V0UHJvcCksIG1hdGNoLCBuZXdQb3M7XG4gICAgaWYgKGJyYWNrZXQgJiYgKG1hdGNoID0gZm9yd2FyZCA/IGxhbmd1YWdlLm1hdGNoQnJhY2tldHMoc3RhdGUkMSwgcG9zLmZyb20sIDEpIDogbGFuZ3VhZ2UubWF0Y2hCcmFja2V0cyhzdGF0ZSQxLCBwb3MudG8sIC0xKSkgJiYgbWF0Y2gubWF0Y2hlZClcbiAgICAgICAgbmV3UG9zID0gZm9yd2FyZCA/IG1hdGNoLmVuZC50byA6IG1hdGNoLmVuZC5mcm9tO1xuICAgIGVsc2VcbiAgICAgICAgbmV3UG9zID0gZm9yd2FyZCA/IHBvcy50byA6IHBvcy5mcm9tO1xuICAgIHJldHVybiBzdGF0ZS5FZGl0b3JTZWxlY3Rpb24uY3Vyc29yKG5ld1BvcywgZm9yd2FyZCA/IC0xIDogMSk7XG59XG4vKipcbk1vdmUgdGhlIGN1cnNvciBvdmVyIHRoZSBuZXh0IHN5bnRhY3RpYyBlbGVtZW50IHRvIHRoZSBsZWZ0LlxuKi9cbmNvbnN0IGN1cnNvclN5bnRheExlZnQgPSB2aWV3ID0+IG1vdmVTZWwodmlldywgcmFuZ2UgPT4gbW92ZUJ5U3ludGF4KHZpZXcuc3RhdGUsIHJhbmdlLCAhbHRyQXRDdXJzb3IodmlldykpKTtcbi8qKlxuTW92ZSB0aGUgY3Vyc29yIG92ZXIgdGhlIG5leHQgc3ludGFjdGljIGVsZW1lbnQgdG8gdGhlIHJpZ2h0LlxuKi9cbmNvbnN0IGN1cnNvclN5bnRheFJpZ2h0ID0gdmlldyA9PiBtb3ZlU2VsKHZpZXcsIHJhbmdlID0+IG1vdmVCeVN5bnRheCh2aWV3LnN0YXRlLCByYW5nZSwgbHRyQXRDdXJzb3IodmlldykpKTtcbmZ1bmN0aW9uIGN1cnNvckJ5TGluZSh2aWV3LCBmb3J3YXJkKSB7XG4gICAgcmV0dXJuIG1vdmVTZWwodmlldywgcmFuZ2UgPT4ge1xuICAgICAgICBpZiAoIXJhbmdlLmVtcHR5KVxuICAgICAgICAgICAgcmV0dXJuIHJhbmdlRW5kKHJhbmdlLCBmb3J3YXJkKTtcbiAgICAgICAgbGV0IG1vdmVkID0gdmlldy5tb3ZlVmVydGljYWxseShyYW5nZSwgZm9yd2FyZCk7XG4gICAgICAgIHJldHVybiBtb3ZlZC5oZWFkICE9IHJhbmdlLmhlYWQgPyBtb3ZlZCA6IHZpZXcubW92ZVRvTGluZUJvdW5kYXJ5KHJhbmdlLCBmb3J3YXJkKTtcbiAgICB9KTtcbn1cbi8qKlxuTW92ZSB0aGUgc2VsZWN0aW9uIG9uZSBsaW5lIHVwLlxuKi9cbmNvbnN0IGN1cnNvckxpbmVVcCA9IHZpZXcgPT4gY3Vyc29yQnlMaW5lKHZpZXcsIGZhbHNlKTtcbi8qKlxuTW92ZSB0aGUgc2VsZWN0aW9uIG9uZSBsaW5lIGRvd24uXG4qL1xuY29uc3QgY3Vyc29yTGluZURvd24gPSB2aWV3ID0+IGN1cnNvckJ5TGluZSh2aWV3LCB0cnVlKTtcbmZ1bmN0aW9uIHBhZ2VJbmZvKHZpZXckMSkge1xuICAgIGxldCBzZWxmU2Nyb2xsID0gdmlldyQxLnNjcm9sbERPTS5jbGllbnRIZWlnaHQgPCB2aWV3JDEuc2Nyb2xsRE9NLnNjcm9sbEhlaWdodCAtIDI7XG4gICAgbGV0IG1hcmdpblRvcCA9IDAsIG1hcmdpbkJvdHRvbSA9IDAsIGhlaWdodDtcbiAgICBpZiAoc2VsZlNjcm9sbCkge1xuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2YgdmlldyQxLnN0YXRlLmZhY2V0KHZpZXcuRWRpdG9yVmlldy5zY3JvbGxNYXJnaW5zKSkge1xuICAgICAgICAgICAgbGV0IG1hcmdpbnMgPSBzb3VyY2UodmlldyQxKTtcbiAgICAgICAgICAgIGlmIChtYXJnaW5zID09PSBudWxsIHx8IG1hcmdpbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG1hcmdpbnMudG9wKVxuICAgICAgICAgICAgICAgIG1hcmdpblRvcCA9IE1hdGgubWF4KG1hcmdpbnMgPT09IG51bGwgfHwgbWFyZ2lucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogbWFyZ2lucy50b3AsIG1hcmdpblRvcCk7XG4gICAgICAgICAgICBpZiAobWFyZ2lucyA9PT0gbnVsbCB8fCBtYXJnaW5zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBtYXJnaW5zLmJvdHRvbSlcbiAgICAgICAgICAgICAgICBtYXJnaW5Cb3R0b20gPSBNYXRoLm1heChtYXJnaW5zID09PSBudWxsIHx8IG1hcmdpbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG1hcmdpbnMuYm90dG9tLCBtYXJnaW5Cb3R0b20pO1xuICAgICAgICB9XG4gICAgICAgIGhlaWdodCA9IHZpZXckMS5zY3JvbGxET00uY2xpZW50SGVpZ2h0IC0gbWFyZ2luVG9wIC0gbWFyZ2luQm90dG9tO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaGVpZ2h0ID0gKHZpZXckMS5kb20ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyB8fCB3aW5kb3cpLmlubmVySGVpZ2h0O1xuICAgIH1cbiAgICByZXR1cm4geyBtYXJnaW5Ub3AsIG1hcmdpbkJvdHRvbSwgc2VsZlNjcm9sbCxcbiAgICAgICAgaGVpZ2h0OiBNYXRoLm1heCh2aWV3JDEuZGVmYXVsdExpbmVIZWlnaHQsIGhlaWdodCAtIDUpIH07XG59XG5mdW5jdGlvbiBjdXJzb3JCeVBhZ2UodmlldyQxLCBmb3J3YXJkKSB7XG4gICAgbGV0IHBhZ2UgPSBwYWdlSW5mbyh2aWV3JDEpO1xuICAgIGxldCB7IHN0YXRlIH0gPSB2aWV3JDEsIHNlbGVjdGlvbiA9IHVwZGF0ZVNlbChzdGF0ZS5zZWxlY3Rpb24sIHJhbmdlID0+IHtcbiAgICAgICAgcmV0dXJuIHJhbmdlLmVtcHR5ID8gdmlldyQxLm1vdmVWZXJ0aWNhbGx5KHJhbmdlLCBmb3J3YXJkLCBwYWdlLmhlaWdodClcbiAgICAgICAgICAgIDogcmFuZ2VFbmQocmFuZ2UsIGZvcndhcmQpO1xuICAgIH0pO1xuICAgIGlmIChzZWxlY3Rpb24uZXEoc3RhdGUuc2VsZWN0aW9uKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGxldCBlZmZlY3Q7XG4gICAgaWYgKHBhZ2Uuc2VsZlNjcm9sbCkge1xuICAgICAgICBsZXQgc3RhcnRQb3MgPSB2aWV3JDEuY29vcmRzQXRQb3Moc3RhdGUuc2VsZWN0aW9uLm1haW4uaGVhZCk7XG4gICAgICAgIGxldCBzY3JvbGxSZWN0ID0gdmlldyQxLnNjcm9sbERPTS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgbGV0IHNjcm9sbFRvcCA9IHNjcm9sbFJlY3QudG9wICsgcGFnZS5tYXJnaW5Ub3AsIHNjcm9sbEJvdHRvbSA9IHNjcm9sbFJlY3QuYm90dG9tIC0gcGFnZS5tYXJnaW5Cb3R0b207XG4gICAgICAgIGlmIChzdGFydFBvcyAmJiBzdGFydFBvcy50b3AgPiBzY3JvbGxUb3AgJiYgc3RhcnRQb3MuYm90dG9tIDwgc2Nyb2xsQm90dG9tKVxuICAgICAgICAgICAgZWZmZWN0ID0gdmlldy5FZGl0b3JWaWV3LnNjcm9sbEludG9WaWV3KHNlbGVjdGlvbi5tYWluLmhlYWQsIHsgeTogXCJzdGFydFwiLCB5TWFyZ2luOiBzdGFydFBvcy50b3AgLSBzY3JvbGxUb3AgfSk7XG4gICAgfVxuICAgIHZpZXckMS5kaXNwYXRjaChzZXRTZWwoc3RhdGUsIHNlbGVjdGlvbiksIHsgZWZmZWN0czogZWZmZWN0IH0pO1xuICAgIHJldHVybiB0cnVlO1xufVxuLyoqXG5Nb3ZlIHRoZSBzZWxlY3Rpb24gb25lIHBhZ2UgdXAuXG4qL1xuY29uc3QgY3Vyc29yUGFnZVVwID0gdmlldyA9PiBjdXJzb3JCeVBhZ2UodmlldywgZmFsc2UpO1xuLyoqXG5Nb3ZlIHRoZSBzZWxlY3Rpb24gb25lIHBhZ2UgZG93bi5cbiovXG5jb25zdCBjdXJzb3JQYWdlRG93biA9IHZpZXcgPT4gY3Vyc29yQnlQYWdlKHZpZXcsIHRydWUpO1xuZnVuY3Rpb24gbW92ZUJ5TGluZUJvdW5kYXJ5KHZpZXcsIHN0YXJ0LCBmb3J3YXJkKSB7XG4gICAgbGV0IGxpbmUgPSB2aWV3LmxpbmVCbG9ja0F0KHN0YXJ0LmhlYWQpLCBtb3ZlZCA9IHZpZXcubW92ZVRvTGluZUJvdW5kYXJ5KHN0YXJ0LCBmb3J3YXJkKTtcbiAgICBpZiAobW92ZWQuaGVhZCA9PSBzdGFydC5oZWFkICYmIG1vdmVkLmhlYWQgIT0gKGZvcndhcmQgPyBsaW5lLnRvIDogbGluZS5mcm9tKSlcbiAgICAgICAgbW92ZWQgPSB2aWV3Lm1vdmVUb0xpbmVCb3VuZGFyeShzdGFydCwgZm9yd2FyZCwgZmFsc2UpO1xuICAgIGlmICghZm9yd2FyZCAmJiBtb3ZlZC5oZWFkID09IGxpbmUuZnJvbSAmJiBsaW5lLmxlbmd0aCkge1xuICAgICAgICBsZXQgc3BhY2UgPSAvXlxccyovLmV4ZWModmlldy5zdGF0ZS5zbGljZURvYyhsaW5lLmZyb20sIE1hdGgubWluKGxpbmUuZnJvbSArIDEwMCwgbGluZS50bykpKVswXS5sZW5ndGg7XG4gICAgICAgIGlmIChzcGFjZSAmJiBzdGFydC5oZWFkICE9IGxpbmUuZnJvbSArIHNwYWNlKVxuICAgICAgICAgICAgbW92ZWQgPSBzdGF0ZS5FZGl0b3JTZWxlY3Rpb24uY3Vyc29yKGxpbmUuZnJvbSArIHNwYWNlKTtcbiAgICB9XG4gICAgcmV0dXJuIG1vdmVkO1xufVxuLyoqXG5Nb3ZlIHRoZSBzZWxlY3Rpb24gdG8gdGhlIG5leHQgbGluZSB3cmFwIHBvaW50LCBvciB0byB0aGUgZW5kIG9mXG50aGUgbGluZSBpZiB0aGVyZSBpc24ndCBvbmUgbGVmdCBvbiB0aGlzIGxpbmUuXG4qL1xuY29uc3QgY3Vyc29yTGluZUJvdW5kYXJ5Rm9yd2FyZCA9IHZpZXcgPT4gbW92ZVNlbCh2aWV3LCByYW5nZSA9PiBtb3ZlQnlMaW5lQm91bmRhcnkodmlldywgcmFuZ2UsIHRydWUpKTtcbi8qKlxuTW92ZSB0aGUgc2VsZWN0aW9uIHRvIHByZXZpb3VzIGxpbmUgd3JhcCBwb2ludCwgb3IgZmFpbGluZyB0aGF0IHRvXG50aGUgc3RhcnQgb2YgdGhlIGxpbmUuIElmIHRoZSBsaW5lIGlzIGluZGVudGVkLCBhbmQgdGhlIGN1cnNvclxuaXNuJ3QgYWxyZWFkeSBhdCB0aGUgZW5kIG9mIHRoZSBpbmRlbnRhdGlvbiwgdGhpcyB3aWxsIG1vdmUgdG8gdGhlXG5lbmQgb2YgdGhlIGluZGVudGF0aW9uIGluc3RlYWQgb2YgdGhlIHN0YXJ0IG9mIHRoZSBsaW5lLlxuKi9cbmNvbnN0IGN1cnNvckxpbmVCb3VuZGFyeUJhY2t3YXJkID0gdmlldyA9PiBtb3ZlU2VsKHZpZXcsIHJhbmdlID0+IG1vdmVCeUxpbmVCb3VuZGFyeSh2aWV3LCByYW5nZSwgZmFsc2UpKTtcbi8qKlxuTW92ZSB0aGUgc2VsZWN0aW9uIG9uZSBsaW5lIHdyYXAgcG9pbnQgdG8gdGhlIGxlZnQuXG4qL1xuY29uc3QgY3Vyc29yTGluZUJvdW5kYXJ5TGVmdCA9IHZpZXcgPT4gbW92ZVNlbCh2aWV3LCByYW5nZSA9PiBtb3ZlQnlMaW5lQm91bmRhcnkodmlldywgcmFuZ2UsICFsdHJBdEN1cnNvcih2aWV3KSkpO1xuLyoqXG5Nb3ZlIHRoZSBzZWxlY3Rpb24gb25lIGxpbmUgd3JhcCBwb2ludCB0byB0aGUgcmlnaHQuXG4qL1xuY29uc3QgY3Vyc29yTGluZUJvdW5kYXJ5UmlnaHQgPSB2aWV3ID0+IG1vdmVTZWwodmlldywgcmFuZ2UgPT4gbW92ZUJ5TGluZUJvdW5kYXJ5KHZpZXcsIHJhbmdlLCBsdHJBdEN1cnNvcih2aWV3KSkpO1xuLyoqXG5Nb3ZlIHRoZSBzZWxlY3Rpb24gdG8gdGhlIHN0YXJ0IG9mIHRoZSBsaW5lLlxuKi9cbmNvbnN0IGN1cnNvckxpbmVTdGFydCA9IHZpZXcgPT4gbW92ZVNlbCh2aWV3LCByYW5nZSA9PiBzdGF0ZS5FZGl0b3JTZWxlY3Rpb24uY3Vyc29yKHZpZXcubGluZUJsb2NrQXQocmFuZ2UuaGVhZCkuZnJvbSwgMSkpO1xuLyoqXG5Nb3ZlIHRoZSBzZWxlY3Rpb24gdG8gdGhlIGVuZCBvZiB0aGUgbGluZS5cbiovXG5jb25zdCBjdXJzb3JMaW5lRW5kID0gdmlldyA9PiBtb3ZlU2VsKHZpZXcsIHJhbmdlID0+IHN0YXRlLkVkaXRvclNlbGVjdGlvbi5jdXJzb3Iodmlldy5saW5lQmxvY2tBdChyYW5nZS5oZWFkKS50bywgLTEpKTtcbmZ1bmN0aW9uIHRvTWF0Y2hpbmdCcmFja2V0KHN0YXRlJDEsIGRpc3BhdGNoLCBleHRlbmQpIHtcbiAgICBsZXQgZm91bmQgPSBmYWxzZSwgc2VsZWN0aW9uID0gdXBkYXRlU2VsKHN0YXRlJDEuc2VsZWN0aW9uLCByYW5nZSA9PiB7XG4gICAgICAgIGxldCBtYXRjaGluZyA9IGxhbmd1YWdlLm1hdGNoQnJhY2tldHMoc3RhdGUkMSwgcmFuZ2UuaGVhZCwgLTEpXG4gICAgICAgICAgICB8fCBsYW5ndWFnZS5tYXRjaEJyYWNrZXRzKHN0YXRlJDEsIHJhbmdlLmhlYWQsIDEpXG4gICAgICAgICAgICB8fCAocmFuZ2UuaGVhZCA+IDAgJiYgbGFuZ3VhZ2UubWF0Y2hCcmFja2V0cyhzdGF0ZSQxLCByYW5nZS5oZWFkIC0gMSwgMSkpXG4gICAgICAgICAgICB8fCAocmFuZ2UuaGVhZCA8IHN0YXRlJDEuZG9jLmxlbmd0aCAmJiBsYW5ndWFnZS5tYXRjaEJyYWNrZXRzKHN0YXRlJDEsIHJhbmdlLmhlYWQgKyAxLCAtMSkpO1xuICAgICAgICBpZiAoIW1hdGNoaW5nIHx8ICFtYXRjaGluZy5lbmQpXG4gICAgICAgICAgICByZXR1cm4gcmFuZ2U7XG4gICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgbGV0IGhlYWQgPSBtYXRjaGluZy5zdGFydC5mcm9tID09IHJhbmdlLmhlYWQgPyBtYXRjaGluZy5lbmQudG8gOiBtYXRjaGluZy5lbmQuZnJvbTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZCA/IHN0YXRlLkVkaXRvclNlbGVjdGlvbi5yYW5nZShyYW5nZS5hbmNob3IsIGhlYWQpIDogc3RhdGUuRWRpdG9yU2VsZWN0aW9uLmN1cnNvcihoZWFkKTtcbiAgICB9KTtcbiAgICBpZiAoIWZvdW5kKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgZGlzcGF0Y2goc2V0U2VsKHN0YXRlJDEsIHNlbGVjdGlvbikpO1xuICAgIHJldHVybiB0cnVlO1xufVxuLyoqXG5Nb3ZlIHRoZSBzZWxlY3Rpb24gdG8gdGhlIGJyYWNrZXQgbWF0Y2hpbmcgdGhlIG9uZSBpdCBpcyBjdXJyZW50bHlcbm9uLCBpZiBhbnkuXG4qL1xuY29uc3QgY3Vyc29yTWF0Y2hpbmdCcmFja2V0ID0gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHRvTWF0Y2hpbmdCcmFja2V0KHN0YXRlLCBkaXNwYXRjaCwgZmFsc2UpO1xuLyoqXG5FeHRlbmQgdGhlIHNlbGVjdGlvbiB0byB0aGUgYnJhY2tldCBtYXRjaGluZyB0aGUgb25lIHRoZSBzZWxlY3Rpb25cbmhlYWQgaXMgY3VycmVudGx5IG9uLCBpZiBhbnkuXG4qL1xuY29uc3Qgc2VsZWN0TWF0Y2hpbmdCcmFja2V0ID0gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHRvTWF0Y2hpbmdCcmFja2V0KHN0YXRlLCBkaXNwYXRjaCwgdHJ1ZSk7XG5mdW5jdGlvbiBleHRlbmRTZWwodmlldywgaG93KSB7XG4gICAgbGV0IHNlbGVjdGlvbiA9IHVwZGF0ZVNlbCh2aWV3LnN0YXRlLnNlbGVjdGlvbiwgcmFuZ2UgPT4ge1xuICAgICAgICBsZXQgaGVhZCA9IGhvdyhyYW5nZSk7XG4gICAgICAgIHJldHVybiBzdGF0ZS5FZGl0b3JTZWxlY3Rpb24ucmFuZ2UocmFuZ2UuYW5jaG9yLCBoZWFkLmhlYWQsIGhlYWQuZ29hbENvbHVtbiwgaGVhZC5iaWRpTGV2ZWwgfHwgdW5kZWZpbmVkKTtcbiAgICB9KTtcbiAgICBpZiAoc2VsZWN0aW9uLmVxKHZpZXcuc3RhdGUuc2VsZWN0aW9uKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHZpZXcuZGlzcGF0Y2goc2V0U2VsKHZpZXcuc3RhdGUsIHNlbGVjdGlvbikpO1xuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gc2VsZWN0QnlDaGFyKHZpZXcsIGZvcndhcmQpIHtcbiAgICByZXR1cm4gZXh0ZW5kU2VsKHZpZXcsIHJhbmdlID0+IHZpZXcubW92ZUJ5Q2hhcihyYW5nZSwgZm9yd2FyZCkpO1xufVxuLyoqXG5Nb3ZlIHRoZSBzZWxlY3Rpb24gaGVhZCBvbmUgY2hhcmFjdGVyIHRvIHRoZSBsZWZ0LCB3aGlsZSBsZWF2aW5nXG50aGUgYW5jaG9yIGluIHBsYWNlLlxuKi9cbmNvbnN0IHNlbGVjdENoYXJMZWZ0ID0gdmlldyA9PiBzZWxlY3RCeUNoYXIodmlldywgIWx0ckF0Q3Vyc29yKHZpZXcpKTtcbi8qKlxuTW92ZSB0aGUgc2VsZWN0aW9uIGhlYWQgb25lIGNoYXJhY3RlciB0byB0aGUgcmlnaHQuXG4qL1xuY29uc3Qgc2VsZWN0Q2hhclJpZ2h0ID0gdmlldyA9PiBzZWxlY3RCeUNoYXIodmlldywgbHRyQXRDdXJzb3IodmlldykpO1xuLyoqXG5Nb3ZlIHRoZSBzZWxlY3Rpb24gaGVhZCBvbmUgY2hhcmFjdGVyIGZvcndhcmQuXG4qL1xuY29uc3Qgc2VsZWN0Q2hhckZvcndhcmQgPSB2aWV3ID0+IHNlbGVjdEJ5Q2hhcih2aWV3LCB0cnVlKTtcbi8qKlxuTW92ZSB0aGUgc2VsZWN0aW9uIGhlYWQgb25lIGNoYXJhY3RlciBiYWNrd2FyZC5cbiovXG5jb25zdCBzZWxlY3RDaGFyQmFja3dhcmQgPSB2aWV3ID0+IHNlbGVjdEJ5Q2hhcih2aWV3LCBmYWxzZSk7XG5mdW5jdGlvbiBzZWxlY3RCeUdyb3VwKHZpZXcsIGZvcndhcmQpIHtcbiAgICByZXR1cm4gZXh0ZW5kU2VsKHZpZXcsIHJhbmdlID0+IHZpZXcubW92ZUJ5R3JvdXAocmFuZ2UsIGZvcndhcmQpKTtcbn1cbi8qKlxuTW92ZSB0aGUgc2VsZWN0aW9uIGhlYWQgb25lIFtncm91cF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNjb21tYW5kcy5jdXJzb3JHcm91cExlZnQpIHRvXG50aGUgbGVmdC5cbiovXG5jb25zdCBzZWxlY3RHcm91cExlZnQgPSB2aWV3ID0+IHNlbGVjdEJ5R3JvdXAodmlldywgIWx0ckF0Q3Vyc29yKHZpZXcpKTtcbi8qKlxuTW92ZSB0aGUgc2VsZWN0aW9uIGhlYWQgb25lIGdyb3VwIHRvIHRoZSByaWdodC5cbiovXG5jb25zdCBzZWxlY3RHcm91cFJpZ2h0ID0gdmlldyA9PiBzZWxlY3RCeUdyb3VwKHZpZXcsIGx0ckF0Q3Vyc29yKHZpZXcpKTtcbi8qKlxuTW92ZSB0aGUgc2VsZWN0aW9uIGhlYWQgb25lIGdyb3VwIGZvcndhcmQuXG4qL1xuY29uc3Qgc2VsZWN0R3JvdXBGb3J3YXJkID0gdmlldyA9PiBzZWxlY3RCeUdyb3VwKHZpZXcsIHRydWUpO1xuLyoqXG5Nb3ZlIHRoZSBzZWxlY3Rpb24gaGVhZCBvbmUgZ3JvdXAgYmFja3dhcmQuXG4qL1xuY29uc3Qgc2VsZWN0R3JvdXBCYWNrd2FyZCA9IHZpZXcgPT4gc2VsZWN0QnlHcm91cCh2aWV3LCBmYWxzZSk7XG5mdW5jdGlvbiBzZWxlY3RCeVN1YndvcmQodmlldywgZm9yd2FyZCkge1xuICAgIHJldHVybiBleHRlbmRTZWwodmlldywgcmFuZ2UgPT4gbW92ZUJ5U3Vid29yZCh2aWV3LCByYW5nZSwgZm9yd2FyZCkpO1xufVxuLyoqXG5Nb3ZlIHRoZSBzZWxlY3Rpb24gaGVhZCBvbmUgZ3JvdXAgb3IgY2FtZWwtY2FzZSBzdWJ3b3JkIGZvcndhcmQuXG4qL1xuY29uc3Qgc2VsZWN0U3Vid29yZEZvcndhcmQgPSB2aWV3ID0+IHNlbGVjdEJ5U3Vid29yZCh2aWV3LCB0cnVlKTtcbi8qKlxuTW92ZSB0aGUgc2VsZWN0aW9uIGhlYWQgb25lIGdyb3VwIG9yIHN1YndvcmQgYmFja3dhcmQuXG4qL1xuY29uc3Qgc2VsZWN0U3Vid29yZEJhY2t3YXJkID0gdmlldyA9PiBzZWxlY3RCeVN1YndvcmQodmlldywgZmFsc2UpO1xuLyoqXG5Nb3ZlIHRoZSBzZWxlY3Rpb24gaGVhZCBvdmVyIHRoZSBuZXh0IHN5bnRhY3RpYyBlbGVtZW50IHRvIHRoZSBsZWZ0LlxuKi9cbmNvbnN0IHNlbGVjdFN5bnRheExlZnQgPSB2aWV3ID0+IGV4dGVuZFNlbCh2aWV3LCByYW5nZSA9PiBtb3ZlQnlTeW50YXgodmlldy5zdGF0ZSwgcmFuZ2UsICFsdHJBdEN1cnNvcih2aWV3KSkpO1xuLyoqXG5Nb3ZlIHRoZSBzZWxlY3Rpb24gaGVhZCBvdmVyIHRoZSBuZXh0IHN5bnRhY3RpYyBlbGVtZW50IHRvIHRoZSByaWdodC5cbiovXG5jb25zdCBzZWxlY3RTeW50YXhSaWdodCA9IHZpZXcgPT4gZXh0ZW5kU2VsKHZpZXcsIHJhbmdlID0+IG1vdmVCeVN5bnRheCh2aWV3LnN0YXRlLCByYW5nZSwgbHRyQXRDdXJzb3IodmlldykpKTtcbmZ1bmN0aW9uIHNlbGVjdEJ5TGluZSh2aWV3LCBmb3J3YXJkKSB7XG4gICAgcmV0dXJuIGV4dGVuZFNlbCh2aWV3LCByYW5nZSA9PiB2aWV3Lm1vdmVWZXJ0aWNhbGx5KHJhbmdlLCBmb3J3YXJkKSk7XG59XG4vKipcbk1vdmUgdGhlIHNlbGVjdGlvbiBoZWFkIG9uZSBsaW5lIHVwLlxuKi9cbmNvbnN0IHNlbGVjdExpbmVVcCA9IHZpZXcgPT4gc2VsZWN0QnlMaW5lKHZpZXcsIGZhbHNlKTtcbi8qKlxuTW92ZSB0aGUgc2VsZWN0aW9uIGhlYWQgb25lIGxpbmUgZG93bi5cbiovXG5jb25zdCBzZWxlY3RMaW5lRG93biA9IHZpZXcgPT4gc2VsZWN0QnlMaW5lKHZpZXcsIHRydWUpO1xuZnVuY3Rpb24gc2VsZWN0QnlQYWdlKHZpZXcsIGZvcndhcmQpIHtcbiAgICByZXR1cm4gZXh0ZW5kU2VsKHZpZXcsIHJhbmdlID0+IHZpZXcubW92ZVZlcnRpY2FsbHkocmFuZ2UsIGZvcndhcmQsIHBhZ2VJbmZvKHZpZXcpLmhlaWdodCkpO1xufVxuLyoqXG5Nb3ZlIHRoZSBzZWxlY3Rpb24gaGVhZCBvbmUgcGFnZSB1cC5cbiovXG5jb25zdCBzZWxlY3RQYWdlVXAgPSB2aWV3ID0+IHNlbGVjdEJ5UGFnZSh2aWV3LCBmYWxzZSk7XG4vKipcbk1vdmUgdGhlIHNlbGVjdGlvbiBoZWFkIG9uZSBwYWdlIGRvd24uXG4qL1xuY29uc3Qgc2VsZWN0UGFnZURvd24gPSB2aWV3ID0+IHNlbGVjdEJ5UGFnZSh2aWV3LCB0cnVlKTtcbi8qKlxuTW92ZSB0aGUgc2VsZWN0aW9uIGhlYWQgdG8gdGhlIG5leHQgbGluZSBib3VuZGFyeS5cbiovXG5jb25zdCBzZWxlY3RMaW5lQm91bmRhcnlGb3J3YXJkID0gdmlldyA9PiBleHRlbmRTZWwodmlldywgcmFuZ2UgPT4gbW92ZUJ5TGluZUJvdW5kYXJ5KHZpZXcsIHJhbmdlLCB0cnVlKSk7XG4vKipcbk1vdmUgdGhlIHNlbGVjdGlvbiBoZWFkIHRvIHRoZSBwcmV2aW91cyBsaW5lIGJvdW5kYXJ5LlxuKi9cbmNvbnN0IHNlbGVjdExpbmVCb3VuZGFyeUJhY2t3YXJkID0gdmlldyA9PiBleHRlbmRTZWwodmlldywgcmFuZ2UgPT4gbW92ZUJ5TGluZUJvdW5kYXJ5KHZpZXcsIHJhbmdlLCBmYWxzZSkpO1xuLyoqXG5Nb3ZlIHRoZSBzZWxlY3Rpb24gaGVhZCBvbmUgbGluZSBib3VuZGFyeSB0byB0aGUgbGVmdC5cbiovXG5jb25zdCBzZWxlY3RMaW5lQm91bmRhcnlMZWZ0ID0gdmlldyA9PiBleHRlbmRTZWwodmlldywgcmFuZ2UgPT4gbW92ZUJ5TGluZUJvdW5kYXJ5KHZpZXcsIHJhbmdlLCAhbHRyQXRDdXJzb3IodmlldykpKTtcbi8qKlxuTW92ZSB0aGUgc2VsZWN0aW9uIGhlYWQgb25lIGxpbmUgYm91bmRhcnkgdG8gdGhlIHJpZ2h0LlxuKi9cbmNvbnN0IHNlbGVjdExpbmVCb3VuZGFyeVJpZ2h0ID0gdmlldyA9PiBleHRlbmRTZWwodmlldywgcmFuZ2UgPT4gbW92ZUJ5TGluZUJvdW5kYXJ5KHZpZXcsIHJhbmdlLCBsdHJBdEN1cnNvcih2aWV3KSkpO1xuLyoqXG5Nb3ZlIHRoZSBzZWxlY3Rpb24gaGVhZCB0byB0aGUgc3RhcnQgb2YgdGhlIGxpbmUuXG4qL1xuY29uc3Qgc2VsZWN0TGluZVN0YXJ0ID0gdmlldyA9PiBleHRlbmRTZWwodmlldywgcmFuZ2UgPT4gc3RhdGUuRWRpdG9yU2VsZWN0aW9uLmN1cnNvcih2aWV3LmxpbmVCbG9ja0F0KHJhbmdlLmhlYWQpLmZyb20pKTtcbi8qKlxuTW92ZSB0aGUgc2VsZWN0aW9uIGhlYWQgdG8gdGhlIGVuZCBvZiB0aGUgbGluZS5cbiovXG5jb25zdCBzZWxlY3RMaW5lRW5kID0gdmlldyA9PiBleHRlbmRTZWwodmlldywgcmFuZ2UgPT4gc3RhdGUuRWRpdG9yU2VsZWN0aW9uLmN1cnNvcih2aWV3LmxpbmVCbG9ja0F0KHJhbmdlLmhlYWQpLnRvKSk7XG4vKipcbk1vdmUgdGhlIHNlbGVjdGlvbiB0byB0aGUgc3RhcnQgb2YgdGhlIGRvY3VtZW50LlxuKi9cbmNvbnN0IGN1cnNvckRvY1N0YXJ0ID0gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcbiAgICBkaXNwYXRjaChzZXRTZWwoc3RhdGUsIHsgYW5jaG9yOiAwIH0pKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn07XG4vKipcbk1vdmUgdGhlIHNlbGVjdGlvbiB0byB0aGUgZW5kIG9mIHRoZSBkb2N1bWVudC5cbiovXG5jb25zdCBjdXJzb3JEb2NFbmQgPSAoeyBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xuICAgIGRpc3BhdGNoKHNldFNlbChzdGF0ZSwgeyBhbmNob3I6IHN0YXRlLmRvYy5sZW5ndGggfSkpO1xuICAgIHJldHVybiB0cnVlO1xufTtcbi8qKlxuTW92ZSB0aGUgc2VsZWN0aW9uIGhlYWQgdG8gdGhlIHN0YXJ0IG9mIHRoZSBkb2N1bWVudC5cbiovXG5jb25zdCBzZWxlY3REb2NTdGFydCA9ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XG4gICAgZGlzcGF0Y2goc2V0U2VsKHN0YXRlLCB7IGFuY2hvcjogc3RhdGUuc2VsZWN0aW9uLm1haW4uYW5jaG9yLCBoZWFkOiAwIH0pKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn07XG4vKipcbk1vdmUgdGhlIHNlbGVjdGlvbiBoZWFkIHRvIHRoZSBlbmQgb2YgdGhlIGRvY3VtZW50LlxuKi9cbmNvbnN0IHNlbGVjdERvY0VuZCA9ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XG4gICAgZGlzcGF0Y2goc2V0U2VsKHN0YXRlLCB7IGFuY2hvcjogc3RhdGUuc2VsZWN0aW9uLm1haW4uYW5jaG9yLCBoZWFkOiBzdGF0ZS5kb2MubGVuZ3RoIH0pKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn07XG4vKipcblNlbGVjdCB0aGUgZW50aXJlIGRvY3VtZW50LlxuKi9cbmNvbnN0IHNlbGVjdEFsbCA9ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XG4gICAgZGlzcGF0Y2goc3RhdGUudXBkYXRlKHsgc2VsZWN0aW9uOiB7IGFuY2hvcjogMCwgaGVhZDogc3RhdGUuZG9jLmxlbmd0aCB9LCB1c2VyRXZlbnQ6IFwic2VsZWN0XCIgfSkpO1xuICAgIHJldHVybiB0cnVlO1xufTtcbi8qKlxuRXhwYW5kIHRoZSBzZWxlY3Rpb24gdG8gY292ZXIgZW50aXJlIGxpbmVzLlxuKi9cbmNvbnN0IHNlbGVjdExpbmUgPSAoeyBzdGF0ZTogc3RhdGUkMSwgZGlzcGF0Y2ggfSkgPT4ge1xuICAgIGxldCByYW5nZXMgPSBzZWxlY3RlZExpbmVCbG9ja3Moc3RhdGUkMSkubWFwKCh7IGZyb20sIHRvIH0pID0+IHN0YXRlLkVkaXRvclNlbGVjdGlvbi5yYW5nZShmcm9tLCBNYXRoLm1pbih0byArIDEsIHN0YXRlJDEuZG9jLmxlbmd0aCkpKTtcbiAgICBkaXNwYXRjaChzdGF0ZSQxLnVwZGF0ZSh7IHNlbGVjdGlvbjogc3RhdGUuRWRpdG9yU2VsZWN0aW9uLmNyZWF0ZShyYW5nZXMpLCB1c2VyRXZlbnQ6IFwic2VsZWN0XCIgfSkpO1xuICAgIHJldHVybiB0cnVlO1xufTtcbi8qKlxuU2VsZWN0IHRoZSBuZXh0IHN5bnRhY3RpYyBjb25zdHJ1Y3QgdGhhdCBpcyBsYXJnZXIgdGhhbiB0aGVcbnNlbGVjdGlvbi4gTm90ZSB0aGF0IHRoaXMgd2lsbCBvbmx5IHdvcmsgaW5zb2ZhciBhcyB0aGUgbGFuZ3VhZ2Vcbltwcm92aWRlcl0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNsYW5ndWFnZS5sYW5ndWFnZSkgeW91IHVzZSBidWlsZHMgdXAgYSBmdWxsXG5zeW50YXggdHJlZS5cbiovXG5jb25zdCBzZWxlY3RQYXJlbnRTeW50YXggPSAoeyBzdGF0ZTogc3RhdGUkMSwgZGlzcGF0Y2ggfSkgPT4ge1xuICAgIGxldCBzZWxlY3Rpb24gPSB1cGRhdGVTZWwoc3RhdGUkMS5zZWxlY3Rpb24sIHJhbmdlID0+IHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBsZXQgc3RhY2sgPSBsYW5ndWFnZS5zeW50YXhUcmVlKHN0YXRlJDEpLnJlc29sdmVTdGFjayhyYW5nZS5mcm9tLCAxKTtcbiAgICAgICAgZm9yIChsZXQgY3VyID0gc3RhY2s7IGN1cjsgY3VyID0gY3VyLm5leHQpIHtcbiAgICAgICAgICAgIGxldCB7IG5vZGUgfSA9IGN1cjtcbiAgICAgICAgICAgIGlmICgoKG5vZGUuZnJvbSA8IHJhbmdlLmZyb20gJiYgbm9kZS50byA+PSByYW5nZS50bykgfHxcbiAgICAgICAgICAgICAgICAobm9kZS50byA+IHJhbmdlLnRvICYmIG5vZGUuZnJvbSA8PSByYW5nZS5mcm9tKSkgJiZcbiAgICAgICAgICAgICAgICAoKF9hID0gbm9kZS5wYXJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wYXJlbnQpKVxuICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZS5FZGl0b3JTZWxlY3Rpb24ucmFuZ2Uobm9kZS50bywgbm9kZS5mcm9tKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmFuZ2U7XG4gICAgfSk7XG4gICAgZGlzcGF0Y2goc2V0U2VsKHN0YXRlJDEsIHNlbGVjdGlvbikpO1xuICAgIHJldHVybiB0cnVlO1xufTtcbi8qKlxuU2ltcGxpZnkgdGhlIGN1cnJlbnQgc2VsZWN0aW9uLiBXaGVuIG11bHRpcGxlIHJhbmdlcyBhcmUgc2VsZWN0ZWQsXG5yZWR1Y2UgaXQgdG8gaXRzIG1haW4gcmFuZ2UuIE90aGVyd2lzZSwgaWYgdGhlIHNlbGVjdGlvbiBpc1xubm9uLWVtcHR5LCBjb252ZXJ0IGl0IHRvIGEgY3Vyc29yIHNlbGVjdGlvbi5cbiovXG5jb25zdCBzaW1wbGlmeVNlbGVjdGlvbiA9ICh7IHN0YXRlOiBzdGF0ZSQxLCBkaXNwYXRjaCB9KSA9PiB7XG4gICAgbGV0IGN1ciA9IHN0YXRlJDEuc2VsZWN0aW9uLCBzZWxlY3Rpb24gPSBudWxsO1xuICAgIGlmIChjdXIucmFuZ2VzLmxlbmd0aCA+IDEpXG4gICAgICAgIHNlbGVjdGlvbiA9IHN0YXRlLkVkaXRvclNlbGVjdGlvbi5jcmVhdGUoW2N1ci5tYWluXSk7XG4gICAgZWxzZSBpZiAoIWN1ci5tYWluLmVtcHR5KVxuICAgICAgICBzZWxlY3Rpb24gPSBzdGF0ZS5FZGl0b3JTZWxlY3Rpb24uY3JlYXRlKFtzdGF0ZS5FZGl0b3JTZWxlY3Rpb24uY3Vyc29yKGN1ci5tYWluLmhlYWQpXSk7XG4gICAgaWYgKCFzZWxlY3Rpb24pXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBkaXNwYXRjaChzZXRTZWwoc3RhdGUkMSwgc2VsZWN0aW9uKSk7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuZnVuY3Rpb24gZGVsZXRlQnkodGFyZ2V0LCBieSkge1xuICAgIGlmICh0YXJnZXQuc3RhdGUucmVhZE9ubHkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBsZXQgZXZlbnQgPSBcImRlbGV0ZS5zZWxlY3Rpb25cIiwgeyBzdGF0ZTogc3RhdGUkMSB9ID0gdGFyZ2V0O1xuICAgIGxldCBjaGFuZ2VzID0gc3RhdGUkMS5jaGFuZ2VCeVJhbmdlKHJhbmdlID0+IHtcbiAgICAgICAgbGV0IHsgZnJvbSwgdG8gfSA9IHJhbmdlO1xuICAgICAgICBpZiAoZnJvbSA9PSB0bykge1xuICAgICAgICAgICAgbGV0IHRvd2FyZHMgPSBieShyYW5nZSk7XG4gICAgICAgICAgICBpZiAodG93YXJkcyA8IGZyb20pIHtcbiAgICAgICAgICAgICAgICBldmVudCA9IFwiZGVsZXRlLmJhY2t3YXJkXCI7XG4gICAgICAgICAgICAgICAgdG93YXJkcyA9IHNraXBBdG9taWModGFyZ2V0LCB0b3dhcmRzLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0b3dhcmRzID4gZnJvbSkge1xuICAgICAgICAgICAgICAgIGV2ZW50ID0gXCJkZWxldGUuZm9yd2FyZFwiO1xuICAgICAgICAgICAgICAgIHRvd2FyZHMgPSBza2lwQXRvbWljKHRhcmdldCwgdG93YXJkcywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmcm9tID0gTWF0aC5taW4oZnJvbSwgdG93YXJkcyk7XG4gICAgICAgICAgICB0byA9IE1hdGgubWF4KHRvLCB0b3dhcmRzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZyb20gPSBza2lwQXRvbWljKHRhcmdldCwgZnJvbSwgZmFsc2UpO1xuICAgICAgICAgICAgdG8gPSBza2lwQXRvbWljKHRhcmdldCwgdG8sIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmcm9tID09IHRvID8geyByYW5nZSB9IDogeyBjaGFuZ2VzOiB7IGZyb20sIHRvIH0sIHJhbmdlOiBzdGF0ZS5FZGl0b3JTZWxlY3Rpb24uY3Vyc29yKGZyb20sIGZyb20gPCByYW5nZS5oZWFkID8gLTEgOiAxKSB9O1xuICAgIH0pO1xuICAgIGlmIChjaGFuZ2VzLmNoYW5nZXMuZW1wdHkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB0YXJnZXQuZGlzcGF0Y2goc3RhdGUkMS51cGRhdGUoY2hhbmdlcywge1xuICAgICAgICBzY3JvbGxJbnRvVmlldzogdHJ1ZSxcbiAgICAgICAgdXNlckV2ZW50OiBldmVudCxcbiAgICAgICAgZWZmZWN0czogZXZlbnQgPT0gXCJkZWxldGUuc2VsZWN0aW9uXCIgPyB2aWV3LkVkaXRvclZpZXcuYW5ub3VuY2Uub2Yoc3RhdGUkMS5waHJhc2UoXCJTZWxlY3Rpb24gZGVsZXRlZFwiKSkgOiB1bmRlZmluZWRcbiAgICB9KSk7XG4gICAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBza2lwQXRvbWljKHRhcmdldCwgcG9zLCBmb3J3YXJkKSB7XG4gICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIHZpZXcuRWRpdG9yVmlldylcbiAgICAgICAgZm9yIChsZXQgcmFuZ2VzIG9mIHRhcmdldC5zdGF0ZS5mYWNldCh2aWV3LkVkaXRvclZpZXcuYXRvbWljUmFuZ2VzKS5tYXAoZiA9PiBmKHRhcmdldCkpKVxuICAgICAgICAgICAgcmFuZ2VzLmJldHdlZW4ocG9zLCBwb3MsIChmcm9tLCB0bykgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChmcm9tIDwgcG9zICYmIHRvID4gcG9zKVxuICAgICAgICAgICAgICAgICAgICBwb3MgPSBmb3J3YXJkID8gdG8gOiBmcm9tO1xuICAgICAgICAgICAgfSk7XG4gICAgcmV0dXJuIHBvcztcbn1cbmNvbnN0IGRlbGV0ZUJ5Q2hhciA9ICh0YXJnZXQsIGZvcndhcmQsIGJ5SW5kZW50VW5pdCkgPT4gZGVsZXRlQnkodGFyZ2V0LCByYW5nZSA9PiB7XG4gICAgbGV0IHBvcyA9IHJhbmdlLmZyb20sIHsgc3RhdGU6IHN0YXRlJDEgfSA9IHRhcmdldCwgbGluZSA9IHN0YXRlJDEuZG9jLmxpbmVBdChwb3MpLCBiZWZvcmUsIHRhcmdldFBvcztcbiAgICBpZiAoYnlJbmRlbnRVbml0ICYmICFmb3J3YXJkICYmIHBvcyA+IGxpbmUuZnJvbSAmJiBwb3MgPCBsaW5lLmZyb20gKyAyMDAgJiZcbiAgICAgICAgIS9bXiBcXHRdLy50ZXN0KGJlZm9yZSA9IGxpbmUudGV4dC5zbGljZSgwLCBwb3MgLSBsaW5lLmZyb20pKSkge1xuICAgICAgICBpZiAoYmVmb3JlW2JlZm9yZS5sZW5ndGggLSAxXSA9PSBcIlxcdFwiKVxuICAgICAgICAgICAgcmV0dXJuIHBvcyAtIDE7XG4gICAgICAgIGxldCBjb2wgPSBzdGF0ZS5jb3VudENvbHVtbihiZWZvcmUsIHN0YXRlJDEudGFiU2l6ZSksIGRyb3AgPSBjb2wgJSBsYW5ndWFnZS5nZXRJbmRlbnRVbml0KHN0YXRlJDEpIHx8IGxhbmd1YWdlLmdldEluZGVudFVuaXQoc3RhdGUkMSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZHJvcCAmJiBiZWZvcmVbYmVmb3JlLmxlbmd0aCAtIDEgLSBpXSA9PSBcIiBcIjsgaSsrKVxuICAgICAgICAgICAgcG9zLS07XG4gICAgICAgIHRhcmdldFBvcyA9IHBvcztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRhcmdldFBvcyA9IHN0YXRlLmZpbmRDbHVzdGVyQnJlYWsobGluZS50ZXh0LCBwb3MgLSBsaW5lLmZyb20sIGZvcndhcmQsIGZvcndhcmQpICsgbGluZS5mcm9tO1xuICAgICAgICBpZiAodGFyZ2V0UG9zID09IHBvcyAmJiBsaW5lLm51bWJlciAhPSAoZm9yd2FyZCA/IHN0YXRlJDEuZG9jLmxpbmVzIDogMSkpXG4gICAgICAgICAgICB0YXJnZXRQb3MgKz0gZm9yd2FyZCA/IDEgOiAtMTtcbiAgICAgICAgZWxzZSBpZiAoIWZvcndhcmQgJiYgL1tcXHVmZTAwLVxcdWZlMGZdLy50ZXN0KGxpbmUudGV4dC5zbGljZSh0YXJnZXRQb3MgLSBsaW5lLmZyb20sIHBvcyAtIGxpbmUuZnJvbSkpKVxuICAgICAgICAgICAgdGFyZ2V0UG9zID0gc3RhdGUuZmluZENsdXN0ZXJCcmVhayhsaW5lLnRleHQsIHRhcmdldFBvcyAtIGxpbmUuZnJvbSwgZmFsc2UsIGZhbHNlKSArIGxpbmUuZnJvbTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldFBvcztcbn0pO1xuLyoqXG5EZWxldGUgdGhlIHNlbGVjdGlvbiwgb3IsIGZvciBjdXJzb3Igc2VsZWN0aW9ucywgdGhlIGNoYXJhY3RlciBvclxuaW5kZW50YXRpb24gdW5pdCBiZWZvcmUgdGhlIGN1cnNvci5cbiovXG5jb25zdCBkZWxldGVDaGFyQmFja3dhcmQgPSB2aWV3ID0+IGRlbGV0ZUJ5Q2hhcih2aWV3LCBmYWxzZSwgdHJ1ZSk7XG4vKipcbkRlbGV0ZSB0aGUgc2VsZWN0aW9uIG9yIHRoZSBjaGFyYWN0ZXIgYmVmb3JlIHRoZSBjdXJzb3IuIERvZXMgbm90XG5pbXBsZW1lbnQgYW55IGV4dGVuZGVkIGJlaGF2aW9yIGxpa2UgZGVsZXRpbmcgd2hvbGUgaW5kZW50YXRpb25cbnVuaXRzIGluIG9uZSBnby5cbiovXG5jb25zdCBkZWxldGVDaGFyQmFja3dhcmRTdHJpY3QgPSB2aWV3ID0+IGRlbGV0ZUJ5Q2hhcih2aWV3LCBmYWxzZSwgZmFsc2UpO1xuLyoqXG5EZWxldGUgdGhlIHNlbGVjdGlvbiBvciB0aGUgY2hhcmFjdGVyIGFmdGVyIHRoZSBjdXJzb3IuXG4qL1xuY29uc3QgZGVsZXRlQ2hhckZvcndhcmQgPSB2aWV3ID0+IGRlbGV0ZUJ5Q2hhcih2aWV3LCB0cnVlLCBmYWxzZSk7XG5jb25zdCBkZWxldGVCeUdyb3VwID0gKHRhcmdldCwgZm9yd2FyZCkgPT4gZGVsZXRlQnkodGFyZ2V0LCByYW5nZSA9PiB7XG4gICAgbGV0IHBvcyA9IHJhbmdlLmhlYWQsIHsgc3RhdGU6IHN0YXRlJDEgfSA9IHRhcmdldCwgbGluZSA9IHN0YXRlJDEuZG9jLmxpbmVBdChwb3MpO1xuICAgIGxldCBjYXRlZ29yaXplID0gc3RhdGUkMS5jaGFyQ2F0ZWdvcml6ZXIocG9zKTtcbiAgICBmb3IgKGxldCBjYXQgPSBudWxsOzspIHtcbiAgICAgICAgaWYgKHBvcyA9PSAoZm9yd2FyZCA/IGxpbmUudG8gOiBsaW5lLmZyb20pKSB7XG4gICAgICAgICAgICBpZiAocG9zID09IHJhbmdlLmhlYWQgJiYgbGluZS5udW1iZXIgIT0gKGZvcndhcmQgPyBzdGF0ZSQxLmRvYy5saW5lcyA6IDEpKVxuICAgICAgICAgICAgICAgIHBvcyArPSBmb3J3YXJkID8gMSA6IC0xO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG5leHQgPSBzdGF0ZS5maW5kQ2x1c3RlckJyZWFrKGxpbmUudGV4dCwgcG9zIC0gbGluZS5mcm9tLCBmb3J3YXJkKSArIGxpbmUuZnJvbTtcbiAgICAgICAgbGV0IG5leHRDaGFyID0gbGluZS50ZXh0LnNsaWNlKE1hdGgubWluKHBvcywgbmV4dCkgLSBsaW5lLmZyb20sIE1hdGgubWF4KHBvcywgbmV4dCkgLSBsaW5lLmZyb20pO1xuICAgICAgICBsZXQgbmV4dENhdCA9IGNhdGVnb3JpemUobmV4dENoYXIpO1xuICAgICAgICBpZiAoY2F0ICE9IG51bGwgJiYgbmV4dENhdCAhPSBjYXQpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgaWYgKG5leHRDaGFyICE9IFwiIFwiIHx8IHBvcyAhPSByYW5nZS5oZWFkKVxuICAgICAgICAgICAgY2F0ID0gbmV4dENhdDtcbiAgICAgICAgcG9zID0gbmV4dDtcbiAgICB9XG4gICAgcmV0dXJuIHBvcztcbn0pO1xuLyoqXG5EZWxldGUgdGhlIHNlbGVjdGlvbiBvciBiYWNrd2FyZCB1bnRpbCB0aGUgZW5kIG9mIHRoZSBuZXh0XG5bZ3JvdXBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jdmlldy5FZGl0b3JWaWV3Lm1vdmVCeUdyb3VwKSwgb25seSBza2lwcGluZyBncm91cHMgb2ZcbndoaXRlc3BhY2Ugd2hlbiB0aGV5IGNvbnNpc3Qgb2YgYSBzaW5nbGUgc3BhY2UuXG4qL1xuY29uc3QgZGVsZXRlR3JvdXBCYWNrd2FyZCA9IHRhcmdldCA9PiBkZWxldGVCeUdyb3VwKHRhcmdldCwgZmFsc2UpO1xuLyoqXG5EZWxldGUgdGhlIHNlbGVjdGlvbiBvciBmb3J3YXJkIHVudGlsIHRoZSBlbmQgb2YgdGhlIG5leHQgZ3JvdXAuXG4qL1xuY29uc3QgZGVsZXRlR3JvdXBGb3J3YXJkID0gdGFyZ2V0ID0+IGRlbGV0ZUJ5R3JvdXAodGFyZ2V0LCB0cnVlKTtcbi8qKlxuRGVsZXRlIHRoZSBzZWxlY3Rpb24sIG9yLCBpZiBpdCBpcyBhIGN1cnNvciBzZWxlY3Rpb24sIGRlbGV0ZSB0b1xudGhlIGVuZCBvZiB0aGUgbGluZS4gSWYgdGhlIGN1cnNvciBpcyBkaXJlY3RseSBhdCB0aGUgZW5kIG9mIHRoZVxubGluZSwgZGVsZXRlIHRoZSBsaW5lIGJyZWFrIGFmdGVyIGl0LlxuKi9cbmNvbnN0IGRlbGV0ZVRvTGluZUVuZCA9IHZpZXcgPT4gZGVsZXRlQnkodmlldywgcmFuZ2UgPT4ge1xuICAgIGxldCBsaW5lRW5kID0gdmlldy5saW5lQmxvY2tBdChyYW5nZS5oZWFkKS50bztcbiAgICByZXR1cm4gcmFuZ2UuaGVhZCA8IGxpbmVFbmQgPyBsaW5lRW5kIDogTWF0aC5taW4odmlldy5zdGF0ZS5kb2MubGVuZ3RoLCByYW5nZS5oZWFkICsgMSk7XG59KTtcbi8qKlxuRGVsZXRlIHRoZSBzZWxlY3Rpb24sIG9yLCBpZiBpdCBpcyBhIGN1cnNvciBzZWxlY3Rpb24sIGRlbGV0ZSB0b1xudGhlIHN0YXJ0IG9mIHRoZSBsaW5lLiBJZiB0aGUgY3Vyc29yIGlzIGRpcmVjdGx5IGF0IHRoZSBzdGFydCBvZiB0aGVcbmxpbmUsIGRlbGV0ZSB0aGUgbGluZSBicmVhayBiZWZvcmUgaXQuXG4qL1xuY29uc3QgZGVsZXRlVG9MaW5lU3RhcnQgPSB2aWV3ID0+IGRlbGV0ZUJ5KHZpZXcsIHJhbmdlID0+IHtcbiAgICBsZXQgbGluZVN0YXJ0ID0gdmlldy5saW5lQmxvY2tBdChyYW5nZS5oZWFkKS5mcm9tO1xuICAgIHJldHVybiByYW5nZS5oZWFkID4gbGluZVN0YXJ0ID8gbGluZVN0YXJ0IDogTWF0aC5tYXgoMCwgcmFuZ2UuaGVhZCAtIDEpO1xufSk7XG4vKipcbkRlbGV0ZSB0aGUgc2VsZWN0aW9uLCBvciwgaWYgaXQgaXMgYSBjdXJzb3Igc2VsZWN0aW9uLCBkZWxldGUgdG9cbnRoZSBzdGFydCBvZiB0aGUgbGluZSBvciB0aGUgbmV4dCBsaW5lIHdyYXAgYmVmb3JlIHRoZSBjdXJzb3IuXG4qL1xuY29uc3QgZGVsZXRlTGluZUJvdW5kYXJ5QmFja3dhcmQgPSB2aWV3ID0+IGRlbGV0ZUJ5KHZpZXcsIHJhbmdlID0+IHtcbiAgICBsZXQgbGluZVN0YXJ0ID0gdmlldy5tb3ZlVG9MaW5lQm91bmRhcnkocmFuZ2UsIGZhbHNlKS5oZWFkO1xuICAgIHJldHVybiByYW5nZS5oZWFkID4gbGluZVN0YXJ0ID8gbGluZVN0YXJ0IDogTWF0aC5tYXgoMCwgcmFuZ2UuaGVhZCAtIDEpO1xufSk7XG4vKipcbkRlbGV0ZSB0aGUgc2VsZWN0aW9uLCBvciwgaWYgaXQgaXMgYSBjdXJzb3Igc2VsZWN0aW9uLCBkZWxldGUgdG9cbnRoZSBlbmQgb2YgdGhlIGxpbmUgb3IgdGhlIG5leHQgbGluZSB3cmFwIGFmdGVyIHRoZSBjdXJzb3IuXG4qL1xuY29uc3QgZGVsZXRlTGluZUJvdW5kYXJ5Rm9yd2FyZCA9IHZpZXcgPT4gZGVsZXRlQnkodmlldywgcmFuZ2UgPT4ge1xuICAgIGxldCBsaW5lU3RhcnQgPSB2aWV3Lm1vdmVUb0xpbmVCb3VuZGFyeShyYW5nZSwgdHJ1ZSkuaGVhZDtcbiAgICByZXR1cm4gcmFuZ2UuaGVhZCA8IGxpbmVTdGFydCA/IGxpbmVTdGFydCA6IE1hdGgubWluKHZpZXcuc3RhdGUuZG9jLmxlbmd0aCwgcmFuZ2UuaGVhZCArIDEpO1xufSk7XG4vKipcbkRlbGV0ZSBhbGwgd2hpdGVzcGFjZSBkaXJlY3RseSBiZWZvcmUgYSBsaW5lIGVuZCBmcm9tIHRoZVxuZG9jdW1lbnQuXG4qL1xuY29uc3QgZGVsZXRlVHJhaWxpbmdXaGl0ZXNwYWNlID0gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcbiAgICBpZiAoc3RhdGUucmVhZE9ubHkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBsZXQgY2hhbmdlcyA9IFtdO1xuICAgIGZvciAobGV0IHBvcyA9IDAsIHByZXYgPSBcIlwiLCBpdGVyID0gc3RhdGUuZG9jLml0ZXIoKTs7KSB7XG4gICAgICAgIGl0ZXIubmV4dCgpO1xuICAgICAgICBpZiAoaXRlci5saW5lQnJlYWsgfHwgaXRlci5kb25lKSB7XG4gICAgICAgICAgICBsZXQgdHJhaWxpbmcgPSBwcmV2LnNlYXJjaCgvXFxzKyQvKTtcbiAgICAgICAgICAgIGlmICh0cmFpbGluZyA+IC0xKVxuICAgICAgICAgICAgICAgIGNoYW5nZXMucHVzaCh7IGZyb206IHBvcyAtIChwcmV2Lmxlbmd0aCAtIHRyYWlsaW5nKSwgdG86IHBvcyB9KTtcbiAgICAgICAgICAgIGlmIChpdGVyLmRvbmUpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBwcmV2ID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHByZXYgPSBpdGVyLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHBvcyArPSBpdGVyLnZhbHVlLmxlbmd0aDtcbiAgICB9XG4gICAgaWYgKCFjaGFuZ2VzLmxlbmd0aClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGRpc3BhdGNoKHN0YXRlLnVwZGF0ZSh7IGNoYW5nZXMsIHVzZXJFdmVudDogXCJkZWxldGVcIiB9KSk7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuLyoqXG5SZXBsYWNlIGVhY2ggc2VsZWN0aW9uIHJhbmdlIHdpdGggYSBsaW5lIGJyZWFrLCBsZWF2aW5nIHRoZSBjdXJzb3Jcbm9uIHRoZSBsaW5lIGJlZm9yZSB0aGUgYnJlYWsuXG4qL1xuY29uc3Qgc3BsaXRMaW5lID0gKHsgc3RhdGU6IHN0YXRlJDEsIGRpc3BhdGNoIH0pID0+IHtcbiAgICBpZiAoc3RhdGUkMS5yZWFkT25seSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGxldCBjaGFuZ2VzID0gc3RhdGUkMS5jaGFuZ2VCeVJhbmdlKHJhbmdlID0+IHtcbiAgICAgICAgcmV0dXJuIHsgY2hhbmdlczogeyBmcm9tOiByYW5nZS5mcm9tLCB0bzogcmFuZ2UudG8sIGluc2VydDogc3RhdGUuVGV4dC5vZihbXCJcIiwgXCJcIl0pIH0sXG4gICAgICAgICAgICByYW5nZTogc3RhdGUuRWRpdG9yU2VsZWN0aW9uLmN1cnNvcihyYW5nZS5mcm9tKSB9O1xuICAgIH0pO1xuICAgIGRpc3BhdGNoKHN0YXRlJDEudXBkYXRlKGNoYW5nZXMsIHsgc2Nyb2xsSW50b1ZpZXc6IHRydWUsIHVzZXJFdmVudDogXCJpbnB1dFwiIH0pKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn07XG4vKipcbkZsaXAgdGhlIGNoYXJhY3RlcnMgYmVmb3JlIGFuZCBhZnRlciB0aGUgY3Vyc29yKHMpLlxuKi9cbmNvbnN0IHRyYW5zcG9zZUNoYXJzID0gKHsgc3RhdGU6IHN0YXRlJDEsIGRpc3BhdGNoIH0pID0+IHtcbiAgICBpZiAoc3RhdGUkMS5yZWFkT25seSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGxldCBjaGFuZ2VzID0gc3RhdGUkMS5jaGFuZ2VCeVJhbmdlKHJhbmdlID0+IHtcbiAgICAgICAgaWYgKCFyYW5nZS5lbXB0eSB8fCByYW5nZS5mcm9tID09IDAgfHwgcmFuZ2UuZnJvbSA9PSBzdGF0ZSQxLmRvYy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4geyByYW5nZSB9O1xuICAgICAgICBsZXQgcG9zID0gcmFuZ2UuZnJvbSwgbGluZSA9IHN0YXRlJDEuZG9jLmxpbmVBdChwb3MpO1xuICAgICAgICBsZXQgZnJvbSA9IHBvcyA9PSBsaW5lLmZyb20gPyBwb3MgLSAxIDogc3RhdGUuZmluZENsdXN0ZXJCcmVhayhsaW5lLnRleHQsIHBvcyAtIGxpbmUuZnJvbSwgZmFsc2UpICsgbGluZS5mcm9tO1xuICAgICAgICBsZXQgdG8gPSBwb3MgPT0gbGluZS50byA/IHBvcyArIDEgOiBzdGF0ZS5maW5kQ2x1c3RlckJyZWFrKGxpbmUudGV4dCwgcG9zIC0gbGluZS5mcm9tLCB0cnVlKSArIGxpbmUuZnJvbTtcbiAgICAgICAgcmV0dXJuIHsgY2hhbmdlczogeyBmcm9tLCB0bywgaW5zZXJ0OiBzdGF0ZSQxLmRvYy5zbGljZShwb3MsIHRvKS5hcHBlbmQoc3RhdGUkMS5kb2Muc2xpY2UoZnJvbSwgcG9zKSkgfSxcbiAgICAgICAgICAgIHJhbmdlOiBzdGF0ZS5FZGl0b3JTZWxlY3Rpb24uY3Vyc29yKHRvKSB9O1xuICAgIH0pO1xuICAgIGlmIChjaGFuZ2VzLmNoYW5nZXMuZW1wdHkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBkaXNwYXRjaChzdGF0ZSQxLnVwZGF0ZShjaGFuZ2VzLCB7IHNjcm9sbEludG9WaWV3OiB0cnVlLCB1c2VyRXZlbnQ6IFwibW92ZS5jaGFyYWN0ZXJcIiB9KSk7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuZnVuY3Rpb24gc2VsZWN0ZWRMaW5lQmxvY2tzKHN0YXRlKSB7XG4gICAgbGV0IGJsb2NrcyA9IFtdLCB1cHRvID0gLTE7XG4gICAgZm9yIChsZXQgcmFuZ2Ugb2Ygc3RhdGUuc2VsZWN0aW9uLnJhbmdlcykge1xuICAgICAgICBsZXQgc3RhcnRMaW5lID0gc3RhdGUuZG9jLmxpbmVBdChyYW5nZS5mcm9tKSwgZW5kTGluZSA9IHN0YXRlLmRvYy5saW5lQXQocmFuZ2UudG8pO1xuICAgICAgICBpZiAoIXJhbmdlLmVtcHR5ICYmIHJhbmdlLnRvID09IGVuZExpbmUuZnJvbSlcbiAgICAgICAgICAgIGVuZExpbmUgPSBzdGF0ZS5kb2MubGluZUF0KHJhbmdlLnRvIC0gMSk7XG4gICAgICAgIGlmICh1cHRvID49IHN0YXJ0TGluZS5udW1iZXIpIHtcbiAgICAgICAgICAgIGxldCBwcmV2ID0gYmxvY2tzW2Jsb2Nrcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIHByZXYudG8gPSBlbmRMaW5lLnRvO1xuICAgICAgICAgICAgcHJldi5yYW5nZXMucHVzaChyYW5nZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBibG9ja3MucHVzaCh7IGZyb206IHN0YXJ0TGluZS5mcm9tLCB0bzogZW5kTGluZS50bywgcmFuZ2VzOiBbcmFuZ2VdIH0pO1xuICAgICAgICB9XG4gICAgICAgIHVwdG8gPSBlbmRMaW5lLm51bWJlciArIDE7XG4gICAgfVxuICAgIHJldHVybiBibG9ja3M7XG59XG5mdW5jdGlvbiBtb3ZlTGluZShzdGF0ZSQxLCBkaXNwYXRjaCwgZm9yd2FyZCkge1xuICAgIGlmIChzdGF0ZSQxLnJlYWRPbmx5KVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0IGNoYW5nZXMgPSBbXSwgcmFuZ2VzID0gW107XG4gICAgZm9yIChsZXQgYmxvY2sgb2Ygc2VsZWN0ZWRMaW5lQmxvY2tzKHN0YXRlJDEpKSB7XG4gICAgICAgIGlmIChmb3J3YXJkID8gYmxvY2sudG8gPT0gc3RhdGUkMS5kb2MubGVuZ3RoIDogYmxvY2suZnJvbSA9PSAwKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGxldCBuZXh0TGluZSA9IHN0YXRlJDEuZG9jLmxpbmVBdChmb3J3YXJkID8gYmxvY2sudG8gKyAxIDogYmxvY2suZnJvbSAtIDEpO1xuICAgICAgICBsZXQgc2l6ZSA9IG5leHRMaW5lLmxlbmd0aCArIDE7XG4gICAgICAgIGlmIChmb3J3YXJkKSB7XG4gICAgICAgICAgICBjaGFuZ2VzLnB1c2goeyBmcm9tOiBibG9jay50bywgdG86IG5leHRMaW5lLnRvIH0sIHsgZnJvbTogYmxvY2suZnJvbSwgaW5zZXJ0OiBuZXh0TGluZS50ZXh0ICsgc3RhdGUkMS5saW5lQnJlYWsgfSk7XG4gICAgICAgICAgICBmb3IgKGxldCByIG9mIGJsb2NrLnJhbmdlcylcbiAgICAgICAgICAgICAgICByYW5nZXMucHVzaChzdGF0ZS5FZGl0b3JTZWxlY3Rpb24ucmFuZ2UoTWF0aC5taW4oc3RhdGUkMS5kb2MubGVuZ3RoLCByLmFuY2hvciArIHNpemUpLCBNYXRoLm1pbihzdGF0ZSQxLmRvYy5sZW5ndGgsIHIuaGVhZCArIHNpemUpKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjaGFuZ2VzLnB1c2goeyBmcm9tOiBuZXh0TGluZS5mcm9tLCB0bzogYmxvY2suZnJvbSB9LCB7IGZyb206IGJsb2NrLnRvLCBpbnNlcnQ6IHN0YXRlJDEubGluZUJyZWFrICsgbmV4dExpbmUudGV4dCB9KTtcbiAgICAgICAgICAgIGZvciAobGV0IHIgb2YgYmxvY2sucmFuZ2VzKVxuICAgICAgICAgICAgICAgIHJhbmdlcy5wdXNoKHN0YXRlLkVkaXRvclNlbGVjdGlvbi5yYW5nZShyLmFuY2hvciAtIHNpemUsIHIuaGVhZCAtIHNpemUpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWNoYW5nZXMubGVuZ3RoKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgZGlzcGF0Y2goc3RhdGUkMS51cGRhdGUoe1xuICAgICAgICBjaGFuZ2VzLFxuICAgICAgICBzY3JvbGxJbnRvVmlldzogdHJ1ZSxcbiAgICAgICAgc2VsZWN0aW9uOiBzdGF0ZS5FZGl0b3JTZWxlY3Rpb24uY3JlYXRlKHJhbmdlcywgc3RhdGUkMS5zZWxlY3Rpb24ubWFpbkluZGV4KSxcbiAgICAgICAgdXNlckV2ZW50OiBcIm1vdmUubGluZVwiXG4gICAgfSkpO1xuICAgIHJldHVybiB0cnVlO1xufVxuLyoqXG5Nb3ZlIHRoZSBzZWxlY3RlZCBsaW5lcyB1cCBvbmUgbGluZS5cbiovXG5jb25zdCBtb3ZlTGluZVVwID0gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IG1vdmVMaW5lKHN0YXRlLCBkaXNwYXRjaCwgZmFsc2UpO1xuLyoqXG5Nb3ZlIHRoZSBzZWxlY3RlZCBsaW5lcyBkb3duIG9uZSBsaW5lLlxuKi9cbmNvbnN0IG1vdmVMaW5lRG93biA9ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiBtb3ZlTGluZShzdGF0ZSwgZGlzcGF0Y2gsIHRydWUpO1xuZnVuY3Rpb24gY29weUxpbmUoc3RhdGUsIGRpc3BhdGNoLCBmb3J3YXJkKSB7XG4gICAgaWYgKHN0YXRlLnJlYWRPbmx5KVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0IGNoYW5nZXMgPSBbXTtcbiAgICBmb3IgKGxldCBibG9jayBvZiBzZWxlY3RlZExpbmVCbG9ja3Moc3RhdGUpKSB7XG4gICAgICAgIGlmIChmb3J3YXJkKVxuICAgICAgICAgICAgY2hhbmdlcy5wdXNoKHsgZnJvbTogYmxvY2suZnJvbSwgaW5zZXJ0OiBzdGF0ZS5kb2Muc2xpY2UoYmxvY2suZnJvbSwgYmxvY2sudG8pICsgc3RhdGUubGluZUJyZWFrIH0pO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBjaGFuZ2VzLnB1c2goeyBmcm9tOiBibG9jay50bywgaW5zZXJ0OiBzdGF0ZS5saW5lQnJlYWsgKyBzdGF0ZS5kb2Muc2xpY2UoYmxvY2suZnJvbSwgYmxvY2sudG8pIH0pO1xuICAgIH1cbiAgICBkaXNwYXRjaChzdGF0ZS51cGRhdGUoeyBjaGFuZ2VzLCBzY3JvbGxJbnRvVmlldzogdHJ1ZSwgdXNlckV2ZW50OiBcImlucHV0LmNvcHlsaW5lXCIgfSkpO1xuICAgIHJldHVybiB0cnVlO1xufVxuLyoqXG5DcmVhdGUgYSBjb3B5IG9mIHRoZSBzZWxlY3RlZCBsaW5lcy4gS2VlcCB0aGUgc2VsZWN0aW9uIGluIHRoZSB0b3AgY29weS5cbiovXG5jb25zdCBjb3B5TGluZVVwID0gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IGNvcHlMaW5lKHN0YXRlLCBkaXNwYXRjaCwgZmFsc2UpO1xuLyoqXG5DcmVhdGUgYSBjb3B5IG9mIHRoZSBzZWxlY3RlZCBsaW5lcy4gS2VlcCB0aGUgc2VsZWN0aW9uIGluIHRoZSBib3R0b20gY29weS5cbiovXG5jb25zdCBjb3B5TGluZURvd24gPSAoeyBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4gY29weUxpbmUoc3RhdGUsIGRpc3BhdGNoLCB0cnVlKTtcbi8qKlxuRGVsZXRlIHNlbGVjdGVkIGxpbmVzLlxuKi9cbmNvbnN0IGRlbGV0ZUxpbmUgPSB2aWV3ID0+IHtcbiAgICBpZiAodmlldy5zdGF0ZS5yZWFkT25seSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGxldCB7IHN0YXRlIH0gPSB2aWV3LCBjaGFuZ2VzID0gc3RhdGUuY2hhbmdlcyhzZWxlY3RlZExpbmVCbG9ja3Moc3RhdGUpLm1hcCgoeyBmcm9tLCB0byB9KSA9PiB7XG4gICAgICAgIGlmIChmcm9tID4gMClcbiAgICAgICAgICAgIGZyb20tLTtcbiAgICAgICAgZWxzZSBpZiAodG8gPCBzdGF0ZS5kb2MubGVuZ3RoKVxuICAgICAgICAgICAgdG8rKztcbiAgICAgICAgcmV0dXJuIHsgZnJvbSwgdG8gfTtcbiAgICB9KSk7XG4gICAgbGV0IHNlbGVjdGlvbiA9IHVwZGF0ZVNlbChzdGF0ZS5zZWxlY3Rpb24sIHJhbmdlID0+IHtcbiAgICAgICAgbGV0IGRpc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmICh2aWV3LmxpbmVXcmFwcGluZykge1xuICAgICAgICAgICAgbGV0IGJsb2NrID0gdmlldy5saW5lQmxvY2tBdChyYW5nZS5oZWFkKSwgcG9zID0gdmlldy5jb29yZHNBdFBvcyhyYW5nZS5oZWFkLCByYW5nZS5hc3NvYyB8fCAxKTtcbiAgICAgICAgICAgIGlmIChwb3MpXG4gICAgICAgICAgICAgICAgZGlzdCA9IChibG9jay5ib3R0b20gKyB2aWV3LmRvY3VtZW50VG9wKSAtIHBvcy5ib3R0b20gKyB2aWV3LmRlZmF1bHRMaW5lSGVpZ2h0IC8gMjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmlldy5tb3ZlVmVydGljYWxseShyYW5nZSwgdHJ1ZSwgZGlzdCk7XG4gICAgfSkubWFwKGNoYW5nZXMpO1xuICAgIHZpZXcuZGlzcGF0Y2goeyBjaGFuZ2VzLCBzZWxlY3Rpb24sIHNjcm9sbEludG9WaWV3OiB0cnVlLCB1c2VyRXZlbnQ6IFwiZGVsZXRlLmxpbmVcIiB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbn07XG4vKipcblJlcGxhY2UgdGhlIHNlbGVjdGlvbiB3aXRoIGEgbmV3bGluZS5cbiovXG5jb25zdCBpbnNlcnROZXdsaW5lID0gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcbiAgICBkaXNwYXRjaChzdGF0ZS51cGRhdGUoc3RhdGUucmVwbGFjZVNlbGVjdGlvbihzdGF0ZS5saW5lQnJlYWspLCB7IHNjcm9sbEludG9WaWV3OiB0cnVlLCB1c2VyRXZlbnQ6IFwiaW5wdXRcIiB9KSk7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuLyoqXG5SZXBsYWNlIHRoZSBzZWxlY3Rpb24gd2l0aCBhIG5ld2xpbmUgYW5kIHRoZSBzYW1lIGFtb3VudCBvZlxuaW5kZW50YXRpb24gYXMgdGhlIGxpbmUgYWJvdmUuXG4qL1xuY29uc3QgaW5zZXJ0TmV3bGluZUtlZXBJbmRlbnQgPSAoeyBzdGF0ZTogc3RhdGUkMSwgZGlzcGF0Y2ggfSkgPT4ge1xuICAgIGRpc3BhdGNoKHN0YXRlJDEudXBkYXRlKHN0YXRlJDEuY2hhbmdlQnlSYW5nZShyYW5nZSA9PiB7XG4gICAgICAgIGxldCBpbmRlbnQgPSAvXlxccyovLmV4ZWMoc3RhdGUkMS5kb2MubGluZUF0KHJhbmdlLmZyb20pLnRleHQpWzBdO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2hhbmdlczogeyBmcm9tOiByYW5nZS5mcm9tLCB0bzogcmFuZ2UudG8sIGluc2VydDogc3RhdGUkMS5saW5lQnJlYWsgKyBpbmRlbnQgfSxcbiAgICAgICAgICAgIHJhbmdlOiBzdGF0ZS5FZGl0b3JTZWxlY3Rpb24uY3Vyc29yKHJhbmdlLmZyb20gKyBpbmRlbnQubGVuZ3RoICsgMSlcbiAgICAgICAgfTtcbiAgICB9KSwgeyBzY3JvbGxJbnRvVmlldzogdHJ1ZSwgdXNlckV2ZW50OiBcImlucHV0XCIgfSkpO1xuICAgIHJldHVybiB0cnVlO1xufTtcbmZ1bmN0aW9uIGlzQmV0d2VlbkJyYWNrZXRzKHN0YXRlLCBwb3MpIHtcbiAgICBpZiAoL1xcKFxcKXxcXFtcXF18XFx7XFx9Ly50ZXN0KHN0YXRlLnNsaWNlRG9jKHBvcyAtIDEsIHBvcyArIDEpKSlcbiAgICAgICAgcmV0dXJuIHsgZnJvbTogcG9zLCB0bzogcG9zIH07XG4gICAgbGV0IGNvbnRleHQgPSBsYW5ndWFnZS5zeW50YXhUcmVlKHN0YXRlKS5yZXNvbHZlSW5uZXIocG9zKTtcbiAgICBsZXQgYmVmb3JlID0gY29udGV4dC5jaGlsZEJlZm9yZShwb3MpLCBhZnRlciA9IGNvbnRleHQuY2hpbGRBZnRlcihwb3MpLCBjbG9zZWRCeTtcbiAgICBpZiAoYmVmb3JlICYmIGFmdGVyICYmIGJlZm9yZS50byA8PSBwb3MgJiYgYWZ0ZXIuZnJvbSA+PSBwb3MgJiZcbiAgICAgICAgKGNsb3NlZEJ5ID0gYmVmb3JlLnR5cGUucHJvcChjb21tb24uTm9kZVByb3AuY2xvc2VkQnkpKSAmJiBjbG9zZWRCeS5pbmRleE9mKGFmdGVyLm5hbWUpID4gLTEgJiZcbiAgICAgICAgc3RhdGUuZG9jLmxpbmVBdChiZWZvcmUudG8pLmZyb20gPT0gc3RhdGUuZG9jLmxpbmVBdChhZnRlci5mcm9tKS5mcm9tICYmXG4gICAgICAgICEvXFxTLy50ZXN0KHN0YXRlLnNsaWNlRG9jKGJlZm9yZS50bywgYWZ0ZXIuZnJvbSkpKVxuICAgICAgICByZXR1cm4geyBmcm9tOiBiZWZvcmUudG8sIHRvOiBhZnRlci5mcm9tIH07XG4gICAgcmV0dXJuIG51bGw7XG59XG4vKipcblJlcGxhY2UgdGhlIHNlbGVjdGlvbiB3aXRoIGEgbmV3bGluZSBhbmQgaW5kZW50IHRoZSBuZXdseSBjcmVhdGVkXG5saW5lKHMpLiBJZiB0aGUgY3VycmVudCBsaW5lIGNvbnNpc3RzIG9ubHkgb2Ygd2hpdGVzcGFjZSwgdGhpc1xud2lsbCBhbHNvIGRlbGV0ZSB0aGF0IHdoaXRlc3BhY2UuIFdoZW4gdGhlIGN1cnNvciBpcyBiZXR3ZWVuXG5tYXRjaGluZyBicmFja2V0cywgYW4gYWRkaXRpb25hbCBuZXdsaW5lIHdpbGwgYmUgaW5zZXJ0ZWQgYWZ0ZXJcbnRoZSBjdXJzb3IuXG4qL1xuY29uc3QgaW5zZXJ0TmV3bGluZUFuZEluZGVudCA9IG5ld2xpbmVBbmRJbmRlbnQoZmFsc2UpO1xuLyoqXG5DcmVhdGUgYSBibGFuaywgaW5kZW50ZWQgbGluZSBiZWxvdyB0aGUgY3VycmVudCBsaW5lLlxuKi9cbmNvbnN0IGluc2VydEJsYW5rTGluZSA9IG5ld2xpbmVBbmRJbmRlbnQodHJ1ZSk7XG5mdW5jdGlvbiBuZXdsaW5lQW5kSW5kZW50KGF0RW9mKSB7XG4gICAgcmV0dXJuICh7IHN0YXRlOiBzdGF0ZSQxLCBkaXNwYXRjaCB9KSA9PiB7XG4gICAgICAgIGlmIChzdGF0ZSQxLnJlYWRPbmx5KVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBsZXQgY2hhbmdlcyA9IHN0YXRlJDEuY2hhbmdlQnlSYW5nZShyYW5nZSA9PiB7XG4gICAgICAgICAgICBsZXQgeyBmcm9tLCB0byB9ID0gcmFuZ2UsIGxpbmUgPSBzdGF0ZSQxLmRvYy5saW5lQXQoZnJvbSk7XG4gICAgICAgICAgICBsZXQgZXhwbG9kZSA9ICFhdEVvZiAmJiBmcm9tID09IHRvICYmIGlzQmV0d2VlbkJyYWNrZXRzKHN0YXRlJDEsIGZyb20pO1xuICAgICAgICAgICAgaWYgKGF0RW9mKVxuICAgICAgICAgICAgICAgIGZyb20gPSB0byA9ICh0byA8PSBsaW5lLnRvID8gbGluZSA6IHN0YXRlJDEuZG9jLmxpbmVBdCh0bykpLnRvO1xuICAgICAgICAgICAgbGV0IGN4ID0gbmV3IGxhbmd1YWdlLkluZGVudENvbnRleHQoc3RhdGUkMSwgeyBzaW11bGF0ZUJyZWFrOiBmcm9tLCBzaW11bGF0ZURvdWJsZUJyZWFrOiAhIWV4cGxvZGUgfSk7XG4gICAgICAgICAgICBsZXQgaW5kZW50ID0gbGFuZ3VhZ2UuZ2V0SW5kZW50YXRpb24oY3gsIGZyb20pO1xuICAgICAgICAgICAgaWYgKGluZGVudCA9PSBudWxsKVxuICAgICAgICAgICAgICAgIGluZGVudCA9IHN0YXRlLmNvdW50Q29sdW1uKC9eXFxzKi8uZXhlYyhzdGF0ZSQxLmRvYy5saW5lQXQoZnJvbSkudGV4dClbMF0sIHN0YXRlJDEudGFiU2l6ZSk7XG4gICAgICAgICAgICB3aGlsZSAodG8gPCBsaW5lLnRvICYmIC9cXHMvLnRlc3QobGluZS50ZXh0W3RvIC0gbGluZS5mcm9tXSkpXG4gICAgICAgICAgICAgICAgdG8rKztcbiAgICAgICAgICAgIGlmIChleHBsb2RlKVxuICAgICAgICAgICAgICAgICh7IGZyb20sIHRvIH0gPSBleHBsb2RlKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGZyb20gPiBsaW5lLmZyb20gJiYgZnJvbSA8IGxpbmUuZnJvbSArIDEwMCAmJiAhL1xcUy8udGVzdChsaW5lLnRleHQuc2xpY2UoMCwgZnJvbSkpKVxuICAgICAgICAgICAgICAgIGZyb20gPSBsaW5lLmZyb207XG4gICAgICAgICAgICBsZXQgaW5zZXJ0ID0gW1wiXCIsIGxhbmd1YWdlLmluZGVudFN0cmluZyhzdGF0ZSQxLCBpbmRlbnQpXTtcbiAgICAgICAgICAgIGlmIChleHBsb2RlKVxuICAgICAgICAgICAgICAgIGluc2VydC5wdXNoKGxhbmd1YWdlLmluZGVudFN0cmluZyhzdGF0ZSQxLCBjeC5saW5lSW5kZW50KGxpbmUuZnJvbSwgLTEpKSk7XG4gICAgICAgICAgICByZXR1cm4geyBjaGFuZ2VzOiB7IGZyb20sIHRvLCBpbnNlcnQ6IHN0YXRlLlRleHQub2YoaW5zZXJ0KSB9LFxuICAgICAgICAgICAgICAgIHJhbmdlOiBzdGF0ZS5FZGl0b3JTZWxlY3Rpb24uY3Vyc29yKGZyb20gKyAxICsgaW5zZXJ0WzFdLmxlbmd0aCkgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIGRpc3BhdGNoKHN0YXRlJDEudXBkYXRlKGNoYW5nZXMsIHsgc2Nyb2xsSW50b1ZpZXc6IHRydWUsIHVzZXJFdmVudDogXCJpbnB1dFwiIH0pKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNoYW5nZUJ5U2VsZWN0ZWRMaW5lKHN0YXRlJDEsIGYpIHtcbiAgICBsZXQgYXRMaW5lID0gLTE7XG4gICAgcmV0dXJuIHN0YXRlJDEuY2hhbmdlQnlSYW5nZShyYW5nZSA9PiB7XG4gICAgICAgIGxldCBjaGFuZ2VzID0gW107XG4gICAgICAgIGZvciAobGV0IHBvcyA9IHJhbmdlLmZyb207IHBvcyA8PSByYW5nZS50bzspIHtcbiAgICAgICAgICAgIGxldCBsaW5lID0gc3RhdGUkMS5kb2MubGluZUF0KHBvcyk7XG4gICAgICAgICAgICBpZiAobGluZS5udW1iZXIgPiBhdExpbmUgJiYgKHJhbmdlLmVtcHR5IHx8IHJhbmdlLnRvID4gbGluZS5mcm9tKSkge1xuICAgICAgICAgICAgICAgIGYobGluZSwgY2hhbmdlcywgcmFuZ2UpO1xuICAgICAgICAgICAgICAgIGF0TGluZSA9IGxpbmUubnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcG9zID0gbGluZS50byArIDE7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNoYW5nZVNldCA9IHN0YXRlJDEuY2hhbmdlcyhjaGFuZ2VzKTtcbiAgICAgICAgcmV0dXJuIHsgY2hhbmdlcyxcbiAgICAgICAgICAgIHJhbmdlOiBzdGF0ZS5FZGl0b3JTZWxlY3Rpb24ucmFuZ2UoY2hhbmdlU2V0Lm1hcFBvcyhyYW5nZS5hbmNob3IsIDEpLCBjaGFuZ2VTZXQubWFwUG9zKHJhbmdlLmhlYWQsIDEpKSB9O1xuICAgIH0pO1xufVxuLyoqXG5BdXRvLWluZGVudCB0aGUgc2VsZWN0ZWQgbGluZXMuIFRoaXMgdXNlcyB0aGUgW2luZGVudGF0aW9uIHNlcnZpY2VcbmZhY2V0XShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2xhbmd1YWdlLmluZGVudFNlcnZpY2UpIGFzIHNvdXJjZSBmb3IgYXV0by1pbmRlbnRcbmluZm9ybWF0aW9uLlxuKi9cbmNvbnN0IGluZGVudFNlbGVjdGlvbiA9ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XG4gICAgaWYgKHN0YXRlLnJlYWRPbmx5KVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0IHVwZGF0ZWQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGxldCBjb250ZXh0ID0gbmV3IGxhbmd1YWdlLkluZGVudENvbnRleHQoc3RhdGUsIHsgb3ZlcnJpZGVJbmRlbnRhdGlvbjogc3RhcnQgPT4ge1xuICAgICAgICAgICAgbGV0IGZvdW5kID0gdXBkYXRlZFtzdGFydF07XG4gICAgICAgICAgICByZXR1cm4gZm91bmQgPT0gbnVsbCA/IC0xIDogZm91bmQ7XG4gICAgICAgIH0gfSk7XG4gICAgbGV0IGNoYW5nZXMgPSBjaGFuZ2VCeVNlbGVjdGVkTGluZShzdGF0ZSwgKGxpbmUsIGNoYW5nZXMsIHJhbmdlKSA9PiB7XG4gICAgICAgIGxldCBpbmRlbnQgPSBsYW5ndWFnZS5nZXRJbmRlbnRhdGlvbihjb250ZXh0LCBsaW5lLmZyb20pO1xuICAgICAgICBpZiAoaW5kZW50ID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICghL1xcUy8udGVzdChsaW5lLnRleHQpKVxuICAgICAgICAgICAgaW5kZW50ID0gMDtcbiAgICAgICAgbGV0IGN1ciA9IC9eXFxzKi8uZXhlYyhsaW5lLnRleHQpWzBdO1xuICAgICAgICBsZXQgbm9ybSA9IGxhbmd1YWdlLmluZGVudFN0cmluZyhzdGF0ZSwgaW5kZW50KTtcbiAgICAgICAgaWYgKGN1ciAhPSBub3JtIHx8IHJhbmdlLmZyb20gPCBsaW5lLmZyb20gKyBjdXIubGVuZ3RoKSB7XG4gICAgICAgICAgICB1cGRhdGVkW2xpbmUuZnJvbV0gPSBpbmRlbnQ7XG4gICAgICAgICAgICBjaGFuZ2VzLnB1c2goeyBmcm9tOiBsaW5lLmZyb20sIHRvOiBsaW5lLmZyb20gKyBjdXIubGVuZ3RoLCBpbnNlcnQ6IG5vcm0gfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIWNoYW5nZXMuY2hhbmdlcy5lbXB0eSlcbiAgICAgICAgZGlzcGF0Y2goc3RhdGUudXBkYXRlKGNoYW5nZXMsIHsgdXNlckV2ZW50OiBcImluZGVudFwiIH0pKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn07XG4vKipcbkFkZCBhIFt1bml0XShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2xhbmd1YWdlLmluZGVudFVuaXQpIG9mIGluZGVudGF0aW9uIHRvIGFsbCBzZWxlY3RlZFxubGluZXMuXG4qL1xuY29uc3QgaW5kZW50TW9yZSA9ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XG4gICAgaWYgKHN0YXRlLnJlYWRPbmx5KVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgZGlzcGF0Y2goc3RhdGUudXBkYXRlKGNoYW5nZUJ5U2VsZWN0ZWRMaW5lKHN0YXRlLCAobGluZSwgY2hhbmdlcykgPT4ge1xuICAgICAgICBjaGFuZ2VzLnB1c2goeyBmcm9tOiBsaW5lLmZyb20sIGluc2VydDogc3RhdGUuZmFjZXQobGFuZ3VhZ2UuaW5kZW50VW5pdCkgfSk7XG4gICAgfSksIHsgdXNlckV2ZW50OiBcImlucHV0LmluZGVudFwiIH0pKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn07XG4vKipcblJlbW92ZSBhIFt1bml0XShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2xhbmd1YWdlLmluZGVudFVuaXQpIG9mIGluZGVudGF0aW9uIGZyb20gYWxsXG5zZWxlY3RlZCBsaW5lcy5cbiovXG5jb25zdCBpbmRlbnRMZXNzID0gKHsgc3RhdGU6IHN0YXRlJDEsIGRpc3BhdGNoIH0pID0+IHtcbiAgICBpZiAoc3RhdGUkMS5yZWFkT25seSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGRpc3BhdGNoKHN0YXRlJDEudXBkYXRlKGNoYW5nZUJ5U2VsZWN0ZWRMaW5lKHN0YXRlJDEsIChsaW5lLCBjaGFuZ2VzKSA9PiB7XG4gICAgICAgIGxldCBzcGFjZSA9IC9eXFxzKi8uZXhlYyhsaW5lLnRleHQpWzBdO1xuICAgICAgICBpZiAoIXNwYWNlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBsZXQgY29sID0gc3RhdGUuY291bnRDb2x1bW4oc3BhY2UsIHN0YXRlJDEudGFiU2l6ZSksIGtlZXAgPSAwO1xuICAgICAgICBsZXQgaW5zZXJ0ID0gbGFuZ3VhZ2UuaW5kZW50U3RyaW5nKHN0YXRlJDEsIE1hdGgubWF4KDAsIGNvbCAtIGxhbmd1YWdlLmdldEluZGVudFVuaXQoc3RhdGUkMSkpKTtcbiAgICAgICAgd2hpbGUgKGtlZXAgPCBzcGFjZS5sZW5ndGggJiYga2VlcCA8IGluc2VydC5sZW5ndGggJiYgc3BhY2UuY2hhckNvZGVBdChrZWVwKSA9PSBpbnNlcnQuY2hhckNvZGVBdChrZWVwKSlcbiAgICAgICAgICAgIGtlZXArKztcbiAgICAgICAgY2hhbmdlcy5wdXNoKHsgZnJvbTogbGluZS5mcm9tICsga2VlcCwgdG86IGxpbmUuZnJvbSArIHNwYWNlLmxlbmd0aCwgaW5zZXJ0OiBpbnNlcnQuc2xpY2Uoa2VlcCkgfSk7XG4gICAgfSksIHsgdXNlckV2ZW50OiBcImRlbGV0ZS5kZWRlbnRcIiB9KSk7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuLyoqXG5FbmFibGVzIG9yIGRpc2FibGVzXG5bdGFiLWZvY3VzIG1vZGVdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jdmlldy5FZGl0b3JWaWV3LnNldFRhYkZvY3VzTW9kZSkuIFdoaWxlIG9uLCB0aGlzXG5wcmV2ZW50cyB0aGUgZWRpdG9yJ3Mga2V5IGJpbmRpbmdzIGZyb20gY2FwdHVyaW5nIFRhYiBvclxuU2hpZnQtVGFiLCBtYWtpbmcgaXQgcG9zc2libGUgZm9yIHRoZSB1c2VyIHRvIG1vdmUgZm9jdXMgb3V0IG9mXG50aGUgZWRpdG9yIHdpdGggdGhlIGtleWJvYXJkLlxuKi9cbmNvbnN0IHRvZ2dsZVRhYkZvY3VzTW9kZSA9IHZpZXcgPT4ge1xuICAgIHZpZXcuc2V0VGFiRm9jdXNNb2RlKCk7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuLyoqXG5UZW1wb3JhcmlseSBlbmFibGVzIFt0YWItZm9jdXNcbm1vZGVdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jdmlldy5FZGl0b3JWaWV3LnNldFRhYkZvY3VzTW9kZSkgZm9yIHR3byBzZWNvbmRzIG9yIHVudGlsXG5hbm90aGVyIGtleSBpcyBwcmVzc2VkLlxuKi9cbmNvbnN0IHRlbXBvcmFyaWx5U2V0VGFiRm9jdXNNb2RlID0gdmlldyA9PiB7XG4gICAgdmlldy5zZXRUYWJGb2N1c01vZGUoMjAwMCk7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuLyoqXG5JbnNlcnQgYSB0YWIgY2hhcmFjdGVyIGF0IHRoZSBjdXJzb3Igb3IsIGlmIHNvbWV0aGluZyBpcyBzZWxlY3RlZCxcbnVzZSBbYGluZGVudE1vcmVgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLmluZGVudE1vcmUpIHRvIGluZGVudCB0aGUgZW50aXJlXG5zZWxlY3Rpb24uXG4qL1xuY29uc3QgaW5zZXJ0VGFiID0gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcbiAgICBpZiAoc3RhdGUuc2VsZWN0aW9uLnJhbmdlcy5zb21lKHIgPT4gIXIuZW1wdHkpKVxuICAgICAgICByZXR1cm4gaW5kZW50TW9yZSh7IHN0YXRlLCBkaXNwYXRjaCB9KTtcbiAgICBkaXNwYXRjaChzdGF0ZS51cGRhdGUoc3RhdGUucmVwbGFjZVNlbGVjdGlvbihcIlxcdFwiKSwgeyBzY3JvbGxJbnRvVmlldzogdHJ1ZSwgdXNlckV2ZW50OiBcImlucHV0XCIgfSkpO1xuICAgIHJldHVybiB0cnVlO1xufTtcbi8qKlxuQXJyYXkgb2Yga2V5IGJpbmRpbmdzIGNvbnRhaW5pbmcgdGhlIEVtYWNzLXN0eWxlIGJpbmRpbmdzIHRoYXQgYXJlXG5hdmFpbGFibGUgb24gbWFjT1MgYnkgZGVmYXVsdC5cblxuIC0gQ3RybC1iOiBbYGN1cnNvckNoYXJMZWZ0YF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNjb21tYW5kcy5jdXJzb3JDaGFyTGVmdCkgKFtgc2VsZWN0Q2hhckxlZnRgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLnNlbGVjdENoYXJMZWZ0KSB3aXRoIFNoaWZ0KVxuIC0gQ3RybC1mOiBbYGN1cnNvckNoYXJSaWdodGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMuY3Vyc29yQ2hhclJpZ2h0KSAoW2BzZWxlY3RDaGFyUmlnaHRgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLnNlbGVjdENoYXJSaWdodCkgd2l0aCBTaGlmdClcbiAtIEN0cmwtcDogW2BjdXJzb3JMaW5lVXBgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLmN1cnNvckxpbmVVcCkgKFtgc2VsZWN0TGluZVVwYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNjb21tYW5kcy5zZWxlY3RMaW5lVXApIHdpdGggU2hpZnQpXG4gLSBDdHJsLW46IFtgY3Vyc29yTGluZURvd25gXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLmN1cnNvckxpbmVEb3duKSAoW2BzZWxlY3RMaW5lRG93bmBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMuc2VsZWN0TGluZURvd24pIHdpdGggU2hpZnQpXG4gLSBDdHJsLWE6IFtgY3Vyc29yTGluZVN0YXJ0YF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNjb21tYW5kcy5jdXJzb3JMaW5lU3RhcnQpIChbYHNlbGVjdExpbmVTdGFydGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMuc2VsZWN0TGluZVN0YXJ0KSB3aXRoIFNoaWZ0KVxuIC0gQ3RybC1lOiBbYGN1cnNvckxpbmVFbmRgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLmN1cnNvckxpbmVFbmQpIChbYHNlbGVjdExpbmVFbmRgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLnNlbGVjdExpbmVFbmQpIHdpdGggU2hpZnQpXG4gLSBDdHJsLWQ6IFtgZGVsZXRlQ2hhckZvcndhcmRgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLmRlbGV0ZUNoYXJGb3J3YXJkKVxuIC0gQ3RybC1oOiBbYGRlbGV0ZUNoYXJCYWNrd2FyZGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMuZGVsZXRlQ2hhckJhY2t3YXJkKVxuIC0gQ3RybC1rOiBbYGRlbGV0ZVRvTGluZUVuZGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMuZGVsZXRlVG9MaW5lRW5kKVxuIC0gQ3RybC1BbHQtaDogW2BkZWxldGVHcm91cEJhY2t3YXJkYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNjb21tYW5kcy5kZWxldGVHcm91cEJhY2t3YXJkKVxuIC0gQ3RybC1vOiBbYHNwbGl0TGluZWBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMuc3BsaXRMaW5lKVxuIC0gQ3RybC10OiBbYHRyYW5zcG9zZUNoYXJzYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNjb21tYW5kcy50cmFuc3Bvc2VDaGFycylcbiAtIEN0cmwtdjogW2BjdXJzb3JQYWdlRG93bmBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMuY3Vyc29yUGFnZURvd24pXG4gLSBBbHQtdjogW2BjdXJzb3JQYWdlVXBgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLmN1cnNvclBhZ2VVcClcbiovXG5jb25zdCBlbWFjc1N0eWxlS2V5bWFwID0gW1xuICAgIHsga2V5OiBcIkN0cmwtYlwiLCBydW46IGN1cnNvckNoYXJMZWZ0LCBzaGlmdDogc2VsZWN0Q2hhckxlZnQsIHByZXZlbnREZWZhdWx0OiB0cnVlIH0sXG4gICAgeyBrZXk6IFwiQ3RybC1mXCIsIHJ1bjogY3Vyc29yQ2hhclJpZ2h0LCBzaGlmdDogc2VsZWN0Q2hhclJpZ2h0IH0sXG4gICAgeyBrZXk6IFwiQ3RybC1wXCIsIHJ1bjogY3Vyc29yTGluZVVwLCBzaGlmdDogc2VsZWN0TGluZVVwIH0sXG4gICAgeyBrZXk6IFwiQ3RybC1uXCIsIHJ1bjogY3Vyc29yTGluZURvd24sIHNoaWZ0OiBzZWxlY3RMaW5lRG93biB9LFxuICAgIHsga2V5OiBcIkN0cmwtYVwiLCBydW46IGN1cnNvckxpbmVTdGFydCwgc2hpZnQ6IHNlbGVjdExpbmVTdGFydCB9LFxuICAgIHsga2V5OiBcIkN0cmwtZVwiLCBydW46IGN1cnNvckxpbmVFbmQsIHNoaWZ0OiBzZWxlY3RMaW5lRW5kIH0sXG4gICAgeyBrZXk6IFwiQ3RybC1kXCIsIHJ1bjogZGVsZXRlQ2hhckZvcndhcmQgfSxcbiAgICB7IGtleTogXCJDdHJsLWhcIiwgcnVuOiBkZWxldGVDaGFyQmFja3dhcmQgfSxcbiAgICB7IGtleTogXCJDdHJsLWtcIiwgcnVuOiBkZWxldGVUb0xpbmVFbmQgfSxcbiAgICB7IGtleTogXCJDdHJsLUFsdC1oXCIsIHJ1bjogZGVsZXRlR3JvdXBCYWNrd2FyZCB9LFxuICAgIHsga2V5OiBcIkN0cmwtb1wiLCBydW46IHNwbGl0TGluZSB9LFxuICAgIHsga2V5OiBcIkN0cmwtdFwiLCBydW46IHRyYW5zcG9zZUNoYXJzIH0sXG4gICAgeyBrZXk6IFwiQ3RybC12XCIsIHJ1bjogY3Vyc29yUGFnZURvd24gfSxcbl07XG4vKipcbkFuIGFycmF5IG9mIGtleSBiaW5kaW5ncyBjbG9zZWx5IHN0aWNraW5nIHRvIHBsYXRmb3JtLXN0YW5kYXJkIG9yXG53aWRlbHkgdXNlZCBiaW5kaW5ncy4gKFRoaXMgaW5jbHVkZXMgdGhlIGJpbmRpbmdzIGZyb21cbltgZW1hY3NTdHlsZUtleW1hcGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMuZW1hY3NTdHlsZUtleW1hcCksIHdpdGggdGhlaXIgYGtleWBcbnByb3BlcnR5IGNoYW5nZWQgdG8gYG1hY2AuKVxuXG4gLSBBcnJvd0xlZnQ6IFtgY3Vyc29yQ2hhckxlZnRgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLmN1cnNvckNoYXJMZWZ0KSAoW2BzZWxlY3RDaGFyTGVmdGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMuc2VsZWN0Q2hhckxlZnQpIHdpdGggU2hpZnQpXG4gLSBBcnJvd1JpZ2h0OiBbYGN1cnNvckNoYXJSaWdodGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMuY3Vyc29yQ2hhclJpZ2h0KSAoW2BzZWxlY3RDaGFyUmlnaHRgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLnNlbGVjdENoYXJSaWdodCkgd2l0aCBTaGlmdClcbiAtIEN0cmwtQXJyb3dMZWZ0IChBbHQtQXJyb3dMZWZ0IG9uIG1hY09TKTogW2BjdXJzb3JHcm91cExlZnRgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLmN1cnNvckdyb3VwTGVmdCkgKFtgc2VsZWN0R3JvdXBMZWZ0YF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNjb21tYW5kcy5zZWxlY3RHcm91cExlZnQpIHdpdGggU2hpZnQpXG4gLSBDdHJsLUFycm93UmlnaHQgKEFsdC1BcnJvd1JpZ2h0IG9uIG1hY09TKTogW2BjdXJzb3JHcm91cFJpZ2h0YF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNjb21tYW5kcy5jdXJzb3JHcm91cFJpZ2h0KSAoW2BzZWxlY3RHcm91cFJpZ2h0YF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNjb21tYW5kcy5zZWxlY3RHcm91cFJpZ2h0KSB3aXRoIFNoaWZ0KVxuIC0gQ21kLUFycm93TGVmdCAob24gbWFjT1MpOiBbYGN1cnNvckxpbmVTdGFydGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMuY3Vyc29yTGluZVN0YXJ0KSAoW2BzZWxlY3RMaW5lU3RhcnRgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLnNlbGVjdExpbmVTdGFydCkgd2l0aCBTaGlmdClcbiAtIENtZC1BcnJvd1JpZ2h0IChvbiBtYWNPUyk6IFtgY3Vyc29yTGluZUVuZGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMuY3Vyc29yTGluZUVuZCkgKFtgc2VsZWN0TGluZUVuZGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMuc2VsZWN0TGluZUVuZCkgd2l0aCBTaGlmdClcbiAtIEFycm93VXA6IFtgY3Vyc29yTGluZVVwYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNjb21tYW5kcy5jdXJzb3JMaW5lVXApIChbYHNlbGVjdExpbmVVcGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMuc2VsZWN0TGluZVVwKSB3aXRoIFNoaWZ0KVxuIC0gQXJyb3dEb3duOiBbYGN1cnNvckxpbmVEb3duYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNjb21tYW5kcy5jdXJzb3JMaW5lRG93bikgKFtgc2VsZWN0TGluZURvd25gXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLnNlbGVjdExpbmVEb3duKSB3aXRoIFNoaWZ0KVxuIC0gQ21kLUFycm93VXAgKG9uIG1hY09TKTogW2BjdXJzb3JEb2NTdGFydGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMuY3Vyc29yRG9jU3RhcnQpIChbYHNlbGVjdERvY1N0YXJ0YF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNjb21tYW5kcy5zZWxlY3REb2NTdGFydCkgd2l0aCBTaGlmdClcbiAtIENtZC1BcnJvd0Rvd24gKG9uIG1hY09TKTogW2BjdXJzb3JEb2NFbmRgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLmN1cnNvckRvY0VuZCkgKFtgc2VsZWN0RG9jRW5kYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNjb21tYW5kcy5zZWxlY3REb2NFbmQpIHdpdGggU2hpZnQpXG4gLSBDdHJsLUFycm93VXAgKG9uIG1hY09TKTogW2BjdXJzb3JQYWdlVXBgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLmN1cnNvclBhZ2VVcCkgKFtgc2VsZWN0UGFnZVVwYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNjb21tYW5kcy5zZWxlY3RQYWdlVXApIHdpdGggU2hpZnQpXG4gLSBDdHJsLUFycm93RG93biAob24gbWFjT1MpOiBbYGN1cnNvclBhZ2VEb3duYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNjb21tYW5kcy5jdXJzb3JQYWdlRG93bikgKFtgc2VsZWN0UGFnZURvd25gXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLnNlbGVjdFBhZ2VEb3duKSB3aXRoIFNoaWZ0KVxuIC0gUGFnZVVwOiBbYGN1cnNvclBhZ2VVcGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMuY3Vyc29yUGFnZVVwKSAoW2BzZWxlY3RQYWdlVXBgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLnNlbGVjdFBhZ2VVcCkgd2l0aCBTaGlmdClcbiAtIFBhZ2VEb3duOiBbYGN1cnNvclBhZ2VEb3duYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNjb21tYW5kcy5jdXJzb3JQYWdlRG93bikgKFtgc2VsZWN0UGFnZURvd25gXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLnNlbGVjdFBhZ2VEb3duKSB3aXRoIFNoaWZ0KVxuIC0gSG9tZTogW2BjdXJzb3JMaW5lQm91bmRhcnlCYWNrd2FyZGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMuY3Vyc29yTGluZUJvdW5kYXJ5QmFja3dhcmQpIChbYHNlbGVjdExpbmVCb3VuZGFyeUJhY2t3YXJkYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNjb21tYW5kcy5zZWxlY3RMaW5lQm91bmRhcnlCYWNrd2FyZCkgd2l0aCBTaGlmdClcbiAtIEVuZDogW2BjdXJzb3JMaW5lQm91bmRhcnlGb3J3YXJkYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNjb21tYW5kcy5jdXJzb3JMaW5lQm91bmRhcnlGb3J3YXJkKSAoW2BzZWxlY3RMaW5lQm91bmRhcnlGb3J3YXJkYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNjb21tYW5kcy5zZWxlY3RMaW5lQm91bmRhcnlGb3J3YXJkKSB3aXRoIFNoaWZ0KVxuIC0gQ3RybC1Ib21lIChDbWQtSG9tZSBvbiBtYWNPUyk6IFtgY3Vyc29yRG9jU3RhcnRgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLmN1cnNvckRvY1N0YXJ0KSAoW2BzZWxlY3REb2NTdGFydGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMuc2VsZWN0RG9jU3RhcnQpIHdpdGggU2hpZnQpXG4gLSBDdHJsLUVuZCAoQ21kLUhvbWUgb24gbWFjT1MpOiBbYGN1cnNvckRvY0VuZGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMuY3Vyc29yRG9jRW5kKSAoW2BzZWxlY3REb2NFbmRgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLnNlbGVjdERvY0VuZCkgd2l0aCBTaGlmdClcbiAtIEVudGVyOiBbYGluc2VydE5ld2xpbmVBbmRJbmRlbnRgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLmluc2VydE5ld2xpbmVBbmRJbmRlbnQpXG4gLSBDdHJsLWEgKENtZC1hIG9uIG1hY09TKTogW2BzZWxlY3RBbGxgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLnNlbGVjdEFsbClcbiAtIEJhY2tzcGFjZTogW2BkZWxldGVDaGFyQmFja3dhcmRgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLmRlbGV0ZUNoYXJCYWNrd2FyZClcbiAtIERlbGV0ZTogW2BkZWxldGVDaGFyRm9yd2FyZGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMuZGVsZXRlQ2hhckZvcndhcmQpXG4gLSBDdHJsLUJhY2tzcGFjZSAoQWx0LUJhY2tzcGFjZSBvbiBtYWNPUyk6IFtgZGVsZXRlR3JvdXBCYWNrd2FyZGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMuZGVsZXRlR3JvdXBCYWNrd2FyZClcbiAtIEN0cmwtRGVsZXRlIChBbHQtRGVsZXRlIG9uIG1hY09TKTogW2BkZWxldGVHcm91cEZvcndhcmRgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLmRlbGV0ZUdyb3VwRm9yd2FyZClcbiAtIENtZC1CYWNrc3BhY2UgKG1hY09TKTogW2BkZWxldGVMaW5lQm91bmRhcnlCYWNrd2FyZGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMuZGVsZXRlTGluZUJvdW5kYXJ5QmFja3dhcmQpLlxuIC0gQ21kLURlbGV0ZSAobWFjT1MpOiBbYGRlbGV0ZUxpbmVCb3VuZGFyeUZvcndhcmRgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLmRlbGV0ZUxpbmVCb3VuZGFyeUZvcndhcmQpLlxuKi9cbmNvbnN0IHN0YW5kYXJkS2V5bWFwID0gW1xuICAgIHsga2V5OiBcIkFycm93TGVmdFwiLCBydW46IGN1cnNvckNoYXJMZWZ0LCBzaGlmdDogc2VsZWN0Q2hhckxlZnQsIHByZXZlbnREZWZhdWx0OiB0cnVlIH0sXG4gICAgeyBrZXk6IFwiTW9kLUFycm93TGVmdFwiLCBtYWM6IFwiQWx0LUFycm93TGVmdFwiLCBydW46IGN1cnNvckdyb3VwTGVmdCwgc2hpZnQ6IHNlbGVjdEdyb3VwTGVmdCwgcHJldmVudERlZmF1bHQ6IHRydWUgfSxcbiAgICB7IG1hYzogXCJDbWQtQXJyb3dMZWZ0XCIsIHJ1bjogY3Vyc29yTGluZUJvdW5kYXJ5TGVmdCwgc2hpZnQ6IHNlbGVjdExpbmVCb3VuZGFyeUxlZnQsIHByZXZlbnREZWZhdWx0OiB0cnVlIH0sXG4gICAgeyBrZXk6IFwiQXJyb3dSaWdodFwiLCBydW46IGN1cnNvckNoYXJSaWdodCwgc2hpZnQ6IHNlbGVjdENoYXJSaWdodCwgcHJldmVudERlZmF1bHQ6IHRydWUgfSxcbiAgICB7IGtleTogXCJNb2QtQXJyb3dSaWdodFwiLCBtYWM6IFwiQWx0LUFycm93UmlnaHRcIiwgcnVuOiBjdXJzb3JHcm91cFJpZ2h0LCBzaGlmdDogc2VsZWN0R3JvdXBSaWdodCwgcHJldmVudERlZmF1bHQ6IHRydWUgfSxcbiAgICB7IG1hYzogXCJDbWQtQXJyb3dSaWdodFwiLCBydW46IGN1cnNvckxpbmVCb3VuZGFyeVJpZ2h0LCBzaGlmdDogc2VsZWN0TGluZUJvdW5kYXJ5UmlnaHQsIHByZXZlbnREZWZhdWx0OiB0cnVlIH0sXG4gICAgeyBrZXk6IFwiQXJyb3dVcFwiLCBydW46IGN1cnNvckxpbmVVcCwgc2hpZnQ6IHNlbGVjdExpbmVVcCwgcHJldmVudERlZmF1bHQ6IHRydWUgfSxcbiAgICB7IG1hYzogXCJDbWQtQXJyb3dVcFwiLCBydW46IGN1cnNvckRvY1N0YXJ0LCBzaGlmdDogc2VsZWN0RG9jU3RhcnQgfSxcbiAgICB7IG1hYzogXCJDdHJsLUFycm93VXBcIiwgcnVuOiBjdXJzb3JQYWdlVXAsIHNoaWZ0OiBzZWxlY3RQYWdlVXAgfSxcbiAgICB7IGtleTogXCJBcnJvd0Rvd25cIiwgcnVuOiBjdXJzb3JMaW5lRG93biwgc2hpZnQ6IHNlbGVjdExpbmVEb3duLCBwcmV2ZW50RGVmYXVsdDogdHJ1ZSB9LFxuICAgIHsgbWFjOiBcIkNtZC1BcnJvd0Rvd25cIiwgcnVuOiBjdXJzb3JEb2NFbmQsIHNoaWZ0OiBzZWxlY3REb2NFbmQgfSxcbiAgICB7IG1hYzogXCJDdHJsLUFycm93RG93blwiLCBydW46IGN1cnNvclBhZ2VEb3duLCBzaGlmdDogc2VsZWN0UGFnZURvd24gfSxcbiAgICB7IGtleTogXCJQYWdlVXBcIiwgcnVuOiBjdXJzb3JQYWdlVXAsIHNoaWZ0OiBzZWxlY3RQYWdlVXAgfSxcbiAgICB7IGtleTogXCJQYWdlRG93blwiLCBydW46IGN1cnNvclBhZ2VEb3duLCBzaGlmdDogc2VsZWN0UGFnZURvd24gfSxcbiAgICB7IGtleTogXCJIb21lXCIsIHJ1bjogY3Vyc29yTGluZUJvdW5kYXJ5QmFja3dhcmQsIHNoaWZ0OiBzZWxlY3RMaW5lQm91bmRhcnlCYWNrd2FyZCwgcHJldmVudERlZmF1bHQ6IHRydWUgfSxcbiAgICB7IGtleTogXCJNb2QtSG9tZVwiLCBydW46IGN1cnNvckRvY1N0YXJ0LCBzaGlmdDogc2VsZWN0RG9jU3RhcnQgfSxcbiAgICB7IGtleTogXCJFbmRcIiwgcnVuOiBjdXJzb3JMaW5lQm91bmRhcnlGb3J3YXJkLCBzaGlmdDogc2VsZWN0TGluZUJvdW5kYXJ5Rm9yd2FyZCwgcHJldmVudERlZmF1bHQ6IHRydWUgfSxcbiAgICB7IGtleTogXCJNb2QtRW5kXCIsIHJ1bjogY3Vyc29yRG9jRW5kLCBzaGlmdDogc2VsZWN0RG9jRW5kIH0sXG4gICAgeyBrZXk6IFwiRW50ZXJcIiwgcnVuOiBpbnNlcnROZXdsaW5lQW5kSW5kZW50IH0sXG4gICAgeyBrZXk6IFwiTW9kLWFcIiwgcnVuOiBzZWxlY3RBbGwgfSxcbiAgICB7IGtleTogXCJCYWNrc3BhY2VcIiwgcnVuOiBkZWxldGVDaGFyQmFja3dhcmQsIHNoaWZ0OiBkZWxldGVDaGFyQmFja3dhcmQgfSxcbiAgICB7IGtleTogXCJEZWxldGVcIiwgcnVuOiBkZWxldGVDaGFyRm9yd2FyZCB9LFxuICAgIHsga2V5OiBcIk1vZC1CYWNrc3BhY2VcIiwgbWFjOiBcIkFsdC1CYWNrc3BhY2VcIiwgcnVuOiBkZWxldGVHcm91cEJhY2t3YXJkIH0sXG4gICAgeyBrZXk6IFwiTW9kLURlbGV0ZVwiLCBtYWM6IFwiQWx0LURlbGV0ZVwiLCBydW46IGRlbGV0ZUdyb3VwRm9yd2FyZCB9LFxuICAgIHsgbWFjOiBcIk1vZC1CYWNrc3BhY2VcIiwgcnVuOiBkZWxldGVMaW5lQm91bmRhcnlCYWNrd2FyZCB9LFxuICAgIHsgbWFjOiBcIk1vZC1EZWxldGVcIiwgcnVuOiBkZWxldGVMaW5lQm91bmRhcnlGb3J3YXJkIH1cbl0uY29uY2F0KGVtYWNzU3R5bGVLZXltYXAubWFwKGIgPT4gKHsgbWFjOiBiLmtleSwgcnVuOiBiLnJ1biwgc2hpZnQ6IGIuc2hpZnQgfSkpKTtcbi8qKlxuVGhlIGRlZmF1bHQga2V5bWFwLiBJbmNsdWRlcyBhbGwgYmluZGluZ3MgZnJvbVxuW2BzdGFuZGFyZEtleW1hcGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMuc3RhbmRhcmRLZXltYXApIHBsdXMgdGhlIGZvbGxvd2luZzpcblxuLSBBbHQtQXJyb3dMZWZ0IChDdHJsLUFycm93TGVmdCBvbiBtYWNPUyk6IFtgY3Vyc29yU3ludGF4TGVmdGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMuY3Vyc29yU3ludGF4TGVmdCkgKFtgc2VsZWN0U3ludGF4TGVmdGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMuc2VsZWN0U3ludGF4TGVmdCkgd2l0aCBTaGlmdClcbi0gQWx0LUFycm93UmlnaHQgKEN0cmwtQXJyb3dSaWdodCBvbiBtYWNPUyk6IFtgY3Vyc29yU3ludGF4UmlnaHRgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLmN1cnNvclN5bnRheFJpZ2h0KSAoW2BzZWxlY3RTeW50YXhSaWdodGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMuc2VsZWN0U3ludGF4UmlnaHQpIHdpdGggU2hpZnQpXG4tIEFsdC1BcnJvd1VwOiBbYG1vdmVMaW5lVXBgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLm1vdmVMaW5lVXApXG4tIEFsdC1BcnJvd0Rvd246IFtgbW92ZUxpbmVEb3duYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNjb21tYW5kcy5tb3ZlTGluZURvd24pXG4tIFNoaWZ0LUFsdC1BcnJvd1VwOiBbYGNvcHlMaW5lVXBgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLmNvcHlMaW5lVXApXG4tIFNoaWZ0LUFsdC1BcnJvd0Rvd246IFtgY29weUxpbmVEb3duYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNjb21tYW5kcy5jb3B5TGluZURvd24pXG4tIEVzY2FwZTogW2BzaW1wbGlmeVNlbGVjdGlvbmBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMuc2ltcGxpZnlTZWxlY3Rpb24pXG4tIEN0cmwtRW50ZXIgKENtZC1FbnRlciBvbiBtYWNPUyk6IFtgaW5zZXJ0QmxhbmtMaW5lYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNjb21tYW5kcy5pbnNlcnRCbGFua0xpbmUpXG4tIEFsdC1sIChDdHJsLWwgb24gbWFjT1MpOiBbYHNlbGVjdExpbmVgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLnNlbGVjdExpbmUpXG4tIEN0cmwtaSAoQ21kLWkgb24gbWFjT1MpOiBbYHNlbGVjdFBhcmVudFN5bnRheGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMuc2VsZWN0UGFyZW50U3ludGF4KVxuLSBDdHJsLVsgKENtZC1bIG9uIG1hY09TKTogW2BpbmRlbnRMZXNzYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNjb21tYW5kcy5pbmRlbnRMZXNzKVxuLSBDdHJsLV0gKENtZC1dIG9uIG1hY09TKTogW2BpbmRlbnRNb3JlYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNjb21tYW5kcy5pbmRlbnRNb3JlKVxuLSBDdHJsLUFsdC1cXFxcIChDbWQtQWx0LVxcXFwgb24gbWFjT1MpOiBbYGluZGVudFNlbGVjdGlvbmBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMuaW5kZW50U2VsZWN0aW9uKVxuLSBTaGlmdC1DdHJsLWsgKFNoaWZ0LUNtZC1rIG9uIG1hY09TKTogW2BkZWxldGVMaW5lYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNjb21tYW5kcy5kZWxldGVMaW5lKVxuLSBTaGlmdC1DdHJsLVxcXFwgKFNoaWZ0LUNtZC1cXFxcIG9uIG1hY09TKTogW2BjdXJzb3JNYXRjaGluZ0JyYWNrZXRgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2NvbW1hbmRzLmN1cnNvck1hdGNoaW5nQnJhY2tldClcbi0gQ3RybC0vIChDbWQtLyBvbiBtYWNPUyk6IFtgdG9nZ2xlQ29tbWVudGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMudG9nZ2xlQ29tbWVudCkuXG4tIFNoaWZ0LUFsdC1hOiBbYHRvZ2dsZUJsb2NrQ29tbWVudGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMudG9nZ2xlQmxvY2tDb21tZW50KS5cbi0gQ3RybC1tIChBbHQtU2hpZnQtbSBvbiBtYWNPUyk6IFtgdG9nZ2xlVGFiRm9jdXNNb2RlYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNjb21tYW5kcy50b2dnbGVUYWJGb2N1c01vZGUpLlxuKi9cbmNvbnN0IGRlZmF1bHRLZXltYXAgPSBbXG4gICAgeyBrZXk6IFwiQWx0LUFycm93TGVmdFwiLCBtYWM6IFwiQ3RybC1BcnJvd0xlZnRcIiwgcnVuOiBjdXJzb3JTeW50YXhMZWZ0LCBzaGlmdDogc2VsZWN0U3ludGF4TGVmdCB9LFxuICAgIHsga2V5OiBcIkFsdC1BcnJvd1JpZ2h0XCIsIG1hYzogXCJDdHJsLUFycm93UmlnaHRcIiwgcnVuOiBjdXJzb3JTeW50YXhSaWdodCwgc2hpZnQ6IHNlbGVjdFN5bnRheFJpZ2h0IH0sXG4gICAgeyBrZXk6IFwiQWx0LUFycm93VXBcIiwgcnVuOiBtb3ZlTGluZVVwIH0sXG4gICAgeyBrZXk6IFwiU2hpZnQtQWx0LUFycm93VXBcIiwgcnVuOiBjb3B5TGluZVVwIH0sXG4gICAgeyBrZXk6IFwiQWx0LUFycm93RG93blwiLCBydW46IG1vdmVMaW5lRG93biB9LFxuICAgIHsga2V5OiBcIlNoaWZ0LUFsdC1BcnJvd0Rvd25cIiwgcnVuOiBjb3B5TGluZURvd24gfSxcbiAgICB7IGtleTogXCJFc2NhcGVcIiwgcnVuOiBzaW1wbGlmeVNlbGVjdGlvbiB9LFxuICAgIHsga2V5OiBcIk1vZC1FbnRlclwiLCBydW46IGluc2VydEJsYW5rTGluZSB9LFxuICAgIHsga2V5OiBcIkFsdC1sXCIsIG1hYzogXCJDdHJsLWxcIiwgcnVuOiBzZWxlY3RMaW5lIH0sXG4gICAgeyBrZXk6IFwiTW9kLWlcIiwgcnVuOiBzZWxlY3RQYXJlbnRTeW50YXgsIHByZXZlbnREZWZhdWx0OiB0cnVlIH0sXG4gICAgeyBrZXk6IFwiTW9kLVtcIiwgcnVuOiBpbmRlbnRMZXNzIH0sXG4gICAgeyBrZXk6IFwiTW9kLV1cIiwgcnVuOiBpbmRlbnRNb3JlIH0sXG4gICAgeyBrZXk6IFwiTW9kLUFsdC1cXFxcXCIsIHJ1bjogaW5kZW50U2VsZWN0aW9uIH0sXG4gICAgeyBrZXk6IFwiU2hpZnQtTW9kLWtcIiwgcnVuOiBkZWxldGVMaW5lIH0sXG4gICAgeyBrZXk6IFwiU2hpZnQtTW9kLVxcXFxcIiwgcnVuOiBjdXJzb3JNYXRjaGluZ0JyYWNrZXQgfSxcbiAgICB7IGtleTogXCJNb2QtL1wiLCBydW46IHRvZ2dsZUNvbW1lbnQgfSxcbiAgICB7IGtleTogXCJBbHQtQVwiLCBydW46IHRvZ2dsZUJsb2NrQ29tbWVudCB9LFxuICAgIHsga2V5OiBcIkN0cmwtbVwiLCBtYWM6IFwiU2hpZnQtQWx0LW1cIiwgcnVuOiB0b2dnbGVUYWJGb2N1c01vZGUgfSxcbl0uY29uY2F0KHN0YW5kYXJkS2V5bWFwKTtcbi8qKlxuQSBiaW5kaW5nIHRoYXQgYmluZHMgVGFiIHRvIFtgaW5kZW50TW9yZWBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMuaW5kZW50TW9yZSkgYW5kXG5TaGlmdC1UYWIgdG8gW2BpbmRlbnRMZXNzYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNjb21tYW5kcy5pbmRlbnRMZXNzKS5cblBsZWFzZSBzZWUgdGhlIFtUYWIgZXhhbXBsZV0oLi4vLi4vZXhhbXBsZXMvdGFiLykgYmVmb3JlIHVzaW5nXG50aGlzLlxuKi9cbmNvbnN0IGluZGVudFdpdGhUYWIgPSB7IGtleTogXCJUYWJcIiwgcnVuOiBpbmRlbnRNb3JlLCBzaGlmdDogaW5kZW50TGVzcyB9O1xuXG5leHBvcnRzLmJsb2NrQ29tbWVudCA9IGJsb2NrQ29tbWVudDtcbmV4cG9ydHMuYmxvY2tVbmNvbW1lbnQgPSBibG9ja1VuY29tbWVudDtcbmV4cG9ydHMuY29weUxpbmVEb3duID0gY29weUxpbmVEb3duO1xuZXhwb3J0cy5jb3B5TGluZVVwID0gY29weUxpbmVVcDtcbmV4cG9ydHMuY3Vyc29yQ2hhckJhY2t3YXJkID0gY3Vyc29yQ2hhckJhY2t3YXJkO1xuZXhwb3J0cy5jdXJzb3JDaGFyRm9yd2FyZCA9IGN1cnNvckNoYXJGb3J3YXJkO1xuZXhwb3J0cy5jdXJzb3JDaGFyTGVmdCA9IGN1cnNvckNoYXJMZWZ0O1xuZXhwb3J0cy5jdXJzb3JDaGFyUmlnaHQgPSBjdXJzb3JDaGFyUmlnaHQ7XG5leHBvcnRzLmN1cnNvckRvY0VuZCA9IGN1cnNvckRvY0VuZDtcbmV4cG9ydHMuY3Vyc29yRG9jU3RhcnQgPSBjdXJzb3JEb2NTdGFydDtcbmV4cG9ydHMuY3Vyc29yR3JvdXBCYWNrd2FyZCA9IGN1cnNvckdyb3VwQmFja3dhcmQ7XG5leHBvcnRzLmN1cnNvckdyb3VwRm9yd2FyZCA9IGN1cnNvckdyb3VwRm9yd2FyZDtcbmV4cG9ydHMuY3Vyc29yR3JvdXBMZWZ0ID0gY3Vyc29yR3JvdXBMZWZ0O1xuZXhwb3J0cy5jdXJzb3JHcm91cFJpZ2h0ID0gY3Vyc29yR3JvdXBSaWdodDtcbmV4cG9ydHMuY3Vyc29yTGluZUJvdW5kYXJ5QmFja3dhcmQgPSBjdXJzb3JMaW5lQm91bmRhcnlCYWNrd2FyZDtcbmV4cG9ydHMuY3Vyc29yTGluZUJvdW5kYXJ5Rm9yd2FyZCA9IGN1cnNvckxpbmVCb3VuZGFyeUZvcndhcmQ7XG5leHBvcnRzLmN1cnNvckxpbmVCb3VuZGFyeUxlZnQgPSBjdXJzb3JMaW5lQm91bmRhcnlMZWZ0O1xuZXhwb3J0cy5jdXJzb3JMaW5lQm91bmRhcnlSaWdodCA9IGN1cnNvckxpbmVCb3VuZGFyeVJpZ2h0O1xuZXhwb3J0cy5jdXJzb3JMaW5lRG93biA9IGN1cnNvckxpbmVEb3duO1xuZXhwb3J0cy5jdXJzb3JMaW5lRW5kID0gY3Vyc29yTGluZUVuZDtcbmV4cG9ydHMuY3Vyc29yTGluZVN0YXJ0ID0gY3Vyc29yTGluZVN0YXJ0O1xuZXhwb3J0cy5jdXJzb3JMaW5lVXAgPSBjdXJzb3JMaW5lVXA7XG5leHBvcnRzLmN1cnNvck1hdGNoaW5nQnJhY2tldCA9IGN1cnNvck1hdGNoaW5nQnJhY2tldDtcbmV4cG9ydHMuY3Vyc29yUGFnZURvd24gPSBjdXJzb3JQYWdlRG93bjtcbmV4cG9ydHMuY3Vyc29yUGFnZVVwID0gY3Vyc29yUGFnZVVwO1xuZXhwb3J0cy5jdXJzb3JTdWJ3b3JkQmFja3dhcmQgPSBjdXJzb3JTdWJ3b3JkQmFja3dhcmQ7XG5leHBvcnRzLmN1cnNvclN1YndvcmRGb3J3YXJkID0gY3Vyc29yU3Vid29yZEZvcndhcmQ7XG5leHBvcnRzLmN1cnNvclN5bnRheExlZnQgPSBjdXJzb3JTeW50YXhMZWZ0O1xuZXhwb3J0cy5jdXJzb3JTeW50YXhSaWdodCA9IGN1cnNvclN5bnRheFJpZ2h0O1xuZXhwb3J0cy5kZWZhdWx0S2V5bWFwID0gZGVmYXVsdEtleW1hcDtcbmV4cG9ydHMuZGVsZXRlQ2hhckJhY2t3YXJkID0gZGVsZXRlQ2hhckJhY2t3YXJkO1xuZXhwb3J0cy5kZWxldGVDaGFyQmFja3dhcmRTdHJpY3QgPSBkZWxldGVDaGFyQmFja3dhcmRTdHJpY3Q7XG5leHBvcnRzLmRlbGV0ZUNoYXJGb3J3YXJkID0gZGVsZXRlQ2hhckZvcndhcmQ7XG5leHBvcnRzLmRlbGV0ZUdyb3VwQmFja3dhcmQgPSBkZWxldGVHcm91cEJhY2t3YXJkO1xuZXhwb3J0cy5kZWxldGVHcm91cEZvcndhcmQgPSBkZWxldGVHcm91cEZvcndhcmQ7XG5leHBvcnRzLmRlbGV0ZUxpbmUgPSBkZWxldGVMaW5lO1xuZXhwb3J0cy5kZWxldGVMaW5lQm91bmRhcnlCYWNrd2FyZCA9IGRlbGV0ZUxpbmVCb3VuZGFyeUJhY2t3YXJkO1xuZXhwb3J0cy5kZWxldGVMaW5lQm91bmRhcnlGb3J3YXJkID0gZGVsZXRlTGluZUJvdW5kYXJ5Rm9yd2FyZDtcbmV4cG9ydHMuZGVsZXRlVG9MaW5lRW5kID0gZGVsZXRlVG9MaW5lRW5kO1xuZXhwb3J0cy5kZWxldGVUb0xpbmVTdGFydCA9IGRlbGV0ZVRvTGluZVN0YXJ0O1xuZXhwb3J0cy5kZWxldGVUcmFpbGluZ1doaXRlc3BhY2UgPSBkZWxldGVUcmFpbGluZ1doaXRlc3BhY2U7XG5leHBvcnRzLmVtYWNzU3R5bGVLZXltYXAgPSBlbWFjc1N0eWxlS2V5bWFwO1xuZXhwb3J0cy5oaXN0b3J5ID0gaGlzdG9yeTtcbmV4cG9ydHMuaGlzdG9yeUZpZWxkID0gaGlzdG9yeUZpZWxkO1xuZXhwb3J0cy5oaXN0b3J5S2V5bWFwID0gaGlzdG9yeUtleW1hcDtcbmV4cG9ydHMuaW5kZW50TGVzcyA9IGluZGVudExlc3M7XG5leHBvcnRzLmluZGVudE1vcmUgPSBpbmRlbnRNb3JlO1xuZXhwb3J0cy5pbmRlbnRTZWxlY3Rpb24gPSBpbmRlbnRTZWxlY3Rpb247XG5leHBvcnRzLmluZGVudFdpdGhUYWIgPSBpbmRlbnRXaXRoVGFiO1xuZXhwb3J0cy5pbnNlcnRCbGFua0xpbmUgPSBpbnNlcnRCbGFua0xpbmU7XG5leHBvcnRzLmluc2VydE5ld2xpbmUgPSBpbnNlcnROZXdsaW5lO1xuZXhwb3J0cy5pbnNlcnROZXdsaW5lQW5kSW5kZW50ID0gaW5zZXJ0TmV3bGluZUFuZEluZGVudDtcbmV4cG9ydHMuaW5zZXJ0TmV3bGluZUtlZXBJbmRlbnQgPSBpbnNlcnROZXdsaW5lS2VlcEluZGVudDtcbmV4cG9ydHMuaW5zZXJ0VGFiID0gaW5zZXJ0VGFiO1xuZXhwb3J0cy5pbnZlcnRlZEVmZmVjdHMgPSBpbnZlcnRlZEVmZmVjdHM7XG5leHBvcnRzLmlzb2xhdGVIaXN0b3J5ID0gaXNvbGF0ZUhpc3Rvcnk7XG5leHBvcnRzLmxpbmVDb21tZW50ID0gbGluZUNvbW1lbnQ7XG5leHBvcnRzLmxpbmVVbmNvbW1lbnQgPSBsaW5lVW5jb21tZW50O1xuZXhwb3J0cy5tb3ZlTGluZURvd24gPSBtb3ZlTGluZURvd247XG5leHBvcnRzLm1vdmVMaW5lVXAgPSBtb3ZlTGluZVVwO1xuZXhwb3J0cy5yZWRvID0gcmVkbztcbmV4cG9ydHMucmVkb0RlcHRoID0gcmVkb0RlcHRoO1xuZXhwb3J0cy5yZWRvU2VsZWN0aW9uID0gcmVkb1NlbGVjdGlvbjtcbmV4cG9ydHMuc2VsZWN0QWxsID0gc2VsZWN0QWxsO1xuZXhwb3J0cy5zZWxlY3RDaGFyQmFja3dhcmQgPSBzZWxlY3RDaGFyQmFja3dhcmQ7XG5leHBvcnRzLnNlbGVjdENoYXJGb3J3YXJkID0gc2VsZWN0Q2hhckZvcndhcmQ7XG5leHBvcnRzLnNlbGVjdENoYXJMZWZ0ID0gc2VsZWN0Q2hhckxlZnQ7XG5leHBvcnRzLnNlbGVjdENoYXJSaWdodCA9IHNlbGVjdENoYXJSaWdodDtcbmV4cG9ydHMuc2VsZWN0RG9jRW5kID0gc2VsZWN0RG9jRW5kO1xuZXhwb3J0cy5zZWxlY3REb2NTdGFydCA9IHNlbGVjdERvY1N0YXJ0O1xuZXhwb3J0cy5zZWxlY3RHcm91cEJhY2t3YXJkID0gc2VsZWN0R3JvdXBCYWNrd2FyZDtcbmV4cG9ydHMuc2VsZWN0R3JvdXBGb3J3YXJkID0gc2VsZWN0R3JvdXBGb3J3YXJkO1xuZXhwb3J0cy5zZWxlY3RHcm91cExlZnQgPSBzZWxlY3RHcm91cExlZnQ7XG5leHBvcnRzLnNlbGVjdEdyb3VwUmlnaHQgPSBzZWxlY3RHcm91cFJpZ2h0O1xuZXhwb3J0cy5zZWxlY3RMaW5lID0gc2VsZWN0TGluZTtcbmV4cG9ydHMuc2VsZWN0TGluZUJvdW5kYXJ5QmFja3dhcmQgPSBzZWxlY3RMaW5lQm91bmRhcnlCYWNrd2FyZDtcbmV4cG9ydHMuc2VsZWN0TGluZUJvdW5kYXJ5Rm9yd2FyZCA9IHNlbGVjdExpbmVCb3VuZGFyeUZvcndhcmQ7XG5leHBvcnRzLnNlbGVjdExpbmVCb3VuZGFyeUxlZnQgPSBzZWxlY3RMaW5lQm91bmRhcnlMZWZ0O1xuZXhwb3J0cy5zZWxlY3RMaW5lQm91bmRhcnlSaWdodCA9IHNlbGVjdExpbmVCb3VuZGFyeVJpZ2h0O1xuZXhwb3J0cy5zZWxlY3RMaW5lRG93biA9IHNlbGVjdExpbmVEb3duO1xuZXhwb3J0cy5zZWxlY3RMaW5lRW5kID0gc2VsZWN0TGluZUVuZDtcbmV4cG9ydHMuc2VsZWN0TGluZVN0YXJ0ID0gc2VsZWN0TGluZVN0YXJ0O1xuZXhwb3J0cy5zZWxlY3RMaW5lVXAgPSBzZWxlY3RMaW5lVXA7XG5leHBvcnRzLnNlbGVjdE1hdGNoaW5nQnJhY2tldCA9IHNlbGVjdE1hdGNoaW5nQnJhY2tldDtcbmV4cG9ydHMuc2VsZWN0UGFnZURvd24gPSBzZWxlY3RQYWdlRG93bjtcbmV4cG9ydHMuc2VsZWN0UGFnZVVwID0gc2VsZWN0UGFnZVVwO1xuZXhwb3J0cy5zZWxlY3RQYXJlbnRTeW50YXggPSBzZWxlY3RQYXJlbnRTeW50YXg7XG5leHBvcnRzLnNlbGVjdFN1YndvcmRCYWNrd2FyZCA9IHNlbGVjdFN1YndvcmRCYWNrd2FyZDtcbmV4cG9ydHMuc2VsZWN0U3Vid29yZEZvcndhcmQgPSBzZWxlY3RTdWJ3b3JkRm9yd2FyZDtcbmV4cG9ydHMuc2VsZWN0U3ludGF4TGVmdCA9IHNlbGVjdFN5bnRheExlZnQ7XG5leHBvcnRzLnNlbGVjdFN5bnRheFJpZ2h0ID0gc2VsZWN0U3ludGF4UmlnaHQ7XG5leHBvcnRzLnNpbXBsaWZ5U2VsZWN0aW9uID0gc2ltcGxpZnlTZWxlY3Rpb247XG5leHBvcnRzLnNwbGl0TGluZSA9IHNwbGl0TGluZTtcbmV4cG9ydHMuc3RhbmRhcmRLZXltYXAgPSBzdGFuZGFyZEtleW1hcDtcbmV4cG9ydHMudGVtcG9yYXJpbHlTZXRUYWJGb2N1c01vZGUgPSB0ZW1wb3JhcmlseVNldFRhYkZvY3VzTW9kZTtcbmV4cG9ydHMudG9nZ2xlQmxvY2tDb21tZW50ID0gdG9nZ2xlQmxvY2tDb21tZW50O1xuZXhwb3J0cy50b2dnbGVCbG9ja0NvbW1lbnRCeUxpbmUgPSB0b2dnbGVCbG9ja0NvbW1lbnRCeUxpbmU7XG5leHBvcnRzLnRvZ2dsZUNvbW1lbnQgPSB0b2dnbGVDb21tZW50O1xuZXhwb3J0cy50b2dnbGVMaW5lQ29tbWVudCA9IHRvZ2dsZUxpbmVDb21tZW50O1xuZXhwb3J0cy50b2dnbGVUYWJGb2N1c01vZGUgPSB0b2dnbGVUYWJGb2N1c01vZGU7XG5leHBvcnRzLnRyYW5zcG9zZUNoYXJzID0gdHJhbnNwb3NlQ2hhcnM7XG5leHBvcnRzLnVuZG8gPSB1bmRvO1xuZXhwb3J0cy51bmRvRGVwdGggPSB1bmRvRGVwdGg7XG5leHBvcnRzLnVuZG9TZWxlY3Rpb24gPSB1bmRvU2VsZWN0aW9uO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY29tbW9uID0gcmVxdWlyZSgnQGxlemVyL2NvbW1vbicpO1xudmFyIHN0YXRlID0gcmVxdWlyZSgnQGNvZGVtaXJyb3Ivc3RhdGUnKTtcbnZhciB2aWV3ID0gcmVxdWlyZSgnQGNvZGVtaXJyb3IvdmlldycpO1xudmFyIGhpZ2hsaWdodCA9IHJlcXVpcmUoJ0BsZXplci9oaWdobGlnaHQnKTtcbnZhciBzdHlsZU1vZCA9IHJlcXVpcmUoJ3N0eWxlLW1vZCcpO1xuXG52YXIgX2E7XG4vKipcbk5vZGUgcHJvcCBzdG9yZWQgaW4gYSBwYXJzZXIncyB0b3Agc3ludGF4IG5vZGUgdG8gcHJvdmlkZSB0aGVcbmZhY2V0IHRoYXQgc3RvcmVzIGxhbmd1YWdlLXNwZWNpZmljIGRhdGEgZm9yIHRoYXQgbGFuZ3VhZ2UuXG4qL1xuY29uc3QgbGFuZ3VhZ2VEYXRhUHJvcCA9IG5ldyBjb21tb24uTm9kZVByb3AoKTtcbi8qKlxuSGVscGVyIGZ1bmN0aW9uIHRvIGRlZmluZSBhIGZhY2V0ICh0byBiZSBhZGRlZCB0byB0aGUgdG9wIHN5bnRheFxubm9kZShzKSBmb3IgYSBsYW5ndWFnZSB2aWFcbltgbGFuZ3VhZ2VEYXRhUHJvcGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jbGFuZ3VhZ2UubGFuZ3VhZ2VEYXRhUHJvcCkpLCB0aGF0IHdpbGwgYmVcbnVzZWQgdG8gYXNzb2NpYXRlIGxhbmd1YWdlIGRhdGEgd2l0aCB0aGUgbGFuZ3VhZ2UuIFlvdVxucHJvYmFibHkgb25seSBuZWVkIHRoaXMgd2hlbiBzdWJjbGFzc2luZ1xuW2BMYW5ndWFnZWBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jbGFuZ3VhZ2UuTGFuZ3VhZ2UpLlxuKi9cbmZ1bmN0aW9uIGRlZmluZUxhbmd1YWdlRmFjZXQoYmFzZURhdGEpIHtcbiAgICByZXR1cm4gc3RhdGUuRmFjZXQuZGVmaW5lKHtcbiAgICAgICAgY29tYmluZTogYmFzZURhdGEgPyB2YWx1ZXMgPT4gdmFsdWVzLmNvbmNhdChiYXNlRGF0YSkgOiB1bmRlZmluZWRcbiAgICB9KTtcbn1cbi8qKlxuU3ludGF4IG5vZGUgcHJvcCB1c2VkIHRvIHJlZ2lzdGVyIHN1Ymxhbmd1YWdlcy4gU2hvdWxkIGJlIGFkZGVkIHRvXG50aGUgdG9wIGxldmVsIG5vZGUgdHlwZSBmb3IgdGhlIGxhbmd1YWdlLlxuKi9cbmNvbnN0IHN1Ymxhbmd1YWdlUHJvcCA9IG5ldyBjb21tb24uTm9kZVByb3AoKTtcbi8qKlxuQSBsYW5ndWFnZSBvYmplY3QgbWFuYWdlcyBwYXJzaW5nIGFuZCBwZXItbGFuZ3VhZ2VcblttZXRhZGF0YV0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5FZGl0b3JTdGF0ZS5sYW5ndWFnZURhdGFBdCkuIFBhcnNlIGRhdGEgaXNcbm1hbmFnZWQgYXMgYSBbTGV6ZXJdKGh0dHBzOi8vbGV6ZXIuY29kZW1pcnJvci5uZXQpIHRyZWUuIFRoZSBjbGFzc1xuY2FuIGJlIHVzZWQgZGlyZWN0bHksIHZpYSB0aGUgW2BMUkxhbmd1YWdlYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNsYW5ndWFnZS5MUkxhbmd1YWdlKVxuc3ViY2xhc3MgZm9yIFtMZXplcl0oaHR0cHM6Ly9sZXplci5jb2RlbWlycm9yLm5ldC8pIExSIHBhcnNlcnMsIG9yXG52aWEgdGhlIFtgU3RyZWFtTGFuZ3VhZ2VgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2xhbmd1YWdlLlN0cmVhbUxhbmd1YWdlKSBzdWJjbGFzc1xuZm9yIHN0cmVhbSBwYXJzZXJzLlxuKi9cbmNsYXNzIExhbmd1YWdlIHtcbiAgICAvKipcbiAgICBDb25zdHJ1Y3QgYSBsYW5ndWFnZSBvYmplY3QuIElmIHlvdSBuZWVkIHRvIGludm9rZSB0aGlzXG4gICAgZGlyZWN0bHksIGZpcnN0IGRlZmluZSBhIGRhdGEgZmFjZXQgd2l0aFxuICAgIFtgZGVmaW5lTGFuZ3VhZ2VGYWNldGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jbGFuZ3VhZ2UuZGVmaW5lTGFuZ3VhZ2VGYWNldCksIGFuZCB0aGVuXG4gICAgY29uZmlndXJlIHlvdXIgcGFyc2VyIHRvIFthdHRhY2hdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jbGFuZ3VhZ2UubGFuZ3VhZ2VEYXRhUHJvcCkgaXRcbiAgICB0byB0aGUgbGFuZ3VhZ2UncyBvdXRlciBzeW50YXggbm9kZS5cbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgIFRoZSBbbGFuZ3VhZ2UgZGF0YV0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5FZGl0b3JTdGF0ZS5sYW5ndWFnZURhdGFBdCkgZmFjZXRcbiAgICB1c2VkIGZvciB0aGlzIGxhbmd1YWdlLlxuICAgICovXG4gICAgZGF0YSwgcGFyc2VyLCBleHRyYUV4dGVuc2lvbnMgPSBbXSwgXG4gICAgLyoqXG4gICAgQSBsYW5ndWFnZSBuYW1lLlxuICAgICovXG4gICAgbmFtZSA9IFwiXCIpIHtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgLy8gS2x1ZGdlIHRvIGRlZmluZSBFZGl0b3JTdGF0ZS50cmVlIGFzIGEgZGVidWdnaW5nIGhlbHBlcixcbiAgICAgICAgLy8gd2l0aG91dCB0aGUgRWRpdG9yU3RhdGUgcGFja2FnZSBhY3R1YWxseSBrbm93aW5nIGFib3V0XG4gICAgICAgIC8vIGxhbmd1YWdlcyBhbmQgbGV6ZXIgdHJlZXMuXG4gICAgICAgIGlmICghc3RhdGUuRWRpdG9yU3RhdGUucHJvdG90eXBlLmhhc093blByb3BlcnR5KFwidHJlZVwiKSlcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdGF0ZS5FZGl0b3JTdGF0ZS5wcm90b3R5cGUsIFwidHJlZVwiLCB7IGdldCgpIHsgcmV0dXJuIHN5bnRheFRyZWUodGhpcyk7IH0gfSk7XG4gICAgICAgIHRoaXMucGFyc2VyID0gcGFyc2VyO1xuICAgICAgICB0aGlzLmV4dGVuc2lvbiA9IFtcbiAgICAgICAgICAgIGxhbmd1YWdlLm9mKHRoaXMpLFxuICAgICAgICAgICAgc3RhdGUuRWRpdG9yU3RhdGUubGFuZ3VhZ2VEYXRhLm9mKChzdGF0ZSwgcG9zLCBzaWRlKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHRvcCA9IHRvcE5vZGVBdChzdGF0ZSwgcG9zLCBzaWRlKSwgZGF0YSA9IHRvcC50eXBlLnByb3AobGFuZ3VhZ2VEYXRhUHJvcCk7XG4gICAgICAgICAgICAgICAgaWYgKCFkYXRhKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICAgICAgbGV0IGJhc2UgPSBzdGF0ZS5mYWNldChkYXRhKSwgc3ViID0gdG9wLnR5cGUucHJvcChzdWJsYW5ndWFnZVByb3ApO1xuICAgICAgICAgICAgICAgIGlmIChzdWIpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGlubmVyTm9kZSA9IHRvcC5yZXNvbHZlKHBvcyAtIHRvcC5mcm9tLCBzaWRlKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgc3VibGFuZyBvZiBzdWIpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3VibGFuZy50ZXN0KGlubmVyTm9kZSwgc3RhdGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRhdGEgPSBzdGF0ZS5mYWNldChzdWJsYW5nLmZhY2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3VibGFuZy50eXBlID09IFwicmVwbGFjZVwiID8gZGF0YSA6IGRhdGEuY29uY2F0KGJhc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYmFzZTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIF0uY29uY2F0KGV4dHJhRXh0ZW5zaW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgIFF1ZXJ5IHdoZXRoZXIgdGhpcyBsYW5ndWFnZSBpcyBhY3RpdmUgYXQgdGhlIGdpdmVuIHBvc2l0aW9uLlxuICAgICovXG4gICAgaXNBY3RpdmVBdChzdGF0ZSwgcG9zLCBzaWRlID0gLTEpIHtcbiAgICAgICAgcmV0dXJuIHRvcE5vZGVBdChzdGF0ZSwgcG9zLCBzaWRlKS50eXBlLnByb3AobGFuZ3VhZ2VEYXRhUHJvcCkgPT0gdGhpcy5kYXRhO1xuICAgIH1cbiAgICAvKipcbiAgICBGaW5kIHRoZSBkb2N1bWVudCByZWdpb25zIHRoYXQgd2VyZSBwYXJzZWQgdXNpbmcgdGhpcyBsYW5ndWFnZS5cbiAgICBUaGUgcmV0dXJuZWQgcmVnaW9ucyB3aWxsIF9pbmNsdWRlXyBhbnkgbmVzdGVkIGxhbmd1YWdlcyByb290ZWRcbiAgICBpbiB0aGlzIGxhbmd1YWdlLCB3aGVuIHRob3NlIGV4aXN0LlxuICAgICovXG4gICAgZmluZFJlZ2lvbnMoc3RhdGUpIHtcbiAgICAgICAgbGV0IGxhbmcgPSBzdGF0ZS5mYWNldChsYW5ndWFnZSk7XG4gICAgICAgIGlmICgobGFuZyA9PT0gbnVsbCB8fCBsYW5nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsYW5nLmRhdGEpID09IHRoaXMuZGF0YSlcbiAgICAgICAgICAgIHJldHVybiBbeyBmcm9tOiAwLCB0bzogc3RhdGUuZG9jLmxlbmd0aCB9XTtcbiAgICAgICAgaWYgKCFsYW5nIHx8ICFsYW5nLmFsbG93c05lc3RpbmcpXG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICAgICAgbGV0IGV4cGxvcmUgPSAodHJlZSwgZnJvbSkgPT4ge1xuICAgICAgICAgICAgaWYgKHRyZWUucHJvcChsYW5ndWFnZURhdGFQcm9wKSA9PSB0aGlzLmRhdGEpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7IGZyb20sIHRvOiBmcm9tICsgdHJlZS5sZW5ndGggfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IG1vdW50ID0gdHJlZS5wcm9wKGNvbW1vbi5Ob2RlUHJvcC5tb3VudGVkKTtcbiAgICAgICAgICAgIGlmIChtb3VudCkge1xuICAgICAgICAgICAgICAgIGlmIChtb3VudC50cmVlLnByb3AobGFuZ3VhZ2VEYXRhUHJvcCkgPT0gdGhpcy5kYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtb3VudC5vdmVybGF5KVxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgciBvZiBtb3VudC5vdmVybGF5KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHsgZnJvbTogci5mcm9tICsgZnJvbSwgdG86IHIudG8gKyBmcm9tIH0pO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7IGZyb206IGZyb20sIHRvOiBmcm9tICsgdHJlZS5sZW5ndGggfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobW91bnQub3ZlcmxheSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgc2l6ZSA9IHJlc3VsdC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGV4cGxvcmUobW91bnQudHJlZSwgbW91bnQub3ZlcmxheVswXS5mcm9tICsgZnJvbSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQubGVuZ3RoID4gc2l6ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyZWUuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgY2ggPSB0cmVlLmNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgICAgIGlmIChjaCBpbnN0YW5jZW9mIGNvbW1vbi5UcmVlKVxuICAgICAgICAgICAgICAgICAgICBleHBsb3JlKGNoLCB0cmVlLnBvc2l0aW9uc1tpXSArIGZyb20pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBleHBsb3JlKHN5bnRheFRyZWUoc3RhdGUpLCAwKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgSW5kaWNhdGVzIHdoZXRoZXIgdGhpcyBsYW5ndWFnZSBhbGxvd3MgbmVzdGVkIGxhbmd1YWdlcy4gVGhlXG4gICAgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiByZXR1cm5zIHRydWUuXG4gICAgKi9cbiAgICBnZXQgYWxsb3dzTmVzdGluZygpIHsgcmV0dXJuIHRydWU7IH1cbn1cbi8qKlxuQGludGVybmFsXG4qL1xuTGFuZ3VhZ2Uuc2V0U3RhdGUgPSBzdGF0ZS5TdGF0ZUVmZmVjdC5kZWZpbmUoKTtcbmZ1bmN0aW9uIHRvcE5vZGVBdChzdGF0ZSwgcG9zLCBzaWRlKSB7XG4gICAgbGV0IHRvcExhbmcgPSBzdGF0ZS5mYWNldChsYW5ndWFnZSksIHRyZWUgPSBzeW50YXhUcmVlKHN0YXRlKS50b3BOb2RlO1xuICAgIGlmICghdG9wTGFuZyB8fCB0b3BMYW5nLmFsbG93c05lc3RpbmcpIHtcbiAgICAgICAgZm9yIChsZXQgbm9kZSA9IHRyZWU7IG5vZGU7IG5vZGUgPSBub2RlLmVudGVyKHBvcywgc2lkZSwgY29tbW9uLkl0ZXJNb2RlLkV4Y2x1ZGVCdWZmZXJzKSlcbiAgICAgICAgICAgIGlmIChub2RlLnR5cGUuaXNUb3ApXG4gICAgICAgICAgICAgICAgdHJlZSA9IG5vZGU7XG4gICAgfVxuICAgIHJldHVybiB0cmVlO1xufVxuLyoqXG5BIHN1YmNsYXNzIG9mIFtgTGFuZ3VhZ2VgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2xhbmd1YWdlLkxhbmd1YWdlKSBmb3IgdXNlIHdpdGggTGV6ZXJcbltMUiBwYXJzZXJzXShodHRwczovL2xlemVyLmNvZGVtaXJyb3IubmV0L2RvY3MvcmVmI2xyLkxSUGFyc2VyKVxucGFyc2Vycy5cbiovXG5jbGFzcyBMUkxhbmd1YWdlIGV4dGVuZHMgTGFuZ3VhZ2Uge1xuICAgIGNvbnN0cnVjdG9yKGRhdGEsIHBhcnNlciwgbmFtZSkge1xuICAgICAgICBzdXBlcihkYXRhLCBwYXJzZXIsIFtdLCBuYW1lKTtcbiAgICAgICAgdGhpcy5wYXJzZXIgPSBwYXJzZXI7XG4gICAgfVxuICAgIC8qKlxuICAgIERlZmluZSBhIGxhbmd1YWdlIGZyb20gYSBwYXJzZXIuXG4gICAgKi9cbiAgICBzdGF0aWMgZGVmaW5lKHNwZWMpIHtcbiAgICAgICAgbGV0IGRhdGEgPSBkZWZpbmVMYW5ndWFnZUZhY2V0KHNwZWMubGFuZ3VhZ2VEYXRhKTtcbiAgICAgICAgcmV0dXJuIG5ldyBMUkxhbmd1YWdlKGRhdGEsIHNwZWMucGFyc2VyLmNvbmZpZ3VyZSh7XG4gICAgICAgICAgICBwcm9wczogW2xhbmd1YWdlRGF0YVByb3AuYWRkKHR5cGUgPT4gdHlwZS5pc1RvcCA/IGRhdGEgOiB1bmRlZmluZWQpXVxuICAgICAgICB9KSwgc3BlYy5uYW1lKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIHRoaXMgbGFuZ3VhZ2Ugd2l0aCBhIHJlY29uZmlndXJlZFxuICAgIHZlcnNpb24gb2YgaXRzIHBhcnNlciBhbmQgb3B0aW9uYWxseSBhIG5ldyBuYW1lLlxuICAgICovXG4gICAgY29uZmlndXJlKG9wdGlvbnMsIG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMUkxhbmd1YWdlKHRoaXMuZGF0YSwgdGhpcy5wYXJzZXIuY29uZmlndXJlKG9wdGlvbnMpLCBuYW1lIHx8IHRoaXMubmFtZSk7XG4gICAgfVxuICAgIGdldCBhbGxvd3NOZXN0aW5nKCkgeyByZXR1cm4gdGhpcy5wYXJzZXIuaGFzV3JhcHBlcnMoKTsgfVxufVxuLyoqXG5HZXQgdGhlIHN5bnRheCB0cmVlIGZvciBhIHN0YXRlLCB3aGljaCBpcyB0aGUgY3VycmVudCAocG9zc2libHlcbmluY29tcGxldGUpIHBhcnNlIHRyZWUgb2YgdGhlIGFjdGl2ZVxuW2xhbmd1YWdlXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2xhbmd1YWdlLkxhbmd1YWdlKSwgb3IgdGhlIGVtcHR5IHRyZWUgaWYgdGhlcmUgaXMgbm9cbmxhbmd1YWdlIGF2YWlsYWJsZS5cbiovXG5mdW5jdGlvbiBzeW50YXhUcmVlKHN0YXRlKSB7XG4gICAgbGV0IGZpZWxkID0gc3RhdGUuZmllbGQoTGFuZ3VhZ2Uuc3RhdGUsIGZhbHNlKTtcbiAgICByZXR1cm4gZmllbGQgPyBmaWVsZC50cmVlIDogY29tbW9uLlRyZWUuZW1wdHk7XG59XG4vKipcblRyeSB0byBnZXQgYSBwYXJzZSB0cmVlIHRoYXQgc3BhbnMgYXQgbGVhc3QgdXAgdG8gYHVwdG9gLiBUaGVcbm1ldGhvZCB3aWxsIGRvIGF0IG1vc3QgYHRpbWVvdXRgIG1pbGxpc2Vjb25kcyBvZiB3b3JrIHRvIHBhcnNlXG51cCB0byB0aGF0IHBvaW50IGlmIHRoZSB0cmVlIGlzbid0IGFscmVhZHkgYXZhaWxhYmxlLlxuKi9cbmZ1bmN0aW9uIGVuc3VyZVN5bnRheFRyZWUoc3RhdGUsIHVwdG8sIHRpbWVvdXQgPSA1MCkge1xuICAgIHZhciBfYTtcbiAgICBsZXQgcGFyc2UgPSAoX2EgPSBzdGF0ZS5maWVsZChMYW5ndWFnZS5zdGF0ZSwgZmFsc2UpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29udGV4dDtcbiAgICBpZiAoIXBhcnNlKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICBsZXQgb2xkVmllcG9ydCA9IHBhcnNlLnZpZXdwb3J0O1xuICAgIHBhcnNlLnVwZGF0ZVZpZXdwb3J0KHsgZnJvbTogMCwgdG86IHVwdG8gfSk7XG4gICAgbGV0IHJlc3VsdCA9IHBhcnNlLmlzRG9uZSh1cHRvKSB8fCBwYXJzZS53b3JrKHRpbWVvdXQsIHVwdG8pID8gcGFyc2UudHJlZSA6IG51bGw7XG4gICAgcGFyc2UudXBkYXRlVmlld3BvcnQob2xkVmllcG9ydCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuUXVlcmllcyB3aGV0aGVyIHRoZXJlIGlzIGEgZnVsbCBzeW50YXggdHJlZSBhdmFpbGFibGUgdXAgdG8gdGhlXG5naXZlbiBkb2N1bWVudCBwb3NpdGlvbi4gSWYgdGhlcmUgaXNuJ3QsIHRoZSBiYWNrZ3JvdW5kIHBhcnNlXG5wcm9jZXNzIF9taWdodF8gc3RpbGwgYmUgd29ya2luZyBhbmQgdXBkYXRlIHRoZSB0cmVlIGZ1cnRoZXIsIGJ1dFxudGhlcmUgaXMgbm8gZ3VhcmFudGVlIG9mIHRoYXTigJR0aGUgcGFyc2VyIHdpbGwgW3N0b3BcbndvcmtpbmddKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jbGFuZ3VhZ2Uuc3ludGF4UGFyc2VyUnVubmluZykgd2hlbiBpdCBoYXMgc3BlbnQgYVxuY2VydGFpbiBhbW91bnQgb2YgdGltZSBvciBoYXMgbW92ZWQgYmV5b25kIHRoZSB2aXNpYmxlIHZpZXdwb3J0LlxuQWx3YXlzIHJldHVybnMgZmFsc2UgaWYgbm8gbGFuZ3VhZ2UgaGFzIGJlZW4gZW5hYmxlZC5cbiovXG5mdW5jdGlvbiBzeW50YXhUcmVlQXZhaWxhYmxlKHN0YXRlLCB1cHRvID0gc3RhdGUuZG9jLmxlbmd0aCkge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gKChfYSA9IHN0YXRlLmZpZWxkKExhbmd1YWdlLnN0YXRlLCBmYWxzZSkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jb250ZXh0LmlzRG9uZSh1cHRvKSkgfHwgZmFsc2U7XG59XG4vKipcbk1vdmUgcGFyc2luZyBmb3J3YXJkLCBhbmQgdXBkYXRlIHRoZSBlZGl0b3Igc3RhdGUgYWZ0ZXJ3YXJkcyB0b1xucmVmbGVjdCB0aGUgbmV3IHRyZWUuIFdpbGwgd29yayBmb3IgYXQgbW9zdCBgdGltZW91dGBcbm1pbGxpc2Vjb25kcy4gUmV0dXJucyB0cnVlIGlmIHRoZSBwYXJzZXIgbWFuYWdlZCBnZXQgdG8gdGhlIGdpdmVuXG5wb3NpdGlvbiBpbiB0aGF0IHRpbWUuXG4qL1xuZnVuY3Rpb24gZm9yY2VQYXJzaW5nKHZpZXcsIHVwdG8gPSB2aWV3LnZpZXdwb3J0LnRvLCB0aW1lb3V0ID0gMTAwKSB7XG4gICAgbGV0IHN1Y2Nlc3MgPSBlbnN1cmVTeW50YXhUcmVlKHZpZXcuc3RhdGUsIHVwdG8sIHRpbWVvdXQpO1xuICAgIGlmIChzdWNjZXNzICE9IHN5bnRheFRyZWUodmlldy5zdGF0ZSkpXG4gICAgICAgIHZpZXcuZGlzcGF0Y2goe30pO1xuICAgIHJldHVybiAhIXN1Y2Nlc3M7XG59XG4vKipcblRlbGxzIHlvdSB3aGV0aGVyIHRoZSBsYW5ndWFnZSBwYXJzZXIgaXMgcGxhbm5pbmcgdG8gZG8gbW9yZVxucGFyc2luZyB3b3JrIChpbiBhIGByZXF1ZXN0SWRsZUNhbGxiYWNrYCBwc2V1ZG8tdGhyZWFkKSBvciBoYXNcbnN0b3BwZWQgcnVubmluZywgZWl0aGVyIGJlY2F1c2UgaXQgcGFyc2VkIHRoZSBlbnRpcmUgZG9jdW1lbnQsXG5iZWNhdXNlIGl0IHNwZW50IHRvbyBtdWNoIHRpbWUgYW5kIHdhcyBjdXQgb2ZmLCBvciBiZWNhdXNlIHRoZXJlXG5pcyBubyBsYW5ndWFnZSBwYXJzZXIgZW5hYmxlZC5cbiovXG5mdW5jdGlvbiBzeW50YXhQYXJzZXJSdW5uaW5nKHZpZXcpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuICgoX2EgPSB2aWV3LnBsdWdpbihwYXJzZVdvcmtlcikpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pc1dvcmtpbmcoKSkgfHwgZmFsc2U7XG59XG4vKipcbkxlemVyLXN0eWxlXG5bYElucHV0YF0oaHR0cHM6Ly9sZXplci5jb2RlbWlycm9yLm5ldC9kb2NzL3JlZiNjb21tb24uSW5wdXQpXG5vYmplY3QgZm9yIGEgW2BUZXh0YF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5UZXh0KSBvYmplY3QuXG4qL1xuY2xhc3MgRG9jSW5wdXQge1xuICAgIC8qKlxuICAgIENyZWF0ZSBhbiBpbnB1dCBvYmplY3QgZm9yIHRoZSBnaXZlbiBkb2N1bWVudC5cbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGRvYykge1xuICAgICAgICB0aGlzLmRvYyA9IGRvYztcbiAgICAgICAgdGhpcy5jdXJzb3JQb3MgPSAwO1xuICAgICAgICB0aGlzLnN0cmluZyA9IFwiXCI7XG4gICAgICAgIHRoaXMuY3Vyc29yID0gZG9jLml0ZXIoKTtcbiAgICB9XG4gICAgZ2V0IGxlbmd0aCgpIHsgcmV0dXJuIHRoaXMuZG9jLmxlbmd0aDsgfVxuICAgIHN5bmNUbyhwb3MpIHtcbiAgICAgICAgdGhpcy5zdHJpbmcgPSB0aGlzLmN1cnNvci5uZXh0KHBvcyAtIHRoaXMuY3Vyc29yUG9zKS52YWx1ZTtcbiAgICAgICAgdGhpcy5jdXJzb3JQb3MgPSBwb3MgKyB0aGlzLnN0cmluZy5sZW5ndGg7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnNvclBvcyAtIHRoaXMuc3RyaW5nLmxlbmd0aDtcbiAgICB9XG4gICAgY2h1bmsocG9zKSB7XG4gICAgICAgIHRoaXMuc3luY1RvKHBvcyk7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cmluZztcbiAgICB9XG4gICAgZ2V0IGxpbmVDaHVua3MoKSB7IHJldHVybiB0cnVlOyB9XG4gICAgcmVhZChmcm9tLCB0bykge1xuICAgICAgICBsZXQgc3RyaW5nU3RhcnQgPSB0aGlzLmN1cnNvclBvcyAtIHRoaXMuc3RyaW5nLmxlbmd0aDtcbiAgICAgICAgaWYgKGZyb20gPCBzdHJpbmdTdGFydCB8fCB0byA+PSB0aGlzLmN1cnNvclBvcylcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRvYy5zbGljZVN0cmluZyhmcm9tLCB0byk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0cmluZy5zbGljZShmcm9tIC0gc3RyaW5nU3RhcnQsIHRvIC0gc3RyaW5nU3RhcnQpO1xuICAgIH1cbn1cbmxldCBjdXJyZW50Q29udGV4dCA9IG51bGw7XG4vKipcbkEgcGFyc2UgY29udGV4dCBwcm92aWRlZCB0byBwYXJzZXJzIHdvcmtpbmcgb24gdGhlIGVkaXRvciBjb250ZW50LlxuKi9cbmNsYXNzIFBhcnNlQ29udGV4dCB7XG4gICAgY29uc3RydWN0b3IocGFyc2VyLCBcbiAgICAvKipcbiAgICBUaGUgY3VycmVudCBlZGl0b3Igc3RhdGUuXG4gICAgKi9cbiAgICBzdGF0ZSwgXG4gICAgLyoqXG4gICAgVHJlZSBmcmFnbWVudHMgdGhhdCBjYW4gYmUgcmV1c2VkIGJ5IGluY3JlbWVudGFsIHJlLXBhcnNlcy5cbiAgICAqL1xuICAgIGZyYWdtZW50cyA9IFtdLCBcbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHRyZWUsIFxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgdHJlZUxlbiwgXG4gICAgLyoqXG4gICAgVGhlIGN1cnJlbnQgZWRpdG9yIHZpZXdwb3J0IChvciBzb21lIG92ZXJhcHByb3hpbWF0aW9uXG4gICAgdGhlcmVvZikuIEludGVuZGVkIHRvIGJlIHVzZWQgZm9yIG9wcG9ydHVuaXN0aWNhbGx5IGF2b2lkaW5nXG4gICAgd29yayAoaW4gd2hpY2ggY2FzZVxuICAgIFtgc2tpcFVudGlsSW5WaWV3YF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNsYW5ndWFnZS5QYXJzZUNvbnRleHQuc2tpcFVudGlsSW5WaWV3KVxuICAgIHNob3VsZCBiZSBjYWxsZWQgdG8gbWFrZSBzdXJlIHRoZSBwYXJzZXIgaXMgcmVzdGFydGVkIHdoZW4gdGhlXG4gICAgc2tpcHBlZCByZWdpb24gYmVjb21lcyB2aXNpYmxlKS5cbiAgICAqL1xuICAgIHZpZXdwb3J0LCBcbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHNraXBwZWQsIFxuICAgIC8qKlxuICAgIFRoaXMgaXMgd2hlcmUgc2tpcHBpbmcgcGFyc2VycyBjYW4gcmVnaXN0ZXIgYSBwcm9taXNlIHRoYXQsXG4gICAgd2hlbiByZXNvbHZlZCwgd2lsbCBzY2hlZHVsZSBhIG5ldyBwYXJzZS4gSXQgaXMgY2xlYXJlZCB3aGVuXG4gICAgdGhlIHBhcnNlIHdvcmtlciBwaWNrcyB1cCB0aGUgcHJvbWlzZS4gQGludGVybmFsXG4gICAgKi9cbiAgICBzY2hlZHVsZU9uKSB7XG4gICAgICAgIHRoaXMucGFyc2VyID0gcGFyc2VyO1xuICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgICAgIHRoaXMuZnJhZ21lbnRzID0gZnJhZ21lbnRzO1xuICAgICAgICB0aGlzLnRyZWUgPSB0cmVlO1xuICAgICAgICB0aGlzLnRyZWVMZW4gPSB0cmVlTGVuO1xuICAgICAgICB0aGlzLnZpZXdwb3J0ID0gdmlld3BvcnQ7XG4gICAgICAgIHRoaXMuc2tpcHBlZCA9IHNraXBwZWQ7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVPbiA9IHNjaGVkdWxlT247XG4gICAgICAgIHRoaXMucGFyc2UgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgQGludGVybmFsXG4gICAgICAgICovXG4gICAgICAgIHRoaXMudGVtcFNraXBwZWQgPSBbXTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlKHBhcnNlciwgc3RhdGUsIHZpZXdwb3J0KSB7XG4gICAgICAgIHJldHVybiBuZXcgUGFyc2VDb250ZXh0KHBhcnNlciwgc3RhdGUsIFtdLCBjb21tb24uVHJlZS5lbXB0eSwgMCwgdmlld3BvcnQsIFtdLCBudWxsKTtcbiAgICB9XG4gICAgc3RhcnRQYXJzZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VyLnN0YXJ0UGFyc2UobmV3IERvY0lucHV0KHRoaXMuc3RhdGUuZG9jKSwgdGhpcy5mcmFnbWVudHMpO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHdvcmsodW50aWwsIHVwdG8pIHtcbiAgICAgICAgaWYgKHVwdG8gIT0gbnVsbCAmJiB1cHRvID49IHRoaXMuc3RhdGUuZG9jLmxlbmd0aClcbiAgICAgICAgICAgIHVwdG8gPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmICh0aGlzLnRyZWUgIT0gY29tbW9uLlRyZWUuZW1wdHkgJiYgdGhpcy5pc0RvbmUodXB0byAhPT0gbnVsbCAmJiB1cHRvICE9PSB2b2lkIDAgPyB1cHRvIDogdGhpcy5zdGF0ZS5kb2MubGVuZ3RoKSkge1xuICAgICAgICAgICAgdGhpcy50YWtlVHJlZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMud2l0aENvbnRleHQoKCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB1bnRpbCA9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgbGV0IGVuZFRpbWUgPSBEYXRlLm5vdygpICsgdW50aWw7XG4gICAgICAgICAgICAgICAgdW50aWwgPSAoKSA9PiBEYXRlLm5vdygpID4gZW5kVGltZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5wYXJzZSlcbiAgICAgICAgICAgICAgICB0aGlzLnBhcnNlID0gdGhpcy5zdGFydFBhcnNlKCk7XG4gICAgICAgICAgICBpZiAodXB0byAhPSBudWxsICYmICh0aGlzLnBhcnNlLnN0b3BwZWRBdCA9PSBudWxsIHx8IHRoaXMucGFyc2Uuc3RvcHBlZEF0ID4gdXB0bykgJiZcbiAgICAgICAgICAgICAgICB1cHRvIDwgdGhpcy5zdGF0ZS5kb2MubGVuZ3RoKVxuICAgICAgICAgICAgICAgIHRoaXMucGFyc2Uuc3RvcEF0KHVwdG8pO1xuICAgICAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgICAgIGxldCBkb25lID0gdGhpcy5wYXJzZS5hZHZhbmNlKCk7XG4gICAgICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mcmFnbWVudHMgPSB0aGlzLndpdGhvdXRUZW1wU2tpcHBlZChjb21tb24uVHJlZUZyYWdtZW50LmFkZFRyZWUoZG9uZSwgdGhpcy5mcmFnbWVudHMsIHRoaXMucGFyc2Uuc3RvcHBlZEF0ICE9IG51bGwpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmVlTGVuID0gKF9hID0gdGhpcy5wYXJzZS5zdG9wcGVkQXQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRoaXMuc3RhdGUuZG9jLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmVlID0gZG9uZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJzZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRyZWVMZW4gPCAodXB0byAhPT0gbnVsbCAmJiB1cHRvICE9PSB2b2lkIDAgPyB1cHRvIDogdGhpcy5zdGF0ZS5kb2MubGVuZ3RoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFyc2UgPSB0aGlzLnN0YXJ0UGFyc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh1bnRpbCgpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHRha2VUcmVlKCkge1xuICAgICAgICBsZXQgcG9zLCB0cmVlO1xuICAgICAgICBpZiAodGhpcy5wYXJzZSAmJiAocG9zID0gdGhpcy5wYXJzZS5wYXJzZWRQb3MpID49IHRoaXMudHJlZUxlbikge1xuICAgICAgICAgICAgaWYgKHRoaXMucGFyc2Uuc3RvcHBlZEF0ID09IG51bGwgfHwgdGhpcy5wYXJzZS5zdG9wcGVkQXQgPiBwb3MpXG4gICAgICAgICAgICAgICAgdGhpcy5wYXJzZS5zdG9wQXQocG9zKTtcbiAgICAgICAgICAgIHRoaXMud2l0aENvbnRleHQoKCkgPT4geyB3aGlsZSAoISh0cmVlID0gdGhpcy5wYXJzZS5hZHZhbmNlKCkpKSB7IH0gfSk7XG4gICAgICAgICAgICB0aGlzLnRyZWVMZW4gPSBwb3M7XG4gICAgICAgICAgICB0aGlzLnRyZWUgPSB0cmVlO1xuICAgICAgICAgICAgdGhpcy5mcmFnbWVudHMgPSB0aGlzLndpdGhvdXRUZW1wU2tpcHBlZChjb21tb24uVHJlZUZyYWdtZW50LmFkZFRyZWUodGhpcy50cmVlLCB0aGlzLmZyYWdtZW50cywgdHJ1ZSkpO1xuICAgICAgICAgICAgdGhpcy5wYXJzZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgd2l0aENvbnRleHQoZikge1xuICAgICAgICBsZXQgcHJldiA9IGN1cnJlbnRDb250ZXh0O1xuICAgICAgICBjdXJyZW50Q29udGV4dCA9IHRoaXM7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gZigpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgY3VycmVudENvbnRleHQgPSBwcmV2O1xuICAgICAgICB9XG4gICAgfVxuICAgIHdpdGhvdXRUZW1wU2tpcHBlZChmcmFnbWVudHMpIHtcbiAgICAgICAgZm9yIChsZXQgcjsgciA9IHRoaXMudGVtcFNraXBwZWQucG9wKCk7KVxuICAgICAgICAgICAgZnJhZ21lbnRzID0gY3V0RnJhZ21lbnRzKGZyYWdtZW50cywgci5mcm9tLCByLnRvKTtcbiAgICAgICAgcmV0dXJuIGZyYWdtZW50cztcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBjaGFuZ2VzKGNoYW5nZXMsIG5ld1N0YXRlKSB7XG4gICAgICAgIGxldCB7IGZyYWdtZW50cywgdHJlZSwgdHJlZUxlbiwgdmlld3BvcnQsIHNraXBwZWQgfSA9IHRoaXM7XG4gICAgICAgIHRoaXMudGFrZVRyZWUoKTtcbiAgICAgICAgaWYgKCFjaGFuZ2VzLmVtcHR5KSB7XG4gICAgICAgICAgICBsZXQgcmFuZ2VzID0gW107XG4gICAgICAgICAgICBjaGFuZ2VzLml0ZXJDaGFuZ2VkUmFuZ2VzKChmcm9tQSwgdG9BLCBmcm9tQiwgdG9CKSA9PiByYW5nZXMucHVzaCh7IGZyb21BLCB0b0EsIGZyb21CLCB0b0IgfSkpO1xuICAgICAgICAgICAgZnJhZ21lbnRzID0gY29tbW9uLlRyZWVGcmFnbWVudC5hcHBseUNoYW5nZXMoZnJhZ21lbnRzLCByYW5nZXMpO1xuICAgICAgICAgICAgdHJlZSA9IGNvbW1vbi5UcmVlLmVtcHR5O1xuICAgICAgICAgICAgdHJlZUxlbiA9IDA7XG4gICAgICAgICAgICB2aWV3cG9ydCA9IHsgZnJvbTogY2hhbmdlcy5tYXBQb3Modmlld3BvcnQuZnJvbSwgLTEpLCB0bzogY2hhbmdlcy5tYXBQb3Modmlld3BvcnQudG8sIDEpIH07XG4gICAgICAgICAgICBpZiAodGhpcy5za2lwcGVkLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHNraXBwZWQgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCByIG9mIHRoaXMuc2tpcHBlZCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZnJvbSA9IGNoYW5nZXMubWFwUG9zKHIuZnJvbSwgMSksIHRvID0gY2hhbmdlcy5tYXBQb3Moci50bywgLTEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZnJvbSA8IHRvKVxuICAgICAgICAgICAgICAgICAgICAgICAgc2tpcHBlZC5wdXNoKHsgZnJvbSwgdG8gfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUGFyc2VDb250ZXh0KHRoaXMucGFyc2VyLCBuZXdTdGF0ZSwgZnJhZ21lbnRzLCB0cmVlLCB0cmVlTGVuLCB2aWV3cG9ydCwgc2tpcHBlZCwgdGhpcy5zY2hlZHVsZU9uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICB1cGRhdGVWaWV3cG9ydCh2aWV3cG9ydCkge1xuICAgICAgICBpZiAodGhpcy52aWV3cG9ydC5mcm9tID09IHZpZXdwb3J0LmZyb20gJiYgdGhpcy52aWV3cG9ydC50byA9PSB2aWV3cG9ydC50bylcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgdGhpcy52aWV3cG9ydCA9IHZpZXdwb3J0O1xuICAgICAgICBsZXQgc3RhcnRMZW4gPSB0aGlzLnNraXBwZWQubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2tpcHBlZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHsgZnJvbSwgdG8gfSA9IHRoaXMuc2tpcHBlZFtpXTtcbiAgICAgICAgICAgIGlmIChmcm9tIDwgdmlld3BvcnQudG8gJiYgdG8gPiB2aWV3cG9ydC5mcm9tKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mcmFnbWVudHMgPSBjdXRGcmFnbWVudHModGhpcy5mcmFnbWVudHMsIGZyb20sIHRvKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNraXBwZWQuc3BsaWNlKGktLSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc2tpcHBlZC5sZW5ndGggPj0gc3RhcnRMZW4pXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIGlmICh0aGlzLnBhcnNlKSB7XG4gICAgICAgICAgICB0aGlzLnRha2VUcmVlKCk7XG4gICAgICAgICAgICB0aGlzLnBhcnNlID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICBOb3RpZnkgdGhlIHBhcnNlIHNjaGVkdWxlciB0aGF0IHRoZSBnaXZlbiByZWdpb24gd2FzIHNraXBwZWRcbiAgICBiZWNhdXNlIGl0IHdhc24ndCBpbiB2aWV3LCBhbmQgdGhlIHBhcnNlIHNob3VsZCBiZSByZXN0YXJ0ZWRcbiAgICB3aGVuIGl0IGNvbWVzIGludG8gdmlldy5cbiAgICAqL1xuICAgIHNraXBVbnRpbEluVmlldyhmcm9tLCB0bykge1xuICAgICAgICB0aGlzLnNraXBwZWQucHVzaCh7IGZyb20sIHRvIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICBSZXR1cm5zIGEgcGFyc2VyIGludGVuZGVkIHRvIGJlIHVzZWQgYXMgcGxhY2Vob2xkZXIgd2hlblxuICAgIGFzeW5jaHJvbm91c2x5IGxvYWRpbmcgYSBuZXN0ZWQgcGFyc2VyLiBJdCdsbCBza2lwIGl0cyBpbnB1dCBhbmRcbiAgICBtYXJrIGl0IGFzIG5vdC1yZWFsbHktcGFyc2VkLCBzbyB0aGF0IHRoZSBuZXh0IHVwZGF0ZSB3aWxsIHBhcnNlXG4gICAgaXQgYWdhaW4uXG4gICAgXG4gICAgV2hlbiBgdW50aWxgIGlzIGdpdmVuLCBhIHJlcGFyc2Ugd2lsbCBiZSBzY2hlZHVsZWQgd2hlbiB0aGF0XG4gICAgcHJvbWlzZSByZXNvbHZlcy5cbiAgICAqL1xuICAgIHN0YXRpYyBnZXRTa2lwcGluZ1BhcnNlcih1bnRpbCkge1xuICAgICAgICByZXR1cm4gbmV3IGNsYXNzIGV4dGVuZHMgY29tbW9uLlBhcnNlciB7XG4gICAgICAgICAgICBjcmVhdGVQYXJzZShpbnB1dCwgZnJhZ21lbnRzLCByYW5nZXMpIHtcbiAgICAgICAgICAgICAgICBsZXQgZnJvbSA9IHJhbmdlc1swXS5mcm9tLCB0byA9IHJhbmdlc1tyYW5nZXMubGVuZ3RoIC0gMV0udG87XG4gICAgICAgICAgICAgICAgbGV0IHBhcnNlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkUG9zOiBmcm9tLFxuICAgICAgICAgICAgICAgICAgICBhZHZhbmNlKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGN4ID0gY3VycmVudENvbnRleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCByIG9mIHJhbmdlcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3gudGVtcFNraXBwZWQucHVzaChyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodW50aWwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN4LnNjaGVkdWxlT24gPSBjeC5zY2hlZHVsZU9uID8gUHJvbWlzZS5hbGwoW2N4LnNjaGVkdWxlT24sIHVudGlsXSkgOiB1bnRpbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFyc2VkUG9zID0gdG87XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IGNvbW1vbi5UcmVlKGNvbW1vbi5Ob2RlVHlwZS5ub25lLCBbXSwgW10sIHRvIC0gZnJvbSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHN0b3BwZWRBdDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgc3RvcEF0KCkgeyB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGlzRG9uZSh1cHRvKSB7XG4gICAgICAgIHVwdG8gPSBNYXRoLm1pbih1cHRvLCB0aGlzLnN0YXRlLmRvYy5sZW5ndGgpO1xuICAgICAgICBsZXQgZnJhZ3MgPSB0aGlzLmZyYWdtZW50cztcbiAgICAgICAgcmV0dXJuIHRoaXMudHJlZUxlbiA+PSB1cHRvICYmIGZyYWdzLmxlbmd0aCAmJiBmcmFnc1swXS5mcm9tID09IDAgJiYgZnJhZ3NbMF0udG8gPj0gdXB0bztcbiAgICB9XG4gICAgLyoqXG4gICAgR2V0IHRoZSBjb250ZXh0IGZvciB0aGUgY3VycmVudCBwYXJzZSwgb3IgYG51bGxgIGlmIG5vIGVkaXRvclxuICAgIHBhcnNlIGlzIGluIHByb2dyZXNzLlxuICAgICovXG4gICAgc3RhdGljIGdldCgpIHsgcmV0dXJuIGN1cnJlbnRDb250ZXh0OyB9XG59XG5mdW5jdGlvbiBjdXRGcmFnbWVudHMoZnJhZ21lbnRzLCBmcm9tLCB0bykge1xuICAgIHJldHVybiBjb21tb24uVHJlZUZyYWdtZW50LmFwcGx5Q2hhbmdlcyhmcmFnbWVudHMsIFt7IGZyb21BOiBmcm9tLCB0b0E6IHRvLCBmcm9tQjogZnJvbSwgdG9COiB0byB9XSk7XG59XG5jbGFzcyBMYW5ndWFnZVN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvLyBBIG11dGFibGUgcGFyc2Ugc3RhdGUgdGhhdCBpcyB1c2VkIHRvIHByZXNlcnZlIHdvcmsgZG9uZSBkdXJpbmdcbiAgICAvLyB0aGUgbGlmZXRpbWUgb2YgYSBzdGF0ZSB3aGVuIG1vdmluZyB0byB0aGUgbmV4dCBzdGF0ZS5cbiAgICBjb250ZXh0KSB7XG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIHRoaXMudHJlZSA9IGNvbnRleHQudHJlZTtcbiAgICB9XG4gICAgYXBwbHkodHIpIHtcbiAgICAgICAgaWYgKCF0ci5kb2NDaGFuZ2VkICYmIHRoaXMudHJlZSA9PSB0aGlzLmNvbnRleHQudHJlZSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICBsZXQgbmV3Q3ggPSB0aGlzLmNvbnRleHQuY2hhbmdlcyh0ci5jaGFuZ2VzLCB0ci5zdGF0ZSk7XG4gICAgICAgIC8vIElmIHRoZSBwcmV2aW91cyBwYXJzZSB3YXNuJ3QgZG9uZSwgZ28gZm9yd2FyZCBvbmx5IHVwIHRvIGl0c1xuICAgICAgICAvLyBlbmQgcG9zaXRpb24gb3IgdGhlIGVuZCBvZiB0aGUgdmlld3BvcnQsIHRvIGF2b2lkIHNsb3dpbmcgZG93blxuICAgICAgICAvLyBzdGF0ZSB1cGRhdGVzIHdpdGggcGFyc2Ugd29yayBiZXlvbmQgdGhlIHZpZXdwb3J0LlxuICAgICAgICBsZXQgdXB0byA9IHRoaXMuY29udGV4dC50cmVlTGVuID09IHRyLnN0YXJ0U3RhdGUuZG9jLmxlbmd0aCA/IHVuZGVmaW5lZFxuICAgICAgICAgICAgOiBNYXRoLm1heCh0ci5jaGFuZ2VzLm1hcFBvcyh0aGlzLmNvbnRleHQudHJlZUxlbiksIG5ld0N4LnZpZXdwb3J0LnRvKTtcbiAgICAgICAgaWYgKCFuZXdDeC53b3JrKDIwIC8qIFdvcmsuQXBwbHkgKi8sIHVwdG8pKVxuICAgICAgICAgICAgbmV3Q3gudGFrZVRyZWUoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBMYW5ndWFnZVN0YXRlKG5ld0N4KTtcbiAgICB9XG4gICAgc3RhdGljIGluaXQoc3RhdGUpIHtcbiAgICAgICAgbGV0IHZwVG8gPSBNYXRoLm1pbigzMDAwIC8qIFdvcmsuSW5pdFZpZXdwb3J0ICovLCBzdGF0ZS5kb2MubGVuZ3RoKTtcbiAgICAgICAgbGV0IHBhcnNlU3RhdGUgPSBQYXJzZUNvbnRleHQuY3JlYXRlKHN0YXRlLmZhY2V0KGxhbmd1YWdlKS5wYXJzZXIsIHN0YXRlLCB7IGZyb206IDAsIHRvOiB2cFRvIH0pO1xuICAgICAgICBpZiAoIXBhcnNlU3RhdGUud29yaygyMCAvKiBXb3JrLkFwcGx5ICovLCB2cFRvKSlcbiAgICAgICAgICAgIHBhcnNlU3RhdGUudGFrZVRyZWUoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBMYW5ndWFnZVN0YXRlKHBhcnNlU3RhdGUpO1xuICAgIH1cbn1cbkxhbmd1YWdlLnN0YXRlID0gc3RhdGUuU3RhdGVGaWVsZC5kZWZpbmUoe1xuICAgIGNyZWF0ZTogTGFuZ3VhZ2VTdGF0ZS5pbml0LFxuICAgIHVwZGF0ZSh2YWx1ZSwgdHIpIHtcbiAgICAgICAgZm9yIChsZXQgZSBvZiB0ci5lZmZlY3RzKVxuICAgICAgICAgICAgaWYgKGUuaXMoTGFuZ3VhZ2Uuc2V0U3RhdGUpKVxuICAgICAgICAgICAgICAgIHJldHVybiBlLnZhbHVlO1xuICAgICAgICBpZiAodHIuc3RhcnRTdGF0ZS5mYWNldChsYW5ndWFnZSkgIT0gdHIuc3RhdGUuZmFjZXQobGFuZ3VhZ2UpKVxuICAgICAgICAgICAgcmV0dXJuIExhbmd1YWdlU3RhdGUuaW5pdCh0ci5zdGF0ZSk7XG4gICAgICAgIHJldHVybiB2YWx1ZS5hcHBseSh0cik7XG4gICAgfVxufSk7XG5sZXQgcmVxdWVzdElkbGUgPSAoY2FsbGJhY2spID0+IHtcbiAgICBsZXQgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4gY2FsbGJhY2soKSwgNTAwIC8qIFdvcmsuTWF4UGF1c2UgKi8pO1xuICAgIHJldHVybiAoKSA9PiBjbGVhclRpbWVvdXQodGltZW91dCk7XG59O1xuaWYgKHR5cGVvZiByZXF1ZXN0SWRsZUNhbGxiYWNrICE9IFwidW5kZWZpbmVkXCIpXG4gICAgcmVxdWVzdElkbGUgPSAoY2FsbGJhY2spID0+IHtcbiAgICAgICAgbGV0IGlkbGUgPSAtMSwgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgaWRsZSA9IHJlcXVlc3RJZGxlQ2FsbGJhY2soY2FsbGJhY2ssIHsgdGltZW91dDogNTAwIC8qIFdvcmsuTWF4UGF1c2UgKi8gLSAxMDAgLyogV29yay5NaW5QYXVzZSAqLyB9KTtcbiAgICAgICAgfSwgMTAwIC8qIFdvcmsuTWluUGF1c2UgKi8pO1xuICAgICAgICByZXR1cm4gKCkgPT4gaWRsZSA8IDAgPyBjbGVhclRpbWVvdXQodGltZW91dCkgOiBjYW5jZWxJZGxlQ2FsbGJhY2soaWRsZSk7XG4gICAgfTtcbmNvbnN0IGlzSW5wdXRQZW5kaW5nID0gdHlwZW9mIG5hdmlnYXRvciAhPSBcInVuZGVmaW5lZFwiICYmICgoX2EgPSBuYXZpZ2F0b3Iuc2NoZWR1bGluZykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmlzSW5wdXRQZW5kaW5nKVxuICAgID8gKCkgPT4gbmF2aWdhdG9yLnNjaGVkdWxpbmcuaXNJbnB1dFBlbmRpbmcoKSA6IG51bGw7XG5jb25zdCBwYXJzZVdvcmtlciA9IHZpZXcuVmlld1BsdWdpbi5mcm9tQ2xhc3MoY2xhc3MgUGFyc2VXb3JrZXIge1xuICAgIGNvbnN0cnVjdG9yKHZpZXcpIHtcbiAgICAgICAgdGhpcy52aWV3ID0gdmlldztcbiAgICAgICAgdGhpcy53b3JraW5nID0gbnVsbDtcbiAgICAgICAgdGhpcy53b3JrU2NoZWR1bGVkID0gMDtcbiAgICAgICAgLy8gRW5kIG9mIHRoZSBjdXJyZW50IHRpbWUgY2h1bmtcbiAgICAgICAgdGhpcy5jaHVua0VuZCA9IC0xO1xuICAgICAgICAvLyBNaWxsaXNlY29uZHMgb2YgYnVkZ2V0IGxlZnQgZm9yIHRoaXMgY2h1bmtcbiAgICAgICAgdGhpcy5jaHVua0J1ZGdldCA9IC0xO1xuICAgICAgICB0aGlzLndvcmsgPSB0aGlzLndvcmsuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZVdvcmsoKTtcbiAgICB9XG4gICAgdXBkYXRlKHVwZGF0ZSkge1xuICAgICAgICBsZXQgY3ggPSB0aGlzLnZpZXcuc3RhdGUuZmllbGQoTGFuZ3VhZ2Uuc3RhdGUpLmNvbnRleHQ7XG4gICAgICAgIGlmIChjeC51cGRhdGVWaWV3cG9ydCh1cGRhdGUudmlldy52aWV3cG9ydCkgfHwgdGhpcy52aWV3LnZpZXdwb3J0LnRvID4gY3gudHJlZUxlbilcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVXb3JrKCk7XG4gICAgICAgIGlmICh1cGRhdGUuZG9jQ2hhbmdlZCB8fCB1cGRhdGUuc2VsZWN0aW9uU2V0KSB7XG4gICAgICAgICAgICBpZiAodGhpcy52aWV3Lmhhc0ZvY3VzKVxuICAgICAgICAgICAgICAgIHRoaXMuY2h1bmtCdWRnZXQgKz0gNTAgLyogV29yay5DaGFuZ2VCb251cyAqLztcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVXb3JrKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jaGVja0FzeW5jU2NoZWR1bGUoY3gpO1xuICAgIH1cbiAgICBzY2hlZHVsZVdvcmsoKSB7XG4gICAgICAgIGlmICh0aGlzLndvcmtpbmcpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGxldCB7IHN0YXRlIH0gPSB0aGlzLnZpZXcsIGZpZWxkID0gc3RhdGUuZmllbGQoTGFuZ3VhZ2Uuc3RhdGUpO1xuICAgICAgICBpZiAoZmllbGQudHJlZSAhPSBmaWVsZC5jb250ZXh0LnRyZWUgfHwgIWZpZWxkLmNvbnRleHQuaXNEb25lKHN0YXRlLmRvYy5sZW5ndGgpKVxuICAgICAgICAgICAgdGhpcy53b3JraW5nID0gcmVxdWVzdElkbGUodGhpcy53b3JrKTtcbiAgICB9XG4gICAgd29yayhkZWFkbGluZSkge1xuICAgICAgICB0aGlzLndvcmtpbmcgPSBudWxsO1xuICAgICAgICBsZXQgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgaWYgKHRoaXMuY2h1bmtFbmQgPCBub3cgJiYgKHRoaXMuY2h1bmtFbmQgPCAwIHx8IHRoaXMudmlldy5oYXNGb2N1cykpIHsgLy8gU3RhcnQgYSBuZXcgY2h1bmtcbiAgICAgICAgICAgIHRoaXMuY2h1bmtFbmQgPSBub3cgKyAzMDAwMCAvKiBXb3JrLkNodW5rVGltZSAqLztcbiAgICAgICAgICAgIHRoaXMuY2h1bmtCdWRnZXQgPSAzMDAwIC8qIFdvcmsuQ2h1bmtCdWRnZXQgKi87XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY2h1bmtCdWRnZXQgPD0gMClcbiAgICAgICAgICAgIHJldHVybjsgLy8gTm8gbW9yZSBidWRnZXRcbiAgICAgICAgbGV0IHsgc3RhdGUsIHZpZXdwb3J0OiB7IHRvOiB2cFRvIH0gfSA9IHRoaXMudmlldywgZmllbGQgPSBzdGF0ZS5maWVsZChMYW5ndWFnZS5zdGF0ZSk7XG4gICAgICAgIGlmIChmaWVsZC50cmVlID09IGZpZWxkLmNvbnRleHQudHJlZSAmJiBmaWVsZC5jb250ZXh0LmlzRG9uZSh2cFRvICsgMTAwMDAwIC8qIFdvcmsuTWF4UGFyc2VBaGVhZCAqLykpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGxldCBlbmRUaW1lID0gRGF0ZS5ub3coKSArIE1hdGgubWluKHRoaXMuY2h1bmtCdWRnZXQsIDEwMCAvKiBXb3JrLlNsaWNlICovLCBkZWFkbGluZSAmJiAhaXNJbnB1dFBlbmRpbmcgPyBNYXRoLm1heCgyNSAvKiBXb3JrLk1pblNsaWNlICovLCBkZWFkbGluZS50aW1lUmVtYWluaW5nKCkgLSA1KSA6IDFlOSk7XG4gICAgICAgIGxldCB2aWV3cG9ydEZpcnN0ID0gZmllbGQuY29udGV4dC50cmVlTGVuIDwgdnBUbyAmJiBzdGF0ZS5kb2MubGVuZ3RoID4gdnBUbyArIDEwMDA7XG4gICAgICAgIGxldCBkb25lID0gZmllbGQuY29udGV4dC53b3JrKCgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBpc0lucHV0UGVuZGluZyAmJiBpc0lucHV0UGVuZGluZygpIHx8IERhdGUubm93KCkgPiBlbmRUaW1lO1xuICAgICAgICB9LCB2cFRvICsgKHZpZXdwb3J0Rmlyc3QgPyAwIDogMTAwMDAwIC8qIFdvcmsuTWF4UGFyc2VBaGVhZCAqLykpO1xuICAgICAgICB0aGlzLmNodW5rQnVkZ2V0IC09IERhdGUubm93KCkgLSBub3c7XG4gICAgICAgIGlmIChkb25lIHx8IHRoaXMuY2h1bmtCdWRnZXQgPD0gMCkge1xuICAgICAgICAgICAgZmllbGQuY29udGV4dC50YWtlVHJlZSgpO1xuICAgICAgICAgICAgdGhpcy52aWV3LmRpc3BhdGNoKHsgZWZmZWN0czogTGFuZ3VhZ2Uuc2V0U3RhdGUub2YobmV3IExhbmd1YWdlU3RhdGUoZmllbGQuY29udGV4dCkpIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNodW5rQnVkZ2V0ID4gMCAmJiAhKGRvbmUgJiYgIXZpZXdwb3J0Rmlyc3QpKVxuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZVdvcmsoKTtcbiAgICAgICAgdGhpcy5jaGVja0FzeW5jU2NoZWR1bGUoZmllbGQuY29udGV4dCk7XG4gICAgfVxuICAgIGNoZWNrQXN5bmNTY2hlZHVsZShjeCkge1xuICAgICAgICBpZiAoY3guc2NoZWR1bGVPbikge1xuICAgICAgICAgICAgdGhpcy53b3JrU2NoZWR1bGVkKys7XG4gICAgICAgICAgICBjeC5zY2hlZHVsZU9uXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gdGhpcy5zY2hlZHVsZVdvcmsoKSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHZpZXcubG9nRXhjZXB0aW9uKHRoaXMudmlldy5zdGF0ZSwgZXJyKSlcbiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB0aGlzLndvcmtTY2hlZHVsZWQtLSk7XG4gICAgICAgICAgICBjeC5zY2hlZHVsZU9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy53b3JraW5nKVxuICAgICAgICAgICAgdGhpcy53b3JraW5nKCk7XG4gICAgfVxuICAgIGlzV29ya2luZygpIHtcbiAgICAgICAgcmV0dXJuICEhKHRoaXMud29ya2luZyB8fCB0aGlzLndvcmtTY2hlZHVsZWQgPiAwKTtcbiAgICB9XG59LCB7XG4gICAgZXZlbnRIYW5kbGVyczogeyBmb2N1cygpIHsgdGhpcy5zY2hlZHVsZVdvcmsoKTsgfSB9XG59KTtcbi8qKlxuVGhlIGZhY2V0IHVzZWQgdG8gYXNzb2NpYXRlIGEgbGFuZ3VhZ2Ugd2l0aCBhbiBlZGl0b3Igc3RhdGUuIFVzZWRcbmJ5IGBMYW5ndWFnZWAgb2JqZWN0J3MgYGV4dGVuc2lvbmAgcHJvcGVydHkgKHNvIHlvdSBkb24ndCBuZWVkIHRvXG5tYW51YWxseSB3cmFwIHlvdXIgbGFuZ3VhZ2VzIGluIHRoaXMpLiBDYW4gYmUgdXNlZCB0byBhY2Nlc3MgdGhlXG5jdXJyZW50IGxhbmd1YWdlIG9uIGEgc3RhdGUuXG4qL1xuY29uc3QgbGFuZ3VhZ2UgPSBzdGF0ZS5GYWNldC5kZWZpbmUoe1xuICAgIGNvbWJpbmUobGFuZ3VhZ2VzKSB7IHJldHVybiBsYW5ndWFnZXMubGVuZ3RoID8gbGFuZ3VhZ2VzWzBdIDogbnVsbDsgfSxcbiAgICBlbmFibGVzOiBsYW5ndWFnZSA9PiBbXG4gICAgICAgIExhbmd1YWdlLnN0YXRlLFxuICAgICAgICBwYXJzZVdvcmtlcixcbiAgICAgICAgdmlldy5FZGl0b3JWaWV3LmNvbnRlbnRBdHRyaWJ1dGVzLmNvbXB1dGUoW2xhbmd1YWdlXSwgc3RhdGUgPT4ge1xuICAgICAgICAgICAgbGV0IGxhbmcgPSBzdGF0ZS5mYWNldChsYW5ndWFnZSk7XG4gICAgICAgICAgICByZXR1cm4gbGFuZyAmJiBsYW5nLm5hbWUgPyB7IFwiZGF0YS1sYW5ndWFnZVwiOiBsYW5nLm5hbWUgfSA6IHt9O1xuICAgICAgICB9KVxuICAgIF1cbn0pO1xuLyoqXG5UaGlzIGNsYXNzIGJ1bmRsZXMgYSBbbGFuZ3VhZ2VdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jbGFuZ3VhZ2UuTGFuZ3VhZ2UpIHdpdGggYW5cbm9wdGlvbmFsIHNldCBvZiBzdXBwb3J0aW5nIGV4dGVuc2lvbnMuIExhbmd1YWdlIHBhY2thZ2VzIGFyZVxuZW5jb3VyYWdlZCB0byBleHBvcnQgYSBmdW5jdGlvbiB0aGF0IG9wdGlvbmFsbHkgdGFrZXMgYVxuY29uZmlndXJhdGlvbiBvYmplY3QgYW5kIHJldHVybnMgYSBgTGFuZ3VhZ2VTdXBwb3J0YCBpbnN0YW5jZSwgYXNcbnRoZSBtYWluIHdheSBmb3IgY2xpZW50IGNvZGUgdG8gdXNlIHRoZSBwYWNrYWdlLlxuKi9cbmNsYXNzIExhbmd1YWdlU3VwcG9ydCB7XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgbGFuZ3VhZ2Ugc3VwcG9ydCBvYmplY3QuXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICBUaGUgbGFuZ3VhZ2Ugb2JqZWN0LlxuICAgICovXG4gICAgbGFuZ3VhZ2UsIFxuICAgIC8qKlxuICAgIEFuIG9wdGlvbmFsIHNldCBvZiBzdXBwb3J0aW5nIGV4dGVuc2lvbnMuIFdoZW4gbmVzdGluZyBhXG4gICAgbGFuZ3VhZ2UgaW4gYW5vdGhlciBsYW5ndWFnZSwgdGhlIG91dGVyIGxhbmd1YWdlIGlzIGVuY291cmFnZWRcbiAgICB0byBpbmNsdWRlIHRoZSBzdXBwb3J0aW5nIGV4dGVuc2lvbnMgZm9yIGl0cyBpbm5lciBsYW5ndWFnZXNcbiAgICBpbiBpdHMgb3duIHNldCBvZiBzdXBwb3J0IGV4dGVuc2lvbnMuXG4gICAgKi9cbiAgICBzdXBwb3J0ID0gW10pIHtcbiAgICAgICAgdGhpcy5sYW5ndWFnZSA9IGxhbmd1YWdlO1xuICAgICAgICB0aGlzLnN1cHBvcnQgPSBzdXBwb3J0O1xuICAgICAgICB0aGlzLmV4dGVuc2lvbiA9IFtsYW5ndWFnZSwgc3VwcG9ydF07XG4gICAgfVxufVxuLyoqXG5MYW5ndWFnZSBkZXNjcmlwdGlvbnMgYXJlIHVzZWQgdG8gc3RvcmUgbWV0YWRhdGEgYWJvdXQgbGFuZ3VhZ2VzXG5hbmQgdG8gZHluYW1pY2FsbHkgbG9hZCB0aGVtLiBUaGVpciBtYWluIHJvbGUgaXMgZmluZGluZyB0aGVcbmFwcHJvcHJpYXRlIGxhbmd1YWdlIGZvciBhIGZpbGVuYW1lIG9yIGR5bmFtaWNhbGx5IGxvYWRpbmcgbmVzdGVkXG5wYXJzZXJzLlxuKi9cbmNsYXNzIExhbmd1YWdlRGVzY3JpcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgIFRoZSBuYW1lIG9mIHRoaXMgbGFuZ3VhZ2UuXG4gICAgKi9cbiAgICBuYW1lLCBcbiAgICAvKipcbiAgICBBbHRlcm5hdGl2ZSBuYW1lcyBmb3IgdGhlIG1vZGUgKGxvd2VyY2FzZWQsIGluY2x1ZGVzIGB0aGlzLm5hbWVgKS5cbiAgICAqL1xuICAgIGFsaWFzLCBcbiAgICAvKipcbiAgICBGaWxlIGV4dGVuc2lvbnMgYXNzb2NpYXRlZCB3aXRoIHRoaXMgbGFuZ3VhZ2UuXG4gICAgKi9cbiAgICBleHRlbnNpb25zLCBcbiAgICAvKipcbiAgICBPcHRpb25hbCBmaWxlbmFtZSBwYXR0ZXJuIHRoYXQgc2hvdWxkIGJlIGFzc29jaWF0ZWQgd2l0aCB0aGlzXG4gICAgbGFuZ3VhZ2UuXG4gICAgKi9cbiAgICBmaWxlbmFtZSwgbG9hZEZ1bmMsIFxuICAgIC8qKlxuICAgIElmIHRoZSBsYW5ndWFnZSBoYXMgYmVlbiBsb2FkZWQsIHRoaXMgd2lsbCBob2xkIGl0cyB2YWx1ZS5cbiAgICAqL1xuICAgIHN1cHBvcnQgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5hbGlhcyA9IGFsaWFzO1xuICAgICAgICB0aGlzLmV4dGVuc2lvbnMgPSBleHRlbnNpb25zO1xuICAgICAgICB0aGlzLmZpbGVuYW1lID0gZmlsZW5hbWU7XG4gICAgICAgIHRoaXMubG9hZEZ1bmMgPSBsb2FkRnVuYztcbiAgICAgICAgdGhpcy5zdXBwb3J0ID0gc3VwcG9ydDtcbiAgICAgICAgdGhpcy5sb2FkaW5nID0gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgU3RhcnQgbG9hZGluZyB0aGUgdGhlIGxhbmd1YWdlLiBXaWxsIHJldHVybiBhIHByb21pc2UgdGhhdFxuICAgIHJlc29sdmVzIHRvIGEgW2BMYW5ndWFnZVN1cHBvcnRgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2xhbmd1YWdlLkxhbmd1YWdlU3VwcG9ydClcbiAgICBvYmplY3Qgd2hlbiB0aGUgbGFuZ3VhZ2Ugc3VjY2Vzc2Z1bGx5IGxvYWRzLlxuICAgICovXG4gICAgbG9hZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZGluZyB8fCAodGhpcy5sb2FkaW5nID0gdGhpcy5sb2FkRnVuYygpLnRoZW4oc3VwcG9ydCA9PiB0aGlzLnN1cHBvcnQgPSBzdXBwb3J0LCBlcnIgPT4geyB0aGlzLmxvYWRpbmcgPSBudWxsOyB0aHJvdyBlcnI7IH0pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgbGFuZ3VhZ2UgZGVzY3JpcHRpb24uXG4gICAgKi9cbiAgICBzdGF0aWMgb2Yoc3BlYykge1xuICAgICAgICBsZXQgeyBsb2FkLCBzdXBwb3J0IH0gPSBzcGVjO1xuICAgICAgICBpZiAoIWxvYWQpIHtcbiAgICAgICAgICAgIGlmICghc3VwcG9ydClcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIk11c3QgcGFzcyBlaXRoZXIgJ2xvYWQnIG9yICdzdXBwb3J0JyB0byBMYW5ndWFnZURlc2NyaXB0aW9uLm9mXCIpO1xuICAgICAgICAgICAgbG9hZCA9ICgpID0+IFByb21pc2UucmVzb2x2ZShzdXBwb3J0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IExhbmd1YWdlRGVzY3JpcHRpb24oc3BlYy5uYW1lLCAoc3BlYy5hbGlhcyB8fCBbXSkuY29uY2F0KHNwZWMubmFtZSkubWFwKHMgPT4gcy50b0xvd2VyQ2FzZSgpKSwgc3BlYy5leHRlbnNpb25zIHx8IFtdLCBzcGVjLmZpbGVuYW1lLCBsb2FkLCBzdXBwb3J0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgTG9vayBmb3IgYSBsYW5ndWFnZSBpbiB0aGUgZ2l2ZW4gYXJyYXkgb2YgZGVzY3JpcHRpb25zIHRoYXRcbiAgICBtYXRjaGVzIHRoZSBmaWxlbmFtZS4gV2lsbCBmaXJzdCBtYXRjaFxuICAgIFtgZmlsZW5hbWVgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2xhbmd1YWdlLkxhbmd1YWdlRGVzY3JpcHRpb24uZmlsZW5hbWUpIHBhdHRlcm5zLFxuICAgIGFuZCB0aGVuIFtleHRlbnNpb25zXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2xhbmd1YWdlLkxhbmd1YWdlRGVzY3JpcHRpb24uZXh0ZW5zaW9ucyksXG4gICAgYW5kIHJldHVybiB0aGUgZmlyc3QgbGFuZ3VhZ2UgdGhhdCBtYXRjaGVzLlxuICAgICovXG4gICAgc3RhdGljIG1hdGNoRmlsZW5hbWUoZGVzY3MsIGZpbGVuYW1lKSB7XG4gICAgICAgIGZvciAobGV0IGQgb2YgZGVzY3MpXG4gICAgICAgICAgICBpZiAoZC5maWxlbmFtZSAmJiBkLmZpbGVuYW1lLnRlc3QoZmlsZW5hbWUpKVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICBsZXQgZXh0ID0gL1xcLihbXi5dKykkLy5leGVjKGZpbGVuYW1lKTtcbiAgICAgICAgaWYgKGV4dClcbiAgICAgICAgICAgIGZvciAobGV0IGQgb2YgZGVzY3MpXG4gICAgICAgICAgICAgICAgaWYgKGQuZXh0ZW5zaW9ucy5pbmRleE9mKGV4dFsxXSkgPiAtMSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICBMb29rIGZvciBhIGxhbmd1YWdlIHdob3NlIG5hbWUgb3IgYWxpYXMgbWF0Y2hlcyB0aGUgdGhlIGdpdmVuXG4gICAgbmFtZSAoY2FzZS1pbnNlbnNpdGl2ZWx5KS4gSWYgYGZ1enp5YCBpcyB0cnVlLCBhbmQgbm8gZGlyZWN0XG4gICAgbWF0Y2hzIGlzIGZvdW5kLCB0aGlzJ2xsIGFsc28gc2VhcmNoIGZvciBhIGxhbmd1YWdlIHdob3NlIG5hbWVcbiAgICBvciBhbGlhcyBvY2N1cnMgaW4gdGhlIHN0cmluZyAoZm9yIG5hbWVzIHNob3J0ZXIgdGhhbiB0aHJlZVxuICAgIGNoYXJhY3RlcnMsIG9ubHkgd2hlbiBzdXJyb3VuZGVkIGJ5IG5vbi13b3JkIGNoYXJhY3RlcnMpLlxuICAgICovXG4gICAgc3RhdGljIG1hdGNoTGFuZ3VhZ2VOYW1lKGRlc2NzLCBuYW1lLCBmdXp6eSA9IHRydWUpIHtcbiAgICAgICAgbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgZm9yIChsZXQgZCBvZiBkZXNjcylcbiAgICAgICAgICAgIGlmIChkLmFsaWFzLnNvbWUoYSA9PiBhID09IG5hbWUpKVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICBpZiAoZnV6enkpXG4gICAgICAgICAgICBmb3IgKGxldCBkIG9mIGRlc2NzKVxuICAgICAgICAgICAgICAgIGZvciAobGV0IGEgb2YgZC5hbGlhcykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZm91bmQgPSBuYW1lLmluZGV4T2YoYSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3VuZCA+IC0xICYmIChhLmxlbmd0aCA+IDIgfHwgIS9cXHcvLnRlc3QobmFtZVtmb3VuZCAtIDFdKSAmJiAhL1xcdy8udGVzdChuYW1lW2ZvdW5kICsgYS5sZW5ndGhdKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuLyoqXG5GYWNldCB0aGF0IGRlZmluZXMgYSB3YXkgdG8gcHJvdmlkZSBhIGZ1bmN0aW9uIHRoYXQgY29tcHV0ZXMgdGhlXG5hcHByb3ByaWF0ZSBpbmRlbnRhdGlvbiBkZXB0aCwgYXMgYSBjb2x1bW4gbnVtYmVyIChzZWVcbltgaW5kZW50U3RyaW5nYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNsYW5ndWFnZS5pbmRlbnRTdHJpbmcpKSwgYXQgdGhlIHN0YXJ0IG9mIGEgZ2l2ZW5cbmxpbmUuIEEgcmV0dXJuIHZhbHVlIG9mIGBudWxsYCBpbmRpY2F0ZXMgbm8gaW5kZW50YXRpb24gY2FuIGJlXG5kZXRlcm1pbmVkLCBhbmQgdGhlIGxpbmUgc2hvdWxkIGluaGVyaXQgdGhlIGluZGVudGF0aW9uIG9mIHRoZSBvbmVcbmFib3ZlIGl0LiBBIHJldHVybiB2YWx1ZSBvZiBgdW5kZWZpbmVkYCBkZWZlcnMgdG8gdGhlIG5leHQgaW5kZW50XG5zZXJ2aWNlLlxuKi9cbmNvbnN0IGluZGVudFNlcnZpY2UgPSBzdGF0ZS5GYWNldC5kZWZpbmUoKTtcbi8qKlxuRmFjZXQgZm9yIG92ZXJyaWRpbmcgdGhlIHVuaXQgYnkgd2hpY2ggaW5kZW50YXRpb24gaGFwcGVucy4gU2hvdWxkXG5iZSBhIHN0cmluZyBjb25zaXN0aW5nIGVpdGhlciBlbnRpcmVseSBvZiB0aGUgc2FtZSB3aGl0ZXNwYWNlXG5jaGFyYWN0ZXIuIFdoZW4gbm90IHNldCwgdGhpcyBkZWZhdWx0cyB0byAyIHNwYWNlcy5cbiovXG5jb25zdCBpbmRlbnRVbml0ID0gc3RhdGUuRmFjZXQuZGVmaW5lKHtcbiAgICBjb21iaW5lOiB2YWx1ZXMgPT4ge1xuICAgICAgICBpZiAoIXZhbHVlcy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gXCIgIFwiO1xuICAgICAgICBsZXQgdW5pdCA9IHZhbHVlc1swXTtcbiAgICAgICAgaWYgKCF1bml0IHx8IC9cXFMvLnRlc3QodW5pdCkgfHwgQXJyYXkuZnJvbSh1bml0KS5zb21lKGUgPT4gZSAhPSB1bml0WzBdKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgaW5kZW50IHVuaXQ6IFwiICsgSlNPTi5zdHJpbmdpZnkodmFsdWVzWzBdKSk7XG4gICAgICAgIHJldHVybiB1bml0O1xuICAgIH1cbn0pO1xuLyoqXG5SZXR1cm4gdGhlIF9jb2x1bW4gd2lkdGhfIG9mIGFuIGluZGVudCB1bml0IGluIHRoZSBzdGF0ZS5cbkRldGVybWluZWQgYnkgdGhlIFtgaW5kZW50VW5pdGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jbGFuZ3VhZ2UuaW5kZW50VW5pdClcbmZhY2V0LCBhbmQgW2B0YWJTaXplYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5FZGl0b3JTdGF0ZV50YWJTaXplKSB3aGVuIHRoYXRcbmNvbnRhaW5zIHRhYnMuXG4qL1xuZnVuY3Rpb24gZ2V0SW5kZW50VW5pdChzdGF0ZSkge1xuICAgIGxldCB1bml0ID0gc3RhdGUuZmFjZXQoaW5kZW50VW5pdCk7XG4gICAgcmV0dXJuIHVuaXQuY2hhckNvZGVBdCgwKSA9PSA5ID8gc3RhdGUudGFiU2l6ZSAqIHVuaXQubGVuZ3RoIDogdW5pdC5sZW5ndGg7XG59XG4vKipcbkNyZWF0ZSBhbiBpbmRlbnRhdGlvbiBzdHJpbmcgdGhhdCBjb3ZlcnMgY29sdW1ucyAwIHRvIGBjb2xzYC5cbldpbGwgdXNlIHRhYnMgZm9yIGFzIG11Y2ggb2YgdGhlIGNvbHVtbnMgYXMgcG9zc2libGUgd2hlbiB0aGVcbltgaW5kZW50VW5pdGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jbGFuZ3VhZ2UuaW5kZW50VW5pdCkgZmFjZXQgY29udGFpbnNcbnRhYnMuXG4qL1xuZnVuY3Rpb24gaW5kZW50U3RyaW5nKHN0YXRlLCBjb2xzKSB7XG4gICAgbGV0IHJlc3VsdCA9IFwiXCIsIHRzID0gc3RhdGUudGFiU2l6ZSwgY2ggPSBzdGF0ZS5mYWNldChpbmRlbnRVbml0KVswXTtcbiAgICBpZiAoY2ggPT0gXCJcXHRcIikge1xuICAgICAgICB3aGlsZSAoY29scyA+PSB0cykge1xuICAgICAgICAgICAgcmVzdWx0ICs9IFwiXFx0XCI7XG4gICAgICAgICAgICBjb2xzIC09IHRzO1xuICAgICAgICB9XG4gICAgICAgIGNoID0gXCIgXCI7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29sczsgaSsrKVxuICAgICAgICByZXN1bHQgKz0gY2g7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuR2V0IHRoZSBpbmRlbnRhdGlvbiwgYXMgYSBjb2x1bW4gbnVtYmVyLCBhdCB0aGUgZ2l2ZW4gcG9zaXRpb24uXG5XaWxsIGZpcnN0IGNvbnN1bHQgYW55IFtpbmRlbnQgc2VydmljZXNdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jbGFuZ3VhZ2UuaW5kZW50U2VydmljZSlcbnRoYXQgYXJlIHJlZ2lzdGVyZWQsIGFuZCBpZiBub25lIG9mIHRob3NlIHJldHVybiBhbiBpbmRlbnRhdGlvbixcbnRoaXMgd2lsbCBjaGVjayB0aGUgc3ludGF4IHRyZWUgZm9yIHRoZSBbaW5kZW50IG5vZGVcbnByb3BdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jbGFuZ3VhZ2UuaW5kZW50Tm9kZVByb3ApIGFuZCB1c2UgdGhhdCBpZiBmb3VuZC4gUmV0dXJucyBhXG5udW1iZXIgd2hlbiBhbiBpbmRlbnRhdGlvbiBjb3VsZCBiZSBkZXRlcm1pbmVkLCBhbmQgbnVsbFxub3RoZXJ3aXNlLlxuKi9cbmZ1bmN0aW9uIGdldEluZGVudGF0aW9uKGNvbnRleHQsIHBvcykge1xuICAgIGlmIChjb250ZXh0IGluc3RhbmNlb2Ygc3RhdGUuRWRpdG9yU3RhdGUpXG4gICAgICAgIGNvbnRleHQgPSBuZXcgSW5kZW50Q29udGV4dChjb250ZXh0KTtcbiAgICBmb3IgKGxldCBzZXJ2aWNlIG9mIGNvbnRleHQuc3RhdGUuZmFjZXQoaW5kZW50U2VydmljZSkpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHNlcnZpY2UoY29udGV4dCwgcG9zKTtcbiAgICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgbGV0IHRyZWUgPSBzeW50YXhUcmVlKGNvbnRleHQuc3RhdGUpO1xuICAgIHJldHVybiB0cmVlLmxlbmd0aCA+PSBwb3MgPyBzeW50YXhJbmRlbnRhdGlvbihjb250ZXh0LCB0cmVlLCBwb3MpIDogbnVsbDtcbn1cbi8qKlxuQ3JlYXRlIGEgY2hhbmdlIHNldCB0aGF0IGF1dG8taW5kZW50cyBhbGwgbGluZXMgdG91Y2hlZCBieSB0aGVcbmdpdmVuIGRvY3VtZW50IHJhbmdlLlxuKi9cbmZ1bmN0aW9uIGluZGVudFJhbmdlKHN0YXRlLCBmcm9tLCB0bykge1xuICAgIGxldCB1cGRhdGVkID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBsZXQgY29udGV4dCA9IG5ldyBJbmRlbnRDb250ZXh0KHN0YXRlLCB7IG92ZXJyaWRlSW5kZW50YXRpb246IHN0YXJ0ID0+IHsgdmFyIF9hOyByZXR1cm4gKF9hID0gdXBkYXRlZFtzdGFydF0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IC0xOyB9IH0pO1xuICAgIGxldCBjaGFuZ2VzID0gW107XG4gICAgZm9yIChsZXQgcG9zID0gZnJvbTsgcG9zIDw9IHRvOykge1xuICAgICAgICBsZXQgbGluZSA9IHN0YXRlLmRvYy5saW5lQXQocG9zKTtcbiAgICAgICAgcG9zID0gbGluZS50byArIDE7XG4gICAgICAgIGxldCBpbmRlbnQgPSBnZXRJbmRlbnRhdGlvbihjb250ZXh0LCBsaW5lLmZyb20pO1xuICAgICAgICBpZiAoaW5kZW50ID09IG51bGwpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgaWYgKCEvXFxTLy50ZXN0KGxpbmUudGV4dCkpXG4gICAgICAgICAgICBpbmRlbnQgPSAwO1xuICAgICAgICBsZXQgY3VyID0gL15cXHMqLy5leGVjKGxpbmUudGV4dClbMF07XG4gICAgICAgIGxldCBub3JtID0gaW5kZW50U3RyaW5nKHN0YXRlLCBpbmRlbnQpO1xuICAgICAgICBpZiAoY3VyICE9IG5vcm0pIHtcbiAgICAgICAgICAgIHVwZGF0ZWRbbGluZS5mcm9tXSA9IGluZGVudDtcbiAgICAgICAgICAgIGNoYW5nZXMucHVzaCh7IGZyb206IGxpbmUuZnJvbSwgdG86IGxpbmUuZnJvbSArIGN1ci5sZW5ndGgsIGluc2VydDogbm9ybSB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RhdGUuY2hhbmdlcyhjaGFuZ2VzKTtcbn1cbi8qKlxuSW5kZW50YXRpb24gY29udGV4dHMgYXJlIHVzZWQgd2hlbiBjYWxsaW5nIFtpbmRlbnRhdGlvblxuc2VydmljZXNdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jbGFuZ3VhZ2UuaW5kZW50U2VydmljZSkuIFRoZXkgcHJvdmlkZSBoZWxwZXIgdXRpbGl0aWVzXG51c2VmdWwgaW4gaW5kZW50YXRpb24gbG9naWMsIGFuZCBjYW4gc2VsZWN0aXZlbHkgb3ZlcnJpZGUgdGhlXG5pbmRlbnRhdGlvbiByZXBvcnRlZCBmb3Igc29tZSBsaW5lcy5cbiovXG5jbGFzcyBJbmRlbnRDb250ZXh0IHtcbiAgICAvKipcbiAgICBDcmVhdGUgYW4gaW5kZW50IGNvbnRleHQuXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICBUaGUgZWRpdG9yIHN0YXRlLlxuICAgICovXG4gICAgc3RhdGUsIFxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy51bml0ID0gZ2V0SW5kZW50VW5pdChzdGF0ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgIEdldCBhIGRlc2NyaXB0aW9uIG9mIHRoZSBsaW5lIGF0IHRoZSBnaXZlbiBwb3NpdGlvbiwgdGFraW5nXG4gICAgW3NpbXVsYXRlZCBsaW5lXG4gICAgYnJlYWtzXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2xhbmd1YWdlLkluZGVudENvbnRleHQuY29uc3RydWN0b3Jeb3B0aW9ucy5zaW11bGF0ZUJyZWFrKVxuICAgIGludG8gYWNjb3VudC4gSWYgdGhlcmUgaXMgc3VjaCBhIGJyZWFrIGF0IGBwb3NgLCB0aGUgYGJpYXNgXG4gICAgYXJndW1lbnQgZGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBwYXJ0IG9mIHRoZSBsaW5lIGxpbmUgYmVmb3JlIG9yXG4gICAgYWZ0ZXIgdGhlIGJyZWFrIGlzIHVzZWQuXG4gICAgKi9cbiAgICBsaW5lQXQocG9zLCBiaWFzID0gMSkge1xuICAgICAgICBsZXQgbGluZSA9IHRoaXMuc3RhdGUuZG9jLmxpbmVBdChwb3MpO1xuICAgICAgICBsZXQgeyBzaW11bGF0ZUJyZWFrLCBzaW11bGF0ZURvdWJsZUJyZWFrIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGlmIChzaW11bGF0ZUJyZWFrICE9IG51bGwgJiYgc2ltdWxhdGVCcmVhayA+PSBsaW5lLmZyb20gJiYgc2ltdWxhdGVCcmVhayA8PSBsaW5lLnRvKSB7XG4gICAgICAgICAgICBpZiAoc2ltdWxhdGVEb3VibGVCcmVhayAmJiBzaW11bGF0ZUJyZWFrID09IHBvcylcbiAgICAgICAgICAgICAgICByZXR1cm4geyB0ZXh0OiBcIlwiLCBmcm9tOiBwb3MgfTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGJpYXMgPCAwID8gc2ltdWxhdGVCcmVhayA8IHBvcyA6IHNpbXVsYXRlQnJlYWsgPD0gcG9zKVxuICAgICAgICAgICAgICAgIHJldHVybiB7IHRleHQ6IGxpbmUudGV4dC5zbGljZShzaW11bGF0ZUJyZWFrIC0gbGluZS5mcm9tKSwgZnJvbTogc2ltdWxhdGVCcmVhayB9O1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHJldHVybiB7IHRleHQ6IGxpbmUudGV4dC5zbGljZSgwLCBzaW11bGF0ZUJyZWFrIC0gbGluZS5mcm9tKSwgZnJvbTogbGluZS5mcm9tIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxpbmU7XG4gICAgfVxuICAgIC8qKlxuICAgIEdldCB0aGUgdGV4dCBkaXJlY3RseSBhZnRlciBgcG9zYCwgZWl0aGVyIHRoZSBlbnRpcmUgbGluZVxuICAgIG9yIHRoZSBuZXh0IDEwMCBjaGFyYWN0ZXJzLCB3aGljaGV2ZXIgaXMgc2hvcnRlci5cbiAgICAqL1xuICAgIHRleHRBZnRlclBvcyhwb3MsIGJpYXMgPSAxKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2ltdWxhdGVEb3VibGVCcmVhayAmJiBwb3MgPT0gdGhpcy5vcHRpb25zLnNpbXVsYXRlQnJlYWspXG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgbGV0IHsgdGV4dCwgZnJvbSB9ID0gdGhpcy5saW5lQXQocG9zLCBiaWFzKTtcbiAgICAgICAgcmV0dXJuIHRleHQuc2xpY2UocG9zIC0gZnJvbSwgTWF0aC5taW4odGV4dC5sZW5ndGgsIHBvcyArIDEwMCAtIGZyb20pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgRmluZCB0aGUgY29sdW1uIGZvciB0aGUgZ2l2ZW4gcG9zaXRpb24uXG4gICAgKi9cbiAgICBjb2x1bW4ocG9zLCBiaWFzID0gMSkge1xuICAgICAgICBsZXQgeyB0ZXh0LCBmcm9tIH0gPSB0aGlzLmxpbmVBdChwb3MsIGJpYXMpO1xuICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5jb3VudENvbHVtbih0ZXh0LCBwb3MgLSBmcm9tKTtcbiAgICAgICAgbGV0IG92ZXJyaWRlID0gdGhpcy5vcHRpb25zLm92ZXJyaWRlSW5kZW50YXRpb24gPyB0aGlzLm9wdGlvbnMub3ZlcnJpZGVJbmRlbnRhdGlvbihmcm9tKSA6IC0xO1xuICAgICAgICBpZiAob3ZlcnJpZGUgPiAtMSlcbiAgICAgICAgICAgIHJlc3VsdCArPSBvdmVycmlkZSAtIHRoaXMuY291bnRDb2x1bW4odGV4dCwgdGV4dC5zZWFyY2goL1xcU3wkLykpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICBGaW5kIHRoZSBjb2x1bW4gcG9zaXRpb24gKHRha2luZyB0YWJzIGludG8gYWNjb3VudCkgb2YgdGhlIGdpdmVuXG4gICAgcG9zaXRpb24gaW4gdGhlIGdpdmVuIHN0cmluZy5cbiAgICAqL1xuICAgIGNvdW50Q29sdW1uKGxpbmUsIHBvcyA9IGxpbmUubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZS5jb3VudENvbHVtbihsaW5lLCB0aGlzLnN0YXRlLnRhYlNpemUsIHBvcyk7XG4gICAgfVxuICAgIC8qKlxuICAgIEZpbmQgdGhlIGluZGVudGF0aW9uIGNvbHVtbiBvZiB0aGUgbGluZSBhdCB0aGUgZ2l2ZW4gcG9pbnQuXG4gICAgKi9cbiAgICBsaW5lSW5kZW50KHBvcywgYmlhcyA9IDEpIHtcbiAgICAgICAgbGV0IHsgdGV4dCwgZnJvbSB9ID0gdGhpcy5saW5lQXQocG9zLCBiaWFzKTtcbiAgICAgICAgbGV0IG92ZXJyaWRlID0gdGhpcy5vcHRpb25zLm92ZXJyaWRlSW5kZW50YXRpb247XG4gICAgICAgIGlmIChvdmVycmlkZSkge1xuICAgICAgICAgICAgbGV0IG92ZXJyaWRlbiA9IG92ZXJyaWRlKGZyb20pO1xuICAgICAgICAgICAgaWYgKG92ZXJyaWRlbiA+IC0xKVxuICAgICAgICAgICAgICAgIHJldHVybiBvdmVycmlkZW47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuY291bnRDb2x1bW4odGV4dCwgdGV4dC5zZWFyY2goL1xcU3wkLykpO1xuICAgIH1cbiAgICAvKipcbiAgICBSZXR1cm5zIHRoZSBbc2ltdWxhdGVkIGxpbmVcbiAgICBicmVha10oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNsYW5ndWFnZS5JbmRlbnRDb250ZXh0LmNvbnN0cnVjdG9yXm9wdGlvbnMuc2ltdWxhdGVCcmVhaylcbiAgICBmb3IgdGhpcyBjb250ZXh0LCBpZiBhbnkuXG4gICAgKi9cbiAgICBnZXQgc2ltdWxhdGVkQnJlYWsoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuc2ltdWxhdGVCcmVhayB8fCBudWxsO1xuICAgIH1cbn1cbi8qKlxuQSBzeW50YXggdHJlZSBub2RlIHByb3AgdXNlZCB0byBhc3NvY2lhdGUgaW5kZW50YXRpb24gc3RyYXRlZ2llc1xud2l0aCBub2RlIHR5cGVzLiBTdWNoIGEgc3RyYXRlZ3kgaXMgYSBmdW5jdGlvbiBmcm9tIGFuIGluZGVudGF0aW9uXG5jb250ZXh0IHRvIGEgY29sdW1uIG51bWJlciAoc2VlIGFsc29cbltgaW5kZW50U3RyaW5nYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNsYW5ndWFnZS5pbmRlbnRTdHJpbmcpKSBvciBudWxsLCB3aGVyZSBudWxsXG5pbmRpY2F0ZXMgdGhhdCBubyBkZWZpbml0aXZlIGluZGVudGF0aW9uIGNhbiBiZSBkZXRlcm1pbmVkLlxuKi9cbmNvbnN0IGluZGVudE5vZGVQcm9wID0gbmV3IGNvbW1vbi5Ob2RlUHJvcCgpO1xuLy8gQ29tcHV0ZSB0aGUgaW5kZW50YXRpb24gZm9yIGEgZ2l2ZW4gcG9zaXRpb24gZnJvbSB0aGUgc3ludGF4IHRyZWUuXG5mdW5jdGlvbiBzeW50YXhJbmRlbnRhdGlvbihjeCwgYXN0LCBwb3MpIHtcbiAgICBsZXQgc3RhY2sgPSBhc3QucmVzb2x2ZVN0YWNrKHBvcyk7XG4gICAgbGV0IGlubmVyID0gc3RhY2subm9kZS5lbnRlclVuZmluaXNoZWROb2Rlc0JlZm9yZShwb3MpO1xuICAgIGlmIChpbm5lciAhPSBzdGFjay5ub2RlKSB7XG4gICAgICAgIGxldCBhZGQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgY3VyID0gaW5uZXI7IGN1ciAhPSBzdGFjay5ub2RlOyBjdXIgPSBjdXIucGFyZW50KVxuICAgICAgICAgICAgYWRkLnB1c2goY3VyKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IGFkZC5sZW5ndGggLSAxOyBpID49IDA7IGktLSlcbiAgICAgICAgICAgIHN0YWNrID0geyBub2RlOiBhZGRbaV0sIG5leHQ6IHN0YWNrIH07XG4gICAgfVxuICAgIHJldHVybiBpbmRlbnRGb3Ioc3RhY2ssIGN4LCBwb3MpO1xufVxuZnVuY3Rpb24gaW5kZW50Rm9yKHN0YWNrLCBjeCwgcG9zKSB7XG4gICAgZm9yIChsZXQgY3VyID0gc3RhY2s7IGN1cjsgY3VyID0gY3VyLm5leHQpIHtcbiAgICAgICAgbGV0IHN0cmF0ZWd5ID0gaW5kZW50U3RyYXRlZ3koY3VyLm5vZGUpO1xuICAgICAgICBpZiAoc3RyYXRlZ3kpXG4gICAgICAgICAgICByZXR1cm4gc3RyYXRlZ3koVHJlZUluZGVudENvbnRleHQuY3JlYXRlKGN4LCBwb3MsIGN1cikpO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbn1cbmZ1bmN0aW9uIGlnbm9yZUNsb3NlZChjeCkge1xuICAgIHJldHVybiBjeC5wb3MgPT0gY3gub3B0aW9ucy5zaW11bGF0ZUJyZWFrICYmIGN4Lm9wdGlvbnMuc2ltdWxhdGVEb3VibGVCcmVhaztcbn1cbmZ1bmN0aW9uIGluZGVudFN0cmF0ZWd5KHRyZWUpIHtcbiAgICBsZXQgc3RyYXRlZ3kgPSB0cmVlLnR5cGUucHJvcChpbmRlbnROb2RlUHJvcCk7XG4gICAgaWYgKHN0cmF0ZWd5KVxuICAgICAgICByZXR1cm4gc3RyYXRlZ3k7XG4gICAgbGV0IGZpcnN0ID0gdHJlZS5maXJzdENoaWxkLCBjbG9zZTtcbiAgICBpZiAoZmlyc3QgJiYgKGNsb3NlID0gZmlyc3QudHlwZS5wcm9wKGNvbW1vbi5Ob2RlUHJvcC5jbG9zZWRCeSkpKSB7XG4gICAgICAgIGxldCBsYXN0ID0gdHJlZS5sYXN0Q2hpbGQsIGNsb3NlZCA9IGxhc3QgJiYgY2xvc2UuaW5kZXhPZihsYXN0Lm5hbWUpID4gLTE7XG4gICAgICAgIHJldHVybiBjeCA9PiBkZWxpbWl0ZWRTdHJhdGVneShjeCwgdHJ1ZSwgMSwgdW5kZWZpbmVkLCBjbG9zZWQgJiYgIWlnbm9yZUNsb3NlZChjeCkgPyBsYXN0LmZyb20gOiB1bmRlZmluZWQpO1xuICAgIH1cbiAgICByZXR1cm4gdHJlZS5wYXJlbnQgPT0gbnVsbCA/IHRvcEluZGVudCA6IG51bGw7XG59XG5mdW5jdGlvbiB0b3BJbmRlbnQoKSB7IHJldHVybiAwOyB9XG4vKipcbk9iamVjdHMgb2YgdGhpcyB0eXBlIHByb3ZpZGUgY29udGV4dCBpbmZvcm1hdGlvbiBhbmQgaGVscGVyXG5tZXRob2RzIHRvIGluZGVudGF0aW9uIGZ1bmN0aW9ucyByZWdpc3RlcmVkIG9uIHN5bnRheCBub2Rlcy5cbiovXG5jbGFzcyBUcmVlSW5kZW50Q29udGV4dCBleHRlbmRzIEluZGVudENvbnRleHQge1xuICAgIGNvbnN0cnVjdG9yKGJhc2UsIFxuICAgIC8qKlxuICAgIFRoZSBwb3NpdGlvbiBhdCB3aGljaCBpbmRlbnRhdGlvbiBpcyBiZWluZyBjb21wdXRlZC5cbiAgICAqL1xuICAgIHBvcywgXG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBjb250ZXh0KSB7XG4gICAgICAgIHN1cGVyKGJhc2Uuc3RhdGUsIGJhc2Uub3B0aW9ucyk7XG4gICAgICAgIHRoaXMuYmFzZSA9IGJhc2U7XG4gICAgICAgIHRoaXMucG9zID0gcG9zO1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgIH1cbiAgICAvKipcbiAgICBUaGUgc3ludGF4IHRyZWUgbm9kZSB0byB3aGljaCB0aGUgaW5kZW50YXRpb24gc3RyYXRlZ3lcbiAgICBhcHBsaWVzLlxuICAgICovXG4gICAgZ2V0IG5vZGUoKSB7IHJldHVybiB0aGlzLmNvbnRleHQubm9kZTsgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgc3RhdGljIGNyZWF0ZShiYXNlLCBwb3MsIGNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUcmVlSW5kZW50Q29udGV4dChiYXNlLCBwb3MsIGNvbnRleHQpO1xuICAgIH1cbiAgICAvKipcbiAgICBHZXQgdGhlIHRleHQgZGlyZWN0bHkgYWZ0ZXIgYHRoaXMucG9zYCwgZWl0aGVyIHRoZSBlbnRpcmUgbGluZVxuICAgIG9yIHRoZSBuZXh0IDEwMCBjaGFyYWN0ZXJzLCB3aGljaGV2ZXIgaXMgc2hvcnRlci5cbiAgICAqL1xuICAgIGdldCB0ZXh0QWZ0ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHRBZnRlclBvcyh0aGlzLnBvcyk7XG4gICAgfVxuICAgIC8qKlxuICAgIEdldCB0aGUgaW5kZW50YXRpb24gYXQgdGhlIHJlZmVyZW5jZSBsaW5lIGZvciBgdGhpcy5ub2RlYCwgd2hpY2hcbiAgICBpcyB0aGUgbGluZSBvbiB3aGljaCBpdCBzdGFydHMsIHVubGVzcyB0aGVyZSBpcyBhIG5vZGUgdGhhdCBpc1xuICAgIF9ub3RfIGEgcGFyZW50IG9mIHRoaXMgbm9kZSBjb3ZlcmluZyB0aGUgc3RhcnQgb2YgdGhhdCBsaW5lLiBJZlxuICAgIHNvLCB0aGUgbGluZSBhdCB0aGUgc3RhcnQgb2YgdGhhdCBub2RlIGlzIHRyaWVkLCBhZ2FpbiBza2lwcGluZ1xuICAgIG9uIGlmIGl0IGlzIGNvdmVyZWQgYnkgYW5vdGhlciBzdWNoIG5vZGUuXG4gICAgKi9cbiAgICBnZXQgYmFzZUluZGVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZUluZGVudEZvcih0aGlzLm5vZGUpO1xuICAgIH1cbiAgICAvKipcbiAgICBHZXQgdGhlIGluZGVudGF0aW9uIGZvciB0aGUgcmVmZXJlbmNlIGxpbmUgb2YgdGhlIGdpdmVuIG5vZGVcbiAgICAoc2VlIFtgYmFzZUluZGVudGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jbGFuZ3VhZ2UuVHJlZUluZGVudENvbnRleHQuYmFzZUluZGVudCkpLlxuICAgICovXG4gICAgYmFzZUluZGVudEZvcihub2RlKSB7XG4gICAgICAgIGxldCBsaW5lID0gdGhpcy5zdGF0ZS5kb2MubGluZUF0KG5vZGUuZnJvbSk7XG4gICAgICAgIC8vIFNraXAgbGluZSBzdGFydHMgdGhhdCBhcmUgY292ZXJlZCBieSBhIHNpYmxpbmcgKG9yIGNvdXNpbiwgZXRjKVxuICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICBsZXQgYXRCcmVhayA9IG5vZGUucmVzb2x2ZShsaW5lLmZyb20pO1xuICAgICAgICAgICAgd2hpbGUgKGF0QnJlYWsucGFyZW50ICYmIGF0QnJlYWsucGFyZW50LmZyb20gPT0gYXRCcmVhay5mcm9tKVxuICAgICAgICAgICAgICAgIGF0QnJlYWsgPSBhdEJyZWFrLnBhcmVudDtcbiAgICAgICAgICAgIGlmIChpc1BhcmVudChhdEJyZWFrLCBub2RlKSlcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGxpbmUgPSB0aGlzLnN0YXRlLmRvYy5saW5lQXQoYXRCcmVhay5mcm9tKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5saW5lSW5kZW50KGxpbmUuZnJvbSk7XG4gICAgfVxuICAgIC8qKlxuICAgIENvbnRpbnVlIGxvb2tpbmcgZm9yIGluZGVudGF0aW9ucyBpbiB0aGUgbm9kZSdzIHBhcmVudCBub2RlcyxcbiAgICBhbmQgcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhhdC5cbiAgICAqL1xuICAgIGNvbnRpbnVlKCkge1xuICAgICAgICByZXR1cm4gaW5kZW50Rm9yKHRoaXMuY29udGV4dC5uZXh0LCB0aGlzLmJhc2UsIHRoaXMucG9zKTtcbiAgICB9XG59XG5mdW5jdGlvbiBpc1BhcmVudChwYXJlbnQsIG9mKSB7XG4gICAgZm9yIChsZXQgY3VyID0gb2Y7IGN1cjsgY3VyID0gY3VyLnBhcmVudClcbiAgICAgICAgaWYgKHBhcmVudCA9PSBjdXIpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG59XG4vLyBDaGVjayB3aGV0aGVyIGEgZGVsaW1pdGVkIG5vZGUgaXMgYWxpZ25lZCAobWVhbmluZyB0aGVyZSBhcmVcbi8vIG5vbi1za2lwcGVkIG5vZGVzIG9uIHRoZSBzYW1lIGxpbmUgYXMgdGhlIG9wZW5pbmcgZGVsaW1pdGVyKS4gQW5kXG4vLyBpZiBzbywgcmV0dXJuIHRoZSBvcGVuaW5nIHRva2VuLlxuZnVuY3Rpb24gYnJhY2tldGVkQWxpZ25lZChjb250ZXh0KSB7XG4gICAgbGV0IHRyZWUgPSBjb250ZXh0Lm5vZGU7XG4gICAgbGV0IG9wZW5Ub2tlbiA9IHRyZWUuY2hpbGRBZnRlcih0cmVlLmZyb20pLCBsYXN0ID0gdHJlZS5sYXN0Q2hpbGQ7XG4gICAgaWYgKCFvcGVuVG9rZW4pXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIGxldCBzaW0gPSBjb250ZXh0Lm9wdGlvbnMuc2ltdWxhdGVCcmVhaztcbiAgICBsZXQgb3BlbkxpbmUgPSBjb250ZXh0LnN0YXRlLmRvYy5saW5lQXQob3BlblRva2VuLmZyb20pO1xuICAgIGxldCBsaW5lRW5kID0gc2ltID09IG51bGwgfHwgc2ltIDw9IG9wZW5MaW5lLmZyb20gPyBvcGVuTGluZS50byA6IE1hdGgubWluKG9wZW5MaW5lLnRvLCBzaW0pO1xuICAgIGZvciAobGV0IHBvcyA9IG9wZW5Ub2tlbi50bzs7KSB7XG4gICAgICAgIGxldCBuZXh0ID0gdHJlZS5jaGlsZEFmdGVyKHBvcyk7XG4gICAgICAgIGlmICghbmV4dCB8fCBuZXh0ID09IGxhc3QpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKCFuZXh0LnR5cGUuaXNTa2lwcGVkKVxuICAgICAgICAgICAgcmV0dXJuIG5leHQuZnJvbSA8IGxpbmVFbmQgPyBvcGVuVG9rZW4gOiBudWxsO1xuICAgICAgICBwb3MgPSBuZXh0LnRvO1xuICAgIH1cbn1cbi8qKlxuQW4gaW5kZW50YXRpb24gc3RyYXRlZ3kgZm9yIGRlbGltaXRlZCAodXN1YWxseSBicmFja2V0ZWQpIG5vZGVzLlxuV2lsbCwgYnkgZGVmYXVsdCwgaW5kZW50IG9uZSB1bml0IG1vcmUgdGhhbiB0aGUgcGFyZW50J3MgYmFzZVxuaW5kZW50IHVubGVzcyB0aGUgbGluZSBzdGFydHMgd2l0aCBhIGNsb3NpbmcgdG9rZW4uIFdoZW4gYGFsaWduYFxuaXMgdHJ1ZSBhbmQgdGhlcmUgYXJlIG5vbi1za2lwcGVkIG5vZGVzIG9uIHRoZSBub2RlJ3Mgb3BlbmluZ1xubGluZSwgdGhlIGNvbnRlbnQgb2YgdGhlIG5vZGUgd2lsbCBiZSBhbGlnbmVkIHdpdGggdGhlIGVuZCBvZiB0aGVcbm9wZW5pbmcgbm9kZSwgbGlrZSB0aGlzOlxuXG4gICAgZm9vKGJhcixcbiAgICAgICAgYmF6KVxuKi9cbmZ1bmN0aW9uIGRlbGltaXRlZEluZGVudCh7IGNsb3NpbmcsIGFsaWduID0gdHJ1ZSwgdW5pdHMgPSAxIH0pIHtcbiAgICByZXR1cm4gKGNvbnRleHQpID0+IGRlbGltaXRlZFN0cmF0ZWd5KGNvbnRleHQsIGFsaWduLCB1bml0cywgY2xvc2luZyk7XG59XG5mdW5jdGlvbiBkZWxpbWl0ZWRTdHJhdGVneShjb250ZXh0LCBhbGlnbiwgdW5pdHMsIGNsb3NpbmcsIGNsb3NlZEF0KSB7XG4gICAgbGV0IGFmdGVyID0gY29udGV4dC50ZXh0QWZ0ZXIsIHNwYWNlID0gYWZ0ZXIubWF0Y2goL15cXHMqLylbMF0ubGVuZ3RoO1xuICAgIGxldCBjbG9zZWQgPSBjbG9zaW5nICYmIGFmdGVyLnNsaWNlKHNwYWNlLCBzcGFjZSArIGNsb3NpbmcubGVuZ3RoKSA9PSBjbG9zaW5nIHx8IGNsb3NlZEF0ID09IGNvbnRleHQucG9zICsgc3BhY2U7XG4gICAgbGV0IGFsaWduZWQgPSBhbGlnbiA/IGJyYWNrZXRlZEFsaWduZWQoY29udGV4dCkgOiBudWxsO1xuICAgIGlmIChhbGlnbmVkKVxuICAgICAgICByZXR1cm4gY2xvc2VkID8gY29udGV4dC5jb2x1bW4oYWxpZ25lZC5mcm9tKSA6IGNvbnRleHQuY29sdW1uKGFsaWduZWQudG8pO1xuICAgIHJldHVybiBjb250ZXh0LmJhc2VJbmRlbnQgKyAoY2xvc2VkID8gMCA6IGNvbnRleHQudW5pdCAqIHVuaXRzKTtcbn1cbi8qKlxuQW4gaW5kZW50YXRpb24gc3RyYXRlZ3kgdGhhdCBhbGlnbnMgYSBub2RlJ3MgY29udGVudCB0byBpdHMgYmFzZVxuaW5kZW50YXRpb24uXG4qL1xuY29uc3QgZmxhdEluZGVudCA9IChjb250ZXh0KSA9PiBjb250ZXh0LmJhc2VJbmRlbnQ7XG4vKipcbkNyZWF0ZXMgYW4gaW5kZW50YXRpb24gc3RyYXRlZ3kgdGhhdCwgYnkgZGVmYXVsdCwgaW5kZW50c1xuY29udGludWVkIGxpbmVzIG9uZSB1bml0IG1vcmUgdGhhbiB0aGUgbm9kZSdzIGJhc2UgaW5kZW50YXRpb24uXG5Zb3UgY2FuIHByb3ZpZGUgYGV4Y2VwdGAgdG8gcHJldmVudCBpbmRlbnRhdGlvbiBvZiBsaW5lcyB0aGF0XG5tYXRjaCBhIHBhdHRlcm4gKGZvciBleGFtcGxlIGAvXmVsc2VcXGIvYCBpbiBgaWZgL2BlbHNlYFxuY29uc3RydWN0cyksIGFuZCB5b3UgY2FuIGNoYW5nZSB0aGUgYW1vdW50IG9mIHVuaXRzIHVzZWQgd2l0aCB0aGVcbmB1bml0c2Agb3B0aW9uLlxuKi9cbmZ1bmN0aW9uIGNvbnRpbnVlZEluZGVudCh7IGV4Y2VwdCwgdW5pdHMgPSAxIH0gPSB7fSkge1xuICAgIHJldHVybiAoY29udGV4dCkgPT4ge1xuICAgICAgICBsZXQgbWF0Y2hFeGNlcHQgPSBleGNlcHQgJiYgZXhjZXB0LnRlc3QoY29udGV4dC50ZXh0QWZ0ZXIpO1xuICAgICAgICByZXR1cm4gY29udGV4dC5iYXNlSW5kZW50ICsgKG1hdGNoRXhjZXB0ID8gMCA6IHVuaXRzICogY29udGV4dC51bml0KTtcbiAgICB9O1xufVxuY29uc3QgRG9udEluZGVudEJleW9uZCA9IDIwMDtcbi8qKlxuRW5hYmxlcyByZWluZGVudGF0aW9uIG9uIGlucHV0LiBXaGVuIGEgbGFuZ3VhZ2UgZGVmaW5lcyBhblxuYGluZGVudE9uSW5wdXRgIGZpZWxkIGluIGl0cyBbbGFuZ3VhZ2VcbmRhdGFdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuRWRpdG9yU3RhdGUubGFuZ3VhZ2VEYXRhQXQpLCB3aGljaCBtdXN0IGhvbGQgYSByZWd1bGFyXG5leHByZXNzaW9uLCB0aGUgbGluZSBhdCB0aGUgY3Vyc29yIHdpbGwgYmUgcmVpbmRlbnRlZCB3aGVuZXZlciBuZXdcbnRleHQgaXMgdHlwZWQgYW5kIHRoZSBpbnB1dCBmcm9tIHRoZSBzdGFydCBvZiB0aGUgbGluZSB1cCB0byB0aGVcbmN1cnNvciBtYXRjaGVzIHRoYXQgcmVnZXhwLlxuXG5UbyBhdm9pZCB1bm5lY2Nlc2FyeSByZWluZGVudHMsIGl0IGlzIHJlY29tbWVuZGVkIHRvIHN0YXJ0IHRoZVxucmVnZXhwIHdpdGggYF5gICh1c3VhbGx5IGZvbGxvd2VkIGJ5IGBcXHMqYCksIGFuZCBlbmQgaXQgd2l0aCBgJGAuXG5Gb3IgZXhhbXBsZSwgYC9eXFxzKlxcfSQvYCB3aWxsIHJlaW5kZW50IHdoZW4gYSBjbG9zaW5nIGJyYWNlIGlzXG5hZGRlZCBhdCB0aGUgc3RhcnQgb2YgYSBsaW5lLlxuKi9cbmZ1bmN0aW9uIGluZGVudE9uSW5wdXQoKSB7XG4gICAgcmV0dXJuIHN0YXRlLkVkaXRvclN0YXRlLnRyYW5zYWN0aW9uRmlsdGVyLm9mKHRyID0+IHtcbiAgICAgICAgaWYgKCF0ci5kb2NDaGFuZ2VkIHx8ICF0ci5pc1VzZXJFdmVudChcImlucHV0LnR5cGVcIikgJiYgIXRyLmlzVXNlckV2ZW50KFwiaW5wdXQuY29tcGxldGVcIikpXG4gICAgICAgICAgICByZXR1cm4gdHI7XG4gICAgICAgIGxldCBydWxlcyA9IHRyLnN0YXJ0U3RhdGUubGFuZ3VhZ2VEYXRhQXQoXCJpbmRlbnRPbklucHV0XCIsIHRyLnN0YXJ0U3RhdGUuc2VsZWN0aW9uLm1haW4uaGVhZCk7XG4gICAgICAgIGlmICghcnVsZXMubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIHRyO1xuICAgICAgICBsZXQgZG9jID0gdHIubmV3RG9jLCB7IGhlYWQgfSA9IHRyLm5ld1NlbGVjdGlvbi5tYWluLCBsaW5lID0gZG9jLmxpbmVBdChoZWFkKTtcbiAgICAgICAgaWYgKGhlYWQgPiBsaW5lLmZyb20gKyBEb250SW5kZW50QmV5b25kKVxuICAgICAgICAgICAgcmV0dXJuIHRyO1xuICAgICAgICBsZXQgbGluZVN0YXJ0ID0gZG9jLnNsaWNlU3RyaW5nKGxpbmUuZnJvbSwgaGVhZCk7XG4gICAgICAgIGlmICghcnVsZXMuc29tZShyID0+IHIudGVzdChsaW5lU3RhcnQpKSlcbiAgICAgICAgICAgIHJldHVybiB0cjtcbiAgICAgICAgbGV0IHsgc3RhdGUgfSA9IHRyLCBsYXN0ID0gLTEsIGNoYW5nZXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgeyBoZWFkIH0gb2Ygc3RhdGUuc2VsZWN0aW9uLnJhbmdlcykge1xuICAgICAgICAgICAgbGV0IGxpbmUgPSBzdGF0ZS5kb2MubGluZUF0KGhlYWQpO1xuICAgICAgICAgICAgaWYgKGxpbmUuZnJvbSA9PSBsYXN0KVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgbGFzdCA9IGxpbmUuZnJvbTtcbiAgICAgICAgICAgIGxldCBpbmRlbnQgPSBnZXRJbmRlbnRhdGlvbihzdGF0ZSwgbGluZS5mcm9tKTtcbiAgICAgICAgICAgIGlmIChpbmRlbnQgPT0gbnVsbClcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGxldCBjdXIgPSAvXlxccyovLmV4ZWMobGluZS50ZXh0KVswXTtcbiAgICAgICAgICAgIGxldCBub3JtID0gaW5kZW50U3RyaW5nKHN0YXRlLCBpbmRlbnQpO1xuICAgICAgICAgICAgaWYgKGN1ciAhPSBub3JtKVxuICAgICAgICAgICAgICAgIGNoYW5nZXMucHVzaCh7IGZyb206IGxpbmUuZnJvbSwgdG86IGxpbmUuZnJvbSArIGN1ci5sZW5ndGgsIGluc2VydDogbm9ybSB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hhbmdlcy5sZW5ndGggPyBbdHIsIHsgY2hhbmdlcywgc2VxdWVudGlhbDogdHJ1ZSB9XSA6IHRyO1xuICAgIH0pO1xufVxuXG4vKipcbkEgZmFjZXQgdGhhdCByZWdpc3RlcnMgYSBjb2RlIGZvbGRpbmcgc2VydmljZS4gV2hlbiBjYWxsZWQgd2l0aFxudGhlIGV4dGVudCBvZiBhIGxpbmUsIHN1Y2ggYSBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIGEgZm9sZGFibGVcbnJhbmdlIHRoYXQgc3RhcnRzIG9uIHRoYXQgbGluZSAoYnV0IGNvbnRpbnVlcyBiZXlvbmQgaXQpLCBpZiBvbmVcbmNhbiBiZSBmb3VuZC5cbiovXG5jb25zdCBmb2xkU2VydmljZSA9IHN0YXRlLkZhY2V0LmRlZmluZSgpO1xuLyoqXG5UaGlzIG5vZGUgcHJvcCBpcyB1c2VkIHRvIGFzc29jaWF0ZSBmb2xkaW5nIGluZm9ybWF0aW9uIHdpdGhcbnN5bnRheCBub2RlIHR5cGVzLiBHaXZlbiBhIHN5bnRheCBub2RlLCBpdCBzaG91bGQgY2hlY2sgd2hldGhlclxudGhhdCB0cmVlIGlzIGZvbGRhYmxlIGFuZCByZXR1cm4gdGhlIHJhbmdlIHRoYXQgY2FuIGJlIGNvbGxhcHNlZFxud2hlbiBpdCBpcy5cbiovXG5jb25zdCBmb2xkTm9kZVByb3AgPSBuZXcgY29tbW9uLk5vZGVQcm9wKCk7XG4vKipcbltGb2xkXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2xhbmd1YWdlLmZvbGROb2RlUHJvcCkgZnVuY3Rpb24gdGhhdCBmb2xkcyBldmVyeXRoaW5nIGJ1dFxudGhlIGZpcnN0IGFuZCB0aGUgbGFzdCBjaGlsZCBvZiBhIHN5bnRheCBub2RlLiBVc2VmdWwgZm9yIG5vZGVzXG50aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCBkZWxpbWl0ZXJzLlxuKi9cbmZ1bmN0aW9uIGZvbGRJbnNpZGUobm9kZSkge1xuICAgIGxldCBmaXJzdCA9IG5vZGUuZmlyc3RDaGlsZCwgbGFzdCA9IG5vZGUubGFzdENoaWxkO1xuICAgIHJldHVybiBmaXJzdCAmJiBmaXJzdC50byA8IGxhc3QuZnJvbSA/IHsgZnJvbTogZmlyc3QudG8sIHRvOiBsYXN0LnR5cGUuaXNFcnJvciA/IG5vZGUudG8gOiBsYXN0LmZyb20gfSA6IG51bGw7XG59XG5mdW5jdGlvbiBzeW50YXhGb2xkaW5nKHN0YXRlLCBzdGFydCwgZW5kKSB7XG4gICAgbGV0IHRyZWUgPSBzeW50YXhUcmVlKHN0YXRlKTtcbiAgICBpZiAodHJlZS5sZW5ndGggPCBlbmQpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIGxldCBzdGFjayA9IHRyZWUucmVzb2x2ZVN0YWNrKGVuZCwgMSk7XG4gICAgbGV0IGZvdW5kID0gbnVsbDtcbiAgICBmb3IgKGxldCBpdGVyID0gc3RhY2s7IGl0ZXI7IGl0ZXIgPSBpdGVyLm5leHQpIHtcbiAgICAgICAgbGV0IGN1ciA9IGl0ZXIubm9kZTtcbiAgICAgICAgaWYgKGN1ci50byA8PSBlbmQgfHwgY3VyLmZyb20gPiBlbmQpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgaWYgKGZvdW5kICYmIGN1ci5mcm9tIDwgc3RhcnQpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgbGV0IHByb3AgPSBjdXIudHlwZS5wcm9wKGZvbGROb2RlUHJvcCk7XG4gICAgICAgIGlmIChwcm9wICYmIChjdXIudG8gPCB0cmVlLmxlbmd0aCAtIDUwIHx8IHRyZWUubGVuZ3RoID09IHN0YXRlLmRvYy5sZW5ndGggfHwgIWlzVW5maW5pc2hlZChjdXIpKSkge1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gcHJvcChjdXIsIHN0YXRlKTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZS5mcm9tIDw9IGVuZCAmJiB2YWx1ZS5mcm9tID49IHN0YXJ0ICYmIHZhbHVlLnRvID4gZW5kKVxuICAgICAgICAgICAgICAgIGZvdW5kID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZvdW5kO1xufVxuZnVuY3Rpb24gaXNVbmZpbmlzaGVkKG5vZGUpIHtcbiAgICBsZXQgY2ggPSBub2RlLmxhc3RDaGlsZDtcbiAgICByZXR1cm4gY2ggJiYgY2gudG8gPT0gbm9kZS50byAmJiBjaC50eXBlLmlzRXJyb3I7XG59XG4vKipcbkNoZWNrIHdoZXRoZXIgdGhlIGdpdmVuIGxpbmUgaXMgZm9sZGFibGUuIEZpcnN0IGFza3MgYW55IGZvbGRcbnNlcnZpY2VzIHJlZ2lzdGVyZWQgdGhyb3VnaFxuW2Bmb2xkU2VydmljZWBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jbGFuZ3VhZ2UuZm9sZFNlcnZpY2UpLCBhbmQgaWYgbm9uZSBvZiB0aGVtIHJldHVyblxuYSByZXN1bHQsIHRyaWVzIHRvIHF1ZXJ5IHRoZSBbZm9sZCBub2RlXG5wcm9wXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2xhbmd1YWdlLmZvbGROb2RlUHJvcCkgb2Ygc3ludGF4IG5vZGVzIHRoYXQgY292ZXIgdGhlIGVuZFxub2YgdGhlIGxpbmUuXG4qL1xuZnVuY3Rpb24gZm9sZGFibGUoc3RhdGUsIGxpbmVTdGFydCwgbGluZUVuZCkge1xuICAgIGZvciAobGV0IHNlcnZpY2Ugb2Ygc3RhdGUuZmFjZXQoZm9sZFNlcnZpY2UpKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBzZXJ2aWNlKHN0YXRlLCBsaW5lU3RhcnQsIGxpbmVFbmQpO1xuICAgICAgICBpZiAocmVzdWx0KVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIHN5bnRheEZvbGRpbmcoc3RhdGUsIGxpbmVTdGFydCwgbGluZUVuZCk7XG59XG5mdW5jdGlvbiBtYXBSYW5nZShyYW5nZSwgbWFwcGluZykge1xuICAgIGxldCBmcm9tID0gbWFwcGluZy5tYXBQb3MocmFuZ2UuZnJvbSwgMSksIHRvID0gbWFwcGluZy5tYXBQb3MocmFuZ2UudG8sIC0xKTtcbiAgICByZXR1cm4gZnJvbSA+PSB0byA/IHVuZGVmaW5lZCA6IHsgZnJvbSwgdG8gfTtcbn1cbi8qKlxuU3RhdGUgZWZmZWN0IHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGEgdHJhbnNhY3Rpb24gdG8gZm9sZCB0aGVcbmdpdmVuIHJhbmdlLiAoWW91IHByb2JhYmx5IG9ubHkgbmVlZCB0aGlzIGluIGV4Y2VwdGlvbmFsXG5jaXJjdW1zdGFuY2Vz4oCUdXN1YWxseSB5b3UnbGwganVzdCB3YW50IHRvIGxldFxuW2Bmb2xkQ29kZWBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jbGFuZ3VhZ2UuZm9sZENvZGUpIGFuZCB0aGUgW2ZvbGRcbmd1dHRlcl0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNsYW5ndWFnZS5mb2xkR3V0dGVyKSBjcmVhdGUgdGhlIHRyYW5zYWN0aW9ucy4pXG4qL1xuY29uc3QgZm9sZEVmZmVjdCA9IHN0YXRlLlN0YXRlRWZmZWN0LmRlZmluZSh7IG1hcDogbWFwUmFuZ2UgfSk7XG4vKipcblN0YXRlIGVmZmVjdCB0aGF0IHVuZm9sZHMgdGhlIGdpdmVuIHJhbmdlIChpZiBpdCB3YXMgZm9sZGVkKS5cbiovXG5jb25zdCB1bmZvbGRFZmZlY3QgPSBzdGF0ZS5TdGF0ZUVmZmVjdC5kZWZpbmUoeyBtYXA6IG1hcFJhbmdlIH0pO1xuZnVuY3Rpb24gc2VsZWN0ZWRMaW5lcyh2aWV3KSB7XG4gICAgbGV0IGxpbmVzID0gW107XG4gICAgZm9yIChsZXQgeyBoZWFkIH0gb2Ygdmlldy5zdGF0ZS5zZWxlY3Rpb24ucmFuZ2VzKSB7XG4gICAgICAgIGlmIChsaW5lcy5zb21lKGwgPT4gbC5mcm9tIDw9IGhlYWQgJiYgbC50byA+PSBoZWFkKSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBsaW5lcy5wdXNoKHZpZXcubGluZUJsb2NrQXQoaGVhZCkpO1xuICAgIH1cbiAgICByZXR1cm4gbGluZXM7XG59XG4vKipcblRoZSBzdGF0ZSBmaWVsZCB0aGF0IHN0b3JlcyB0aGUgZm9sZGVkIHJhbmdlcyAoYXMgYSBbZGVjb3JhdGlvblxuc2V0XShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3ZpZXcuRGVjb3JhdGlvblNldCkpLiBDYW4gYmUgcGFzc2VkIHRvXG5bYEVkaXRvclN0YXRlLnRvSlNPTmBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuRWRpdG9yU3RhdGUudG9KU09OKSBhbmRcbltgZnJvbUpTT05gXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLkVkaXRvclN0YXRlXmZyb21KU09OKSB0byBzZXJpYWxpemUgdGhlIGZvbGRcbnN0YXRlLlxuKi9cbmNvbnN0IGZvbGRTdGF0ZSA9IHN0YXRlLlN0YXRlRmllbGQuZGVmaW5lKHtcbiAgICBjcmVhdGUoKSB7XG4gICAgICAgIHJldHVybiB2aWV3LkRlY29yYXRpb24ubm9uZTtcbiAgICB9LFxuICAgIHVwZGF0ZShmb2xkZWQsIHRyKSB7XG4gICAgICAgIGZvbGRlZCA9IGZvbGRlZC5tYXAodHIuY2hhbmdlcyk7XG4gICAgICAgIGZvciAobGV0IGUgb2YgdHIuZWZmZWN0cykge1xuICAgICAgICAgICAgaWYgKGUuaXMoZm9sZEVmZmVjdCkgJiYgIWZvbGRFeGlzdHMoZm9sZGVkLCBlLnZhbHVlLmZyb20sIGUudmFsdWUudG8pKSB7XG4gICAgICAgICAgICAgICAgbGV0IHsgcHJlcGFyZVBsYWNlaG9sZGVyIH0gPSB0ci5zdGF0ZS5mYWNldChmb2xkQ29uZmlnKTtcbiAgICAgICAgICAgICAgICBsZXQgd2lkZ2V0ID0gIXByZXBhcmVQbGFjZWhvbGRlciA/IGZvbGRXaWRnZXQgOlxuICAgICAgICAgICAgICAgICAgICB2aWV3LkRlY29yYXRpb24ucmVwbGFjZSh7IHdpZGdldDogbmV3IFByZXBhcmVkRm9sZFdpZGdldChwcmVwYXJlUGxhY2Vob2xkZXIodHIuc3RhdGUsIGUudmFsdWUpKSB9KTtcbiAgICAgICAgICAgICAgICBmb2xkZWQgPSBmb2xkZWQudXBkYXRlKHsgYWRkOiBbd2lkZ2V0LnJhbmdlKGUudmFsdWUuZnJvbSwgZS52YWx1ZS50byldIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZS5pcyh1bmZvbGRFZmZlY3QpKSB7XG4gICAgICAgICAgICAgICAgZm9sZGVkID0gZm9sZGVkLnVwZGF0ZSh7IGZpbHRlcjogKGZyb20sIHRvKSA9PiBlLnZhbHVlLmZyb20gIT0gZnJvbSB8fCBlLnZhbHVlLnRvICE9IHRvLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJGcm9tOiBlLnZhbHVlLmZyb20sIGZpbHRlclRvOiBlLnZhbHVlLnRvIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIENsZWFyIGZvbGRlZCByYW5nZXMgdGhhdCBjb3ZlciB0aGUgc2VsZWN0aW9uIGhlYWRcbiAgICAgICAgaWYgKHRyLnNlbGVjdGlvbikge1xuICAgICAgICAgICAgbGV0IG9uU2VsZWN0aW9uID0gZmFsc2UsIHsgaGVhZCB9ID0gdHIuc2VsZWN0aW9uLm1haW47XG4gICAgICAgICAgICBmb2xkZWQuYmV0d2VlbihoZWFkLCBoZWFkLCAoYSwgYikgPT4geyBpZiAoYSA8IGhlYWQgJiYgYiA+IGhlYWQpXG4gICAgICAgICAgICAgICAgb25TZWxlY3Rpb24gPSB0cnVlOyB9KTtcbiAgICAgICAgICAgIGlmIChvblNlbGVjdGlvbilcbiAgICAgICAgICAgICAgICBmb2xkZWQgPSBmb2xkZWQudXBkYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyRnJvbTogaGVhZCxcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyVG86IGhlYWQsXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjogKGEsIGIpID0+IGIgPD0gaGVhZCB8fCBhID49IGhlYWRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm9sZGVkO1xuICAgIH0sXG4gICAgcHJvdmlkZTogZiA9PiB2aWV3LkVkaXRvclZpZXcuZGVjb3JhdGlvbnMuZnJvbShmKSxcbiAgICB0b0pTT04oZm9sZGVkLCBzdGF0ZSkge1xuICAgICAgICBsZXQgcmFuZ2VzID0gW107XG4gICAgICAgIGZvbGRlZC5iZXR3ZWVuKDAsIHN0YXRlLmRvYy5sZW5ndGgsIChmcm9tLCB0bykgPT4geyByYW5nZXMucHVzaChmcm9tLCB0byk7IH0pO1xuICAgICAgICByZXR1cm4gcmFuZ2VzO1xuICAgIH0sXG4gICAgZnJvbUpTT04odmFsdWUpIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSB8fCB2YWx1ZS5sZW5ndGggJSAyKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIEpTT04gZm9yIGZvbGQgc3RhdGVcIik7XG4gICAgICAgIGxldCByYW5nZXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7KSB7XG4gICAgICAgICAgICBsZXQgZnJvbSA9IHZhbHVlW2krK10sIHRvID0gdmFsdWVbaSsrXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZnJvbSAhPSBcIm51bWJlclwiIHx8IHR5cGVvZiB0byAhPSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBKU09OIGZvciBmb2xkIHN0YXRlXCIpO1xuICAgICAgICAgICAgcmFuZ2VzLnB1c2goZm9sZFdpZGdldC5yYW5nZShmcm9tLCB0bykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2aWV3LkRlY29yYXRpb24uc2V0KHJhbmdlcywgdHJ1ZSk7XG4gICAgfVxufSk7XG4vKipcbkdldCBhIFtyYW5nZSBzZXRdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuUmFuZ2VTZXQpIGNvbnRhaW5pbmcgdGhlIGZvbGRlZCByYW5nZXNcbmluIHRoZSBnaXZlbiBzdGF0ZS5cbiovXG5mdW5jdGlvbiBmb2xkZWRSYW5nZXMoc3RhdGUkMSkge1xuICAgIHJldHVybiBzdGF0ZSQxLmZpZWxkKGZvbGRTdGF0ZSwgZmFsc2UpIHx8IHN0YXRlLlJhbmdlU2V0LmVtcHR5O1xufVxuZnVuY3Rpb24gZmluZEZvbGQoc3RhdGUsIGZyb20sIHRvKSB7XG4gICAgdmFyIF9hO1xuICAgIGxldCBmb3VuZCA9IG51bGw7XG4gICAgKF9hID0gc3RhdGUuZmllbGQoZm9sZFN0YXRlLCBmYWxzZSkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5iZXR3ZWVuKGZyb20sIHRvLCAoZnJvbSwgdG8pID0+IHtcbiAgICAgICAgaWYgKCFmb3VuZCB8fCBmb3VuZC5mcm9tID4gZnJvbSlcbiAgICAgICAgICAgIGZvdW5kID0geyBmcm9tLCB0byB9O1xuICAgIH0pO1xuICAgIHJldHVybiBmb3VuZDtcbn1cbmZ1bmN0aW9uIGZvbGRFeGlzdHMoZm9sZGVkLCBmcm9tLCB0bykge1xuICAgIGxldCBmb3VuZCA9IGZhbHNlO1xuICAgIGZvbGRlZC5iZXR3ZWVuKGZyb20sIGZyb20sIChhLCBiKSA9PiB7IGlmIChhID09IGZyb20gJiYgYiA9PSB0bylcbiAgICAgICAgZm91bmQgPSB0cnVlOyB9KTtcbiAgICByZXR1cm4gZm91bmQ7XG59XG5mdW5jdGlvbiBtYXliZUVuYWJsZShzdGF0ZSQxLCBvdGhlcikge1xuICAgIHJldHVybiBzdGF0ZSQxLmZpZWxkKGZvbGRTdGF0ZSwgZmFsc2UpID8gb3RoZXIgOiBvdGhlci5jb25jYXQoc3RhdGUuU3RhdGVFZmZlY3QuYXBwZW5kQ29uZmlnLm9mKGNvZGVGb2xkaW5nKCkpKTtcbn1cbi8qKlxuRm9sZCB0aGUgbGluZXMgdGhhdCBhcmUgc2VsZWN0ZWQsIGlmIHBvc3NpYmxlLlxuKi9cbmNvbnN0IGZvbGRDb2RlID0gdmlldyA9PiB7XG4gICAgZm9yIChsZXQgbGluZSBvZiBzZWxlY3RlZExpbmVzKHZpZXcpKSB7XG4gICAgICAgIGxldCByYW5nZSA9IGZvbGRhYmxlKHZpZXcuc3RhdGUsIGxpbmUuZnJvbSwgbGluZS50byk7XG4gICAgICAgIGlmIChyYW5nZSkge1xuICAgICAgICAgICAgdmlldy5kaXNwYXRjaCh7IGVmZmVjdHM6IG1heWJlRW5hYmxlKHZpZXcuc3RhdGUsIFtmb2xkRWZmZWN0Lm9mKHJhbmdlKSwgYW5ub3VuY2VGb2xkKHZpZXcsIHJhbmdlKV0pIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcbi8qKlxuVW5mb2xkIGZvbGRlZCByYW5nZXMgb24gc2VsZWN0ZWQgbGluZXMuXG4qL1xuY29uc3QgdW5mb2xkQ29kZSA9IHZpZXcgPT4ge1xuICAgIGlmICghdmlldy5zdGF0ZS5maWVsZChmb2xkU3RhdGUsIGZhbHNlKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGxldCBlZmZlY3RzID0gW107XG4gICAgZm9yIChsZXQgbGluZSBvZiBzZWxlY3RlZExpbmVzKHZpZXcpKSB7XG4gICAgICAgIGxldCBmb2xkZWQgPSBmaW5kRm9sZCh2aWV3LnN0YXRlLCBsaW5lLmZyb20sIGxpbmUudG8pO1xuICAgICAgICBpZiAoZm9sZGVkKVxuICAgICAgICAgICAgZWZmZWN0cy5wdXNoKHVuZm9sZEVmZmVjdC5vZihmb2xkZWQpLCBhbm5vdW5jZUZvbGQodmlldywgZm9sZGVkLCBmYWxzZSkpO1xuICAgIH1cbiAgICBpZiAoZWZmZWN0cy5sZW5ndGgpXG4gICAgICAgIHZpZXcuZGlzcGF0Y2goeyBlZmZlY3RzIH0pO1xuICAgIHJldHVybiBlZmZlY3RzLmxlbmd0aCA+IDA7XG59O1xuZnVuY3Rpb24gYW5ub3VuY2VGb2xkKHZpZXckMSwgcmFuZ2UsIGZvbGQgPSB0cnVlKSB7XG4gICAgbGV0IGxpbmVGcm9tID0gdmlldyQxLnN0YXRlLmRvYy5saW5lQXQocmFuZ2UuZnJvbSkubnVtYmVyLCBsaW5lVG8gPSB2aWV3JDEuc3RhdGUuZG9jLmxpbmVBdChyYW5nZS50bykubnVtYmVyO1xuICAgIHJldHVybiB2aWV3LkVkaXRvclZpZXcuYW5ub3VuY2Uub2YoYCR7dmlldyQxLnN0YXRlLnBocmFzZShmb2xkID8gXCJGb2xkZWQgbGluZXNcIiA6IFwiVW5mb2xkZWQgbGluZXNcIil9ICR7bGluZUZyb219ICR7dmlldyQxLnN0YXRlLnBocmFzZShcInRvXCIpfSAke2xpbmVUb30uYCk7XG59XG4vKipcbkZvbGQgYWxsIHRvcC1sZXZlbCBmb2xkYWJsZSByYW5nZXMuIE5vdGUgdGhhdCwgaW4gbW9zdCBjYXNlcyxcbmZvbGRpbmcgaW5mb3JtYXRpb24gd2lsbCBkZXBlbmQgb24gdGhlIFtzeW50YXhcbnRyZWVdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jbGFuZ3VhZ2Uuc3ludGF4VHJlZSksIGFuZCBmb2xkaW5nIGV2ZXJ5dGhpbmcgbWF5IG5vdCB3b3JrXG5yZWxpYWJseSB3aGVuIHRoZSBkb2N1bWVudCBoYXNuJ3QgYmVlbiBmdWxseSBwYXJzZWQgKGVpdGhlclxuYmVjYXVzZSB0aGUgZWRpdG9yIHN0YXRlIHdhcyBvbmx5IGp1c3QgaW5pdGlhbGl6ZWQsIG9yIGJlY2F1c2UgdGhlXG5kb2N1bWVudCBpcyBzbyBiaWcgdGhhdCB0aGUgcGFyc2VyIGRlY2lkZWQgbm90IHRvIHBhcnNlIGl0XG5lbnRpcmVseSkuXG4qL1xuY29uc3QgZm9sZEFsbCA9IHZpZXcgPT4ge1xuICAgIGxldCB7IHN0YXRlIH0gPSB2aWV3LCBlZmZlY3RzID0gW107XG4gICAgZm9yIChsZXQgcG9zID0gMDsgcG9zIDwgc3RhdGUuZG9jLmxlbmd0aDspIHtcbiAgICAgICAgbGV0IGxpbmUgPSB2aWV3LmxpbmVCbG9ja0F0KHBvcyksIHJhbmdlID0gZm9sZGFibGUoc3RhdGUsIGxpbmUuZnJvbSwgbGluZS50byk7XG4gICAgICAgIGlmIChyYW5nZSlcbiAgICAgICAgICAgIGVmZmVjdHMucHVzaChmb2xkRWZmZWN0Lm9mKHJhbmdlKSk7XG4gICAgICAgIHBvcyA9IChyYW5nZSA/IHZpZXcubGluZUJsb2NrQXQocmFuZ2UudG8pIDogbGluZSkudG8gKyAxO1xuICAgIH1cbiAgICBpZiAoZWZmZWN0cy5sZW5ndGgpXG4gICAgICAgIHZpZXcuZGlzcGF0Y2goeyBlZmZlY3RzOiBtYXliZUVuYWJsZSh2aWV3LnN0YXRlLCBlZmZlY3RzKSB9KTtcbiAgICByZXR1cm4gISFlZmZlY3RzLmxlbmd0aDtcbn07XG4vKipcblVuZm9sZCBhbGwgZm9sZGVkIGNvZGUuXG4qL1xuY29uc3QgdW5mb2xkQWxsID0gdmlldyA9PiB7XG4gICAgbGV0IGZpZWxkID0gdmlldy5zdGF0ZS5maWVsZChmb2xkU3RhdGUsIGZhbHNlKTtcbiAgICBpZiAoIWZpZWxkIHx8ICFmaWVsZC5zaXplKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0IGVmZmVjdHMgPSBbXTtcbiAgICBmaWVsZC5iZXR3ZWVuKDAsIHZpZXcuc3RhdGUuZG9jLmxlbmd0aCwgKGZyb20sIHRvKSA9PiB7IGVmZmVjdHMucHVzaCh1bmZvbGRFZmZlY3Qub2YoeyBmcm9tLCB0byB9KSk7IH0pO1xuICAgIHZpZXcuZGlzcGF0Y2goeyBlZmZlY3RzIH0pO1xuICAgIHJldHVybiB0cnVlO1xufTtcbi8vIEZpbmQgdGhlIGZvbGRhYmxlIHJlZ2lvbiBjb250YWluaW5nIHRoZSBnaXZlbiBsaW5lLCBpZiBvbmUgZXhpc3RzXG5mdW5jdGlvbiBmb2xkYWJsZUNvbnRhaW5lcih2aWV3LCBsaW5lQmxvY2spIHtcbiAgICAvLyBMb29rIGJhY2t3YXJkcyB0aHJvdWdoIGxpbmUgYmxvY2tzIHVudGlsIHdlIGZpbmQgYSBmb2xkYWJsZSByZWdpb24gdGhhdFxuICAgIC8vIGludGVyc2VjdHMgd2l0aCB0aGUgbGluZVxuICAgIGZvciAobGV0IGxpbmUgPSBsaW5lQmxvY2s7Oykge1xuICAgICAgICBsZXQgZm9sZGFibGVSZWdpb24gPSBmb2xkYWJsZSh2aWV3LnN0YXRlLCBsaW5lLmZyb20sIGxpbmUudG8pO1xuICAgICAgICBpZiAoZm9sZGFibGVSZWdpb24gJiYgZm9sZGFibGVSZWdpb24udG8gPiBsaW5lQmxvY2suZnJvbSlcbiAgICAgICAgICAgIHJldHVybiBmb2xkYWJsZVJlZ2lvbjtcbiAgICAgICAgaWYgKCFsaW5lLmZyb20pXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgbGluZSA9IHZpZXcubGluZUJsb2NrQXQobGluZS5mcm9tIC0gMSk7XG4gICAgfVxufVxuLyoqXG5Ub2dnbGUgZm9sZGluZyBhdCBjdXJzb3JzLiBVbmZvbGRzIGlmIHRoZXJlIGlzIGFuIGV4aXN0aW5nIGZvbGRcbnN0YXJ0aW5nIGluIHRoYXQgbGluZSwgdHJpZXMgdG8gZmluZCBhIGZvbGRhYmxlIHJhbmdlIGFyb3VuZCBpdFxub3RoZXJ3aXNlLlxuKi9cbmNvbnN0IHRvZ2dsZUZvbGQgPSAodmlldykgPT4ge1xuICAgIGxldCBlZmZlY3RzID0gW107XG4gICAgZm9yIChsZXQgbGluZSBvZiBzZWxlY3RlZExpbmVzKHZpZXcpKSB7XG4gICAgICAgIGxldCBmb2xkZWQgPSBmaW5kRm9sZCh2aWV3LnN0YXRlLCBsaW5lLmZyb20sIGxpbmUudG8pO1xuICAgICAgICBpZiAoZm9sZGVkKSB7XG4gICAgICAgICAgICBlZmZlY3RzLnB1c2godW5mb2xkRWZmZWN0Lm9mKGZvbGRlZCksIGFubm91bmNlRm9sZCh2aWV3LCBmb2xkZWQsIGZhbHNlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgZm9sZFJhbmdlID0gZm9sZGFibGVDb250YWluZXIodmlldywgbGluZSk7XG4gICAgICAgICAgICBpZiAoZm9sZFJhbmdlKVxuICAgICAgICAgICAgICAgIGVmZmVjdHMucHVzaChmb2xkRWZmZWN0Lm9mKGZvbGRSYW5nZSksIGFubm91bmNlRm9sZCh2aWV3LCBmb2xkUmFuZ2UpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoZWZmZWN0cy5sZW5ndGggPiAwKVxuICAgICAgICB2aWV3LmRpc3BhdGNoKHsgZWZmZWN0czogbWF5YmVFbmFibGUodmlldy5zdGF0ZSwgZWZmZWN0cykgfSk7XG4gICAgcmV0dXJuICEhZWZmZWN0cy5sZW5ndGg7XG59O1xuLyoqXG5EZWZhdWx0IGZvbGQtcmVsYXRlZCBrZXkgYmluZGluZ3MuXG5cbiAtIEN0cmwtU2hpZnQtWyAoQ21kLUFsdC1bIG9uIG1hY09TKTogW2Bmb2xkQ29kZWBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jbGFuZ3VhZ2UuZm9sZENvZGUpLlxuIC0gQ3RybC1TaGlmdC1dIChDbWQtQWx0LV0gb24gbWFjT1MpOiBbYHVuZm9sZENvZGVgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2xhbmd1YWdlLnVuZm9sZENvZGUpLlxuIC0gQ3RybC1BbHQtWzogW2Bmb2xkQWxsYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNsYW5ndWFnZS5mb2xkQWxsKS5cbiAtIEN0cmwtQWx0LV06IFtgdW5mb2xkQWxsYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNsYW5ndWFnZS51bmZvbGRBbGwpLlxuKi9cbmNvbnN0IGZvbGRLZXltYXAgPSBbXG4gICAgeyBrZXk6IFwiQ3RybC1TaGlmdC1bXCIsIG1hYzogXCJDbWQtQWx0LVtcIiwgcnVuOiBmb2xkQ29kZSB9LFxuICAgIHsga2V5OiBcIkN0cmwtU2hpZnQtXVwiLCBtYWM6IFwiQ21kLUFsdC1dXCIsIHJ1bjogdW5mb2xkQ29kZSB9LFxuICAgIHsga2V5OiBcIkN0cmwtQWx0LVtcIiwgcnVuOiBmb2xkQWxsIH0sXG4gICAgeyBrZXk6IFwiQ3RybC1BbHQtXVwiLCBydW46IHVuZm9sZEFsbCB9XG5dO1xuY29uc3QgZGVmYXVsdENvbmZpZyA9IHtcbiAgICBwbGFjZWhvbGRlckRPTTogbnVsbCxcbiAgICBwcmVwYXJlUGxhY2Vob2xkZXI6IG51bGwsXG4gICAgcGxhY2Vob2xkZXJUZXh0OiBcIuKAplwiXG59O1xuY29uc3QgZm9sZENvbmZpZyA9IHN0YXRlLkZhY2V0LmRlZmluZSh7XG4gICAgY29tYmluZSh2YWx1ZXMpIHsgcmV0dXJuIHN0YXRlLmNvbWJpbmVDb25maWcodmFsdWVzLCBkZWZhdWx0Q29uZmlnKTsgfVxufSk7XG4vKipcbkNyZWF0ZSBhbiBleHRlbnNpb24gdGhhdCBjb25maWd1cmVzIGNvZGUgZm9sZGluZy5cbiovXG5mdW5jdGlvbiBjb2RlRm9sZGluZyhjb25maWcpIHtcbiAgICBsZXQgcmVzdWx0ID0gW2ZvbGRTdGF0ZSwgYmFzZVRoZW1lJDFdO1xuICAgIGlmIChjb25maWcpXG4gICAgICAgIHJlc3VsdC5wdXNoKGZvbGRDb25maWcub2YoY29uZmlnKSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHdpZGdldFRvRE9NKHZpZXcsIHByZXBhcmVkKSB7XG4gICAgbGV0IHsgc3RhdGUgfSA9IHZpZXcsIGNvbmYgPSBzdGF0ZS5mYWNldChmb2xkQ29uZmlnKTtcbiAgICBsZXQgb25jbGljayA9IChldmVudCkgPT4ge1xuICAgICAgICBsZXQgbGluZSA9IHZpZXcubGluZUJsb2NrQXQodmlldy5wb3NBdERPTShldmVudC50YXJnZXQpKTtcbiAgICAgICAgbGV0IGZvbGRlZCA9IGZpbmRGb2xkKHZpZXcuc3RhdGUsIGxpbmUuZnJvbSwgbGluZS50byk7XG4gICAgICAgIGlmIChmb2xkZWQpXG4gICAgICAgICAgICB2aWV3LmRpc3BhdGNoKHsgZWZmZWN0czogdW5mb2xkRWZmZWN0Lm9mKGZvbGRlZCkgfSk7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfTtcbiAgICBpZiAoY29uZi5wbGFjZWhvbGRlckRPTSlcbiAgICAgICAgcmV0dXJuIGNvbmYucGxhY2Vob2xkZXJET00odmlldywgb25jbGljaywgcHJlcGFyZWQpO1xuICAgIGxldCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgZWxlbWVudC50ZXh0Q29udGVudCA9IGNvbmYucGxhY2Vob2xkZXJUZXh0O1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCBzdGF0ZS5waHJhc2UoXCJmb2xkZWQgY29kZVwiKSk7XG4gICAgZWxlbWVudC50aXRsZSA9IHN0YXRlLnBocmFzZShcInVuZm9sZFwiKTtcbiAgICBlbGVtZW50LmNsYXNzTmFtZSA9IFwiY20tZm9sZFBsYWNlaG9sZGVyXCI7XG4gICAgZWxlbWVudC5vbmNsaWNrID0gb25jbGljaztcbiAgICByZXR1cm4gZWxlbWVudDtcbn1cbmNvbnN0IGZvbGRXaWRnZXQgPSB2aWV3LkRlY29yYXRpb24ucmVwbGFjZSh7IHdpZGdldDogbmV3IGNsYXNzIGV4dGVuZHMgdmlldy5XaWRnZXRUeXBlIHtcbiAgICAgICAgdG9ET00odmlldykgeyByZXR1cm4gd2lkZ2V0VG9ET00odmlldywgbnVsbCk7IH1cbiAgICB9IH0pO1xuY2xhc3MgUHJlcGFyZWRGb2xkV2lkZ2V0IGV4dGVuZHMgdmlldy5XaWRnZXRUeXBlIHtcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGVxKG90aGVyKSB7IHJldHVybiB0aGlzLnZhbHVlID09IG90aGVyLnZhbHVlOyB9XG4gICAgdG9ET00odmlldykgeyByZXR1cm4gd2lkZ2V0VG9ET00odmlldywgdGhpcy52YWx1ZSk7IH1cbn1cbmNvbnN0IGZvbGRHdXR0ZXJEZWZhdWx0cyA9IHtcbiAgICBvcGVuVGV4dDogXCLijIRcIixcbiAgICBjbG9zZWRUZXh0OiBcIuKAulwiLFxuICAgIG1hcmtlckRPTTogbnVsbCxcbiAgICBkb21FdmVudEhhbmRsZXJzOiB7fSxcbiAgICBmb2xkaW5nQ2hhbmdlZDogKCkgPT4gZmFsc2Vcbn07XG5jbGFzcyBGb2xkTWFya2VyIGV4dGVuZHMgdmlldy5HdXR0ZXJNYXJrZXIge1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZywgb3Blbikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgICAgICAgdGhpcy5vcGVuID0gb3BlbjtcbiAgICB9XG4gICAgZXEob3RoZXIpIHsgcmV0dXJuIHRoaXMuY29uZmlnID09IG90aGVyLmNvbmZpZyAmJiB0aGlzLm9wZW4gPT0gb3RoZXIub3BlbjsgfVxuICAgIHRvRE9NKHZpZXcpIHtcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLm1hcmtlckRPTSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy5tYXJrZXJET00odGhpcy5vcGVuKTtcbiAgICAgICAgbGV0IHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgc3Bhbi50ZXh0Q29udGVudCA9IHRoaXMub3BlbiA/IHRoaXMuY29uZmlnLm9wZW5UZXh0IDogdGhpcy5jb25maWcuY2xvc2VkVGV4dDtcbiAgICAgICAgc3Bhbi50aXRsZSA9IHZpZXcuc3RhdGUucGhyYXNlKHRoaXMub3BlbiA/IFwiRm9sZCBsaW5lXCIgOiBcIlVuZm9sZCBsaW5lXCIpO1xuICAgICAgICByZXR1cm4gc3BhbjtcbiAgICB9XG59XG4vKipcbkNyZWF0ZSBhbiBleHRlbnNpb24gdGhhdCByZWdpc3RlcnMgYSBmb2xkIGd1dHRlciwgd2hpY2ggc2hvd3MgYVxuZm9sZCBzdGF0dXMgaW5kaWNhdG9yIGJlZm9yZSBmb2xkYWJsZSBsaW5lcyAod2hpY2ggY2FuIGJlIGNsaWNrZWRcbnRvIGZvbGQgb3IgdW5mb2xkIHRoZSBsaW5lKS5cbiovXG5mdW5jdGlvbiBmb2xkR3V0dGVyKGNvbmZpZyA9IHt9KSB7XG4gICAgbGV0IGZ1bGxDb25maWcgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGZvbGRHdXR0ZXJEZWZhdWx0cyksIGNvbmZpZyk7XG4gICAgbGV0IGNhbkZvbGQgPSBuZXcgRm9sZE1hcmtlcihmdWxsQ29uZmlnLCB0cnVlKSwgY2FuVW5mb2xkID0gbmV3IEZvbGRNYXJrZXIoZnVsbENvbmZpZywgZmFsc2UpO1xuICAgIGxldCBtYXJrZXJzID0gdmlldy5WaWV3UGx1Z2luLmZyb21DbGFzcyhjbGFzcyB7XG4gICAgICAgIGNvbnN0cnVjdG9yKHZpZXcpIHtcbiAgICAgICAgICAgIHRoaXMuZnJvbSA9IHZpZXcudmlld3BvcnQuZnJvbTtcbiAgICAgICAgICAgIHRoaXMubWFya2VycyA9IHRoaXMuYnVpbGRNYXJrZXJzKHZpZXcpO1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZSh1cGRhdGUpIHtcbiAgICAgICAgICAgIGlmICh1cGRhdGUuZG9jQ2hhbmdlZCB8fCB1cGRhdGUudmlld3BvcnRDaGFuZ2VkIHx8XG4gICAgICAgICAgICAgICAgdXBkYXRlLnN0YXJ0U3RhdGUuZmFjZXQobGFuZ3VhZ2UpICE9IHVwZGF0ZS5zdGF0ZS5mYWNldChsYW5ndWFnZSkgfHxcbiAgICAgICAgICAgICAgICB1cGRhdGUuc3RhcnRTdGF0ZS5maWVsZChmb2xkU3RhdGUsIGZhbHNlKSAhPSB1cGRhdGUuc3RhdGUuZmllbGQoZm9sZFN0YXRlLCBmYWxzZSkgfHxcbiAgICAgICAgICAgICAgICBzeW50YXhUcmVlKHVwZGF0ZS5zdGFydFN0YXRlKSAhPSBzeW50YXhUcmVlKHVwZGF0ZS5zdGF0ZSkgfHxcbiAgICAgICAgICAgICAgICBmdWxsQ29uZmlnLmZvbGRpbmdDaGFuZ2VkKHVwZGF0ZSkpXG4gICAgICAgICAgICAgICAgdGhpcy5tYXJrZXJzID0gdGhpcy5idWlsZE1hcmtlcnModXBkYXRlLnZpZXcpO1xuICAgICAgICB9XG4gICAgICAgIGJ1aWxkTWFya2Vycyh2aWV3KSB7XG4gICAgICAgICAgICBsZXQgYnVpbGRlciA9IG5ldyBzdGF0ZS5SYW5nZVNldEJ1aWxkZXIoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGxpbmUgb2Ygdmlldy52aWV3cG9ydExpbmVCbG9ja3MpIHtcbiAgICAgICAgICAgICAgICBsZXQgbWFyayA9IGZpbmRGb2xkKHZpZXcuc3RhdGUsIGxpbmUuZnJvbSwgbGluZS50bykgPyBjYW5VbmZvbGRcbiAgICAgICAgICAgICAgICAgICAgOiBmb2xkYWJsZSh2aWV3LnN0YXRlLCBsaW5lLmZyb20sIGxpbmUudG8pID8gY2FuRm9sZCA6IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKG1hcmspXG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkZXIuYWRkKGxpbmUuZnJvbSwgbGluZS5mcm9tLCBtYXJrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBidWlsZGVyLmZpbmlzaCgpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgbGV0IHsgZG9tRXZlbnRIYW5kbGVycyB9ID0gZnVsbENvbmZpZztcbiAgICByZXR1cm4gW1xuICAgICAgICBtYXJrZXJzLFxuICAgICAgICB2aWV3Lmd1dHRlcih7XG4gICAgICAgICAgICBjbGFzczogXCJjbS1mb2xkR3V0dGVyXCIsXG4gICAgICAgICAgICBtYXJrZXJzKHZpZXcpIHsgdmFyIF9hOyByZXR1cm4gKChfYSA9IHZpZXcucGx1Z2luKG1hcmtlcnMpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubWFya2VycykgfHwgc3RhdGUuUmFuZ2VTZXQuZW1wdHk7IH0sXG4gICAgICAgICAgICBpbml0aWFsU3BhY2VyKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRm9sZE1hcmtlcihmdWxsQ29uZmlnLCBmYWxzZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZG9tRXZlbnRIYW5kbGVyczogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBkb21FdmVudEhhbmRsZXJzKSwgeyBjbGljazogKHZpZXcsIGxpbmUsIGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkb21FdmVudEhhbmRsZXJzLmNsaWNrICYmIGRvbUV2ZW50SGFuZGxlcnMuY2xpY2sodmlldywgbGluZSwgZXZlbnQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGxldCBmb2xkZWQgPSBmaW5kRm9sZCh2aWV3LnN0YXRlLCBsaW5lLmZyb20sIGxpbmUudG8pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZm9sZGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3LmRpc3BhdGNoKHsgZWZmZWN0czogdW5mb2xkRWZmZWN0Lm9mKGZvbGRlZCkgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsZXQgcmFuZ2UgPSBmb2xkYWJsZSh2aWV3LnN0YXRlLCBsaW5lLmZyb20sIGxpbmUudG8pO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXcuZGlzcGF0Y2goeyBlZmZlY3RzOiBmb2xkRWZmZWN0Lm9mKHJhbmdlKSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9IH0pXG4gICAgICAgIH0pLFxuICAgICAgICBjb2RlRm9sZGluZygpXG4gICAgXTtcbn1cbmNvbnN0IGJhc2VUaGVtZSQxID0gdmlldy5FZGl0b3JWaWV3LmJhc2VUaGVtZSh7XG4gICAgXCIuY20tZm9sZFBsYWNlaG9sZGVyXCI6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcIiNlZWVcIixcbiAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCAjZGRkXCIsXG4gICAgICAgIGNvbG9yOiBcIiM4ODhcIixcbiAgICAgICAgYm9yZGVyUmFkaXVzOiBcIi4yZW1cIixcbiAgICAgICAgbWFyZ2luOiBcIjAgMXB4XCIsXG4gICAgICAgIHBhZGRpbmc6IFwiMCAxcHhcIixcbiAgICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIlxuICAgIH0sXG4gICAgXCIuY20tZm9sZEd1dHRlciBzcGFuXCI6IHtcbiAgICAgICAgcGFkZGluZzogXCIwIDFweFwiLFxuICAgICAgICBjdXJzb3I6IFwicG9pbnRlclwiXG4gICAgfVxufSk7XG5cbi8qKlxuQSBoaWdobGlnaHQgc3R5bGUgYXNzb2NpYXRlcyBDU1Mgc3R5bGVzIHdpdGggaGlnbGlnaHRpbmdcblt0YWdzXShodHRwczovL2xlemVyLmNvZGVtaXJyb3IubmV0L2RvY3MvcmVmI2hpZ2hsaWdodC5UYWcpLlxuKi9cbmNsYXNzIEhpZ2hsaWdodFN0eWxlIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICBUaGUgdGFnIHN0eWxlcyB1c2VkIHRvIGNyZWF0ZSB0aGlzIGhpZ2hsaWdodCBzdHlsZS5cbiAgICAqL1xuICAgIHNwZWNzLCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuc3BlY3MgPSBzcGVjcztcbiAgICAgICAgbGV0IG1vZFNwZWM7XG4gICAgICAgIGZ1bmN0aW9uIGRlZihzcGVjKSB7XG4gICAgICAgICAgICBsZXQgY2xzID0gc3R5bGVNb2QuU3R5bGVNb2R1bGUubmV3TmFtZSgpO1xuICAgICAgICAgICAgKG1vZFNwZWMgfHwgKG1vZFNwZWMgPSBPYmplY3QuY3JlYXRlKG51bGwpKSlbXCIuXCIgKyBjbHNdID0gc3BlYztcbiAgICAgICAgICAgIHJldHVybiBjbHM7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWxsID0gdHlwZW9mIG9wdGlvbnMuYWxsID09IFwic3RyaW5nXCIgPyBvcHRpb25zLmFsbCA6IG9wdGlvbnMuYWxsID8gZGVmKG9wdGlvbnMuYWxsKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3Qgc2NvcGVPcHQgPSBvcHRpb25zLnNjb3BlO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGVPcHQgaW5zdGFuY2VvZiBMYW5ndWFnZSA/ICh0eXBlKSA9PiB0eXBlLnByb3AobGFuZ3VhZ2VEYXRhUHJvcCkgPT0gc2NvcGVPcHQuZGF0YVxuICAgICAgICAgICAgOiBzY29wZU9wdCA/ICh0eXBlKSA9PiB0eXBlID09IHNjb3BlT3B0IDogdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnN0eWxlID0gaGlnaGxpZ2h0LnRhZ0hpZ2hsaWdodGVyKHNwZWNzLm1hcChzdHlsZSA9PiAoe1xuICAgICAgICAgICAgdGFnOiBzdHlsZS50YWcsXG4gICAgICAgICAgICBjbGFzczogc3R5bGUuY2xhc3MgfHwgZGVmKE9iamVjdC5hc3NpZ24oe30sIHN0eWxlLCB7IHRhZzogbnVsbCB9KSlcbiAgICAgICAgfSkpLCB7XG4gICAgICAgICAgICBhbGwsXG4gICAgICAgIH0pLnN0eWxlO1xuICAgICAgICB0aGlzLm1vZHVsZSA9IG1vZFNwZWMgPyBuZXcgc3R5bGVNb2QuU3R5bGVNb2R1bGUobW9kU3BlYykgOiBudWxsO1xuICAgICAgICB0aGlzLnRoZW1lVHlwZSA9IG9wdGlvbnMudGhlbWVUeXBlO1xuICAgIH1cbiAgICAvKipcbiAgICBDcmVhdGUgYSBoaWdobGlnaHRlciBzdHlsZSB0aGF0IGFzc29jaWF0ZXMgdGhlIGdpdmVuIHN0eWxlcyB0b1xuICAgIHRoZSBnaXZlbiB0YWdzLiBUaGUgc3BlY3MgbXVzdCBiZSBvYmplY3RzIHRoYXQgaG9sZCBhIHN0eWxlIHRhZ1xuICAgIG9yIGFycmF5IG9mIHRhZ3MgaW4gdGhlaXIgYHRhZ2AgcHJvcGVydHksIGFuZCBlaXRoZXIgYSBzaW5nbGVcbiAgICBgY2xhc3NgIHByb3BlcnR5IHByb3ZpZGluZyBhIHN0YXRpYyBDU1MgY2xhc3MgKGZvciBoaWdobGlnaHRlclxuICAgIHRoYXQgcmVseSBvbiBleHRlcm5hbCBzdHlsaW5nKSwgb3IgYVxuICAgIFtgc3R5bGUtbW9kYF0oaHR0cHM6Ly9naXRodWIuY29tL21hcmlqbmgvc3R5bGUtbW9kI2RvY3VtZW50YXRpb24pLXN0eWxlXG4gICAgc2V0IG9mIENTUyBwcm9wZXJ0aWVzICh3aGljaCBkZWZpbmUgdGhlIHN0eWxpbmcgZm9yIHRob3NlIHRhZ3MpLlxuICAgIFxuICAgIFRoZSBDU1MgcnVsZXMgY3JlYXRlZCBmb3IgYSBoaWdobGlnaHRlciB3aWxsIGJlIGVtaXR0ZWQgaW4gdGhlXG4gICAgb3JkZXIgb2YgdGhlIHNwZWMncyBwcm9wZXJ0aWVzLiBUaGF0IG1lYW5zIHRoYXQgZm9yIGVsZW1lbnRzIHRoYXRcbiAgICBoYXZlIG11bHRpcGxlIHRhZ3MgYXNzb2NpYXRlZCB3aXRoIHRoZW0sIHN0eWxlcyBkZWZpbmVkIGZ1cnRoZXJcbiAgICBkb3duIGluIHRoZSBsaXN0IHdpbGwgaGF2ZSBhIGhpZ2hlciBDU1MgcHJlY2VkZW5jZSB0aGFuIHN0eWxlc1xuICAgIGRlZmluZWQgZWFybGllci5cbiAgICAqL1xuICAgIHN0YXRpYyBkZWZpbmUoc3BlY3MsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBIaWdobGlnaHRTdHlsZShzcGVjcywgb3B0aW9ucyB8fCB7fSk7XG4gICAgfVxufVxuY29uc3QgaGlnaGxpZ2h0ZXJGYWNldCA9IHN0YXRlLkZhY2V0LmRlZmluZSgpO1xuY29uc3QgZmFsbGJhY2tIaWdobGlnaHRlciA9IHN0YXRlLkZhY2V0LmRlZmluZSh7XG4gICAgY29tYmluZSh2YWx1ZXMpIHsgcmV0dXJuIHZhbHVlcy5sZW5ndGggPyBbdmFsdWVzWzBdXSA6IG51bGw7IH1cbn0pO1xuZnVuY3Rpb24gZ2V0SGlnaGxpZ2h0ZXJzKHN0YXRlKSB7XG4gICAgbGV0IG1haW4gPSBzdGF0ZS5mYWNldChoaWdobGlnaHRlckZhY2V0KTtcbiAgICByZXR1cm4gbWFpbi5sZW5ndGggPyBtYWluIDogc3RhdGUuZmFjZXQoZmFsbGJhY2tIaWdobGlnaHRlcik7XG59XG4vKipcbldyYXAgYSBoaWdobGlnaHRlciBpbiBhbiBlZGl0b3IgZXh0ZW5zaW9uIHRoYXQgdXNlcyBpdCB0byBhcHBseVxuc3ludGF4IGhpZ2hsaWdodGluZyB0byB0aGUgZWRpdG9yIGNvbnRlbnQuXG5cbldoZW4gbXVsdGlwbGUgKG5vbi1mYWxsYmFjaykgc3R5bGVzIGFyZSBwcm92aWRlZCwgdGhlIHN0eWxpbmdcbmFwcGxpZWQgaXMgdGhlIHVuaW9uIG9mIHRoZSBjbGFzc2VzIHRoZXkgZW1pdC5cbiovXG5mdW5jdGlvbiBzeW50YXhIaWdobGlnaHRpbmcoaGlnaGxpZ2h0ZXIsIG9wdGlvbnMpIHtcbiAgICBsZXQgZXh0ID0gW3RyZWVIaWdobGlnaHRlcl0sIHRoZW1lVHlwZTtcbiAgICBpZiAoaGlnaGxpZ2h0ZXIgaW5zdGFuY2VvZiBIaWdobGlnaHRTdHlsZSkge1xuICAgICAgICBpZiAoaGlnaGxpZ2h0ZXIubW9kdWxlKVxuICAgICAgICAgICAgZXh0LnB1c2godmlldy5FZGl0b3JWaWV3LnN0eWxlTW9kdWxlLm9mKGhpZ2hsaWdodGVyLm1vZHVsZSkpO1xuICAgICAgICB0aGVtZVR5cGUgPSBoaWdobGlnaHRlci50aGVtZVR5cGU7XG4gICAgfVxuICAgIGlmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmFsbGJhY2spXG4gICAgICAgIGV4dC5wdXNoKGZhbGxiYWNrSGlnaGxpZ2h0ZXIub2YoaGlnaGxpZ2h0ZXIpKTtcbiAgICBlbHNlIGlmICh0aGVtZVR5cGUpXG4gICAgICAgIGV4dC5wdXNoKGhpZ2hsaWdodGVyRmFjZXQuY29tcHV0ZU4oW3ZpZXcuRWRpdG9yVmlldy5kYXJrVGhlbWVdLCBzdGF0ZSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gc3RhdGUuZmFjZXQodmlldy5FZGl0b3JWaWV3LmRhcmtUaGVtZSkgPT0gKHRoZW1lVHlwZSA9PSBcImRhcmtcIikgPyBbaGlnaGxpZ2h0ZXJdIDogW107XG4gICAgICAgIH0pKTtcbiAgICBlbHNlXG4gICAgICAgIGV4dC5wdXNoKGhpZ2hsaWdodGVyRmFjZXQub2YoaGlnaGxpZ2h0ZXIpKTtcbiAgICByZXR1cm4gZXh0O1xufVxuLyoqXG5SZXR1cm5zIHRoZSBDU1MgY2xhc3NlcyAoaWYgYW55KSB0aGF0IHRoZSBoaWdobGlnaHRlcnMgYWN0aXZlIGluXG50aGUgc3RhdGUgd291bGQgYXNzaWduIHRvIHRoZSBnaXZlbiBzdHlsZVxuW3RhZ3NdKGh0dHBzOi8vbGV6ZXIuY29kZW1pcnJvci5uZXQvZG9jcy9yZWYjaGlnaGxpZ2h0LlRhZykgYW5kXG4ob3B0aW9uYWwpIGxhbmd1YWdlXG5bc2NvcGVdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jbGFuZ3VhZ2UuSGlnaGxpZ2h0U3R5bGVeZGVmaW5lXm9wdGlvbnMuc2NvcGUpLlxuKi9cbmZ1bmN0aW9uIGhpZ2hsaWdodGluZ0ZvcihzdGF0ZSwgdGFncywgc2NvcGUpIHtcbiAgICBsZXQgaGlnaGxpZ2h0ZXJzID0gZ2V0SGlnaGxpZ2h0ZXJzKHN0YXRlKTtcbiAgICBsZXQgcmVzdWx0ID0gbnVsbDtcbiAgICBpZiAoaGlnaGxpZ2h0ZXJzKVxuICAgICAgICBmb3IgKGxldCBoaWdobGlnaHRlciBvZiBoaWdobGlnaHRlcnMpIHtcbiAgICAgICAgICAgIGlmICghaGlnaGxpZ2h0ZXIuc2NvcGUgfHwgc2NvcGUgJiYgaGlnaGxpZ2h0ZXIuc2NvcGUoc2NvcGUpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNscyA9IGhpZ2hsaWdodGVyLnN0eWxlKHRhZ3MpO1xuICAgICAgICAgICAgICAgIGlmIChjbHMpXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCA/IHJlc3VsdCArIFwiIFwiICsgY2xzIDogY2xzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmNsYXNzIFRyZWVIaWdobGlnaHRlciB7XG4gICAgY29uc3RydWN0b3Iodmlldykge1xuICAgICAgICB0aGlzLm1hcmtDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMudHJlZSA9IHN5bnRheFRyZWUodmlldy5zdGF0ZSk7XG4gICAgICAgIHRoaXMuZGVjb3JhdGlvbnMgPSB0aGlzLmJ1aWxkRGVjbyh2aWV3LCBnZXRIaWdobGlnaHRlcnModmlldy5zdGF0ZSkpO1xuICAgICAgICB0aGlzLmRlY29yYXRlZFRvID0gdmlldy52aWV3cG9ydC50bztcbiAgICB9XG4gICAgdXBkYXRlKHVwZGF0ZSkge1xuICAgICAgICBsZXQgdHJlZSA9IHN5bnRheFRyZWUodXBkYXRlLnN0YXRlKSwgaGlnaGxpZ2h0ZXJzID0gZ2V0SGlnaGxpZ2h0ZXJzKHVwZGF0ZS5zdGF0ZSk7XG4gICAgICAgIGxldCBzdHlsZUNoYW5nZSA9IGhpZ2hsaWdodGVycyAhPSBnZXRIaWdobGlnaHRlcnModXBkYXRlLnN0YXJ0U3RhdGUpO1xuICAgICAgICBsZXQgeyB2aWV3cG9ydCB9ID0gdXBkYXRlLnZpZXcsIGRlY29yYXRlZFRvTWFwcGVkID0gdXBkYXRlLmNoYW5nZXMubWFwUG9zKHRoaXMuZGVjb3JhdGVkVG8sIDEpO1xuICAgICAgICBpZiAodHJlZS5sZW5ndGggPCB2aWV3cG9ydC50byAmJiAhc3R5bGVDaGFuZ2UgJiYgdHJlZS50eXBlID09IHRoaXMudHJlZS50eXBlICYmIGRlY29yYXRlZFRvTWFwcGVkID49IHZpZXdwb3J0LnRvKSB7XG4gICAgICAgICAgICB0aGlzLmRlY29yYXRpb25zID0gdGhpcy5kZWNvcmF0aW9ucy5tYXAodXBkYXRlLmNoYW5nZXMpO1xuICAgICAgICAgICAgdGhpcy5kZWNvcmF0ZWRUbyA9IGRlY29yYXRlZFRvTWFwcGVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRyZWUgIT0gdGhpcy50cmVlIHx8IHVwZGF0ZS52aWV3cG9ydENoYW5nZWQgfHwgc3R5bGVDaGFuZ2UpIHtcbiAgICAgICAgICAgIHRoaXMudHJlZSA9IHRyZWU7XG4gICAgICAgICAgICB0aGlzLmRlY29yYXRpb25zID0gdGhpcy5idWlsZERlY28odXBkYXRlLnZpZXcsIGhpZ2hsaWdodGVycyk7XG4gICAgICAgICAgICB0aGlzLmRlY29yYXRlZFRvID0gdmlld3BvcnQudG87XG4gICAgICAgIH1cbiAgICB9XG4gICAgYnVpbGREZWNvKHZpZXckMSwgaGlnaGxpZ2h0ZXJzKSB7XG4gICAgICAgIGlmICghaGlnaGxpZ2h0ZXJzIHx8ICF0aGlzLnRyZWUubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIHZpZXcuRGVjb3JhdGlvbi5ub25lO1xuICAgICAgICBsZXQgYnVpbGRlciA9IG5ldyBzdGF0ZS5SYW5nZVNldEJ1aWxkZXIoKTtcbiAgICAgICAgZm9yIChsZXQgeyBmcm9tLCB0byB9IG9mIHZpZXckMS52aXNpYmxlUmFuZ2VzKSB7XG4gICAgICAgICAgICBoaWdobGlnaHQuaGlnaGxpZ2h0VHJlZSh0aGlzLnRyZWUsIGhpZ2hsaWdodGVycywgKGZyb20sIHRvLCBzdHlsZSkgPT4ge1xuICAgICAgICAgICAgICAgIGJ1aWxkZXIuYWRkKGZyb20sIHRvLCB0aGlzLm1hcmtDYWNoZVtzdHlsZV0gfHwgKHRoaXMubWFya0NhY2hlW3N0eWxlXSA9IHZpZXcuRGVjb3JhdGlvbi5tYXJrKHsgY2xhc3M6IHN0eWxlIH0pKSk7XG4gICAgICAgICAgICB9LCBmcm9tLCB0byk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ1aWxkZXIuZmluaXNoKCk7XG4gICAgfVxufVxuY29uc3QgdHJlZUhpZ2hsaWdodGVyID0gc3RhdGUuUHJlYy5oaWdoKHZpZXcuVmlld1BsdWdpbi5mcm9tQ2xhc3MoVHJlZUhpZ2hsaWdodGVyLCB7XG4gICAgZGVjb3JhdGlvbnM6IHYgPT4gdi5kZWNvcmF0aW9uc1xufSkpO1xuLyoqXG5BIGRlZmF1bHQgaGlnaGxpZ2h0IHN0eWxlICh3b3JrcyB3ZWxsIHdpdGggbGlnaHQgdGhlbWVzKS5cbiovXG5jb25zdCBkZWZhdWx0SGlnaGxpZ2h0U3R5bGUgPSBIaWdobGlnaHRTdHlsZS5kZWZpbmUoW1xuICAgIHsgdGFnOiBoaWdobGlnaHQudGFncy5tZXRhLFxuICAgICAgICBjb2xvcjogXCIjNDA0NzQwXCIgfSxcbiAgICB7IHRhZzogaGlnaGxpZ2h0LnRhZ3MubGluayxcbiAgICAgICAgdGV4dERlY29yYXRpb246IFwidW5kZXJsaW5lXCIgfSxcbiAgICB7IHRhZzogaGlnaGxpZ2h0LnRhZ3MuaGVhZGluZyxcbiAgICAgICAgdGV4dERlY29yYXRpb246IFwidW5kZXJsaW5lXCIsXG4gICAgICAgIGZvbnRXZWlnaHQ6IFwiYm9sZFwiIH0sXG4gICAgeyB0YWc6IGhpZ2hsaWdodC50YWdzLmVtcGhhc2lzLFxuICAgICAgICBmb250U3R5bGU6IFwiaXRhbGljXCIgfSxcbiAgICB7IHRhZzogaGlnaGxpZ2h0LnRhZ3Muc3Ryb25nLFxuICAgICAgICBmb250V2VpZ2h0OiBcImJvbGRcIiB9LFxuICAgIHsgdGFnOiBoaWdobGlnaHQudGFncy5zdHJpa2V0aHJvdWdoLFxuICAgICAgICB0ZXh0RGVjb3JhdGlvbjogXCJsaW5lLXRocm91Z2hcIiB9LFxuICAgIHsgdGFnOiBoaWdobGlnaHQudGFncy5rZXl3b3JkLFxuICAgICAgICBjb2xvcjogXCIjNzA4XCIgfSxcbiAgICB7IHRhZzogW2hpZ2hsaWdodC50YWdzLmF0b20sIGhpZ2hsaWdodC50YWdzLmJvb2wsIGhpZ2hsaWdodC50YWdzLnVybCwgaGlnaGxpZ2h0LnRhZ3MuY29udGVudFNlcGFyYXRvciwgaGlnaGxpZ2h0LnRhZ3MubGFiZWxOYW1lXSxcbiAgICAgICAgY29sb3I6IFwiIzIxOVwiIH0sXG4gICAgeyB0YWc6IFtoaWdobGlnaHQudGFncy5saXRlcmFsLCBoaWdobGlnaHQudGFncy5pbnNlcnRlZF0sXG4gICAgICAgIGNvbG9yOiBcIiMxNjRcIiB9LFxuICAgIHsgdGFnOiBbaGlnaGxpZ2h0LnRhZ3Muc3RyaW5nLCBoaWdobGlnaHQudGFncy5kZWxldGVkXSxcbiAgICAgICAgY29sb3I6IFwiI2ExMVwiIH0sXG4gICAgeyB0YWc6IFtoaWdobGlnaHQudGFncy5yZWdleHAsIGhpZ2hsaWdodC50YWdzLmVzY2FwZSwgaGlnaGxpZ2h0LnRhZ3Muc3BlY2lhbChoaWdobGlnaHQudGFncy5zdHJpbmcpXSxcbiAgICAgICAgY29sb3I6IFwiI2U0MFwiIH0sXG4gICAgeyB0YWc6IGhpZ2hsaWdodC50YWdzLmRlZmluaXRpb24oaGlnaGxpZ2h0LnRhZ3MudmFyaWFibGVOYW1lKSxcbiAgICAgICAgY29sb3I6IFwiIzAwZlwiIH0sXG4gICAgeyB0YWc6IGhpZ2hsaWdodC50YWdzLmxvY2FsKGhpZ2hsaWdodC50YWdzLnZhcmlhYmxlTmFtZSksXG4gICAgICAgIGNvbG9yOiBcIiMzMGFcIiB9LFxuICAgIHsgdGFnOiBbaGlnaGxpZ2h0LnRhZ3MudHlwZU5hbWUsIGhpZ2hsaWdodC50YWdzLm5hbWVzcGFjZV0sXG4gICAgICAgIGNvbG9yOiBcIiMwODVcIiB9LFxuICAgIHsgdGFnOiBoaWdobGlnaHQudGFncy5jbGFzc05hbWUsXG4gICAgICAgIGNvbG9yOiBcIiMxNjdcIiB9LFxuICAgIHsgdGFnOiBbaGlnaGxpZ2h0LnRhZ3Muc3BlY2lhbChoaWdobGlnaHQudGFncy52YXJpYWJsZU5hbWUpLCBoaWdobGlnaHQudGFncy5tYWNyb05hbWVdLFxuICAgICAgICBjb2xvcjogXCIjMjU2XCIgfSxcbiAgICB7IHRhZzogaGlnaGxpZ2h0LnRhZ3MuZGVmaW5pdGlvbihoaWdobGlnaHQudGFncy5wcm9wZXJ0eU5hbWUpLFxuICAgICAgICBjb2xvcjogXCIjMDBjXCIgfSxcbiAgICB7IHRhZzogaGlnaGxpZ2h0LnRhZ3MuY29tbWVudCxcbiAgICAgICAgY29sb3I6IFwiIzk0MFwiIH0sXG4gICAgeyB0YWc6IGhpZ2hsaWdodC50YWdzLmludmFsaWQsXG4gICAgICAgIGNvbG9yOiBcIiNmMDBcIiB9XG5dKTtcblxuY29uc3QgYmFzZVRoZW1lID0gdmlldy5FZGl0b3JWaWV3LmJhc2VUaGVtZSh7XG4gICAgXCImLmNtLWZvY3VzZWQgLmNtLW1hdGNoaW5nQnJhY2tldFwiOiB7IGJhY2tncm91bmRDb2xvcjogXCIjMzI4YzgyNTJcIiB9LFxuICAgIFwiJi5jbS1mb2N1c2VkIC5jbS1ub25tYXRjaGluZ0JyYWNrZXRcIjogeyBiYWNrZ3JvdW5kQ29sb3I6IFwiI2JiNTU1NTQ0XCIgfVxufSk7XG5jb25zdCBEZWZhdWx0U2NhbkRpc3QgPSAxMDAwMCwgRGVmYXVsdEJyYWNrZXRzID0gXCIoKVtde31cIjtcbmNvbnN0IGJyYWNrZXRNYXRjaGluZ0NvbmZpZyA9IHN0YXRlLkZhY2V0LmRlZmluZSh7XG4gICAgY29tYmluZShjb25maWdzKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZS5jb21iaW5lQ29uZmlnKGNvbmZpZ3MsIHtcbiAgICAgICAgICAgIGFmdGVyQ3Vyc29yOiB0cnVlLFxuICAgICAgICAgICAgYnJhY2tldHM6IERlZmF1bHRCcmFja2V0cyxcbiAgICAgICAgICAgIG1heFNjYW5EaXN0YW5jZTogRGVmYXVsdFNjYW5EaXN0LFxuICAgICAgICAgICAgcmVuZGVyTWF0Y2g6IGRlZmF1bHRSZW5kZXJNYXRjaFxuICAgICAgICB9KTtcbiAgICB9XG59KTtcbmNvbnN0IG1hdGNoaW5nTWFyayA9IHZpZXcuRGVjb3JhdGlvbi5tYXJrKHsgY2xhc3M6IFwiY20tbWF0Y2hpbmdCcmFja2V0XCIgfSksIG5vbm1hdGNoaW5nTWFyayA9IHZpZXcuRGVjb3JhdGlvbi5tYXJrKHsgY2xhc3M6IFwiY20tbm9ubWF0Y2hpbmdCcmFja2V0XCIgfSk7XG5mdW5jdGlvbiBkZWZhdWx0UmVuZGVyTWF0Y2gobWF0Y2gpIHtcbiAgICBsZXQgZGVjb3JhdGlvbnMgPSBbXTtcbiAgICBsZXQgbWFyayA9IG1hdGNoLm1hdGNoZWQgPyBtYXRjaGluZ01hcmsgOiBub25tYXRjaGluZ01hcms7XG4gICAgZGVjb3JhdGlvbnMucHVzaChtYXJrLnJhbmdlKG1hdGNoLnN0YXJ0LmZyb20sIG1hdGNoLnN0YXJ0LnRvKSk7XG4gICAgaWYgKG1hdGNoLmVuZClcbiAgICAgICAgZGVjb3JhdGlvbnMucHVzaChtYXJrLnJhbmdlKG1hdGNoLmVuZC5mcm9tLCBtYXRjaC5lbmQudG8pKTtcbiAgICByZXR1cm4gZGVjb3JhdGlvbnM7XG59XG5jb25zdCBicmFja2V0TWF0Y2hpbmdTdGF0ZSA9IHN0YXRlLlN0YXRlRmllbGQuZGVmaW5lKHtcbiAgICBjcmVhdGUoKSB7IHJldHVybiB2aWV3LkRlY29yYXRpb24ubm9uZTsgfSxcbiAgICB1cGRhdGUoZGVjbywgdHIpIHtcbiAgICAgICAgaWYgKCF0ci5kb2NDaGFuZ2VkICYmICF0ci5zZWxlY3Rpb24pXG4gICAgICAgICAgICByZXR1cm4gZGVjbztcbiAgICAgICAgbGV0IGRlY29yYXRpb25zID0gW107XG4gICAgICAgIGxldCBjb25maWcgPSB0ci5zdGF0ZS5mYWNldChicmFja2V0TWF0Y2hpbmdDb25maWcpO1xuICAgICAgICBmb3IgKGxldCByYW5nZSBvZiB0ci5zdGF0ZS5zZWxlY3Rpb24ucmFuZ2VzKSB7XG4gICAgICAgICAgICBpZiAoIXJhbmdlLmVtcHR5KVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgbGV0IG1hdGNoID0gbWF0Y2hCcmFja2V0cyh0ci5zdGF0ZSwgcmFuZ2UuaGVhZCwgLTEsIGNvbmZpZylcbiAgICAgICAgICAgICAgICB8fCAocmFuZ2UuaGVhZCA+IDAgJiYgbWF0Y2hCcmFja2V0cyh0ci5zdGF0ZSwgcmFuZ2UuaGVhZCAtIDEsIDEsIGNvbmZpZykpXG4gICAgICAgICAgICAgICAgfHwgKGNvbmZpZy5hZnRlckN1cnNvciAmJlxuICAgICAgICAgICAgICAgICAgICAobWF0Y2hCcmFja2V0cyh0ci5zdGF0ZSwgcmFuZ2UuaGVhZCwgMSwgY29uZmlnKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKHJhbmdlLmhlYWQgPCB0ci5zdGF0ZS5kb2MubGVuZ3RoICYmIG1hdGNoQnJhY2tldHModHIuc3RhdGUsIHJhbmdlLmhlYWQgKyAxLCAtMSwgY29uZmlnKSkpKTtcbiAgICAgICAgICAgIGlmIChtYXRjaClcbiAgICAgICAgICAgICAgICBkZWNvcmF0aW9ucyA9IGRlY29yYXRpb25zLmNvbmNhdChjb25maWcucmVuZGVyTWF0Y2gobWF0Y2gsIHRyLnN0YXRlKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZpZXcuRGVjb3JhdGlvbi5zZXQoZGVjb3JhdGlvbnMsIHRydWUpO1xuICAgIH0sXG4gICAgcHJvdmlkZTogZiA9PiB2aWV3LkVkaXRvclZpZXcuZGVjb3JhdGlvbnMuZnJvbShmKVxufSk7XG5jb25zdCBicmFja2V0TWF0Y2hpbmdVbmlxdWUgPSBbXG4gICAgYnJhY2tldE1hdGNoaW5nU3RhdGUsXG4gICAgYmFzZVRoZW1lXG5dO1xuLyoqXG5DcmVhdGUgYW4gZXh0ZW5zaW9uIHRoYXQgZW5hYmxlcyBicmFja2V0IG1hdGNoaW5nLiBXaGVuZXZlciB0aGVcbmN1cnNvciBpcyBuZXh0IHRvIGEgYnJhY2tldCwgdGhhdCBicmFja2V0IGFuZCB0aGUgb25lIGl0IG1hdGNoZXNcbmFyZSBoaWdobGlnaHRlZC4gT3IsIHdoZW4gbm8gbWF0Y2hpbmcgYnJhY2tldCBpcyBmb3VuZCwgYW5vdGhlclxuaGlnaGxpZ2h0aW5nIHN0eWxlIGlzIHVzZWQgdG8gaW5kaWNhdGUgdGhpcy5cbiovXG5mdW5jdGlvbiBicmFja2V0TWF0Y2hpbmcoY29uZmlnID0ge30pIHtcbiAgICByZXR1cm4gW2JyYWNrZXRNYXRjaGluZ0NvbmZpZy5vZihjb25maWcpLCBicmFja2V0TWF0Y2hpbmdVbmlxdWVdO1xufVxuLyoqXG5XaGVuIGxhcmdlciBzeW50YXggbm9kZXMsIHN1Y2ggYXMgSFRNTCB0YWdzLCBhcmUgbWFya2VkIGFzXG5vcGVuaW5nL2Nsb3NpbmcsIGl0IGNhbiBiZSBhIGJpdCBtZXNzeSB0byB0cmVhdCB0aGUgd2hvbGUgbm9kZSBhc1xuYSBtYXRjaGFibGUgYnJhY2tldC4gVGhpcyBub2RlIHByb3AgYWxsb3dzIHlvdSB0byBkZWZpbmUsIGZvciBzdWNoXG5hIG5vZGUsIGEg4oCYaGFuZGxl4oCZ4oCUdGhlIHBhcnQgb2YgdGhlIG5vZGUgdGhhdCBpcyBoaWdobGlnaHRlZCwgYW5kXG50aGF0IHRoZSBjdXJzb3IgbXVzdCBiZSBvbiB0byBhY3RpdmF0ZSBoaWdobGlnaHRpbmcgaW4gdGhlIGZpcnN0XG5wbGFjZS5cbiovXG5jb25zdCBicmFja2V0TWF0Y2hpbmdIYW5kbGUgPSBuZXcgY29tbW9uLk5vZGVQcm9wKCk7XG5mdW5jdGlvbiBtYXRjaGluZ05vZGVzKG5vZGUsIGRpciwgYnJhY2tldHMpIHtcbiAgICBsZXQgYnlQcm9wID0gbm9kZS5wcm9wKGRpciA8IDAgPyBjb21tb24uTm9kZVByb3Aub3BlbmVkQnkgOiBjb21tb24uTm9kZVByb3AuY2xvc2VkQnkpO1xuICAgIGlmIChieVByb3ApXG4gICAgICAgIHJldHVybiBieVByb3A7XG4gICAgaWYgKG5vZGUubmFtZS5sZW5ndGggPT0gMSkge1xuICAgICAgICBsZXQgaW5kZXggPSBicmFja2V0cy5pbmRleE9mKG5vZGUubmFtZSk7XG4gICAgICAgIGlmIChpbmRleCA+IC0xICYmIGluZGV4ICUgMiA9PSAoZGlyIDwgMCA/IDEgOiAwKSlcbiAgICAgICAgICAgIHJldHVybiBbYnJhY2tldHNbaW5kZXggKyBkaXJdXTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBmaW5kSGFuZGxlKG5vZGUpIHtcbiAgICBsZXQgaGFzSGFuZGxlID0gbm9kZS50eXBlLnByb3AoYnJhY2tldE1hdGNoaW5nSGFuZGxlKTtcbiAgICByZXR1cm4gaGFzSGFuZGxlID8gaGFzSGFuZGxlKG5vZGUubm9kZSkgOiBub2RlO1xufVxuLyoqXG5GaW5kIHRoZSBtYXRjaGluZyBicmFja2V0IGZvciB0aGUgdG9rZW4gYXQgYHBvc2AsIHNjYW5uaW5nXG5kaXJlY3Rpb24gYGRpcmAuIE9ubHkgdGhlIGBicmFja2V0c2AgYW5kIGBtYXhTY2FuRGlzdGFuY2VgXG5wcm9wZXJ0aWVzIGFyZSB1c2VkIGZyb20gYGNvbmZpZ2AsIGlmIGdpdmVuLiBSZXR1cm5zIG51bGwgaWYgbm9cbmJyYWNrZXQgd2FzIGZvdW5kIGF0IGBwb3NgLCBvciBhIG1hdGNoIHJlc3VsdCBvdGhlcndpc2UuXG4qL1xuZnVuY3Rpb24gbWF0Y2hCcmFja2V0cyhzdGF0ZSwgcG9zLCBkaXIsIGNvbmZpZyA9IHt9KSB7XG4gICAgbGV0IG1heFNjYW5EaXN0YW5jZSA9IGNvbmZpZy5tYXhTY2FuRGlzdGFuY2UgfHwgRGVmYXVsdFNjYW5EaXN0LCBicmFja2V0cyA9IGNvbmZpZy5icmFja2V0cyB8fCBEZWZhdWx0QnJhY2tldHM7XG4gICAgbGV0IHRyZWUgPSBzeW50YXhUcmVlKHN0YXRlKSwgbm9kZSA9IHRyZWUucmVzb2x2ZUlubmVyKHBvcywgZGlyKTtcbiAgICBmb3IgKGxldCBjdXIgPSBub2RlOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnQpIHtcbiAgICAgICAgbGV0IG1hdGNoZXMgPSBtYXRjaGluZ05vZGVzKGN1ci50eXBlLCBkaXIsIGJyYWNrZXRzKTtcbiAgICAgICAgaWYgKG1hdGNoZXMgJiYgY3VyLmZyb20gPCBjdXIudG8pIHtcbiAgICAgICAgICAgIGxldCBoYW5kbGUgPSBmaW5kSGFuZGxlKGN1cik7XG4gICAgICAgICAgICBpZiAoaGFuZGxlICYmIChkaXIgPiAwID8gcG9zID49IGhhbmRsZS5mcm9tICYmIHBvcyA8IGhhbmRsZS50byA6IHBvcyA+IGhhbmRsZS5mcm9tICYmIHBvcyA8PSBoYW5kbGUudG8pKVxuICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaE1hcmtlZEJyYWNrZXRzKHN0YXRlLCBwb3MsIGRpciwgY3VyLCBoYW5kbGUsIG1hdGNoZXMsIGJyYWNrZXRzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWF0Y2hQbGFpbkJyYWNrZXRzKHN0YXRlLCBwb3MsIGRpciwgdHJlZSwgbm9kZS50eXBlLCBtYXhTY2FuRGlzdGFuY2UsIGJyYWNrZXRzKTtcbn1cbmZ1bmN0aW9uIG1hdGNoTWFya2VkQnJhY2tldHMoX3N0YXRlLCBfcG9zLCBkaXIsIHRva2VuLCBoYW5kbGUsIG1hdGNoaW5nLCBicmFja2V0cykge1xuICAgIGxldCBwYXJlbnQgPSB0b2tlbi5wYXJlbnQsIGZpcnN0VG9rZW4gPSB7IGZyb206IGhhbmRsZS5mcm9tLCB0bzogaGFuZGxlLnRvIH07XG4gICAgbGV0IGRlcHRoID0gMCwgY3Vyc29yID0gcGFyZW50ID09PSBudWxsIHx8IHBhcmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyZW50LmN1cnNvcigpO1xuICAgIGlmIChjdXJzb3IgJiYgKGRpciA8IDAgPyBjdXJzb3IuY2hpbGRCZWZvcmUodG9rZW4uZnJvbSkgOiBjdXJzb3IuY2hpbGRBZnRlcih0b2tlbi50bykpKVxuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpZiAoZGlyIDwgMCA/IGN1cnNvci50byA8PSB0b2tlbi5mcm9tIDogY3Vyc29yLmZyb20gPj0gdG9rZW4udG8pIHtcbiAgICAgICAgICAgICAgICBpZiAoZGVwdGggPT0gMCAmJiBtYXRjaGluZy5pbmRleE9mKGN1cnNvci50eXBlLm5hbWUpID4gLTEgJiYgY3Vyc29yLmZyb20gPCBjdXJzb3IudG8pIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVuZEhhbmRsZSA9IGZpbmRIYW5kbGUoY3Vyc29yKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IGZpcnN0VG9rZW4sIGVuZDogZW5kSGFuZGxlID8geyBmcm9tOiBlbmRIYW5kbGUuZnJvbSwgdG86IGVuZEhhbmRsZS50byB9IDogdW5kZWZpbmVkLCBtYXRjaGVkOiB0cnVlIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1hdGNoaW5nTm9kZXMoY3Vyc29yLnR5cGUsIGRpciwgYnJhY2tldHMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlcHRoKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1hdGNoaW5nTm9kZXMoY3Vyc29yLnR5cGUsIC1kaXIsIGJyYWNrZXRzKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVwdGggPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGVuZEhhbmRsZSA9IGZpbmRIYW5kbGUoY3Vyc29yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IGZpcnN0VG9rZW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBlbmRIYW5kbGUgJiYgZW5kSGFuZGxlLmZyb20gPCBlbmRIYW5kbGUudG8gPyB7IGZyb206IGVuZEhhbmRsZS5mcm9tLCB0bzogZW5kSGFuZGxlLnRvIH0gOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlZDogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZGVwdGgtLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKGRpciA8IDAgPyBjdXJzb3IucHJldlNpYmxpbmcoKSA6IGN1cnNvci5uZXh0U2libGluZygpKTtcbiAgICByZXR1cm4geyBzdGFydDogZmlyc3RUb2tlbiwgbWF0Y2hlZDogZmFsc2UgfTtcbn1cbmZ1bmN0aW9uIG1hdGNoUGxhaW5CcmFja2V0cyhzdGF0ZSwgcG9zLCBkaXIsIHRyZWUsIHRva2VuVHlwZSwgbWF4U2NhbkRpc3RhbmNlLCBicmFja2V0cykge1xuICAgIGxldCBzdGFydENoID0gZGlyIDwgMCA/IHN0YXRlLnNsaWNlRG9jKHBvcyAtIDEsIHBvcykgOiBzdGF0ZS5zbGljZURvYyhwb3MsIHBvcyArIDEpO1xuICAgIGxldCBicmFja2V0ID0gYnJhY2tldHMuaW5kZXhPZihzdGFydENoKTtcbiAgICBpZiAoYnJhY2tldCA8IDAgfHwgKGJyYWNrZXQgJSAyID09IDApICE9IChkaXIgPiAwKSlcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgbGV0IHN0YXJ0VG9rZW4gPSB7IGZyb206IGRpciA8IDAgPyBwb3MgLSAxIDogcG9zLCB0bzogZGlyID4gMCA/IHBvcyArIDEgOiBwb3MgfTtcbiAgICBsZXQgaXRlciA9IHN0YXRlLmRvYy5pdGVyUmFuZ2UocG9zLCBkaXIgPiAwID8gc3RhdGUuZG9jLmxlbmd0aCA6IDApLCBkZXB0aCA9IDA7XG4gICAgZm9yIChsZXQgZGlzdGFuY2UgPSAwOyAhKGl0ZXIubmV4dCgpKS5kb25lICYmIGRpc3RhbmNlIDw9IG1heFNjYW5EaXN0YW5jZTspIHtcbiAgICAgICAgbGV0IHRleHQgPSBpdGVyLnZhbHVlO1xuICAgICAgICBpZiAoZGlyIDwgMClcbiAgICAgICAgICAgIGRpc3RhbmNlICs9IHRleHQubGVuZ3RoO1xuICAgICAgICBsZXQgYmFzZVBvcyA9IHBvcyArIGRpc3RhbmNlICogZGlyO1xuICAgICAgICBmb3IgKGxldCBwb3MgPSBkaXIgPiAwID8gMCA6IHRleHQubGVuZ3RoIC0gMSwgZW5kID0gZGlyID4gMCA/IHRleHQubGVuZ3RoIDogLTE7IHBvcyAhPSBlbmQ7IHBvcyArPSBkaXIpIHtcbiAgICAgICAgICAgIGxldCBmb3VuZCA9IGJyYWNrZXRzLmluZGV4T2YodGV4dFtwb3NdKTtcbiAgICAgICAgICAgIGlmIChmb3VuZCA8IDAgfHwgdHJlZS5yZXNvbHZlSW5uZXIoYmFzZVBvcyArIHBvcywgMSkudHlwZSAhPSB0b2tlblR5cGUpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBpZiAoKGZvdW5kICUgMiA9PSAwKSA9PSAoZGlyID4gMCkpIHtcbiAgICAgICAgICAgICAgICBkZXB0aCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZGVwdGggPT0gMSkgeyAvLyBDbG9zaW5nXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0VG9rZW4sIGVuZDogeyBmcm9tOiBiYXNlUG9zICsgcG9zLCB0bzogYmFzZVBvcyArIHBvcyArIDEgfSwgbWF0Y2hlZDogKGZvdW5kID4+IDEpID09IChicmFja2V0ID4+IDEpIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZXB0aC0tO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkaXIgPiAwKVxuICAgICAgICAgICAgZGlzdGFuY2UgKz0gdGV4dC5sZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiBpdGVyLmRvbmUgPyB7IHN0YXJ0OiBzdGFydFRva2VuLCBtYXRjaGVkOiBmYWxzZSB9IDogbnVsbDtcbn1cblxuLy8gQ291bnRzIHRoZSBjb2x1bW4gb2Zmc2V0IGluIGEgc3RyaW5nLCB0YWtpbmcgdGFicyBpbnRvIGFjY291bnQuXG4vLyBVc2VkIG1vc3RseSB0byBmaW5kIGluZGVudGF0aW9uLlxuZnVuY3Rpb24gY291bnRDb2woc3RyaW5nLCBlbmQsIHRhYlNpemUsIHN0YXJ0SW5kZXggPSAwLCBzdGFydFZhbHVlID0gMCkge1xuICAgIGlmIChlbmQgPT0gbnVsbCkge1xuICAgICAgICBlbmQgPSBzdHJpbmcuc2VhcmNoKC9bXlxcc1xcdTAwYTBdLyk7XG4gICAgICAgIGlmIChlbmQgPT0gLTEpXG4gICAgICAgICAgICBlbmQgPSBzdHJpbmcubGVuZ3RoO1xuICAgIH1cbiAgICBsZXQgbiA9IHN0YXJ0VmFsdWU7XG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0SW5kZXg7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgICBpZiAoc3RyaW5nLmNoYXJDb2RlQXQoaSkgPT0gOSlcbiAgICAgICAgICAgIG4gKz0gdGFiU2l6ZSAtIChuICUgdGFiU2l6ZSk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIG4rKztcbiAgICB9XG4gICAgcmV0dXJuIG47XG59XG4vKipcbkVuY2Fwc3VsYXRlcyBhIHNpbmdsZSBsaW5lIG9mIGlucHV0LiBHaXZlbiB0byBzdHJlYW0gc3ludGF4IGNvZGUsXG53aGljaCB1c2VzIGl0IHRvIHRva2VuaXplIHRoZSBjb250ZW50LlxuKi9cbmNsYXNzIFN0cmluZ1N0cmVhbSB7XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgc3RyZWFtLlxuICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgVGhlIGxpbmUuXG4gICAgKi9cbiAgICBzdHJpbmcsIHRhYlNpemUsIFxuICAgIC8qKlxuICAgIFRoZSBjdXJyZW50IGluZGVudCB1bml0IHNpemUuXG4gICAgKi9cbiAgICBpbmRlbnRVbml0LCBvdmVycmlkZUluZGVudCkge1xuICAgICAgICB0aGlzLnN0cmluZyA9IHN0cmluZztcbiAgICAgICAgdGhpcy50YWJTaXplID0gdGFiU2l6ZTtcbiAgICAgICAgdGhpcy5pbmRlbnRVbml0ID0gaW5kZW50VW5pdDtcbiAgICAgICAgdGhpcy5vdmVycmlkZUluZGVudCA9IG92ZXJyaWRlSW5kZW50O1xuICAgICAgICAvKipcbiAgICAgICAgVGhlIGN1cnJlbnQgcG9zaXRpb24gb24gdGhlIGxpbmUuXG4gICAgICAgICovXG4gICAgICAgIHRoaXMucG9zID0gMDtcbiAgICAgICAgLyoqXG4gICAgICAgIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgY3VycmVudCB0b2tlbi5cbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGFydCA9IDA7XG4gICAgICAgIHRoaXMubGFzdENvbHVtblBvcyA9IDA7XG4gICAgICAgIHRoaXMubGFzdENvbHVtblZhbHVlID0gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgVHJ1ZSBpZiB3ZSBhcmUgYXQgdGhlIGVuZCBvZiB0aGUgbGluZS5cbiAgICAqL1xuICAgIGVvbCgpIHsgcmV0dXJuIHRoaXMucG9zID49IHRoaXMuc3RyaW5nLmxlbmd0aDsgfVxuICAgIC8qKlxuICAgIFRydWUgaWYgd2UgYXJlIGF0IHRoZSBzdGFydCBvZiB0aGUgbGluZS5cbiAgICAqL1xuICAgIHNvbCgpIHsgcmV0dXJuIHRoaXMucG9zID09IDA7IH1cbiAgICAvKipcbiAgICBHZXQgdGhlIG5leHQgY29kZSB1bml0IGFmdGVyIHRoZSBjdXJyZW50IHBvc2l0aW9uLCBvciB1bmRlZmluZWRcbiAgICBpZiB3ZSdyZSBhdCB0aGUgZW5kIG9mIHRoZSBsaW5lLlxuICAgICovXG4gICAgcGVlaygpIHsgcmV0dXJuIHRoaXMuc3RyaW5nLmNoYXJBdCh0aGlzLnBvcykgfHwgdW5kZWZpbmVkOyB9XG4gICAgLyoqXG4gICAgUmVhZCB0aGUgbmV4dCBjb2RlIHVuaXQgYW5kIGFkdmFuY2UgYHRoaXMucG9zYC5cbiAgICAqL1xuICAgIG5leHQoKSB7XG4gICAgICAgIGlmICh0aGlzLnBvcyA8IHRoaXMuc3RyaW5nLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0cmluZy5jaGFyQXQodGhpcy5wb3MrKyk7XG4gICAgfVxuICAgIC8qKlxuICAgIE1hdGNoIHRoZSBuZXh0IGNoYXJhY3RlciBhZ2FpbnN0IHRoZSBnaXZlbiBzdHJpbmcsIHJlZ3VsYXJcbiAgICBleHByZXNzaW9uLCBvciBwcmVkaWNhdGUuIENvbnN1bWUgYW5kIHJldHVybiBpdCBpZiBpdCBtYXRjaGVzLlxuICAgICovXG4gICAgZWF0KG1hdGNoKSB7XG4gICAgICAgIGxldCBjaCA9IHRoaXMuc3RyaW5nLmNoYXJBdCh0aGlzLnBvcyk7XG4gICAgICAgIGxldCBvaztcbiAgICAgICAgaWYgKHR5cGVvZiBtYXRjaCA9PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgb2sgPSBjaCA9PSBtYXRjaDtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgb2sgPSBjaCAmJiAobWF0Y2ggaW5zdGFuY2VvZiBSZWdFeHAgPyBtYXRjaC50ZXN0KGNoKSA6IG1hdGNoKGNoKSk7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgICAgKyt0aGlzLnBvcztcbiAgICAgICAgICAgIHJldHVybiBjaDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICBDb250aW51ZSBtYXRjaGluZyBjaGFyYWN0ZXJzIHRoYXQgbWF0Y2ggdGhlIGdpdmVuIHN0cmluZyxcbiAgICByZWd1bGFyIGV4cHJlc3Npb24sIG9yIHByZWRpY2F0ZSBmdW5jdGlvbi4gUmV0dXJuIHRydWUgaWYgYW55XG4gICAgY2hhcmFjdGVycyB3ZXJlIGNvbnN1bWVkLlxuICAgICovXG4gICAgZWF0V2hpbGUobWF0Y2gpIHtcbiAgICAgICAgbGV0IHN0YXJ0ID0gdGhpcy5wb3M7XG4gICAgICAgIHdoaWxlICh0aGlzLmVhdChtYXRjaCkpIHsgfVxuICAgICAgICByZXR1cm4gdGhpcy5wb3MgPiBzdGFydDtcbiAgICB9XG4gICAgLyoqXG4gICAgQ29uc3VtZSB3aGl0ZXNwYWNlIGFoZWFkIG9mIGB0aGlzLnBvc2AuIFJldHVybiB0cnVlIGlmIGFueSB3YXNcbiAgICBmb3VuZC5cbiAgICAqL1xuICAgIGVhdFNwYWNlKCkge1xuICAgICAgICBsZXQgc3RhcnQgPSB0aGlzLnBvcztcbiAgICAgICAgd2hpbGUgKC9bXFxzXFx1MDBhMF0vLnRlc3QodGhpcy5zdHJpbmcuY2hhckF0KHRoaXMucG9zKSkpXG4gICAgICAgICAgICArK3RoaXMucG9zO1xuICAgICAgICByZXR1cm4gdGhpcy5wb3MgPiBzdGFydDtcbiAgICB9XG4gICAgLyoqXG4gICAgTW92ZSB0byB0aGUgZW5kIG9mIHRoZSBsaW5lLlxuICAgICovXG4gICAgc2tpcFRvRW5kKCkgeyB0aGlzLnBvcyA9IHRoaXMuc3RyaW5nLmxlbmd0aDsgfVxuICAgIC8qKlxuICAgIE1vdmUgdG8gZGlyZWN0bHkgYmVmb3JlIHRoZSBnaXZlbiBjaGFyYWN0ZXIsIGlmIGZvdW5kIG9uIHRoZVxuICAgIGN1cnJlbnQgbGluZS5cbiAgICAqL1xuICAgIHNraXBUbyhjaCkge1xuICAgICAgICBsZXQgZm91bmQgPSB0aGlzLnN0cmluZy5pbmRleE9mKGNoLCB0aGlzLnBvcyk7XG4gICAgICAgIGlmIChmb3VuZCA+IC0xKSB7XG4gICAgICAgICAgICB0aGlzLnBvcyA9IGZvdW5kO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgTW92ZSBiYWNrIGBuYCBjaGFyYWN0ZXJzLlxuICAgICovXG4gICAgYmFja1VwKG4pIHsgdGhpcy5wb3MgLT0gbjsgfVxuICAgIC8qKlxuICAgIEdldCB0aGUgY29sdW1uIHBvc2l0aW9uIGF0IGB0aGlzLnBvc2AuXG4gICAgKi9cbiAgICBjb2x1bW4oKSB7XG4gICAgICAgIGlmICh0aGlzLmxhc3RDb2x1bW5Qb3MgPCB0aGlzLnN0YXJ0KSB7XG4gICAgICAgICAgICB0aGlzLmxhc3RDb2x1bW5WYWx1ZSA9IGNvdW50Q29sKHRoaXMuc3RyaW5nLCB0aGlzLnN0YXJ0LCB0aGlzLnRhYlNpemUsIHRoaXMubGFzdENvbHVtblBvcywgdGhpcy5sYXN0Q29sdW1uVmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5sYXN0Q29sdW1uUG9zID0gdGhpcy5zdGFydDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5sYXN0Q29sdW1uVmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgIEdldCB0aGUgaW5kZW50YXRpb24gY29sdW1uIG9mIHRoZSBjdXJyZW50IGxpbmUuXG4gICAgKi9cbiAgICBpbmRlbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5vdmVycmlkZUluZGVudCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogY291bnRDb2wodGhpcy5zdHJpbmcsIG51bGwsIHRoaXMudGFiU2l6ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgIE1hdGNoIHRoZSBpbnB1dCBhZ2FpbnN0IHRoZSBnaXZlbiBzdHJpbmcgb3IgcmVndWxhciBleHByZXNzaW9uXG4gICAgKHdoaWNoIHNob3VsZCBzdGFydCB3aXRoIGEgYF5gKS4gUmV0dXJuIHRydWUgb3IgdGhlIHJlZ2V4cCBtYXRjaFxuICAgIGlmIGl0IG1hdGNoZXMuXG4gICAgXG4gICAgVW5sZXNzIGBjb25zdW1lYCBpcyBzZXQgdG8gYGZhbHNlYCwgdGhpcyB3aWxsIG1vdmUgYHRoaXMucG9zYFxuICAgIHBhc3QgdGhlIG1hdGNoZWQgdGV4dC5cbiAgICBcbiAgICBXaGVuIG1hdGNoaW5nIGEgc3RyaW5nIGBjYXNlSW5zZW5zaXRpdmVgIGNhbiBiZSBzZXQgdG8gdHJ1ZSB0b1xuICAgIG1ha2UgdGhlIG1hdGNoIGNhc2UtaW5zZW5zaXRpdmUuXG4gICAgKi9cbiAgICBtYXRjaChwYXR0ZXJuLCBjb25zdW1lLCBjYXNlSW5zZW5zaXRpdmUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXR0ZXJuID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGxldCBjYXNlZCA9IChzdHIpID0+IGNhc2VJbnNlbnNpdGl2ZSA/IHN0ci50b0xvd2VyQ2FzZSgpIDogc3RyO1xuICAgICAgICAgICAgbGV0IHN1YnN0ciA9IHRoaXMuc3RyaW5nLnN1YnN0cih0aGlzLnBvcywgcGF0dGVybi5sZW5ndGgpO1xuICAgICAgICAgICAgaWYgKGNhc2VkKHN1YnN0cikgPT0gY2FzZWQocGF0dGVybikpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29uc3VtZSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9zICs9IHBhdHRlcm4ubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGV0IG1hdGNoID0gdGhpcy5zdHJpbmcuc2xpY2UodGhpcy5wb3MpLm1hdGNoKHBhdHRlcm4pO1xuICAgICAgICAgICAgaWYgKG1hdGNoICYmIG1hdGNoLmluZGV4ID4gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIGlmIChtYXRjaCAmJiBjb25zdW1lICE9PSBmYWxzZSlcbiAgICAgICAgICAgICAgICB0aGlzLnBvcyArPSBtYXRjaFswXS5sZW5ndGg7XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgR2V0IHRoZSBjdXJyZW50IHRva2VuLlxuICAgICovXG4gICAgY3VycmVudCgpIHsgcmV0dXJuIHRoaXMuc3RyaW5nLnNsaWNlKHRoaXMuc3RhcnQsIHRoaXMucG9zKTsgfVxufVxuXG5mdW5jdGlvbiBmdWxsUGFyc2VyKHNwZWMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBzcGVjLm5hbWUgfHwgXCJcIixcbiAgICAgICAgdG9rZW46IHNwZWMudG9rZW4sXG4gICAgICAgIGJsYW5rTGluZTogc3BlYy5ibGFua0xpbmUgfHwgKCgpID0+IHsgfSksXG4gICAgICAgIHN0YXJ0U3RhdGU6IHNwZWMuc3RhcnRTdGF0ZSB8fCAoKCkgPT4gdHJ1ZSksXG4gICAgICAgIGNvcHlTdGF0ZTogc3BlYy5jb3B5U3RhdGUgfHwgZGVmYXVsdENvcHlTdGF0ZSxcbiAgICAgICAgaW5kZW50OiBzcGVjLmluZGVudCB8fCAoKCkgPT4gbnVsbCksXG4gICAgICAgIGxhbmd1YWdlRGF0YTogc3BlYy5sYW5ndWFnZURhdGEgfHwge30sXG4gICAgICAgIHRva2VuVGFibGU6IHNwZWMudG9rZW5UYWJsZSB8fCBub1Rva2Vuc1xuICAgIH07XG59XG5mdW5jdGlvbiBkZWZhdWx0Q29weVN0YXRlKHN0YXRlKSB7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSAhPSBcIm9iamVjdFwiKVxuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgbGV0IG5ld1N0YXRlID0ge307XG4gICAgZm9yIChsZXQgcHJvcCBpbiBzdGF0ZSkge1xuICAgICAgICBsZXQgdmFsID0gc3RhdGVbcHJvcF07XG4gICAgICAgIG5ld1N0YXRlW3Byb3BdID0gKHZhbCBpbnN0YW5jZW9mIEFycmF5ID8gdmFsLnNsaWNlKCkgOiB2YWwpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3U3RhdGU7XG59XG5jb25zdCBJbmRlbnRlZEZyb20gPSBuZXcgV2Vha01hcCgpO1xuLyoqXG5BIFtsYW5ndWFnZV0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNsYW5ndWFnZS5MYW5ndWFnZSkgY2xhc3MgYmFzZWQgb24gYSBDb2RlTWlycm9yXG41LXN0eWxlIFtzdHJlYW1pbmcgcGFyc2VyXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI2xhbmd1YWdlLlN0cmVhbVBhcnNlcikuXG4qL1xuY2xhc3MgU3RyZWFtTGFuZ3VhZ2UgZXh0ZW5kcyBMYW5ndWFnZSB7XG4gICAgY29uc3RydWN0b3IocGFyc2VyKSB7XG4gICAgICAgIGxldCBkYXRhID0gZGVmaW5lTGFuZ3VhZ2VGYWNldChwYXJzZXIubGFuZ3VhZ2VEYXRhKTtcbiAgICAgICAgbGV0IHAgPSBmdWxsUGFyc2VyKHBhcnNlciksIHNlbGY7XG4gICAgICAgIGxldCBpbXBsID0gbmV3IGNsYXNzIGV4dGVuZHMgY29tbW9uLlBhcnNlciB7XG4gICAgICAgICAgICBjcmVhdGVQYXJzZShpbnB1dCwgZnJhZ21lbnRzLCByYW5nZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBhcnNlKHNlbGYsIGlucHV0LCBmcmFnbWVudHMsIHJhbmdlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHN1cGVyKGRhdGEsIGltcGwsIFtpbmRlbnRTZXJ2aWNlLm9mKChjeCwgcG9zKSA9PiB0aGlzLmdldEluZGVudChjeCwgcG9zKSldLCBwYXJzZXIubmFtZSk7XG4gICAgICAgIHRoaXMudG9wTm9kZSA9IGRvY0lEKGRhdGEpO1xuICAgICAgICBzZWxmID0gdGhpcztcbiAgICAgICAgdGhpcy5zdHJlYW1QYXJzZXIgPSBwO1xuICAgICAgICB0aGlzLnN0YXRlQWZ0ZXIgPSBuZXcgY29tbW9uLk5vZGVQcm9wKHsgcGVyTm9kZTogdHJ1ZSB9KTtcbiAgICAgICAgdGhpcy50b2tlblRhYmxlID0gcGFyc2VyLnRva2VuVGFibGUgPyBuZXcgVG9rZW5UYWJsZShwLnRva2VuVGFibGUpIDogZGVmYXVsdFRva2VuVGFibGU7XG4gICAgfVxuICAgIC8qKlxuICAgIERlZmluZSBhIHN0cmVhbSBsYW5ndWFnZS5cbiAgICAqL1xuICAgIHN0YXRpYyBkZWZpbmUoc3BlYykgeyByZXR1cm4gbmV3IFN0cmVhbUxhbmd1YWdlKHNwZWMpOyB9XG4gICAgZ2V0SW5kZW50KGN4LCBwb3MpIHtcbiAgICAgICAgbGV0IHRyZWUgPSBzeW50YXhUcmVlKGN4LnN0YXRlKSwgYXQgPSB0cmVlLnJlc29sdmUocG9zKTtcbiAgICAgICAgd2hpbGUgKGF0ICYmIGF0LnR5cGUgIT0gdGhpcy50b3BOb2RlKVxuICAgICAgICAgICAgYXQgPSBhdC5wYXJlbnQ7XG4gICAgICAgIGlmICghYXQpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgbGV0IGZyb20gPSB1bmRlZmluZWQ7XG4gICAgICAgIGxldCB7IG92ZXJyaWRlSW5kZW50YXRpb24gfSA9IGN4Lm9wdGlvbnM7XG4gICAgICAgIGlmIChvdmVycmlkZUluZGVudGF0aW9uKSB7XG4gICAgICAgICAgICBmcm9tID0gSW5kZW50ZWRGcm9tLmdldChjeC5zdGF0ZSk7XG4gICAgICAgICAgICBpZiAoZnJvbSAhPSBudWxsICYmIGZyb20gPCBwb3MgLSAxZTQpXG4gICAgICAgICAgICAgICAgZnJvbSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgc3RhcnQgPSBmaW5kU3RhdGUodGhpcywgdHJlZSwgMCwgYXQuZnJvbSwgZnJvbSAhPT0gbnVsbCAmJiBmcm9tICE9PSB2b2lkIDAgPyBmcm9tIDogcG9zKSwgc3RhdGVQb3MsIHN0YXRlO1xuICAgICAgICBpZiAoc3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gc3RhcnQuc3RhdGU7XG4gICAgICAgICAgICBzdGF0ZVBvcyA9IHN0YXJ0LnBvcyArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdGF0ZSA9IHRoaXMuc3RyZWFtUGFyc2VyLnN0YXJ0U3RhdGUoY3gudW5pdCk7XG4gICAgICAgICAgICBzdGF0ZVBvcyA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvcyAtIHN0YXRlUG9zID4gMTAwMDAgLyogQy5NYXhJbmRlbnRTY2FuRGlzdCAqLylcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB3aGlsZSAoc3RhdGVQb3MgPCBwb3MpIHtcbiAgICAgICAgICAgIGxldCBsaW5lID0gY3guc3RhdGUuZG9jLmxpbmVBdChzdGF0ZVBvcyksIGVuZCA9IE1hdGgubWluKHBvcywgbGluZS50byk7XG4gICAgICAgICAgICBpZiAobGluZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBsZXQgaW5kZW50YXRpb24gPSBvdmVycmlkZUluZGVudGF0aW9uID8gb3ZlcnJpZGVJbmRlbnRhdGlvbihsaW5lLmZyb20pIDogLTE7XG4gICAgICAgICAgICAgICAgbGV0IHN0cmVhbSA9IG5ldyBTdHJpbmdTdHJlYW0obGluZS50ZXh0LCBjeC5zdGF0ZS50YWJTaXplLCBjeC51bml0LCBpbmRlbnRhdGlvbiA8IDAgPyB1bmRlZmluZWQgOiBpbmRlbnRhdGlvbik7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHN0cmVhbS5wb3MgPCBlbmQgLSBsaW5lLmZyb20pXG4gICAgICAgICAgICAgICAgICAgIHJlYWRUb2tlbih0aGlzLnN0cmVhbVBhcnNlci50b2tlbiwgc3RyZWFtLCBzdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0cmVhbVBhcnNlci5ibGFua0xpbmUoc3RhdGUsIGN4LnVuaXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVuZCA9PSBwb3MpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBzdGF0ZVBvcyA9IGxpbmUudG8gKyAxO1xuICAgICAgICB9XG4gICAgICAgIGxldCBsaW5lID0gY3gubGluZUF0KHBvcyk7XG4gICAgICAgIGlmIChvdmVycmlkZUluZGVudGF0aW9uICYmIGZyb20gPT0gbnVsbClcbiAgICAgICAgICAgIEluZGVudGVkRnJvbS5zZXQoY3guc3RhdGUsIGxpbmUuZnJvbSk7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cmVhbVBhcnNlci5pbmRlbnQoc3RhdGUsIC9eXFxzKiguKikvLmV4ZWMobGluZS50ZXh0KVsxXSwgY3gpO1xuICAgIH1cbiAgICBnZXQgYWxsb3dzTmVzdGluZygpIHsgcmV0dXJuIGZhbHNlOyB9XG59XG5mdW5jdGlvbiBmaW5kU3RhdGUobGFuZywgdHJlZSwgb2ZmLCBzdGFydFBvcywgYmVmb3JlKSB7XG4gICAgbGV0IHN0YXRlID0gb2ZmID49IHN0YXJ0UG9zICYmIG9mZiArIHRyZWUubGVuZ3RoIDw9IGJlZm9yZSAmJiB0cmVlLnByb3AobGFuZy5zdGF0ZUFmdGVyKTtcbiAgICBpZiAoc3RhdGUpXG4gICAgICAgIHJldHVybiB7IHN0YXRlOiBsYW5nLnN0cmVhbVBhcnNlci5jb3B5U3RhdGUoc3RhdGUpLCBwb3M6IG9mZiArIHRyZWUubGVuZ3RoIH07XG4gICAgZm9yIChsZXQgaSA9IHRyZWUuY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgbGV0IGNoaWxkID0gdHJlZS5jaGlsZHJlbltpXSwgcG9zID0gb2ZmICsgdHJlZS5wb3NpdGlvbnNbaV07XG4gICAgICAgIGxldCBmb3VuZCA9IGNoaWxkIGluc3RhbmNlb2YgY29tbW9uLlRyZWUgJiYgcG9zIDwgYmVmb3JlICYmIGZpbmRTdGF0ZShsYW5nLCBjaGlsZCwgcG9zLCBzdGFydFBvcywgYmVmb3JlKTtcbiAgICAgICAgaWYgKGZvdW5kKVxuICAgICAgICAgICAgcmV0dXJuIGZvdW5kO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGN1dFRyZWUobGFuZywgdHJlZSwgZnJvbSwgdG8sIGluc2lkZSkge1xuICAgIGlmIChpbnNpZGUgJiYgZnJvbSA8PSAwICYmIHRvID49IHRyZWUubGVuZ3RoKVxuICAgICAgICByZXR1cm4gdHJlZTtcbiAgICBpZiAoIWluc2lkZSAmJiB0cmVlLnR5cGUgPT0gbGFuZy50b3BOb2RlKVxuICAgICAgICBpbnNpZGUgPSB0cnVlO1xuICAgIGZvciAobGV0IGkgPSB0cmVlLmNoaWxkcmVuLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGxldCBwb3MgPSB0cmVlLnBvc2l0aW9uc1tpXSwgY2hpbGQgPSB0cmVlLmNoaWxkcmVuW2ldLCBpbm5lcjtcbiAgICAgICAgaWYgKHBvcyA8IHRvICYmIGNoaWxkIGluc3RhbmNlb2YgY29tbW9uLlRyZWUpIHtcbiAgICAgICAgICAgIGlmICghKGlubmVyID0gY3V0VHJlZShsYW5nLCBjaGlsZCwgZnJvbSAtIHBvcywgdG8gLSBwb3MsIGluc2lkZSkpKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgcmV0dXJuICFpbnNpZGUgPyBpbm5lclxuICAgICAgICAgICAgICAgIDogbmV3IGNvbW1vbi5UcmVlKHRyZWUudHlwZSwgdHJlZS5jaGlsZHJlbi5zbGljZSgwLCBpKS5jb25jYXQoaW5uZXIpLCB0cmVlLnBvc2l0aW9ucy5zbGljZSgwLCBpICsgMSksIHBvcyArIGlubmVyLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBmaW5kU3RhcnRJbkZyYWdtZW50cyhsYW5nLCBmcmFnbWVudHMsIHN0YXJ0UG9zLCBlZGl0b3JTdGF0ZSkge1xuICAgIGZvciAobGV0IGYgb2YgZnJhZ21lbnRzKSB7XG4gICAgICAgIGxldCBmcm9tID0gZi5mcm9tICsgKGYub3BlblN0YXJ0ID8gMjUgOiAwKSwgdG8gPSBmLnRvIC0gKGYub3BlbkVuZCA/IDI1IDogMCk7XG4gICAgICAgIGxldCBmb3VuZCA9IGZyb20gPD0gc3RhcnRQb3MgJiYgdG8gPiBzdGFydFBvcyAmJiBmaW5kU3RhdGUobGFuZywgZi50cmVlLCAwIC0gZi5vZmZzZXQsIHN0YXJ0UG9zLCB0byksIHRyZWU7XG4gICAgICAgIGlmIChmb3VuZCAmJiAodHJlZSA9IGN1dFRyZWUobGFuZywgZi50cmVlLCBzdGFydFBvcyArIGYub2Zmc2V0LCBmb3VuZC5wb3MgKyBmLm9mZnNldCwgZmFsc2UpKSlcbiAgICAgICAgICAgIHJldHVybiB7IHN0YXRlOiBmb3VuZC5zdGF0ZSwgdHJlZSB9O1xuICAgIH1cbiAgICByZXR1cm4geyBzdGF0ZTogbGFuZy5zdHJlYW1QYXJzZXIuc3RhcnRTdGF0ZShlZGl0b3JTdGF0ZSA/IGdldEluZGVudFVuaXQoZWRpdG9yU3RhdGUpIDogNCksIHRyZWU6IGNvbW1vbi5UcmVlLmVtcHR5IH07XG59XG5jbGFzcyBQYXJzZSB7XG4gICAgY29uc3RydWN0b3IobGFuZywgaW5wdXQsIGZyYWdtZW50cywgcmFuZ2VzKSB7XG4gICAgICAgIHRoaXMubGFuZyA9IGxhbmc7XG4gICAgICAgIHRoaXMuaW5wdXQgPSBpbnB1dDtcbiAgICAgICAgdGhpcy5mcmFnbWVudHMgPSBmcmFnbWVudHM7XG4gICAgICAgIHRoaXMucmFuZ2VzID0gcmFuZ2VzO1xuICAgICAgICB0aGlzLnN0b3BwZWRBdCA9IG51bGw7XG4gICAgICAgIHRoaXMuY2h1bmtzID0gW107XG4gICAgICAgIHRoaXMuY2h1bmtQb3MgPSBbXTtcbiAgICAgICAgdGhpcy5jaHVuayA9IFtdO1xuICAgICAgICB0aGlzLmNodW5rUmV1c2VkID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnJhbmdlSW5kZXggPSAwO1xuICAgICAgICB0aGlzLnRvID0gcmFuZ2VzW3Jhbmdlcy5sZW5ndGggLSAxXS50bztcbiAgICAgICAgbGV0IGNvbnRleHQgPSBQYXJzZUNvbnRleHQuZ2V0KCksIGZyb20gPSByYW5nZXNbMF0uZnJvbTtcbiAgICAgICAgbGV0IHsgc3RhdGUsIHRyZWUgfSA9IGZpbmRTdGFydEluRnJhZ21lbnRzKGxhbmcsIGZyYWdtZW50cywgZnJvbSwgY29udGV4dCA9PT0gbnVsbCB8fCBjb250ZXh0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb250ZXh0LnN0YXRlKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB0aGlzLnBhcnNlZFBvcyA9IHRoaXMuY2h1bmtTdGFydCA9IGZyb20gKyB0cmVlLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmVlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmNodW5rcy5wdXNoKHRyZWUuY2hpbGRyZW5baV0pO1xuICAgICAgICAgICAgdGhpcy5jaHVua1Bvcy5wdXNoKHRyZWUucG9zaXRpb25zW2ldKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29udGV4dCAmJiB0aGlzLnBhcnNlZFBvcyA8IGNvbnRleHQudmlld3BvcnQuZnJvbSAtIDEwMDAwMCAvKiBDLk1heERpc3RhbmNlQmVmb3JlVmlld3BvcnQgKi8pIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSB0aGlzLmxhbmcuc3RyZWFtUGFyc2VyLnN0YXJ0U3RhdGUoZ2V0SW5kZW50VW5pdChjb250ZXh0LnN0YXRlKSk7XG4gICAgICAgICAgICBjb250ZXh0LnNraXBVbnRpbEluVmlldyh0aGlzLnBhcnNlZFBvcywgY29udGV4dC52aWV3cG9ydC5mcm9tKTtcbiAgICAgICAgICAgIHRoaXMucGFyc2VkUG9zID0gY29udGV4dC52aWV3cG9ydC5mcm9tO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubW92ZVJhbmdlSW5kZXgoKTtcbiAgICB9XG4gICAgYWR2YW5jZSgpIHtcbiAgICAgICAgbGV0IGNvbnRleHQgPSBQYXJzZUNvbnRleHQuZ2V0KCk7XG4gICAgICAgIGxldCBwYXJzZUVuZCA9IHRoaXMuc3RvcHBlZEF0ID09IG51bGwgPyB0aGlzLnRvIDogTWF0aC5taW4odGhpcy50bywgdGhpcy5zdG9wcGVkQXQpO1xuICAgICAgICBsZXQgZW5kID0gTWF0aC5taW4ocGFyc2VFbmQsIHRoaXMuY2h1bmtTdGFydCArIDIwNDggLyogQy5DaHVua1NpemUgKi8pO1xuICAgICAgICBpZiAoY29udGV4dClcbiAgICAgICAgICAgIGVuZCA9IE1hdGgubWluKGVuZCwgY29udGV4dC52aWV3cG9ydC50byk7XG4gICAgICAgIHdoaWxlICh0aGlzLnBhcnNlZFBvcyA8IGVuZClcbiAgICAgICAgICAgIHRoaXMucGFyc2VMaW5lKGNvbnRleHQpO1xuICAgICAgICBpZiAodGhpcy5jaHVua1N0YXJ0IDwgdGhpcy5wYXJzZWRQb3MpXG4gICAgICAgICAgICB0aGlzLmZpbmlzaENodW5rKCk7XG4gICAgICAgIGlmICh0aGlzLnBhcnNlZFBvcyA+PSBwYXJzZUVuZClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbmlzaCgpO1xuICAgICAgICBpZiAoY29udGV4dCAmJiB0aGlzLnBhcnNlZFBvcyA+PSBjb250ZXh0LnZpZXdwb3J0LnRvKSB7XG4gICAgICAgICAgICBjb250ZXh0LnNraXBVbnRpbEluVmlldyh0aGlzLnBhcnNlZFBvcywgcGFyc2VFbmQpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHN0b3BBdChwb3MpIHtcbiAgICAgICAgdGhpcy5zdG9wcGVkQXQgPSBwb3M7XG4gICAgfVxuICAgIGxpbmVBZnRlcihwb3MpIHtcbiAgICAgICAgbGV0IGNodW5rID0gdGhpcy5pbnB1dC5jaHVuayhwb3MpO1xuICAgICAgICBpZiAoIXRoaXMuaW5wdXQubGluZUNodW5rcykge1xuICAgICAgICAgICAgbGV0IGVvbCA9IGNodW5rLmluZGV4T2YoXCJcXG5cIik7XG4gICAgICAgICAgICBpZiAoZW9sID4gLTEpXG4gICAgICAgICAgICAgICAgY2h1bmsgPSBjaHVuay5zbGljZSgwLCBlb2wpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNodW5rID09IFwiXFxuXCIpIHtcbiAgICAgICAgICAgIGNodW5rID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcG9zICsgY2h1bmsubGVuZ3RoIDw9IHRoaXMudG8gPyBjaHVuayA6IGNodW5rLnNsaWNlKDAsIHRoaXMudG8gLSBwb3MpO1xuICAgIH1cbiAgICBuZXh0TGluZSgpIHtcbiAgICAgICAgbGV0IGZyb20gPSB0aGlzLnBhcnNlZFBvcywgbGluZSA9IHRoaXMubGluZUFmdGVyKGZyb20pLCBlbmQgPSBmcm9tICsgbGluZS5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gdGhpcy5yYW5nZUluZGV4OzspIHtcbiAgICAgICAgICAgIGxldCByYW5nZUVuZCA9IHRoaXMucmFuZ2VzW2luZGV4XS50bztcbiAgICAgICAgICAgIGlmIChyYW5nZUVuZCA+PSBlbmQpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBsaW5lID0gbGluZS5zbGljZSgwLCByYW5nZUVuZCAtIChlbmQgLSBsaW5lLmxlbmd0aCkpO1xuICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgIGlmIChpbmRleCA9PSB0aGlzLnJhbmdlcy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBsZXQgcmFuZ2VTdGFydCA9IHRoaXMucmFuZ2VzW2luZGV4XS5mcm9tO1xuICAgICAgICAgICAgbGV0IGFmdGVyID0gdGhpcy5saW5lQWZ0ZXIocmFuZ2VTdGFydCk7XG4gICAgICAgICAgICBsaW5lICs9IGFmdGVyO1xuICAgICAgICAgICAgZW5kID0gcmFuZ2VTdGFydCArIGFmdGVyLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBsaW5lLCBlbmQgfTtcbiAgICB9XG4gICAgc2tpcEdhcHNUbyhwb3MsIG9mZnNldCwgc2lkZSkge1xuICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICBsZXQgZW5kID0gdGhpcy5yYW5nZXNbdGhpcy5yYW5nZUluZGV4XS50bywgb2ZmUG9zID0gcG9zICsgb2Zmc2V0O1xuICAgICAgICAgICAgaWYgKHNpZGUgPiAwID8gZW5kID4gb2ZmUG9zIDogZW5kID49IG9mZlBvcylcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGxldCBzdGFydCA9IHRoaXMucmFuZ2VzWysrdGhpcy5yYW5nZUluZGV4XS5mcm9tO1xuICAgICAgICAgICAgb2Zmc2V0ICs9IHN0YXJ0IC0gZW5kO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvZmZzZXQ7XG4gICAgfVxuICAgIG1vdmVSYW5nZUluZGV4KCkge1xuICAgICAgICB3aGlsZSAodGhpcy5yYW5nZXNbdGhpcy5yYW5nZUluZGV4XS50byA8IHRoaXMucGFyc2VkUG9zKVxuICAgICAgICAgICAgdGhpcy5yYW5nZUluZGV4Kys7XG4gICAgfVxuICAgIGVtaXRUb2tlbihpZCwgZnJvbSwgdG8sIHNpemUsIG9mZnNldCkge1xuICAgICAgICBpZiAodGhpcy5yYW5nZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgb2Zmc2V0ID0gdGhpcy5za2lwR2Fwc1RvKGZyb20sIG9mZnNldCwgMSk7XG4gICAgICAgICAgICBmcm9tICs9IG9mZnNldDtcbiAgICAgICAgICAgIGxldCBsZW4wID0gdGhpcy5jaHVuay5sZW5ndGg7XG4gICAgICAgICAgICBvZmZzZXQgPSB0aGlzLnNraXBHYXBzVG8odG8sIG9mZnNldCwgLTEpO1xuICAgICAgICAgICAgdG8gKz0gb2Zmc2V0O1xuICAgICAgICAgICAgc2l6ZSArPSB0aGlzLmNodW5rLmxlbmd0aCAtIGxlbjA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jaHVuay5wdXNoKGlkLCBmcm9tLCB0bywgc2l6ZSk7XG4gICAgICAgIHJldHVybiBvZmZzZXQ7XG4gICAgfVxuICAgIHBhcnNlTGluZShjb250ZXh0KSB7XG4gICAgICAgIGxldCB7IGxpbmUsIGVuZCB9ID0gdGhpcy5uZXh0TGluZSgpLCBvZmZzZXQgPSAwLCB7IHN0cmVhbVBhcnNlciB9ID0gdGhpcy5sYW5nO1xuICAgICAgICBsZXQgc3RyZWFtID0gbmV3IFN0cmluZ1N0cmVhbShsaW5lLCBjb250ZXh0ID8gY29udGV4dC5zdGF0ZS50YWJTaXplIDogNCwgY29udGV4dCA/IGdldEluZGVudFVuaXQoY29udGV4dC5zdGF0ZSkgOiAyKTtcbiAgICAgICAgaWYgKHN0cmVhbS5lb2woKSkge1xuICAgICAgICAgICAgc3RyZWFtUGFyc2VyLmJsYW5rTGluZSh0aGlzLnN0YXRlLCBzdHJlYW0uaW5kZW50VW5pdCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB3aGlsZSAoIXN0cmVhbS5lb2woKSkge1xuICAgICAgICAgICAgICAgIGxldCB0b2tlbiA9IHJlYWRUb2tlbihzdHJlYW1QYXJzZXIudG9rZW4sIHN0cmVhbSwgdGhpcy5zdGF0ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHRva2VuKVxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSB0aGlzLmVtaXRUb2tlbih0aGlzLmxhbmcudG9rZW5UYWJsZS5yZXNvbHZlKHRva2VuKSwgdGhpcy5wYXJzZWRQb3MgKyBzdHJlYW0uc3RhcnQsIHRoaXMucGFyc2VkUG9zICsgc3RyZWFtLnBvcywgNCwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBpZiAoc3RyZWFtLnN0YXJ0ID4gMTAwMDAgLyogQy5NYXhMaW5lTGVuZ3RoICovKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBhcnNlZFBvcyA9IGVuZDtcbiAgICAgICAgdGhpcy5tb3ZlUmFuZ2VJbmRleCgpO1xuICAgICAgICBpZiAodGhpcy5wYXJzZWRQb3MgPCB0aGlzLnRvKVxuICAgICAgICAgICAgdGhpcy5wYXJzZWRQb3MrKztcbiAgICB9XG4gICAgZmluaXNoQ2h1bmsoKSB7XG4gICAgICAgIGxldCB0cmVlID0gY29tbW9uLlRyZWUuYnVpbGQoe1xuICAgICAgICAgICAgYnVmZmVyOiB0aGlzLmNodW5rLFxuICAgICAgICAgICAgc3RhcnQ6IHRoaXMuY2h1bmtTdGFydCxcbiAgICAgICAgICAgIGxlbmd0aDogdGhpcy5wYXJzZWRQb3MgLSB0aGlzLmNodW5rU3RhcnQsXG4gICAgICAgICAgICBub2RlU2V0LFxuICAgICAgICAgICAgdG9wSUQ6IDAsXG4gICAgICAgICAgICBtYXhCdWZmZXJMZW5ndGg6IDIwNDggLyogQy5DaHVua1NpemUgKi8sXG4gICAgICAgICAgICByZXVzZWQ6IHRoaXMuY2h1bmtSZXVzZWRcbiAgICAgICAgfSk7XG4gICAgICAgIHRyZWUgPSBuZXcgY29tbW9uLlRyZWUodHJlZS50eXBlLCB0cmVlLmNoaWxkcmVuLCB0cmVlLnBvc2l0aW9ucywgdHJlZS5sZW5ndGgsIFtbdGhpcy5sYW5nLnN0YXRlQWZ0ZXIsIHRoaXMubGFuZy5zdHJlYW1QYXJzZXIuY29weVN0YXRlKHRoaXMuc3RhdGUpXV0pO1xuICAgICAgICB0aGlzLmNodW5rcy5wdXNoKHRyZWUpO1xuICAgICAgICB0aGlzLmNodW5rUG9zLnB1c2godGhpcy5jaHVua1N0YXJ0IC0gdGhpcy5yYW5nZXNbMF0uZnJvbSk7XG4gICAgICAgIHRoaXMuY2h1bmsgPSBbXTtcbiAgICAgICAgdGhpcy5jaHVua1JldXNlZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jaHVua1N0YXJ0ID0gdGhpcy5wYXJzZWRQb3M7XG4gICAgfVxuICAgIGZpbmlzaCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBjb21tb24uVHJlZSh0aGlzLmxhbmcudG9wTm9kZSwgdGhpcy5jaHVua3MsIHRoaXMuY2h1bmtQb3MsIHRoaXMucGFyc2VkUG9zIC0gdGhpcy5yYW5nZXNbMF0uZnJvbSkuYmFsYW5jZSgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJlYWRUb2tlbih0b2tlbiwgc3RyZWFtLCBzdGF0ZSkge1xuICAgIHN0cmVhbS5zdGFydCA9IHN0cmVhbS5wb3M7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSB0b2tlbihzdHJlYW0sIHN0YXRlKTtcbiAgICAgICAgaWYgKHN0cmVhbS5wb3MgPiBzdHJlYW0uc3RhcnQpXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJTdHJlYW0gcGFyc2VyIGZhaWxlZCB0byBhZHZhbmNlIHN0cmVhbS5cIik7XG59XG5jb25zdCBub1Rva2VucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5jb25zdCB0eXBlQXJyYXkgPSBbY29tbW9uLk5vZGVUeXBlLm5vbmVdO1xuY29uc3Qgbm9kZVNldCA9IG5ldyBjb21tb24uTm9kZVNldCh0eXBlQXJyYXkpO1xuY29uc3Qgd2FybmVkID0gW107XG4vLyBDYWNoZSBvZiBub2RlIHR5cGVzIGJ5IG5hbWUgYW5kIHRhZ3NcbmNvbnN0IGJ5VGFnID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmNvbnN0IGRlZmF1bHRUYWJsZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5mb3IgKGxldCBbbGVnYWN5TmFtZSwgbmFtZV0gb2YgW1xuICAgIFtcInZhcmlhYmxlXCIsIFwidmFyaWFibGVOYW1lXCJdLFxuICAgIFtcInZhcmlhYmxlLTJcIiwgXCJ2YXJpYWJsZU5hbWUuc3BlY2lhbFwiXSxcbiAgICBbXCJzdHJpbmctMlwiLCBcInN0cmluZy5zcGVjaWFsXCJdLFxuICAgIFtcImRlZlwiLCBcInZhcmlhYmxlTmFtZS5kZWZpbml0aW9uXCJdLFxuICAgIFtcInRhZ1wiLCBcInRhZ05hbWVcIl0sXG4gICAgW1wiYXR0cmlidXRlXCIsIFwiYXR0cmlidXRlTmFtZVwiXSxcbiAgICBbXCJ0eXBlXCIsIFwidHlwZU5hbWVcIl0sXG4gICAgW1wiYnVpbHRpblwiLCBcInZhcmlhYmxlTmFtZS5zdGFuZGFyZFwiXSxcbiAgICBbXCJxdWFsaWZpZXJcIiwgXCJtb2RpZmllclwiXSxcbiAgICBbXCJlcnJvclwiLCBcImludmFsaWRcIl0sXG4gICAgW1wiaGVhZGVyXCIsIFwiaGVhZGluZ1wiXSxcbiAgICBbXCJwcm9wZXJ0eVwiLCBcInByb3BlcnR5TmFtZVwiXVxuXSlcbiAgICBkZWZhdWx0VGFibGVbbGVnYWN5TmFtZV0gPSBjcmVhdGVUb2tlblR5cGUobm9Ub2tlbnMsIG5hbWUpO1xuY2xhc3MgVG9rZW5UYWJsZSB7XG4gICAgY29uc3RydWN0b3IoZXh0cmEpIHtcbiAgICAgICAgdGhpcy5leHRyYSA9IGV4dHJhO1xuICAgICAgICB0aGlzLnRhYmxlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKG51bGwpLCBkZWZhdWx0VGFibGUpO1xuICAgIH1cbiAgICByZXNvbHZlKHRhZykge1xuICAgICAgICByZXR1cm4gIXRhZyA/IDAgOiB0aGlzLnRhYmxlW3RhZ10gfHwgKHRoaXMudGFibGVbdGFnXSA9IGNyZWF0ZVRva2VuVHlwZSh0aGlzLmV4dHJhLCB0YWcpKTtcbiAgICB9XG59XG5jb25zdCBkZWZhdWx0VG9rZW5UYWJsZSA9IG5ldyBUb2tlblRhYmxlKG5vVG9rZW5zKTtcbmZ1bmN0aW9uIHdhcm5Gb3JQYXJ0KHBhcnQsIG1zZykge1xuICAgIGlmICh3YXJuZWQuaW5kZXhPZihwYXJ0KSA+IC0xKVxuICAgICAgICByZXR1cm47XG4gICAgd2FybmVkLnB1c2gocGFydCk7XG4gICAgY29uc29sZS53YXJuKG1zZyk7XG59XG5mdW5jdGlvbiBjcmVhdGVUb2tlblR5cGUoZXh0cmEsIHRhZ1N0cikge1xuICAgIGxldCB0YWdzID0gW107XG4gICAgZm9yIChsZXQgbmFtZSBvZiB0YWdTdHIuc3BsaXQoXCIgXCIpKSB7XG4gICAgICAgIGxldCBmb3VuZCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBwYXJ0IG9mIG5hbWUuc3BsaXQoXCIuXCIpKSB7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSAoZXh0cmFbcGFydF0gfHwgaGlnaGxpZ2h0LnRhZ3NbcGFydF0pO1xuICAgICAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHdhcm5Gb3JQYXJ0KHBhcnQsIGBVbmtub3duIGhpZ2hsaWdodGluZyB0YWcgJHtwYXJ0fWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIGlmICghZm91bmQubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICB3YXJuRm9yUGFydChwYXJ0LCBgTW9kaWZpZXIgJHtwYXJ0fSB1c2VkIGF0IHN0YXJ0IG9mIHRhZ2ApO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZm91bmQgPSBmb3VuZC5tYXAodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGZvdW5kLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgd2FybkZvclBhcnQocGFydCwgYFRhZyAke3BhcnR9IHVzZWQgYXMgbW9kaWZpZXJgKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGZvdW5kID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgdGFnIG9mIGZvdW5kKVxuICAgICAgICAgICAgdGFncy5wdXNoKHRhZyk7XG4gICAgfVxuICAgIGlmICghdGFncy5sZW5ndGgpXG4gICAgICAgIHJldHVybiAwO1xuICAgIGxldCBuYW1lID0gdGFnU3RyLnJlcGxhY2UoLyAvZywgXCJfXCIpLCBrZXkgPSBuYW1lICsgXCIgXCIgKyB0YWdzLm1hcCh0ID0+IHQuaWQpO1xuICAgIGxldCBrbm93biA9IGJ5VGFnW2tleV07XG4gICAgaWYgKGtub3duKVxuICAgICAgICByZXR1cm4ga25vd24uaWQ7XG4gICAgbGV0IHR5cGUgPSBieVRhZ1trZXldID0gY29tbW9uLk5vZGVUeXBlLmRlZmluZSh7XG4gICAgICAgIGlkOiB0eXBlQXJyYXkubGVuZ3RoLFxuICAgICAgICBuYW1lLFxuICAgICAgICBwcm9wczogW2hpZ2hsaWdodC5zdHlsZVRhZ3MoeyBbbmFtZV06IHRhZ3MgfSldXG4gICAgfSk7XG4gICAgdHlwZUFycmF5LnB1c2godHlwZSk7XG4gICAgcmV0dXJuIHR5cGUuaWQ7XG59XG5mdW5jdGlvbiBkb2NJRChkYXRhKSB7XG4gICAgbGV0IHR5cGUgPSBjb21tb24uTm9kZVR5cGUuZGVmaW5lKHsgaWQ6IHR5cGVBcnJheS5sZW5ndGgsIG5hbWU6IFwiRG9jdW1lbnRcIiwgcHJvcHM6IFtsYW5ndWFnZURhdGFQcm9wLmFkZCgoKSA9PiBkYXRhKV0sIHRvcDogdHJ1ZSB9KTtcbiAgICB0eXBlQXJyYXkucHVzaCh0eXBlKTtcbiAgICByZXR1cm4gdHlwZTtcbn1cblxuZnVuY3Rpb24gYnVpbGRGb3JMaW5lKGxpbmUpIHtcbiAgICByZXR1cm4gbGluZS5sZW5ndGggPD0gNDA5NiAmJiAvW1xcdTA1OTAtXFx1MDVmNFxcdTA2MDAtXFx1MDZmZlxcdTA3MDAtXFx1MDhhY1xcdWZiNTAtXFx1ZmRmZl0vLnRlc3QobGluZSk7XG59XG5mdW5jdGlvbiB0ZXh0SGFzUlRMKHRleHQpIHtcbiAgICBmb3IgKGxldCBpID0gdGV4dC5pdGVyKCk7ICFpLm5leHQoKS5kb25lOylcbiAgICAgICAgaWYgKGJ1aWxkRm9yTGluZShpLnZhbHVlKSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGNoYW5nZUFkZHNSVEwoY2hhbmdlKSB7XG4gICAgbGV0IGFkZGVkID0gZmFsc2U7XG4gICAgY2hhbmdlLml0ZXJDaGFuZ2VzKChmQSwgdEEsIGZCLCB0QiwgaW5zKSA9PiB7XG4gICAgICAgIGlmICghYWRkZWQgJiYgdGV4dEhhc1JUTChpbnMpKVxuICAgICAgICAgICAgYWRkZWQgPSB0cnVlO1xuICAgIH0pO1xuICAgIHJldHVybiBhZGRlZDtcbn1cbmNvbnN0IGFsd2F5c0lzb2xhdGUgPSBzdGF0ZS5GYWNldC5kZWZpbmUoeyBjb21iaW5lOiB2YWx1ZXMgPT4gdmFsdWVzLnNvbWUoeCA9PiB4KSB9KTtcbi8qKlxuTWFrZSBzdXJlIG5vZGVzXG5bbWFya2VkXShodHRwczovL2xlemVyLmNvZGVtaXJyb3IubmV0L2RvY3MvcmVmLyNjb21tb24uTm9kZVByb3BeaXNvbGF0ZSlcbmFzIGlzb2xhdGluZyBmb3IgYmlkaXJlY3Rpb25hbCB0ZXh0IGFyZSByZW5kZXJlZCBpbiBhIHdheSB0aGF0XG5pc29sYXRlcyB0aGVtIGZyb20gdGhlIHN1cnJvdW5kaW5nIHRleHQuXG4qL1xuZnVuY3Rpb24gYmlkaUlzb2xhdGVzKG9wdGlvbnMgPSB7fSkge1xuICAgIGxldCBleHRlbnNpb25zID0gW2lzb2xhdGVNYXJrc107XG4gICAgaWYgKG9wdGlvbnMuYWx3YXlzSXNvbGF0ZSlcbiAgICAgICAgZXh0ZW5zaW9ucy5wdXNoKGFsd2F5c0lzb2xhdGUub2YodHJ1ZSkpO1xuICAgIHJldHVybiBleHRlbnNpb25zO1xufVxuY29uc3QgaXNvbGF0ZU1hcmtzID0gdmlldy5WaWV3UGx1Z2luLmZyb21DbGFzcyhjbGFzcyB7XG4gICAgY29uc3RydWN0b3IodmlldyQxKSB7XG4gICAgICAgIHRoaXMuYWx3YXlzID0gdmlldyQxLnN0YXRlLmZhY2V0KGFsd2F5c0lzb2xhdGUpIHx8XG4gICAgICAgICAgICB2aWV3JDEudGV4dERpcmVjdGlvbiAhPSB2aWV3LkRpcmVjdGlvbi5MVFIgfHxcbiAgICAgICAgICAgIHZpZXckMS5zdGF0ZS5mYWNldCh2aWV3LkVkaXRvclZpZXcucGVyTGluZVRleHREaXJlY3Rpb24pO1xuICAgICAgICB0aGlzLmhhc1JUTCA9ICF0aGlzLmFsd2F5cyAmJiB0ZXh0SGFzUlRMKHZpZXckMS5zdGF0ZS5kb2MpO1xuICAgICAgICB0aGlzLnRyZWUgPSBzeW50YXhUcmVlKHZpZXckMS5zdGF0ZSk7XG4gICAgICAgIHRoaXMuZGVjb3JhdGlvbnMgPSB0aGlzLmFsd2F5cyB8fCB0aGlzLmhhc1JUTCA/IGJ1aWxkRGVjbyh2aWV3JDEsIHRoaXMudHJlZSwgdGhpcy5hbHdheXMpIDogdmlldy5EZWNvcmF0aW9uLm5vbmU7XG4gICAgfVxuICAgIHVwZGF0ZSh1cGRhdGUpIHtcbiAgICAgICAgbGV0IGFsd2F5cyA9IHVwZGF0ZS5zdGF0ZS5mYWNldChhbHdheXNJc29sYXRlKSB8fFxuICAgICAgICAgICAgdXBkYXRlLnZpZXcudGV4dERpcmVjdGlvbiAhPSB2aWV3LkRpcmVjdGlvbi5MVFIgfHxcbiAgICAgICAgICAgIHVwZGF0ZS5zdGF0ZS5mYWNldCh2aWV3LkVkaXRvclZpZXcucGVyTGluZVRleHREaXJlY3Rpb24pO1xuICAgICAgICBpZiAoIWFsd2F5cyAmJiAhdGhpcy5oYXNSVEwgJiYgY2hhbmdlQWRkc1JUTCh1cGRhdGUuY2hhbmdlcykpXG4gICAgICAgICAgICB0aGlzLmhhc1JUTCA9IHRydWU7XG4gICAgICAgIGlmICghYWx3YXlzICYmICF0aGlzLmhhc1JUTClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbGV0IHRyZWUgPSBzeW50YXhUcmVlKHVwZGF0ZS5zdGF0ZSk7XG4gICAgICAgIGlmIChhbHdheXMgIT0gdGhpcy5hbHdheXMgfHwgdHJlZSAhPSB0aGlzLnRyZWUgfHwgdXBkYXRlLmRvY0NoYW5nZWQgfHwgdXBkYXRlLnZpZXdwb3J0Q2hhbmdlZCkge1xuICAgICAgICAgICAgdGhpcy50cmVlID0gdHJlZTtcbiAgICAgICAgICAgIHRoaXMuYWx3YXlzID0gYWx3YXlzO1xuICAgICAgICAgICAgdGhpcy5kZWNvcmF0aW9ucyA9IGJ1aWxkRGVjbyh1cGRhdGUudmlldywgdHJlZSwgYWx3YXlzKTtcbiAgICAgICAgfVxuICAgIH1cbn0sIHtcbiAgICBwcm92aWRlOiBwbHVnaW4gPT4ge1xuICAgICAgICBmdW5jdGlvbiBhY2Nlc3ModmlldyQxKSB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgcmV0dXJuIChfYiA9IChfYSA9IHZpZXckMS5wbHVnaW4ocGx1Z2luKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRlY29yYXRpb25zKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiB2aWV3LkRlY29yYXRpb24ubm9uZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW3ZpZXcuRWRpdG9yVmlldy5vdXRlckRlY29yYXRpb25zLm9mKGFjY2VzcyksXG4gICAgICAgICAgICBzdGF0ZS5QcmVjLmxvd2VzdCh2aWV3LkVkaXRvclZpZXcuYmlkaUlzb2xhdGVkUmFuZ2VzLm9mKGFjY2VzcykpXTtcbiAgICB9XG59KTtcbmZ1bmN0aW9uIGJ1aWxkRGVjbyh2aWV3LCB0cmVlLCBhbHdheXMpIHtcbiAgICBsZXQgZGVjbyA9IG5ldyBzdGF0ZS5SYW5nZVNldEJ1aWxkZXIoKTtcbiAgICBsZXQgcmFuZ2VzID0gdmlldy52aXNpYmxlUmFuZ2VzO1xuICAgIGlmICghYWx3YXlzKVxuICAgICAgICByYW5nZXMgPSBjbGlwUlRMTGluZXMocmFuZ2VzLCB2aWV3LnN0YXRlLmRvYyk7XG4gICAgZm9yIChsZXQgeyBmcm9tLCB0byB9IG9mIHJhbmdlcykge1xuICAgICAgICB0cmVlLml0ZXJhdGUoe1xuICAgICAgICAgICAgZW50ZXI6IG5vZGUgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBpc28gPSBub2RlLnR5cGUucHJvcChjb21tb24uTm9kZVByb3AuaXNvbGF0ZSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzbylcbiAgICAgICAgICAgICAgICAgICAgZGVjby5hZGQobm9kZS5mcm9tLCBub2RlLnRvLCBtYXJrc1tpc29dKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmcm9tLCB0b1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGRlY28uZmluaXNoKCk7XG59XG5mdW5jdGlvbiBjbGlwUlRMTGluZXMocmFuZ2VzLCBkb2MpIHtcbiAgICBsZXQgY3VyID0gZG9jLml0ZXIoKSwgcG9zID0gMCwgcmVzdWx0ID0gW10sIGxhc3QgPSBudWxsO1xuICAgIGZvciAobGV0IHsgZnJvbSwgdG8gfSBvZiByYW5nZXMpIHtcbiAgICAgICAgaWYgKGxhc3QgJiYgbGFzdC50byA+IGZyb20pIHtcbiAgICAgICAgICAgIGZyb20gPSBsYXN0LnRvO1xuICAgICAgICAgICAgaWYgKGZyb20gPj0gdG8pXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvcyArIGN1ci52YWx1ZS5sZW5ndGggPCBmcm9tKSB7XG4gICAgICAgICAgICBjdXIubmV4dChmcm9tIC0gKHBvcyArIGN1ci52YWx1ZS5sZW5ndGgpKTtcbiAgICAgICAgICAgIHBvcyA9IGZyb207XG4gICAgICAgIH1cbiAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgbGV0IHN0YXJ0ID0gcG9zLCBlbmQgPSBwb3MgKyBjdXIudmFsdWUubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKCFjdXIubGluZUJyZWFrICYmIGJ1aWxkRm9yTGluZShjdXIudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxhc3QgJiYgbGFzdC50byA+IHN0YXJ0IC0gMTApXG4gICAgICAgICAgICAgICAgICAgIGxhc3QudG8gPSBNYXRoLm1pbih0bywgZW5kKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGxhc3QgPSB7IGZyb206IHN0YXJ0LCB0bzogTWF0aC5taW4odG8sIGVuZCkgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZW5kID49IHRvKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgcG9zID0gZW5kO1xuICAgICAgICAgICAgY3VyLm5leHQoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuY29uc3QgbWFya3MgPSB7XG4gICAgcnRsOiB2aWV3LkRlY29yYXRpb24ubWFyayh7IGNsYXNzOiBcImNtLWlzb1wiLCBpbmNsdXNpdmU6IHRydWUsIGF0dHJpYnV0ZXM6IHsgZGlyOiBcInJ0bFwiIH0sIGJpZGlJc29sYXRlOiB2aWV3LkRpcmVjdGlvbi5SVEwgfSksXG4gICAgbHRyOiB2aWV3LkRlY29yYXRpb24ubWFyayh7IGNsYXNzOiBcImNtLWlzb1wiLCBpbmNsdXNpdmU6IHRydWUsIGF0dHJpYnV0ZXM6IHsgZGlyOiBcImx0clwiIH0sIGJpZGlJc29sYXRlOiB2aWV3LkRpcmVjdGlvbi5MVFIgfSksXG4gICAgYXV0bzogdmlldy5EZWNvcmF0aW9uLm1hcmsoeyBjbGFzczogXCJjbS1pc29cIiwgaW5jbHVzaXZlOiB0cnVlLCBhdHRyaWJ1dGVzOiB7IGRpcjogXCJhdXRvXCIgfSwgYmlkaUlzb2xhdGU6IG51bGwgfSlcbn07XG5cbmV4cG9ydHMuRG9jSW5wdXQgPSBEb2NJbnB1dDtcbmV4cG9ydHMuSGlnaGxpZ2h0U3R5bGUgPSBIaWdobGlnaHRTdHlsZTtcbmV4cG9ydHMuSW5kZW50Q29udGV4dCA9IEluZGVudENvbnRleHQ7XG5leHBvcnRzLkxSTGFuZ3VhZ2UgPSBMUkxhbmd1YWdlO1xuZXhwb3J0cy5MYW5ndWFnZSA9IExhbmd1YWdlO1xuZXhwb3J0cy5MYW5ndWFnZURlc2NyaXB0aW9uID0gTGFuZ3VhZ2VEZXNjcmlwdGlvbjtcbmV4cG9ydHMuTGFuZ3VhZ2VTdXBwb3J0ID0gTGFuZ3VhZ2VTdXBwb3J0O1xuZXhwb3J0cy5QYXJzZUNvbnRleHQgPSBQYXJzZUNvbnRleHQ7XG5leHBvcnRzLlN0cmVhbUxhbmd1YWdlID0gU3RyZWFtTGFuZ3VhZ2U7XG5leHBvcnRzLlN0cmluZ1N0cmVhbSA9IFN0cmluZ1N0cmVhbTtcbmV4cG9ydHMuVHJlZUluZGVudENvbnRleHQgPSBUcmVlSW5kZW50Q29udGV4dDtcbmV4cG9ydHMuYmlkaUlzb2xhdGVzID0gYmlkaUlzb2xhdGVzO1xuZXhwb3J0cy5icmFja2V0TWF0Y2hpbmcgPSBicmFja2V0TWF0Y2hpbmc7XG5leHBvcnRzLmJyYWNrZXRNYXRjaGluZ0hhbmRsZSA9IGJyYWNrZXRNYXRjaGluZ0hhbmRsZTtcbmV4cG9ydHMuY29kZUZvbGRpbmcgPSBjb2RlRm9sZGluZztcbmV4cG9ydHMuY29udGludWVkSW5kZW50ID0gY29udGludWVkSW5kZW50O1xuZXhwb3J0cy5kZWZhdWx0SGlnaGxpZ2h0U3R5bGUgPSBkZWZhdWx0SGlnaGxpZ2h0U3R5bGU7XG5leHBvcnRzLmRlZmluZUxhbmd1YWdlRmFjZXQgPSBkZWZpbmVMYW5ndWFnZUZhY2V0O1xuZXhwb3J0cy5kZWxpbWl0ZWRJbmRlbnQgPSBkZWxpbWl0ZWRJbmRlbnQ7XG5leHBvcnRzLmVuc3VyZVN5bnRheFRyZWUgPSBlbnN1cmVTeW50YXhUcmVlO1xuZXhwb3J0cy5mbGF0SW5kZW50ID0gZmxhdEluZGVudDtcbmV4cG9ydHMuZm9sZEFsbCA9IGZvbGRBbGw7XG5leHBvcnRzLmZvbGRDb2RlID0gZm9sZENvZGU7XG5leHBvcnRzLmZvbGRFZmZlY3QgPSBmb2xkRWZmZWN0O1xuZXhwb3J0cy5mb2xkR3V0dGVyID0gZm9sZEd1dHRlcjtcbmV4cG9ydHMuZm9sZEluc2lkZSA9IGZvbGRJbnNpZGU7XG5leHBvcnRzLmZvbGRLZXltYXAgPSBmb2xkS2V5bWFwO1xuZXhwb3J0cy5mb2xkTm9kZVByb3AgPSBmb2xkTm9kZVByb3A7XG5leHBvcnRzLmZvbGRTZXJ2aWNlID0gZm9sZFNlcnZpY2U7XG5leHBvcnRzLmZvbGRTdGF0ZSA9IGZvbGRTdGF0ZTtcbmV4cG9ydHMuZm9sZGFibGUgPSBmb2xkYWJsZTtcbmV4cG9ydHMuZm9sZGVkUmFuZ2VzID0gZm9sZGVkUmFuZ2VzO1xuZXhwb3J0cy5mb3JjZVBhcnNpbmcgPSBmb3JjZVBhcnNpbmc7XG5leHBvcnRzLmdldEluZGVudFVuaXQgPSBnZXRJbmRlbnRVbml0O1xuZXhwb3J0cy5nZXRJbmRlbnRhdGlvbiA9IGdldEluZGVudGF0aW9uO1xuZXhwb3J0cy5oaWdobGlnaHRpbmdGb3IgPSBoaWdobGlnaHRpbmdGb3I7XG5leHBvcnRzLmluZGVudE5vZGVQcm9wID0gaW5kZW50Tm9kZVByb3A7XG5leHBvcnRzLmluZGVudE9uSW5wdXQgPSBpbmRlbnRPbklucHV0O1xuZXhwb3J0cy5pbmRlbnRSYW5nZSA9IGluZGVudFJhbmdlO1xuZXhwb3J0cy5pbmRlbnRTZXJ2aWNlID0gaW5kZW50U2VydmljZTtcbmV4cG9ydHMuaW5kZW50U3RyaW5nID0gaW5kZW50U3RyaW5nO1xuZXhwb3J0cy5pbmRlbnRVbml0ID0gaW5kZW50VW5pdDtcbmV4cG9ydHMubGFuZ3VhZ2UgPSBsYW5ndWFnZTtcbmV4cG9ydHMubGFuZ3VhZ2VEYXRhUHJvcCA9IGxhbmd1YWdlRGF0YVByb3A7XG5leHBvcnRzLm1hdGNoQnJhY2tldHMgPSBtYXRjaEJyYWNrZXRzO1xuZXhwb3J0cy5zdWJsYW5ndWFnZVByb3AgPSBzdWJsYW5ndWFnZVByb3A7XG5leHBvcnRzLnN5bnRheEhpZ2hsaWdodGluZyA9IHN5bnRheEhpZ2hsaWdodGluZztcbmV4cG9ydHMuc3ludGF4UGFyc2VyUnVubmluZyA9IHN5bnRheFBhcnNlclJ1bm5pbmc7XG5leHBvcnRzLnN5bnRheFRyZWUgPSBzeW50YXhUcmVlO1xuZXhwb3J0cy5zeW50YXhUcmVlQXZhaWxhYmxlID0gc3ludGF4VHJlZUF2YWlsYWJsZTtcbmV4cG9ydHMudG9nZ2xlRm9sZCA9IHRvZ2dsZUZvbGQ7XG5leHBvcnRzLnVuZm9sZEFsbCA9IHVuZm9sZEFsbDtcbmV4cG9ydHMudW5mb2xkQ29kZSA9IHVuZm9sZENvZGU7XG5leHBvcnRzLnVuZm9sZEVmZmVjdCA9IHVuZm9sZEVmZmVjdDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHZpZXcgPSByZXF1aXJlKCdAY29kZW1pcnJvci92aWV3Jyk7XG52YXIgc3RhdGUgPSByZXF1aXJlKCdAY29kZW1pcnJvci9zdGF0ZScpO1xudmFyIGVsdCA9IHJlcXVpcmUoJ2NyZWx0Jyk7XG5cbmNsYXNzIFNlbGVjdGVkRGlhZ25vc3RpYyB7XG4gICAgY29uc3RydWN0b3IoZnJvbSwgdG8sIGRpYWdub3N0aWMpIHtcbiAgICAgICAgdGhpcy5mcm9tID0gZnJvbTtcbiAgICAgICAgdGhpcy50byA9IHRvO1xuICAgICAgICB0aGlzLmRpYWdub3N0aWMgPSBkaWFnbm9zdGljO1xuICAgIH1cbn1cbmNsYXNzIExpbnRTdGF0ZSB7XG4gICAgY29uc3RydWN0b3IoZGlhZ25vc3RpY3MsIHBhbmVsLCBzZWxlY3RlZCkge1xuICAgICAgICB0aGlzLmRpYWdub3N0aWNzID0gZGlhZ25vc3RpY3M7XG4gICAgICAgIHRoaXMucGFuZWwgPSBwYW5lbDtcbiAgICAgICAgdGhpcy5zZWxlY3RlZCA9IHNlbGVjdGVkO1xuICAgIH1cbiAgICBzdGF0aWMgaW5pdChkaWFnbm9zdGljcywgcGFuZWwsIHN0YXRlKSB7XG4gICAgICAgIC8vIEZpbHRlciB0aGUgbGlzdCBvZiBkaWFnbm9zdGljcyBmb3Igd2hpY2ggdG8gY3JlYXRlIG1hcmtlcnNcbiAgICAgICAgbGV0IG1hcmtlZERpYWdub3N0aWNzID0gZGlhZ25vc3RpY3M7XG4gICAgICAgIGxldCBkaWFnbm9zdGljRmlsdGVyID0gc3RhdGUuZmFjZXQobGludENvbmZpZykubWFya2VyRmlsdGVyO1xuICAgICAgICBpZiAoZGlhZ25vc3RpY0ZpbHRlcilcbiAgICAgICAgICAgIG1hcmtlZERpYWdub3N0aWNzID0gZGlhZ25vc3RpY0ZpbHRlcihtYXJrZWREaWFnbm9zdGljcywgc3RhdGUpO1xuICAgICAgICBsZXQgcmFuZ2VzID0gdmlldy5EZWNvcmF0aW9uLnNldChtYXJrZWREaWFnbm9zdGljcy5tYXAoKGQpID0+IHtcbiAgICAgICAgICAgIC8vIEZvciB6ZXJvLWxlbmd0aCByYW5nZXMgb3IgcmFuZ2VzIGNvdmVyaW5nIG9ubHkgYSBsaW5lIGJyZWFrLCBjcmVhdGUgYSB3aWRnZXRcbiAgICAgICAgICAgIHJldHVybiBkLmZyb20gPT0gZC50byB8fCAoZC5mcm9tID09IGQudG8gLSAxICYmIHN0YXRlLmRvYy5saW5lQXQoZC5mcm9tKS50byA9PSBkLmZyb20pXG4gICAgICAgICAgICAgICAgPyB2aWV3LkRlY29yYXRpb24ud2lkZ2V0KHtcbiAgICAgICAgICAgICAgICAgICAgd2lkZ2V0OiBuZXcgRGlhZ25vc3RpY1dpZGdldChkKSxcbiAgICAgICAgICAgICAgICAgICAgZGlhZ25vc3RpYzogZFxuICAgICAgICAgICAgICAgIH0pLnJhbmdlKGQuZnJvbSlcbiAgICAgICAgICAgICAgICA6IHZpZXcuRGVjb3JhdGlvbi5tYXJrKHtcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczogeyBjbGFzczogXCJjbS1saW50UmFuZ2UgY20tbGludFJhbmdlLVwiICsgZC5zZXZlcml0eSArIChkLm1hcmtDbGFzcyA/IFwiIFwiICsgZC5tYXJrQ2xhc3MgOiBcIlwiKSB9LFxuICAgICAgICAgICAgICAgICAgICBkaWFnbm9zdGljOiBkXG4gICAgICAgICAgICAgICAgfSkucmFuZ2UoZC5mcm9tLCBkLnRvKTtcbiAgICAgICAgfSksIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IExpbnRTdGF0ZShyYW5nZXMsIHBhbmVsLCBmaW5kRGlhZ25vc3RpYyhyYW5nZXMpKTtcbiAgICB9XG59XG5mdW5jdGlvbiBmaW5kRGlhZ25vc3RpYyhkaWFnbm9zdGljcywgZGlhZ25vc3RpYyA9IG51bGwsIGFmdGVyID0gMCkge1xuICAgIGxldCBmb3VuZCA9IG51bGw7XG4gICAgZGlhZ25vc3RpY3MuYmV0d2VlbihhZnRlciwgMWU5LCAoZnJvbSwgdG8sIHsgc3BlYyB9KSA9PiB7XG4gICAgICAgIGlmIChkaWFnbm9zdGljICYmIHNwZWMuZGlhZ25vc3RpYyAhPSBkaWFnbm9zdGljKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBmb3VuZCA9IG5ldyBTZWxlY3RlZERpYWdub3N0aWMoZnJvbSwgdG8sIHNwZWMuZGlhZ25vc3RpYyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcbiAgICByZXR1cm4gZm91bmQ7XG59XG5mdW5jdGlvbiBoaWRlVG9vbHRpcCh0ciwgdG9vbHRpcCkge1xuICAgIGxldCBmcm9tID0gdG9vbHRpcC5wb3MsIHRvID0gdG9vbHRpcC5lbmQgfHwgZnJvbTtcbiAgICBsZXQgcmVzdWx0ID0gdHIuc3RhdGUuZmFjZXQobGludENvbmZpZykuaGlkZU9uKHRyLCBmcm9tLCB0byk7XG4gICAgaWYgKHJlc3VsdCAhPSBudWxsKVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIGxldCBsaW5lID0gdHIuc3RhcnRTdGF0ZS5kb2MubGluZUF0KHRvb2x0aXAucG9zKTtcbiAgICByZXR1cm4gISEodHIuZWZmZWN0cy5zb21lKGUgPT4gZS5pcyhzZXREaWFnbm9zdGljc0VmZmVjdCkpIHx8IHRyLmNoYW5nZXMudG91Y2hlc1JhbmdlKGxpbmUuZnJvbSwgTWF0aC5tYXgobGluZS50bywgdG8pKSk7XG59XG5mdW5jdGlvbiBtYXliZUVuYWJsZUxpbnQoc3RhdGUkMSwgZWZmZWN0cykge1xuICAgIHJldHVybiBzdGF0ZSQxLmZpZWxkKGxpbnRTdGF0ZSwgZmFsc2UpID8gZWZmZWN0cyA6IGVmZmVjdHMuY29uY2F0KHN0YXRlLlN0YXRlRWZmZWN0LmFwcGVuZENvbmZpZy5vZihsaW50RXh0ZW5zaW9ucykpO1xufVxuLyoqXG5SZXR1cm5zIGEgdHJhbnNhY3Rpb24gc3BlYyB3aGljaCB1cGRhdGVzIHRoZSBjdXJyZW50IHNldCBvZlxuZGlhZ25vc3RpY3MsIGFuZCBlbmFibGVzIHRoZSBsaW50IGV4dGVuc2lvbiBpZiBpZiB3YXNuJ3QgYWxyZWFkeVxuYWN0aXZlLlxuKi9cbmZ1bmN0aW9uIHNldERpYWdub3N0aWNzKHN0YXRlLCBkaWFnbm9zdGljcykge1xuICAgIHJldHVybiB7XG4gICAgICAgIGVmZmVjdHM6IG1heWJlRW5hYmxlTGludChzdGF0ZSwgW3NldERpYWdub3N0aWNzRWZmZWN0Lm9mKGRpYWdub3N0aWNzKV0pXG4gICAgfTtcbn1cbi8qKlxuVGhlIHN0YXRlIGVmZmVjdCB0aGF0IHVwZGF0ZXMgdGhlIHNldCBvZiBhY3RpdmUgZGlhZ25vc3RpY3MuIENhblxuYmUgdXNlZnVsIHdoZW4gd3JpdGluZyBhbiBleHRlbnNpb24gdGhhdCBuZWVkcyB0byB0cmFjayB0aGVzZS5cbiovXG5jb25zdCBzZXREaWFnbm9zdGljc0VmZmVjdCA9IHN0YXRlLlN0YXRlRWZmZWN0LmRlZmluZSgpO1xuY29uc3QgdG9nZ2xlUGFuZWwgPSBzdGF0ZS5TdGF0ZUVmZmVjdC5kZWZpbmUoKTtcbmNvbnN0IG1vdmVQYW5lbFNlbGVjdGlvbiA9IHN0YXRlLlN0YXRlRWZmZWN0LmRlZmluZSgpO1xuY29uc3QgbGludFN0YXRlID0gc3RhdGUuU3RhdGVGaWVsZC5kZWZpbmUoe1xuICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMaW50U3RhdGUodmlldy5EZWNvcmF0aW9uLm5vbmUsIG51bGwsIG51bGwpO1xuICAgIH0sXG4gICAgdXBkYXRlKHZhbHVlLCB0cikge1xuICAgICAgICBpZiAodHIuZG9jQ2hhbmdlZCAmJiB2YWx1ZS5kaWFnbm9zdGljcy5zaXplKSB7XG4gICAgICAgICAgICBsZXQgbWFwcGVkID0gdmFsdWUuZGlhZ25vc3RpY3MubWFwKHRyLmNoYW5nZXMpLCBzZWxlY3RlZCA9IG51bGwsIHBhbmVsID0gdmFsdWUucGFuZWw7XG4gICAgICAgICAgICBpZiAodmFsdWUuc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICBsZXQgc2VsUG9zID0gdHIuY2hhbmdlcy5tYXBQb3ModmFsdWUuc2VsZWN0ZWQuZnJvbSwgMSk7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQgPSBmaW5kRGlhZ25vc3RpYyhtYXBwZWQsIHZhbHVlLnNlbGVjdGVkLmRpYWdub3N0aWMsIHNlbFBvcykgfHwgZmluZERpYWdub3N0aWMobWFwcGVkLCBudWxsLCBzZWxQb3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFtYXBwZWQuc2l6ZSAmJiBwYW5lbCAmJiB0ci5zdGF0ZS5mYWNldChsaW50Q29uZmlnKS5hdXRvUGFuZWwpXG4gICAgICAgICAgICAgICAgcGFuZWwgPSBudWxsO1xuICAgICAgICAgICAgdmFsdWUgPSBuZXcgTGludFN0YXRlKG1hcHBlZCwgcGFuZWwsIHNlbGVjdGVkKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBlZmZlY3Qgb2YgdHIuZWZmZWN0cykge1xuICAgICAgICAgICAgaWYgKGVmZmVjdC5pcyhzZXREaWFnbm9zdGljc0VmZmVjdCkpIHtcbiAgICAgICAgICAgICAgICBsZXQgcGFuZWwgPSAhdHIuc3RhdGUuZmFjZXQobGludENvbmZpZykuYXV0b1BhbmVsID8gdmFsdWUucGFuZWwgOiBlZmZlY3QudmFsdWUubGVuZ3RoID8gTGludFBhbmVsLm9wZW4gOiBudWxsO1xuICAgICAgICAgICAgICAgIHZhbHVlID0gTGludFN0YXRlLmluaXQoZWZmZWN0LnZhbHVlLCBwYW5lbCwgdHIuc3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZWZmZWN0LmlzKHRvZ2dsZVBhbmVsKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gbmV3IExpbnRTdGF0ZSh2YWx1ZS5kaWFnbm9zdGljcywgZWZmZWN0LnZhbHVlID8gTGludFBhbmVsLm9wZW4gOiBudWxsLCB2YWx1ZS5zZWxlY3RlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChlZmZlY3QuaXMobW92ZVBhbmVsU2VsZWN0aW9uKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gbmV3IExpbnRTdGF0ZSh2YWx1ZS5kaWFnbm9zdGljcywgdmFsdWUucGFuZWwsIGVmZmVjdC52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgcHJvdmlkZTogZiA9PiBbdmlldy5zaG93UGFuZWwuZnJvbShmLCB2YWwgPT4gdmFsLnBhbmVsKSxcbiAgICAgICAgdmlldy5FZGl0b3JWaWV3LmRlY29yYXRpb25zLmZyb20oZiwgcyA9PiBzLmRpYWdub3N0aWNzKV1cbn0pO1xuLyoqXG5SZXR1cm5zIHRoZSBudW1iZXIgb2YgYWN0aXZlIGxpbnQgZGlhZ25vc3RpY3MgaW4gdGhlIGdpdmVuIHN0YXRlLlxuKi9cbmZ1bmN0aW9uIGRpYWdub3N0aWNDb3VudChzdGF0ZSkge1xuICAgIGxldCBsaW50ID0gc3RhdGUuZmllbGQobGludFN0YXRlLCBmYWxzZSk7XG4gICAgcmV0dXJuIGxpbnQgPyBsaW50LmRpYWdub3N0aWNzLnNpemUgOiAwO1xufVxuY29uc3QgYWN0aXZlTWFyayA9IHZpZXcuRGVjb3JhdGlvbi5tYXJrKHsgY2xhc3M6IFwiY20tbGludFJhbmdlIGNtLWxpbnRSYW5nZS1hY3RpdmVcIiB9KTtcbmZ1bmN0aW9uIGxpbnRUb29sdGlwKHZpZXcsIHBvcywgc2lkZSkge1xuICAgIGxldCB7IGRpYWdub3N0aWNzIH0gPSB2aWV3LnN0YXRlLmZpZWxkKGxpbnRTdGF0ZSk7XG4gICAgbGV0IGZvdW5kID0gW10sIHN0YWNrU3RhcnQgPSAyZTgsIHN0YWNrRW5kID0gMDtcbiAgICBkaWFnbm9zdGljcy5iZXR3ZWVuKHBvcyAtIChzaWRlIDwgMCA/IDEgOiAwKSwgcG9zICsgKHNpZGUgPiAwID8gMSA6IDApLCAoZnJvbSwgdG8sIHsgc3BlYyB9KSA9PiB7XG4gICAgICAgIGlmIChwb3MgPj0gZnJvbSAmJiBwb3MgPD0gdG8gJiZcbiAgICAgICAgICAgIChmcm9tID09IHRvIHx8ICgocG9zID4gZnJvbSB8fCBzaWRlID4gMCkgJiYgKHBvcyA8IHRvIHx8IHNpZGUgPCAwKSkpKSB7XG4gICAgICAgICAgICBmb3VuZC5wdXNoKHNwZWMuZGlhZ25vc3RpYyk7XG4gICAgICAgICAgICBzdGFja1N0YXJ0ID0gTWF0aC5taW4oZnJvbSwgc3RhY2tTdGFydCk7XG4gICAgICAgICAgICBzdGFja0VuZCA9IE1hdGgubWF4KHRvLCBzdGFja0VuZCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBsZXQgZGlhZ25vc3RpY0ZpbHRlciA9IHZpZXcuc3RhdGUuZmFjZXQobGludENvbmZpZykudG9vbHRpcEZpbHRlcjtcbiAgICBpZiAoZGlhZ25vc3RpY0ZpbHRlcilcbiAgICAgICAgZm91bmQgPSBkaWFnbm9zdGljRmlsdGVyKGZvdW5kLCB2aWV3LnN0YXRlKTtcbiAgICBpZiAoIWZvdW5kLmxlbmd0aClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcG9zOiBzdGFja1N0YXJ0LFxuICAgICAgICBlbmQ6IHN0YWNrRW5kLFxuICAgICAgICBhYm92ZTogdmlldy5zdGF0ZS5kb2MubGluZUF0KHN0YWNrU3RhcnQpLnRvIDwgc3RhY2tFbmQsXG4gICAgICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB7IGRvbTogZGlhZ25vc3RpY3NUb29sdGlwKHZpZXcsIGZvdW5kKSB9O1xuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGRpYWdub3N0aWNzVG9vbHRpcCh2aWV3LCBkaWFnbm9zdGljcykge1xuICAgIHJldHVybiBlbHQoXCJ1bFwiLCB7IGNsYXNzOiBcImNtLXRvb2x0aXAtbGludFwiIH0sIGRpYWdub3N0aWNzLm1hcChkID0+IHJlbmRlckRpYWdub3N0aWModmlldywgZCwgZmFsc2UpKSk7XG59XG4vKipcbkNvbW1hbmQgdG8gb3BlbiBhbmQgZm9jdXMgdGhlIGxpbnQgcGFuZWwuXG4qL1xuY29uc3Qgb3BlbkxpbnRQYW5lbCA9ICh2aWV3JDEpID0+IHtcbiAgICBsZXQgZmllbGQgPSB2aWV3JDEuc3RhdGUuZmllbGQobGludFN0YXRlLCBmYWxzZSk7XG4gICAgaWYgKCFmaWVsZCB8fCAhZmllbGQucGFuZWwpXG4gICAgICAgIHZpZXckMS5kaXNwYXRjaCh7IGVmZmVjdHM6IG1heWJlRW5hYmxlTGludCh2aWV3JDEuc3RhdGUsIFt0b2dnbGVQYW5lbC5vZih0cnVlKV0pIH0pO1xuICAgIGxldCBwYW5lbCA9IHZpZXcuZ2V0UGFuZWwodmlldyQxLCBMaW50UGFuZWwub3Blbik7XG4gICAgaWYgKHBhbmVsKVxuICAgICAgICBwYW5lbC5kb20ucXVlcnlTZWxlY3RvcihcIi5jbS1wYW5lbC1saW50IHVsXCIpLmZvY3VzKCk7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuLyoqXG5Db21tYW5kIHRvIGNsb3NlIHRoZSBsaW50IHBhbmVsLCB3aGVuIG9wZW4uXG4qL1xuY29uc3QgY2xvc2VMaW50UGFuZWwgPSAodmlldykgPT4ge1xuICAgIGxldCBmaWVsZCA9IHZpZXcuc3RhdGUuZmllbGQobGludFN0YXRlLCBmYWxzZSk7XG4gICAgaWYgKCFmaWVsZCB8fCAhZmllbGQucGFuZWwpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB2aWV3LmRpc3BhdGNoKHsgZWZmZWN0czogdG9nZ2xlUGFuZWwub2YoZmFsc2UpIH0pO1xuICAgIHJldHVybiB0cnVlO1xufTtcbi8qKlxuTW92ZSB0aGUgc2VsZWN0aW9uIHRvIHRoZSBuZXh0IGRpYWdub3N0aWMuXG4qL1xuY29uc3QgbmV4dERpYWdub3N0aWMgPSAodmlldykgPT4ge1xuICAgIGxldCBmaWVsZCA9IHZpZXcuc3RhdGUuZmllbGQobGludFN0YXRlLCBmYWxzZSk7XG4gICAgaWYgKCFmaWVsZClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGxldCBzZWwgPSB2aWV3LnN0YXRlLnNlbGVjdGlvbi5tYWluLCBuZXh0ID0gZmllbGQuZGlhZ25vc3RpY3MuaXRlcihzZWwudG8gKyAxKTtcbiAgICBpZiAoIW5leHQudmFsdWUpIHtcbiAgICAgICAgbmV4dCA9IGZpZWxkLmRpYWdub3N0aWNzLml0ZXIoMCk7XG4gICAgICAgIGlmICghbmV4dC52YWx1ZSB8fCBuZXh0LmZyb20gPT0gc2VsLmZyb20gJiYgbmV4dC50byA9PSBzZWwudG8pXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZpZXcuZGlzcGF0Y2goeyBzZWxlY3Rpb246IHsgYW5jaG9yOiBuZXh0LmZyb20sIGhlYWQ6IG5leHQudG8gfSwgc2Nyb2xsSW50b1ZpZXc6IHRydWUgfSk7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuLyoqXG5Nb3ZlIHRoZSBzZWxlY3Rpb24gdG8gdGhlIHByZXZpb3VzIGRpYWdub3N0aWMuXG4qL1xuY29uc3QgcHJldmlvdXNEaWFnbm9zdGljID0gKHZpZXcpID0+IHtcbiAgICBsZXQgeyBzdGF0ZSB9ID0gdmlldywgZmllbGQgPSBzdGF0ZS5maWVsZChsaW50U3RhdGUsIGZhbHNlKTtcbiAgICBpZiAoIWZpZWxkKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0IHNlbCA9IHN0YXRlLnNlbGVjdGlvbi5tYWluO1xuICAgIGxldCBwcmV2RnJvbSwgcHJldlRvLCBsYXN0RnJvbSwgbGFzdFRvO1xuICAgIGZpZWxkLmRpYWdub3N0aWNzLmJldHdlZW4oMCwgc3RhdGUuZG9jLmxlbmd0aCwgKGZyb20sIHRvKSA9PiB7XG4gICAgICAgIGlmICh0byA8IHNlbC50byAmJiAocHJldkZyb20gPT0gbnVsbCB8fCBwcmV2RnJvbSA8IGZyb20pKSB7XG4gICAgICAgICAgICBwcmV2RnJvbSA9IGZyb207XG4gICAgICAgICAgICBwcmV2VG8gPSB0bztcbiAgICAgICAgfVxuICAgICAgICBpZiAobGFzdEZyb20gPT0gbnVsbCB8fCBmcm9tID4gbGFzdEZyb20pIHtcbiAgICAgICAgICAgIGxhc3RGcm9tID0gZnJvbTtcbiAgICAgICAgICAgIGxhc3RUbyA9IHRvO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGxhc3RGcm9tID09IG51bGwgfHwgcHJldkZyb20gPT0gbnVsbCAmJiBsYXN0RnJvbSA9PSBzZWwuZnJvbSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHZpZXcuZGlzcGF0Y2goeyBzZWxlY3Rpb246IHsgYW5jaG9yOiBwcmV2RnJvbSAhPT0gbnVsbCAmJiBwcmV2RnJvbSAhPT0gdm9pZCAwID8gcHJldkZyb20gOiBsYXN0RnJvbSwgaGVhZDogcHJldlRvICE9PSBudWxsICYmIHByZXZUbyAhPT0gdm9pZCAwID8gcHJldlRvIDogbGFzdFRvIH0sIHNjcm9sbEludG9WaWV3OiB0cnVlIH0pO1xuICAgIHJldHVybiB0cnVlO1xufTtcbi8qKlxuQSBzZXQgb2YgZGVmYXVsdCBrZXkgYmluZGluZ3MgZm9yIHRoZSBsaW50IGZ1bmN0aW9uYWxpdHkuXG5cbi0gQ3RybC1TaGlmdC1tIChDbWQtU2hpZnQtbSBvbiBtYWNPUyk6IFtgb3BlbkxpbnRQYW5lbGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jbGludC5vcGVuTGludFBhbmVsKVxuLSBGODogW2BuZXh0RGlhZ25vc3RpY2BdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jbGludC5uZXh0RGlhZ25vc3RpYylcbiovXG5jb25zdCBsaW50S2V5bWFwID0gW1xuICAgIHsga2V5OiBcIk1vZC1TaGlmdC1tXCIsIHJ1bjogb3BlbkxpbnRQYW5lbCwgcHJldmVudERlZmF1bHQ6IHRydWUgfSxcbiAgICB7IGtleTogXCJGOFwiLCBydW46IG5leHREaWFnbm9zdGljIH1cbl07XG5jb25zdCBsaW50UGx1Z2luID0gdmlldy5WaWV3UGx1Z2luLmZyb21DbGFzcyhjbGFzcyB7XG4gICAgY29uc3RydWN0b3Iodmlldykge1xuICAgICAgICB0aGlzLnZpZXcgPSB2aWV3O1xuICAgICAgICB0aGlzLnRpbWVvdXQgPSAtMTtcbiAgICAgICAgdGhpcy5zZXQgPSB0cnVlO1xuICAgICAgICBsZXQgeyBkZWxheSB9ID0gdmlldy5zdGF0ZS5mYWNldChsaW50Q29uZmlnKTtcbiAgICAgICAgdGhpcy5saW50VGltZSA9IERhdGUubm93KCkgKyBkZWxheTtcbiAgICAgICAgdGhpcy5ydW4gPSB0aGlzLnJ1bi5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KHRoaXMucnVuLCBkZWxheSk7XG4gICAgfVxuICAgIHJ1bigpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG4gICAgICAgIGxldCBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICBpZiAobm93IDwgdGhpcy5saW50VGltZSAtIDEwKSB7XG4gICAgICAgICAgICB0aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KHRoaXMucnVuLCB0aGlzLmxpbnRUaW1lIC0gbm93KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0ID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgeyBzdGF0ZSB9ID0gdGhpcy52aWV3LCB7IHNvdXJjZXMgfSA9IHN0YXRlLmZhY2V0KGxpbnRDb25maWcpO1xuICAgICAgICAgICAgaWYgKHNvdXJjZXMubGVuZ3RoKVxuICAgICAgICAgICAgICAgIFByb21pc2UuYWxsKHNvdXJjZXMubWFwKHNvdXJjZSA9PiBQcm9taXNlLnJlc29sdmUoc291cmNlKHRoaXMudmlldykpKSkudGhlbihhbm5vdGF0aW9ucyA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBhbGwgPSBhbm5vdGF0aW9ucy5yZWR1Y2UoKGEsIGIpID0+IGEuY29uY2F0KGIpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudmlldy5zdGF0ZS5kb2MgPT0gc3RhdGUuZG9jKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3LmRpc3BhdGNoKHNldERpYWdub3N0aWNzKHRoaXMudmlldy5zdGF0ZSwgYWxsKSk7XG4gICAgICAgICAgICAgICAgfSwgZXJyb3IgPT4geyB2aWV3LmxvZ0V4Y2VwdGlvbih0aGlzLnZpZXcuc3RhdGUsIGVycm9yKTsgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlKHVwZGF0ZSkge1xuICAgICAgICBsZXQgY29uZmlnID0gdXBkYXRlLnN0YXRlLmZhY2V0KGxpbnRDb25maWcpO1xuICAgICAgICBpZiAodXBkYXRlLmRvY0NoYW5nZWQgfHwgY29uZmlnICE9IHVwZGF0ZS5zdGFydFN0YXRlLmZhY2V0KGxpbnRDb25maWcpIHx8XG4gICAgICAgICAgICBjb25maWcubmVlZHNSZWZyZXNoICYmIGNvbmZpZy5uZWVkc1JlZnJlc2godXBkYXRlKSkge1xuICAgICAgICAgICAgdGhpcy5saW50VGltZSA9IERhdGUubm93KCkgKyBjb25maWcuZGVsYXk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuc2V0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQodGhpcy5ydW4sIGNvbmZpZy5kZWxheSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yY2UoKSB7XG4gICAgICAgIGlmICh0aGlzLnNldCkge1xuICAgICAgICAgICAgdGhpcy5saW50VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgICAgICB0aGlzLnJ1bigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xuICAgIH1cbn0pO1xuY29uc3QgbGludENvbmZpZyA9IHN0YXRlLkZhY2V0LmRlZmluZSh7XG4gICAgY29tYmluZShpbnB1dCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7IHNvdXJjZXM6IGlucHV0Lm1hcChpID0+IGkuc291cmNlKS5maWx0ZXIoeCA9PiB4ICE9IG51bGwpIH0sIHN0YXRlLmNvbWJpbmVDb25maWcoaW5wdXQubWFwKGkgPT4gaS5jb25maWcpLCB7XG4gICAgICAgICAgICBkZWxheTogNzUwLFxuICAgICAgICAgICAgbWFya2VyRmlsdGVyOiBudWxsLFxuICAgICAgICAgICAgdG9vbHRpcEZpbHRlcjogbnVsbCxcbiAgICAgICAgICAgIG5lZWRzUmVmcmVzaDogbnVsbCxcbiAgICAgICAgICAgIGhpZGVPbjogKCkgPT4gbnVsbCxcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgbmVlZHNSZWZyZXNoOiAoYSwgYikgPT4gIWEgPyBiIDogIWIgPyBhIDogdSA9PiBhKHUpIHx8IGIodSlcbiAgICAgICAgfSkpO1xuICAgIH1cbn0pO1xuLyoqXG5HaXZlbiBhIGRpYWdub3N0aWMgc291cmNlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgYW4gZXh0ZW5zaW9uIHRoYXRcbmVuYWJsZXMgbGludGluZyB3aXRoIHRoYXQgc291cmNlLiBJdCB3aWxsIGJlIGNhbGxlZCB3aGVuZXZlciB0aGVcbmVkaXRvciBpcyBpZGxlIChhZnRlciBpdHMgY29udGVudCBjaGFuZ2VkKS4gSWYgYG51bGxgIGlzIGdpdmVuIGFzXG5zb3VyY2UsIHRoaXMgb25seSBjb25maWd1cmVzIHRoZSBsaW50IGV4dGVuc2lvbi5cbiovXG5mdW5jdGlvbiBsaW50ZXIoc291cmNlLCBjb25maWcgPSB7fSkge1xuICAgIHJldHVybiBbXG4gICAgICAgIGxpbnRDb25maWcub2YoeyBzb3VyY2UsIGNvbmZpZyB9KSxcbiAgICAgICAgbGludFBsdWdpbixcbiAgICAgICAgbGludEV4dGVuc2lvbnNcbiAgICBdO1xufVxuLyoqXG5Gb3JjZXMgYW55IGxpbnRlcnMgW2NvbmZpZ3VyZWRdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jbGludC5saW50ZXIpIHRvIHJ1biB3aGVuIHRoZVxuZWRpdG9yIGlzIGlkbGUgdG8gcnVuIHJpZ2h0IGF3YXkuXG4qL1xuZnVuY3Rpb24gZm9yY2VMaW50aW5nKHZpZXcpIHtcbiAgICBsZXQgcGx1Z2luID0gdmlldy5wbHVnaW4obGludFBsdWdpbik7XG4gICAgaWYgKHBsdWdpbilcbiAgICAgICAgcGx1Z2luLmZvcmNlKCk7XG59XG5mdW5jdGlvbiBhc3NpZ25LZXlzKGFjdGlvbnMpIHtcbiAgICBsZXQgYXNzaWduZWQgPSBbXTtcbiAgICBpZiAoYWN0aW9ucylcbiAgICAgICAgYWN0aW9uczogZm9yIChsZXQgeyBuYW1lIH0gb2YgYWN0aW9ucykge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNoID0gbmFtZVtpXTtcbiAgICAgICAgICAgICAgICBpZiAoL1thLXpBLVpdLy50ZXN0KGNoKSAmJiAhYXNzaWduZWQuc29tZShjID0+IGMudG9Mb3dlckNhc2UoKSA9PSBjaC50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgICAgICAgICAgICBhc3NpZ25lZC5wdXNoKGNoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWUgYWN0aW9ucztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhc3NpZ25lZC5wdXNoKFwiXCIpO1xuICAgICAgICB9XG4gICAgcmV0dXJuIGFzc2lnbmVkO1xufVxuZnVuY3Rpb24gcmVuZGVyRGlhZ25vc3RpYyh2aWV3LCBkaWFnbm9zdGljLCBpblBhbmVsKSB7XG4gICAgdmFyIF9hO1xuICAgIGxldCBrZXlzID0gaW5QYW5lbCA/IGFzc2lnbktleXMoZGlhZ25vc3RpYy5hY3Rpb25zKSA6IFtdO1xuICAgIHJldHVybiBlbHQoXCJsaVwiLCB7IGNsYXNzOiBcImNtLWRpYWdub3N0aWMgY20tZGlhZ25vc3RpYy1cIiArIGRpYWdub3N0aWMuc2V2ZXJpdHkgfSwgZWx0KFwic3BhblwiLCB7IGNsYXNzOiBcImNtLWRpYWdub3N0aWNUZXh0XCIgfSwgZGlhZ25vc3RpYy5yZW5kZXJNZXNzYWdlID8gZGlhZ25vc3RpYy5yZW5kZXJNZXNzYWdlKHZpZXcpIDogZGlhZ25vc3RpYy5tZXNzYWdlKSwgKF9hID0gZGlhZ25vc3RpYy5hY3Rpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubWFwKChhY3Rpb24sIGkpID0+IHtcbiAgICAgICAgbGV0IGZpcmVkID0gZmFsc2UsIGNsaWNrID0gKGUpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGlmIChmaXJlZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBmaXJlZCA9IHRydWU7XG4gICAgICAgICAgICBsZXQgZm91bmQgPSBmaW5kRGlhZ25vc3RpYyh2aWV3LnN0YXRlLmZpZWxkKGxpbnRTdGF0ZSkuZGlhZ25vc3RpY3MsIGRpYWdub3N0aWMpO1xuICAgICAgICAgICAgaWYgKGZvdW5kKVxuICAgICAgICAgICAgICAgIGFjdGlvbi5hcHBseSh2aWV3LCBmb3VuZC5mcm9tLCBmb3VuZC50byk7XG4gICAgICAgIH07XG4gICAgICAgIGxldCB7IG5hbWUgfSA9IGFjdGlvbiwga2V5SW5kZXggPSBrZXlzW2ldID8gbmFtZS5pbmRleE9mKGtleXNbaV0pIDogLTE7XG4gICAgICAgIGxldCBuYW1lRWx0ID0ga2V5SW5kZXggPCAwID8gbmFtZSA6IFtuYW1lLnNsaWNlKDAsIGtleUluZGV4KSxcbiAgICAgICAgICAgIGVsdChcInVcIiwgbmFtZS5zbGljZShrZXlJbmRleCwga2V5SW5kZXggKyAxKSksXG4gICAgICAgICAgICBuYW1lLnNsaWNlKGtleUluZGV4ICsgMSldO1xuICAgICAgICByZXR1cm4gZWx0KFwiYnV0dG9uXCIsIHtcbiAgICAgICAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICAgICAgICBjbGFzczogXCJjbS1kaWFnbm9zdGljQWN0aW9uXCIsXG4gICAgICAgICAgICBvbmNsaWNrOiBjbGljayxcbiAgICAgICAgICAgIG9ubW91c2Vkb3duOiBjbGljayxcbiAgICAgICAgICAgIFwiYXJpYS1sYWJlbFwiOiBgIEFjdGlvbjogJHtuYW1lfSR7a2V5SW5kZXggPCAwID8gXCJcIiA6IGAgKGFjY2VzcyBrZXkgXCIke2tleXNbaV19KVwiYH0uYFxuICAgICAgICB9LCBuYW1lRWx0KTtcbiAgICB9KSwgZGlhZ25vc3RpYy5zb3VyY2UgJiYgZWx0KFwiZGl2XCIsIHsgY2xhc3M6IFwiY20tZGlhZ25vc3RpY1NvdXJjZVwiIH0sIGRpYWdub3N0aWMuc291cmNlKSk7XG59XG5jbGFzcyBEaWFnbm9zdGljV2lkZ2V0IGV4dGVuZHMgdmlldy5XaWRnZXRUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcihkaWFnbm9zdGljKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZGlhZ25vc3RpYyA9IGRpYWdub3N0aWM7XG4gICAgfVxuICAgIGVxKG90aGVyKSB7IHJldHVybiBvdGhlci5kaWFnbm9zdGljID09IHRoaXMuZGlhZ25vc3RpYzsgfVxuICAgIHRvRE9NKCkge1xuICAgICAgICByZXR1cm4gZWx0KFwic3BhblwiLCB7IGNsYXNzOiBcImNtLWxpbnRQb2ludCBjbS1saW50UG9pbnQtXCIgKyB0aGlzLmRpYWdub3N0aWMuc2V2ZXJpdHkgfSk7XG4gICAgfVxufVxuY2xhc3MgUGFuZWxJdGVtIHtcbiAgICBjb25zdHJ1Y3Rvcih2aWV3LCBkaWFnbm9zdGljKSB7XG4gICAgICAgIHRoaXMuZGlhZ25vc3RpYyA9IGRpYWdub3N0aWM7XG4gICAgICAgIHRoaXMuaWQgPSBcIml0ZW1fXCIgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAweGZmZmZmZmZmKS50b1N0cmluZygxNik7XG4gICAgICAgIHRoaXMuZG9tID0gcmVuZGVyRGlhZ25vc3RpYyh2aWV3LCBkaWFnbm9zdGljLCB0cnVlKTtcbiAgICAgICAgdGhpcy5kb20uaWQgPSB0aGlzLmlkO1xuICAgICAgICB0aGlzLmRvbS5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwib3B0aW9uXCIpO1xuICAgIH1cbn1cbmNsYXNzIExpbnRQYW5lbCB7XG4gICAgY29uc3RydWN0b3Iodmlldykge1xuICAgICAgICB0aGlzLnZpZXcgPSB2aWV3O1xuICAgICAgICB0aGlzLml0ZW1zID0gW107XG4gICAgICAgIGxldCBvbmtleWRvd24gPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC5rZXlDb2RlID09IDI3KSB7IC8vIEVzY2FwZVxuICAgICAgICAgICAgICAgIGNsb3NlTGludFBhbmVsKHRoaXMudmlldyk7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChldmVudC5rZXlDb2RlID09IDM4IHx8IGV2ZW50LmtleUNvZGUgPT0gMzMpIHsgLy8gQXJyb3dVcCwgUGFnZVVwXG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZlU2VsZWN0aW9uKCh0aGlzLnNlbGVjdGVkSW5kZXggLSAxICsgdGhpcy5pdGVtcy5sZW5ndGgpICUgdGhpcy5pdGVtcy5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZXZlbnQua2V5Q29kZSA9PSA0MCB8fCBldmVudC5rZXlDb2RlID09IDM0KSB7IC8vIEFycm93RG93biwgUGFnZURvd25cbiAgICAgICAgICAgICAgICB0aGlzLm1vdmVTZWxlY3Rpb24oKHRoaXMuc2VsZWN0ZWRJbmRleCArIDEpICUgdGhpcy5pdGVtcy5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZXZlbnQua2V5Q29kZSA9PSAzNikgeyAvLyBIb21lXG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZlU2VsZWN0aW9uKDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZXZlbnQua2V5Q29kZSA9PSAzNSkgeyAvLyBFbmRcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmVTZWxlY3Rpb24odGhpcy5pdGVtcy5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGV2ZW50LmtleUNvZGUgPT0gMTMpIHsgLy8gRW50ZXJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcuZm9jdXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGV2ZW50LmtleUNvZGUgPj0gNjUgJiYgZXZlbnQua2V5Q29kZSA8PSA5MCAmJiB0aGlzLnNlbGVjdGVkSW5kZXggPj0gMCkgeyAvLyBBLVpcbiAgICAgICAgICAgICAgICBsZXQgeyBkaWFnbm9zdGljIH0gPSB0aGlzLml0ZW1zW3RoaXMuc2VsZWN0ZWRJbmRleF0sIGtleXMgPSBhc3NpZ25LZXlzKGRpYWdub3N0aWMuYWN0aW9ucyk7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5c1tpXS50b1VwcGVyQ2FzZSgpLmNoYXJDb2RlQXQoMCkgPT0gZXZlbnQua2V5Q29kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZvdW5kID0gZmluZERpYWdub3N0aWModGhpcy52aWV3LnN0YXRlLmZpZWxkKGxpbnRTdGF0ZSkuZGlhZ25vc3RpY3MsIGRpYWdub3N0aWMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvdW5kKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpYWdub3N0aWMuYWN0aW9uc1tpXS5hcHBseSh2aWV3LCBmb3VuZC5mcm9tLCBmb3VuZC50byk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH07XG4gICAgICAgIGxldCBvbmNsaWNrID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pdGVtc1tpXS5kb20uY29udGFpbnMoZXZlbnQudGFyZ2V0KSlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3ZlU2VsZWN0aW9uKGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmxpc3QgPSBlbHQoXCJ1bFwiLCB7XG4gICAgICAgICAgICB0YWJJbmRleDogMCxcbiAgICAgICAgICAgIHJvbGU6IFwibGlzdGJveFwiLFxuICAgICAgICAgICAgXCJhcmlhLWxhYmVsXCI6IHRoaXMudmlldy5zdGF0ZS5waHJhc2UoXCJEaWFnbm9zdGljc1wiKSxcbiAgICAgICAgICAgIG9ua2V5ZG93bixcbiAgICAgICAgICAgIG9uY2xpY2tcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZG9tID0gZWx0KFwiZGl2XCIsIHsgY2xhc3M6IFwiY20tcGFuZWwtbGludFwiIH0sIHRoaXMubGlzdCwgZWx0KFwiYnV0dG9uXCIsIHtcbiAgICAgICAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICAgICAgICBuYW1lOiBcImNsb3NlXCIsXG4gICAgICAgICAgICBcImFyaWEtbGFiZWxcIjogdGhpcy52aWV3LnN0YXRlLnBocmFzZShcImNsb3NlXCIpLFxuICAgICAgICAgICAgb25jbGljazogKCkgPT4gY2xvc2VMaW50UGFuZWwodGhpcy52aWV3KVxuICAgICAgICB9LCBcIsOXXCIpKTtcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICB9XG4gICAgZ2V0IHNlbGVjdGVkSW5kZXgoKSB7XG4gICAgICAgIGxldCBzZWxlY3RlZCA9IHRoaXMudmlldy5zdGF0ZS5maWVsZChsaW50U3RhdGUpLnNlbGVjdGVkO1xuICAgICAgICBpZiAoIXNlbGVjdGVkKVxuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaXRlbXMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBpZiAodGhpcy5pdGVtc1tpXS5kaWFnbm9zdGljID09IHNlbGVjdGVkLmRpYWdub3N0aWMpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgdXBkYXRlKCkge1xuICAgICAgICBsZXQgeyBkaWFnbm9zdGljcywgc2VsZWN0ZWQgfSA9IHRoaXMudmlldy5zdGF0ZS5maWVsZChsaW50U3RhdGUpO1xuICAgICAgICBsZXQgaSA9IDAsIG5lZWRzU3luYyA9IGZhbHNlLCBuZXdTZWxlY3RlZEl0ZW0gPSBudWxsO1xuICAgICAgICBkaWFnbm9zdGljcy5iZXR3ZWVuKDAsIHRoaXMudmlldy5zdGF0ZS5kb2MubGVuZ3RoLCAoX3N0YXJ0LCBfZW5kLCB7IHNwZWMgfSkgPT4ge1xuICAgICAgICAgICAgbGV0IGZvdW5kID0gLTEsIGl0ZW07XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gaTsgaiA8IHRoaXMuaXRlbXMubGVuZ3RoOyBqKyspXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXRlbXNbal0uZGlhZ25vc3RpYyA9PSBzcGVjLmRpYWdub3N0aWMpIHtcbiAgICAgICAgICAgICAgICAgICAgZm91bmQgPSBqO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZm91bmQgPCAwKSB7XG4gICAgICAgICAgICAgICAgaXRlbSA9IG5ldyBQYW5lbEl0ZW0odGhpcy52aWV3LCBzcGVjLmRpYWdub3N0aWMpO1xuICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMuc3BsaWNlKGksIDAsIGl0ZW0pO1xuICAgICAgICAgICAgICAgIG5lZWRzU3luYyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpdGVtID0gdGhpcy5pdGVtc1tmb3VuZF07XG4gICAgICAgICAgICAgICAgaWYgKGZvdW5kID4gaSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1zLnNwbGljZShpLCBmb3VuZCAtIGkpO1xuICAgICAgICAgICAgICAgICAgICBuZWVkc1N5bmMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWxlY3RlZCAmJiBpdGVtLmRpYWdub3N0aWMgPT0gc2VsZWN0ZWQuZGlhZ25vc3RpYykge1xuICAgICAgICAgICAgICAgIGlmICghaXRlbS5kb20uaGFzQXR0cmlidXRlKFwiYXJpYS1zZWxlY3RlZFwiKSkge1xuICAgICAgICAgICAgICAgICAgICBpdGVtLmRvbS5zZXRBdHRyaWJ1dGUoXCJhcmlhLXNlbGVjdGVkXCIsIFwidHJ1ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3U2VsZWN0ZWRJdGVtID0gaXRlbTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpdGVtLmRvbS5oYXNBdHRyaWJ1dGUoXCJhcmlhLXNlbGVjdGVkXCIpKSB7XG4gICAgICAgICAgICAgICAgaXRlbS5kb20ucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1zZWxlY3RlZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfSk7XG4gICAgICAgIHdoaWxlIChpIDwgdGhpcy5pdGVtcy5sZW5ndGggJiYgISh0aGlzLml0ZW1zLmxlbmd0aCA9PSAxICYmIHRoaXMuaXRlbXNbMF0uZGlhZ25vc3RpYy5mcm9tIDwgMCkpIHtcbiAgICAgICAgICAgIG5lZWRzU3luYyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLml0ZW1zLnBvcCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLml0ZW1zLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLml0ZW1zLnB1c2gobmV3IFBhbmVsSXRlbSh0aGlzLnZpZXcsIHtcbiAgICAgICAgICAgICAgICBmcm9tOiAtMSwgdG86IC0xLFxuICAgICAgICAgICAgICAgIHNldmVyaXR5OiBcImluZm9cIixcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiB0aGlzLnZpZXcuc3RhdGUucGhyYXNlKFwiTm8gZGlhZ25vc3RpY3NcIilcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIG5lZWRzU3luYyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5ld1NlbGVjdGVkSXRlbSkge1xuICAgICAgICAgICAgdGhpcy5saXN0LnNldEF0dHJpYnV0ZShcImFyaWEtYWN0aXZlZGVzY2VuZGFudFwiLCBuZXdTZWxlY3RlZEl0ZW0uaWQpO1xuICAgICAgICAgICAgdGhpcy52aWV3LnJlcXVlc3RNZWFzdXJlKHtcbiAgICAgICAgICAgICAgICBrZXk6IHRoaXMsXG4gICAgICAgICAgICAgICAgcmVhZDogKCkgPT4gKHsgc2VsOiBuZXdTZWxlY3RlZEl0ZW0uZG9tLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCBwYW5lbDogdGhpcy5saXN0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIH0pLFxuICAgICAgICAgICAgICAgIHdyaXRlOiAoeyBzZWwsIHBhbmVsIH0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNjYWxlWSA9IHBhbmVsLmhlaWdodCAvIHRoaXMubGlzdC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWwudG9wIDwgcGFuZWwudG9wKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0LnNjcm9sbFRvcCAtPSAocGFuZWwudG9wIC0gc2VsLnRvcCkgLyBzY2FsZVk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNlbC5ib3R0b20gPiBwYW5lbC5ib3R0b20pXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3Quc2Nyb2xsVG9wICs9IChzZWwuYm90dG9tIC0gcGFuZWwuYm90dG9tKSAvIHNjYWxlWTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnNlbGVjdGVkSW5kZXggPCAwKSB7XG4gICAgICAgICAgICB0aGlzLmxpc3QucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1hY3RpdmVkZXNjZW5kYW50XCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZWVkc1N5bmMpXG4gICAgICAgICAgICB0aGlzLnN5bmMoKTtcbiAgICB9XG4gICAgc3luYygpIHtcbiAgICAgICAgbGV0IGRvbVBvcyA9IHRoaXMubGlzdC5maXJzdENoaWxkO1xuICAgICAgICBmdW5jdGlvbiBybSgpIHtcbiAgICAgICAgICAgIGxldCBwcmV2ID0gZG9tUG9zO1xuICAgICAgICAgICAgZG9tUG9zID0gcHJldi5uZXh0U2libGluZztcbiAgICAgICAgICAgIHByZXYucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaXRlbSBvZiB0aGlzLml0ZW1zKSB7XG4gICAgICAgICAgICBpZiAoaXRlbS5kb20ucGFyZW50Tm9kZSA9PSB0aGlzLmxpc3QpIHtcbiAgICAgICAgICAgICAgICB3aGlsZSAoZG9tUG9zICE9IGl0ZW0uZG9tKVxuICAgICAgICAgICAgICAgICAgICBybSgpO1xuICAgICAgICAgICAgICAgIGRvbVBvcyA9IGl0ZW0uZG9tLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5saXN0Lmluc2VydEJlZm9yZShpdGVtLmRvbSwgZG9tUG9zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoZG9tUG9zKVxuICAgICAgICAgICAgcm0oKTtcbiAgICB9XG4gICAgbW92ZVNlbGVjdGlvbihzZWxlY3RlZEluZGV4KSB7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkSW5kZXggPCAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBsZXQgZmllbGQgPSB0aGlzLnZpZXcuc3RhdGUuZmllbGQobGludFN0YXRlKTtcbiAgICAgICAgbGV0IHNlbGVjdGlvbiA9IGZpbmREaWFnbm9zdGljKGZpZWxkLmRpYWdub3N0aWNzLCB0aGlzLml0ZW1zW3NlbGVjdGVkSW5kZXhdLmRpYWdub3N0aWMpO1xuICAgICAgICBpZiAoIXNlbGVjdGlvbilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy52aWV3LmRpc3BhdGNoKHtcbiAgICAgICAgICAgIHNlbGVjdGlvbjogeyBhbmNob3I6IHNlbGVjdGlvbi5mcm9tLCBoZWFkOiBzZWxlY3Rpb24udG8gfSxcbiAgICAgICAgICAgIHNjcm9sbEludG9WaWV3OiB0cnVlLFxuICAgICAgICAgICAgZWZmZWN0czogbW92ZVBhbmVsU2VsZWN0aW9uLm9mKHNlbGVjdGlvbilcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0YXRpYyBvcGVuKHZpZXcpIHsgcmV0dXJuIG5ldyBMaW50UGFuZWwodmlldyk7IH1cbn1cbmZ1bmN0aW9uIHN2Zyhjb250ZW50LCBhdHRycyA9IGB2aWV3Qm94PVwiMCAwIDQwIDQwXCJgKSB7XG4gICAgcmV0dXJuIGB1cmwoJ2RhdGE6aW1hZ2Uvc3ZnK3htbCw8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiAke2F0dHJzfT4ke2VuY29kZVVSSUNvbXBvbmVudChjb250ZW50KX08L3N2Zz4nKWA7XG59XG5mdW5jdGlvbiB1bmRlcmxpbmUoY29sb3IpIHtcbiAgICByZXR1cm4gc3ZnKGA8cGF0aCBkPVwibTAgMi41IGwyIC0xLjUgbDEgMCBsMiAxLjUgbDEgMFwiIHN0cm9rZT1cIiR7Y29sb3J9XCIgZmlsbD1cIm5vbmVcIiBzdHJva2Utd2lkdGg9XCIuN1wiLz5gLCBgd2lkdGg9XCI2XCIgaGVpZ2h0PVwiM1wiYCk7XG59XG5jb25zdCBiYXNlVGhlbWUgPSB2aWV3LkVkaXRvclZpZXcuYmFzZVRoZW1lKHtcbiAgICBcIi5jbS1kaWFnbm9zdGljXCI6IHtcbiAgICAgICAgcGFkZGluZzogXCIzcHggNnB4IDNweCA4cHhcIixcbiAgICAgICAgbWFyZ2luTGVmdDogXCItMXB4XCIsXG4gICAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIixcbiAgICAgICAgd2hpdGVTcGFjZTogXCJwcmUtd3JhcFwiXG4gICAgfSxcbiAgICBcIi5jbS1kaWFnbm9zdGljLWVycm9yXCI6IHsgYm9yZGVyTGVmdDogXCI1cHggc29saWQgI2QxMVwiIH0sXG4gICAgXCIuY20tZGlhZ25vc3RpYy13YXJuaW5nXCI6IHsgYm9yZGVyTGVmdDogXCI1cHggc29saWQgb3JhbmdlXCIgfSxcbiAgICBcIi5jbS1kaWFnbm9zdGljLWluZm9cIjogeyBib3JkZXJMZWZ0OiBcIjVweCBzb2xpZCAjOTk5XCIgfSxcbiAgICBcIi5jbS1kaWFnbm9zdGljLWhpbnRcIjogeyBib3JkZXJMZWZ0OiBcIjVweCBzb2xpZCAjNjZkXCIgfSxcbiAgICBcIi5jbS1kaWFnbm9zdGljQWN0aW9uXCI6IHtcbiAgICAgICAgZm9udDogXCJpbmhlcml0XCIsXG4gICAgICAgIGJvcmRlcjogXCJub25lXCIsXG4gICAgICAgIHBhZGRpbmc6IFwiMnB4IDRweFwiLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiIzQ0NFwiLFxuICAgICAgICBjb2xvcjogXCJ3aGl0ZVwiLFxuICAgICAgICBib3JkZXJSYWRpdXM6IFwiM3B4XCIsXG4gICAgICAgIG1hcmdpbkxlZnQ6IFwiOHB4XCIsXG4gICAgICAgIGN1cnNvcjogXCJwb2ludGVyXCJcbiAgICB9LFxuICAgIFwiLmNtLWRpYWdub3N0aWNTb3VyY2VcIjoge1xuICAgICAgICBmb250U2l6ZTogXCI3MCVcIixcbiAgICAgICAgb3BhY2l0eTogLjdcbiAgICB9LFxuICAgIFwiLmNtLWxpbnRSYW5nZVwiOiB7XG4gICAgICAgIGJhY2tncm91bmRQb3NpdGlvbjogXCJsZWZ0IGJvdHRvbVwiLFxuICAgICAgICBiYWNrZ3JvdW5kUmVwZWF0OiBcInJlcGVhdC14XCIsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IFwiMC43cHhcIixcbiAgICB9LFxuICAgIFwiLmNtLWxpbnRSYW5nZS1lcnJvclwiOiB7IGJhY2tncm91bmRJbWFnZTogdW5kZXJsaW5lKFwiI2QxMVwiKSB9LFxuICAgIFwiLmNtLWxpbnRSYW5nZS13YXJuaW5nXCI6IHsgYmFja2dyb3VuZEltYWdlOiB1bmRlcmxpbmUoXCJvcmFuZ2VcIikgfSxcbiAgICBcIi5jbS1saW50UmFuZ2UtaW5mb1wiOiB7IGJhY2tncm91bmRJbWFnZTogdW5kZXJsaW5lKFwiIzk5OVwiKSB9LFxuICAgIFwiLmNtLWxpbnRSYW5nZS1oaW50XCI6IHsgYmFja2dyb3VuZEltYWdlOiB1bmRlcmxpbmUoXCIjNjZkXCIpIH0sXG4gICAgXCIuY20tbGludFJhbmdlLWFjdGl2ZVwiOiB7IGJhY2tncm91bmRDb2xvcjogXCIjZmZkZDk5ODBcIiB9LFxuICAgIFwiLmNtLXRvb2x0aXAtbGludFwiOiB7XG4gICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgIG1hcmdpbjogMFxuICAgIH0sXG4gICAgXCIuY20tbGludFBvaW50XCI6IHtcbiAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgXCImOmFmdGVyXCI6IHtcbiAgICAgICAgICAgIGNvbnRlbnQ6ICdcIlwiJyxcbiAgICAgICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICAgICAgICBib3R0b206IDAsXG4gICAgICAgICAgICBsZWZ0OiBcIi0ycHhcIixcbiAgICAgICAgICAgIGJvcmRlckxlZnQ6IFwiM3B4IHNvbGlkIHRyYW5zcGFyZW50XCIsXG4gICAgICAgICAgICBib3JkZXJSaWdodDogXCIzcHggc29saWQgdHJhbnNwYXJlbnRcIixcbiAgICAgICAgICAgIGJvcmRlckJvdHRvbTogXCI0cHggc29saWQgI2QxMVwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiLmNtLWxpbnRQb2ludC13YXJuaW5nXCI6IHtcbiAgICAgICAgXCImOmFmdGVyXCI6IHsgYm9yZGVyQm90dG9tQ29sb3I6IFwib3JhbmdlXCIgfVxuICAgIH0sXG4gICAgXCIuY20tbGludFBvaW50LWluZm9cIjoge1xuICAgICAgICBcIiY6YWZ0ZXJcIjogeyBib3JkZXJCb3R0b21Db2xvcjogXCIjOTk5XCIgfVxuICAgIH0sXG4gICAgXCIuY20tbGludFBvaW50LWhpbnRcIjoge1xuICAgICAgICBcIiY6YWZ0ZXJcIjogeyBib3JkZXJCb3R0b21Db2xvcjogXCIjNjZkXCIgfVxuICAgIH0sXG4gICAgXCIuY20tcGFuZWwuY20tcGFuZWwtbGludFwiOiB7XG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIFwiJiB1bFwiOiB7XG4gICAgICAgICAgICBtYXhIZWlnaHQ6IFwiMTAwcHhcIixcbiAgICAgICAgICAgIG92ZXJmbG93WTogXCJhdXRvXCIsXG4gICAgICAgICAgICBcIiYgW2FyaWEtc2VsZWN0ZWRdXCI6IHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiI2RkZFwiLFxuICAgICAgICAgICAgICAgIFwiJiB1XCI6IHsgdGV4dERlY29yYXRpb246IFwidW5kZXJsaW5lXCIgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiJjpmb2N1cyBbYXJpYS1zZWxlY3RlZF1cIjoge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmRfZmFsbGJhY2s6IFwiI2JkZlwiLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJIaWdobGlnaHRcIixcbiAgICAgICAgICAgICAgICBjb2xvcl9mYWxsYmFjazogXCJ3aGl0ZVwiLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBcIkhpZ2hsaWdodFRleHRcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiJiB1XCI6IHsgdGV4dERlY29yYXRpb246IFwibm9uZVwiIH0sXG4gICAgICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICAgICAgbWFyZ2luOiAwXG4gICAgICAgIH0sXG4gICAgICAgIFwiJiBbbmFtZT1jbG9zZV1cIjoge1xuICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICAgIHRvcDogXCIwXCIsXG4gICAgICAgICAgICByaWdodDogXCIycHhcIixcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IFwiaW5oZXJpdFwiLFxuICAgICAgICAgICAgYm9yZGVyOiBcIm5vbmVcIixcbiAgICAgICAgICAgIGZvbnQ6IFwiaW5oZXJpdFwiLFxuICAgICAgICAgICAgcGFkZGluZzogMCxcbiAgICAgICAgICAgIG1hcmdpbjogMFxuICAgICAgICB9XG4gICAgfVxufSk7XG5mdW5jdGlvbiBzZXZlcml0eVdlaWdodChzZXYpIHtcbiAgICByZXR1cm4gc2V2ID09IFwiZXJyb3JcIiA/IDQgOiBzZXYgPT0gXCJ3YXJuaW5nXCIgPyAzIDogc2V2ID09IFwiaW5mb1wiID8gMiA6IDE7XG59XG5jbGFzcyBMaW50R3V0dGVyTWFya2VyIGV4dGVuZHMgdmlldy5HdXR0ZXJNYXJrZXIge1xuICAgIGNvbnN0cnVjdG9yKGRpYWdub3N0aWNzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZGlhZ25vc3RpY3MgPSBkaWFnbm9zdGljcztcbiAgICAgICAgdGhpcy5zZXZlcml0eSA9IGRpYWdub3N0aWNzLnJlZHVjZSgobWF4LCBkKSA9PiBzZXZlcml0eVdlaWdodChtYXgpIDwgc2V2ZXJpdHlXZWlnaHQoZC5zZXZlcml0eSkgPyBkLnNldmVyaXR5IDogbWF4LCBcImhpbnRcIik7XG4gICAgfVxuICAgIHRvRE9NKHZpZXcpIHtcbiAgICAgICAgbGV0IGVsdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGVsdC5jbGFzc05hbWUgPSBcImNtLWxpbnQtbWFya2VyIGNtLWxpbnQtbWFya2VyLVwiICsgdGhpcy5zZXZlcml0eTtcbiAgICAgICAgbGV0IGRpYWdub3N0aWNzID0gdGhpcy5kaWFnbm9zdGljcztcbiAgICAgICAgbGV0IGRpYWdub3N0aWNzRmlsdGVyID0gdmlldy5zdGF0ZS5mYWNldChsaW50R3V0dGVyQ29uZmlnKS50b29sdGlwRmlsdGVyO1xuICAgICAgICBpZiAoZGlhZ25vc3RpY3NGaWx0ZXIpXG4gICAgICAgICAgICBkaWFnbm9zdGljcyA9IGRpYWdub3N0aWNzRmlsdGVyKGRpYWdub3N0aWNzLCB2aWV3LnN0YXRlKTtcbiAgICAgICAgaWYgKGRpYWdub3N0aWNzLmxlbmd0aClcbiAgICAgICAgICAgIGVsdC5vbm1vdXNlb3ZlciA9ICgpID0+IGd1dHRlck1hcmtlck1vdXNlT3Zlcih2aWV3LCBlbHQsIGRpYWdub3N0aWNzKTtcbiAgICAgICAgcmV0dXJuIGVsdDtcbiAgICB9XG59XG5mdW5jdGlvbiB0cmFja0hvdmVyT24odmlldywgbWFya2VyKSB7XG4gICAgbGV0IG1vdXNlbW92ZSA9IChldmVudCkgPT4ge1xuICAgICAgICBsZXQgcmVjdCA9IG1hcmtlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgaWYgKGV2ZW50LmNsaWVudFggPiByZWN0LmxlZnQgLSAxMCAvKiBIb3Zlci5NYXJnaW4gKi8gJiYgZXZlbnQuY2xpZW50WCA8IHJlY3QucmlnaHQgKyAxMCAvKiBIb3Zlci5NYXJnaW4gKi8gJiZcbiAgICAgICAgICAgIGV2ZW50LmNsaWVudFkgPiByZWN0LnRvcCAtIDEwIC8qIEhvdmVyLk1hcmdpbiAqLyAmJiBldmVudC5jbGllbnRZIDwgcmVjdC5ib3R0b20gKyAxMCAvKiBIb3Zlci5NYXJnaW4gKi8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGZvciAobGV0IHRhcmdldCA9IGV2ZW50LnRhcmdldDsgdGFyZ2V0OyB0YXJnZXQgPSB0YXJnZXQucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgaWYgKHRhcmdldC5ub2RlVHlwZSA9PSAxICYmIHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJjbS10b29sdGlwLWxpbnRcIikpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIG1vdXNlbW92ZSk7XG4gICAgICAgIGlmICh2aWV3LnN0YXRlLmZpZWxkKGxpbnRHdXR0ZXJUb29sdGlwKSlcbiAgICAgICAgICAgIHZpZXcuZGlzcGF0Y2goeyBlZmZlY3RzOiBzZXRMaW50R3V0dGVyVG9vbHRpcC5vZihudWxsKSB9KTtcbiAgICB9O1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIG1vdXNlbW92ZSk7XG59XG5mdW5jdGlvbiBndXR0ZXJNYXJrZXJNb3VzZU92ZXIodmlldywgbWFya2VyLCBkaWFnbm9zdGljcykge1xuICAgIGZ1bmN0aW9uIGhvdmVyZWQoKSB7XG4gICAgICAgIGxldCBsaW5lID0gdmlldy5lbGVtZW50QXRIZWlnaHQobWFya2VyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCArIDUgLSB2aWV3LmRvY3VtZW50VG9wKTtcbiAgICAgICAgY29uc3QgbGluZVBvcyA9IHZpZXcuY29vcmRzQXRQb3MobGluZS5mcm9tKTtcbiAgICAgICAgaWYgKGxpbmVQb3MpIHtcbiAgICAgICAgICAgIHZpZXcuZGlzcGF0Y2goeyBlZmZlY3RzOiBzZXRMaW50R3V0dGVyVG9vbHRpcC5vZih7XG4gICAgICAgICAgICAgICAgICAgIHBvczogbGluZS5mcm9tLFxuICAgICAgICAgICAgICAgICAgICBhYm92ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tOiBkaWFnbm9zdGljc1Rvb2x0aXAodmlldywgZGlhZ25vc3RpY3MpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldENvb3JkczogKCkgPT4gbWFya2VyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkgfSk7XG4gICAgICAgIH1cbiAgICAgICAgbWFya2VyLm9ubW91c2VvdXQgPSBtYXJrZXIub25tb3VzZW1vdmUgPSBudWxsO1xuICAgICAgICB0cmFja0hvdmVyT24odmlldywgbWFya2VyKTtcbiAgICB9XG4gICAgbGV0IHsgaG92ZXJUaW1lIH0gPSB2aWV3LnN0YXRlLmZhY2V0KGxpbnRHdXR0ZXJDb25maWcpO1xuICAgIGxldCBob3ZlclRpbWVvdXQgPSBzZXRUaW1lb3V0KGhvdmVyZWQsIGhvdmVyVGltZSk7XG4gICAgbWFya2VyLm9ubW91c2VvdXQgPSAoKSA9PiB7XG4gICAgICAgIGNsZWFyVGltZW91dChob3ZlclRpbWVvdXQpO1xuICAgICAgICBtYXJrZXIub25tb3VzZW91dCA9IG1hcmtlci5vbm1vdXNlbW92ZSA9IG51bGw7XG4gICAgfTtcbiAgICBtYXJrZXIub25tb3VzZW1vdmUgPSAoKSA9PiB7XG4gICAgICAgIGNsZWFyVGltZW91dChob3ZlclRpbWVvdXQpO1xuICAgICAgICBob3ZlclRpbWVvdXQgPSBzZXRUaW1lb3V0KGhvdmVyZWQsIGhvdmVyVGltZSk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIG1hcmtlcnNGb3JEaWFnbm9zdGljcyhkb2MsIGRpYWdub3N0aWNzKSB7XG4gICAgbGV0IGJ5TGluZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgZm9yIChsZXQgZGlhZ25vc3RpYyBvZiBkaWFnbm9zdGljcykge1xuICAgICAgICBsZXQgbGluZSA9IGRvYy5saW5lQXQoZGlhZ25vc3RpYy5mcm9tKTtcbiAgICAgICAgKGJ5TGluZVtsaW5lLmZyb21dIHx8IChieUxpbmVbbGluZS5mcm9tXSA9IFtdKSkucHVzaChkaWFnbm9zdGljKTtcbiAgICB9XG4gICAgbGV0IG1hcmtlcnMgPSBbXTtcbiAgICBmb3IgKGxldCBsaW5lIGluIGJ5TGluZSkge1xuICAgICAgICBtYXJrZXJzLnB1c2gobmV3IExpbnRHdXR0ZXJNYXJrZXIoYnlMaW5lW2xpbmVdKS5yYW5nZSgrbGluZSkpO1xuICAgIH1cbiAgICByZXR1cm4gc3RhdGUuUmFuZ2VTZXQub2YobWFya2VycywgdHJ1ZSk7XG59XG5jb25zdCBsaW50R3V0dGVyRXh0ZW5zaW9uID0gdmlldy5ndXR0ZXIoe1xuICAgIGNsYXNzOiBcImNtLWd1dHRlci1saW50XCIsXG4gICAgbWFya2VyczogdmlldyA9PiB2aWV3LnN0YXRlLmZpZWxkKGxpbnRHdXR0ZXJNYXJrZXJzKSxcbn0pO1xuY29uc3QgbGludEd1dHRlck1hcmtlcnMgPSBzdGF0ZS5TdGF0ZUZpZWxkLmRlZmluZSh7XG4gICAgY3JlYXRlKCkge1xuICAgICAgICByZXR1cm4gc3RhdGUuUmFuZ2VTZXQuZW1wdHk7XG4gICAgfSxcbiAgICB1cGRhdGUobWFya2VycywgdHIpIHtcbiAgICAgICAgbWFya2VycyA9IG1hcmtlcnMubWFwKHRyLmNoYW5nZXMpO1xuICAgICAgICBsZXQgZGlhZ25vc3RpY0ZpbHRlciA9IHRyLnN0YXRlLmZhY2V0KGxpbnRHdXR0ZXJDb25maWcpLm1hcmtlckZpbHRlcjtcbiAgICAgICAgZm9yIChsZXQgZWZmZWN0IG9mIHRyLmVmZmVjdHMpIHtcbiAgICAgICAgICAgIGlmIChlZmZlY3QuaXMoc2V0RGlhZ25vc3RpY3NFZmZlY3QpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGRpYWdub3N0aWNzID0gZWZmZWN0LnZhbHVlO1xuICAgICAgICAgICAgICAgIGlmIChkaWFnbm9zdGljRmlsdGVyKVxuICAgICAgICAgICAgICAgICAgICBkaWFnbm9zdGljcyA9IGRpYWdub3N0aWNGaWx0ZXIoZGlhZ25vc3RpY3MgfHwgW10sIHRyLnN0YXRlKTtcbiAgICAgICAgICAgICAgICBtYXJrZXJzID0gbWFya2Vyc0ZvckRpYWdub3N0aWNzKHRyLnN0YXRlLmRvYywgZGlhZ25vc3RpY3Muc2xpY2UoMCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXJrZXJzO1xuICAgIH1cbn0pO1xuY29uc3Qgc2V0TGludEd1dHRlclRvb2x0aXAgPSBzdGF0ZS5TdGF0ZUVmZmVjdC5kZWZpbmUoKTtcbmNvbnN0IGxpbnRHdXR0ZXJUb29sdGlwID0gc3RhdGUuU3RhdGVGaWVsZC5kZWZpbmUoe1xuICAgIGNyZWF0ZSgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgdXBkYXRlKHRvb2x0aXAsIHRyKSB7XG4gICAgICAgIGlmICh0b29sdGlwICYmIHRyLmRvY0NoYW5nZWQpXG4gICAgICAgICAgICB0b29sdGlwID0gaGlkZVRvb2x0aXAodHIsIHRvb2x0aXApID8gbnVsbCA6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdG9vbHRpcCksIHsgcG9zOiB0ci5jaGFuZ2VzLm1hcFBvcyh0b29sdGlwLnBvcykgfSk7XG4gICAgICAgIHJldHVybiB0ci5lZmZlY3RzLnJlZHVjZSgodCwgZSkgPT4gZS5pcyhzZXRMaW50R3V0dGVyVG9vbHRpcCkgPyBlLnZhbHVlIDogdCwgdG9vbHRpcCk7XG4gICAgfSxcbiAgICBwcm92aWRlOiBmaWVsZCA9PiB2aWV3LnNob3dUb29sdGlwLmZyb20oZmllbGQpXG59KTtcbmNvbnN0IGxpbnRHdXR0ZXJUaGVtZSA9IHZpZXcuRWRpdG9yVmlldy5iYXNlVGhlbWUoe1xuICAgIFwiLmNtLWd1dHRlci1saW50XCI6IHtcbiAgICAgICAgd2lkdGg6IFwiMS40ZW1cIixcbiAgICAgICAgXCImIC5jbS1ndXR0ZXJFbGVtZW50XCI6IHtcbiAgICAgICAgICAgIHBhZGRpbmc6IFwiLjJlbVwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiLmNtLWxpbnQtbWFya2VyXCI6IHtcbiAgICAgICAgd2lkdGg6IFwiMWVtXCIsXG4gICAgICAgIGhlaWdodDogXCIxZW1cIlxuICAgIH0sXG4gICAgXCIuY20tbGludC1tYXJrZXItaW5mb1wiOiB7XG4gICAgICAgIGNvbnRlbnQ6IHN2ZyhgPHBhdGggZmlsbD1cIiNhYWZcIiBzdHJva2U9XCIjNzdlXCIgc3Ryb2tlLXdpZHRoPVwiNlwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgZD1cIk01IDVMMzUgNUwzNSAzNUw1IDM1WlwiLz5gKVxuICAgIH0sXG4gICAgXCIuY20tbGludC1tYXJrZXItd2FybmluZ1wiOiB7XG4gICAgICAgIGNvbnRlbnQ6IHN2ZyhgPHBhdGggZmlsbD1cIiNmZThcIiBzdHJva2U9XCIjZmQ3XCIgc3Ryb2tlLXdpZHRoPVwiNlwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgZD1cIk0yMCA2TDM3IDM1TDMgMzVaXCIvPmApLFxuICAgIH0sXG4gICAgXCIuY20tbGludC1tYXJrZXItZXJyb3JcIjoge1xuICAgICAgICBjb250ZW50OiBzdmcoYDxjaXJjbGUgY3g9XCIyMFwiIGN5PVwiMjBcIiByPVwiMTVcIiBmaWxsPVwiI2Y4N1wiIHN0cm9rZT1cIiNmNDNcIiBzdHJva2Utd2lkdGg9XCI2XCIvPmApXG4gICAgfSxcbn0pO1xuY29uc3QgbGludEV4dGVuc2lvbnMgPSBbXG4gICAgbGludFN0YXRlLFxuICAgIHZpZXcuRWRpdG9yVmlldy5kZWNvcmF0aW9ucy5jb21wdXRlKFtsaW50U3RhdGVdLCBzdGF0ZSA9PiB7XG4gICAgICAgIGxldCB7IHNlbGVjdGVkLCBwYW5lbCB9ID0gc3RhdGUuZmllbGQobGludFN0YXRlKTtcbiAgICAgICAgcmV0dXJuICFzZWxlY3RlZCB8fCAhcGFuZWwgfHwgc2VsZWN0ZWQuZnJvbSA9PSBzZWxlY3RlZC50byA/IHZpZXcuRGVjb3JhdGlvbi5ub25lIDogdmlldy5EZWNvcmF0aW9uLnNldChbXG4gICAgICAgICAgICBhY3RpdmVNYXJrLnJhbmdlKHNlbGVjdGVkLmZyb20sIHNlbGVjdGVkLnRvKVxuICAgICAgICBdKTtcbiAgICB9KSxcbiAgICB2aWV3LmhvdmVyVG9vbHRpcChsaW50VG9vbHRpcCwgeyBoaWRlT246IGhpZGVUb29sdGlwIH0pLFxuICAgIGJhc2VUaGVtZVxuXTtcbmNvbnN0IGxpbnRHdXR0ZXJDb25maWcgPSBzdGF0ZS5GYWNldC5kZWZpbmUoe1xuICAgIGNvbWJpbmUoY29uZmlncykge1xuICAgICAgICByZXR1cm4gc3RhdGUuY29tYmluZUNvbmZpZyhjb25maWdzLCB7XG4gICAgICAgICAgICBob3ZlclRpbWU6IDMwMCAvKiBIb3Zlci5UaW1lICovLFxuICAgICAgICAgICAgbWFya2VyRmlsdGVyOiBudWxsLFxuICAgICAgICAgICAgdG9vbHRpcEZpbHRlcjogbnVsbFxuICAgICAgICB9KTtcbiAgICB9XG59KTtcbi8qKlxuUmV0dXJucyBhbiBleHRlbnNpb24gdGhhdCBpbnN0YWxscyBhIGd1dHRlciBzaG93aW5nIG1hcmtlcnMgZm9yXG5lYWNoIGxpbmUgdGhhdCBoYXMgZGlhZ25vc3RpY3MsIHdoaWNoIGNhbiBiZSBob3ZlcmVkIG92ZXIgdG8gc2VlXG50aGUgZGlhZ25vc3RpY3MuXG4qL1xuZnVuY3Rpb24gbGludEd1dHRlcihjb25maWcgPSB7fSkge1xuICAgIHJldHVybiBbbGludEd1dHRlckNvbmZpZy5vZihjb25maWcpLCBsaW50R3V0dGVyTWFya2VycywgbGludEd1dHRlckV4dGVuc2lvbiwgbGludEd1dHRlclRoZW1lLCBsaW50R3V0dGVyVG9vbHRpcF07XG59XG4vKipcbkl0ZXJhdGUgb3ZlciB0aGUgbWFya2VkIGRpYWdub3N0aWNzIGZvciB0aGUgZ2l2ZW4gZWRpdG9yIHN0YXRlLFxuY2FsbGluZyBgZmAgZm9yIGVhY2ggb2YgdGhlbS4gTm90ZSB0aGF0LCBpZiB0aGUgZG9jdW1lbnQgY2hhbmdlZFxuc2luY2UgdGhlIGRpYWdub3N0aWNzIHdlcmUgY3JlYXRlZCwgdGhlIGBEaWFnbm9zdGljYCBvYmplY3Qgd2lsbFxuaG9sZCB0aGUgb3JpZ2luYWwgb3V0ZGF0ZWQgcG9zaXRpb24sIHdoZXJlYXMgdGhlIGB0b2AgYW5kIGBmcm9tYFxuYXJndW1lbnRzIGhvbGQgdGhlIGRpYWdub3N0aWMncyBjdXJyZW50IHBvc2l0aW9uLlxuKi9cbmZ1bmN0aW9uIGZvckVhY2hEaWFnbm9zdGljKHN0YXRlJDEsIGYpIHtcbiAgICBsZXQgbFN0YXRlID0gc3RhdGUkMS5maWVsZChsaW50U3RhdGUsIGZhbHNlKTtcbiAgICBpZiAobFN0YXRlICYmIGxTdGF0ZS5kaWFnbm9zdGljcy5zaXplKVxuICAgICAgICBmb3IgKGxldCBpdGVyID0gc3RhdGUuUmFuZ2VTZXQuaXRlcihbbFN0YXRlLmRpYWdub3N0aWNzXSk7IGl0ZXIudmFsdWU7IGl0ZXIubmV4dCgpKVxuICAgICAgICAgICAgZihpdGVyLnZhbHVlLnNwZWMuZGlhZ25vc3RpYywgaXRlci5mcm9tLCBpdGVyLnRvKTtcbn1cblxuZXhwb3J0cy5jbG9zZUxpbnRQYW5lbCA9IGNsb3NlTGludFBhbmVsO1xuZXhwb3J0cy5kaWFnbm9zdGljQ291bnQgPSBkaWFnbm9zdGljQ291bnQ7XG5leHBvcnRzLmZvckVhY2hEaWFnbm9zdGljID0gZm9yRWFjaERpYWdub3N0aWM7XG5leHBvcnRzLmZvcmNlTGludGluZyA9IGZvcmNlTGludGluZztcbmV4cG9ydHMubGludEd1dHRlciA9IGxpbnRHdXR0ZXI7XG5leHBvcnRzLmxpbnRLZXltYXAgPSBsaW50S2V5bWFwO1xuZXhwb3J0cy5saW50ZXIgPSBsaW50ZXI7XG5leHBvcnRzLm5leHREaWFnbm9zdGljID0gbmV4dERpYWdub3N0aWM7XG5leHBvcnRzLm9wZW5MaW50UGFuZWwgPSBvcGVuTGludFBhbmVsO1xuZXhwb3J0cy5wcmV2aW91c0RpYWdub3N0aWMgPSBwcmV2aW91c0RpYWdub3N0aWM7XG5leHBvcnRzLnNldERpYWdub3N0aWNzID0gc2V0RGlhZ25vc3RpY3M7XG5leHBvcnRzLnNldERpYWdub3N0aWNzRWZmZWN0ID0gc2V0RGlhZ25vc3RpY3NFZmZlY3Q7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB2aWV3ID0gcmVxdWlyZSgnQGNvZGVtaXJyb3IvdmlldycpO1xudmFyIHN0YXRlID0gcmVxdWlyZSgnQGNvZGVtaXJyb3Ivc3RhdGUnKTtcbnZhciBlbHQgPSByZXF1aXJlKCdjcmVsdCcpO1xuXG5jb25zdCBiYXNpY05vcm1hbGl6ZSA9IHR5cGVvZiBTdHJpbmcucHJvdG90eXBlLm5vcm1hbGl6ZSA9PSBcImZ1bmN0aW9uXCJcbiAgICA/IHggPT4geC5ub3JtYWxpemUoXCJORktEXCIpIDogeCA9PiB4O1xuLyoqXG5BIHNlYXJjaCBjdXJzb3IgcHJvdmlkZXMgYW4gaXRlcmF0b3Igb3ZlciB0ZXh0IG1hdGNoZXMgaW4gYVxuZG9jdW1lbnQuXG4qL1xuY2xhc3MgU2VhcmNoQ3Vyc29yIHtcbiAgICAvKipcbiAgICBDcmVhdGUgYSB0ZXh0IGN1cnNvci4gVGhlIHF1ZXJ5IGlzIHRoZSBzZWFyY2ggc3RyaW5nLCBgZnJvbWAgdG9cbiAgICBgdG9gIHByb3ZpZGVzIHRoZSByZWdpb24gdG8gc2VhcmNoLlxuICAgIFxuICAgIFdoZW4gYG5vcm1hbGl6ZWAgaXMgZ2l2ZW4sIGl0IHdpbGwgYmUgY2FsbGVkLCBvbiBib3RoIHRoZSBxdWVyeVxuICAgIHN0cmluZyBhbmQgdGhlIGNvbnRlbnQgaXQgaXMgbWF0Y2hlZCBhZ2FpbnN0LCBiZWZvcmUgY29tcGFyaW5nLlxuICAgIFlvdSBjYW4sIGZvciBleGFtcGxlLCBjcmVhdGUgYSBjYXNlLWluc2Vuc2l0aXZlIHNlYXJjaCBieVxuICAgIHBhc3NpbmcgYHMgPT4gcy50b0xvd2VyQ2FzZSgpYC5cbiAgICBcbiAgICBUZXh0IGlzIGFsd2F5cyBub3JtYWxpemVkIHdpdGhcbiAgICBbYC5ub3JtYWxpemUoXCJORktEXCIpYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL25vcm1hbGl6ZSlcbiAgICAod2hlbiBzdXBwb3J0ZWQpLlxuICAgICovXG4gICAgY29uc3RydWN0b3IodGV4dCwgcXVlcnksIGZyb20gPSAwLCB0byA9IHRleHQubGVuZ3RoLCBub3JtYWxpemUsIHRlc3QpIHtcbiAgICAgICAgdGhpcy50ZXN0ID0gdGVzdDtcbiAgICAgICAgLyoqXG4gICAgICAgIFRoZSBjdXJyZW50IG1hdGNoIChvbmx5IGhvbGRzIGEgbWVhbmluZ2Z1bCB2YWx1ZSBhZnRlclxuICAgICAgICBbYG5leHRgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3NlYXJjaC5TZWFyY2hDdXJzb3IubmV4dCkgaGFzIGJlZW4gY2FsbGVkIGFuZCB3aGVuXG4gICAgICAgIGBkb25lYCBpcyBmYWxzZSkuXG4gICAgICAgICovXG4gICAgICAgIHRoaXMudmFsdWUgPSB7IGZyb206IDAsIHRvOiAwIH07XG4gICAgICAgIC8qKlxuICAgICAgICBXaGV0aGVyIHRoZSBlbmQgb2YgdGhlIGl0ZXJhdGVkIHJlZ2lvbiBoYXMgYmVlbiByZWFjaGVkLlxuICAgICAgICAqL1xuICAgICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5tYXRjaGVzID0gW107XG4gICAgICAgIHRoaXMuYnVmZmVyID0gXCJcIjtcbiAgICAgICAgdGhpcy5idWZmZXJQb3MgPSAwO1xuICAgICAgICB0aGlzLml0ZXIgPSB0ZXh0Lml0ZXJSYW5nZShmcm9tLCB0byk7XG4gICAgICAgIHRoaXMuYnVmZmVyU3RhcnQgPSBmcm9tO1xuICAgICAgICB0aGlzLm5vcm1hbGl6ZSA9IG5vcm1hbGl6ZSA/IHggPT4gbm9ybWFsaXplKGJhc2ljTm9ybWFsaXplKHgpKSA6IGJhc2ljTm9ybWFsaXplO1xuICAgICAgICB0aGlzLnF1ZXJ5ID0gdGhpcy5ub3JtYWxpemUocXVlcnkpO1xuICAgIH1cbiAgICBwZWVrKCkge1xuICAgICAgICBpZiAodGhpcy5idWZmZXJQb3MgPT0gdGhpcy5idWZmZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlclN0YXJ0ICs9IHRoaXMuYnVmZmVyLmxlbmd0aDtcbiAgICAgICAgICAgIHRoaXMuaXRlci5uZXh0KCk7XG4gICAgICAgICAgICBpZiAodGhpcy5pdGVyLmRvbmUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgdGhpcy5idWZmZXJQb3MgPSAwO1xuICAgICAgICAgICAgdGhpcy5idWZmZXIgPSB0aGlzLml0ZXIudmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0YXRlLmNvZGVQb2ludEF0KHRoaXMuYnVmZmVyLCB0aGlzLmJ1ZmZlclBvcyk7XG4gICAgfVxuICAgIC8qKlxuICAgIExvb2sgZm9yIHRoZSBuZXh0IG1hdGNoLiBVcGRhdGVzIHRoZSBpdGVyYXRvcidzXG4gICAgW2B2YWx1ZWBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc2VhcmNoLlNlYXJjaEN1cnNvci52YWx1ZSkgYW5kXG4gICAgW2Bkb25lYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzZWFyY2guU2VhcmNoQ3Vyc29yLmRvbmUpIHByb3BlcnRpZXMuIFNob3VsZCBiZSBjYWxsZWRcbiAgICBhdCBsZWFzdCBvbmNlIGJlZm9yZSB1c2luZyB0aGUgY3Vyc29yLlxuICAgICovXG4gICAgbmV4dCgpIHtcbiAgICAgICAgd2hpbGUgKHRoaXMubWF0Y2hlcy5sZW5ndGgpXG4gICAgICAgICAgICB0aGlzLm1hdGNoZXMucG9wKCk7XG4gICAgICAgIHJldHVybiB0aGlzLm5leHRPdmVybGFwcGluZygpO1xuICAgIH1cbiAgICAvKipcbiAgICBUaGUgYG5leHRgIG1ldGhvZCB3aWxsIGlnbm9yZSBtYXRjaGVzIHRoYXQgcGFydGlhbGx5IG92ZXJsYXAgYVxuICAgIHByZXZpb3VzIG1hdGNoLiBUaGlzIG1ldGhvZCBiZWhhdmVzIGxpa2UgYG5leHRgLCBidXQgaW5jbHVkZXNcbiAgICBzdWNoIG1hdGNoZXMuXG4gICAgKi9cbiAgICBuZXh0T3ZlcmxhcHBpbmcoKSB7XG4gICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgIGxldCBuZXh0ID0gdGhpcy5wZWVrKCk7XG4gICAgICAgICAgICBpZiAobmV4dCA8IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHN0ciA9IHN0YXRlLmZyb21Db2RlUG9pbnQobmV4dCksIHN0YXJ0ID0gdGhpcy5idWZmZXJTdGFydCArIHRoaXMuYnVmZmVyUG9zO1xuICAgICAgICAgICAgdGhpcy5idWZmZXJQb3MgKz0gc3RhdGUuY29kZVBvaW50U2l6ZShuZXh0KTtcbiAgICAgICAgICAgIGxldCBub3JtID0gdGhpcy5ub3JtYWxpemUoc3RyKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBwb3MgPSBzdGFydDs7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBjb2RlID0gbm9ybS5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgICAgIGxldCBtYXRjaCA9IHRoaXMubWF0Y2goY29kZSwgcG9zLCB0aGlzLmJ1ZmZlclBvcyArIHRoaXMuYnVmZmVyU3RhcnQpO1xuICAgICAgICAgICAgICAgIGlmIChpID09IG5vcm0ubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSBtYXRjaDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocG9zID09IHN0YXJ0ICYmIGkgPCBzdHIubGVuZ3RoICYmIHN0ci5jaGFyQ29kZUF0KGkpID09IGNvZGUpXG4gICAgICAgICAgICAgICAgICAgIHBvcysrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIG1hdGNoKGNvZGUsIHBvcywgZW5kKSB7XG4gICAgICAgIGxldCBtYXRjaCA9IG51bGw7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5tYXRjaGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgICAgICBsZXQgaW5kZXggPSB0aGlzLm1hdGNoZXNbaV0sIGtlZXAgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0aGlzLnF1ZXJ5LmNoYXJDb2RlQXQoaW5kZXgpID09IGNvZGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT0gdGhpcy5xdWVyeS5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoID0geyBmcm9tOiB0aGlzLm1hdGNoZXNbaSArIDFdLCB0bzogZW5kIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdGNoZXNbaV0rKztcbiAgICAgICAgICAgICAgICAgICAga2VlcCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFrZWVwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXRjaGVzLnNwbGljZShpLCAyKTtcbiAgICAgICAgICAgICAgICBpIC09IDI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucXVlcnkuY2hhckNvZGVBdCgwKSA9PSBjb2RlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5xdWVyeS5sZW5ndGggPT0gMSlcbiAgICAgICAgICAgICAgICBtYXRjaCA9IHsgZnJvbTogcG9zLCB0bzogZW5kIH07XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhpcy5tYXRjaGVzLnB1c2goMSwgcG9zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF0Y2ggJiYgdGhpcy50ZXN0ICYmICF0aGlzLnRlc3QobWF0Y2guZnJvbSwgbWF0Y2gudG8sIHRoaXMuYnVmZmVyLCB0aGlzLmJ1ZmZlclN0YXJ0KSlcbiAgICAgICAgICAgIG1hdGNoID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH1cbn1cbmlmICh0eXBlb2YgU3ltYm9sICE9IFwidW5kZWZpbmVkXCIpXG4gICAgU2VhcmNoQ3Vyc29yLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxuY29uc3QgZW1wdHkgPSB7IGZyb206IC0xLCB0bzogLTEsIG1hdGNoOiAvLiovLmV4ZWMoXCJcIikgfTtcbmNvbnN0IGJhc2VGbGFncyA9IFwiZ21cIiArICgveC8udW5pY29kZSA9PSBudWxsID8gXCJcIiA6IFwidVwiKTtcbi8qKlxuVGhpcyBjbGFzcyBpcyBzaW1pbGFyIHRvIFtgU2VhcmNoQ3Vyc29yYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzZWFyY2guU2VhcmNoQ3Vyc29yKVxuYnV0IHNlYXJjaGVzIGZvciBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBwYXR0ZXJuIGluc3RlYWQgb2YgYSBwbGFpblxuc3RyaW5nLlxuKi9cbmNsYXNzIFJlZ0V4cEN1cnNvciB7XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgY3Vyc29yIHRoYXQgd2lsbCBzZWFyY2ggdGhlIGdpdmVuIHJhbmdlIGluIHRoZSBnaXZlblxuICAgIGRvY3VtZW50LiBgcXVlcnlgIHNob3VsZCBiZSB0aGUgcmF3IHBhdHRlcm4gKGFzIHlvdSdkIHBhc3MgaXQgdG9cbiAgICBgbmV3IFJlZ0V4cGApLlxuICAgICovXG4gICAgY29uc3RydWN0b3IodGV4dCwgcXVlcnksIG9wdGlvbnMsIGZyb20gPSAwLCB0byA9IHRleHQubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgICAgIHRoaXMudG8gPSB0bztcbiAgICAgICAgdGhpcy5jdXJMaW5lID0gXCJcIjtcbiAgICAgICAgLyoqXG4gICAgICAgIFNldCB0byBgdHJ1ZWAgd2hlbiB0aGUgY3Vyc29yIGhhcyByZWFjaGVkIHRoZSBlbmQgb2YgdGhlIHNlYXJjaFxuICAgICAgICByYW5nZS5cbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICBXaWxsIGNvbnRhaW4gYW4gb2JqZWN0IHdpdGggdGhlIGV4dGVudCBvZiB0aGUgbWF0Y2ggYW5kIHRoZVxuICAgICAgICBtYXRjaCBvYmplY3Qgd2hlbiBbYG5leHRgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3NlYXJjaC5SZWdFeHBDdXJzb3IubmV4dClcbiAgICAgICAgc3VjZXNzZnVsbHkgZmluZHMgYSBtYXRjaC5cbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy52YWx1ZSA9IGVtcHR5O1xuICAgICAgICBpZiAoL1xcXFxbc1dEbnJdfFxcbnxcXHJ8XFxbXFxeLy50ZXN0KHF1ZXJ5KSlcbiAgICAgICAgICAgIHJldHVybiBuZXcgTXVsdGlsaW5lUmVnRXhwQ3Vyc29yKHRleHQsIHF1ZXJ5LCBvcHRpb25zLCBmcm9tLCB0byk7XG4gICAgICAgIHRoaXMucmUgPSBuZXcgUmVnRXhwKHF1ZXJ5LCBiYXNlRmxhZ3MgKyAoKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5pZ25vcmVDYXNlKSA/IFwiaVwiIDogXCJcIikpO1xuICAgICAgICB0aGlzLnRlc3QgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMudGVzdDtcbiAgICAgICAgdGhpcy5pdGVyID0gdGV4dC5pdGVyKCk7XG4gICAgICAgIGxldCBzdGFydExpbmUgPSB0ZXh0LmxpbmVBdChmcm9tKTtcbiAgICAgICAgdGhpcy5jdXJMaW5lU3RhcnQgPSBzdGFydExpbmUuZnJvbTtcbiAgICAgICAgdGhpcy5tYXRjaFBvcyA9IHRvQ2hhckVuZCh0ZXh0LCBmcm9tKTtcbiAgICAgICAgdGhpcy5nZXRMaW5lKHRoaXMuY3VyTGluZVN0YXJ0KTtcbiAgICB9XG4gICAgZ2V0TGluZShza2lwKSB7XG4gICAgICAgIHRoaXMuaXRlci5uZXh0KHNraXApO1xuICAgICAgICBpZiAodGhpcy5pdGVyLmxpbmVCcmVhaykge1xuICAgICAgICAgICAgdGhpcy5jdXJMaW5lID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY3VyTGluZSA9IHRoaXMuaXRlci52YWx1ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1ckxpbmVTdGFydCArIHRoaXMuY3VyTGluZS5sZW5ndGggPiB0aGlzLnRvKVxuICAgICAgICAgICAgICAgIHRoaXMuY3VyTGluZSA9IHRoaXMuY3VyTGluZS5zbGljZSgwLCB0aGlzLnRvIC0gdGhpcy5jdXJMaW5lU3RhcnQpO1xuICAgICAgICAgICAgdGhpcy5pdGVyLm5leHQoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBuZXh0TGluZSgpIHtcbiAgICAgICAgdGhpcy5jdXJMaW5lU3RhcnQgPSB0aGlzLmN1ckxpbmVTdGFydCArIHRoaXMuY3VyTGluZS5sZW5ndGggKyAxO1xuICAgICAgICBpZiAodGhpcy5jdXJMaW5lU3RhcnQgPiB0aGlzLnRvKVxuICAgICAgICAgICAgdGhpcy5jdXJMaW5lID0gXCJcIjtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy5nZXRMaW5lKDApO1xuICAgIH1cbiAgICAvKipcbiAgICBNb3ZlIHRvIHRoZSBuZXh0IG1hdGNoLCBpZiB0aGVyZSBpcyBvbmUuXG4gICAgKi9cbiAgICBuZXh0KCkge1xuICAgICAgICBmb3IgKGxldCBvZmYgPSB0aGlzLm1hdGNoUG9zIC0gdGhpcy5jdXJMaW5lU3RhcnQ7Oykge1xuICAgICAgICAgICAgdGhpcy5yZS5sYXN0SW5kZXggPSBvZmY7XG4gICAgICAgICAgICBsZXQgbWF0Y2ggPSB0aGlzLm1hdGNoUG9zIDw9IHRoaXMudG8gJiYgdGhpcy5yZS5leGVjKHRoaXMuY3VyTGluZSk7XG4gICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICBsZXQgZnJvbSA9IHRoaXMuY3VyTGluZVN0YXJ0ICsgbWF0Y2guaW5kZXgsIHRvID0gZnJvbSArIG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB0aGlzLm1hdGNoUG9zID0gdG9DaGFyRW5kKHRoaXMudGV4dCwgdG8gKyAoZnJvbSA9PSB0byA/IDEgOiAwKSk7XG4gICAgICAgICAgICAgICAgaWYgKGZyb20gPT0gdGhpcy5jdXJMaW5lU3RhcnQgKyB0aGlzLmN1ckxpbmUubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHRMaW5lKCk7XG4gICAgICAgICAgICAgICAgaWYgKChmcm9tIDwgdG8gfHwgZnJvbSA+IHRoaXMudmFsdWUudG8pICYmICghdGhpcy50ZXN0IHx8IHRoaXMudGVzdChmcm9tLCB0bywgbWF0Y2gpKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0geyBmcm9tLCB0bywgbWF0Y2ggfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9mZiA9IHRoaXMubWF0Y2hQb3MgLSB0aGlzLmN1ckxpbmVTdGFydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuY3VyTGluZVN0YXJ0ICsgdGhpcy5jdXJMaW5lLmxlbmd0aCA8IHRoaXMudG8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5leHRMaW5lKCk7XG4gICAgICAgICAgICAgICAgb2ZmID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5jb25zdCBmbGF0dGVuZWQgPSBuZXcgV2Vha01hcCgpO1xuLy8gUmV1c2FibGUgKHBhcnRpYWxseSkgZmxhdHRlbmVkIGRvY3VtZW50IHN0cmluZ3NcbmNsYXNzIEZsYXR0ZW5lZERvYyB7XG4gICAgY29uc3RydWN0b3IoZnJvbSwgdGV4dCkge1xuICAgICAgICB0aGlzLmZyb20gPSBmcm9tO1xuICAgICAgICB0aGlzLnRleHQgPSB0ZXh0O1xuICAgIH1cbiAgICBnZXQgdG8oKSB7IHJldHVybiB0aGlzLmZyb20gKyB0aGlzLnRleHQubGVuZ3RoOyB9XG4gICAgc3RhdGljIGdldChkb2MsIGZyb20sIHRvKSB7XG4gICAgICAgIGxldCBjYWNoZWQgPSBmbGF0dGVuZWQuZ2V0KGRvYyk7XG4gICAgICAgIGlmICghY2FjaGVkIHx8IGNhY2hlZC5mcm9tID49IHRvIHx8IGNhY2hlZC50byA8PSBmcm9tKSB7XG4gICAgICAgICAgICBsZXQgZmxhdCA9IG5ldyBGbGF0dGVuZWREb2MoZnJvbSwgZG9jLnNsaWNlU3RyaW5nKGZyb20sIHRvKSk7XG4gICAgICAgICAgICBmbGF0dGVuZWQuc2V0KGRvYywgZmxhdCk7XG4gICAgICAgICAgICByZXR1cm4gZmxhdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2FjaGVkLmZyb20gPT0gZnJvbSAmJiBjYWNoZWQudG8gPT0gdG8pXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkO1xuICAgICAgICBsZXQgeyB0ZXh0LCBmcm9tOiBjYWNoZWRGcm9tIH0gPSBjYWNoZWQ7XG4gICAgICAgIGlmIChjYWNoZWRGcm9tID4gZnJvbSkge1xuICAgICAgICAgICAgdGV4dCA9IGRvYy5zbGljZVN0cmluZyhmcm9tLCBjYWNoZWRGcm9tKSArIHRleHQ7XG4gICAgICAgICAgICBjYWNoZWRGcm9tID0gZnJvbTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2FjaGVkLnRvIDwgdG8pXG4gICAgICAgICAgICB0ZXh0ICs9IGRvYy5zbGljZVN0cmluZyhjYWNoZWQudG8sIHRvKTtcbiAgICAgICAgZmxhdHRlbmVkLnNldChkb2MsIG5ldyBGbGF0dGVuZWREb2MoY2FjaGVkRnJvbSwgdGV4dCkpO1xuICAgICAgICByZXR1cm4gbmV3IEZsYXR0ZW5lZERvYyhmcm9tLCB0ZXh0LnNsaWNlKGZyb20gLSBjYWNoZWRGcm9tLCB0byAtIGNhY2hlZEZyb20pKTtcbiAgICB9XG59XG5jbGFzcyBNdWx0aWxpbmVSZWdFeHBDdXJzb3Ige1xuICAgIGNvbnN0cnVjdG9yKHRleHQsIHF1ZXJ5LCBvcHRpb25zLCBmcm9tLCB0bykge1xuICAgICAgICB0aGlzLnRleHQgPSB0ZXh0O1xuICAgICAgICB0aGlzLnRvID0gdG87XG4gICAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnZhbHVlID0gZW1wdHk7XG4gICAgICAgIHRoaXMubWF0Y2hQb3MgPSB0b0NoYXJFbmQodGV4dCwgZnJvbSk7XG4gICAgICAgIHRoaXMucmUgPSBuZXcgUmVnRXhwKHF1ZXJ5LCBiYXNlRmxhZ3MgKyAoKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5pZ25vcmVDYXNlKSA/IFwiaVwiIDogXCJcIikpO1xuICAgICAgICB0aGlzLnRlc3QgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMudGVzdDtcbiAgICAgICAgdGhpcy5mbGF0ID0gRmxhdHRlbmVkRG9jLmdldCh0ZXh0LCBmcm9tLCB0aGlzLmNodW5rRW5kKGZyb20gKyA1MDAwIC8qIENodW5rLkJhc2UgKi8pKTtcbiAgICB9XG4gICAgY2h1bmtFbmQocG9zKSB7XG4gICAgICAgIHJldHVybiBwb3MgPj0gdGhpcy50byA/IHRoaXMudG8gOiB0aGlzLnRleHQubGluZUF0KHBvcykudG87XG4gICAgfVxuICAgIG5leHQoKSB7XG4gICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgIGxldCBvZmYgPSB0aGlzLnJlLmxhc3RJbmRleCA9IHRoaXMubWF0Y2hQb3MgLSB0aGlzLmZsYXQuZnJvbTtcbiAgICAgICAgICAgIGxldCBtYXRjaCA9IHRoaXMucmUuZXhlYyh0aGlzLmZsYXQudGV4dCk7XG4gICAgICAgICAgICAvLyBTa2lwIGVtcHR5IG1hdGNoZXMgZGlyZWN0bHkgYWZ0ZXIgdGhlIGxhc3QgbWF0Y2hcbiAgICAgICAgICAgIGlmIChtYXRjaCAmJiAhbWF0Y2hbMF0gJiYgbWF0Y2guaW5kZXggPT0gb2ZmKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZS5sYXN0SW5kZXggPSBvZmYgKyAxO1xuICAgICAgICAgICAgICAgIG1hdGNoID0gdGhpcy5yZS5leGVjKHRoaXMuZmxhdC50ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIGxldCBmcm9tID0gdGhpcy5mbGF0LmZyb20gKyBtYXRjaC5pbmRleCwgdG8gPSBmcm9tICsgbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICAgICAgICAgIC8vIElmIGEgbWF0Y2ggZ29lcyBhbG1vc3QgdG8gdGhlIGVuZCBvZiBhIG5vbmNvbXBsZXRlIGNodW5rLCB0cnlcbiAgICAgICAgICAgICAgICAvLyBhZ2Fpbiwgc2luY2UgaXQnbGwgbGlrZWx5IGJlIGFibGUgdG8gbWF0Y2ggbW9yZVxuICAgICAgICAgICAgICAgIGlmICgodGhpcy5mbGF0LnRvID49IHRoaXMudG8gfHwgbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggPD0gdGhpcy5mbGF0LnRleHQubGVuZ3RoIC0gMTApICYmXG4gICAgICAgICAgICAgICAgICAgICghdGhpcy50ZXN0IHx8IHRoaXMudGVzdChmcm9tLCB0bywgbWF0Y2gpKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0geyBmcm9tLCB0bywgbWF0Y2ggfTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXRjaFBvcyA9IHRvQ2hhckVuZCh0aGlzLnRleHQsIHRvICsgKGZyb20gPT0gdG8gPyAxIDogMCkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5mbGF0LnRvID09IHRoaXMudG8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gR3JvdyB0aGUgZmxhdHRlbmVkIGRvY1xuICAgICAgICAgICAgdGhpcy5mbGF0ID0gRmxhdHRlbmVkRG9jLmdldCh0aGlzLnRleHQsIHRoaXMuZmxhdC5mcm9tLCB0aGlzLmNodW5rRW5kKHRoaXMuZmxhdC5mcm9tICsgdGhpcy5mbGF0LnRleHQubGVuZ3RoICogMikpO1xuICAgICAgICB9XG4gICAgfVxufVxuaWYgKHR5cGVvZiBTeW1ib2wgIT0gXCJ1bmRlZmluZWRcIikge1xuICAgIFJlZ0V4cEN1cnNvci5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IE11bHRpbGluZVJlZ0V4cEN1cnNvci5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9XG4gICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG59XG5mdW5jdGlvbiB2YWxpZFJlZ0V4cChzb3VyY2UpIHtcbiAgICB0cnkge1xuICAgICAgICBuZXcgUmVnRXhwKHNvdXJjZSwgYmFzZUZsYWdzKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNhdGNoIChfYSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuZnVuY3Rpb24gdG9DaGFyRW5kKHRleHQsIHBvcykge1xuICAgIGlmIChwb3MgPj0gdGV4dC5sZW5ndGgpXG4gICAgICAgIHJldHVybiBwb3M7XG4gICAgbGV0IGxpbmUgPSB0ZXh0LmxpbmVBdChwb3MpLCBuZXh0O1xuICAgIHdoaWxlIChwb3MgPCBsaW5lLnRvICYmIChuZXh0ID0gbGluZS50ZXh0LmNoYXJDb2RlQXQocG9zIC0gbGluZS5mcm9tKSkgPj0gMHhEQzAwICYmIG5leHQgPCAweEUwMDApXG4gICAgICAgIHBvcysrO1xuICAgIHJldHVybiBwb3M7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmVEaWFsb2codmlldyQxKSB7XG4gICAgbGV0IGxpbmUgPSBTdHJpbmcodmlldyQxLnN0YXRlLmRvYy5saW5lQXQodmlldyQxLnN0YXRlLnNlbGVjdGlvbi5tYWluLmhlYWQpLm51bWJlcik7XG4gICAgbGV0IGlucHV0ID0gZWx0KFwiaW5wdXRcIiwgeyBjbGFzczogXCJjbS10ZXh0ZmllbGRcIiwgbmFtZTogXCJsaW5lXCIsIHZhbHVlOiBsaW5lIH0pO1xuICAgIGxldCBkb20gPSBlbHQoXCJmb3JtXCIsIHtcbiAgICAgICAgY2xhc3M6IFwiY20tZ290b0xpbmVcIixcbiAgICAgICAgb25rZXlkb3duOiAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC5rZXlDb2RlID09IDI3KSB7IC8vIEVzY2FwZVxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgdmlldyQxLmRpc3BhdGNoKHsgZWZmZWN0czogZGlhbG9nRWZmZWN0Lm9mKGZhbHNlKSB9KTtcbiAgICAgICAgICAgICAgICB2aWV3JDEuZm9jdXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGV2ZW50LmtleUNvZGUgPT0gMTMpIHsgLy8gRW50ZXJcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGdvKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9uc3VibWl0OiAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBnbygpO1xuICAgICAgICB9XG4gICAgfSwgZWx0KFwibGFiZWxcIiwgdmlldyQxLnN0YXRlLnBocmFzZShcIkdvIHRvIGxpbmVcIiksIFwiOiBcIiwgaW5wdXQpLCBcIiBcIiwgZWx0KFwiYnV0dG9uXCIsIHsgY2xhc3M6IFwiY20tYnV0dG9uXCIsIHR5cGU6IFwic3VibWl0XCIgfSwgdmlldyQxLnN0YXRlLnBocmFzZShcImdvXCIpKSk7XG4gICAgZnVuY3Rpb24gZ28oKSB7XG4gICAgICAgIGxldCBtYXRjaCA9IC9eKFsrLV0pPyhcXGQrKT8oOlxcZCspPyglKT8kLy5leGVjKGlucHV0LnZhbHVlKTtcbiAgICAgICAgaWYgKCFtYXRjaClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbGV0IHsgc3RhdGU6IHN0YXRlJDEgfSA9IHZpZXckMSwgc3RhcnRMaW5lID0gc3RhdGUkMS5kb2MubGluZUF0KHN0YXRlJDEuc2VsZWN0aW9uLm1haW4uaGVhZCk7XG4gICAgICAgIGxldCBbLCBzaWduLCBsbiwgY2wsIHBlcmNlbnRdID0gbWF0Y2g7XG4gICAgICAgIGxldCBjb2wgPSBjbCA/ICtjbC5zbGljZSgxKSA6IDA7XG4gICAgICAgIGxldCBsaW5lID0gbG4gPyArbG4gOiBzdGFydExpbmUubnVtYmVyO1xuICAgICAgICBpZiAobG4gJiYgcGVyY2VudCkge1xuICAgICAgICAgICAgbGV0IHBjID0gbGluZSAvIDEwMDtcbiAgICAgICAgICAgIGlmIChzaWduKVxuICAgICAgICAgICAgICAgIHBjID0gcGMgKiAoc2lnbiA9PSBcIi1cIiA/IC0xIDogMSkgKyAoc3RhcnRMaW5lLm51bWJlciAvIHN0YXRlJDEuZG9jLmxpbmVzKTtcbiAgICAgICAgICAgIGxpbmUgPSBNYXRoLnJvdW5kKHN0YXRlJDEuZG9jLmxpbmVzICogcGMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGxuICYmIHNpZ24pIHtcbiAgICAgICAgICAgIGxpbmUgPSBsaW5lICogKHNpZ24gPT0gXCItXCIgPyAtMSA6IDEpICsgc3RhcnRMaW5lLm51bWJlcjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZG9jTGluZSA9IHN0YXRlJDEuZG9jLmxpbmUoTWF0aC5tYXgoMSwgTWF0aC5taW4oc3RhdGUkMS5kb2MubGluZXMsIGxpbmUpKSk7XG4gICAgICAgIGxldCBzZWxlY3Rpb24gPSBzdGF0ZS5FZGl0b3JTZWxlY3Rpb24uY3Vyc29yKGRvY0xpbmUuZnJvbSArIE1hdGgubWF4KDAsIE1hdGgubWluKGNvbCwgZG9jTGluZS5sZW5ndGgpKSk7XG4gICAgICAgIHZpZXckMS5kaXNwYXRjaCh7XG4gICAgICAgICAgICBlZmZlY3RzOiBbZGlhbG9nRWZmZWN0Lm9mKGZhbHNlKSwgdmlldy5FZGl0b3JWaWV3LnNjcm9sbEludG9WaWV3KHNlbGVjdGlvbi5mcm9tLCB7IHk6ICdjZW50ZXInIH0pXSxcbiAgICAgICAgICAgIHNlbGVjdGlvbixcbiAgICAgICAgfSk7XG4gICAgICAgIHZpZXckMS5mb2N1cygpO1xuICAgIH1cbiAgICByZXR1cm4geyBkb20gfTtcbn1cbmNvbnN0IGRpYWxvZ0VmZmVjdCA9IHN0YXRlLlN0YXRlRWZmZWN0LmRlZmluZSgpO1xuY29uc3QgZGlhbG9nRmllbGQgPSBzdGF0ZS5TdGF0ZUZpZWxkLmRlZmluZSh7XG4gICAgY3JlYXRlKCkgeyByZXR1cm4gdHJ1ZTsgfSxcbiAgICB1cGRhdGUodmFsdWUsIHRyKSB7XG4gICAgICAgIGZvciAobGV0IGUgb2YgdHIuZWZmZWN0cylcbiAgICAgICAgICAgIGlmIChlLmlzKGRpYWxvZ0VmZmVjdCkpXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBlLnZhbHVlO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBwcm92aWRlOiBmID0+IHZpZXcuc2hvd1BhbmVsLmZyb20oZiwgdmFsID0+IHZhbCA/IGNyZWF0ZUxpbmVEaWFsb2cgOiBudWxsKVxufSk7XG4vKipcbkNvbW1hbmQgdGhhdCBzaG93cyBhIGRpYWxvZyBhc2tpbmcgdGhlIHVzZXIgZm9yIGEgbGluZSBudW1iZXIsIGFuZFxud2hlbiBhIHZhbGlkIHBvc2l0aW9uIGlzIHByb3ZpZGVkLCBtb3ZlcyB0aGUgY3Vyc29yIHRvIHRoYXQgbGluZS5cblxuU3VwcG9ydHMgbGluZSBudW1iZXJzLCByZWxhdGl2ZSBsaW5lIG9mZnNldHMgcHJlZml4ZWQgd2l0aCBgK2Agb3JcbmAtYCwgZG9jdW1lbnQgcGVyY2VudGFnZXMgc3VmZml4ZWQgd2l0aCBgJWAsIGFuZCBhbiBvcHRpb25hbFxuY29sdW1uIHBvc2l0aW9uIGJ5IGFkZGluZyBgOmAgYW5kIGEgc2Vjb25kIG51bWJlciBhZnRlciB0aGUgbGluZVxubnVtYmVyLlxuKi9cbmNvbnN0IGdvdG9MaW5lID0gdmlldyQxID0+IHtcbiAgICBsZXQgcGFuZWwgPSB2aWV3LmdldFBhbmVsKHZpZXckMSwgY3JlYXRlTGluZURpYWxvZyk7XG4gICAgaWYgKCFwYW5lbCkge1xuICAgICAgICBsZXQgZWZmZWN0cyA9IFtkaWFsb2dFZmZlY3Qub2YodHJ1ZSldO1xuICAgICAgICBpZiAodmlldyQxLnN0YXRlLmZpZWxkKGRpYWxvZ0ZpZWxkLCBmYWxzZSkgPT0gbnVsbClcbiAgICAgICAgICAgIGVmZmVjdHMucHVzaChzdGF0ZS5TdGF0ZUVmZmVjdC5hcHBlbmRDb25maWcub2YoW2RpYWxvZ0ZpZWxkLCBiYXNlVGhlbWUkMV0pKTtcbiAgICAgICAgdmlldyQxLmRpc3BhdGNoKHsgZWZmZWN0cyB9KTtcbiAgICAgICAgcGFuZWwgPSB2aWV3LmdldFBhbmVsKHZpZXckMSwgY3JlYXRlTGluZURpYWxvZyk7XG4gICAgfVxuICAgIGlmIChwYW5lbClcbiAgICAgICAgcGFuZWwuZG9tLnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFwiKS5zZWxlY3QoKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5jb25zdCBiYXNlVGhlbWUkMSA9IHZpZXcuRWRpdG9yVmlldy5iYXNlVGhlbWUoe1xuICAgIFwiLmNtLXBhbmVsLmNtLWdvdG9MaW5lXCI6IHtcbiAgICAgICAgcGFkZGluZzogXCIycHggNnB4IDRweFwiLFxuICAgICAgICBcIiYgbGFiZWxcIjogeyBmb250U2l6ZTogXCI4MCVcIiB9XG4gICAgfVxufSk7XG5cbmNvbnN0IGRlZmF1bHRIaWdobGlnaHRPcHRpb25zID0ge1xuICAgIGhpZ2hsaWdodFdvcmRBcm91bmRDdXJzb3I6IGZhbHNlLFxuICAgIG1pblNlbGVjdGlvbkxlbmd0aDogMSxcbiAgICBtYXhNYXRjaGVzOiAxMDAsXG4gICAgd2hvbGVXb3JkczogZmFsc2Vcbn07XG5jb25zdCBoaWdobGlnaHRDb25maWcgPSBzdGF0ZS5GYWNldC5kZWZpbmUoe1xuICAgIGNvbWJpbmUob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gc3RhdGUuY29tYmluZUNvbmZpZyhvcHRpb25zLCBkZWZhdWx0SGlnaGxpZ2h0T3B0aW9ucywge1xuICAgICAgICAgICAgaGlnaGxpZ2h0V29yZEFyb3VuZEN1cnNvcjogKGEsIGIpID0+IGEgfHwgYixcbiAgICAgICAgICAgIG1pblNlbGVjdGlvbkxlbmd0aDogTWF0aC5taW4sXG4gICAgICAgICAgICBtYXhNYXRjaGVzOiBNYXRoLm1pblxuICAgICAgICB9KTtcbiAgICB9XG59KTtcbi8qKlxuVGhpcyBleHRlbnNpb24gaGlnaGxpZ2h0cyB0ZXh0IHRoYXQgbWF0Y2hlcyB0aGUgc2VsZWN0aW9uLiBJdCB1c2VzXG50aGUgYFwiY20tc2VsZWN0aW9uTWF0Y2hcImAgY2xhc3MgZm9yIHRoZSBoaWdobGlnaHRpbmcuIFdoZW5cbmBoaWdobGlnaHRXb3JkQXJvdW5kQ3Vyc29yYCBpcyBlbmFibGVkLCB0aGUgd29yZCBhdCB0aGUgY3Vyc29yXG5pdHNlbGYgd2lsbCBiZSBoaWdobGlnaHRlZCB3aXRoIGBcImNtLXNlbGVjdGlvbk1hdGNoLW1haW5cImAuXG4qL1xuZnVuY3Rpb24gaGlnaGxpZ2h0U2VsZWN0aW9uTWF0Y2hlcyhvcHRpb25zKSB7XG4gICAgbGV0IGV4dCA9IFtkZWZhdWx0VGhlbWUsIG1hdGNoSGlnaGxpZ2h0ZXJdO1xuICAgIGlmIChvcHRpb25zKVxuICAgICAgICBleHQucHVzaChoaWdobGlnaHRDb25maWcub2Yob3B0aW9ucykpO1xuICAgIHJldHVybiBleHQ7XG59XG5jb25zdCBtYXRjaERlY28gPSB2aWV3LkRlY29yYXRpb24ubWFyayh7IGNsYXNzOiBcImNtLXNlbGVjdGlvbk1hdGNoXCIgfSk7XG5jb25zdCBtYWluTWF0Y2hEZWNvID0gdmlldy5EZWNvcmF0aW9uLm1hcmsoeyBjbGFzczogXCJjbS1zZWxlY3Rpb25NYXRjaCBjbS1zZWxlY3Rpb25NYXRjaC1tYWluXCIgfSk7XG4vLyBXaGV0aGVyIHRoZSBjaGFyYWN0ZXJzIGRpcmVjdGx5IG91dHNpZGUgdGhlIGdpdmVuIHBvc2l0aW9ucyBhcmUgbm9uLXdvcmQgY2hhcmFjdGVyc1xuZnVuY3Rpb24gaW5zaWRlV29yZEJvdW5kYXJpZXMoY2hlY2ssIHN0YXRlJDEsIGZyb20sIHRvKSB7XG4gICAgcmV0dXJuIChmcm9tID09IDAgfHwgY2hlY2soc3RhdGUkMS5zbGljZURvYyhmcm9tIC0gMSwgZnJvbSkpICE9IHN0YXRlLkNoYXJDYXRlZ29yeS5Xb3JkKSAmJlxuICAgICAgICAodG8gPT0gc3RhdGUkMS5kb2MubGVuZ3RoIHx8IGNoZWNrKHN0YXRlJDEuc2xpY2VEb2ModG8sIHRvICsgMSkpICE9IHN0YXRlLkNoYXJDYXRlZ29yeS5Xb3JkKTtcbn1cbi8vIFdoZXRoZXIgdGhlIGNoYXJhY3RlcnMgZGlyZWN0bHkgYXQgdGhlIGdpdmVuIHBvc2l0aW9ucyBhcmUgd29yZCBjaGFyYWN0ZXJzXG5mdW5jdGlvbiBpbnNpZGVXb3JkKGNoZWNrLCBzdGF0ZSQxLCBmcm9tLCB0bykge1xuICAgIHJldHVybiBjaGVjayhzdGF0ZSQxLnNsaWNlRG9jKGZyb20sIGZyb20gKyAxKSkgPT0gc3RhdGUuQ2hhckNhdGVnb3J5LldvcmRcbiAgICAgICAgJiYgY2hlY2soc3RhdGUkMS5zbGljZURvYyh0byAtIDEsIHRvKSkgPT0gc3RhdGUuQ2hhckNhdGVnb3J5LldvcmQ7XG59XG5jb25zdCBtYXRjaEhpZ2hsaWdodGVyID0gdmlldy5WaWV3UGx1Z2luLmZyb21DbGFzcyhjbGFzcyB7XG4gICAgY29uc3RydWN0b3Iodmlldykge1xuICAgICAgICB0aGlzLmRlY29yYXRpb25zID0gdGhpcy5nZXREZWNvKHZpZXcpO1xuICAgIH1cbiAgICB1cGRhdGUodXBkYXRlKSB7XG4gICAgICAgIGlmICh1cGRhdGUuc2VsZWN0aW9uU2V0IHx8IHVwZGF0ZS5kb2NDaGFuZ2VkIHx8IHVwZGF0ZS52aWV3cG9ydENoYW5nZWQpXG4gICAgICAgICAgICB0aGlzLmRlY29yYXRpb25zID0gdGhpcy5nZXREZWNvKHVwZGF0ZS52aWV3KTtcbiAgICB9XG4gICAgZ2V0RGVjbyh2aWV3JDEpIHtcbiAgICAgICAgbGV0IGNvbmYgPSB2aWV3JDEuc3RhdGUuZmFjZXQoaGlnaGxpZ2h0Q29uZmlnKTtcbiAgICAgICAgbGV0IHsgc3RhdGUgfSA9IHZpZXckMSwgc2VsID0gc3RhdGUuc2VsZWN0aW9uO1xuICAgICAgICBpZiAoc2VsLnJhbmdlcy5sZW5ndGggPiAxKVxuICAgICAgICAgICAgcmV0dXJuIHZpZXcuRGVjb3JhdGlvbi5ub25lO1xuICAgICAgICBsZXQgcmFuZ2UgPSBzZWwubWFpbiwgcXVlcnksIGNoZWNrID0gbnVsbDtcbiAgICAgICAgaWYgKHJhbmdlLmVtcHR5KSB7XG4gICAgICAgICAgICBpZiAoIWNvbmYuaGlnaGxpZ2h0V29yZEFyb3VuZEN1cnNvcilcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlldy5EZWNvcmF0aW9uLm5vbmU7XG4gICAgICAgICAgICBsZXQgd29yZCA9IHN0YXRlLndvcmRBdChyYW5nZS5oZWFkKTtcbiAgICAgICAgICAgIGlmICghd29yZClcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlldy5EZWNvcmF0aW9uLm5vbmU7XG4gICAgICAgICAgICBjaGVjayA9IHN0YXRlLmNoYXJDYXRlZ29yaXplcihyYW5nZS5oZWFkKTtcbiAgICAgICAgICAgIHF1ZXJ5ID0gc3RhdGUuc2xpY2VEb2Mod29yZC5mcm9tLCB3b3JkLnRvKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCBsZW4gPSByYW5nZS50byAtIHJhbmdlLmZyb207XG4gICAgICAgICAgICBpZiAobGVuIDwgY29uZi5taW5TZWxlY3Rpb25MZW5ndGggfHwgbGVuID4gMjAwKVxuICAgICAgICAgICAgICAgIHJldHVybiB2aWV3LkRlY29yYXRpb24ubm9uZTtcbiAgICAgICAgICAgIGlmIChjb25mLndob2xlV29yZHMpIHtcbiAgICAgICAgICAgICAgICBxdWVyeSA9IHN0YXRlLnNsaWNlRG9jKHJhbmdlLmZyb20sIHJhbmdlLnRvKTsgLy8gVE9ETzogYWxsb3cgYW5kIGluY2x1ZGUgbGVhZGluZy90cmFpbGluZyBzcGFjZT9cbiAgICAgICAgICAgICAgICBjaGVjayA9IHN0YXRlLmNoYXJDYXRlZ29yaXplcihyYW5nZS5oZWFkKTtcbiAgICAgICAgICAgICAgICBpZiAoIShpbnNpZGVXb3JkQm91bmRhcmllcyhjaGVjaywgc3RhdGUsIHJhbmdlLmZyb20sIHJhbmdlLnRvKSAmJlxuICAgICAgICAgICAgICAgICAgICBpbnNpZGVXb3JkKGNoZWNrLCBzdGF0ZSwgcmFuZ2UuZnJvbSwgcmFuZ2UudG8pKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZpZXcuRGVjb3JhdGlvbi5ub25lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcXVlcnkgPSBzdGF0ZS5zbGljZURvYyhyYW5nZS5mcm9tLCByYW5nZS50byk7XG4gICAgICAgICAgICAgICAgaWYgKCFxdWVyeSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZpZXcuRGVjb3JhdGlvbi5ub25lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBkZWNvID0gW107XG4gICAgICAgIGZvciAobGV0IHBhcnQgb2YgdmlldyQxLnZpc2libGVSYW5nZXMpIHtcbiAgICAgICAgICAgIGxldCBjdXJzb3IgPSBuZXcgU2VhcmNoQ3Vyc29yKHN0YXRlLmRvYywgcXVlcnksIHBhcnQuZnJvbSwgcGFydC50byk7XG4gICAgICAgICAgICB3aGlsZSAoIWN1cnNvci5uZXh0KCkuZG9uZSkge1xuICAgICAgICAgICAgICAgIGxldCB7IGZyb20sIHRvIH0gPSBjdXJzb3IudmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKCFjaGVjayB8fCBpbnNpZGVXb3JkQm91bmRhcmllcyhjaGVjaywgc3RhdGUsIGZyb20sIHRvKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2UuZW1wdHkgJiYgZnJvbSA8PSByYW5nZS5mcm9tICYmIHRvID49IHJhbmdlLnRvKVxuICAgICAgICAgICAgICAgICAgICAgICAgZGVjby5wdXNoKG1haW5NYXRjaERlY28ucmFuZ2UoZnJvbSwgdG8pKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZnJvbSA+PSByYW5nZS50byB8fCB0byA8PSByYW5nZS5mcm9tKVxuICAgICAgICAgICAgICAgICAgICAgICAgZGVjby5wdXNoKG1hdGNoRGVjby5yYW5nZShmcm9tLCB0bykpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVjby5sZW5ndGggPiBjb25mLm1heE1hdGNoZXMpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmlldy5EZWNvcmF0aW9uLm5vbmU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2aWV3LkRlY29yYXRpb24uc2V0KGRlY28pO1xuICAgIH1cbn0sIHtcbiAgICBkZWNvcmF0aW9uczogdiA9PiB2LmRlY29yYXRpb25zXG59KTtcbmNvbnN0IGRlZmF1bHRUaGVtZSA9IHZpZXcuRWRpdG9yVmlldy5iYXNlVGhlbWUoe1xuICAgIFwiLmNtLXNlbGVjdGlvbk1hdGNoXCI6IHsgYmFja2dyb3VuZENvbG9yOiBcIiM5OWZmNzc4MFwiIH0sXG4gICAgXCIuY20tc2VhcmNoTWF0Y2ggLmNtLXNlbGVjdGlvbk1hdGNoXCI6IHsgYmFja2dyb3VuZENvbG9yOiBcInRyYW5zcGFyZW50XCIgfVxufSk7XG4vLyBTZWxlY3QgdGhlIHdvcmRzIGFyb3VuZCB0aGUgY3Vyc29ycy5cbmNvbnN0IHNlbGVjdFdvcmQgPSAoeyBzdGF0ZTogc3RhdGUkMSwgZGlzcGF0Y2ggfSkgPT4ge1xuICAgIGxldCB7IHNlbGVjdGlvbiB9ID0gc3RhdGUkMTtcbiAgICBsZXQgbmV3U2VsID0gc3RhdGUuRWRpdG9yU2VsZWN0aW9uLmNyZWF0ZShzZWxlY3Rpb24ucmFuZ2VzLm1hcChyYW5nZSA9PiBzdGF0ZSQxLndvcmRBdChyYW5nZS5oZWFkKSB8fCBzdGF0ZS5FZGl0b3JTZWxlY3Rpb24uY3Vyc29yKHJhbmdlLmhlYWQpKSwgc2VsZWN0aW9uLm1haW5JbmRleCk7XG4gICAgaWYgKG5ld1NlbC5lcShzZWxlY3Rpb24pKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgZGlzcGF0Y2goc3RhdGUkMS51cGRhdGUoeyBzZWxlY3Rpb246IG5ld1NlbCB9KSk7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuLy8gRmluZCBuZXh0IG9jY3VycmVuY2Ugb2YgcXVlcnkgcmVsYXRpdmUgdG8gbGFzdCBjdXJzb3IuIFdyYXAgYXJvdW5kXG4vLyB0aGUgZG9jdW1lbnQgaWYgdGhlcmUgYXJlIG5vIG1vcmUgbWF0Y2hlcy5cbmZ1bmN0aW9uIGZpbmROZXh0T2NjdXJyZW5jZShzdGF0ZSwgcXVlcnkpIHtcbiAgICBsZXQgeyBtYWluLCByYW5nZXMgfSA9IHN0YXRlLnNlbGVjdGlvbjtcbiAgICBsZXQgd29yZCA9IHN0YXRlLndvcmRBdChtYWluLmhlYWQpLCBmdWxsV29yZCA9IHdvcmQgJiYgd29yZC5mcm9tID09IG1haW4uZnJvbSAmJiB3b3JkLnRvID09IG1haW4udG87XG4gICAgZm9yIChsZXQgY3ljbGVkID0gZmFsc2UsIGN1cnNvciA9IG5ldyBTZWFyY2hDdXJzb3Ioc3RhdGUuZG9jLCBxdWVyeSwgcmFuZ2VzW3Jhbmdlcy5sZW5ndGggLSAxXS50byk7Oykge1xuICAgICAgICBjdXJzb3IubmV4dCgpO1xuICAgICAgICBpZiAoY3Vyc29yLmRvbmUpIHtcbiAgICAgICAgICAgIGlmIChjeWNsZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBjdXJzb3IgPSBuZXcgU2VhcmNoQ3Vyc29yKHN0YXRlLmRvYywgcXVlcnksIDAsIE1hdGgubWF4KDAsIHJhbmdlc1tyYW5nZXMubGVuZ3RoIC0gMV0uZnJvbSAtIDEpKTtcbiAgICAgICAgICAgIGN5Y2xlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoY3ljbGVkICYmIHJhbmdlcy5zb21lKHIgPT4gci5mcm9tID09IGN1cnNvci52YWx1ZS5mcm9tKSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGlmIChmdWxsV29yZCkge1xuICAgICAgICAgICAgICAgIGxldCB3b3JkID0gc3RhdGUud29yZEF0KGN1cnNvci52YWx1ZS5mcm9tKTtcbiAgICAgICAgICAgICAgICBpZiAoIXdvcmQgfHwgd29yZC5mcm9tICE9IGN1cnNvci52YWx1ZS5mcm9tIHx8IHdvcmQudG8gIT0gY3Vyc29yLnZhbHVlLnRvKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjdXJzb3IudmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcblNlbGVjdCBuZXh0IG9jY3VycmVuY2Ugb2YgdGhlIGN1cnJlbnQgc2VsZWN0aW9uLiBFeHBhbmQgc2VsZWN0aW9uXG50byB0aGUgc3Vycm91bmRpbmcgd29yZCB3aGVuIHRoZSBzZWxlY3Rpb24gaXMgZW1wdHkuXG4qL1xuY29uc3Qgc2VsZWN0TmV4dE9jY3VycmVuY2UgPSAoeyBzdGF0ZTogc3RhdGUkMSwgZGlzcGF0Y2ggfSkgPT4ge1xuICAgIGxldCB7IHJhbmdlcyB9ID0gc3RhdGUkMS5zZWxlY3Rpb247XG4gICAgaWYgKHJhbmdlcy5zb21lKHNlbCA9PiBzZWwuZnJvbSA9PT0gc2VsLnRvKSlcbiAgICAgICAgcmV0dXJuIHNlbGVjdFdvcmQoeyBzdGF0ZTogc3RhdGUkMSwgZGlzcGF0Y2ggfSk7XG4gICAgbGV0IHNlYXJjaGVkVGV4dCA9IHN0YXRlJDEuc2xpY2VEb2MocmFuZ2VzWzBdLmZyb20sIHJhbmdlc1swXS50byk7XG4gICAgaWYgKHN0YXRlJDEuc2VsZWN0aW9uLnJhbmdlcy5zb21lKHIgPT4gc3RhdGUkMS5zbGljZURvYyhyLmZyb20sIHIudG8pICE9IHNlYXJjaGVkVGV4dCkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBsZXQgcmFuZ2UgPSBmaW5kTmV4dE9jY3VycmVuY2Uoc3RhdGUkMSwgc2VhcmNoZWRUZXh0KTtcbiAgICBpZiAoIXJhbmdlKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgZGlzcGF0Y2goc3RhdGUkMS51cGRhdGUoe1xuICAgICAgICBzZWxlY3Rpb246IHN0YXRlJDEuc2VsZWN0aW9uLmFkZFJhbmdlKHN0YXRlLkVkaXRvclNlbGVjdGlvbi5yYW5nZShyYW5nZS5mcm9tLCByYW5nZS50byksIGZhbHNlKSxcbiAgICAgICAgZWZmZWN0czogdmlldy5FZGl0b3JWaWV3LnNjcm9sbEludG9WaWV3KHJhbmdlLnRvKVxuICAgIH0pKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5cbmNvbnN0IHNlYXJjaENvbmZpZ0ZhY2V0ID0gc3RhdGUuRmFjZXQuZGVmaW5lKHtcbiAgICBjb21iaW5lKGNvbmZpZ3MpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlLmNvbWJpbmVDb25maWcoY29uZmlncywge1xuICAgICAgICAgICAgdG9wOiBmYWxzZSxcbiAgICAgICAgICAgIGNhc2VTZW5zaXRpdmU6IGZhbHNlLFxuICAgICAgICAgICAgbGl0ZXJhbDogZmFsc2UsXG4gICAgICAgICAgICByZWdleHA6IGZhbHNlLFxuICAgICAgICAgICAgd2hvbGVXb3JkOiBmYWxzZSxcbiAgICAgICAgICAgIGNyZWF0ZVBhbmVsOiB2aWV3ID0+IG5ldyBTZWFyY2hQYW5lbCh2aWV3KSxcbiAgICAgICAgICAgIHNjcm9sbFRvTWF0Y2g6IHJhbmdlID0+IHZpZXcuRWRpdG9yVmlldy5zY3JvbGxJbnRvVmlldyhyYW5nZSlcbiAgICAgICAgfSk7XG4gICAgfVxufSk7XG4vKipcbkFkZCBzZWFyY2ggc3RhdGUgdG8gdGhlIGVkaXRvciBjb25maWd1cmF0aW9uLCBhbmQgb3B0aW9uYWxseVxuY29uZmlndXJlIHRoZSBzZWFyY2ggZXh0ZW5zaW9uLlxuKFtgb3BlblNlYXJjaFBhbmVsYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzZWFyY2gub3BlblNlYXJjaFBhbmVsKSB3aWxsIGF1dG9tYXRpY2FsbHlcbmVuYWJsZSB0aGlzIGlmIGl0IGlzbid0IGFscmVhZHkgb24pLlxuKi9cbmZ1bmN0aW9uIHNlYXJjaChjb25maWcpIHtcbiAgICByZXR1cm4gY29uZmlnID8gW3NlYXJjaENvbmZpZ0ZhY2V0Lm9mKGNvbmZpZyksIHNlYXJjaEV4dGVuc2lvbnNdIDogc2VhcmNoRXh0ZW5zaW9ucztcbn1cbi8qKlxuQSBzZWFyY2ggcXVlcnkuIFBhcnQgb2YgdGhlIGVkaXRvcidzIHNlYXJjaCBzdGF0ZS5cbiovXG5jbGFzcyBTZWFyY2hRdWVyeSB7XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgcXVlcnkgb2JqZWN0LlxuICAgICovXG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgICAgIHRoaXMuc2VhcmNoID0gY29uZmlnLnNlYXJjaDtcbiAgICAgICAgdGhpcy5jYXNlU2Vuc2l0aXZlID0gISFjb25maWcuY2FzZVNlbnNpdGl2ZTtcbiAgICAgICAgdGhpcy5saXRlcmFsID0gISFjb25maWcubGl0ZXJhbDtcbiAgICAgICAgdGhpcy5yZWdleHAgPSAhIWNvbmZpZy5yZWdleHA7XG4gICAgICAgIHRoaXMucmVwbGFjZSA9IGNvbmZpZy5yZXBsYWNlIHx8IFwiXCI7XG4gICAgICAgIHRoaXMudmFsaWQgPSAhIXRoaXMuc2VhcmNoICYmICghdGhpcy5yZWdleHAgfHwgdmFsaWRSZWdFeHAodGhpcy5zZWFyY2gpKTtcbiAgICAgICAgdGhpcy51bnF1b3RlZCA9IHRoaXMudW5xdW90ZSh0aGlzLnNlYXJjaCk7XG4gICAgICAgIHRoaXMud2hvbGVXb3JkID0gISFjb25maWcud2hvbGVXb3JkO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHVucXVvdGUodGV4dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5saXRlcmFsID8gdGV4dCA6XG4gICAgICAgICAgICB0ZXh0LnJlcGxhY2UoL1xcXFwoW25ydFxcXFxdKS9nLCAoXywgY2gpID0+IGNoID09IFwiblwiID8gXCJcXG5cIiA6IGNoID09IFwiclwiID8gXCJcXHJcIiA6IGNoID09IFwidFwiID8gXCJcXHRcIiA6IFwiXFxcXFwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ29tcGFyZSB0aGlzIHF1ZXJ5IHRvIGFub3RoZXIgcXVlcnkuXG4gICAgKi9cbiAgICBlcShvdGhlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWFyY2ggPT0gb3RoZXIuc2VhcmNoICYmIHRoaXMucmVwbGFjZSA9PSBvdGhlci5yZXBsYWNlICYmXG4gICAgICAgICAgICB0aGlzLmNhc2VTZW5zaXRpdmUgPT0gb3RoZXIuY2FzZVNlbnNpdGl2ZSAmJiB0aGlzLnJlZ2V4cCA9PSBvdGhlci5yZWdleHAgJiZcbiAgICAgICAgICAgIHRoaXMud2hvbGVXb3JkID09IG90aGVyLndob2xlV29yZDtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBjcmVhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZ2V4cCA/IG5ldyBSZWdFeHBRdWVyeSh0aGlzKSA6IG5ldyBTdHJpbmdRdWVyeSh0aGlzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgR2V0IGEgc2VhcmNoIGN1cnNvciBmb3IgdGhpcyBxdWVyeSwgc2VhcmNoaW5nIHRocm91Z2ggdGhlIGdpdmVuXG4gICAgcmFuZ2UgaW4gdGhlIGdpdmVuIHN0YXRlLlxuICAgICovXG4gICAgZ2V0Q3Vyc29yKHN0YXRlJDEsIGZyb20gPSAwLCB0bykge1xuICAgICAgICBsZXQgc3QgPSBzdGF0ZSQxLmRvYyA/IHN0YXRlJDEgOiBzdGF0ZS5FZGl0b3JTdGF0ZS5jcmVhdGUoeyBkb2M6IHN0YXRlJDEgfSk7XG4gICAgICAgIGlmICh0byA9PSBudWxsKVxuICAgICAgICAgICAgdG8gPSBzdC5kb2MubGVuZ3RoO1xuICAgICAgICByZXR1cm4gdGhpcy5yZWdleHAgPyByZWdleHBDdXJzb3IodGhpcywgc3QsIGZyb20sIHRvKSA6IHN0cmluZ0N1cnNvcih0aGlzLCBzdCwgZnJvbSwgdG8pO1xuICAgIH1cbn1cbmNsYXNzIFF1ZXJ5VHlwZSB7XG4gICAgY29uc3RydWN0b3Ioc3BlYykge1xuICAgICAgICB0aGlzLnNwZWMgPSBzcGVjO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHN0cmluZ0N1cnNvcihzcGVjLCBzdGF0ZSwgZnJvbSwgdG8pIHtcbiAgICByZXR1cm4gbmV3IFNlYXJjaEN1cnNvcihzdGF0ZS5kb2MsIHNwZWMudW5xdW90ZWQsIGZyb20sIHRvLCBzcGVjLmNhc2VTZW5zaXRpdmUgPyB1bmRlZmluZWQgOiB4ID0+IHgudG9Mb3dlckNhc2UoKSwgc3BlYy53aG9sZVdvcmQgPyBzdHJpbmdXb3JkVGVzdChzdGF0ZS5kb2MsIHN0YXRlLmNoYXJDYXRlZ29yaXplcihzdGF0ZS5zZWxlY3Rpb24ubWFpbi5oZWFkKSkgOiB1bmRlZmluZWQpO1xufVxuZnVuY3Rpb24gc3RyaW5nV29yZFRlc3QoZG9jLCBjYXRlZ29yaXplcikge1xuICAgIHJldHVybiAoZnJvbSwgdG8sIGJ1ZiwgYnVmUG9zKSA9PiB7XG4gICAgICAgIGlmIChidWZQb3MgPiBmcm9tIHx8IGJ1ZlBvcyArIGJ1Zi5sZW5ndGggPCB0bykge1xuICAgICAgICAgICAgYnVmUG9zID0gTWF0aC5tYXgoMCwgZnJvbSAtIDIpO1xuICAgICAgICAgICAgYnVmID0gZG9jLnNsaWNlU3RyaW5nKGJ1ZlBvcywgTWF0aC5taW4oZG9jLmxlbmd0aCwgdG8gKyAyKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChjYXRlZ29yaXplcihjaGFyQmVmb3JlKGJ1ZiwgZnJvbSAtIGJ1ZlBvcykpICE9IHN0YXRlLkNoYXJDYXRlZ29yeS5Xb3JkIHx8XG4gICAgICAgICAgICBjYXRlZ29yaXplcihjaGFyQWZ0ZXIoYnVmLCBmcm9tIC0gYnVmUG9zKSkgIT0gc3RhdGUuQ2hhckNhdGVnb3J5LldvcmQpICYmXG4gICAgICAgICAgICAoY2F0ZWdvcml6ZXIoY2hhckFmdGVyKGJ1ZiwgdG8gLSBidWZQb3MpKSAhPSBzdGF0ZS5DaGFyQ2F0ZWdvcnkuV29yZCB8fFxuICAgICAgICAgICAgICAgIGNhdGVnb3JpemVyKGNoYXJCZWZvcmUoYnVmLCB0byAtIGJ1ZlBvcykpICE9IHN0YXRlLkNoYXJDYXRlZ29yeS5Xb3JkKTtcbiAgICB9O1xufVxuY2xhc3MgU3RyaW5nUXVlcnkgZXh0ZW5kcyBRdWVyeVR5cGUge1xuICAgIGNvbnN0cnVjdG9yKHNwZWMpIHtcbiAgICAgICAgc3VwZXIoc3BlYyk7XG4gICAgfVxuICAgIG5leHRNYXRjaChzdGF0ZSwgY3VyRnJvbSwgY3VyVG8pIHtcbiAgICAgICAgbGV0IGN1cnNvciA9IHN0cmluZ0N1cnNvcih0aGlzLnNwZWMsIHN0YXRlLCBjdXJUbywgc3RhdGUuZG9jLmxlbmd0aCkubmV4dE92ZXJsYXBwaW5nKCk7XG4gICAgICAgIGlmIChjdXJzb3IuZG9uZSlcbiAgICAgICAgICAgIGN1cnNvciA9IHN0cmluZ0N1cnNvcih0aGlzLnNwZWMsIHN0YXRlLCAwLCBjdXJGcm9tKS5uZXh0T3ZlcmxhcHBpbmcoKTtcbiAgICAgICAgcmV0dXJuIGN1cnNvci5kb25lID8gbnVsbCA6IGN1cnNvci52YWx1ZTtcbiAgICB9XG4gICAgLy8gU2VhcmNoaW5nIGluIHJldmVyc2UgaXMsIHJhdGhlciB0aGFuIGltcGxlbWVudGluZyBhbiBpbnZlcnRlZCBzZWFyY2hcbiAgICAvLyBjdXJzb3IsIGRvbmUgYnkgc2Nhbm5pbmcgY2h1bmsgYWZ0ZXIgY2h1bmsgZm9yd2FyZC5cbiAgICBwcmV2TWF0Y2hJblJhbmdlKHN0YXRlLCBmcm9tLCB0bykge1xuICAgICAgICBmb3IgKGxldCBwb3MgPSB0bzs7KSB7XG4gICAgICAgICAgICBsZXQgc3RhcnQgPSBNYXRoLm1heChmcm9tLCBwb3MgLSAxMDAwMCAvKiBGaW5kUHJldi5DaHVua1NpemUgKi8gLSB0aGlzLnNwZWMudW5xdW90ZWQubGVuZ3RoKTtcbiAgICAgICAgICAgIGxldCBjdXJzb3IgPSBzdHJpbmdDdXJzb3IodGhpcy5zcGVjLCBzdGF0ZSwgc3RhcnQsIHBvcyksIHJhbmdlID0gbnVsbDtcbiAgICAgICAgICAgIHdoaWxlICghY3Vyc29yLm5leHRPdmVybGFwcGluZygpLmRvbmUpXG4gICAgICAgICAgICAgICAgcmFuZ2UgPSBjdXJzb3IudmFsdWU7XG4gICAgICAgICAgICBpZiAocmFuZ2UpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJhbmdlO1xuICAgICAgICAgICAgaWYgKHN0YXJ0ID09IGZyb20pXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBwb3MgLT0gMTAwMDAgLyogRmluZFByZXYuQ2h1bmtTaXplICovO1xuICAgICAgICB9XG4gICAgfVxuICAgIHByZXZNYXRjaChzdGF0ZSwgY3VyRnJvbSwgY3VyVG8pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJldk1hdGNoSW5SYW5nZShzdGF0ZSwgMCwgY3VyRnJvbSkgfHxcbiAgICAgICAgICAgIHRoaXMucHJldk1hdGNoSW5SYW5nZShzdGF0ZSwgY3VyVG8sIHN0YXRlLmRvYy5sZW5ndGgpO1xuICAgIH1cbiAgICBnZXRSZXBsYWNlbWVudChfcmVzdWx0KSB7IHJldHVybiB0aGlzLnNwZWMudW5xdW90ZSh0aGlzLnNwZWMucmVwbGFjZSk7IH1cbiAgICBtYXRjaEFsbChzdGF0ZSwgbGltaXQpIHtcbiAgICAgICAgbGV0IGN1cnNvciA9IHN0cmluZ0N1cnNvcih0aGlzLnNwZWMsIHN0YXRlLCAwLCBzdGF0ZS5kb2MubGVuZ3RoKSwgcmFuZ2VzID0gW107XG4gICAgICAgIHdoaWxlICghY3Vyc29yLm5leHQoKS5kb25lKSB7XG4gICAgICAgICAgICBpZiAocmFuZ2VzLmxlbmd0aCA+PSBsaW1pdClcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIHJhbmdlcy5wdXNoKGN1cnNvci52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJhbmdlcztcbiAgICB9XG4gICAgaGlnaGxpZ2h0KHN0YXRlLCBmcm9tLCB0bywgYWRkKSB7XG4gICAgICAgIGxldCBjdXJzb3IgPSBzdHJpbmdDdXJzb3IodGhpcy5zcGVjLCBzdGF0ZSwgTWF0aC5tYXgoMCwgZnJvbSAtIHRoaXMuc3BlYy51bnF1b3RlZC5sZW5ndGgpLCBNYXRoLm1pbih0byArIHRoaXMuc3BlYy51bnF1b3RlZC5sZW5ndGgsIHN0YXRlLmRvYy5sZW5ndGgpKTtcbiAgICAgICAgd2hpbGUgKCFjdXJzb3IubmV4dCgpLmRvbmUpXG4gICAgICAgICAgICBhZGQoY3Vyc29yLnZhbHVlLmZyb20sIGN1cnNvci52YWx1ZS50byk7XG4gICAgfVxufVxuZnVuY3Rpb24gcmVnZXhwQ3Vyc29yKHNwZWMsIHN0YXRlLCBmcm9tLCB0bykge1xuICAgIHJldHVybiBuZXcgUmVnRXhwQ3Vyc29yKHN0YXRlLmRvYywgc3BlYy5zZWFyY2gsIHtcbiAgICAgICAgaWdub3JlQ2FzZTogIXNwZWMuY2FzZVNlbnNpdGl2ZSxcbiAgICAgICAgdGVzdDogc3BlYy53aG9sZVdvcmQgPyByZWdleHBXb3JkVGVzdChzdGF0ZS5jaGFyQ2F0ZWdvcml6ZXIoc3RhdGUuc2VsZWN0aW9uLm1haW4uaGVhZCkpIDogdW5kZWZpbmVkXG4gICAgfSwgZnJvbSwgdG8pO1xufVxuZnVuY3Rpb24gY2hhckJlZm9yZShzdHIsIGluZGV4KSB7XG4gICAgcmV0dXJuIHN0ci5zbGljZShzdGF0ZS5maW5kQ2x1c3RlckJyZWFrKHN0ciwgaW5kZXgsIGZhbHNlKSwgaW5kZXgpO1xufVxuZnVuY3Rpb24gY2hhckFmdGVyKHN0ciwgaW5kZXgpIHtcbiAgICByZXR1cm4gc3RyLnNsaWNlKGluZGV4LCBzdGF0ZS5maW5kQ2x1c3RlckJyZWFrKHN0ciwgaW5kZXgpKTtcbn1cbmZ1bmN0aW9uIHJlZ2V4cFdvcmRUZXN0KGNhdGVnb3JpemVyKSB7XG4gICAgcmV0dXJuIChfZnJvbSwgX3RvLCBtYXRjaCkgPT4gIW1hdGNoWzBdLmxlbmd0aCB8fFxuICAgICAgICAoY2F0ZWdvcml6ZXIoY2hhckJlZm9yZShtYXRjaC5pbnB1dCwgbWF0Y2guaW5kZXgpKSAhPSBzdGF0ZS5DaGFyQ2F0ZWdvcnkuV29yZCB8fFxuICAgICAgICAgICAgY2F0ZWdvcml6ZXIoY2hhckFmdGVyKG1hdGNoLmlucHV0LCBtYXRjaC5pbmRleCkpICE9IHN0YXRlLkNoYXJDYXRlZ29yeS5Xb3JkKSAmJlxuICAgICAgICAgICAgKGNhdGVnb3JpemVyKGNoYXJBZnRlcihtYXRjaC5pbnB1dCwgbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGgpKSAhPSBzdGF0ZS5DaGFyQ2F0ZWdvcnkuV29yZCB8fFxuICAgICAgICAgICAgICAgIGNhdGVnb3JpemVyKGNoYXJCZWZvcmUobWF0Y2guaW5wdXQsIG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoKSkgIT0gc3RhdGUuQ2hhckNhdGVnb3J5LldvcmQpO1xufVxuY2xhc3MgUmVnRXhwUXVlcnkgZXh0ZW5kcyBRdWVyeVR5cGUge1xuICAgIG5leHRNYXRjaChzdGF0ZSwgY3VyRnJvbSwgY3VyVG8pIHtcbiAgICAgICAgbGV0IGN1cnNvciA9IHJlZ2V4cEN1cnNvcih0aGlzLnNwZWMsIHN0YXRlLCBjdXJUbywgc3RhdGUuZG9jLmxlbmd0aCkubmV4dCgpO1xuICAgICAgICBpZiAoY3Vyc29yLmRvbmUpXG4gICAgICAgICAgICBjdXJzb3IgPSByZWdleHBDdXJzb3IodGhpcy5zcGVjLCBzdGF0ZSwgMCwgY3VyRnJvbSkubmV4dCgpO1xuICAgICAgICByZXR1cm4gY3Vyc29yLmRvbmUgPyBudWxsIDogY3Vyc29yLnZhbHVlO1xuICAgIH1cbiAgICBwcmV2TWF0Y2hJblJhbmdlKHN0YXRlLCBmcm9tLCB0bykge1xuICAgICAgICBmb3IgKGxldCBzaXplID0gMTs7IHNpemUrKykge1xuICAgICAgICAgICAgbGV0IHN0YXJ0ID0gTWF0aC5tYXgoZnJvbSwgdG8gLSBzaXplICogMTAwMDAgLyogRmluZFByZXYuQ2h1bmtTaXplICovKTtcbiAgICAgICAgICAgIGxldCBjdXJzb3IgPSByZWdleHBDdXJzb3IodGhpcy5zcGVjLCBzdGF0ZSwgc3RhcnQsIHRvKSwgcmFuZ2UgPSBudWxsO1xuICAgICAgICAgICAgd2hpbGUgKCFjdXJzb3IubmV4dCgpLmRvbmUpXG4gICAgICAgICAgICAgICAgcmFuZ2UgPSBjdXJzb3IudmFsdWU7XG4gICAgICAgICAgICBpZiAocmFuZ2UgJiYgKHN0YXJ0ID09IGZyb20gfHwgcmFuZ2UuZnJvbSA+IHN0YXJ0ICsgMTApKVxuICAgICAgICAgICAgICAgIHJldHVybiByYW5nZTtcbiAgICAgICAgICAgIGlmIChzdGFydCA9PSBmcm9tKVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHByZXZNYXRjaChzdGF0ZSwgY3VyRnJvbSwgY3VyVG8pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJldk1hdGNoSW5SYW5nZShzdGF0ZSwgMCwgY3VyRnJvbSkgfHxcbiAgICAgICAgICAgIHRoaXMucHJldk1hdGNoSW5SYW5nZShzdGF0ZSwgY3VyVG8sIHN0YXRlLmRvYy5sZW5ndGgpO1xuICAgIH1cbiAgICBnZXRSZXBsYWNlbWVudChyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3BlYy51bnF1b3RlKHRoaXMuc3BlYy5yZXBsYWNlKS5yZXBsYWNlKC9cXCQoWyQmXFxkK10pL2csIChtLCBpKSA9PiBpID09IFwiJFwiID8gXCIkXCJcbiAgICAgICAgICAgIDogaSA9PSBcIiZcIiA/IHJlc3VsdC5tYXRjaFswXVxuICAgICAgICAgICAgICAgIDogaSAhPSBcIjBcIiAmJiAraSA8IHJlc3VsdC5tYXRjaC5sZW5ndGggPyByZXN1bHQubWF0Y2hbaV1cbiAgICAgICAgICAgICAgICAgICAgOiBtKTtcbiAgICB9XG4gICAgbWF0Y2hBbGwoc3RhdGUsIGxpbWl0KSB7XG4gICAgICAgIGxldCBjdXJzb3IgPSByZWdleHBDdXJzb3IodGhpcy5zcGVjLCBzdGF0ZSwgMCwgc3RhdGUuZG9jLmxlbmd0aCksIHJhbmdlcyA9IFtdO1xuICAgICAgICB3aGlsZSAoIWN1cnNvci5uZXh0KCkuZG9uZSkge1xuICAgICAgICAgICAgaWYgKHJhbmdlcy5sZW5ndGggPj0gbGltaXQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICByYW5nZXMucHVzaChjdXJzb3IudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByYW5nZXM7XG4gICAgfVxuICAgIGhpZ2hsaWdodChzdGF0ZSwgZnJvbSwgdG8sIGFkZCkge1xuICAgICAgICBsZXQgY3Vyc29yID0gcmVnZXhwQ3Vyc29yKHRoaXMuc3BlYywgc3RhdGUsIE1hdGgubWF4KDAsIGZyb20gLSAyNTAgLyogUmVnRXhwLkhpZ2hsaWdodE1hcmdpbiAqLyksIE1hdGgubWluKHRvICsgMjUwIC8qIFJlZ0V4cC5IaWdobGlnaHRNYXJnaW4gKi8sIHN0YXRlLmRvYy5sZW5ndGgpKTtcbiAgICAgICAgd2hpbGUgKCFjdXJzb3IubmV4dCgpLmRvbmUpXG4gICAgICAgICAgICBhZGQoY3Vyc29yLnZhbHVlLmZyb20sIGN1cnNvci52YWx1ZS50byk7XG4gICAgfVxufVxuLyoqXG5BIHN0YXRlIGVmZmVjdCB0aGF0IHVwZGF0ZXMgdGhlIGN1cnJlbnQgc2VhcmNoIHF1ZXJ5LiBOb3RlIHRoYXRcbnRoaXMgb25seSBoYXMgYW4gZWZmZWN0IGlmIHRoZSBzZWFyY2ggc3RhdGUgaGFzIGJlZW4gaW5pdGlhbGl6ZWRcbihieSBpbmNsdWRpbmcgW2BzZWFyY2hgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3NlYXJjaC5zZWFyY2gpIGluIHlvdXIgY29uZmlndXJhdGlvbiBvclxuYnkgcnVubmluZyBbYG9wZW5TZWFyY2hQYW5lbGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc2VhcmNoLm9wZW5TZWFyY2hQYW5lbCkgYXQgbGVhc3Rcbm9uY2UpLlxuKi9cbmNvbnN0IHNldFNlYXJjaFF1ZXJ5ID0gc3RhdGUuU3RhdGVFZmZlY3QuZGVmaW5lKCk7XG5jb25zdCB0b2dnbGVQYW5lbCA9IHN0YXRlLlN0YXRlRWZmZWN0LmRlZmluZSgpO1xuY29uc3Qgc2VhcmNoU3RhdGUgPSBzdGF0ZS5TdGF0ZUZpZWxkLmRlZmluZSh7XG4gICAgY3JlYXRlKHN0YXRlKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2VhcmNoU3RhdGUoZGVmYXVsdFF1ZXJ5KHN0YXRlKS5jcmVhdGUoKSwgbnVsbCk7XG4gICAgfSxcbiAgICB1cGRhdGUodmFsdWUsIHRyKSB7XG4gICAgICAgIGZvciAobGV0IGVmZmVjdCBvZiB0ci5lZmZlY3RzKSB7XG4gICAgICAgICAgICBpZiAoZWZmZWN0LmlzKHNldFNlYXJjaFF1ZXJ5KSlcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG5ldyBTZWFyY2hTdGF0ZShlZmZlY3QudmFsdWUuY3JlYXRlKCksIHZhbHVlLnBhbmVsKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGVmZmVjdC5pcyh0b2dnbGVQYW5lbCkpXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBuZXcgU2VhcmNoU3RhdGUodmFsdWUucXVlcnksIGVmZmVjdC52YWx1ZSA/IGNyZWF0ZVNlYXJjaFBhbmVsIDogbnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgcHJvdmlkZTogZiA9PiB2aWV3LnNob3dQYW5lbC5mcm9tKGYsIHZhbCA9PiB2YWwucGFuZWwpXG59KTtcbi8qKlxuR2V0IHRoZSBjdXJyZW50IHNlYXJjaCBxdWVyeSBmcm9tIGFuIGVkaXRvciBzdGF0ZS5cbiovXG5mdW5jdGlvbiBnZXRTZWFyY2hRdWVyeShzdGF0ZSkge1xuICAgIGxldCBjdXJTdGF0ZSA9IHN0YXRlLmZpZWxkKHNlYXJjaFN0YXRlLCBmYWxzZSk7XG4gICAgcmV0dXJuIGN1clN0YXRlID8gY3VyU3RhdGUucXVlcnkuc3BlYyA6IGRlZmF1bHRRdWVyeShzdGF0ZSk7XG59XG4vKipcblF1ZXJ5IHdoZXRoZXIgdGhlIHNlYXJjaCBwYW5lbCBpcyBvcGVuIGluIHRoZSBnaXZlbiBlZGl0b3Igc3RhdGUuXG4qL1xuZnVuY3Rpb24gc2VhcmNoUGFuZWxPcGVuKHN0YXRlKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoKF9hID0gc3RhdGUuZmllbGQoc2VhcmNoU3RhdGUsIGZhbHNlKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnBhbmVsKSAhPSBudWxsO1xufVxuY2xhc3MgU2VhcmNoU3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKHF1ZXJ5LCBwYW5lbCkge1xuICAgICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnk7XG4gICAgICAgIHRoaXMucGFuZWwgPSBwYW5lbDtcbiAgICB9XG59XG5jb25zdCBtYXRjaE1hcmsgPSB2aWV3LkRlY29yYXRpb24ubWFyayh7IGNsYXNzOiBcImNtLXNlYXJjaE1hdGNoXCIgfSksIHNlbGVjdGVkTWF0Y2hNYXJrID0gdmlldy5EZWNvcmF0aW9uLm1hcmsoeyBjbGFzczogXCJjbS1zZWFyY2hNYXRjaCBjbS1zZWFyY2hNYXRjaC1zZWxlY3RlZFwiIH0pO1xuY29uc3Qgc2VhcmNoSGlnaGxpZ2h0ZXIgPSB2aWV3LlZpZXdQbHVnaW4uZnJvbUNsYXNzKGNsYXNzIHtcbiAgICBjb25zdHJ1Y3Rvcih2aWV3KSB7XG4gICAgICAgIHRoaXMudmlldyA9IHZpZXc7XG4gICAgICAgIHRoaXMuZGVjb3JhdGlvbnMgPSB0aGlzLmhpZ2hsaWdodCh2aWV3LnN0YXRlLmZpZWxkKHNlYXJjaFN0YXRlKSk7XG4gICAgfVxuICAgIHVwZGF0ZSh1cGRhdGUpIHtcbiAgICAgICAgbGV0IHN0YXRlID0gdXBkYXRlLnN0YXRlLmZpZWxkKHNlYXJjaFN0YXRlKTtcbiAgICAgICAgaWYgKHN0YXRlICE9IHVwZGF0ZS5zdGFydFN0YXRlLmZpZWxkKHNlYXJjaFN0YXRlKSB8fCB1cGRhdGUuZG9jQ2hhbmdlZCB8fCB1cGRhdGUuc2VsZWN0aW9uU2V0IHx8IHVwZGF0ZS52aWV3cG9ydENoYW5nZWQpXG4gICAgICAgICAgICB0aGlzLmRlY29yYXRpb25zID0gdGhpcy5oaWdobGlnaHQoc3RhdGUpO1xuICAgIH1cbiAgICBoaWdobGlnaHQoeyBxdWVyeSwgcGFuZWwgfSkge1xuICAgICAgICBpZiAoIXBhbmVsIHx8ICFxdWVyeS5zcGVjLnZhbGlkKVxuICAgICAgICAgICAgcmV0dXJuIHZpZXcuRGVjb3JhdGlvbi5ub25lO1xuICAgICAgICBsZXQgeyB2aWV3OiB2aWV3JDEgfSA9IHRoaXM7XG4gICAgICAgIGxldCBidWlsZGVyID0gbmV3IHN0YXRlLlJhbmdlU2V0QnVpbGRlcigpO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgcmFuZ2VzID0gdmlldyQxLnZpc2libGVSYW5nZXMsIGwgPSByYW5nZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgeyBmcm9tLCB0byB9ID0gcmFuZ2VzW2ldO1xuICAgICAgICAgICAgd2hpbGUgKGkgPCBsIC0gMSAmJiB0byA+IHJhbmdlc1tpICsgMV0uZnJvbSAtIDIgKiAyNTAgLyogUmVnRXhwLkhpZ2hsaWdodE1hcmdpbiAqLylcbiAgICAgICAgICAgICAgICB0byA9IHJhbmdlc1srK2ldLnRvO1xuICAgICAgICAgICAgcXVlcnkuaGlnaGxpZ2h0KHZpZXckMS5zdGF0ZSwgZnJvbSwgdG8sIChmcm9tLCB0bykgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBzZWxlY3RlZCA9IHZpZXckMS5zdGF0ZS5zZWxlY3Rpb24ucmFuZ2VzLnNvbWUociA9PiByLmZyb20gPT0gZnJvbSAmJiByLnRvID09IHRvKTtcbiAgICAgICAgICAgICAgICBidWlsZGVyLmFkZChmcm9tLCB0bywgc2VsZWN0ZWQgPyBzZWxlY3RlZE1hdGNoTWFyayA6IG1hdGNoTWFyayk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYnVpbGRlci5maW5pc2goKTtcbiAgICB9XG59LCB7XG4gICAgZGVjb3JhdGlvbnM6IHYgPT4gdi5kZWNvcmF0aW9uc1xufSk7XG5mdW5jdGlvbiBzZWFyY2hDb21tYW5kKGYpIHtcbiAgICByZXR1cm4gdmlldyA9PiB7XG4gICAgICAgIGxldCBzdGF0ZSA9IHZpZXcuc3RhdGUuZmllbGQoc2VhcmNoU3RhdGUsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIHN0YXRlICYmIHN0YXRlLnF1ZXJ5LnNwZWMudmFsaWQgPyBmKHZpZXcsIHN0YXRlKSA6IG9wZW5TZWFyY2hQYW5lbCh2aWV3KTtcbiAgICB9O1xufVxuLyoqXG5PcGVuIHRoZSBzZWFyY2ggcGFuZWwgaWYgaXQgaXNuJ3QgYWxyZWFkeSBvcGVuLCBhbmQgbW92ZSB0aGVcbnNlbGVjdGlvbiB0byB0aGUgZmlyc3QgbWF0Y2ggYWZ0ZXIgdGhlIGN1cnJlbnQgbWFpbiBzZWxlY3Rpb24uXG5XaWxsIHdyYXAgYXJvdW5kIHRvIHRoZSBzdGFydCBvZiB0aGUgZG9jdW1lbnQgd2hlbiBpdCByZWFjaGVzIHRoZVxuZW5kLlxuKi9cbmNvbnN0IGZpbmROZXh0ID0gc2VhcmNoQ29tbWFuZCgodmlldywgeyBxdWVyeSB9KSA9PiB7XG4gICAgbGV0IHsgdG8gfSA9IHZpZXcuc3RhdGUuc2VsZWN0aW9uLm1haW47XG4gICAgbGV0IG5leHQgPSBxdWVyeS5uZXh0TWF0Y2godmlldy5zdGF0ZSwgdG8sIHRvKTtcbiAgICBpZiAoIW5leHQpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBsZXQgc2VsZWN0aW9uID0gc3RhdGUuRWRpdG9yU2VsZWN0aW9uLnNpbmdsZShuZXh0LmZyb20sIG5leHQudG8pO1xuICAgIGxldCBjb25maWcgPSB2aWV3LnN0YXRlLmZhY2V0KHNlYXJjaENvbmZpZ0ZhY2V0KTtcbiAgICB2aWV3LmRpc3BhdGNoKHtcbiAgICAgICAgc2VsZWN0aW9uLFxuICAgICAgICBlZmZlY3RzOiBbYW5ub3VuY2VNYXRjaCh2aWV3LCBuZXh0KSwgY29uZmlnLnNjcm9sbFRvTWF0Y2goc2VsZWN0aW9uLm1haW4sIHZpZXcpXSxcbiAgICAgICAgdXNlckV2ZW50OiBcInNlbGVjdC5zZWFyY2hcIlxuICAgIH0pO1xuICAgIHNlbGVjdFNlYXJjaElucHV0KHZpZXcpO1xuICAgIHJldHVybiB0cnVlO1xufSk7XG4vKipcbk1vdmUgdGhlIHNlbGVjdGlvbiB0byB0aGUgcHJldmlvdXMgaW5zdGFuY2Ugb2YgdGhlIHNlYXJjaCBxdWVyeSxcbmJlZm9yZSB0aGUgY3VycmVudCBtYWluIHNlbGVjdGlvbi4gV2lsbCB3cmFwIHBhc3QgdGhlIHN0YXJ0XG5vZiB0aGUgZG9jdW1lbnQgdG8gc3RhcnQgc2VhcmNoaW5nIGF0IHRoZSBlbmQgYWdhaW4uXG4qL1xuY29uc3QgZmluZFByZXZpb3VzID0gc2VhcmNoQ29tbWFuZCgodmlldywgeyBxdWVyeSB9KSA9PiB7XG4gICAgbGV0IHsgc3RhdGU6IHN0YXRlJDEgfSA9IHZpZXcsIHsgZnJvbSB9ID0gc3RhdGUkMS5zZWxlY3Rpb24ubWFpbjtcbiAgICBsZXQgcHJldiA9IHF1ZXJ5LnByZXZNYXRjaChzdGF0ZSQxLCBmcm9tLCBmcm9tKTtcbiAgICBpZiAoIXByZXYpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBsZXQgc2VsZWN0aW9uID0gc3RhdGUuRWRpdG9yU2VsZWN0aW9uLnNpbmdsZShwcmV2LmZyb20sIHByZXYudG8pO1xuICAgIGxldCBjb25maWcgPSB2aWV3LnN0YXRlLmZhY2V0KHNlYXJjaENvbmZpZ0ZhY2V0KTtcbiAgICB2aWV3LmRpc3BhdGNoKHtcbiAgICAgICAgc2VsZWN0aW9uLFxuICAgICAgICBlZmZlY3RzOiBbYW5ub3VuY2VNYXRjaCh2aWV3LCBwcmV2KSwgY29uZmlnLnNjcm9sbFRvTWF0Y2goc2VsZWN0aW9uLm1haW4sIHZpZXcpXSxcbiAgICAgICAgdXNlckV2ZW50OiBcInNlbGVjdC5zZWFyY2hcIlxuICAgIH0pO1xuICAgIHNlbGVjdFNlYXJjaElucHV0KHZpZXcpO1xuICAgIHJldHVybiB0cnVlO1xufSk7XG4vKipcblNlbGVjdCBhbGwgaW5zdGFuY2VzIG9mIHRoZSBzZWFyY2ggcXVlcnkuXG4qL1xuY29uc3Qgc2VsZWN0TWF0Y2hlcyA9IHNlYXJjaENvbW1hbmQoKHZpZXcsIHsgcXVlcnkgfSkgPT4ge1xuICAgIGxldCByYW5nZXMgPSBxdWVyeS5tYXRjaEFsbCh2aWV3LnN0YXRlLCAxMDAwKTtcbiAgICBpZiAoIXJhbmdlcyB8fCAhcmFuZ2VzLmxlbmd0aClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHZpZXcuZGlzcGF0Y2goe1xuICAgICAgICBzZWxlY3Rpb246IHN0YXRlLkVkaXRvclNlbGVjdGlvbi5jcmVhdGUocmFuZ2VzLm1hcChyID0+IHN0YXRlLkVkaXRvclNlbGVjdGlvbi5yYW5nZShyLmZyb20sIHIudG8pKSksXG4gICAgICAgIHVzZXJFdmVudDogXCJzZWxlY3Quc2VhcmNoLm1hdGNoZXNcIlxuICAgIH0pO1xuICAgIHJldHVybiB0cnVlO1xufSk7XG4vKipcblNlbGVjdCBhbGwgaW5zdGFuY2VzIG9mIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgdGV4dC5cbiovXG5jb25zdCBzZWxlY3RTZWxlY3Rpb25NYXRjaGVzID0gKHsgc3RhdGU6IHN0YXRlJDEsIGRpc3BhdGNoIH0pID0+IHtcbiAgICBsZXQgc2VsID0gc3RhdGUkMS5zZWxlY3Rpb247XG4gICAgaWYgKHNlbC5yYW5nZXMubGVuZ3RoID4gMSB8fCBzZWwubWFpbi5lbXB0eSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGxldCB7IGZyb20sIHRvIH0gPSBzZWwubWFpbjtcbiAgICBsZXQgcmFuZ2VzID0gW10sIG1haW4gPSAwO1xuICAgIGZvciAobGV0IGN1ciA9IG5ldyBTZWFyY2hDdXJzb3Ioc3RhdGUkMS5kb2MsIHN0YXRlJDEuc2xpY2VEb2MoZnJvbSwgdG8pKTsgIWN1ci5uZXh0KCkuZG9uZTspIHtcbiAgICAgICAgaWYgKHJhbmdlcy5sZW5ndGggPiAxMDAwKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoY3VyLnZhbHVlLmZyb20gPT0gZnJvbSlcbiAgICAgICAgICAgIG1haW4gPSByYW5nZXMubGVuZ3RoO1xuICAgICAgICByYW5nZXMucHVzaChzdGF0ZS5FZGl0b3JTZWxlY3Rpb24ucmFuZ2UoY3VyLnZhbHVlLmZyb20sIGN1ci52YWx1ZS50bykpO1xuICAgIH1cbiAgICBkaXNwYXRjaChzdGF0ZSQxLnVwZGF0ZSh7XG4gICAgICAgIHNlbGVjdGlvbjogc3RhdGUuRWRpdG9yU2VsZWN0aW9uLmNyZWF0ZShyYW5nZXMsIG1haW4pLFxuICAgICAgICB1c2VyRXZlbnQ6IFwic2VsZWN0LnNlYXJjaC5tYXRjaGVzXCJcbiAgICB9KSk7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuLyoqXG5SZXBsYWNlIHRoZSBjdXJyZW50IG1hdGNoIG9mIHRoZSBzZWFyY2ggcXVlcnkuXG4qL1xuY29uc3QgcmVwbGFjZU5leHQgPSBzZWFyY2hDb21tYW5kKCh2aWV3JDEsIHsgcXVlcnkgfSkgPT4ge1xuICAgIGxldCB7IHN0YXRlOiBzdGF0ZSQxIH0gPSB2aWV3JDEsIHsgZnJvbSwgdG8gfSA9IHN0YXRlJDEuc2VsZWN0aW9uLm1haW47XG4gICAgaWYgKHN0YXRlJDEucmVhZE9ubHkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBsZXQgbmV4dCA9IHF1ZXJ5Lm5leHRNYXRjaChzdGF0ZSQxLCBmcm9tLCBmcm9tKTtcbiAgICBpZiAoIW5leHQpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBsZXQgY2hhbmdlcyA9IFtdLCBzZWxlY3Rpb24sIHJlcGxhY2VtZW50O1xuICAgIGxldCBlZmZlY3RzID0gW107XG4gICAgaWYgKG5leHQuZnJvbSA9PSBmcm9tICYmIG5leHQudG8gPT0gdG8pIHtcbiAgICAgICAgcmVwbGFjZW1lbnQgPSBzdGF0ZSQxLnRvVGV4dChxdWVyeS5nZXRSZXBsYWNlbWVudChuZXh0KSk7XG4gICAgICAgIGNoYW5nZXMucHVzaCh7IGZyb206IG5leHQuZnJvbSwgdG86IG5leHQudG8sIGluc2VydDogcmVwbGFjZW1lbnQgfSk7XG4gICAgICAgIG5leHQgPSBxdWVyeS5uZXh0TWF0Y2goc3RhdGUkMSwgbmV4dC5mcm9tLCBuZXh0LnRvKTtcbiAgICAgICAgZWZmZWN0cy5wdXNoKHZpZXcuRWRpdG9yVmlldy5hbm5vdW5jZS5vZihzdGF0ZSQxLnBocmFzZShcInJlcGxhY2VkIG1hdGNoIG9uIGxpbmUgJFwiLCBzdGF0ZSQxLmRvYy5saW5lQXQoZnJvbSkubnVtYmVyKSArIFwiLlwiKSk7XG4gICAgfVxuICAgIGlmIChuZXh0KSB7XG4gICAgICAgIGxldCBvZmYgPSBjaGFuZ2VzLmxlbmd0aCA9PSAwIHx8IGNoYW5nZXNbMF0uZnJvbSA+PSBuZXh0LnRvID8gMCA6IG5leHQudG8gLSBuZXh0LmZyb20gLSByZXBsYWNlbWVudC5sZW5ndGg7XG4gICAgICAgIHNlbGVjdGlvbiA9IHN0YXRlLkVkaXRvclNlbGVjdGlvbi5zaW5nbGUobmV4dC5mcm9tIC0gb2ZmLCBuZXh0LnRvIC0gb2ZmKTtcbiAgICAgICAgZWZmZWN0cy5wdXNoKGFubm91bmNlTWF0Y2godmlldyQxLCBuZXh0KSk7XG4gICAgICAgIGVmZmVjdHMucHVzaChzdGF0ZSQxLmZhY2V0KHNlYXJjaENvbmZpZ0ZhY2V0KS5zY3JvbGxUb01hdGNoKHNlbGVjdGlvbi5tYWluLCB2aWV3JDEpKTtcbiAgICB9XG4gICAgdmlldyQxLmRpc3BhdGNoKHtcbiAgICAgICAgY2hhbmdlcywgc2VsZWN0aW9uLCBlZmZlY3RzLFxuICAgICAgICB1c2VyRXZlbnQ6IFwiaW5wdXQucmVwbGFjZVwiXG4gICAgfSk7XG4gICAgcmV0dXJuIHRydWU7XG59KTtcbi8qKlxuUmVwbGFjZSBhbGwgaW5zdGFuY2VzIG9mIHRoZSBzZWFyY2ggcXVlcnkgd2l0aCB0aGUgZ2l2ZW5cbnJlcGxhY2VtZW50LlxuKi9cbmNvbnN0IHJlcGxhY2VBbGwgPSBzZWFyY2hDb21tYW5kKCh2aWV3JDEsIHsgcXVlcnkgfSkgPT4ge1xuICAgIGlmICh2aWV3JDEuc3RhdGUucmVhZE9ubHkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBsZXQgY2hhbmdlcyA9IHF1ZXJ5Lm1hdGNoQWxsKHZpZXckMS5zdGF0ZSwgMWU5KS5tYXAobWF0Y2ggPT4ge1xuICAgICAgICBsZXQgeyBmcm9tLCB0byB9ID0gbWF0Y2g7XG4gICAgICAgIHJldHVybiB7IGZyb20sIHRvLCBpbnNlcnQ6IHF1ZXJ5LmdldFJlcGxhY2VtZW50KG1hdGNoKSB9O1xuICAgIH0pO1xuICAgIGlmICghY2hhbmdlcy5sZW5ndGgpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBsZXQgYW5ub3VuY2VUZXh0ID0gdmlldyQxLnN0YXRlLnBocmFzZShcInJlcGxhY2VkICQgbWF0Y2hlc1wiLCBjaGFuZ2VzLmxlbmd0aCkgKyBcIi5cIjtcbiAgICB2aWV3JDEuZGlzcGF0Y2goe1xuICAgICAgICBjaGFuZ2VzLFxuICAgICAgICBlZmZlY3RzOiB2aWV3LkVkaXRvclZpZXcuYW5ub3VuY2Uub2YoYW5ub3VuY2VUZXh0KSxcbiAgICAgICAgdXNlckV2ZW50OiBcImlucHV0LnJlcGxhY2UuYWxsXCJcbiAgICB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbn0pO1xuZnVuY3Rpb24gY3JlYXRlU2VhcmNoUGFuZWwodmlldykge1xuICAgIHJldHVybiB2aWV3LnN0YXRlLmZhY2V0KHNlYXJjaENvbmZpZ0ZhY2V0KS5jcmVhdGVQYW5lbCh2aWV3KTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRRdWVyeShzdGF0ZSwgZmFsbGJhY2spIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lO1xuICAgIGxldCBzZWwgPSBzdGF0ZS5zZWxlY3Rpb24ubWFpbjtcbiAgICBsZXQgc2VsVGV4dCA9IHNlbC5lbXB0eSB8fCBzZWwudG8gPiBzZWwuZnJvbSArIDEwMCA/IFwiXCIgOiBzdGF0ZS5zbGljZURvYyhzZWwuZnJvbSwgc2VsLnRvKTtcbiAgICBpZiAoZmFsbGJhY2sgJiYgIXNlbFRleHQpXG4gICAgICAgIHJldHVybiBmYWxsYmFjaztcbiAgICBsZXQgY29uZmlnID0gc3RhdGUuZmFjZXQoc2VhcmNoQ29uZmlnRmFjZXQpO1xuICAgIHJldHVybiBuZXcgU2VhcmNoUXVlcnkoe1xuICAgICAgICBzZWFyY2g6ICgoX2EgPSBmYWxsYmFjayA9PT0gbnVsbCB8fCBmYWxsYmFjayA9PT0gdm9pZCAwID8gdm9pZCAwIDogZmFsbGJhY2subGl0ZXJhbCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogY29uZmlnLmxpdGVyYWwpID8gc2VsVGV4dCA6IHNlbFRleHQucmVwbGFjZSgvXFxuL2csIFwiXFxcXG5cIiksXG4gICAgICAgIGNhc2VTZW5zaXRpdmU6IChfYiA9IGZhbGxiYWNrID09PSBudWxsIHx8IGZhbGxiYWNrID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmYWxsYmFjay5jYXNlU2Vuc2l0aXZlKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBjb25maWcuY2FzZVNlbnNpdGl2ZSxcbiAgICAgICAgbGl0ZXJhbDogKF9jID0gZmFsbGJhY2sgPT09IG51bGwgfHwgZmFsbGJhY2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZhbGxiYWNrLmxpdGVyYWwpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IGNvbmZpZy5saXRlcmFsLFxuICAgICAgICByZWdleHA6IChfZCA9IGZhbGxiYWNrID09PSBudWxsIHx8IGZhbGxiYWNrID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmYWxsYmFjay5yZWdleHApICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IGNvbmZpZy5yZWdleHAsXG4gICAgICAgIHdob2xlV29yZDogKF9lID0gZmFsbGJhY2sgPT09IG51bGwgfHwgZmFsbGJhY2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZhbGxiYWNrLndob2xlV29yZCkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogY29uZmlnLndob2xlV29yZFxuICAgIH0pO1xufVxuZnVuY3Rpb24gZ2V0U2VhcmNoSW5wdXQodmlldyQxKSB7XG4gICAgbGV0IHBhbmVsID0gdmlldy5nZXRQYW5lbCh2aWV3JDEsIGNyZWF0ZVNlYXJjaFBhbmVsKTtcbiAgICByZXR1cm4gcGFuZWwgJiYgcGFuZWwuZG9tLnF1ZXJ5U2VsZWN0b3IoXCJbbWFpbi1maWVsZF1cIik7XG59XG5mdW5jdGlvbiBzZWxlY3RTZWFyY2hJbnB1dCh2aWV3KSB7XG4gICAgbGV0IGlucHV0ID0gZ2V0U2VhcmNoSW5wdXQodmlldyk7XG4gICAgaWYgKGlucHV0ICYmIGlucHV0ID09IHZpZXcucm9vdC5hY3RpdmVFbGVtZW50KVxuICAgICAgICBpbnB1dC5zZWxlY3QoKTtcbn1cbi8qKlxuTWFrZSBzdXJlIHRoZSBzZWFyY2ggcGFuZWwgaXMgb3BlbiBhbmQgZm9jdXNlZC5cbiovXG5jb25zdCBvcGVuU2VhcmNoUGFuZWwgPSB2aWV3ID0+IHtcbiAgICBsZXQgc3RhdGUkMSA9IHZpZXcuc3RhdGUuZmllbGQoc2VhcmNoU3RhdGUsIGZhbHNlKTtcbiAgICBpZiAoc3RhdGUkMSAmJiBzdGF0ZSQxLnBhbmVsKSB7XG4gICAgICAgIGxldCBzZWFyY2hJbnB1dCA9IGdldFNlYXJjaElucHV0KHZpZXcpO1xuICAgICAgICBpZiAoc2VhcmNoSW5wdXQgJiYgc2VhcmNoSW5wdXQgIT0gdmlldy5yb290LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgIGxldCBxdWVyeSA9IGRlZmF1bHRRdWVyeSh2aWV3LnN0YXRlLCBzdGF0ZSQxLnF1ZXJ5LnNwZWMpO1xuICAgICAgICAgICAgaWYgKHF1ZXJ5LnZhbGlkKVxuICAgICAgICAgICAgICAgIHZpZXcuZGlzcGF0Y2goeyBlZmZlY3RzOiBzZXRTZWFyY2hRdWVyeS5vZihxdWVyeSkgfSk7XG4gICAgICAgICAgICBzZWFyY2hJbnB1dC5mb2N1cygpO1xuICAgICAgICAgICAgc2VhcmNoSW5wdXQuc2VsZWN0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZpZXcuZGlzcGF0Y2goeyBlZmZlY3RzOiBbXG4gICAgICAgICAgICAgICAgdG9nZ2xlUGFuZWwub2YodHJ1ZSksXG4gICAgICAgICAgICAgICAgc3RhdGUkMSA/IHNldFNlYXJjaFF1ZXJ5Lm9mKGRlZmF1bHRRdWVyeSh2aWV3LnN0YXRlLCBzdGF0ZSQxLnF1ZXJ5LnNwZWMpKSA6IHN0YXRlLlN0YXRlRWZmZWN0LmFwcGVuZENvbmZpZy5vZihzZWFyY2hFeHRlbnNpb25zKVxuICAgICAgICAgICAgXSB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59O1xuLyoqXG5DbG9zZSB0aGUgc2VhcmNoIHBhbmVsLlxuKi9cbmNvbnN0IGNsb3NlU2VhcmNoUGFuZWwgPSB2aWV3JDEgPT4ge1xuICAgIGxldCBzdGF0ZSA9IHZpZXckMS5zdGF0ZS5maWVsZChzZWFyY2hTdGF0ZSwgZmFsc2UpO1xuICAgIGlmICghc3RhdGUgfHwgIXN0YXRlLnBhbmVsKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0IHBhbmVsID0gdmlldy5nZXRQYW5lbCh2aWV3JDEsIGNyZWF0ZVNlYXJjaFBhbmVsKTtcbiAgICBpZiAocGFuZWwgJiYgcGFuZWwuZG9tLmNvbnRhaW5zKHZpZXckMS5yb290LmFjdGl2ZUVsZW1lbnQpKVxuICAgICAgICB2aWV3JDEuZm9jdXMoKTtcbiAgICB2aWV3JDEuZGlzcGF0Y2goeyBlZmZlY3RzOiB0b2dnbGVQYW5lbC5vZihmYWxzZSkgfSk7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuLyoqXG5EZWZhdWx0IHNlYXJjaC1yZWxhdGVkIGtleSBiaW5kaW5ncy5cblxuIC0gTW9kLWY6IFtgb3BlblNlYXJjaFBhbmVsYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzZWFyY2gub3BlblNlYXJjaFBhbmVsKVxuIC0gRjMsIE1vZC1nOiBbYGZpbmROZXh0YF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzZWFyY2guZmluZE5leHQpXG4gLSBTaGlmdC1GMywgU2hpZnQtTW9kLWc6IFtgZmluZFByZXZpb3VzYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzZWFyY2guZmluZFByZXZpb3VzKVxuIC0gTW9kLUFsdC1nOiBbYGdvdG9MaW5lYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzZWFyY2guZ290b0xpbmUpXG4gLSBNb2QtZDogW2BzZWxlY3ROZXh0T2NjdXJyZW5jZWBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc2VhcmNoLnNlbGVjdE5leHRPY2N1cnJlbmNlKVxuKi9cbmNvbnN0IHNlYXJjaEtleW1hcCA9IFtcbiAgICB7IGtleTogXCJNb2QtZlwiLCBydW46IG9wZW5TZWFyY2hQYW5lbCwgc2NvcGU6IFwiZWRpdG9yIHNlYXJjaC1wYW5lbFwiIH0sXG4gICAgeyBrZXk6IFwiRjNcIiwgcnVuOiBmaW5kTmV4dCwgc2hpZnQ6IGZpbmRQcmV2aW91cywgc2NvcGU6IFwiZWRpdG9yIHNlYXJjaC1wYW5lbFwiLCBwcmV2ZW50RGVmYXVsdDogdHJ1ZSB9LFxuICAgIHsga2V5OiBcIk1vZC1nXCIsIHJ1bjogZmluZE5leHQsIHNoaWZ0OiBmaW5kUHJldmlvdXMsIHNjb3BlOiBcImVkaXRvciBzZWFyY2gtcGFuZWxcIiwgcHJldmVudERlZmF1bHQ6IHRydWUgfSxcbiAgICB7IGtleTogXCJFc2NhcGVcIiwgcnVuOiBjbG9zZVNlYXJjaFBhbmVsLCBzY29wZTogXCJlZGl0b3Igc2VhcmNoLXBhbmVsXCIgfSxcbiAgICB7IGtleTogXCJNb2QtU2hpZnQtbFwiLCBydW46IHNlbGVjdFNlbGVjdGlvbk1hdGNoZXMgfSxcbiAgICB7IGtleTogXCJNb2QtQWx0LWdcIiwgcnVuOiBnb3RvTGluZSB9LFxuICAgIHsga2V5OiBcIk1vZC1kXCIsIHJ1bjogc2VsZWN0TmV4dE9jY3VycmVuY2UsIHByZXZlbnREZWZhdWx0OiB0cnVlIH0sXG5dO1xuY2xhc3MgU2VhcmNoUGFuZWwge1xuICAgIGNvbnN0cnVjdG9yKHZpZXcpIHtcbiAgICAgICAgdGhpcy52aWV3ID0gdmlldztcbiAgICAgICAgbGV0IHF1ZXJ5ID0gdGhpcy5xdWVyeSA9IHZpZXcuc3RhdGUuZmllbGQoc2VhcmNoU3RhdGUpLnF1ZXJ5LnNwZWM7XG4gICAgICAgIHRoaXMuY29tbWl0ID0gdGhpcy5jb21taXQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zZWFyY2hGaWVsZCA9IGVsdChcImlucHV0XCIsIHtcbiAgICAgICAgICAgIHZhbHVlOiBxdWVyeS5zZWFyY2gsXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogcGhyYXNlKHZpZXcsIFwiRmluZFwiKSxcbiAgICAgICAgICAgIFwiYXJpYS1sYWJlbFwiOiBwaHJhc2UodmlldywgXCJGaW5kXCIpLFxuICAgICAgICAgICAgY2xhc3M6IFwiY20tdGV4dGZpZWxkXCIsXG4gICAgICAgICAgICBuYW1lOiBcInNlYXJjaFwiLFxuICAgICAgICAgICAgZm9ybTogXCJcIixcbiAgICAgICAgICAgIFwibWFpbi1maWVsZFwiOiBcInRydWVcIixcbiAgICAgICAgICAgIG9uY2hhbmdlOiB0aGlzLmNvbW1pdCxcbiAgICAgICAgICAgIG9ua2V5dXA6IHRoaXMuY29tbWl0XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJlcGxhY2VGaWVsZCA9IGVsdChcImlucHV0XCIsIHtcbiAgICAgICAgICAgIHZhbHVlOiBxdWVyeS5yZXBsYWNlLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IHBocmFzZSh2aWV3LCBcIlJlcGxhY2VcIiksXG4gICAgICAgICAgICBcImFyaWEtbGFiZWxcIjogcGhyYXNlKHZpZXcsIFwiUmVwbGFjZVwiKSxcbiAgICAgICAgICAgIGNsYXNzOiBcImNtLXRleHRmaWVsZFwiLFxuICAgICAgICAgICAgbmFtZTogXCJyZXBsYWNlXCIsXG4gICAgICAgICAgICBmb3JtOiBcIlwiLFxuICAgICAgICAgICAgb25jaGFuZ2U6IHRoaXMuY29tbWl0LFxuICAgICAgICAgICAgb25rZXl1cDogdGhpcy5jb21taXRcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY2FzZUZpZWxkID0gZWx0KFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgdHlwZTogXCJjaGVja2JveFwiLFxuICAgICAgICAgICAgbmFtZTogXCJjYXNlXCIsXG4gICAgICAgICAgICBmb3JtOiBcIlwiLFxuICAgICAgICAgICAgY2hlY2tlZDogcXVlcnkuY2FzZVNlbnNpdGl2ZSxcbiAgICAgICAgICAgIG9uY2hhbmdlOiB0aGlzLmNvbW1pdFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yZUZpZWxkID0gZWx0KFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgdHlwZTogXCJjaGVja2JveFwiLFxuICAgICAgICAgICAgbmFtZTogXCJyZVwiLFxuICAgICAgICAgICAgZm9ybTogXCJcIixcbiAgICAgICAgICAgIGNoZWNrZWQ6IHF1ZXJ5LnJlZ2V4cCxcbiAgICAgICAgICAgIG9uY2hhbmdlOiB0aGlzLmNvbW1pdFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy53b3JkRmllbGQgPSBlbHQoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICB0eXBlOiBcImNoZWNrYm94XCIsXG4gICAgICAgICAgICBuYW1lOiBcIndvcmRcIixcbiAgICAgICAgICAgIGZvcm06IFwiXCIsXG4gICAgICAgICAgICBjaGVja2VkOiBxdWVyeS53aG9sZVdvcmQsXG4gICAgICAgICAgICBvbmNoYW5nZTogdGhpcy5jb21taXRcbiAgICAgICAgfSk7XG4gICAgICAgIGZ1bmN0aW9uIGJ1dHRvbihuYW1lLCBvbmNsaWNrLCBjb250ZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gZWx0KFwiYnV0dG9uXCIsIHsgY2xhc3M6IFwiY20tYnV0dG9uXCIsIG5hbWUsIG9uY2xpY2ssIHR5cGU6IFwiYnV0dG9uXCIgfSwgY29udGVudCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kb20gPSBlbHQoXCJkaXZcIiwgeyBvbmtleWRvd246IChlKSA9PiB0aGlzLmtleWRvd24oZSksIGNsYXNzOiBcImNtLXNlYXJjaFwiIH0sIFtcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoRmllbGQsXG4gICAgICAgICAgICBidXR0b24oXCJuZXh0XCIsICgpID0+IGZpbmROZXh0KHZpZXcpLCBbcGhyYXNlKHZpZXcsIFwibmV4dFwiKV0pLFxuICAgICAgICAgICAgYnV0dG9uKFwicHJldlwiLCAoKSA9PiBmaW5kUHJldmlvdXModmlldyksIFtwaHJhc2UodmlldywgXCJwcmV2aW91c1wiKV0pLFxuICAgICAgICAgICAgYnV0dG9uKFwic2VsZWN0XCIsICgpID0+IHNlbGVjdE1hdGNoZXModmlldyksIFtwaHJhc2UodmlldywgXCJhbGxcIildKSxcbiAgICAgICAgICAgIGVsdChcImxhYmVsXCIsIG51bGwsIFt0aGlzLmNhc2VGaWVsZCwgcGhyYXNlKHZpZXcsIFwibWF0Y2ggY2FzZVwiKV0pLFxuICAgICAgICAgICAgZWx0KFwibGFiZWxcIiwgbnVsbCwgW3RoaXMucmVGaWVsZCwgcGhyYXNlKHZpZXcsIFwicmVnZXhwXCIpXSksXG4gICAgICAgICAgICBlbHQoXCJsYWJlbFwiLCBudWxsLCBbdGhpcy53b3JkRmllbGQsIHBocmFzZSh2aWV3LCBcImJ5IHdvcmRcIildKSxcbiAgICAgICAgICAgIC4uLnZpZXcuc3RhdGUucmVhZE9ubHkgPyBbXSA6IFtcbiAgICAgICAgICAgICAgICBlbHQoXCJiclwiKSxcbiAgICAgICAgICAgICAgICB0aGlzLnJlcGxhY2VGaWVsZCxcbiAgICAgICAgICAgICAgICBidXR0b24oXCJyZXBsYWNlXCIsICgpID0+IHJlcGxhY2VOZXh0KHZpZXcpLCBbcGhyYXNlKHZpZXcsIFwicmVwbGFjZVwiKV0pLFxuICAgICAgICAgICAgICAgIGJ1dHRvbihcInJlcGxhY2VBbGxcIiwgKCkgPT4gcmVwbGFjZUFsbCh2aWV3KSwgW3BocmFzZSh2aWV3LCBcInJlcGxhY2UgYWxsXCIpXSlcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBlbHQoXCJidXR0b25cIiwge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiY2xvc2VcIixcbiAgICAgICAgICAgICAgICBvbmNsaWNrOiAoKSA9PiBjbG9zZVNlYXJjaFBhbmVsKHZpZXcpLFxuICAgICAgICAgICAgICAgIFwiYXJpYS1sYWJlbFwiOiBwaHJhc2UodmlldywgXCJjbG9zZVwiKSxcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ1dHRvblwiXG4gICAgICAgICAgICB9LCBbXCLDl1wiXSlcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGNvbW1pdCgpIHtcbiAgICAgICAgbGV0IHF1ZXJ5ID0gbmV3IFNlYXJjaFF1ZXJ5KHtcbiAgICAgICAgICAgIHNlYXJjaDogdGhpcy5zZWFyY2hGaWVsZC52YWx1ZSxcbiAgICAgICAgICAgIGNhc2VTZW5zaXRpdmU6IHRoaXMuY2FzZUZpZWxkLmNoZWNrZWQsXG4gICAgICAgICAgICByZWdleHA6IHRoaXMucmVGaWVsZC5jaGVja2VkLFxuICAgICAgICAgICAgd2hvbGVXb3JkOiB0aGlzLndvcmRGaWVsZC5jaGVja2VkLFxuICAgICAgICAgICAgcmVwbGFjZTogdGhpcy5yZXBsYWNlRmllbGQudmFsdWUsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXF1ZXJ5LmVxKHRoaXMucXVlcnkpKSB7XG4gICAgICAgICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnk7XG4gICAgICAgICAgICB0aGlzLnZpZXcuZGlzcGF0Y2goeyBlZmZlY3RzOiBzZXRTZWFyY2hRdWVyeS5vZihxdWVyeSkgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAga2V5ZG93bihlKSB7XG4gICAgICAgIGlmICh2aWV3LnJ1blNjb3BlSGFuZGxlcnModGhpcy52aWV3LCBlLCBcInNlYXJjaC1wYW5lbFwiKSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGUua2V5Q29kZSA9PSAxMyAmJiBlLnRhcmdldCA9PSB0aGlzLnNlYXJjaEZpZWxkKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAoZS5zaGlmdEtleSA/IGZpbmRQcmV2aW91cyA6IGZpbmROZXh0KSh0aGlzLnZpZXcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGUua2V5Q29kZSA9PSAxMyAmJiBlLnRhcmdldCA9PSB0aGlzLnJlcGxhY2VGaWVsZCkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgcmVwbGFjZU5leHQodGhpcy52aWV3KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB1cGRhdGUodXBkYXRlKSB7XG4gICAgICAgIGZvciAobGV0IHRyIG9mIHVwZGF0ZS50cmFuc2FjdGlvbnMpXG4gICAgICAgICAgICBmb3IgKGxldCBlZmZlY3Qgb2YgdHIuZWZmZWN0cykge1xuICAgICAgICAgICAgICAgIGlmIChlZmZlY3QuaXMoc2V0U2VhcmNoUXVlcnkpICYmICFlZmZlY3QudmFsdWUuZXEodGhpcy5xdWVyeSkpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0UXVlcnkoZWZmZWN0LnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICB9XG4gICAgc2V0UXVlcnkocXVlcnkpIHtcbiAgICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xuICAgICAgICB0aGlzLnNlYXJjaEZpZWxkLnZhbHVlID0gcXVlcnkuc2VhcmNoO1xuICAgICAgICB0aGlzLnJlcGxhY2VGaWVsZC52YWx1ZSA9IHF1ZXJ5LnJlcGxhY2U7XG4gICAgICAgIHRoaXMuY2FzZUZpZWxkLmNoZWNrZWQgPSBxdWVyeS5jYXNlU2Vuc2l0aXZlO1xuICAgICAgICB0aGlzLnJlRmllbGQuY2hlY2tlZCA9IHF1ZXJ5LnJlZ2V4cDtcbiAgICAgICAgdGhpcy53b3JkRmllbGQuY2hlY2tlZCA9IHF1ZXJ5Lndob2xlV29yZDtcbiAgICB9XG4gICAgbW91bnQoKSB7XG4gICAgICAgIHRoaXMuc2VhcmNoRmllbGQuc2VsZWN0KCk7XG4gICAgfVxuICAgIGdldCBwb3MoKSB7IHJldHVybiA4MDsgfVxuICAgIGdldCB0b3AoKSB7IHJldHVybiB0aGlzLnZpZXcuc3RhdGUuZmFjZXQoc2VhcmNoQ29uZmlnRmFjZXQpLnRvcDsgfVxufVxuZnVuY3Rpb24gcGhyYXNlKHZpZXcsIHBocmFzZSkgeyByZXR1cm4gdmlldy5zdGF0ZS5waHJhc2UocGhyYXNlKTsgfVxuY29uc3QgQW5ub3VuY2VNYXJnaW4gPSAzMDtcbmNvbnN0IEJyZWFrID0gL1tcXHNcXC4sOjs/IV0vO1xuZnVuY3Rpb24gYW5ub3VuY2VNYXRjaCh2aWV3JDEsIHsgZnJvbSwgdG8gfSkge1xuICAgIGxldCBsaW5lID0gdmlldyQxLnN0YXRlLmRvYy5saW5lQXQoZnJvbSksIGxpbmVFbmQgPSB2aWV3JDEuc3RhdGUuZG9jLmxpbmVBdCh0bykudG87XG4gICAgbGV0IHN0YXJ0ID0gTWF0aC5tYXgobGluZS5mcm9tLCBmcm9tIC0gQW5ub3VuY2VNYXJnaW4pLCBlbmQgPSBNYXRoLm1pbihsaW5lRW5kLCB0byArIEFubm91bmNlTWFyZ2luKTtcbiAgICBsZXQgdGV4dCA9IHZpZXckMS5zdGF0ZS5zbGljZURvYyhzdGFydCwgZW5kKTtcbiAgICBpZiAoc3RhcnQgIT0gbGluZS5mcm9tKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgQW5ub3VuY2VNYXJnaW47IGkrKylcbiAgICAgICAgICAgIGlmICghQnJlYWsudGVzdCh0ZXh0W2kgKyAxXSkgJiYgQnJlYWsudGVzdCh0ZXh0W2ldKSkge1xuICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnNsaWNlKGkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW5kICE9IGxpbmVFbmQpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRleHQubGVuZ3RoIC0gMTsgaSA+IHRleHQubGVuZ3RoIC0gQW5ub3VuY2VNYXJnaW47IGktLSlcbiAgICAgICAgICAgIGlmICghQnJlYWsudGVzdCh0ZXh0W2kgLSAxXSkgJiYgQnJlYWsudGVzdCh0ZXh0W2ldKSkge1xuICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnNsaWNlKDAsIGkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmlldy5FZGl0b3JWaWV3LmFubm91bmNlLm9mKGAke3ZpZXckMS5zdGF0ZS5waHJhc2UoXCJjdXJyZW50IG1hdGNoXCIpfS4gJHt0ZXh0fSAke3ZpZXckMS5zdGF0ZS5waHJhc2UoXCJvbiBsaW5lXCIpfSAke2xpbmUubnVtYmVyfS5gKTtcbn1cbmNvbnN0IGJhc2VUaGVtZSA9IHZpZXcuRWRpdG9yVmlldy5iYXNlVGhlbWUoe1xuICAgIFwiLmNtLXBhbmVsLmNtLXNlYXJjaFwiOiB7XG4gICAgICAgIHBhZGRpbmc6IFwiMnB4IDZweCA0cHhcIixcbiAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgXCImIFtuYW1lPWNsb3NlXVwiOiB7XG4gICAgICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICAgICAgdG9wOiBcIjBcIixcbiAgICAgICAgICAgIHJpZ2h0OiBcIjRweFwiLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcImluaGVyaXRcIixcbiAgICAgICAgICAgIGJvcmRlcjogXCJub25lXCIsXG4gICAgICAgICAgICBmb250OiBcImluaGVyaXRcIixcbiAgICAgICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgICAgICBtYXJnaW46IDBcbiAgICAgICAgfSxcbiAgICAgICAgXCImIGlucHV0LCAmIGJ1dHRvbiwgJiBsYWJlbFwiOiB7XG4gICAgICAgICAgICBtYXJnaW46IFwiLjJlbSAuNmVtIC4yZW0gMFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiJiBpbnB1dFt0eXBlPWNoZWNrYm94XVwiOiB7XG4gICAgICAgICAgICBtYXJnaW5SaWdodDogXCIuMmVtXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCImIGxhYmVsXCI6IHtcbiAgICAgICAgICAgIGZvbnRTaXplOiBcIjgwJVwiLFxuICAgICAgICAgICAgd2hpdGVTcGFjZTogXCJwcmVcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcIiZsaWdodCAuY20tc2VhcmNoTWF0Y2hcIjogeyBiYWNrZ3JvdW5kQ29sb3I6IFwiI2ZmZmYwMDU0XCIgfSxcbiAgICBcIiZkYXJrIC5jbS1zZWFyY2hNYXRjaFwiOiB7IGJhY2tncm91bmRDb2xvcjogXCIjMDBmZmZmOGFcIiB9LFxuICAgIFwiJmxpZ2h0IC5jbS1zZWFyY2hNYXRjaC1zZWxlY3RlZFwiOiB7IGJhY2tncm91bmRDb2xvcjogXCIjZmY2YTAwNTRcIiB9LFxuICAgIFwiJmRhcmsgLmNtLXNlYXJjaE1hdGNoLXNlbGVjdGVkXCI6IHsgYmFja2dyb3VuZENvbG9yOiBcIiNmZjAwZmY4YVwiIH1cbn0pO1xuY29uc3Qgc2VhcmNoRXh0ZW5zaW9ucyA9IFtcbiAgICBzZWFyY2hTdGF0ZSxcbiAgICBzdGF0ZS5QcmVjLmxvdyhzZWFyY2hIaWdobGlnaHRlciksXG4gICAgYmFzZVRoZW1lXG5dO1xuXG5leHBvcnRzLlJlZ0V4cEN1cnNvciA9IFJlZ0V4cEN1cnNvcjtcbmV4cG9ydHMuU2VhcmNoQ3Vyc29yID0gU2VhcmNoQ3Vyc29yO1xuZXhwb3J0cy5TZWFyY2hRdWVyeSA9IFNlYXJjaFF1ZXJ5O1xuZXhwb3J0cy5jbG9zZVNlYXJjaFBhbmVsID0gY2xvc2VTZWFyY2hQYW5lbDtcbmV4cG9ydHMuZmluZE5leHQgPSBmaW5kTmV4dDtcbmV4cG9ydHMuZmluZFByZXZpb3VzID0gZmluZFByZXZpb3VzO1xuZXhwb3J0cy5nZXRTZWFyY2hRdWVyeSA9IGdldFNlYXJjaFF1ZXJ5O1xuZXhwb3J0cy5nb3RvTGluZSA9IGdvdG9MaW5lO1xuZXhwb3J0cy5oaWdobGlnaHRTZWxlY3Rpb25NYXRjaGVzID0gaGlnaGxpZ2h0U2VsZWN0aW9uTWF0Y2hlcztcbmV4cG9ydHMub3BlblNlYXJjaFBhbmVsID0gb3BlblNlYXJjaFBhbmVsO1xuZXhwb3J0cy5yZXBsYWNlQWxsID0gcmVwbGFjZUFsbDtcbmV4cG9ydHMucmVwbGFjZU5leHQgPSByZXBsYWNlTmV4dDtcbmV4cG9ydHMuc2VhcmNoID0gc2VhcmNoO1xuZXhwb3J0cy5zZWFyY2hLZXltYXAgPSBzZWFyY2hLZXltYXA7XG5leHBvcnRzLnNlYXJjaFBhbmVsT3BlbiA9IHNlYXJjaFBhbmVsT3BlbjtcbmV4cG9ydHMuc2VsZWN0TWF0Y2hlcyA9IHNlbGVjdE1hdGNoZXM7XG5leHBvcnRzLnNlbGVjdE5leHRPY2N1cnJlbmNlID0gc2VsZWN0TmV4dE9jY3VycmVuY2U7XG5leHBvcnRzLnNlbGVjdFNlbGVjdGlvbk1hdGNoZXMgPSBzZWxlY3RTZWxlY3Rpb25NYXRjaGVzO1xuZXhwb3J0cy5zZXRTZWFyY2hRdWVyeSA9IHNldFNlYXJjaFF1ZXJ5O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcblRoZSBkYXRhIHN0cnVjdHVyZSBmb3IgZG9jdW1lbnRzLiBAbm9uYWJzdHJhY3RcbiovXG5jbGFzcyBUZXh0IHtcbiAgICAvKipcbiAgICBHZXQgdGhlIGxpbmUgZGVzY3JpcHRpb24gYXJvdW5kIHRoZSBnaXZlbiBwb3NpdGlvbi5cbiAgICAqL1xuICAgIGxpbmVBdChwb3MpIHtcbiAgICAgICAgaWYgKHBvcyA8IDAgfHwgcG9zID4gdGhpcy5sZW5ndGgpXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgSW52YWxpZCBwb3NpdGlvbiAke3Bvc30gaW4gZG9jdW1lbnQgb2YgbGVuZ3RoICR7dGhpcy5sZW5ndGh9YCk7XG4gICAgICAgIHJldHVybiB0aGlzLmxpbmVJbm5lcihwb3MsIGZhbHNlLCAxLCAwKTtcbiAgICB9XG4gICAgLyoqXG4gICAgR2V0IHRoZSBkZXNjcmlwdGlvbiBmb3IgdGhlIGdpdmVuICgxLWJhc2VkKSBsaW5lIG51bWJlci5cbiAgICAqL1xuICAgIGxpbmUobikge1xuICAgICAgICBpZiAobiA8IDEgfHwgbiA+IHRoaXMubGluZXMpXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgSW52YWxpZCBsaW5lIG51bWJlciAke259IGluICR7dGhpcy5saW5lc30tbGluZSBkb2N1bWVudGApO1xuICAgICAgICByZXR1cm4gdGhpcy5saW5lSW5uZXIobiwgdHJ1ZSwgMSwgMCk7XG4gICAgfVxuICAgIC8qKlxuICAgIFJlcGxhY2UgYSByYW5nZSBvZiB0aGUgdGV4dCB3aXRoIHRoZSBnaXZlbiBjb250ZW50LlxuICAgICovXG4gICAgcmVwbGFjZShmcm9tLCB0bywgdGV4dCkge1xuICAgICAgICBbZnJvbSwgdG9dID0gY2xpcCh0aGlzLCBmcm9tLCB0byk7XG4gICAgICAgIGxldCBwYXJ0cyA9IFtdO1xuICAgICAgICB0aGlzLmRlY29tcG9zZSgwLCBmcm9tLCBwYXJ0cywgMiAvKiBPcGVuLlRvICovKTtcbiAgICAgICAgaWYgKHRleHQubGVuZ3RoKVxuICAgICAgICAgICAgdGV4dC5kZWNvbXBvc2UoMCwgdGV4dC5sZW5ndGgsIHBhcnRzLCAxIC8qIE9wZW4uRnJvbSAqLyB8IDIgLyogT3Blbi5UbyAqLyk7XG4gICAgICAgIHRoaXMuZGVjb21wb3NlKHRvLCB0aGlzLmxlbmd0aCwgcGFydHMsIDEgLyogT3Blbi5Gcm9tICovKTtcbiAgICAgICAgcmV0dXJuIFRleHROb2RlLmZyb20ocGFydHMsIHRoaXMubGVuZ3RoIC0gKHRvIC0gZnJvbSkgKyB0ZXh0Lmxlbmd0aCk7XG4gICAgfVxuICAgIC8qKlxuICAgIEFwcGVuZCBhbm90aGVyIGRvY3VtZW50IHRvIHRoaXMgb25lLlxuICAgICovXG4gICAgYXBwZW5kKG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcGxhY2UodGhpcy5sZW5ndGgsIHRoaXMubGVuZ3RoLCBvdGhlcik7XG4gICAgfVxuICAgIC8qKlxuICAgIFJldHJpZXZlIHRoZSB0ZXh0IGJldHdlZW4gdGhlIGdpdmVuIHBvaW50cy5cbiAgICAqL1xuICAgIHNsaWNlKGZyb20sIHRvID0gdGhpcy5sZW5ndGgpIHtcbiAgICAgICAgW2Zyb20sIHRvXSA9IGNsaXAodGhpcywgZnJvbSwgdG8pO1xuICAgICAgICBsZXQgcGFydHMgPSBbXTtcbiAgICAgICAgdGhpcy5kZWNvbXBvc2UoZnJvbSwgdG8sIHBhcnRzLCAwKTtcbiAgICAgICAgcmV0dXJuIFRleHROb2RlLmZyb20ocGFydHMsIHRvIC0gZnJvbSk7XG4gICAgfVxuICAgIC8qKlxuICAgIFRlc3Qgd2hldGhlciB0aGlzIHRleHQgaXMgZXF1YWwgdG8gYW5vdGhlciBpbnN0YW5jZS5cbiAgICAqL1xuICAgIGVxKG90aGVyKSB7XG4gICAgICAgIGlmIChvdGhlciA9PSB0aGlzKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmIChvdGhlci5sZW5ndGggIT0gdGhpcy5sZW5ndGggfHwgb3RoZXIubGluZXMgIT0gdGhpcy5saW5lcylcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgbGV0IHN0YXJ0ID0gdGhpcy5zY2FuSWRlbnRpY2FsKG90aGVyLCAxKSwgZW5kID0gdGhpcy5sZW5ndGggLSB0aGlzLnNjYW5JZGVudGljYWwob3RoZXIsIC0xKTtcbiAgICAgICAgbGV0IGEgPSBuZXcgUmF3VGV4dEN1cnNvcih0aGlzKSwgYiA9IG5ldyBSYXdUZXh0Q3Vyc29yKG90aGVyKTtcbiAgICAgICAgZm9yIChsZXQgc2tpcCA9IHN0YXJ0LCBwb3MgPSBzdGFydDs7KSB7XG4gICAgICAgICAgICBhLm5leHQoc2tpcCk7XG4gICAgICAgICAgICBiLm5leHQoc2tpcCk7XG4gICAgICAgICAgICBza2lwID0gMDtcbiAgICAgICAgICAgIGlmIChhLmxpbmVCcmVhayAhPSBiLmxpbmVCcmVhayB8fCBhLmRvbmUgIT0gYi5kb25lIHx8IGEudmFsdWUgIT0gYi52YWx1ZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBwb3MgKz0gYS52YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoYS5kb25lIHx8IHBvcyA+PSBlbmQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgSXRlcmF0ZSBvdmVyIHRoZSB0ZXh0LiBXaGVuIGBkaXJgIGlzIGAtMWAsIGl0ZXJhdGlvbiBoYXBwZW5zXG4gICAgZnJvbSBlbmQgdG8gc3RhcnQuIFRoaXMgd2lsbCByZXR1cm4gbGluZXMgYW5kIHRoZSBicmVha3MgYmV0d2VlblxuICAgIHRoZW0gYXMgc2VwYXJhdGUgc3RyaW5ncy5cbiAgICAqL1xuICAgIGl0ZXIoZGlyID0gMSkgeyByZXR1cm4gbmV3IFJhd1RleHRDdXJzb3IodGhpcywgZGlyKTsgfVxuICAgIC8qKlxuICAgIEl0ZXJhdGUgb3ZlciBhIHJhbmdlIG9mIHRoZSB0ZXh0LiBXaGVuIGBmcm9tYCA+IGB0b2AsIHRoZVxuICAgIGl0ZXJhdG9yIHdpbGwgcnVuIGluIHJldmVyc2UuXG4gICAgKi9cbiAgICBpdGVyUmFuZ2UoZnJvbSwgdG8gPSB0aGlzLmxlbmd0aCkgeyByZXR1cm4gbmV3IFBhcnRpYWxUZXh0Q3Vyc29yKHRoaXMsIGZyb20sIHRvKTsgfVxuICAgIC8qKlxuICAgIFJldHVybiBhIGN1cnNvciB0aGF0IGl0ZXJhdGVzIG92ZXIgdGhlIGdpdmVuIHJhbmdlIG9mIGxpbmVzLFxuICAgIF93aXRob3V0XyByZXR1cm5pbmcgdGhlIGxpbmUgYnJlYWtzIGJldHdlZW4sIGFuZCB5aWVsZGluZyBlbXB0eVxuICAgIHN0cmluZ3MgZm9yIGVtcHR5IGxpbmVzLlxuICAgIFxuICAgIFdoZW4gYGZyb21gIGFuZCBgdG9gIGFyZSBnaXZlbiwgdGhleSBzaG91bGQgYmUgMS1iYXNlZCBsaW5lIG51bWJlcnMuXG4gICAgKi9cbiAgICBpdGVyTGluZXMoZnJvbSwgdG8pIHtcbiAgICAgICAgbGV0IGlubmVyO1xuICAgICAgICBpZiAoZnJvbSA9PSBudWxsKSB7XG4gICAgICAgICAgICBpbm5lciA9IHRoaXMuaXRlcigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRvID09IG51bGwpXG4gICAgICAgICAgICAgICAgdG8gPSB0aGlzLmxpbmVzICsgMTtcbiAgICAgICAgICAgIGxldCBzdGFydCA9IHRoaXMubGluZShmcm9tKS5mcm9tO1xuICAgICAgICAgICAgaW5uZXIgPSB0aGlzLml0ZXJSYW5nZShzdGFydCwgTWF0aC5tYXgoc3RhcnQsIHRvID09IHRoaXMubGluZXMgKyAxID8gdGhpcy5sZW5ndGggOiB0byA8PSAxID8gMCA6IHRoaXMubGluZSh0byAtIDEpLnRvKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBMaW5lQ3Vyc29yKGlubmVyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgUmV0dXJuIHRoZSBkb2N1bWVudCBhcyBhIHN0cmluZywgdXNpbmcgbmV3bGluZSBjaGFyYWN0ZXJzIHRvXG4gICAgc2VwYXJhdGUgbGluZXMuXG4gICAgKi9cbiAgICB0b1N0cmluZygpIHsgcmV0dXJuIHRoaXMuc2xpY2VTdHJpbmcoMCk7IH1cbiAgICAvKipcbiAgICBDb252ZXJ0IHRoZSBkb2N1bWVudCB0byBhbiBhcnJheSBvZiBsaW5lcyAod2hpY2ggY2FuIGJlXG4gICAgZGVzZXJpYWxpemVkIGFnYWluIHZpYSBbYFRleHQub2ZgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLlRleHReb2YpKS5cbiAgICAqL1xuICAgIHRvSlNPTigpIHtcbiAgICAgICAgbGV0IGxpbmVzID0gW107XG4gICAgICAgIHRoaXMuZmxhdHRlbihsaW5lcyk7XG4gICAgICAgIHJldHVybiBsaW5lcztcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxuICAgIC8qKlxuICAgIENyZWF0ZSBhIGBUZXh0YCBpbnN0YW5jZSBmb3IgdGhlIGdpdmVuIGFycmF5IG9mIGxpbmVzLlxuICAgICovXG4gICAgc3RhdGljIG9mKHRleHQpIHtcbiAgICAgICAgaWYgKHRleHQubGVuZ3RoID09IDApXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkEgZG9jdW1lbnQgbXVzdCBoYXZlIGF0IGxlYXN0IG9uZSBsaW5lXCIpO1xuICAgICAgICBpZiAodGV4dC5sZW5ndGggPT0gMSAmJiAhdGV4dFswXSlcbiAgICAgICAgICAgIHJldHVybiBUZXh0LmVtcHR5O1xuICAgICAgICByZXR1cm4gdGV4dC5sZW5ndGggPD0gMzIgLyogVHJlZS5CcmFuY2ggKi8gPyBuZXcgVGV4dExlYWYodGV4dCkgOiBUZXh0Tm9kZS5mcm9tKFRleHRMZWFmLnNwbGl0KHRleHQsIFtdKSk7XG4gICAgfVxufVxuLy8gTGVhdmVzIHN0b3JlIGFuIGFycmF5IG9mIGxpbmUgc3RyaW5ncy4gVGhlcmUgYXJlIGFsd2F5cyBsaW5lIGJyZWFrc1xuLy8gYmV0d2VlbiB0aGVzZSBzdHJpbmdzLiBMZWF2ZXMgYXJlIGxpbWl0ZWQgaW4gc2l6ZSBhbmQgaGF2ZSB0byBiZVxuLy8gY29udGFpbmVkIGluIFRleHROb2RlIGluc3RhbmNlcyBmb3IgYmlnZ2VyIGRvY3VtZW50cy5cbmNsYXNzIFRleHRMZWFmIGV4dGVuZHMgVGV4dCB7XG4gICAgY29uc3RydWN0b3IodGV4dCwgbGVuZ3RoID0gdGV4dExlbmd0aCh0ZXh0KSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnRleHQgPSB0ZXh0O1xuICAgICAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcbiAgICB9XG4gICAgZ2V0IGxpbmVzKCkgeyByZXR1cm4gdGhpcy50ZXh0Lmxlbmd0aDsgfVxuICAgIGdldCBjaGlsZHJlbigpIHsgcmV0dXJuIG51bGw7IH1cbiAgICBsaW5lSW5uZXIodGFyZ2V0LCBpc0xpbmUsIGxpbmUsIG9mZnNldCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDs7IGkrKykge1xuICAgICAgICAgICAgbGV0IHN0cmluZyA9IHRoaXMudGV4dFtpXSwgZW5kID0gb2Zmc2V0ICsgc3RyaW5nLmxlbmd0aDtcbiAgICAgICAgICAgIGlmICgoaXNMaW5lID8gbGluZSA6IGVuZCkgPj0gdGFyZ2V0KVxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgTGluZShvZmZzZXQsIGVuZCwgbGluZSwgc3RyaW5nKTtcbiAgICAgICAgICAgIG9mZnNldCA9IGVuZCArIDE7XG4gICAgICAgICAgICBsaW5lKys7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGVjb21wb3NlKGZyb20sIHRvLCB0YXJnZXQsIG9wZW4pIHtcbiAgICAgICAgbGV0IHRleHQgPSBmcm9tIDw9IDAgJiYgdG8gPj0gdGhpcy5sZW5ndGggPyB0aGlzXG4gICAgICAgICAgICA6IG5ldyBUZXh0TGVhZihzbGljZVRleHQodGhpcy50ZXh0LCBmcm9tLCB0byksIE1hdGgubWluKHRvLCB0aGlzLmxlbmd0aCkgLSBNYXRoLm1heCgwLCBmcm9tKSk7XG4gICAgICAgIGlmIChvcGVuICYgMSAvKiBPcGVuLkZyb20gKi8pIHtcbiAgICAgICAgICAgIGxldCBwcmV2ID0gdGFyZ2V0LnBvcCgpO1xuICAgICAgICAgICAgbGV0IGpvaW5lZCA9IGFwcGVuZFRleHQodGV4dC50ZXh0LCBwcmV2LnRleHQuc2xpY2UoKSwgMCwgdGV4dC5sZW5ndGgpO1xuICAgICAgICAgICAgaWYgKGpvaW5lZC5sZW5ndGggPD0gMzIgLyogVHJlZS5CcmFuY2ggKi8pIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQucHVzaChuZXcgVGV4dExlYWYoam9pbmVkLCBwcmV2Lmxlbmd0aCArIHRleHQubGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgbWlkID0gam9pbmVkLmxlbmd0aCA+PiAxO1xuICAgICAgICAgICAgICAgIHRhcmdldC5wdXNoKG5ldyBUZXh0TGVhZihqb2luZWQuc2xpY2UoMCwgbWlkKSksIG5ldyBUZXh0TGVhZihqb2luZWQuc2xpY2UobWlkKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0LnB1c2godGV4dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVwbGFjZShmcm9tLCB0bywgdGV4dCkge1xuICAgICAgICBpZiAoISh0ZXh0IGluc3RhbmNlb2YgVGV4dExlYWYpKVxuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLnJlcGxhY2UoZnJvbSwgdG8sIHRleHQpO1xuICAgICAgICBbZnJvbSwgdG9dID0gY2xpcCh0aGlzLCBmcm9tLCB0byk7XG4gICAgICAgIGxldCBsaW5lcyA9IGFwcGVuZFRleHQodGhpcy50ZXh0LCBhcHBlbmRUZXh0KHRleHQudGV4dCwgc2xpY2VUZXh0KHRoaXMudGV4dCwgMCwgZnJvbSkpLCB0byk7XG4gICAgICAgIGxldCBuZXdMZW4gPSB0aGlzLmxlbmd0aCArIHRleHQubGVuZ3RoIC0gKHRvIC0gZnJvbSk7XG4gICAgICAgIGlmIChsaW5lcy5sZW5ndGggPD0gMzIgLyogVHJlZS5CcmFuY2ggKi8pXG4gICAgICAgICAgICByZXR1cm4gbmV3IFRleHRMZWFmKGxpbmVzLCBuZXdMZW4pO1xuICAgICAgICByZXR1cm4gVGV4dE5vZGUuZnJvbShUZXh0TGVhZi5zcGxpdChsaW5lcywgW10pLCBuZXdMZW4pO1xuICAgIH1cbiAgICBzbGljZVN0cmluZyhmcm9tLCB0byA9IHRoaXMubGVuZ3RoLCBsaW5lU2VwID0gXCJcXG5cIikge1xuICAgICAgICBbZnJvbSwgdG9dID0gY2xpcCh0aGlzLCBmcm9tLCB0byk7XG4gICAgICAgIGxldCByZXN1bHQgPSBcIlwiO1xuICAgICAgICBmb3IgKGxldCBwb3MgPSAwLCBpID0gMDsgcG9zIDw9IHRvICYmIGkgPCB0aGlzLnRleHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBsaW5lID0gdGhpcy50ZXh0W2ldLCBlbmQgPSBwb3MgKyBsaW5lLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChwb3MgPiBmcm9tICYmIGkpXG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IGxpbmVTZXA7XG4gICAgICAgICAgICBpZiAoZnJvbSA8IGVuZCAmJiB0byA+IHBvcylcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gbGluZS5zbGljZShNYXRoLm1heCgwLCBmcm9tIC0gcG9zKSwgdG8gLSBwb3MpO1xuICAgICAgICAgICAgcG9zID0gZW5kICsgMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBmbGF0dGVuKHRhcmdldCkge1xuICAgICAgICBmb3IgKGxldCBsaW5lIG9mIHRoaXMudGV4dClcbiAgICAgICAgICAgIHRhcmdldC5wdXNoKGxpbmUpO1xuICAgIH1cbiAgICBzY2FuSWRlbnRpY2FsKCkgeyByZXR1cm4gMDsgfVxuICAgIHN0YXRpYyBzcGxpdCh0ZXh0LCB0YXJnZXQpIHtcbiAgICAgICAgbGV0IHBhcnQgPSBbXSwgbGVuID0gLTE7XG4gICAgICAgIGZvciAobGV0IGxpbmUgb2YgdGV4dCkge1xuICAgICAgICAgICAgcGFydC5wdXNoKGxpbmUpO1xuICAgICAgICAgICAgbGVuICs9IGxpbmUubGVuZ3RoICsgMTtcbiAgICAgICAgICAgIGlmIChwYXJ0Lmxlbmd0aCA9PSAzMiAvKiBUcmVlLkJyYW5jaCAqLykge1xuICAgICAgICAgICAgICAgIHRhcmdldC5wdXNoKG5ldyBUZXh0TGVhZihwYXJ0LCBsZW4pKTtcbiAgICAgICAgICAgICAgICBwYXJ0ID0gW107XG4gICAgICAgICAgICAgICAgbGVuID0gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxlbiA+IC0xKVxuICAgICAgICAgICAgdGFyZ2V0LnB1c2gobmV3IFRleHRMZWFmKHBhcnQsIGxlbikpO1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cbn1cbi8vIE5vZGVzIHByb3ZpZGUgdGhlIHRyZWUgc3RydWN0dXJlIG9mIHRoZSBgVGV4dGAgdHlwZS4gVGhleSBzdG9yZSBhXG4vLyBudW1iZXIgb2Ygb3RoZXIgbm9kZXMgb3IgbGVhdmVzLCB0YWtpbmcgY2FyZSB0byBiYWxhbmNlIHRoZW1zZWx2ZXNcbi8vIG9uIGNoYW5nZXMuIFRoZXJlIGFyZSBpbXBsaWVkIGxpbmUgYnJlYWtzIF9iZXR3ZWVuXyB0aGUgY2hpbGRyZW4gb2Zcbi8vIGEgbm9kZSAoYnV0IG5vdCBiZWZvcmUgdGhlIGZpcnN0IG9yIGFmdGVyIHRoZSBsYXN0IGNoaWxkKS5cbmNsYXNzIFRleHROb2RlIGV4dGVuZHMgVGV4dCB7XG4gICAgY29uc3RydWN0b3IoY2hpbGRyZW4sIGxlbmd0aCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoO1xuICAgICAgICB0aGlzLmxpbmVzID0gMDtcbiAgICAgICAgZm9yIChsZXQgY2hpbGQgb2YgY2hpbGRyZW4pXG4gICAgICAgICAgICB0aGlzLmxpbmVzICs9IGNoaWxkLmxpbmVzO1xuICAgIH1cbiAgICBsaW5lSW5uZXIodGFyZ2V0LCBpc0xpbmUsIGxpbmUsIG9mZnNldCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDs7IGkrKykge1xuICAgICAgICAgICAgbGV0IGNoaWxkID0gdGhpcy5jaGlsZHJlbltpXSwgZW5kID0gb2Zmc2V0ICsgY2hpbGQubGVuZ3RoLCBlbmRMaW5lID0gbGluZSArIGNoaWxkLmxpbmVzIC0gMTtcbiAgICAgICAgICAgIGlmICgoaXNMaW5lID8gZW5kTGluZSA6IGVuZCkgPj0gdGFyZ2V0KVxuICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZC5saW5lSW5uZXIodGFyZ2V0LCBpc0xpbmUsIGxpbmUsIG9mZnNldCk7XG4gICAgICAgICAgICBvZmZzZXQgPSBlbmQgKyAxO1xuICAgICAgICAgICAgbGluZSA9IGVuZExpbmUgKyAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRlY29tcG9zZShmcm9tLCB0bywgdGFyZ2V0LCBvcGVuKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBwb3MgPSAwOyBwb3MgPD0gdG8gJiYgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBjaGlsZCA9IHRoaXMuY2hpbGRyZW5baV0sIGVuZCA9IHBvcyArIGNoaWxkLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChmcm9tIDw9IGVuZCAmJiB0byA+PSBwb3MpIHtcbiAgICAgICAgICAgICAgICBsZXQgY2hpbGRPcGVuID0gb3BlbiAmICgocG9zIDw9IGZyb20gPyAxIC8qIE9wZW4uRnJvbSAqLyA6IDApIHwgKGVuZCA+PSB0byA/IDIgLyogT3Blbi5UbyAqLyA6IDApKTtcbiAgICAgICAgICAgICAgICBpZiAocG9zID49IGZyb20gJiYgZW5kIDw9IHRvICYmICFjaGlsZE9wZW4pXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5wdXNoKGNoaWxkKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkLmRlY29tcG9zZShmcm9tIC0gcG9zLCB0byAtIHBvcywgdGFyZ2V0LCBjaGlsZE9wZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcG9zID0gZW5kICsgMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXBsYWNlKGZyb20sIHRvLCB0ZXh0KSB7XG4gICAgICAgIFtmcm9tLCB0b10gPSBjbGlwKHRoaXMsIGZyb20sIHRvKTtcbiAgICAgICAgaWYgKHRleHQubGluZXMgPCB0aGlzLmxpbmVzKVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIHBvcyA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNoaWxkID0gdGhpcy5jaGlsZHJlbltpXSwgZW5kID0gcG9zICsgY2hpbGQubGVuZ3RoO1xuICAgICAgICAgICAgICAgIC8vIEZhc3QgcGF0aDogaWYgdGhlIGNoYW5nZSBvbmx5IGFmZmVjdHMgb25lIGNoaWxkIGFuZCB0aGVcbiAgICAgICAgICAgICAgICAvLyBjaGlsZCdzIHNpemUgcmVtYWlucyBpbiB0aGUgYWNjZXB0YWJsZSByYW5nZSwgb25seSB1cGRhdGVcbiAgICAgICAgICAgICAgICAvLyB0aGF0IGNoaWxkXG4gICAgICAgICAgICAgICAgaWYgKGZyb20gPj0gcG9zICYmIHRvIDw9IGVuZCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdXBkYXRlZCA9IGNoaWxkLnJlcGxhY2UoZnJvbSAtIHBvcywgdG8gLSBwb3MsIHRleHQpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdG90YWxMaW5lcyA9IHRoaXMubGluZXMgLSBjaGlsZC5saW5lcyArIHVwZGF0ZWQubGluZXM7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1cGRhdGVkLmxpbmVzIDwgKHRvdGFsTGluZXMgPj4gKDUgLyogVHJlZS5CcmFuY2hTaGlmdCAqLyAtIDEpKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZC5saW5lcyA+ICh0b3RhbExpbmVzID4+ICg1IC8qIFRyZWUuQnJhbmNoU2hpZnQgKi8gKyAxKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb3B5ID0gdGhpcy5jaGlsZHJlbi5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29weVtpXSA9IHVwZGF0ZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFRleHROb2RlKGNvcHksIHRoaXMubGVuZ3RoIC0gKHRvIC0gZnJvbSkgKyB0ZXh0Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN1cGVyLnJlcGxhY2UocG9zLCBlbmQsIHVwZGF0ZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwb3MgPSBlbmQgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIucmVwbGFjZShmcm9tLCB0bywgdGV4dCk7XG4gICAgfVxuICAgIHNsaWNlU3RyaW5nKGZyb20sIHRvID0gdGhpcy5sZW5ndGgsIGxpbmVTZXAgPSBcIlxcblwiKSB7XG4gICAgICAgIFtmcm9tLCB0b10gPSBjbGlwKHRoaXMsIGZyb20sIHRvKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFwiXCI7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBwb3MgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGggJiYgcG9zIDw9IHRvOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBjaGlsZCA9IHRoaXMuY2hpbGRyZW5baV0sIGVuZCA9IHBvcyArIGNoaWxkLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChwb3MgPiBmcm9tICYmIGkpXG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IGxpbmVTZXA7XG4gICAgICAgICAgICBpZiAoZnJvbSA8IGVuZCAmJiB0byA+IHBvcylcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gY2hpbGQuc2xpY2VTdHJpbmcoZnJvbSAtIHBvcywgdG8gLSBwb3MsIGxpbmVTZXApO1xuICAgICAgICAgICAgcG9zID0gZW5kICsgMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBmbGF0dGVuKHRhcmdldCkge1xuICAgICAgICBmb3IgKGxldCBjaGlsZCBvZiB0aGlzLmNoaWxkcmVuKVxuICAgICAgICAgICAgY2hpbGQuZmxhdHRlbih0YXJnZXQpO1xuICAgIH1cbiAgICBzY2FuSWRlbnRpY2FsKG90aGVyLCBkaXIpIHtcbiAgICAgICAgaWYgKCEob3RoZXIgaW5zdGFuY2VvZiBUZXh0Tm9kZSkpXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgbGV0IGxlbmd0aCA9IDA7XG4gICAgICAgIGxldCBbaUEsIGlCLCBlQSwgZUJdID0gZGlyID4gMCA/IFswLCAwLCB0aGlzLmNoaWxkcmVuLmxlbmd0aCwgb3RoZXIuY2hpbGRyZW4ubGVuZ3RoXVxuICAgICAgICAgICAgOiBbdGhpcy5jaGlsZHJlbi5sZW5ndGggLSAxLCBvdGhlci5jaGlsZHJlbi5sZW5ndGggLSAxLCAtMSwgLTFdO1xuICAgICAgICBmb3IgKDs7IGlBICs9IGRpciwgaUIgKz0gZGlyKSB7XG4gICAgICAgICAgICBpZiAoaUEgPT0gZUEgfHwgaUIgPT0gZUIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICAgICAgICAgIGxldCBjaEEgPSB0aGlzLmNoaWxkcmVuW2lBXSwgY2hCID0gb3RoZXIuY2hpbGRyZW5baUJdO1xuICAgICAgICAgICAgaWYgKGNoQSAhPSBjaEIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxlbmd0aCArIGNoQS5zY2FuSWRlbnRpY2FsKGNoQiwgZGlyKTtcbiAgICAgICAgICAgIGxlbmd0aCArPSBjaEEubGVuZ3RoICsgMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgZnJvbShjaGlsZHJlbiwgbGVuZ3RoID0gY2hpbGRyZW4ucmVkdWNlKChsLCBjaCkgPT4gbCArIGNoLmxlbmd0aCArIDEsIC0xKSkge1xuICAgICAgICBsZXQgbGluZXMgPSAwO1xuICAgICAgICBmb3IgKGxldCBjaCBvZiBjaGlsZHJlbilcbiAgICAgICAgICAgIGxpbmVzICs9IGNoLmxpbmVzO1xuICAgICAgICBpZiAobGluZXMgPCAzMiAvKiBUcmVlLkJyYW5jaCAqLykge1xuICAgICAgICAgICAgbGV0IGZsYXQgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGNoIG9mIGNoaWxkcmVuKVxuICAgICAgICAgICAgICAgIGNoLmZsYXR0ZW4oZmxhdCk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFRleHRMZWFmKGZsYXQsIGxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNodW5rID0gTWF0aC5tYXgoMzIgLyogVHJlZS5CcmFuY2ggKi8sIGxpbmVzID4+IDUgLyogVHJlZS5CcmFuY2hTaGlmdCAqLyksIG1heENodW5rID0gY2h1bmsgPDwgMSwgbWluQ2h1bmsgPSBjaHVuayA+PiAxO1xuICAgICAgICBsZXQgY2h1bmtlZCA9IFtdLCBjdXJyZW50TGluZXMgPSAwLCBjdXJyZW50TGVuID0gLTEsIGN1cnJlbnRDaHVuayA9IFtdO1xuICAgICAgICBmdW5jdGlvbiBhZGQoY2hpbGQpIHtcbiAgICAgICAgICAgIGxldCBsYXN0O1xuICAgICAgICAgICAgaWYgKGNoaWxkLmxpbmVzID4gbWF4Q2h1bmsgJiYgY2hpbGQgaW5zdGFuY2VvZiBUZXh0Tm9kZSkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IG5vZGUgb2YgY2hpbGQuY2hpbGRyZW4pXG4gICAgICAgICAgICAgICAgICAgIGFkZChub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoaWxkLmxpbmVzID4gbWluQ2h1bmsgJiYgKGN1cnJlbnRMaW5lcyA+IG1pbkNodW5rIHx8ICFjdXJyZW50TGluZXMpKSB7XG4gICAgICAgICAgICAgICAgZmx1c2goKTtcbiAgICAgICAgICAgICAgICBjaHVua2VkLnB1c2goY2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hpbGQgaW5zdGFuY2VvZiBUZXh0TGVhZiAmJiBjdXJyZW50TGluZXMgJiZcbiAgICAgICAgICAgICAgICAobGFzdCA9IGN1cnJlbnRDaHVua1tjdXJyZW50Q2h1bmsubGVuZ3RoIC0gMV0pIGluc3RhbmNlb2YgVGV4dExlYWYgJiZcbiAgICAgICAgICAgICAgICBjaGlsZC5saW5lcyArIGxhc3QubGluZXMgPD0gMzIgLyogVHJlZS5CcmFuY2ggKi8pIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50TGluZXMgKz0gY2hpbGQubGluZXM7XG4gICAgICAgICAgICAgICAgY3VycmVudExlbiArPSBjaGlsZC5sZW5ndGggKyAxO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRDaHVua1tjdXJyZW50Q2h1bmsubGVuZ3RoIC0gMV0gPSBuZXcgVGV4dExlYWYobGFzdC50ZXh0LmNvbmNhdChjaGlsZC50ZXh0KSwgbGFzdC5sZW5ndGggKyAxICsgY2hpbGQubGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50TGluZXMgKyBjaGlsZC5saW5lcyA+IGNodW5rKVxuICAgICAgICAgICAgICAgICAgICBmbHVzaCgpO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRMaW5lcyArPSBjaGlsZC5saW5lcztcbiAgICAgICAgICAgICAgICBjdXJyZW50TGVuICs9IGNoaWxkLmxlbmd0aCArIDE7XG4gICAgICAgICAgICAgICAgY3VycmVudENodW5rLnB1c2goY2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRMaW5lcyA9PSAwKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNodW5rZWQucHVzaChjdXJyZW50Q2h1bmsubGVuZ3RoID09IDEgPyBjdXJyZW50Q2h1bmtbMF0gOiBUZXh0Tm9kZS5mcm9tKGN1cnJlbnRDaHVuaywgY3VycmVudExlbikpO1xuICAgICAgICAgICAgY3VycmVudExlbiA9IC0xO1xuICAgICAgICAgICAgY3VycmVudExpbmVzID0gY3VycmVudENodW5rLmxlbmd0aCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgY2hpbGQgb2YgY2hpbGRyZW4pXG4gICAgICAgICAgICBhZGQoY2hpbGQpO1xuICAgICAgICBmbHVzaCgpO1xuICAgICAgICByZXR1cm4gY2h1bmtlZC5sZW5ndGggPT0gMSA/IGNodW5rZWRbMF0gOiBuZXcgVGV4dE5vZGUoY2h1bmtlZCwgbGVuZ3RoKTtcbiAgICB9XG59XG5UZXh0LmVtcHR5ID0gbmV3IFRleHRMZWFmKFtcIlwiXSwgMCk7XG5mdW5jdGlvbiB0ZXh0TGVuZ3RoKHRleHQpIHtcbiAgICBsZXQgbGVuZ3RoID0gLTE7XG4gICAgZm9yIChsZXQgbGluZSBvZiB0ZXh0KVxuICAgICAgICBsZW5ndGggKz0gbGluZS5sZW5ndGggKyAxO1xuICAgIHJldHVybiBsZW5ndGg7XG59XG5mdW5jdGlvbiBhcHBlbmRUZXh0KHRleHQsIHRhcmdldCwgZnJvbSA9IDAsIHRvID0gMWU5KSB7XG4gICAgZm9yIChsZXQgcG9zID0gMCwgaSA9IDAsIGZpcnN0ID0gdHJ1ZTsgaSA8IHRleHQubGVuZ3RoICYmIHBvcyA8PSB0bzsgaSsrKSB7XG4gICAgICAgIGxldCBsaW5lID0gdGV4dFtpXSwgZW5kID0gcG9zICsgbGluZS5sZW5ndGg7XG4gICAgICAgIGlmIChlbmQgPj0gZnJvbSkge1xuICAgICAgICAgICAgaWYgKGVuZCA+IHRvKVxuICAgICAgICAgICAgICAgIGxpbmUgPSBsaW5lLnNsaWNlKDAsIHRvIC0gcG9zKTtcbiAgICAgICAgICAgIGlmIChwb3MgPCBmcm9tKVxuICAgICAgICAgICAgICAgIGxpbmUgPSBsaW5lLnNsaWNlKGZyb20gLSBwb3MpO1xuICAgICAgICAgICAgaWYgKGZpcnN0KSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W3RhcmdldC5sZW5ndGggLSAxXSArPSBsaW5lO1xuICAgICAgICAgICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGFyZ2V0LnB1c2gobGluZSk7XG4gICAgICAgIH1cbiAgICAgICAgcG9zID0gZW5kICsgMTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbmZ1bmN0aW9uIHNsaWNlVGV4dCh0ZXh0LCBmcm9tLCB0bykge1xuICAgIHJldHVybiBhcHBlbmRUZXh0KHRleHQsIFtcIlwiXSwgZnJvbSwgdG8pO1xufVxuY2xhc3MgUmF3VGV4dEN1cnNvciB7XG4gICAgY29uc3RydWN0b3IodGV4dCwgZGlyID0gMSkge1xuICAgICAgICB0aGlzLmRpciA9IGRpcjtcbiAgICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICAgIHRoaXMubGluZUJyZWFrID0gZmFsc2U7XG4gICAgICAgIHRoaXMudmFsdWUgPSBcIlwiO1xuICAgICAgICB0aGlzLm5vZGVzID0gW3RleHRdO1xuICAgICAgICB0aGlzLm9mZnNldHMgPSBbZGlyID4gMCA/IDEgOiAodGV4dCBpbnN0YW5jZW9mIFRleHRMZWFmID8gdGV4dC50ZXh0Lmxlbmd0aCA6IHRleHQuY2hpbGRyZW4ubGVuZ3RoKSA8PCAxXTtcbiAgICB9XG4gICAgbmV4dElubmVyKHNraXAsIGRpcikge1xuICAgICAgICB0aGlzLmRvbmUgPSB0aGlzLmxpbmVCcmVhayA9IGZhbHNlO1xuICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICBsZXQgbGFzdCA9IHRoaXMubm9kZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIGxldCB0b3AgPSB0aGlzLm5vZGVzW2xhc3RdLCBvZmZzZXRWYWx1ZSA9IHRoaXMub2Zmc2V0c1tsYXN0XSwgb2Zmc2V0ID0gb2Zmc2V0VmFsdWUgPj4gMTtcbiAgICAgICAgICAgIGxldCBzaXplID0gdG9wIGluc3RhbmNlb2YgVGV4dExlYWYgPyB0b3AudGV4dC5sZW5ndGggOiB0b3AuY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA9PSAoZGlyID4gMCA/IHNpemUgOiAwKSkge1xuICAgICAgICAgICAgICAgIGlmIChsYXN0ID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZGlyID4gMClcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vZmZzZXRzW2xhc3QgLSAxXSsrO1xuICAgICAgICAgICAgICAgIHRoaXMubm9kZXMucG9wKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5vZmZzZXRzLnBvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoKG9mZnNldFZhbHVlICYgMSkgPT0gKGRpciA+IDAgPyAwIDogMSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9mZnNldHNbbGFzdF0gKz0gZGlyO1xuICAgICAgICAgICAgICAgIGlmIChza2lwID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saW5lQnJlYWsgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gXCJcXG5cIjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNraXAtLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRvcCBpbnN0YW5jZW9mIFRleHRMZWFmKSB7XG4gICAgICAgICAgICAgICAgLy8gTW92ZSB0byB0aGUgbmV4dCBzdHJpbmdcbiAgICAgICAgICAgICAgICBsZXQgbmV4dCA9IHRvcC50ZXh0W29mZnNldCArIChkaXIgPCAwID8gLTEgOiAwKV07XG4gICAgICAgICAgICAgICAgdGhpcy5vZmZzZXRzW2xhc3RdICs9IGRpcjtcbiAgICAgICAgICAgICAgICBpZiAobmV4dC5sZW5ndGggPiBNYXRoLm1heCgwLCBza2lwKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gc2tpcCA9PSAwID8gbmV4dCA6IGRpciA+IDAgPyBuZXh0LnNsaWNlKHNraXApIDogbmV4dC5zbGljZSgwLCBuZXh0Lmxlbmd0aCAtIHNraXApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2tpcCAtPSBuZXh0Lmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBuZXh0ID0gdG9wLmNoaWxkcmVuW29mZnNldCArIChkaXIgPCAwID8gLTEgOiAwKV07XG4gICAgICAgICAgICAgICAgaWYgKHNraXAgPiBuZXh0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBza2lwIC09IG5leHQubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9mZnNldHNbbGFzdF0gKz0gZGlyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpciA8IDApXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9mZnNldHNbbGFzdF0tLTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub2Rlcy5wdXNoKG5leHQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9mZnNldHMucHVzaChkaXIgPiAwID8gMSA6IChuZXh0IGluc3RhbmNlb2YgVGV4dExlYWYgPyBuZXh0LnRleHQubGVuZ3RoIDogbmV4dC5jaGlsZHJlbi5sZW5ndGgpIDw8IDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBuZXh0KHNraXAgPSAwKSB7XG4gICAgICAgIGlmIChza2lwIDwgMCkge1xuICAgICAgICAgICAgdGhpcy5uZXh0SW5uZXIoLXNraXAsICgtdGhpcy5kaXIpKTtcbiAgICAgICAgICAgIHNraXAgPSB0aGlzLnZhbHVlLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5uZXh0SW5uZXIoc2tpcCwgdGhpcy5kaXIpO1xuICAgIH1cbn1cbmNsYXNzIFBhcnRpYWxUZXh0Q3Vyc29yIHtcbiAgICBjb25zdHJ1Y3Rvcih0ZXh0LCBzdGFydCwgZW5kKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSBcIlwiO1xuICAgICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jdXJzb3IgPSBuZXcgUmF3VGV4dEN1cnNvcih0ZXh0LCBzdGFydCA+IGVuZCA/IC0xIDogMSk7XG4gICAgICAgIHRoaXMucG9zID0gc3RhcnQgPiBlbmQgPyB0ZXh0Lmxlbmd0aCA6IDA7XG4gICAgICAgIHRoaXMuZnJvbSA9IE1hdGgubWluKHN0YXJ0LCBlbmQpO1xuICAgICAgICB0aGlzLnRvID0gTWF0aC5tYXgoc3RhcnQsIGVuZCk7XG4gICAgfVxuICAgIG5leHRJbm5lcihza2lwLCBkaXIpIHtcbiAgICAgICAgaWYgKGRpciA8IDAgPyB0aGlzLnBvcyA8PSB0aGlzLmZyb20gOiB0aGlzLnBvcyA+PSB0aGlzLnRvKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gXCJcIjtcbiAgICAgICAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBza2lwICs9IE1hdGgubWF4KDAsIGRpciA8IDAgPyB0aGlzLnBvcyAtIHRoaXMudG8gOiB0aGlzLmZyb20gLSB0aGlzLnBvcyk7XG4gICAgICAgIGxldCBsaW1pdCA9IGRpciA8IDAgPyB0aGlzLnBvcyAtIHRoaXMuZnJvbSA6IHRoaXMudG8gLSB0aGlzLnBvcztcbiAgICAgICAgaWYgKHNraXAgPiBsaW1pdClcbiAgICAgICAgICAgIHNraXAgPSBsaW1pdDtcbiAgICAgICAgbGltaXQgLT0gc2tpcDtcbiAgICAgICAgbGV0IHsgdmFsdWUgfSA9IHRoaXMuY3Vyc29yLm5leHQoc2tpcCk7XG4gICAgICAgIHRoaXMucG9zICs9ICh2YWx1ZS5sZW5ndGggKyBza2lwKSAqIGRpcjtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlLmxlbmd0aCA8PSBsaW1pdCA/IHZhbHVlIDogZGlyIDwgMCA/IHZhbHVlLnNsaWNlKHZhbHVlLmxlbmd0aCAtIGxpbWl0KSA6IHZhbHVlLnNsaWNlKDAsIGxpbWl0KTtcbiAgICAgICAgdGhpcy5kb25lID0gIXRoaXMudmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBuZXh0KHNraXAgPSAwKSB7XG4gICAgICAgIGlmIChza2lwIDwgMClcbiAgICAgICAgICAgIHNraXAgPSBNYXRoLm1heChza2lwLCB0aGlzLmZyb20gLSB0aGlzLnBvcyk7XG4gICAgICAgIGVsc2UgaWYgKHNraXAgPiAwKVxuICAgICAgICAgICAgc2tpcCA9IE1hdGgubWluKHNraXAsIHRoaXMudG8gLSB0aGlzLnBvcyk7XG4gICAgICAgIHJldHVybiB0aGlzLm5leHRJbm5lcihza2lwLCB0aGlzLmN1cnNvci5kaXIpO1xuICAgIH1cbiAgICBnZXQgbGluZUJyZWFrKCkgeyByZXR1cm4gdGhpcy5jdXJzb3IubGluZUJyZWFrICYmIHRoaXMudmFsdWUgIT0gXCJcIjsgfVxufVxuY2xhc3MgTGluZUN1cnNvciB7XG4gICAgY29uc3RydWN0b3IoaW5uZXIpIHtcbiAgICAgICAgdGhpcy5pbm5lciA9IGlubmVyO1xuICAgICAgICB0aGlzLmFmdGVyQnJlYWsgPSB0cnVlO1xuICAgICAgICB0aGlzLnZhbHVlID0gXCJcIjtcbiAgICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgfVxuICAgIG5leHQoc2tpcCA9IDApIHtcbiAgICAgICAgbGV0IHsgZG9uZSwgbGluZUJyZWFrLCB2YWx1ZSB9ID0gdGhpcy5pbm5lci5uZXh0KHNraXApO1xuICAgICAgICBpZiAoZG9uZSAmJiB0aGlzLmFmdGVyQnJlYWspIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBcIlwiO1xuICAgICAgICAgICAgdGhpcy5hZnRlckJyZWFrID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZG9uZSkge1xuICAgICAgICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGxpbmVCcmVhaykge1xuICAgICAgICAgICAgaWYgKHRoaXMuYWZ0ZXJCcmVhaykge1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZnRlckJyZWFrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuYWZ0ZXJCcmVhayA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBnZXQgbGluZUJyZWFrKCkgeyByZXR1cm4gZmFsc2U7IH1cbn1cbmlmICh0eXBlb2YgU3ltYm9sICE9IFwidW5kZWZpbmVkXCIpIHtcbiAgICBUZXh0LnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5pdGVyKCk7IH07XG4gICAgUmF3VGV4dEN1cnNvci5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IFBhcnRpYWxUZXh0Q3Vyc29yLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID1cbiAgICAgICAgTGluZUN1cnNvci5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG59XG4vKipcblRoaXMgdHlwZSBkZXNjcmliZXMgYSBsaW5lIGluIHRoZSBkb2N1bWVudC4gSXQgaXMgY3JlYXRlZFxub24tZGVtYW5kIHdoZW4gbGluZXMgYXJlIFtxdWVyaWVkXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLlRleHQubGluZUF0KS5cbiovXG5jbGFzcyBMaW5lIHtcbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgIFRoZSBwb3NpdGlvbiBvZiB0aGUgc3RhcnQgb2YgdGhlIGxpbmUuXG4gICAgKi9cbiAgICBmcm9tLCBcbiAgICAvKipcbiAgICBUaGUgcG9zaXRpb24gYXQgdGhlIGVuZCBvZiB0aGUgbGluZSAoX2JlZm9yZV8gdGhlIGxpbmUgYnJlYWssXG4gICAgb3IgYXQgdGhlIGVuZCBvZiBkb2N1bWVudCBmb3IgdGhlIGxhc3QgbGluZSkuXG4gICAgKi9cbiAgICB0bywgXG4gICAgLyoqXG4gICAgVGhpcyBsaW5lJ3MgbGluZSBudW1iZXIgKDEtYmFzZWQpLlxuICAgICovXG4gICAgbnVtYmVyLCBcbiAgICAvKipcbiAgICBUaGUgbGluZSdzIGNvbnRlbnQuXG4gICAgKi9cbiAgICB0ZXh0KSB7XG4gICAgICAgIHRoaXMuZnJvbSA9IGZyb207XG4gICAgICAgIHRoaXMudG8gPSB0bztcbiAgICAgICAgdGhpcy5udW1iZXIgPSBudW1iZXI7XG4gICAgICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgfVxuICAgIC8qKlxuICAgIFRoZSBsZW5ndGggb2YgdGhlIGxpbmUgKG5vdCBpbmNsdWRpbmcgYW55IGxpbmUgYnJlYWsgYWZ0ZXIgaXQpLlxuICAgICovXG4gICAgZ2V0IGxlbmd0aCgpIHsgcmV0dXJuIHRoaXMudG8gLSB0aGlzLmZyb207IH1cbn1cbmZ1bmN0aW9uIGNsaXAodGV4dCwgZnJvbSwgdG8pIHtcbiAgICBmcm9tID0gTWF0aC5tYXgoMCwgTWF0aC5taW4odGV4dC5sZW5ndGgsIGZyb20pKTtcbiAgICByZXR1cm4gW2Zyb20sIE1hdGgubWF4KGZyb20sIE1hdGgubWluKHRleHQubGVuZ3RoLCB0bykpXTtcbn1cblxuLy8gQ29tcHJlc3NlZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgR3JhcGhlbWVfQ2x1c3Rlcl9CcmVhaz1FeHRlbmRcbi8vIGluZm9ybWF0aW9uIGZyb21cbi8vIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvUHVibGljLzEzLjAuMC91Y2QvYXV4aWxpYXJ5L0dyYXBoZW1lQnJlYWtQcm9wZXJ0eS50eHQuXG4vLyBFYWNoIHBhaXIgb2YgZWxlbWVudHMgcmVwcmVzZW50cyBhIHJhbmdlLCBhcyBhbiBvZmZldCBmcm9tIHRoZVxuLy8gcHJldmlvdXMgcmFuZ2UgYW5kIGEgbGVuZ3RoLiBOdW1iZXJzIGFyZSBpbiBiYXNlLTM2LCB3aXRoIHRoZSBlbXB0eVxuLy8gc3RyaW5nIGJlaW5nIGEgc2hvcnRoYW5kIGZvciAxLlxubGV0IGV4dGVuZCA9IFwibGMsMzQsN24sNyw3YiwxOSwsLCwyLCwyLCwsMjAsYiwxYyxsLGcsLDJ0LDcsMiw2LDIsMiwsNCx6LCx1LHIsMmosYiwxbSw5LDksLG8sNCwsOSwsMywsNSwxNywzLDNiLGYsLHcsMWosLCwsNCw4LDQsLDMsNyxhLDIsdCwsMW0sLCwsMiw0LDgsLDksLGEsMixxLCwyLDIsMWwsLDQsMiw0LDIsMiwzLDMsLHUsMiwzLCxiLDIsMWwsLDQsNSwsMiw0LCxrLDIsbSw2LCwsMW0sLCwyLCw0LDgsLDcsMyxhLDIsdSwsMW4sLCwsYywsOSwsMTQsLDMsLDFsLDMsNSwzLCw0LDcsMixiLDIsdCwsMW0sLDIsLDIsLDMsLDUsMiw3LDIsYiwyLHMsMiwxbCwyLCwsMiw0LDgsLDksLGEsMix0LCwyMCwsNCwsMiwzLCwsOCwsMjksLDIsNyxjLDgsMnEsLDIsOSxiLDYsMjIsMixyLCwsLCwsMWosZSwsNSwsMiw1LGIsLDEwLDksLDJ1LDQsLDYsLDIsMiwyLHAsMiw0LDMsZyw0LGQsLDIsMiw2LCxmLCxqaiwzLHFhLDMsdCwzLHQsMix1LDIsMXMsMiwsNyw4LCwyLGIsOSwsMTksMywzYiwyLHksLDNhLDMsNCwyLDksLDYsMyw2MywyLDIsLDFtLCwsNywsLCwsMiw4LDYsYSwyLCwxYyxoLDFyLDQsMWMsNywsLDUsLDE0LDksYywyLHcsNCwyLDIsLDMsMWssLCwyLDMsLCwzLDFtLDgsMiwyLDQ4LDMsLGQsLDcsNCwsNiwsMywyLDVpLDFtLCw1LGVrLCw1Zix4LDJkYSwzLDN4LCwybyx3LGZlLDYsMngsMixuOXcsNCwsYSx3LDIsMjgsMiw3aywsMywsNCwscCwyLDUsLDQ3LDIscSxpLGQsLDEyLDgscCxiLDFhLDMsMWMsLDIsNCwyLDIsMTMsLDF2LDYsMiwyLDIsMixjLCw4LCwxYiwsMWYsLCwzLDIsMiw1LDIsLCwxNiwyLDgsLDZtLCwyLCw0LCxmbjQsLGtoLGcsZyxnLGE2LDIsZ3QsLDZhLCw0NSw1LDFhZSwzLCwyLDUsNCwxNCwzLDQsLDRsLDIsZngsNCxhciwyLDQ5LGIsNHcsLDFpLGYsMWssMywxZCw0LDIsMiwxeCwzLDEwLDUsLDgsMXEsLGMsMiwxZyw5LGEsNCwyLCwybiwzLDIsLCwyLDYsLDRnLCwzLDgsbCwyLDFsLDIsLCwsLG0sLGUsNywzLDUsNWYsOCwyLDMsLCxuLCwyOSwsMiw2LCwsMiwsLDIsLDIsNmosLDIsNCw2LDIsLDIsciwyLDJkLDgsMiwsLDIsMnksLCwsMiw2LCwsMnQsMywyLDQsLDUsNzcsOSwsMiw2dCwsYSwyLCwsNCwsNDAsNCwyLDIsNCwsdyxhLDE0LDYsMiw0LDgsLDksNiwyLDMsMWEsZCwsMixiYSw3LCw2LCwsMmEsbSwyLDcsLDIsLDIsM2UsNiwzLCwsMiwsNywsLDIwLDIsMywsLCw5biwyLGYwYiw1LDFuLDcsdDQsLDFyLDQsMjksLGY1aywyLDQzcSwsLDMsNCw1LDgsOCwyLDcsdSw0LDQ0LDMsMWl6LDFqLDQsMWUsOCwsZSwsbSw1LCxmLDExcyw3LCxoLDIsNywsMiwsNSw3OSw3LGM1LDQsMTVzLDcsMzEsNywyNDAsNSxneDdrLDJvLDNrLDZvXCIuc3BsaXQoXCIsXCIpLm1hcChzID0+IHMgPyBwYXJzZUludChzLCAzNikgOiAxKTtcbi8vIENvbnZlcnQgb2Zmc2V0cyBpbnRvIGFic29sdXRlIHZhbHVlc1xuZm9yIChsZXQgaSA9IDE7IGkgPCBleHRlbmQubGVuZ3RoOyBpKyspXG4gICAgZXh0ZW5kW2ldICs9IGV4dGVuZFtpIC0gMV07XG5mdW5jdGlvbiBpc0V4dGVuZGluZ0NoYXIoY29kZSkge1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgZXh0ZW5kLmxlbmd0aDsgaSArPSAyKVxuICAgICAgICBpZiAoZXh0ZW5kW2ldID4gY29kZSlcbiAgICAgICAgICAgIHJldHVybiBleHRlbmRbaSAtIDFdIDw9IGNvZGU7XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNSZWdpb25hbEluZGljYXRvcihjb2RlKSB7XG4gICAgcmV0dXJuIGNvZGUgPj0gMHgxRjFFNiAmJiBjb2RlIDw9IDB4MUYxRkY7XG59XG5jb25zdCBaV0ogPSAweDIwMGQ7XG4vKipcblJldHVybnMgYSBuZXh0IGdyYXBoZW1lIGNsdXN0ZXIgYnJlYWsgX2FmdGVyXyAobm90IGVxdWFsIHRvKVxuYHBvc2AsIGlmIGBmb3J3YXJkYCBpcyB0cnVlLCBvciBiZWZvcmUgb3RoZXJ3aXNlLiBSZXR1cm5zIGBwb3NgXG5pdHNlbGYgaWYgbm8gZnVydGhlciBjbHVzdGVyIGJyZWFrIGlzIGF2YWlsYWJsZSBpbiB0aGUgc3RyaW5nLlxuTW92ZXMgYWNyb3NzIHN1cnJvZ2F0ZSBwYWlycywgZXh0ZW5kaW5nIGNoYXJhY3RlcnMgKHdoZW5cbmBpbmNsdWRlRXh0ZW5kaW5nYCBpcyB0cnVlKSwgY2hhcmFjdGVycyBqb2luZWQgd2l0aCB6ZXJvLXdpZHRoXG5qb2luZXJzLCBhbmQgZmxhZyBlbW9qaS5cbiovXG5mdW5jdGlvbiBmaW5kQ2x1c3RlckJyZWFrKHN0ciwgcG9zLCBmb3J3YXJkID0gdHJ1ZSwgaW5jbHVkZUV4dGVuZGluZyA9IHRydWUpIHtcbiAgICByZXR1cm4gKGZvcndhcmQgPyBuZXh0Q2x1c3RlckJyZWFrIDogcHJldkNsdXN0ZXJCcmVhaykoc3RyLCBwb3MsIGluY2x1ZGVFeHRlbmRpbmcpO1xufVxuZnVuY3Rpb24gbmV4dENsdXN0ZXJCcmVhayhzdHIsIHBvcywgaW5jbHVkZUV4dGVuZGluZykge1xuICAgIGlmIChwb3MgPT0gc3RyLmxlbmd0aClcbiAgICAgICAgcmV0dXJuIHBvcztcbiAgICAvLyBJZiBwb3MgaXMgaW4gdGhlIG1pZGRsZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyLCBtb3ZlIHRvIGl0cyBzdGFydFxuICAgIGlmIChwb3MgJiYgc3Vycm9nYXRlTG93KHN0ci5jaGFyQ29kZUF0KHBvcykpICYmIHN1cnJvZ2F0ZUhpZ2goc3RyLmNoYXJDb2RlQXQocG9zIC0gMSkpKVxuICAgICAgICBwb3MtLTtcbiAgICBsZXQgcHJldiA9IGNvZGVQb2ludEF0KHN0ciwgcG9zKTtcbiAgICBwb3MgKz0gY29kZVBvaW50U2l6ZShwcmV2KTtcbiAgICB3aGlsZSAocG9zIDwgc3RyLmxlbmd0aCkge1xuICAgICAgICBsZXQgbmV4dCA9IGNvZGVQb2ludEF0KHN0ciwgcG9zKTtcbiAgICAgICAgaWYgKHByZXYgPT0gWldKIHx8IG5leHQgPT0gWldKIHx8IGluY2x1ZGVFeHRlbmRpbmcgJiYgaXNFeHRlbmRpbmdDaGFyKG5leHQpKSB7XG4gICAgICAgICAgICBwb3MgKz0gY29kZVBvaW50U2l6ZShuZXh0KTtcbiAgICAgICAgICAgIHByZXYgPSBuZXh0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUmVnaW9uYWxJbmRpY2F0b3IobmV4dCkpIHtcbiAgICAgICAgICAgIGxldCBjb3VudEJlZm9yZSA9IDAsIGkgPSBwb3MgLSAyO1xuICAgICAgICAgICAgd2hpbGUgKGkgPj0gMCAmJiBpc1JlZ2lvbmFsSW5kaWNhdG9yKGNvZGVQb2ludEF0KHN0ciwgaSkpKSB7XG4gICAgICAgICAgICAgICAgY291bnRCZWZvcmUrKztcbiAgICAgICAgICAgICAgICBpIC09IDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY291bnRCZWZvcmUgJSAyID09IDApXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcG9zICs9IDI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcG9zO1xufVxuZnVuY3Rpb24gcHJldkNsdXN0ZXJCcmVhayhzdHIsIHBvcywgaW5jbHVkZUV4dGVuZGluZykge1xuICAgIHdoaWxlIChwb3MgPiAwKSB7XG4gICAgICAgIGxldCBmb3VuZCA9IG5leHRDbHVzdGVyQnJlYWsoc3RyLCBwb3MgLSAyLCBpbmNsdWRlRXh0ZW5kaW5nKTtcbiAgICAgICAgaWYgKGZvdW5kIDwgcG9zKVxuICAgICAgICAgICAgcmV0dXJuIGZvdW5kO1xuICAgICAgICBwb3MtLTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG59XG5mdW5jdGlvbiBzdXJyb2dhdGVMb3coY2gpIHsgcmV0dXJuIGNoID49IDB4REMwMCAmJiBjaCA8IDB4RTAwMDsgfVxuZnVuY3Rpb24gc3Vycm9nYXRlSGlnaChjaCkgeyByZXR1cm4gY2ggPj0gMHhEODAwICYmIGNoIDwgMHhEQzAwOyB9XG4vKipcbkZpbmQgdGhlIGNvZGUgcG9pbnQgYXQgdGhlIGdpdmVuIHBvc2l0aW9uIGluIGEgc3RyaW5nIChsaWtlIHRoZVxuW2Bjb2RlUG9pbnRBdGBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9jb2RlUG9pbnRBdClcbnN0cmluZyBtZXRob2QpLlxuKi9cbmZ1bmN0aW9uIGNvZGVQb2ludEF0KHN0ciwgcG9zKSB7XG4gICAgbGV0IGNvZGUwID0gc3RyLmNoYXJDb2RlQXQocG9zKTtcbiAgICBpZiAoIXN1cnJvZ2F0ZUhpZ2goY29kZTApIHx8IHBvcyArIDEgPT0gc3RyLmxlbmd0aClcbiAgICAgICAgcmV0dXJuIGNvZGUwO1xuICAgIGxldCBjb2RlMSA9IHN0ci5jaGFyQ29kZUF0KHBvcyArIDEpO1xuICAgIGlmICghc3Vycm9nYXRlTG93KGNvZGUxKSlcbiAgICAgICAgcmV0dXJuIGNvZGUwO1xuICAgIHJldHVybiAoKGNvZGUwIC0gMHhkODAwKSA8PCAxMCkgKyAoY29kZTEgLSAweGRjMDApICsgMHgxMDAwMDtcbn1cbi8qKlxuR2l2ZW4gYSBVbmljb2RlIGNvZGVwb2ludCwgcmV0dXJuIHRoZSBKYXZhU2NyaXB0IHN0cmluZyB0aGF0XG5yZXNwcmVzZW50cyBpdCAobGlrZVxuW2BTdHJpbmcuZnJvbUNvZGVQb2ludGBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9mcm9tQ29kZVBvaW50KSkuXG4qL1xuZnVuY3Rpb24gZnJvbUNvZGVQb2ludChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPD0gMHhmZmZmKVxuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcbiAgICBjb2RlIC09IDB4MTAwMDA7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoKGNvZGUgPj4gMTApICsgMHhkODAwLCAoY29kZSAmIDEwMjMpICsgMHhkYzAwKTtcbn1cbi8qKlxuVGhlIGFtb3VudCBvZiBwb3NpdGlvbnMgYSBjaGFyYWN0ZXIgdGFrZXMgdXAgYSBKYXZhU2NyaXB0IHN0cmluZy5cbiovXG5mdW5jdGlvbiBjb2RlUG9pbnRTaXplKGNvZGUpIHsgcmV0dXJuIGNvZGUgPCAweDEwMDAwID8gMSA6IDI7IH1cblxuY29uc3QgRGVmYXVsdFNwbGl0ID0gL1xcclxcbj98XFxuLztcbi8qKlxuRGlzdGluZ3Vpc2hlcyBkaWZmZXJlbnQgd2F5cyBpbiB3aGljaCBwb3NpdGlvbnMgY2FuIGJlIG1hcHBlZC5cbiovXG5leHBvcnRzLk1hcE1vZGUgPSB2b2lkIDA7XG4oZnVuY3Rpb24gKE1hcE1vZGUpIHtcbiAgICAvKipcbiAgICBNYXAgYSBwb3NpdGlvbiB0byBhIHZhbGlkIG5ldyBwb3NpdGlvbiwgZXZlbiB3aGVuIGl0cyBjb250ZXh0XG4gICAgd2FzIGRlbGV0ZWQuXG4gICAgKi9cbiAgICBNYXBNb2RlW01hcE1vZGVbXCJTaW1wbGVcIl0gPSAwXSA9IFwiU2ltcGxlXCI7XG4gICAgLyoqXG4gICAgUmV0dXJuIG51bGwgaWYgZGVsZXRpb24gaGFwcGVucyBhY3Jvc3MgdGhlIHBvc2l0aW9uLlxuICAgICovXG4gICAgTWFwTW9kZVtNYXBNb2RlW1wiVHJhY2tEZWxcIl0gPSAxXSA9IFwiVHJhY2tEZWxcIjtcbiAgICAvKipcbiAgICBSZXR1cm4gbnVsbCBpZiB0aGUgY2hhcmFjdGVyIF9iZWZvcmVfIHRoZSBwb3NpdGlvbiBpcyBkZWxldGVkLlxuICAgICovXG4gICAgTWFwTW9kZVtNYXBNb2RlW1wiVHJhY2tCZWZvcmVcIl0gPSAyXSA9IFwiVHJhY2tCZWZvcmVcIjtcbiAgICAvKipcbiAgICBSZXR1cm4gbnVsbCBpZiB0aGUgY2hhcmFjdGVyIF9hZnRlcl8gdGhlIHBvc2l0aW9uIGlzIGRlbGV0ZWQuXG4gICAgKi9cbiAgICBNYXBNb2RlW01hcE1vZGVbXCJUcmFja0FmdGVyXCJdID0gM10gPSBcIlRyYWNrQWZ0ZXJcIjtcbn0pKGV4cG9ydHMuTWFwTW9kZSB8fCAoZXhwb3J0cy5NYXBNb2RlID0ge30pKTtcbi8qKlxuQSBjaGFuZ2UgZGVzY3JpcHRpb24gaXMgYSB2YXJpYW50IG9mIFtjaGFuZ2Ugc2V0XShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLkNoYW5nZVNldClcbnRoYXQgZG9lc24ndCBzdG9yZSB0aGUgaW5zZXJ0ZWQgdGV4dC4gQXMgc3VjaCwgaXQgY2FuJ3QgYmVcbmFwcGxpZWQsIGJ1dCBpcyBjaGVhcGVyIHRvIHN0b3JlIGFuZCBtYW5pcHVsYXRlLlxuKi9cbmNsYXNzIENoYW5nZURlc2Mge1xuICAgIC8vIFNlY3Rpb25zIGFyZSBlbmNvZGVkIGFzIHBhaXJzIG9mIGludGVnZXJzLiBUaGUgZmlyc3QgaXMgdGhlXG4gICAgLy8gbGVuZ3RoIGluIHRoZSBjdXJyZW50IGRvY3VtZW50LCBhbmQgdGhlIHNlY29uZCBpcyAtMSBmb3JcbiAgICAvLyB1bmFmZmVjdGVkIHNlY3Rpb25zLCBhbmQgdGhlIGxlbmd0aCBvZiB0aGUgcmVwbGFjZW1lbnQgY29udGVudFxuICAgIC8vIG90aGVyd2lzZS4gU28gYW4gaW5zZXJ0aW9uIHdvdWxkIGJlICgwLCBuPjApLCBhIGRlbGV0aW9uIChuPjAsXG4gICAgLy8gMCksIGFuZCBhIHJlcGxhY2VtZW50IHR3byBwb3NpdGl2ZSBudW1iZXJzLlxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBzZWN0aW9ucykge1xuICAgICAgICB0aGlzLnNlY3Rpb25zID0gc2VjdGlvbnM7XG4gICAgfVxuICAgIC8qKlxuICAgIFRoZSBsZW5ndGggb2YgdGhlIGRvY3VtZW50IGJlZm9yZSB0aGUgY2hhbmdlLlxuICAgICovXG4gICAgZ2V0IGxlbmd0aCgpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zZWN0aW9ucy5sZW5ndGg7IGkgKz0gMilcbiAgICAgICAgICAgIHJlc3VsdCArPSB0aGlzLnNlY3Rpb25zW2ldO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICBUaGUgbGVuZ3RoIG9mIHRoZSBkb2N1bWVudCBhZnRlciB0aGUgY2hhbmdlLlxuICAgICovXG4gICAgZ2V0IG5ld0xlbmd0aCgpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zZWN0aW9ucy5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICAgICAgbGV0IGlucyA9IHRoaXMuc2VjdGlvbnNbaSArIDFdO1xuICAgICAgICAgICAgcmVzdWx0ICs9IGlucyA8IDAgPyB0aGlzLnNlY3Rpb25zW2ldIDogaW5zO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgIEZhbHNlIHdoZW4gdGhlcmUgYXJlIGFjdHVhbCBjaGFuZ2VzIGluIHRoaXMgc2V0LlxuICAgICovXG4gICAgZ2V0IGVtcHR5KCkgeyByZXR1cm4gdGhpcy5zZWN0aW9ucy5sZW5ndGggPT0gMCB8fCB0aGlzLnNlY3Rpb25zLmxlbmd0aCA9PSAyICYmIHRoaXMuc2VjdGlvbnNbMV0gPCAwOyB9XG4gICAgLyoqXG4gICAgSXRlcmF0ZSBvdmVyIHRoZSB1bmNoYW5nZWQgcGFydHMgbGVmdCBieSB0aGVzZSBjaGFuZ2VzLiBgcG9zQWBcbiAgICBwcm92aWRlcyB0aGUgcG9zaXRpb24gb2YgdGhlIHJhbmdlIGluIHRoZSBvbGQgZG9jdW1lbnQsIGBwb3NCYFxuICAgIHRoZSBuZXcgcG9zaXRpb24gaW4gdGhlIGNoYW5nZWQgZG9jdW1lbnQuXG4gICAgKi9cbiAgICBpdGVyR2FwcyhmKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBwb3NBID0gMCwgcG9zQiA9IDA7IGkgPCB0aGlzLnNlY3Rpb25zLmxlbmd0aDspIHtcbiAgICAgICAgICAgIGxldCBsZW4gPSB0aGlzLnNlY3Rpb25zW2krK10sIGlucyA9IHRoaXMuc2VjdGlvbnNbaSsrXTtcbiAgICAgICAgICAgIGlmIChpbnMgPCAwKSB7XG4gICAgICAgICAgICAgICAgZihwb3NBLCBwb3NCLCBsZW4pO1xuICAgICAgICAgICAgICAgIHBvc0IgKz0gbGVuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcG9zQiArPSBpbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwb3NBICs9IGxlbjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICBJdGVyYXRlIG92ZXIgdGhlIHJhbmdlcyBjaGFuZ2VkIGJ5IHRoZXNlIGNoYW5nZXMuIChTZWVcbiAgICBbYENoYW5nZVNldC5pdGVyQ2hhbmdlc2BdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuQ2hhbmdlU2V0Lml0ZXJDaGFuZ2VzKSBmb3IgYVxuICAgIHZhcmlhbnQgdGhhdCBhbHNvIHByb3ZpZGVzIHlvdSB3aXRoIHRoZSBpbnNlcnRlZCB0ZXh0LilcbiAgICBgZnJvbUFgL2B0b0FgIHByb3ZpZGVzIHRoZSBleHRlbnQgb2YgdGhlIGNoYW5nZSBpbiB0aGUgc3RhcnRpbmdcbiAgICBkb2N1bWVudCwgYGZyb21CYC9gdG9CYCB0aGUgZXh0ZW50IG9mIHRoZSByZXBsYWNlbWVudCBpbiB0aGVcbiAgICBjaGFuZ2VkIGRvY3VtZW50LlxuICAgIFxuICAgIFdoZW4gYGluZGl2aWR1YWxgIGlzIHRydWUsIGFkamFjZW50IGNoYW5nZXMgKHdoaWNoIGFyZSBrZXB0XG4gICAgc2VwYXJhdGUgZm9yIFtwb3NpdGlvbiBtYXBwaW5nXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLkNoYW5nZURlc2MubWFwUG9zKSkgYXJlXG4gICAgcmVwb3J0ZWQgc2VwYXJhdGVseS5cbiAgICAqL1xuICAgIGl0ZXJDaGFuZ2VkUmFuZ2VzKGYsIGluZGl2aWR1YWwgPSBmYWxzZSkge1xuICAgICAgICBpdGVyQ2hhbmdlcyh0aGlzLCBmLCBpbmRpdmlkdWFsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgR2V0IGEgZGVzY3JpcHRpb24gb2YgdGhlIGludmVydGVkIGZvcm0gb2YgdGhlc2UgY2hhbmdlcy5cbiAgICAqL1xuICAgIGdldCBpbnZlcnRlZERlc2MoKSB7XG4gICAgICAgIGxldCBzZWN0aW9ucyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2VjdGlvbnMubGVuZ3RoOykge1xuICAgICAgICAgICAgbGV0IGxlbiA9IHRoaXMuc2VjdGlvbnNbaSsrXSwgaW5zID0gdGhpcy5zZWN0aW9uc1tpKytdO1xuICAgICAgICAgICAgaWYgKGlucyA8IDApXG4gICAgICAgICAgICAgICAgc2VjdGlvbnMucHVzaChsZW4sIGlucyk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgc2VjdGlvbnMucHVzaChpbnMsIGxlbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBDaGFuZ2VEZXNjKHNlY3Rpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ29tcHV0ZSB0aGUgY29tYmluZWQgZWZmZWN0IG9mIGFwcGx5aW5nIGFub3RoZXIgc2V0IG9mIGNoYW5nZXNcbiAgICBhZnRlciB0aGlzIG9uZS4gVGhlIGxlbmd0aCBvZiB0aGUgZG9jdW1lbnQgYWZ0ZXIgdGhpcyBzZXQgc2hvdWxkXG4gICAgbWF0Y2ggdGhlIGxlbmd0aCBiZWZvcmUgYG90aGVyYC5cbiAgICAqL1xuICAgIGNvbXBvc2VEZXNjKG90aGVyKSB7IHJldHVybiB0aGlzLmVtcHR5ID8gb3RoZXIgOiBvdGhlci5lbXB0eSA/IHRoaXMgOiBjb21wb3NlU2V0cyh0aGlzLCBvdGhlcik7IH1cbiAgICAvKipcbiAgICBNYXAgdGhpcyBkZXNjcmlwdGlvbiwgd2hpY2ggc2hvdWxkIHN0YXJ0IHdpdGggdGhlIHNhbWUgZG9jdW1lbnRcbiAgICBhcyBgb3RoZXJgLCBvdmVyIGFub3RoZXIgc2V0IG9mIGNoYW5nZXMsIHNvIHRoYXQgaXQgY2FuIGJlXG4gICAgYXBwbGllZCBhZnRlciBpdC4gV2hlbiBgYmVmb3JlYCBpcyB0cnVlLCBtYXAgYXMgaWYgdGhlIGNoYW5nZXNcbiAgICBpbiBgb3RoZXJgIGhhcHBlbmVkIGJlZm9yZSB0aGUgb25lcyBpbiBgdGhpc2AuXG4gICAgKi9cbiAgICBtYXBEZXNjKG90aGVyLCBiZWZvcmUgPSBmYWxzZSkgeyByZXR1cm4gb3RoZXIuZW1wdHkgPyB0aGlzIDogbWFwU2V0KHRoaXMsIG90aGVyLCBiZWZvcmUpOyB9XG4gICAgbWFwUG9zKHBvcywgYXNzb2MgPSAtMSwgbW9kZSA9IGV4cG9ydHMuTWFwTW9kZS5TaW1wbGUpIHtcbiAgICAgICAgbGV0IHBvc0EgPSAwLCBwb3NCID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNlY3Rpb25zLmxlbmd0aDspIHtcbiAgICAgICAgICAgIGxldCBsZW4gPSB0aGlzLnNlY3Rpb25zW2krK10sIGlucyA9IHRoaXMuc2VjdGlvbnNbaSsrXSwgZW5kQSA9IHBvc0EgKyBsZW47XG4gICAgICAgICAgICBpZiAoaW5zIDwgMCkge1xuICAgICAgICAgICAgICAgIGlmIChlbmRBID4gcG9zKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcG9zQiArIChwb3MgLSBwb3NBKTtcbiAgICAgICAgICAgICAgICBwb3NCICs9IGxlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChtb2RlICE9IGV4cG9ydHMuTWFwTW9kZS5TaW1wbGUgJiYgZW5kQSA+PSBwb3MgJiZcbiAgICAgICAgICAgICAgICAgICAgKG1vZGUgPT0gZXhwb3J0cy5NYXBNb2RlLlRyYWNrRGVsICYmIHBvc0EgPCBwb3MgJiYgZW5kQSA+IHBvcyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZSA9PSBleHBvcnRzLk1hcE1vZGUuVHJhY2tCZWZvcmUgJiYgcG9zQSA8IHBvcyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZSA9PSBleHBvcnRzLk1hcE1vZGUuVHJhY2tBZnRlciAmJiBlbmRBID4gcG9zKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKGVuZEEgPiBwb3MgfHwgZW5kQSA9PSBwb3MgJiYgYXNzb2MgPCAwICYmICFsZW4pXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwb3MgPT0gcG9zQSB8fCBhc3NvYyA8IDAgPyBwb3NCIDogcG9zQiArIGlucztcbiAgICAgICAgICAgICAgICBwb3NCICs9IGlucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBvc0EgPSBlbmRBO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3MgPiBwb3NBKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYFBvc2l0aW9uICR7cG9zfSBpcyBvdXQgb2YgcmFuZ2UgZm9yIGNoYW5nZXNldCBvZiBsZW5ndGggJHtwb3NBfWApO1xuICAgICAgICByZXR1cm4gcG9zQjtcbiAgICB9XG4gICAgLyoqXG4gICAgQ2hlY2sgd2hldGhlciB0aGVzZSBjaGFuZ2VzIHRvdWNoIGEgZ2l2ZW4gcmFuZ2UuIFdoZW4gb25lIG9mIHRoZVxuICAgIGNoYW5nZXMgZW50aXJlbHkgY292ZXJzIHRoZSByYW5nZSwgdGhlIHN0cmluZyBgXCJjb3ZlclwiYCBpc1xuICAgIHJldHVybmVkLlxuICAgICovXG4gICAgdG91Y2hlc1JhbmdlKGZyb20sIHRvID0gZnJvbSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgcG9zID0gMDsgaSA8IHRoaXMuc2VjdGlvbnMubGVuZ3RoICYmIHBvcyA8PSB0bzspIHtcbiAgICAgICAgICAgIGxldCBsZW4gPSB0aGlzLnNlY3Rpb25zW2krK10sIGlucyA9IHRoaXMuc2VjdGlvbnNbaSsrXSwgZW5kID0gcG9zICsgbGVuO1xuICAgICAgICAgICAgaWYgKGlucyA+PSAwICYmIHBvcyA8PSB0byAmJiBlbmQgPj0gZnJvbSlcbiAgICAgICAgICAgICAgICByZXR1cm4gcG9zIDwgZnJvbSAmJiBlbmQgPiB0byA/IFwiY292ZXJcIiA6IHRydWU7XG4gICAgICAgICAgICBwb3MgPSBlbmQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gXCJcIjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNlY3Rpb25zLmxlbmd0aDspIHtcbiAgICAgICAgICAgIGxldCBsZW4gPSB0aGlzLnNlY3Rpb25zW2krK10sIGlucyA9IHRoaXMuc2VjdGlvbnNbaSsrXTtcbiAgICAgICAgICAgIHJlc3VsdCArPSAocmVzdWx0ID8gXCIgXCIgOiBcIlwiKSArIGxlbiArIChpbnMgPj0gMCA/IFwiOlwiICsgaW5zIDogXCJcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgU2VyaWFsaXplIHRoaXMgY2hhbmdlIGRlc2MgdG8gYSBKU09OLXJlcHJlc2VudGFibGUgdmFsdWUuXG4gICAgKi9cbiAgICB0b0pTT04oKSB7IHJldHVybiB0aGlzLnNlY3Rpb25zOyB9XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgY2hhbmdlIGRlc2MgZnJvbSBpdHMgSlNPTiByZXByZXNlbnRhdGlvbiAoYXMgcHJvZHVjZWRcbiAgICBieSBbYHRvSlNPTmBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuQ2hhbmdlRGVzYy50b0pTT04pLlxuICAgICovXG4gICAgc3RhdGljIGZyb21KU09OKGpzb24pIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGpzb24pIHx8IGpzb24ubGVuZ3RoICUgMiB8fCBqc29uLnNvbWUoYSA9PiB0eXBlb2YgYSAhPSBcIm51bWJlclwiKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBKU09OIHJlcHJlc2VudGF0aW9uIG9mIENoYW5nZURlc2NcIik7XG4gICAgICAgIHJldHVybiBuZXcgQ2hhbmdlRGVzYyhqc29uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlKHNlY3Rpb25zKSB7IHJldHVybiBuZXcgQ2hhbmdlRGVzYyhzZWN0aW9ucyk7IH1cbn1cbi8qKlxuQSBjaGFuZ2Ugc2V0IHJlcHJlc2VudHMgYSBncm91cCBvZiBtb2RpZmljYXRpb25zIHRvIGEgZG9jdW1lbnQuIEl0XG5zdG9yZXMgdGhlIGRvY3VtZW50IGxlbmd0aCwgYW5kIGNhbiBvbmx5IGJlIGFwcGxpZWQgdG8gZG9jdW1lbnRzXG53aXRoIGV4YWN0bHkgdGhhdCBsZW5ndGguXG4qL1xuY2xhc3MgQ2hhbmdlU2V0IGV4dGVuZHMgQ2hhbmdlRGVzYyB7XG4gICAgY29uc3RydWN0b3Ioc2VjdGlvbnMsIFxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgaW5zZXJ0ZWQpIHtcbiAgICAgICAgc3VwZXIoc2VjdGlvbnMpO1xuICAgICAgICB0aGlzLmluc2VydGVkID0gaW5zZXJ0ZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgIEFwcGx5IHRoZSBjaGFuZ2VzIHRvIGEgZG9jdW1lbnQsIHJldHVybmluZyB0aGUgbW9kaWZpZWRcbiAgICBkb2N1bWVudC5cbiAgICAqL1xuICAgIGFwcGx5KGRvYykge1xuICAgICAgICBpZiAodGhpcy5sZW5ndGggIT0gZG9jLmxlbmd0aClcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiQXBwbHlpbmcgY2hhbmdlIHNldCB0byBhIGRvY3VtZW50IHdpdGggdGhlIHdyb25nIGxlbmd0aFwiKTtcbiAgICAgICAgaXRlckNoYW5nZXModGhpcywgKGZyb21BLCB0b0EsIGZyb21CLCBfdG9CLCB0ZXh0KSA9PiBkb2MgPSBkb2MucmVwbGFjZShmcm9tQiwgZnJvbUIgKyAodG9BIC0gZnJvbUEpLCB0ZXh0KSwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gZG9jO1xuICAgIH1cbiAgICBtYXBEZXNjKG90aGVyLCBiZWZvcmUgPSBmYWxzZSkgeyByZXR1cm4gbWFwU2V0KHRoaXMsIG90aGVyLCBiZWZvcmUsIHRydWUpOyB9XG4gICAgLyoqXG4gICAgR2l2ZW4gdGhlIGRvY3VtZW50IGFzIGl0IGV4aXN0ZWQgX2JlZm9yZV8gdGhlIGNoYW5nZXMsIHJldHVybiBhXG4gICAgY2hhbmdlIHNldCB0aGF0IHJlcHJlc2VudHMgdGhlIGludmVyc2Ugb2YgdGhpcyBzZXQsIHdoaWNoIGNvdWxkXG4gICAgYmUgdXNlZCB0byBnbyBmcm9tIHRoZSBkb2N1bWVudCBjcmVhdGVkIGJ5IHRoZSBjaGFuZ2VzIGJhY2sgdG9cbiAgICB0aGUgZG9jdW1lbnQgYXMgaXQgZXhpc3RlZCBiZWZvcmUgdGhlIGNoYW5nZXMuXG4gICAgKi9cbiAgICBpbnZlcnQoZG9jKSB7XG4gICAgICAgIGxldCBzZWN0aW9ucyA9IHRoaXMuc2VjdGlvbnMuc2xpY2UoKSwgaW5zZXJ0ZWQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIHBvcyA9IDA7IGkgPCBzZWN0aW9ucy5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICAgICAgbGV0IGxlbiA9IHNlY3Rpb25zW2ldLCBpbnMgPSBzZWN0aW9uc1tpICsgMV07XG4gICAgICAgICAgICBpZiAoaW5zID49IDApIHtcbiAgICAgICAgICAgICAgICBzZWN0aW9uc1tpXSA9IGlucztcbiAgICAgICAgICAgICAgICBzZWN0aW9uc1tpICsgMV0gPSBsZW47XG4gICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gaSA+PiAxO1xuICAgICAgICAgICAgICAgIHdoaWxlIChpbnNlcnRlZC5sZW5ndGggPCBpbmRleClcbiAgICAgICAgICAgICAgICAgICAgaW5zZXJ0ZWQucHVzaChUZXh0LmVtcHR5KTtcbiAgICAgICAgICAgICAgICBpbnNlcnRlZC5wdXNoKGxlbiA/IGRvYy5zbGljZShwb3MsIHBvcyArIGxlbikgOiBUZXh0LmVtcHR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBvcyArPSBsZW47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBDaGFuZ2VTZXQoc2VjdGlvbnMsIGluc2VydGVkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ29tYmluZSB0d28gc3Vic2VxdWVudCBjaGFuZ2Ugc2V0cyBpbnRvIGEgc2luZ2xlIHNldC4gYG90aGVyYFxuICAgIG11c3Qgc3RhcnQgaW4gdGhlIGRvY3VtZW50IHByb2R1Y2VkIGJ5IGB0aGlzYC4gSWYgYHRoaXNgIGdvZXNcbiAgICBgZG9jQWAg4oaSIGBkb2NCYCBhbmQgYG90aGVyYCByZXByZXNlbnRzIGBkb2NCYCDihpIgYGRvY0NgLCB0aGVcbiAgICByZXR1cm5lZCB2YWx1ZSB3aWxsIHJlcHJlc2VudCB0aGUgY2hhbmdlIGBkb2NBYCDihpIgYGRvY0NgLlxuICAgICovXG4gICAgY29tcG9zZShvdGhlcikgeyByZXR1cm4gdGhpcy5lbXB0eSA/IG90aGVyIDogb3RoZXIuZW1wdHkgPyB0aGlzIDogY29tcG9zZVNldHModGhpcywgb3RoZXIsIHRydWUpOyB9XG4gICAgLyoqXG4gICAgR2l2ZW4gYW5vdGhlciBjaGFuZ2Ugc2V0IHN0YXJ0aW5nIGluIHRoZSBzYW1lIGRvY3VtZW50LCBtYXBzIHRoaXNcbiAgICBjaGFuZ2Ugc2V0IG92ZXIgdGhlIG90aGVyLCBwcm9kdWNpbmcgYSBuZXcgY2hhbmdlIHNldCB0aGF0IGNhbiBiZVxuICAgIGFwcGxpZWQgdG8gdGhlIGRvY3VtZW50IHByb2R1Y2VkIGJ5IGFwcGx5aW5nIGBvdGhlcmAuIFdoZW5cbiAgICBgYmVmb3JlYCBpcyBgdHJ1ZWAsIG9yZGVyIGNoYW5nZXMgYXMgaWYgYHRoaXNgIGNvbWVzIGJlZm9yZVxuICAgIGBvdGhlcmAsIG90aGVyd2lzZSAodGhlIGRlZmF1bHQpIHRyZWF0IGBvdGhlcmAgYXMgY29taW5nIGZpcnN0LlxuICAgIFxuICAgIEdpdmVuIHR3byBjaGFuZ2VzIGBBYCBhbmQgYEJgLCBgQS5jb21wb3NlKEIubWFwKEEpKWAgYW5kXG4gICAgYEIuY29tcG9zZShBLm1hcChCLCB0cnVlKSlgIHdpbGwgcHJvZHVjZSB0aGUgc2FtZSBkb2N1bWVudC4gVGhpc1xuICAgIHByb3ZpZGVzIGEgYmFzaWMgZm9ybSBvZiBbb3BlcmF0aW9uYWxcbiAgICB0cmFuc2Zvcm1hdGlvbl0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvT3BlcmF0aW9uYWxfdHJhbnNmb3JtYXRpb24pLFxuICAgIGFuZCBjYW4gYmUgdXNlZCBmb3IgY29sbGFib3JhdGl2ZSBlZGl0aW5nLlxuICAgICovXG4gICAgbWFwKG90aGVyLCBiZWZvcmUgPSBmYWxzZSkgeyByZXR1cm4gb3RoZXIuZW1wdHkgPyB0aGlzIDogbWFwU2V0KHRoaXMsIG90aGVyLCBiZWZvcmUsIHRydWUpOyB9XG4gICAgLyoqXG4gICAgSXRlcmF0ZSBvdmVyIHRoZSBjaGFuZ2VkIHJhbmdlcyBpbiB0aGUgZG9jdW1lbnQsIGNhbGxpbmcgYGZgIGZvclxuICAgIGVhY2gsIHdpdGggdGhlIHJhbmdlIGluIHRoZSBvcmlnaW5hbCBkb2N1bWVudCAoYGZyb21BYC1gdG9BYClcbiAgICBhbmQgdGhlIHJhbmdlIHRoYXQgcmVwbGFjZXMgaXQgaW4gdGhlIG5ldyBkb2N1bWVudFxuICAgIChgZnJvbUJgLWB0b0JgKS5cbiAgICBcbiAgICBXaGVuIGBpbmRpdmlkdWFsYCBpcyB0cnVlLCBhZGphY2VudCBjaGFuZ2VzIGFyZSByZXBvcnRlZFxuICAgIHNlcGFyYXRlbHkuXG4gICAgKi9cbiAgICBpdGVyQ2hhbmdlcyhmLCBpbmRpdmlkdWFsID0gZmFsc2UpIHtcbiAgICAgICAgaXRlckNoYW5nZXModGhpcywgZiwgaW5kaXZpZHVhbCk7XG4gICAgfVxuICAgIC8qKlxuICAgIEdldCBhIFtjaGFuZ2UgZGVzY3JpcHRpb25dKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuQ2hhbmdlRGVzYykgZm9yIHRoaXMgY2hhbmdlXG4gICAgc2V0LlxuICAgICovXG4gICAgZ2V0IGRlc2MoKSB7IHJldHVybiBDaGFuZ2VEZXNjLmNyZWF0ZSh0aGlzLnNlY3Rpb25zKTsgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgZmlsdGVyKHJhbmdlcykge1xuICAgICAgICBsZXQgcmVzdWx0U2VjdGlvbnMgPSBbXSwgcmVzdWx0SW5zZXJ0ZWQgPSBbXSwgZmlsdGVyZWRTZWN0aW9ucyA9IFtdO1xuICAgICAgICBsZXQgaXRlciA9IG5ldyBTZWN0aW9uSXRlcih0aGlzKTtcbiAgICAgICAgZG9uZTogZm9yIChsZXQgaSA9IDAsIHBvcyA9IDA7Oykge1xuICAgICAgICAgICAgbGV0IG5leHQgPSBpID09IHJhbmdlcy5sZW5ndGggPyAxZTkgOiByYW5nZXNbaSsrXTtcbiAgICAgICAgICAgIHdoaWxlIChwb3MgPCBuZXh0IHx8IHBvcyA9PSBuZXh0ICYmIGl0ZXIubGVuID09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlci5kb25lKVxuICAgICAgICAgICAgICAgICAgICBicmVhayBkb25lO1xuICAgICAgICAgICAgICAgIGxldCBsZW4gPSBNYXRoLm1pbihpdGVyLmxlbiwgbmV4dCAtIHBvcyk7XG4gICAgICAgICAgICAgICAgYWRkU2VjdGlvbihmaWx0ZXJlZFNlY3Rpb25zLCBsZW4sIC0xKTtcbiAgICAgICAgICAgICAgICBsZXQgaW5zID0gaXRlci5pbnMgPT0gLTEgPyAtMSA6IGl0ZXIub2ZmID09IDAgPyBpdGVyLmlucyA6IDA7XG4gICAgICAgICAgICAgICAgYWRkU2VjdGlvbihyZXN1bHRTZWN0aW9ucywgbGVuLCBpbnMpO1xuICAgICAgICAgICAgICAgIGlmIChpbnMgPiAwKVxuICAgICAgICAgICAgICAgICAgICBhZGRJbnNlcnQocmVzdWx0SW5zZXJ0ZWQsIHJlc3VsdFNlY3Rpb25zLCBpdGVyLnRleHQpO1xuICAgICAgICAgICAgICAgIGl0ZXIuZm9yd2FyZChsZW4pO1xuICAgICAgICAgICAgICAgIHBvcyArPSBsZW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZW5kID0gcmFuZ2VzW2krK107XG4gICAgICAgICAgICB3aGlsZSAocG9zIDwgZW5kKSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZXIuZG9uZSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgZG9uZTtcbiAgICAgICAgICAgICAgICBsZXQgbGVuID0gTWF0aC5taW4oaXRlci5sZW4sIGVuZCAtIHBvcyk7XG4gICAgICAgICAgICAgICAgYWRkU2VjdGlvbihyZXN1bHRTZWN0aW9ucywgbGVuLCAtMSk7XG4gICAgICAgICAgICAgICAgYWRkU2VjdGlvbihmaWx0ZXJlZFNlY3Rpb25zLCBsZW4sIGl0ZXIuaW5zID09IC0xID8gLTEgOiBpdGVyLm9mZiA9PSAwID8gaXRlci5pbnMgOiAwKTtcbiAgICAgICAgICAgICAgICBpdGVyLmZvcndhcmQobGVuKTtcbiAgICAgICAgICAgICAgICBwb3MgKz0gbGVuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGNoYW5nZXM6IG5ldyBDaGFuZ2VTZXQocmVzdWx0U2VjdGlvbnMsIHJlc3VsdEluc2VydGVkKSxcbiAgICAgICAgICAgIGZpbHRlcmVkOiBDaGFuZ2VEZXNjLmNyZWF0ZShmaWx0ZXJlZFNlY3Rpb25zKSB9O1xuICAgIH1cbiAgICAvKipcbiAgICBTZXJpYWxpemUgdGhpcyBjaGFuZ2Ugc2V0IHRvIGEgSlNPTi1yZXByZXNlbnRhYmxlIHZhbHVlLlxuICAgICovXG4gICAgdG9KU09OKCkge1xuICAgICAgICBsZXQgcGFydHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNlY3Rpb25zLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgICAgICBsZXQgbGVuID0gdGhpcy5zZWN0aW9uc1tpXSwgaW5zID0gdGhpcy5zZWN0aW9uc1tpICsgMV07XG4gICAgICAgICAgICBpZiAoaW5zIDwgMClcbiAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKGxlbik7XG4gICAgICAgICAgICBlbHNlIGlmIChpbnMgPT0gMClcbiAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKFtsZW5dKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKFtsZW5dLmNvbmNhdCh0aGlzLmluc2VydGVkW2kgPj4gMV0udG9KU09OKCkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFydHM7XG4gICAgfVxuICAgIC8qKlxuICAgIENyZWF0ZSBhIGNoYW5nZSBzZXQgZm9yIHRoZSBnaXZlbiBjaGFuZ2VzLCBmb3IgYSBkb2N1bWVudCBvZiB0aGVcbiAgICBnaXZlbiBsZW5ndGgsIHVzaW5nIGBsaW5lU2VwYCBhcyBsaW5lIHNlcGFyYXRvci5cbiAgICAqL1xuICAgIHN0YXRpYyBvZihjaGFuZ2VzLCBsZW5ndGgsIGxpbmVTZXApIHtcbiAgICAgICAgbGV0IHNlY3Rpb25zID0gW10sIGluc2VydGVkID0gW10sIHBvcyA9IDA7XG4gICAgICAgIGxldCB0b3RhbCA9IG51bGw7XG4gICAgICAgIGZ1bmN0aW9uIGZsdXNoKGZvcmNlID0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmICghZm9yY2UgJiYgIXNlY3Rpb25zLmxlbmd0aClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBpZiAocG9zIDwgbGVuZ3RoKVxuICAgICAgICAgICAgICAgIGFkZFNlY3Rpb24oc2VjdGlvbnMsIGxlbmd0aCAtIHBvcywgLTEpO1xuICAgICAgICAgICAgbGV0IHNldCA9IG5ldyBDaGFuZ2VTZXQoc2VjdGlvbnMsIGluc2VydGVkKTtcbiAgICAgICAgICAgIHRvdGFsID0gdG90YWwgPyB0b3RhbC5jb21wb3NlKHNldC5tYXAodG90YWwpKSA6IHNldDtcbiAgICAgICAgICAgIHNlY3Rpb25zID0gW107XG4gICAgICAgICAgICBpbnNlcnRlZCA9IFtdO1xuICAgICAgICAgICAgcG9zID0gMDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBwcm9jZXNzKHNwZWMpIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNwZWMpKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc3ViIG9mIHNwZWMpXG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3Moc3ViKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHNwZWMgaW5zdGFuY2VvZiBDaGFuZ2VTZXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3BlYy5sZW5ndGggIT0gbGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgTWlzbWF0Y2hlZCBjaGFuZ2Ugc2V0IGxlbmd0aCAoZ290ICR7c3BlYy5sZW5ndGh9LCBleHBlY3RlZCAke2xlbmd0aH0pYCk7XG4gICAgICAgICAgICAgICAgZmx1c2goKTtcbiAgICAgICAgICAgICAgICB0b3RhbCA9IHRvdGFsID8gdG90YWwuY29tcG9zZShzcGVjLm1hcCh0b3RhbCkpIDogc3BlYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCB7IGZyb20sIHRvID0gZnJvbSwgaW5zZXJ0IH0gPSBzcGVjO1xuICAgICAgICAgICAgICAgIGlmIChmcm9tID4gdG8gfHwgZnJvbSA8IDAgfHwgdG8gPiBsZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBJbnZhbGlkIGNoYW5nZSByYW5nZSAke2Zyb219IHRvICR7dG99IChpbiBkb2Mgb2YgbGVuZ3RoICR7bGVuZ3RofSlgKTtcbiAgICAgICAgICAgICAgICBsZXQgaW5zVGV4dCA9ICFpbnNlcnQgPyBUZXh0LmVtcHR5IDogdHlwZW9mIGluc2VydCA9PSBcInN0cmluZ1wiID8gVGV4dC5vZihpbnNlcnQuc3BsaXQobGluZVNlcCB8fCBEZWZhdWx0U3BsaXQpKSA6IGluc2VydDtcbiAgICAgICAgICAgICAgICBsZXQgaW5zTGVuID0gaW5zVGV4dC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgaWYgKGZyb20gPT0gdG8gJiYgaW5zTGVuID09IDApXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBpZiAoZnJvbSA8IHBvcylcbiAgICAgICAgICAgICAgICAgICAgZmx1c2goKTtcbiAgICAgICAgICAgICAgICBpZiAoZnJvbSA+IHBvcylcbiAgICAgICAgICAgICAgICAgICAgYWRkU2VjdGlvbihzZWN0aW9ucywgZnJvbSAtIHBvcywgLTEpO1xuICAgICAgICAgICAgICAgIGFkZFNlY3Rpb24oc2VjdGlvbnMsIHRvIC0gZnJvbSwgaW5zTGVuKTtcbiAgICAgICAgICAgICAgICBhZGRJbnNlcnQoaW5zZXJ0ZWQsIHNlY3Rpb25zLCBpbnNUZXh0KTtcbiAgICAgICAgICAgICAgICBwb3MgPSB0bztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwcm9jZXNzKGNoYW5nZXMpO1xuICAgICAgICBmbHVzaCghdG90YWwpO1xuICAgICAgICByZXR1cm4gdG90YWw7XG4gICAgfVxuICAgIC8qKlxuICAgIENyZWF0ZSBhbiBlbXB0eSBjaGFuZ2VzZXQgb2YgdGhlIGdpdmVuIGxlbmd0aC5cbiAgICAqL1xuICAgIHN0YXRpYyBlbXB0eShsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDaGFuZ2VTZXQobGVuZ3RoID8gW2xlbmd0aCwgLTFdIDogW10sIFtdKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgY2hhbmdlc2V0IGZyb20gaXRzIEpTT04gcmVwcmVzZW50YXRpb24gKGFzIHByb2R1Y2VkIGJ5XG4gICAgW2B0b0pTT05gXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLkNoYW5nZVNldC50b0pTT04pLlxuICAgICovXG4gICAgc3RhdGljIGZyb21KU09OKGpzb24pIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGpzb24pKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIEpTT04gcmVwcmVzZW50YXRpb24gb2YgQ2hhbmdlU2V0XCIpO1xuICAgICAgICBsZXQgc2VjdGlvbnMgPSBbXSwgaW5zZXJ0ZWQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBqc29uLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgcGFydCA9IGpzb25baV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhcnQgPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgIHNlY3Rpb25zLnB1c2gocGFydCwgLTEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkocGFydCkgfHwgdHlwZW9mIHBhcnRbMF0gIT0gXCJudW1iZXJcIiB8fCBwYXJ0LnNvbWUoKGUsIGkpID0+IGkgJiYgdHlwZW9mIGUgIT0gXCJzdHJpbmdcIikpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludmFsaWQgSlNPTiByZXByZXNlbnRhdGlvbiBvZiBDaGFuZ2VTZXRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwYXJ0Lmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgc2VjdGlvbnMucHVzaChwYXJ0WzBdLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHdoaWxlIChpbnNlcnRlZC5sZW5ndGggPCBpKVxuICAgICAgICAgICAgICAgICAgICBpbnNlcnRlZC5wdXNoKFRleHQuZW1wdHkpO1xuICAgICAgICAgICAgICAgIGluc2VydGVkW2ldID0gVGV4dC5vZihwYXJ0LnNsaWNlKDEpKTtcbiAgICAgICAgICAgICAgICBzZWN0aW9ucy5wdXNoKHBhcnRbMF0sIGluc2VydGVkW2ldLmxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBDaGFuZ2VTZXQoc2VjdGlvbnMsIGluc2VydGVkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlU2V0KHNlY3Rpb25zLCBpbnNlcnRlZCkge1xuICAgICAgICByZXR1cm4gbmV3IENoYW5nZVNldChzZWN0aW9ucywgaW5zZXJ0ZWQpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFkZFNlY3Rpb24oc2VjdGlvbnMsIGxlbiwgaW5zLCBmb3JjZUpvaW4gPSBmYWxzZSkge1xuICAgIGlmIChsZW4gPT0gMCAmJiBpbnMgPD0gMClcbiAgICAgICAgcmV0dXJuO1xuICAgIGxldCBsYXN0ID0gc2VjdGlvbnMubGVuZ3RoIC0gMjtcbiAgICBpZiAobGFzdCA+PSAwICYmIGlucyA8PSAwICYmIGlucyA9PSBzZWN0aW9uc1tsYXN0ICsgMV0pXG4gICAgICAgIHNlY3Rpb25zW2xhc3RdICs9IGxlbjtcbiAgICBlbHNlIGlmIChsZW4gPT0gMCAmJiBzZWN0aW9uc1tsYXN0XSA9PSAwKVxuICAgICAgICBzZWN0aW9uc1tsYXN0ICsgMV0gKz0gaW5zO1xuICAgIGVsc2UgaWYgKGZvcmNlSm9pbikge1xuICAgICAgICBzZWN0aW9uc1tsYXN0XSArPSBsZW47XG4gICAgICAgIHNlY3Rpb25zW2xhc3QgKyAxXSArPSBpbnM7XG4gICAgfVxuICAgIGVsc2VcbiAgICAgICAgc2VjdGlvbnMucHVzaChsZW4sIGlucyk7XG59XG5mdW5jdGlvbiBhZGRJbnNlcnQodmFsdWVzLCBzZWN0aW9ucywgdmFsdWUpIHtcbiAgICBpZiAodmFsdWUubGVuZ3RoID09IDApXG4gICAgICAgIHJldHVybjtcbiAgICBsZXQgaW5kZXggPSAoc2VjdGlvbnMubGVuZ3RoIC0gMikgPj4gMTtcbiAgICBpZiAoaW5kZXggPCB2YWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgIHZhbHVlc1t2YWx1ZXMubGVuZ3RoIC0gMV0gPSB2YWx1ZXNbdmFsdWVzLmxlbmd0aCAtIDFdLmFwcGVuZCh2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB3aGlsZSAodmFsdWVzLmxlbmd0aCA8IGluZGV4KVxuICAgICAgICAgICAgdmFsdWVzLnB1c2goVGV4dC5lbXB0eSk7XG4gICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBpdGVyQ2hhbmdlcyhkZXNjLCBmLCBpbmRpdmlkdWFsKSB7XG4gICAgbGV0IGluc2VydGVkID0gZGVzYy5pbnNlcnRlZDtcbiAgICBmb3IgKGxldCBwb3NBID0gMCwgcG9zQiA9IDAsIGkgPSAwOyBpIDwgZGVzYy5zZWN0aW9ucy5sZW5ndGg7KSB7XG4gICAgICAgIGxldCBsZW4gPSBkZXNjLnNlY3Rpb25zW2krK10sIGlucyA9IGRlc2Muc2VjdGlvbnNbaSsrXTtcbiAgICAgICAgaWYgKGlucyA8IDApIHtcbiAgICAgICAgICAgIHBvc0EgKz0gbGVuO1xuICAgICAgICAgICAgcG9zQiArPSBsZW47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgZW5kQSA9IHBvc0EsIGVuZEIgPSBwb3NCLCB0ZXh0ID0gVGV4dC5lbXB0eTtcbiAgICAgICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgICAgICBlbmRBICs9IGxlbjtcbiAgICAgICAgICAgICAgICBlbmRCICs9IGlucztcbiAgICAgICAgICAgICAgICBpZiAoaW5zICYmIGluc2VydGVkKVxuICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dC5hcHBlbmQoaW5zZXJ0ZWRbKGkgLSAyKSA+PiAxXSk7XG4gICAgICAgICAgICAgICAgaWYgKGluZGl2aWR1YWwgfHwgaSA9PSBkZXNjLnNlY3Rpb25zLmxlbmd0aCB8fCBkZXNjLnNlY3Rpb25zW2kgKyAxXSA8IDApXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGxlbiA9IGRlc2Muc2VjdGlvbnNbaSsrXTtcbiAgICAgICAgICAgICAgICBpbnMgPSBkZXNjLnNlY3Rpb25zW2krK107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmKHBvc0EsIGVuZEEsIHBvc0IsIGVuZEIsIHRleHQpO1xuICAgICAgICAgICAgcG9zQSA9IGVuZEE7XG4gICAgICAgICAgICBwb3NCID0gZW5kQjtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIG1hcFNldChzZXRBLCBzZXRCLCBiZWZvcmUsIG1rU2V0ID0gZmFsc2UpIHtcbiAgICAvLyBQcm9kdWNlIGEgY29weSBvZiBzZXRBIHRoYXQgYXBwbGllcyB0byB0aGUgZG9jdW1lbnQgYWZ0ZXIgc2V0QlxuICAgIC8vIGhhcyBiZWVuIGFwcGxpZWQgKGFzc3VtaW5nIGJvdGggc3RhcnQgYXQgdGhlIHNhbWUgZG9jdW1lbnQpLlxuICAgIGxldCBzZWN0aW9ucyA9IFtdLCBpbnNlcnQgPSBta1NldCA/IFtdIDogbnVsbDtcbiAgICBsZXQgYSA9IG5ldyBTZWN0aW9uSXRlcihzZXRBKSwgYiA9IG5ldyBTZWN0aW9uSXRlcihzZXRCKTtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYm90aCBzZXRzIGluIHBhcmFsbGVsLiBpbnNlcnRlZCB0cmFja3MsIGZvciBjaGFuZ2VzXG4gICAgLy8gaW4gQSB0aGF0IGhhdmUgdG8gYmUgcHJvY2Vzc2VkIHBpZWNlLWJ5LXBpZWNlLCB3aGV0aGVyIHRoZWlyXG4gICAgLy8gY29udGVudCBoYXMgYmVlbiBpbnNlcnRlZCBhbHJlYWR5LCBhbmQgcmVmZXJzIHRvIHRoZSBzZWN0aW9uXG4gICAgLy8gaW5kZXguXG4gICAgZm9yIChsZXQgaW5zZXJ0ZWQgPSAtMTs7KSB7XG4gICAgICAgIGlmIChhLmlucyA9PSAtMSAmJiBiLmlucyA9PSAtMSkge1xuICAgICAgICAgICAgLy8gTW92ZSBhY3Jvc3MgcmFuZ2VzIHNraXBwZWQgYnkgYm90aCBzZXRzLlxuICAgICAgICAgICAgbGV0IGxlbiA9IE1hdGgubWluKGEubGVuLCBiLmxlbik7XG4gICAgICAgICAgICBhZGRTZWN0aW9uKHNlY3Rpb25zLCBsZW4sIC0xKTtcbiAgICAgICAgICAgIGEuZm9yd2FyZChsZW4pO1xuICAgICAgICAgICAgYi5mb3J3YXJkKGxlbik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYi5pbnMgPj0gMCAmJiAoYS5pbnMgPCAwIHx8IGluc2VydGVkID09IGEuaSB8fCBhLm9mZiA9PSAwICYmIChiLmxlbiA8IGEubGVuIHx8IGIubGVuID09IGEubGVuICYmICFiZWZvcmUpKSkge1xuICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBhIGNoYW5nZSBpbiBCIHRoYXQgY29tZXMgYmVmb3JlIHRoZSBuZXh0IGNoYW5nZSBpblxuICAgICAgICAgICAgLy8gQSAob3JkZXJlZCBieSBzdGFydCBwb3MsIHRoZW4gbGVuLCB0aGVuIGJlZm9yZSBmbGFnKSwgc2tpcFxuICAgICAgICAgICAgLy8gdGhhdCAoYW5kIHByb2Nlc3MgYW55IGNoYW5nZXMgaW4gQSBpdCBjb3ZlcnMpLlxuICAgICAgICAgICAgbGV0IGxlbiA9IGIubGVuO1xuICAgICAgICAgICAgYWRkU2VjdGlvbihzZWN0aW9ucywgYi5pbnMsIC0xKTtcbiAgICAgICAgICAgIHdoaWxlIChsZW4pIHtcbiAgICAgICAgICAgICAgICBsZXQgcGllY2UgPSBNYXRoLm1pbihhLmxlbiwgbGVuKTtcbiAgICAgICAgICAgICAgICBpZiAoYS5pbnMgPj0gMCAmJiBpbnNlcnRlZCA8IGEuaSAmJiBhLmxlbiA8PSBwaWVjZSkge1xuICAgICAgICAgICAgICAgICAgICBhZGRTZWN0aW9uKHNlY3Rpb25zLCAwLCBhLmlucyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnNlcnQpXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRJbnNlcnQoaW5zZXJ0LCBzZWN0aW9ucywgYS50ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgaW5zZXJ0ZWQgPSBhLmk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGEuZm9yd2FyZChwaWVjZSk7XG4gICAgICAgICAgICAgICAgbGVuIC09IHBpZWNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYi5uZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYS5pbnMgPj0gMCkge1xuICAgICAgICAgICAgLy8gUHJvY2VzcyB0aGUgcGFydCBvZiBhIGNoYW5nZSBpbiBBIHVwIHRvIHRoZSBzdGFydCBvZiB0aGUgbmV4dFxuICAgICAgICAgICAgLy8gbm9uLWRlbGV0aW9uIGNoYW5nZSBpbiBCIChpZiBvdmVybGFwcGluZykuXG4gICAgICAgICAgICBsZXQgbGVuID0gMCwgbGVmdCA9IGEubGVuO1xuICAgICAgICAgICAgd2hpbGUgKGxlZnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoYi5pbnMgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBpZWNlID0gTWF0aC5taW4obGVmdCwgYi5sZW4pO1xuICAgICAgICAgICAgICAgICAgICBsZW4gKz0gcGllY2U7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQgLT0gcGllY2U7XG4gICAgICAgICAgICAgICAgICAgIGIuZm9yd2FyZChwaWVjZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGIuaW5zID09IDAgJiYgYi5sZW4gPCBsZWZ0KSB7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQgLT0gYi5sZW47XG4gICAgICAgICAgICAgICAgICAgIGIubmV4dCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWRkU2VjdGlvbihzZWN0aW9ucywgbGVuLCBpbnNlcnRlZCA8IGEuaSA/IGEuaW5zIDogMCk7XG4gICAgICAgICAgICBpZiAoaW5zZXJ0ICYmIGluc2VydGVkIDwgYS5pKVxuICAgICAgICAgICAgICAgIGFkZEluc2VydChpbnNlcnQsIHNlY3Rpb25zLCBhLnRleHQpO1xuICAgICAgICAgICAgaW5zZXJ0ZWQgPSBhLmk7XG4gICAgICAgICAgICBhLmZvcndhcmQoYS5sZW4gLSBsZWZ0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhLmRvbmUgJiYgYi5kb25lKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5zZXJ0ID8gQ2hhbmdlU2V0LmNyZWF0ZVNldChzZWN0aW9ucywgaW5zZXJ0KSA6IENoYW5nZURlc2MuY3JlYXRlKHNlY3Rpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc21hdGNoZWQgY2hhbmdlIHNldCBsZW5ndGhzXCIpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gY29tcG9zZVNldHMoc2V0QSwgc2V0QiwgbWtTZXQgPSBmYWxzZSkge1xuICAgIGxldCBzZWN0aW9ucyA9IFtdO1xuICAgIGxldCBpbnNlcnQgPSBta1NldCA/IFtdIDogbnVsbDtcbiAgICBsZXQgYSA9IG5ldyBTZWN0aW9uSXRlcihzZXRBKSwgYiA9IG5ldyBTZWN0aW9uSXRlcihzZXRCKTtcbiAgICBmb3IgKGxldCBvcGVuID0gZmFsc2U7Oykge1xuICAgICAgICBpZiAoYS5kb25lICYmIGIuZG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuIGluc2VydCA/IENoYW5nZVNldC5jcmVhdGVTZXQoc2VjdGlvbnMsIGluc2VydCkgOiBDaGFuZ2VEZXNjLmNyZWF0ZShzZWN0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYS5pbnMgPT0gMCkgeyAvLyBEZWxldGlvbiBpbiBBXG4gICAgICAgICAgICBhZGRTZWN0aW9uKHNlY3Rpb25zLCBhLmxlbiwgMCwgb3Blbik7XG4gICAgICAgICAgICBhLm5leHQoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChiLmxlbiA9PSAwICYmICFiLmRvbmUpIHsgLy8gSW5zZXJ0aW9uIGluIEJcbiAgICAgICAgICAgIGFkZFNlY3Rpb24oc2VjdGlvbnMsIDAsIGIuaW5zLCBvcGVuKTtcbiAgICAgICAgICAgIGlmIChpbnNlcnQpXG4gICAgICAgICAgICAgICAgYWRkSW5zZXJ0KGluc2VydCwgc2VjdGlvbnMsIGIudGV4dCk7XG4gICAgICAgICAgICBiLm5leHQoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhLmRvbmUgfHwgYi5kb25lKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNtYXRjaGVkIGNoYW5nZSBzZXQgbGVuZ3Roc1wiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCBsZW4gPSBNYXRoLm1pbihhLmxlbjIsIGIubGVuKSwgc2VjdGlvbkxlbiA9IHNlY3Rpb25zLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChhLmlucyA9PSAtMSkge1xuICAgICAgICAgICAgICAgIGxldCBpbnNCID0gYi5pbnMgPT0gLTEgPyAtMSA6IGIub2ZmID8gMCA6IGIuaW5zO1xuICAgICAgICAgICAgICAgIGFkZFNlY3Rpb24oc2VjdGlvbnMsIGxlbiwgaW5zQiwgb3Blbik7XG4gICAgICAgICAgICAgICAgaWYgKGluc2VydCAmJiBpbnNCKVxuICAgICAgICAgICAgICAgICAgICBhZGRJbnNlcnQoaW5zZXJ0LCBzZWN0aW9ucywgYi50ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGIuaW5zID09IC0xKSB7XG4gICAgICAgICAgICAgICAgYWRkU2VjdGlvbihzZWN0aW9ucywgYS5vZmYgPyAwIDogYS5sZW4sIGxlbiwgb3Blbik7XG4gICAgICAgICAgICAgICAgaWYgKGluc2VydClcbiAgICAgICAgICAgICAgICAgICAgYWRkSW5zZXJ0KGluc2VydCwgc2VjdGlvbnMsIGEudGV4dEJpdChsZW4pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGFkZFNlY3Rpb24oc2VjdGlvbnMsIGEub2ZmID8gMCA6IGEubGVuLCBiLm9mZiA/IDAgOiBiLmlucywgb3Blbik7XG4gICAgICAgICAgICAgICAgaWYgKGluc2VydCAmJiAhYi5vZmYpXG4gICAgICAgICAgICAgICAgICAgIGFkZEluc2VydChpbnNlcnQsIHNlY3Rpb25zLCBiLnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3BlbiA9IChhLmlucyA+IGxlbiB8fCBiLmlucyA+PSAwICYmIGIubGVuID4gbGVuKSAmJiAob3BlbiB8fCBzZWN0aW9ucy5sZW5ndGggPiBzZWN0aW9uTGVuKTtcbiAgICAgICAgICAgIGEuZm9yd2FyZDIobGVuKTtcbiAgICAgICAgICAgIGIuZm9yd2FyZChsZW4pO1xuICAgICAgICB9XG4gICAgfVxufVxuY2xhc3MgU2VjdGlvbkl0ZXIge1xuICAgIGNvbnN0cnVjdG9yKHNldCkge1xuICAgICAgICB0aGlzLnNldCA9IHNldDtcbiAgICAgICAgdGhpcy5pID0gMDtcbiAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgfVxuICAgIG5leHQoKSB7XG4gICAgICAgIGxldCB7IHNlY3Rpb25zIH0gPSB0aGlzLnNldDtcbiAgICAgICAgaWYgKHRoaXMuaSA8IHNlY3Rpb25zLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5sZW4gPSBzZWN0aW9uc1t0aGlzLmkrK107XG4gICAgICAgICAgICB0aGlzLmlucyA9IHNlY3Rpb25zW3RoaXMuaSsrXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubGVuID0gMDtcbiAgICAgICAgICAgIHRoaXMuaW5zID0gLTI7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vZmYgPSAwO1xuICAgIH1cbiAgICBnZXQgZG9uZSgpIHsgcmV0dXJuIHRoaXMuaW5zID09IC0yOyB9XG4gICAgZ2V0IGxlbjIoKSB7IHJldHVybiB0aGlzLmlucyA8IDAgPyB0aGlzLmxlbiA6IHRoaXMuaW5zOyB9XG4gICAgZ2V0IHRleHQoKSB7XG4gICAgICAgIGxldCB7IGluc2VydGVkIH0gPSB0aGlzLnNldCwgaW5kZXggPSAodGhpcy5pIC0gMikgPj4gMTtcbiAgICAgICAgcmV0dXJuIGluZGV4ID49IGluc2VydGVkLmxlbmd0aCA/IFRleHQuZW1wdHkgOiBpbnNlcnRlZFtpbmRleF07XG4gICAgfVxuICAgIHRleHRCaXQobGVuKSB7XG4gICAgICAgIGxldCB7IGluc2VydGVkIH0gPSB0aGlzLnNldCwgaW5kZXggPSAodGhpcy5pIC0gMikgPj4gMTtcbiAgICAgICAgcmV0dXJuIGluZGV4ID49IGluc2VydGVkLmxlbmd0aCAmJiAhbGVuID8gVGV4dC5lbXB0eVxuICAgICAgICAgICAgOiBpbnNlcnRlZFtpbmRleF0uc2xpY2UodGhpcy5vZmYsIGxlbiA9PSBudWxsID8gdW5kZWZpbmVkIDogdGhpcy5vZmYgKyBsZW4pO1xuICAgIH1cbiAgICBmb3J3YXJkKGxlbikge1xuICAgICAgICBpZiAobGVuID09IHRoaXMubGVuKVxuICAgICAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sZW4gLT0gbGVuO1xuICAgICAgICAgICAgdGhpcy5vZmYgKz0gbGVuO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvcndhcmQyKGxlbikge1xuICAgICAgICBpZiAodGhpcy5pbnMgPT0gLTEpXG4gICAgICAgICAgICB0aGlzLmZvcndhcmQobGVuKTtcbiAgICAgICAgZWxzZSBpZiAobGVuID09IHRoaXMuaW5zKVxuICAgICAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pbnMgLT0gbGVuO1xuICAgICAgICAgICAgdGhpcy5vZmYgKz0gbGVuO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbkEgc2luZ2xlIHNlbGVjdGlvbiByYW5nZS4gV2hlblxuW2BhbGxvd011bHRpcGxlU2VsZWN0aW9uc2BdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuRWRpdG9yU3RhdGVeYWxsb3dNdWx0aXBsZVNlbGVjdGlvbnMpXG5pcyBlbmFibGVkLCBhIFtzZWxlY3Rpb25dKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuRWRpdG9yU2VsZWN0aW9uKSBtYXkgaG9sZFxubXVsdGlwbGUgcmFuZ2VzLiBCeSBkZWZhdWx0LCBzZWxlY3Rpb25zIGhvbGQgZXhhY3RseSBvbmUgcmFuZ2UuXG4qL1xuY2xhc3MgU2VsZWN0aW9uUmFuZ2Uge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgIFRoZSBsb3dlciBib3VuZGFyeSBvZiB0aGUgcmFuZ2UuXG4gICAgKi9cbiAgICBmcm9tLCBcbiAgICAvKipcbiAgICBUaGUgdXBwZXIgYm91bmRhcnkgb2YgdGhlIHJhbmdlLlxuICAgICovXG4gICAgdG8sIGZsYWdzKSB7XG4gICAgICAgIHRoaXMuZnJvbSA9IGZyb207XG4gICAgICAgIHRoaXMudG8gPSB0bztcbiAgICAgICAgdGhpcy5mbGFncyA9IGZsYWdzO1xuICAgIH1cbiAgICAvKipcbiAgICBUaGUgYW5jaG9yIG9mIHRoZSByYW5nZeKAlHRoZSBzaWRlIHRoYXQgZG9lc24ndCBtb3ZlIHdoZW4geW91XG4gICAgZXh0ZW5kIGl0LlxuICAgICovXG4gICAgZ2V0IGFuY2hvcigpIHsgcmV0dXJuIHRoaXMuZmxhZ3MgJiAzMiAvKiBSYW5nZUZsYWcuSW52ZXJ0ZWQgKi8gPyB0aGlzLnRvIDogdGhpcy5mcm9tOyB9XG4gICAgLyoqXG4gICAgVGhlIGhlYWQgb2YgdGhlIHJhbmdlLCB3aGljaCBpcyBtb3ZlZCB3aGVuIHRoZSByYW5nZSBpc1xuICAgIFtleHRlbmRlZF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5TZWxlY3Rpb25SYW5nZS5leHRlbmQpLlxuICAgICovXG4gICAgZ2V0IGhlYWQoKSB7IHJldHVybiB0aGlzLmZsYWdzICYgMzIgLyogUmFuZ2VGbGFnLkludmVydGVkICovID8gdGhpcy5mcm9tIDogdGhpcy50bzsgfVxuICAgIC8qKlxuICAgIFRydWUgd2hlbiBgYW5jaG9yYCBhbmQgYGhlYWRgIGFyZSBhdCB0aGUgc2FtZSBwb3NpdGlvbi5cbiAgICAqL1xuICAgIGdldCBlbXB0eSgpIHsgcmV0dXJuIHRoaXMuZnJvbSA9PSB0aGlzLnRvOyB9XG4gICAgLyoqXG4gICAgSWYgdGhpcyBpcyBhIGN1cnNvciB0aGF0IGlzIGV4cGxpY2l0bHkgYXNzb2NpYXRlZCB3aXRoIHRoZVxuICAgIGNoYXJhY3RlciBvbiBvbmUgb2YgaXRzIHNpZGVzLCB0aGlzIHJldHVybnMgdGhlIHNpZGUuIC0xIG1lYW5zXG4gICAgdGhlIGNoYXJhY3RlciBiZWZvcmUgaXRzIHBvc2l0aW9uLCAxIHRoZSBjaGFyYWN0ZXIgYWZ0ZXIsIGFuZCAwXG4gICAgbWVhbnMgbm8gYXNzb2NpYXRpb24uXG4gICAgKi9cbiAgICBnZXQgYXNzb2MoKSB7IHJldHVybiB0aGlzLmZsYWdzICYgOCAvKiBSYW5nZUZsYWcuQXNzb2NCZWZvcmUgKi8gPyAtMSA6IHRoaXMuZmxhZ3MgJiAxNiAvKiBSYW5nZUZsYWcuQXNzb2NBZnRlciAqLyA/IDEgOiAwOyB9XG4gICAgLyoqXG4gICAgVGhlIGJpZGlyZWN0aW9uYWwgdGV4dCBsZXZlbCBhc3NvY2lhdGVkIHdpdGggdGhpcyBjdXJzb3IsIGlmXG4gICAgYW55LlxuICAgICovXG4gICAgZ2V0IGJpZGlMZXZlbCgpIHtcbiAgICAgICAgbGV0IGxldmVsID0gdGhpcy5mbGFncyAmIDcgLyogUmFuZ2VGbGFnLkJpZGlMZXZlbE1hc2sgKi87XG4gICAgICAgIHJldHVybiBsZXZlbCA9PSA3ID8gbnVsbCA6IGxldmVsO1xuICAgIH1cbiAgICAvKipcbiAgICBUaGUgZ29hbCBjb2x1bW4gKHN0b3JlZCB2ZXJ0aWNhbCBvZmZzZXQpIGFzc29jaWF0ZWQgd2l0aCBhXG4gICAgY3Vyc29yLiBUaGlzIGlzIHVzZWQgdG8gcHJlc2VydmUgdGhlIHZlcnRpY2FsIHBvc2l0aW9uIHdoZW5cbiAgICBbbW92aW5nXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3ZpZXcuRWRpdG9yVmlldy5tb3ZlVmVydGljYWxseSkgYWNyb3NzXG4gICAgbGluZXMgb2YgZGlmZmVyZW50IGxlbmd0aC5cbiAgICAqL1xuICAgIGdldCBnb2FsQ29sdW1uKCkge1xuICAgICAgICBsZXQgdmFsdWUgPSB0aGlzLmZsYWdzID4+IDYgLyogUmFuZ2VGbGFnLkdvYWxDb2x1bW5PZmZzZXQgKi87XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PSAxNjc3NzIxNSAvKiBSYW5nZUZsYWcuTm9Hb2FsQ29sdW1uICovID8gdW5kZWZpbmVkIDogdmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgIE1hcCB0aGlzIHJhbmdlIHRocm91Z2ggYSBjaGFuZ2UsIHByb2R1Y2luZyBhIHZhbGlkIHJhbmdlIGluIHRoZVxuICAgIHVwZGF0ZWQgZG9jdW1lbnQuXG4gICAgKi9cbiAgICBtYXAoY2hhbmdlLCBhc3NvYyA9IC0xKSB7XG4gICAgICAgIGxldCBmcm9tLCB0bztcbiAgICAgICAgaWYgKHRoaXMuZW1wdHkpIHtcbiAgICAgICAgICAgIGZyb20gPSB0byA9IGNoYW5nZS5tYXBQb3ModGhpcy5mcm9tLCBhc3NvYyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmcm9tID0gY2hhbmdlLm1hcFBvcyh0aGlzLmZyb20sIDEpO1xuICAgICAgICAgICAgdG8gPSBjaGFuZ2UubWFwUG9zKHRoaXMudG8sIC0xKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnJvbSA9PSB0aGlzLmZyb20gJiYgdG8gPT0gdGhpcy50byA/IHRoaXMgOiBuZXcgU2VsZWN0aW9uUmFuZ2UoZnJvbSwgdG8sIHRoaXMuZmxhZ3MpO1xuICAgIH1cbiAgICAvKipcbiAgICBFeHRlbmQgdGhpcyByYW5nZSB0byBjb3ZlciBhdCBsZWFzdCBgZnJvbWAgdG8gYHRvYC5cbiAgICAqL1xuICAgIGV4dGVuZChmcm9tLCB0byA9IGZyb20pIHtcbiAgICAgICAgaWYgKGZyb20gPD0gdGhpcy5hbmNob3IgJiYgdG8gPj0gdGhpcy5hbmNob3IpXG4gICAgICAgICAgICByZXR1cm4gRWRpdG9yU2VsZWN0aW9uLnJhbmdlKGZyb20sIHRvKTtcbiAgICAgICAgbGV0IGhlYWQgPSBNYXRoLmFicyhmcm9tIC0gdGhpcy5hbmNob3IpID4gTWF0aC5hYnModG8gLSB0aGlzLmFuY2hvcikgPyBmcm9tIDogdG87XG4gICAgICAgIHJldHVybiBFZGl0b3JTZWxlY3Rpb24ucmFuZ2UodGhpcy5hbmNob3IsIGhlYWQpO1xuICAgIH1cbiAgICAvKipcbiAgICBDb21wYXJlIHRoaXMgcmFuZ2UgdG8gYW5vdGhlciByYW5nZS5cbiAgICAqL1xuICAgIGVxKG90aGVyLCBpbmNsdWRlQXNzb2MgPSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hbmNob3IgPT0gb3RoZXIuYW5jaG9yICYmIHRoaXMuaGVhZCA9PSBvdGhlci5oZWFkICYmXG4gICAgICAgICAgICAoIWluY2x1ZGVBc3NvYyB8fCAhdGhpcy5lbXB0eSB8fCB0aGlzLmFzc29jID09IG90aGVyLmFzc29jKTtcbiAgICB9XG4gICAgLyoqXG4gICAgUmV0dXJuIGEgSlNPTi1zZXJpYWxpemFibGUgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgcmFuZ2UuXG4gICAgKi9cbiAgICB0b0pTT04oKSB7IHJldHVybiB7IGFuY2hvcjogdGhpcy5hbmNob3IsIGhlYWQ6IHRoaXMuaGVhZCB9OyB9XG4gICAgLyoqXG4gICAgQ29udmVydCBhIEpTT04gcmVwcmVzZW50YXRpb24gb2YgYSByYW5nZSB0byBhIGBTZWxlY3Rpb25SYW5nZWBcbiAgICBpbnN0YW5jZS5cbiAgICAqL1xuICAgIHN0YXRpYyBmcm9tSlNPTihqc29uKSB7XG4gICAgICAgIGlmICghanNvbiB8fCB0eXBlb2YganNvbi5hbmNob3IgIT0gXCJudW1iZXJcIiB8fCB0eXBlb2YganNvbi5oZWFkICE9IFwibnVtYmVyXCIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludmFsaWQgSlNPTiByZXByZXNlbnRhdGlvbiBmb3IgU2VsZWN0aW9uUmFuZ2VcIik7XG4gICAgICAgIHJldHVybiBFZGl0b3JTZWxlY3Rpb24ucmFuZ2UoanNvbi5hbmNob3IsIGpzb24uaGVhZCk7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgc3RhdGljIGNyZWF0ZShmcm9tLCB0bywgZmxhZ3MpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTZWxlY3Rpb25SYW5nZShmcm9tLCB0bywgZmxhZ3MpO1xuICAgIH1cbn1cbi8qKlxuQW4gZWRpdG9yIHNlbGVjdGlvbiBob2xkcyBvbmUgb3IgbW9yZSBzZWxlY3Rpb24gcmFuZ2VzLlxuKi9cbmNsYXNzIEVkaXRvclNlbGVjdGlvbiB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgVGhlIHJhbmdlcyBpbiB0aGUgc2VsZWN0aW9uLCBzb3J0ZWQgYnkgcG9zaXRpb24uIFJhbmdlcyBjYW5ub3RcbiAgICBvdmVybGFwIChidXQgdGhleSBtYXkgdG91Y2gsIGlmIHRoZXkgYXJlbid0IGVtcHR5KS5cbiAgICAqL1xuICAgIHJhbmdlcywgXG4gICAgLyoqXG4gICAgVGhlIGluZGV4IG9mIHRoZSBfbWFpbl8gcmFuZ2UgaW4gdGhlIHNlbGVjdGlvbiAod2hpY2ggaXNcbiAgICB1c3VhbGx5IHRoZSByYW5nZSB0aGF0IHdhcyBhZGRlZCBsYXN0KS5cbiAgICAqL1xuICAgIG1haW5JbmRleCkge1xuICAgICAgICB0aGlzLnJhbmdlcyA9IHJhbmdlcztcbiAgICAgICAgdGhpcy5tYWluSW5kZXggPSBtYWluSW5kZXg7XG4gICAgfVxuICAgIC8qKlxuICAgIE1hcCBhIHNlbGVjdGlvbiB0aHJvdWdoIGEgY2hhbmdlLiBVc2VkIHRvIGFkanVzdCB0aGUgc2VsZWN0aW9uXG4gICAgcG9zaXRpb24gZm9yIGNoYW5nZXMuXG4gICAgKi9cbiAgICBtYXAoY2hhbmdlLCBhc3NvYyA9IC0xKSB7XG4gICAgICAgIGlmIChjaGFuZ2UuZW1wdHkpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgcmV0dXJuIEVkaXRvclNlbGVjdGlvbi5jcmVhdGUodGhpcy5yYW5nZXMubWFwKHIgPT4gci5tYXAoY2hhbmdlLCBhc3NvYykpLCB0aGlzLm1haW5JbmRleCk7XG4gICAgfVxuICAgIC8qKlxuICAgIENvbXBhcmUgdGhpcyBzZWxlY3Rpb24gdG8gYW5vdGhlciBzZWxlY3Rpb24uIEJ5IGRlZmF1bHQsIHJhbmdlc1xuICAgIGFyZSBjb21wYXJlZCBvbmx5IGJ5IHBvc2l0aW9uLiBXaGVuIGBpbmNsdWRlQXNzb2NgIGlzIHRydWUsXG4gICAgY3Vyc29yIHJhbmdlcyBtdXN0IGFsc28gaGF2ZSB0aGUgc2FtZVxuICAgIFtgYXNzb2NgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLlNlbGVjdGlvblJhbmdlLmFzc29jKSB2YWx1ZS5cbiAgICAqL1xuICAgIGVxKG90aGVyLCBpbmNsdWRlQXNzb2MgPSBmYWxzZSkge1xuICAgICAgICBpZiAodGhpcy5yYW5nZXMubGVuZ3RoICE9IG90aGVyLnJhbmdlcy5sZW5ndGggfHxcbiAgICAgICAgICAgIHRoaXMubWFpbkluZGV4ICE9IG90aGVyLm1haW5JbmRleClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJhbmdlcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGlmICghdGhpcy5yYW5nZXNbaV0uZXEob3RoZXIucmFuZ2VzW2ldLCBpbmNsdWRlQXNzb2MpKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgIEdldCB0aGUgcHJpbWFyeSBzZWxlY3Rpb24gcmFuZ2UuIFVzdWFsbHksIHlvdSBzaG91bGQgbWFrZSBzdXJlXG4gICAgeW91ciBjb2RlIGFwcGxpZXMgdG8gX2FsbF8gcmFuZ2VzLCBieSB1c2luZyBtZXRob2RzIGxpa2VcbiAgICBbYGNoYW5nZUJ5UmFuZ2VgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLkVkaXRvclN0YXRlLmNoYW5nZUJ5UmFuZ2UpLlxuICAgICovXG4gICAgZ2V0IG1haW4oKSB7IHJldHVybiB0aGlzLnJhbmdlc1t0aGlzLm1haW5JbmRleF07IH1cbiAgICAvKipcbiAgICBNYWtlIHN1cmUgdGhlIHNlbGVjdGlvbiBvbmx5IGhhcyBvbmUgcmFuZ2UuIFJldHVybnMgYSBzZWxlY3Rpb25cbiAgICBob2xkaW5nIG9ubHkgdGhlIG1haW4gcmFuZ2UgZnJvbSB0aGlzIHNlbGVjdGlvbi5cbiAgICAqL1xuICAgIGFzU2luZ2xlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yYW5nZXMubGVuZ3RoID09IDEgPyB0aGlzIDogbmV3IEVkaXRvclNlbGVjdGlvbihbdGhpcy5tYWluXSwgMCk7XG4gICAgfVxuICAgIC8qKlxuICAgIEV4dGVuZCB0aGlzIHNlbGVjdGlvbiB3aXRoIGFuIGV4dHJhIHJhbmdlLlxuICAgICovXG4gICAgYWRkUmFuZ2UocmFuZ2UsIG1haW4gPSB0cnVlKSB7XG4gICAgICAgIHJldHVybiBFZGl0b3JTZWxlY3Rpb24uY3JlYXRlKFtyYW5nZV0uY29uY2F0KHRoaXMucmFuZ2VzKSwgbWFpbiA/IDAgOiB0aGlzLm1haW5JbmRleCArIDEpO1xuICAgIH1cbiAgICAvKipcbiAgICBSZXBsYWNlIGEgZ2l2ZW4gcmFuZ2Ugd2l0aCBhbm90aGVyIHJhbmdlLCBhbmQgdGhlbiBub3JtYWxpemUgdGhlXG4gICAgc2VsZWN0aW9uIHRvIG1lcmdlIGFuZCBzb3J0IHJhbmdlcyBpZiBuZWNlc3NhcnkuXG4gICAgKi9cbiAgICByZXBsYWNlUmFuZ2UocmFuZ2UsIHdoaWNoID0gdGhpcy5tYWluSW5kZXgpIHtcbiAgICAgICAgbGV0IHJhbmdlcyA9IHRoaXMucmFuZ2VzLnNsaWNlKCk7XG4gICAgICAgIHJhbmdlc1t3aGljaF0gPSByYW5nZTtcbiAgICAgICAgcmV0dXJuIEVkaXRvclNlbGVjdGlvbi5jcmVhdGUocmFuZ2VzLCB0aGlzLm1haW5JbmRleCk7XG4gICAgfVxuICAgIC8qKlxuICAgIENvbnZlcnQgdGhpcyBzZWxlY3Rpb24gdG8gYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHNlcmlhbGl6ZWQgdG9cbiAgICBKU09OLlxuICAgICovXG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4geyByYW5nZXM6IHRoaXMucmFuZ2VzLm1hcChyID0+IHIudG9KU09OKCkpLCBtYWluOiB0aGlzLm1haW5JbmRleCB9O1xuICAgIH1cbiAgICAvKipcbiAgICBDcmVhdGUgYSBzZWxlY3Rpb24gZnJvbSBhIEpTT04gcmVwcmVzZW50YXRpb24uXG4gICAgKi9cbiAgICBzdGF0aWMgZnJvbUpTT04oanNvbikge1xuICAgICAgICBpZiAoIWpzb24gfHwgIUFycmF5LmlzQXJyYXkoanNvbi5yYW5nZXMpIHx8IHR5cGVvZiBqc29uLm1haW4gIT0gXCJudW1iZXJcIiB8fCBqc29uLm1haW4gPj0ganNvbi5yYW5nZXMubGVuZ3RoKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIEpTT04gcmVwcmVzZW50YXRpb24gZm9yIEVkaXRvclNlbGVjdGlvblwiKTtcbiAgICAgICAgcmV0dXJuIG5ldyBFZGl0b3JTZWxlY3Rpb24oanNvbi5yYW5nZXMubWFwKChyKSA9PiBTZWxlY3Rpb25SYW5nZS5mcm9tSlNPTihyKSksIGpzb24ubWFpbik7XG4gICAgfVxuICAgIC8qKlxuICAgIENyZWF0ZSBhIHNlbGVjdGlvbiBob2xkaW5nIGEgc2luZ2xlIHJhbmdlLlxuICAgICovXG4gICAgc3RhdGljIHNpbmdsZShhbmNob3IsIGhlYWQgPSBhbmNob3IpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFZGl0b3JTZWxlY3Rpb24oW0VkaXRvclNlbGVjdGlvbi5yYW5nZShhbmNob3IsIGhlYWQpXSwgMCk7XG4gICAgfVxuICAgIC8qKlxuICAgIFNvcnQgYW5kIG1lcmdlIHRoZSBnaXZlbiBzZXQgb2YgcmFuZ2VzLCBjcmVhdGluZyBhIHZhbGlkXG4gICAgc2VsZWN0aW9uLlxuICAgICovXG4gICAgc3RhdGljIGNyZWF0ZShyYW5nZXMsIG1haW5JbmRleCA9IDApIHtcbiAgICAgICAgaWYgKHJhbmdlcy5sZW5ndGggPT0gMClcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiQSBzZWxlY3Rpb24gbmVlZHMgYXQgbGVhc3Qgb25lIHJhbmdlXCIpO1xuICAgICAgICBmb3IgKGxldCBwb3MgPSAwLCBpID0gMDsgaSA8IHJhbmdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHJhbmdlID0gcmFuZ2VzW2ldO1xuICAgICAgICAgICAgaWYgKHJhbmdlLmVtcHR5ID8gcmFuZ2UuZnJvbSA8PSBwb3MgOiByYW5nZS5mcm9tIDwgcG9zKVxuICAgICAgICAgICAgICAgIHJldHVybiBFZGl0b3JTZWxlY3Rpb24ubm9ybWFsaXplZChyYW5nZXMuc2xpY2UoKSwgbWFpbkluZGV4KTtcbiAgICAgICAgICAgIHBvcyA9IHJhbmdlLnRvO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgRWRpdG9yU2VsZWN0aW9uKHJhbmdlcywgbWFpbkluZGV4KTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgY3Vyc29yIHNlbGVjdGlvbiByYW5nZSBhdCB0aGUgZ2l2ZW4gcG9zaXRpb24uIFlvdSBjYW5cbiAgICBzYWZlbHkgaWdub3JlIHRoZSBvcHRpb25hbCBhcmd1bWVudHMgaW4gbW9zdCBzaXR1YXRpb25zLlxuICAgICovXG4gICAgc3RhdGljIGN1cnNvcihwb3MsIGFzc29jID0gMCwgYmlkaUxldmVsLCBnb2FsQ29sdW1uKSB7XG4gICAgICAgIHJldHVybiBTZWxlY3Rpb25SYW5nZS5jcmVhdGUocG9zLCBwb3MsIChhc3NvYyA9PSAwID8gMCA6IGFzc29jIDwgMCA/IDggLyogUmFuZ2VGbGFnLkFzc29jQmVmb3JlICovIDogMTYgLyogUmFuZ2VGbGFnLkFzc29jQWZ0ZXIgKi8pIHxcbiAgICAgICAgICAgIChiaWRpTGV2ZWwgPT0gbnVsbCA/IDcgOiBNYXRoLm1pbig2LCBiaWRpTGV2ZWwpKSB8XG4gICAgICAgICAgICAoKGdvYWxDb2x1bW4gIT09IG51bGwgJiYgZ29hbENvbHVtbiAhPT0gdm9pZCAwID8gZ29hbENvbHVtbiA6IDE2Nzc3MjE1IC8qIFJhbmdlRmxhZy5Ob0dvYWxDb2x1bW4gKi8pIDw8IDYgLyogUmFuZ2VGbGFnLkdvYWxDb2x1bW5PZmZzZXQgKi8pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgc2VsZWN0aW9uIHJhbmdlLlxuICAgICovXG4gICAgc3RhdGljIHJhbmdlKGFuY2hvciwgaGVhZCwgZ29hbENvbHVtbiwgYmlkaUxldmVsKSB7XG4gICAgICAgIGxldCBmbGFncyA9ICgoZ29hbENvbHVtbiAhPT0gbnVsbCAmJiBnb2FsQ29sdW1uICE9PSB2b2lkIDAgPyBnb2FsQ29sdW1uIDogMTY3NzcyMTUgLyogUmFuZ2VGbGFnLk5vR29hbENvbHVtbiAqLykgPDwgNiAvKiBSYW5nZUZsYWcuR29hbENvbHVtbk9mZnNldCAqLykgfFxuICAgICAgICAgICAgKGJpZGlMZXZlbCA9PSBudWxsID8gNyA6IE1hdGgubWluKDYsIGJpZGlMZXZlbCkpO1xuICAgICAgICByZXR1cm4gaGVhZCA8IGFuY2hvciA/IFNlbGVjdGlvblJhbmdlLmNyZWF0ZShoZWFkLCBhbmNob3IsIDMyIC8qIFJhbmdlRmxhZy5JbnZlcnRlZCAqLyB8IDE2IC8qIFJhbmdlRmxhZy5Bc3NvY0FmdGVyICovIHwgZmxhZ3MpXG4gICAgICAgICAgICA6IFNlbGVjdGlvblJhbmdlLmNyZWF0ZShhbmNob3IsIGhlYWQsIChoZWFkID4gYW5jaG9yID8gOCAvKiBSYW5nZUZsYWcuQXNzb2NCZWZvcmUgKi8gOiAwKSB8IGZsYWdzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBzdGF0aWMgbm9ybWFsaXplZChyYW5nZXMsIG1haW5JbmRleCA9IDApIHtcbiAgICAgICAgbGV0IG1haW4gPSByYW5nZXNbbWFpbkluZGV4XTtcbiAgICAgICAgcmFuZ2VzLnNvcnQoKGEsIGIpID0+IGEuZnJvbSAtIGIuZnJvbSk7XG4gICAgICAgIG1haW5JbmRleCA9IHJhbmdlcy5pbmRleE9mKG1haW4pO1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHJhbmdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHJhbmdlID0gcmFuZ2VzW2ldLCBwcmV2ID0gcmFuZ2VzW2kgLSAxXTtcbiAgICAgICAgICAgIGlmIChyYW5nZS5lbXB0eSA/IHJhbmdlLmZyb20gPD0gcHJldi50byA6IHJhbmdlLmZyb20gPCBwcmV2LnRvKSB7XG4gICAgICAgICAgICAgICAgbGV0IGZyb20gPSBwcmV2LmZyb20sIHRvID0gTWF0aC5tYXgocmFuZ2UudG8sIHByZXYudG8pO1xuICAgICAgICAgICAgICAgIGlmIChpIDw9IG1haW5JbmRleClcbiAgICAgICAgICAgICAgICAgICAgbWFpbkluZGV4LS07XG4gICAgICAgICAgICAgICAgcmFuZ2VzLnNwbGljZSgtLWksIDIsIHJhbmdlLmFuY2hvciA+IHJhbmdlLmhlYWQgPyBFZGl0b3JTZWxlY3Rpb24ucmFuZ2UodG8sIGZyb20pIDogRWRpdG9yU2VsZWN0aW9uLnJhbmdlKGZyb20sIHRvKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBFZGl0b3JTZWxlY3Rpb24ocmFuZ2VzLCBtYWluSW5kZXgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNoZWNrU2VsZWN0aW9uKHNlbGVjdGlvbiwgZG9jTGVuZ3RoKSB7XG4gICAgZm9yIChsZXQgcmFuZ2Ugb2Ygc2VsZWN0aW9uLnJhbmdlcylcbiAgICAgICAgaWYgKHJhbmdlLnRvID4gZG9jTGVuZ3RoKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJTZWxlY3Rpb24gcG9pbnRzIG91dHNpZGUgb2YgZG9jdW1lbnRcIik7XG59XG5cbmxldCBuZXh0SUQgPSAwO1xuLyoqXG5BIGZhY2V0IGlzIGEgbGFiZWxlZCB2YWx1ZSB0aGF0IGlzIGFzc29jaWF0ZWQgd2l0aCBhbiBlZGl0b3JcbnN0YXRlLiBJdCB0YWtlcyBpbnB1dHMgZnJvbSBhbnkgbnVtYmVyIG9mIGV4dGVuc2lvbnMsIGFuZCBjb21iaW5lc1xudGhvc2UgaW50byBhIHNpbmdsZSBvdXRwdXQgdmFsdWUuXG5cbkV4YW1wbGVzIG9mIHVzZXMgb2YgZmFjZXRzIGFyZSB0aGUgW3RhYlxuc2l6ZV0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5FZGl0b3JTdGF0ZV50YWJTaXplKSwgW2VkaXRvclxuYXR0cmlidXRlc10oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyN2aWV3LkVkaXRvclZpZXdeZWRpdG9yQXR0cmlidXRlcyksIGFuZCBbdXBkYXRlXG5saXN0ZW5lcnNdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jdmlldy5FZGl0b3JWaWV3XnVwZGF0ZUxpc3RlbmVyKS5cblxuTm90ZSB0aGF0IGBGYWNldGAgaW5zdGFuY2VzIGNhbiBiZSB1c2VkIGFueXdoZXJlIHdoZXJlXG5bYEZhY2V0UmVhZGVyYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5GYWNldFJlYWRlcikgaXMgZXhwZWN0ZWQuXG4qL1xuY2xhc3MgRmFjZXQge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgY29tYmluZSwgXG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBjb21wYXJlSW5wdXQsIFxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgY29tcGFyZSwgaXNTdGF0aWMsIGVuYWJsZXMpIHtcbiAgICAgICAgdGhpcy5jb21iaW5lID0gY29tYmluZTtcbiAgICAgICAgdGhpcy5jb21wYXJlSW5wdXQgPSBjb21wYXJlSW5wdXQ7XG4gICAgICAgIHRoaXMuY29tcGFyZSA9IGNvbXBhcmU7XG4gICAgICAgIHRoaXMuaXNTdGF0aWMgPSBpc1N0YXRpYztcbiAgICAgICAgLyoqXG4gICAgICAgIEBpbnRlcm5hbFxuICAgICAgICAqL1xuICAgICAgICB0aGlzLmlkID0gbmV4dElEKys7XG4gICAgICAgIHRoaXMuZGVmYXVsdCA9IGNvbWJpbmUoW10pO1xuICAgICAgICB0aGlzLmV4dGVuc2lvbnMgPSB0eXBlb2YgZW5hYmxlcyA9PSBcImZ1bmN0aW9uXCIgPyBlbmFibGVzKHRoaXMpIDogZW5hYmxlcztcbiAgICB9XG4gICAgLyoqXG4gICAgUmV0dXJucyBhIGZhY2V0IHJlYWRlciBmb3IgdGhpcyBmYWNldCwgd2hpY2ggY2FuIGJlIHVzZWQgdG9cbiAgICBbcmVhZF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5FZGl0b3JTdGF0ZS5mYWNldCkgaXQgYnV0IG5vdCB0byBkZWZpbmUgdmFsdWVzIGZvciBpdC5cbiAgICAqL1xuICAgIGdldCByZWFkZXIoKSB7IHJldHVybiB0aGlzOyB9XG4gICAgLyoqXG4gICAgRGVmaW5lIGEgbmV3IGZhY2V0LlxuICAgICovXG4gICAgc3RhdGljIGRlZmluZShjb25maWcgPSB7fSkge1xuICAgICAgICByZXR1cm4gbmV3IEZhY2V0KGNvbmZpZy5jb21iaW5lIHx8ICgoYSkgPT4gYSksIGNvbmZpZy5jb21wYXJlSW5wdXQgfHwgKChhLCBiKSA9PiBhID09PSBiKSwgY29uZmlnLmNvbXBhcmUgfHwgKCFjb25maWcuY29tYmluZSA/IHNhbWVBcnJheSA6IChhLCBiKSA9PiBhID09PSBiKSwgISFjb25maWcuc3RhdGljLCBjb25maWcuZW5hYmxlcyk7XG4gICAgfVxuICAgIC8qKlxuICAgIFJldHVybnMgYW4gZXh0ZW5zaW9uIHRoYXQgYWRkcyB0aGUgZ2l2ZW4gdmFsdWUgdG8gdGhpcyBmYWNldC5cbiAgICAqL1xuICAgIG9mKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBuZXcgRmFjZXRQcm92aWRlcihbXSwgdGhpcywgMCAvKiBQcm92aWRlci5TdGF0aWMgKi8sIHZhbHVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ3JlYXRlIGFuIGV4dGVuc2lvbiB0aGF0IGNvbXB1dGVzIGEgdmFsdWUgZm9yIHRoZSBmYWNldCBmcm9tIGFcbiAgICBzdGF0ZS4gWW91IG11c3QgdGFrZSBjYXJlIHRvIGRlY2xhcmUgdGhlIHBhcnRzIG9mIHRoZSBzdGF0ZSB0aGF0XG4gICAgdGhpcyB2YWx1ZSBkZXBlbmRzIG9uLCBzaW5jZSB5b3VyIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkIGFnYWluXG4gICAgZm9yIGEgbmV3IHN0YXRlIHdoZW4gb25lIG9mIHRob3NlIHBhcnRzIGNoYW5nZWQuXG4gICAgXG4gICAgSW4gY2FzZXMgd2hlcmUgeW91ciB2YWx1ZSBkZXBlbmRzIG9ubHkgb24gYSBzaW5nbGUgZmllbGQsIHlvdSdsbFxuICAgIHdhbnQgdG8gdXNlIHRoZSBbYGZyb21gXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLkZhY2V0LmZyb20pIG1ldGhvZCBpbnN0ZWFkLlxuICAgICovXG4gICAgY29tcHV0ZShkZXBzLCBnZXQpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdGF0aWMpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBjb21wdXRlIGEgc3RhdGljIGZhY2V0XCIpO1xuICAgICAgICByZXR1cm4gbmV3IEZhY2V0UHJvdmlkZXIoZGVwcywgdGhpcywgMSAvKiBQcm92aWRlci5TaW5nbGUgKi8sIGdldCk7XG4gICAgfVxuICAgIC8qKlxuICAgIENyZWF0ZSBhbiBleHRlbnNpb24gdGhhdCBjb21wdXRlcyB6ZXJvIG9yIG1vcmUgdmFsdWVzIGZvciB0aGlzXG4gICAgZmFjZXQgZnJvbSBhIHN0YXRlLlxuICAgICovXG4gICAgY29tcHV0ZU4oZGVwcywgZ2V0KSB7XG4gICAgICAgIGlmICh0aGlzLmlzU3RhdGljKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3QgY29tcHV0ZSBhIHN0YXRpYyBmYWNldFwiKTtcbiAgICAgICAgcmV0dXJuIG5ldyBGYWNldFByb3ZpZGVyKGRlcHMsIHRoaXMsIDIgLyogUHJvdmlkZXIuTXVsdGkgKi8sIGdldCk7XG4gICAgfVxuICAgIGZyb20oZmllbGQsIGdldCkge1xuICAgICAgICBpZiAoIWdldClcbiAgICAgICAgICAgIGdldCA9IHggPT4geDtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcHV0ZShbZmllbGRdLCBzdGF0ZSA9PiBnZXQoc3RhdGUuZmllbGQoZmllbGQpKSk7XG4gICAgfVxufVxuZnVuY3Rpb24gc2FtZUFycmF5KGEsIGIpIHtcbiAgICByZXR1cm4gYSA9PSBiIHx8IGEubGVuZ3RoID09IGIubGVuZ3RoICYmIGEuZXZlcnkoKGUsIGkpID0+IGUgPT09IGJbaV0pO1xufVxuY2xhc3MgRmFjZXRQcm92aWRlciB7XG4gICAgY29uc3RydWN0b3IoZGVwZW5kZW5jaWVzLCBmYWNldCwgdHlwZSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5kZXBlbmRlbmNpZXMgPSBkZXBlbmRlbmNpZXM7XG4gICAgICAgIHRoaXMuZmFjZXQgPSBmYWNldDtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmlkID0gbmV4dElEKys7XG4gICAgfVxuICAgIGR5bmFtaWNTbG90KGFkZHJlc3Nlcykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGxldCBnZXR0ZXIgPSB0aGlzLnZhbHVlO1xuICAgICAgICBsZXQgY29tcGFyZSA9IHRoaXMuZmFjZXQuY29tcGFyZUlucHV0O1xuICAgICAgICBsZXQgaWQgPSB0aGlzLmlkLCBpZHggPSBhZGRyZXNzZXNbaWRdID4+IDEsIG11bHRpID0gdGhpcy50eXBlID09IDIgLyogUHJvdmlkZXIuTXVsdGkgKi87XG4gICAgICAgIGxldCBkZXBEb2MgPSBmYWxzZSwgZGVwU2VsID0gZmFsc2UsIGRlcEFkZHJzID0gW107XG4gICAgICAgIGZvciAobGV0IGRlcCBvZiB0aGlzLmRlcGVuZGVuY2llcykge1xuICAgICAgICAgICAgaWYgKGRlcCA9PSBcImRvY1wiKVxuICAgICAgICAgICAgICAgIGRlcERvYyA9IHRydWU7XG4gICAgICAgICAgICBlbHNlIGlmIChkZXAgPT0gXCJzZWxlY3Rpb25cIilcbiAgICAgICAgICAgICAgICBkZXBTZWwgPSB0cnVlO1xuICAgICAgICAgICAgZWxzZSBpZiAoKCgoX2EgPSBhZGRyZXNzZXNbZGVwLmlkXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMSkgJiAxKSA9PSAwKVxuICAgICAgICAgICAgICAgIGRlcEFkZHJzLnB1c2goYWRkcmVzc2VzW2RlcC5pZF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjcmVhdGUoc3RhdGUpIHtcbiAgICAgICAgICAgICAgICBzdGF0ZS52YWx1ZXNbaWR4XSA9IGdldHRlcihzdGF0ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDEgLyogU2xvdFN0YXR1cy5DaGFuZ2VkICovO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHVwZGF0ZShzdGF0ZSwgdHIpIHtcbiAgICAgICAgICAgICAgICBpZiAoKGRlcERvYyAmJiB0ci5kb2NDaGFuZ2VkKSB8fCAoZGVwU2VsICYmICh0ci5kb2NDaGFuZ2VkIHx8IHRyLnNlbGVjdGlvbikpIHx8IGVuc3VyZUFsbChzdGF0ZSwgZGVwQWRkcnMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXdWYWwgPSBnZXR0ZXIoc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobXVsdGkgPyAhY29tcGFyZUFycmF5KG5ld1ZhbCwgc3RhdGUudmFsdWVzW2lkeF0sIGNvbXBhcmUpIDogIWNvbXBhcmUobmV3VmFsLCBzdGF0ZS52YWx1ZXNbaWR4XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLnZhbHVlc1tpZHhdID0gbmV3VmFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDEgLyogU2xvdFN0YXR1cy5DaGFuZ2VkICovO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlY29uZmlndXJlOiAoc3RhdGUsIG9sZFN0YXRlKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IG5ld1ZhbCwgb2xkQWRkciA9IG9sZFN0YXRlLmNvbmZpZy5hZGRyZXNzW2lkXTtcbiAgICAgICAgICAgICAgICBpZiAob2xkQWRkciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBvbGRWYWwgPSBnZXRBZGRyKG9sZFN0YXRlLCBvbGRBZGRyKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVwZW5kZW5jaWVzLmV2ZXJ5KGRlcCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVwIGluc3RhbmNlb2YgRmFjZXQgPyBvbGRTdGF0ZS5mYWNldChkZXApID09PSBzdGF0ZS5mYWNldChkZXApIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXAgaW5zdGFuY2VvZiBTdGF0ZUZpZWxkID8gb2xkU3RhdGUuZmllbGQoZGVwLCBmYWxzZSkgPT0gc3RhdGUuZmllbGQoZGVwLCBmYWxzZSkgOiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9KSB8fCAobXVsdGkgPyBjb21wYXJlQXJyYXkobmV3VmFsID0gZ2V0dGVyKHN0YXRlKSwgb2xkVmFsLCBjb21wYXJlKSA6IGNvbXBhcmUobmV3VmFsID0gZ2V0dGVyKHN0YXRlKSwgb2xkVmFsKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLnZhbHVlc1tpZHhdID0gb2xkVmFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbCA9IGdldHRlcihzdGF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0YXRlLnZhbHVlc1tpZHhdID0gbmV3VmFsO1xuICAgICAgICAgICAgICAgIHJldHVybiAxIC8qIFNsb3RTdGF0dXMuQ2hhbmdlZCAqLztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG59XG5mdW5jdGlvbiBjb21wYXJlQXJyYXkoYSwgYiwgY29tcGFyZSkge1xuICAgIGlmIChhLmxlbmd0aCAhPSBiLmxlbmd0aClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKylcbiAgICAgICAgaWYgKCFjb21wYXJlKGFbaV0sIGJbaV0pKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gZW5zdXJlQWxsKHN0YXRlLCBhZGRycykge1xuICAgIGxldCBjaGFuZ2VkID0gZmFsc2U7XG4gICAgZm9yIChsZXQgYWRkciBvZiBhZGRycylcbiAgICAgICAgaWYgKGVuc3VyZUFkZHIoc3RhdGUsIGFkZHIpICYgMSAvKiBTbG90U3RhdHVzLkNoYW5nZWQgKi8pXG4gICAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICByZXR1cm4gY2hhbmdlZDtcbn1cbmZ1bmN0aW9uIGR5bmFtaWNGYWNldFNsb3QoYWRkcmVzc2VzLCBmYWNldCwgcHJvdmlkZXJzKSB7XG4gICAgbGV0IHByb3ZpZGVyQWRkcnMgPSBwcm92aWRlcnMubWFwKHAgPT4gYWRkcmVzc2VzW3AuaWRdKTtcbiAgICBsZXQgcHJvdmlkZXJUeXBlcyA9IHByb3ZpZGVycy5tYXAocCA9PiBwLnR5cGUpO1xuICAgIGxldCBkeW5hbWljID0gcHJvdmlkZXJBZGRycy5maWx0ZXIocCA9PiAhKHAgJiAxKSk7XG4gICAgbGV0IGlkeCA9IGFkZHJlc3Nlc1tmYWNldC5pZF0gPj4gMTtcbiAgICBmdW5jdGlvbiBnZXQoc3RhdGUpIHtcbiAgICAgICAgbGV0IHZhbHVlcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb3ZpZGVyQWRkcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IGdldEFkZHIoc3RhdGUsIHByb3ZpZGVyQWRkcnNbaV0pO1xuICAgICAgICAgICAgaWYgKHByb3ZpZGVyVHlwZXNbaV0gPT0gMiAvKiBQcm92aWRlci5NdWx0aSAqLylcbiAgICAgICAgICAgICAgICBmb3IgKGxldCB2YWwgb2YgdmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKHZhbCk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWNldC5jb21iaW5lKHZhbHVlcyk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGNyZWF0ZShzdGF0ZSkge1xuICAgICAgICAgICAgZm9yIChsZXQgYWRkciBvZiBwcm92aWRlckFkZHJzKVxuICAgICAgICAgICAgICAgIGVuc3VyZUFkZHIoc3RhdGUsIGFkZHIpO1xuICAgICAgICAgICAgc3RhdGUudmFsdWVzW2lkeF0gPSBnZXQoc3RhdGUpO1xuICAgICAgICAgICAgcmV0dXJuIDEgLyogU2xvdFN0YXR1cy5DaGFuZ2VkICovO1xuICAgICAgICB9LFxuICAgICAgICB1cGRhdGUoc3RhdGUsIHRyKSB7XG4gICAgICAgICAgICBpZiAoIWVuc3VyZUFsbChzdGF0ZSwgZHluYW1pYykpXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBnZXQoc3RhdGUpO1xuICAgICAgICAgICAgaWYgKGZhY2V0LmNvbXBhcmUodmFsdWUsIHN0YXRlLnZhbHVlc1tpZHhdKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIHN0YXRlLnZhbHVlc1tpZHhdID0gdmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gMSAvKiBTbG90U3RhdHVzLkNoYW5nZWQgKi87XG4gICAgICAgIH0sXG4gICAgICAgIHJlY29uZmlndXJlKHN0YXRlLCBvbGRTdGF0ZSkge1xuICAgICAgICAgICAgbGV0IGRlcENoYW5nZWQgPSBlbnN1cmVBbGwoc3RhdGUsIHByb3ZpZGVyQWRkcnMpO1xuICAgICAgICAgICAgbGV0IG9sZFByb3ZpZGVycyA9IG9sZFN0YXRlLmNvbmZpZy5mYWNldHNbZmFjZXQuaWRdLCBvbGRWYWx1ZSA9IG9sZFN0YXRlLmZhY2V0KGZhY2V0KTtcbiAgICAgICAgICAgIGlmIChvbGRQcm92aWRlcnMgJiYgIWRlcENoYW5nZWQgJiYgc2FtZUFycmF5KHByb3ZpZGVycywgb2xkUHJvdmlkZXJzKSkge1xuICAgICAgICAgICAgICAgIHN0YXRlLnZhbHVlc1tpZHhdID0gb2xkVmFsdWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBnZXQoc3RhdGUpO1xuICAgICAgICAgICAgaWYgKGZhY2V0LmNvbXBhcmUodmFsdWUsIG9sZFZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHN0YXRlLnZhbHVlc1tpZHhdID0gb2xkVmFsdWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGF0ZS52YWx1ZXNbaWR4XSA9IHZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIDEgLyogU2xvdFN0YXR1cy5DaGFuZ2VkICovO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmNvbnN0IGluaXRGaWVsZCA9IEZhY2V0LmRlZmluZSh7IHN0YXRpYzogdHJ1ZSB9KTtcbi8qKlxuRmllbGRzIGNhbiBzdG9yZSBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGluIGFuIGVkaXRvciBzdGF0ZSwgYW5kXG5rZWVwIGl0IGluIHN5bmMgd2l0aCB0aGUgcmVzdCBvZiB0aGUgc3RhdGUuXG4qL1xuY2xhc3MgU3RhdGVGaWVsZCB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBpZCwgY3JlYXRlRiwgdXBkYXRlRiwgY29tcGFyZUYsIFxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgc3BlYykge1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMuY3JlYXRlRiA9IGNyZWF0ZUY7XG4gICAgICAgIHRoaXMudXBkYXRlRiA9IHVwZGF0ZUY7XG4gICAgICAgIHRoaXMuY29tcGFyZUYgPSBjb21wYXJlRjtcbiAgICAgICAgdGhpcy5zcGVjID0gc3BlYztcbiAgICAgICAgLyoqXG4gICAgICAgIEBpbnRlcm5hbFxuICAgICAgICAqL1xuICAgICAgICB0aGlzLnByb3ZpZGVzID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvKipcbiAgICBEZWZpbmUgYSBzdGF0ZSBmaWVsZC5cbiAgICAqL1xuICAgIHN0YXRpYyBkZWZpbmUoY29uZmlnKSB7XG4gICAgICAgIGxldCBmaWVsZCA9IG5ldyBTdGF0ZUZpZWxkKG5leHRJRCsrLCBjb25maWcuY3JlYXRlLCBjb25maWcudXBkYXRlLCBjb25maWcuY29tcGFyZSB8fCAoKGEsIGIpID0+IGEgPT09IGIpLCBjb25maWcpO1xuICAgICAgICBpZiAoY29uZmlnLnByb3ZpZGUpXG4gICAgICAgICAgICBmaWVsZC5wcm92aWRlcyA9IGNvbmZpZy5wcm92aWRlKGZpZWxkKTtcbiAgICAgICAgcmV0dXJuIGZpZWxkO1xuICAgIH1cbiAgICBjcmVhdGUoc3RhdGUpIHtcbiAgICAgICAgbGV0IGluaXQgPSBzdGF0ZS5mYWNldChpbml0RmllbGQpLmZpbmQoaSA9PiBpLmZpZWxkID09IHRoaXMpO1xuICAgICAgICByZXR1cm4gKChpbml0ID09PSBudWxsIHx8IGluaXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGluaXQuY3JlYXRlKSB8fCB0aGlzLmNyZWF0ZUYpKHN0YXRlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBzbG90KGFkZHJlc3Nlcykge1xuICAgICAgICBsZXQgaWR4ID0gYWRkcmVzc2VzW3RoaXMuaWRdID4+IDE7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjcmVhdGU6IChzdGF0ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHN0YXRlLnZhbHVlc1tpZHhdID0gdGhpcy5jcmVhdGUoc3RhdGUpO1xuICAgICAgICAgICAgICAgIHJldHVybiAxIC8qIFNsb3RTdGF0dXMuQ2hhbmdlZCAqLztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1cGRhdGU6IChzdGF0ZSwgdHIpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgb2xkVmFsID0gc3RhdGUudmFsdWVzW2lkeF07XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gdGhpcy51cGRhdGVGKG9sZFZhbCwgdHIpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbXBhcmVGKG9sZFZhbCwgdmFsdWUpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICBzdGF0ZS52YWx1ZXNbaWR4XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHJldHVybiAxIC8qIFNsb3RTdGF0dXMuQ2hhbmdlZCAqLztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWNvbmZpZ3VyZTogKHN0YXRlLCBvbGRTdGF0ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChvbGRTdGF0ZS5jb25maWcuYWRkcmVzc1t0aGlzLmlkXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLnZhbHVlc1tpZHhdID0gb2xkU3RhdGUuZmllbGQodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdGF0ZS52YWx1ZXNbaWR4XSA9IHRoaXMuY3JlYXRlKHN0YXRlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gMSAvKiBTbG90U3RhdHVzLkNoYW5nZWQgKi87XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgIFJldHVybnMgYW4gZXh0ZW5zaW9uIHRoYXQgZW5hYmxlcyB0aGlzIGZpZWxkIGFuZCBvdmVycmlkZXMgdGhlXG4gICAgd2F5IGl0IGlzIGluaXRpYWxpemVkLiBDYW4gYmUgdXNlZnVsIHdoZW4geW91IG5lZWQgdG8gcHJvdmlkZSBhXG4gICAgbm9uLWRlZmF1bHQgc3RhcnRpbmcgdmFsdWUgZm9yIHRoZSBmaWVsZC5cbiAgICAqL1xuICAgIGluaXQoY3JlYXRlKSB7XG4gICAgICAgIHJldHVybiBbdGhpcywgaW5pdEZpZWxkLm9mKHsgZmllbGQ6IHRoaXMsIGNyZWF0ZSB9KV07XG4gICAgfVxuICAgIC8qKlxuICAgIFN0YXRlIGZpZWxkIGluc3RhbmNlcyBjYW4gYmUgdXNlZCBhc1xuICAgIFtgRXh0ZW5zaW9uYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5FeHRlbnNpb24pIHZhbHVlcyB0byBlbmFibGUgdGhlIGZpZWxkIGluIGFcbiAgICBnaXZlbiBzdGF0ZS5cbiAgICAqL1xuICAgIGdldCBleHRlbnNpb24oKSB7IHJldHVybiB0aGlzOyB9XG59XG5jb25zdCBQcmVjXyA9IHsgbG93ZXN0OiA0LCBsb3c6IDMsIGRlZmF1bHQ6IDIsIGhpZ2g6IDEsIGhpZ2hlc3Q6IDAgfTtcbmZ1bmN0aW9uIHByZWModmFsdWUpIHtcbiAgICByZXR1cm4gKGV4dCkgPT4gbmV3IFByZWNFeHRlbnNpb24oZXh0LCB2YWx1ZSk7XG59XG4vKipcbkJ5IGRlZmF1bHQgZXh0ZW5zaW9ucyBhcmUgcmVnaXN0ZXJlZCBpbiB0aGUgb3JkZXIgdGhleSBhcmUgZm91bmRcbmluIHRoZSBmbGF0dGVuZWQgZm9ybSBvZiBuZXN0ZWQgYXJyYXkgdGhhdCB3YXMgcHJvdmlkZWQuXG5JbmRpdmlkdWFsIGV4dGVuc2lvbiB2YWx1ZXMgY2FuIGJlIGFzc2lnbmVkIGEgcHJlY2VkZW5jZSB0b1xub3ZlcnJpZGUgdGhpcy4gRXh0ZW5zaW9ucyB0aGF0IGRvIG5vdCBoYXZlIGEgcHJlY2VkZW5jZSBzZXQgZ2V0XG50aGUgcHJlY2VkZW5jZSBvZiB0aGUgbmVhcmVzdCBwYXJlbnQgd2l0aCBhIHByZWNlZGVuY2UsIG9yXG5bYGRlZmF1bHRgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLlByZWMuZGVmYXVsdCkgaWYgdGhlcmUgaXMgbm8gc3VjaCBwYXJlbnQuIFRoZVxuZmluYWwgb3JkZXJpbmcgb2YgZXh0ZW5zaW9ucyBpcyBkZXRlcm1pbmVkIGJ5IGZpcnN0IHNvcnRpbmcgYnlcbnByZWNlZGVuY2UgYW5kIHRoZW4gYnkgb3JkZXIgd2l0aGluIGVhY2ggcHJlY2VkZW5jZS5cbiovXG5jb25zdCBQcmVjID0ge1xuICAgIC8qKlxuICAgIFRoZSBoaWdoZXN0IHByZWNlZGVuY2UgbGV2ZWwsIGZvciBleHRlbnNpb25zIHRoYXQgc2hvdWxkIGVuZCB1cFxuICAgIG5lYXIgdGhlIHN0YXJ0IG9mIHRoZSBwcmVjZWRlbmNlIG9yZGVyaW5nLlxuICAgICovXG4gICAgaGlnaGVzdDogcHJlYyhQcmVjXy5oaWdoZXN0KSxcbiAgICAvKipcbiAgICBBIGhpZ2hlci10aGFuLWRlZmF1bHQgcHJlY2VkZW5jZSwgZm9yIGV4dGVuc2lvbnMgdGhhdCBzaG91bGRcbiAgICBjb21lIGJlZm9yZSB0aG9zZSB3aXRoIGRlZmF1bHQgcHJlY2VkZW5jZS5cbiAgICAqL1xuICAgIGhpZ2g6IHByZWMoUHJlY18uaGlnaCksXG4gICAgLyoqXG4gICAgVGhlIGRlZmF1bHQgcHJlY2VkZW5jZSwgd2hpY2ggaXMgYWxzbyB1c2VkIGZvciBleHRlbnNpb25zXG4gICAgd2l0aG91dCBhbiBleHBsaWNpdCBwcmVjZWRlbmNlLlxuICAgICovXG4gICAgZGVmYXVsdDogcHJlYyhQcmVjXy5kZWZhdWx0KSxcbiAgICAvKipcbiAgICBBIGxvd2VyLXRoYW4tZGVmYXVsdCBwcmVjZWRlbmNlLlxuICAgICovXG4gICAgbG93OiBwcmVjKFByZWNfLmxvdyksXG4gICAgLyoqXG4gICAgVGhlIGxvd2VzdCBwcmVjZWRlbmNlIGxldmVsLiBNZWFudCBmb3IgdGhpbmdzIHRoYXQgc2hvdWxkIGVuZCB1cFxuICAgIG5lYXIgdGhlIGVuZCBvZiB0aGUgZXh0ZW5zaW9uIG9yZGVyLlxuICAgICovXG4gICAgbG93ZXN0OiBwcmVjKFByZWNfLmxvd2VzdClcbn07XG5jbGFzcyBQcmVjRXh0ZW5zaW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihpbm5lciwgcHJlYykge1xuICAgICAgICB0aGlzLmlubmVyID0gaW5uZXI7XG4gICAgICAgIHRoaXMucHJlYyA9IHByZWM7XG4gICAgfVxufVxuLyoqXG5FeHRlbnNpb24gY29tcGFydG1lbnRzIGNhbiBiZSB1c2VkIHRvIG1ha2UgYSBjb25maWd1cmF0aW9uXG5keW5hbWljLiBCeSBbd3JhcHBpbmddKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuQ29tcGFydG1lbnQub2YpIHBhcnQgb2YgeW91clxuY29uZmlndXJhdGlvbiBpbiBhIGNvbXBhcnRtZW50LCB5b3UgY2FuIGxhdGVyXG5bcmVwbGFjZV0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5Db21wYXJ0bWVudC5yZWNvbmZpZ3VyZSkgdGhhdCBwYXJ0IHRocm91Z2ggYVxudHJhbnNhY3Rpb24uXG4qL1xuY2xhc3MgQ29tcGFydG1lbnQge1xuICAgIC8qKlxuICAgIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGlzIGNvbXBhcnRtZW50IHRvIGFkZCB0byB5b3VyIFtzdGF0ZVxuICAgIGNvbmZpZ3VyYXRpb25dKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuRWRpdG9yU3RhdGVDb25maWcuZXh0ZW5zaW9ucykuXG4gICAgKi9cbiAgICBvZihleHQpIHsgcmV0dXJuIG5ldyBDb21wYXJ0bWVudEluc3RhbmNlKHRoaXMsIGV4dCk7IH1cbiAgICAvKipcbiAgICBDcmVhdGUgYW4gW2VmZmVjdF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5UcmFuc2FjdGlvblNwZWMuZWZmZWN0cykgdGhhdFxuICAgIHJlY29uZmlndXJlcyB0aGlzIGNvbXBhcnRtZW50LlxuICAgICovXG4gICAgcmVjb25maWd1cmUoY29udGVudCkge1xuICAgICAgICByZXR1cm4gQ29tcGFydG1lbnQucmVjb25maWd1cmUub2YoeyBjb21wYXJ0bWVudDogdGhpcywgZXh0ZW5zaW9uOiBjb250ZW50IH0pO1xuICAgIH1cbiAgICAvKipcbiAgICBHZXQgdGhlIGN1cnJlbnQgY29udGVudCBvZiB0aGUgY29tcGFydG1lbnQgaW4gdGhlIHN0YXRlLCBvclxuICAgIGB1bmRlZmluZWRgIGlmIGl0IGlzbid0IHByZXNlbnQuXG4gICAgKi9cbiAgICBnZXQoc3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlLmNvbmZpZy5jb21wYXJ0bWVudHMuZ2V0KHRoaXMpO1xuICAgIH1cbn1cbmNsYXNzIENvbXBhcnRtZW50SW5zdGFuY2Uge1xuICAgIGNvbnN0cnVjdG9yKGNvbXBhcnRtZW50LCBpbm5lcikge1xuICAgICAgICB0aGlzLmNvbXBhcnRtZW50ID0gY29tcGFydG1lbnQ7XG4gICAgICAgIHRoaXMuaW5uZXIgPSBpbm5lcjtcbiAgICB9XG59XG5jbGFzcyBDb25maWd1cmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihiYXNlLCBjb21wYXJ0bWVudHMsIGR5bmFtaWNTbG90cywgYWRkcmVzcywgc3RhdGljVmFsdWVzLCBmYWNldHMpIHtcbiAgICAgICAgdGhpcy5iYXNlID0gYmFzZTtcbiAgICAgICAgdGhpcy5jb21wYXJ0bWVudHMgPSBjb21wYXJ0bWVudHM7XG4gICAgICAgIHRoaXMuZHluYW1pY1Nsb3RzID0gZHluYW1pY1Nsb3RzO1xuICAgICAgICB0aGlzLmFkZHJlc3MgPSBhZGRyZXNzO1xuICAgICAgICB0aGlzLnN0YXRpY1ZhbHVlcyA9IHN0YXRpY1ZhbHVlcztcbiAgICAgICAgdGhpcy5mYWNldHMgPSBmYWNldHM7XG4gICAgICAgIHRoaXMuc3RhdHVzVGVtcGxhdGUgPSBbXTtcbiAgICAgICAgd2hpbGUgKHRoaXMuc3RhdHVzVGVtcGxhdGUubGVuZ3RoIDwgZHluYW1pY1Nsb3RzLmxlbmd0aClcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzVGVtcGxhdGUucHVzaCgwIC8qIFNsb3RTdGF0dXMuVW5yZXNvbHZlZCAqLyk7XG4gICAgfVxuICAgIHN0YXRpY0ZhY2V0KGZhY2V0KSB7XG4gICAgICAgIGxldCBhZGRyID0gdGhpcy5hZGRyZXNzW2ZhY2V0LmlkXTtcbiAgICAgICAgcmV0dXJuIGFkZHIgPT0gbnVsbCA/IGZhY2V0LmRlZmF1bHQgOiB0aGlzLnN0YXRpY1ZhbHVlc1thZGRyID4+IDFdO1xuICAgIH1cbiAgICBzdGF0aWMgcmVzb2x2ZShiYXNlLCBjb21wYXJ0bWVudHMsIG9sZFN0YXRlKSB7XG4gICAgICAgIGxldCBmaWVsZHMgPSBbXTtcbiAgICAgICAgbGV0IGZhY2V0cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGxldCBuZXdDb21wYXJ0bWVudHMgPSBuZXcgTWFwKCk7XG4gICAgICAgIGZvciAobGV0IGV4dCBvZiBmbGF0dGVuKGJhc2UsIGNvbXBhcnRtZW50cywgbmV3Q29tcGFydG1lbnRzKSkge1xuICAgICAgICAgICAgaWYgKGV4dCBpbnN0YW5jZW9mIFN0YXRlRmllbGQpXG4gICAgICAgICAgICAgICAgZmllbGRzLnB1c2goZXh0KTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAoZmFjZXRzW2V4dC5mYWNldC5pZF0gfHwgKGZhY2V0c1tleHQuZmFjZXQuaWRdID0gW10pKS5wdXNoKGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGFkZHJlc3MgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBsZXQgc3RhdGljVmFsdWVzID0gW107XG4gICAgICAgIGxldCBkeW5hbWljU2xvdHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgZmllbGQgb2YgZmllbGRzKSB7XG4gICAgICAgICAgICBhZGRyZXNzW2ZpZWxkLmlkXSA9IGR5bmFtaWNTbG90cy5sZW5ndGggPDwgMTtcbiAgICAgICAgICAgIGR5bmFtaWNTbG90cy5wdXNoKGEgPT4gZmllbGQuc2xvdChhKSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG9sZEZhY2V0cyA9IG9sZFN0YXRlID09PSBudWxsIHx8IG9sZFN0YXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbGRTdGF0ZS5jb25maWcuZmFjZXRzO1xuICAgICAgICBmb3IgKGxldCBpZCBpbiBmYWNldHMpIHtcbiAgICAgICAgICAgIGxldCBwcm92aWRlcnMgPSBmYWNldHNbaWRdLCBmYWNldCA9IHByb3ZpZGVyc1swXS5mYWNldDtcbiAgICAgICAgICAgIGxldCBvbGRQcm92aWRlcnMgPSBvbGRGYWNldHMgJiYgb2xkRmFjZXRzW2lkXSB8fCBbXTtcbiAgICAgICAgICAgIGlmIChwcm92aWRlcnMuZXZlcnkocCA9PiBwLnR5cGUgPT0gMCAvKiBQcm92aWRlci5TdGF0aWMgKi8pKSB7XG4gICAgICAgICAgICAgICAgYWRkcmVzc1tmYWNldC5pZF0gPSAoc3RhdGljVmFsdWVzLmxlbmd0aCA8PCAxKSB8IDE7XG4gICAgICAgICAgICAgICAgaWYgKHNhbWVBcnJheShvbGRQcm92aWRlcnMsIHByb3ZpZGVycykpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGljVmFsdWVzLnB1c2gob2xkU3RhdGUuZmFjZXQoZmFjZXQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IGZhY2V0LmNvbWJpbmUocHJvdmlkZXJzLm1hcChwID0+IHAudmFsdWUpKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGljVmFsdWVzLnB1c2gob2xkU3RhdGUgJiYgZmFjZXQuY29tcGFyZSh2YWx1ZSwgb2xkU3RhdGUuZmFjZXQoZmFjZXQpKSA/IG9sZFN0YXRlLmZhY2V0KGZhY2V0KSA6IHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBwIG9mIHByb3ZpZGVycykge1xuICAgICAgICAgICAgICAgICAgICBpZiAocC50eXBlID09IDAgLyogUHJvdmlkZXIuU3RhdGljICovKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzW3AuaWRdID0gKHN0YXRpY1ZhbHVlcy5sZW5ndGggPDwgMSkgfCAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljVmFsdWVzLnB1c2gocC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzW3AuaWRdID0gZHluYW1pY1Nsb3RzLmxlbmd0aCA8PCAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgZHluYW1pY1Nsb3RzLnB1c2goYSA9PiBwLmR5bmFtaWNTbG90KGEpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhZGRyZXNzW2ZhY2V0LmlkXSA9IGR5bmFtaWNTbG90cy5sZW5ndGggPDwgMTtcbiAgICAgICAgICAgICAgICBkeW5hbWljU2xvdHMucHVzaChhID0+IGR5bmFtaWNGYWNldFNsb3QoYSwgZmFjZXQsIHByb3ZpZGVycykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBkeW5hbWljID0gZHluYW1pY1Nsb3RzLm1hcChmID0+IGYoYWRkcmVzcykpO1xuICAgICAgICByZXR1cm4gbmV3IENvbmZpZ3VyYXRpb24oYmFzZSwgbmV3Q29tcGFydG1lbnRzLCBkeW5hbWljLCBhZGRyZXNzLCBzdGF0aWNWYWx1ZXMsIGZhY2V0cyk7XG4gICAgfVxufVxuZnVuY3Rpb24gZmxhdHRlbihleHRlbnNpb24sIGNvbXBhcnRtZW50cywgbmV3Q29tcGFydG1lbnRzKSB7XG4gICAgbGV0IHJlc3VsdCA9IFtbXSwgW10sIFtdLCBbXSwgW11dO1xuICAgIGxldCBzZWVuID0gbmV3IE1hcCgpO1xuICAgIGZ1bmN0aW9uIGlubmVyKGV4dCwgcHJlYykge1xuICAgICAgICBsZXQga25vd24gPSBzZWVuLmdldChleHQpO1xuICAgICAgICBpZiAoa25vd24gIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGtub3duIDw9IHByZWMpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgbGV0IGZvdW5kID0gcmVzdWx0W2tub3duXS5pbmRleE9mKGV4dCk7XG4gICAgICAgICAgICBpZiAoZm91bmQgPiAtMSlcbiAgICAgICAgICAgICAgICByZXN1bHRba25vd25dLnNwbGljZShmb3VuZCwgMSk7XG4gICAgICAgICAgICBpZiAoZXh0IGluc3RhbmNlb2YgQ29tcGFydG1lbnRJbnN0YW5jZSlcbiAgICAgICAgICAgICAgICBuZXdDb21wYXJ0bWVudHMuZGVsZXRlKGV4dC5jb21wYXJ0bWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgc2Vlbi5zZXQoZXh0LCBwcmVjKTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZXh0KSkge1xuICAgICAgICAgICAgZm9yIChsZXQgZSBvZiBleHQpXG4gICAgICAgICAgICAgICAgaW5uZXIoZSwgcHJlYyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZXh0IGluc3RhbmNlb2YgQ29tcGFydG1lbnRJbnN0YW5jZSkge1xuICAgICAgICAgICAgaWYgKG5ld0NvbXBhcnRtZW50cy5oYXMoZXh0LmNvbXBhcnRtZW50KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgRHVwbGljYXRlIHVzZSBvZiBjb21wYXJ0bWVudCBpbiBleHRlbnNpb25zYCk7XG4gICAgICAgICAgICBsZXQgY29udGVudCA9IGNvbXBhcnRtZW50cy5nZXQoZXh0LmNvbXBhcnRtZW50KSB8fCBleHQuaW5uZXI7XG4gICAgICAgICAgICBuZXdDb21wYXJ0bWVudHMuc2V0KGV4dC5jb21wYXJ0bWVudCwgY29udGVudCk7XG4gICAgICAgICAgICBpbm5lcihjb250ZW50LCBwcmVjKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChleHQgaW5zdGFuY2VvZiBQcmVjRXh0ZW5zaW9uKSB7XG4gICAgICAgICAgICBpbm5lcihleHQuaW5uZXIsIGV4dC5wcmVjKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChleHQgaW5zdGFuY2VvZiBTdGF0ZUZpZWxkKSB7XG4gICAgICAgICAgICByZXN1bHRbcHJlY10ucHVzaChleHQpO1xuICAgICAgICAgICAgaWYgKGV4dC5wcm92aWRlcylcbiAgICAgICAgICAgICAgICBpbm5lcihleHQucHJvdmlkZXMsIHByZWMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGV4dCBpbnN0YW5jZW9mIEZhY2V0UHJvdmlkZXIpIHtcbiAgICAgICAgICAgIHJlc3VsdFtwcmVjXS5wdXNoKGV4dCk7XG4gICAgICAgICAgICBpZiAoZXh0LmZhY2V0LmV4dGVuc2lvbnMpXG4gICAgICAgICAgICAgICAgaW5uZXIoZXh0LmZhY2V0LmV4dGVuc2lvbnMsIFByZWNfLmRlZmF1bHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGV0IGNvbnRlbnQgPSBleHQuZXh0ZW5zaW9uO1xuICAgICAgICAgICAgaWYgKCFjb250ZW50KVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5yZWNvZ25pemVkIGV4dGVuc2lvbiB2YWx1ZSBpbiBleHRlbnNpb24gc2V0ICgke2V4dH0pLiBUaGlzIHNvbWV0aW1lcyBoYXBwZW5zIGJlY2F1c2UgbXVsdGlwbGUgaW5zdGFuY2VzIG9mIEBjb2RlbWlycm9yL3N0YXRlIGFyZSBsb2FkZWQsIGJyZWFraW5nIGluc3RhbmNlb2YgY2hlY2tzLmApO1xuICAgICAgICAgICAgaW5uZXIoY29udGVudCwgcHJlYyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaW5uZXIoZXh0ZW5zaW9uLCBQcmVjXy5kZWZhdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0LnJlZHVjZSgoYSwgYikgPT4gYS5jb25jYXQoYikpO1xufVxuZnVuY3Rpb24gZW5zdXJlQWRkcihzdGF0ZSwgYWRkcikge1xuICAgIGlmIChhZGRyICYgMSlcbiAgICAgICAgcmV0dXJuIDIgLyogU2xvdFN0YXR1cy5Db21wdXRlZCAqLztcbiAgICBsZXQgaWR4ID0gYWRkciA+PiAxO1xuICAgIGxldCBzdGF0dXMgPSBzdGF0ZS5zdGF0dXNbaWR4XTtcbiAgICBpZiAoc3RhdHVzID09IDQgLyogU2xvdFN0YXR1cy5Db21wdXRpbmcgKi8pXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkN5Y2xpYyBkZXBlbmRlbmN5IGJldHdlZW4gZmllbGRzIGFuZC9vciBmYWNldHNcIik7XG4gICAgaWYgKHN0YXR1cyAmIDIgLyogU2xvdFN0YXR1cy5Db21wdXRlZCAqLylcbiAgICAgICAgcmV0dXJuIHN0YXR1cztcbiAgICBzdGF0ZS5zdGF0dXNbaWR4XSA9IDQgLyogU2xvdFN0YXR1cy5Db21wdXRpbmcgKi87XG4gICAgbGV0IGNoYW5nZWQgPSBzdGF0ZS5jb21wdXRlU2xvdChzdGF0ZSwgc3RhdGUuY29uZmlnLmR5bmFtaWNTbG90c1tpZHhdKTtcbiAgICByZXR1cm4gc3RhdGUuc3RhdHVzW2lkeF0gPSAyIC8qIFNsb3RTdGF0dXMuQ29tcHV0ZWQgKi8gfCBjaGFuZ2VkO1xufVxuZnVuY3Rpb24gZ2V0QWRkcihzdGF0ZSwgYWRkcikge1xuICAgIHJldHVybiBhZGRyICYgMSA/IHN0YXRlLmNvbmZpZy5zdGF0aWNWYWx1ZXNbYWRkciA+PiAxXSA6IHN0YXRlLnZhbHVlc1thZGRyID4+IDFdO1xufVxuXG5jb25zdCBsYW5ndWFnZURhdGEgPSBGYWNldC5kZWZpbmUoKTtcbmNvbnN0IGFsbG93TXVsdGlwbGVTZWxlY3Rpb25zID0gRmFjZXQuZGVmaW5lKHtcbiAgICBjb21iaW5lOiB2YWx1ZXMgPT4gdmFsdWVzLnNvbWUodiA9PiB2KSxcbiAgICBzdGF0aWM6IHRydWVcbn0pO1xuY29uc3QgbGluZVNlcGFyYXRvciA9IEZhY2V0LmRlZmluZSh7XG4gICAgY29tYmluZTogdmFsdWVzID0+IHZhbHVlcy5sZW5ndGggPyB2YWx1ZXNbMF0gOiB1bmRlZmluZWQsXG4gICAgc3RhdGljOiB0cnVlXG59KTtcbmNvbnN0IGNoYW5nZUZpbHRlciA9IEZhY2V0LmRlZmluZSgpO1xuY29uc3QgdHJhbnNhY3Rpb25GaWx0ZXIgPSBGYWNldC5kZWZpbmUoKTtcbmNvbnN0IHRyYW5zYWN0aW9uRXh0ZW5kZXIgPSBGYWNldC5kZWZpbmUoKTtcbmNvbnN0IHJlYWRPbmx5ID0gRmFjZXQuZGVmaW5lKHtcbiAgICBjb21iaW5lOiB2YWx1ZXMgPT4gdmFsdWVzLmxlbmd0aCA/IHZhbHVlc1swXSA6IGZhbHNlXG59KTtcblxuLyoqXG5Bbm5vdGF0aW9ucyBhcmUgdGFnZ2VkIHZhbHVlcyB0aGF0IGFyZSB1c2VkIHRvIGFkZCBtZXRhZGF0YSB0b1xudHJhbnNhY3Rpb25zIGluIGFuIGV4dGVuc2libGUgd2F5LiBUaGV5IHNob3VsZCBiZSB1c2VkIHRvIG1vZGVsXG50aGluZ3MgdGhhdCBlZmZlY3QgdGhlIGVudGlyZSB0cmFuc2FjdGlvbiAoc3VjaCBhcyBpdHMgW3RpbWVcbnN0YW1wXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLlRyYW5zYWN0aW9uXnRpbWUpIG9yIGluZm9ybWF0aW9uIGFib3V0IGl0c1xuW29yaWdpbl0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5UcmFuc2FjdGlvbl51c2VyRXZlbnQpKS4gRm9yIGVmZmVjdHMgdGhhdCBoYXBwZW5cbl9hbG9uZ3NpZGVfIHRoZSBvdGhlciBjaGFuZ2VzIG1hZGUgYnkgdGhlIHRyYW5zYWN0aW9uLCBbc3RhdGVcbmVmZmVjdHNdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuU3RhdGVFZmZlY3QpIGFyZSBtb3JlIGFwcHJvcHJpYXRlLlxuKi9cbmNsYXNzIEFubm90YXRpb24ge1xuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgVGhlIGFubm90YXRpb24gdHlwZS5cbiAgICAqL1xuICAgIHR5cGUsIFxuICAgIC8qKlxuICAgIFRoZSB2YWx1ZSBvZiB0aGlzIGFubm90YXRpb24uXG4gICAgKi9cbiAgICB2YWx1ZSkge1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgIERlZmluZSBhIG5ldyB0eXBlIG9mIGFubm90YXRpb24uXG4gICAgKi9cbiAgICBzdGF0aWMgZGVmaW5lKCkgeyByZXR1cm4gbmV3IEFubm90YXRpb25UeXBlKCk7IH1cbn1cbi8qKlxuTWFya2VyIHRoYXQgaWRlbnRpZmllcyBhIHR5cGUgb2YgW2Fubm90YXRpb25dKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuQW5ub3RhdGlvbikuXG4qL1xuY2xhc3MgQW5ub3RhdGlvblR5cGUge1xuICAgIC8qKlxuICAgIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGlzIGFubm90YXRpb24uXG4gICAgKi9cbiAgICBvZih2YWx1ZSkgeyByZXR1cm4gbmV3IEFubm90YXRpb24odGhpcywgdmFsdWUpOyB9XG59XG4vKipcblJlcHJlc2VudGF0aW9uIG9mIGEgdHlwZSBvZiBzdGF0ZSBlZmZlY3QuIERlZmluZWQgd2l0aFxuW2BTdGF0ZUVmZmVjdC5kZWZpbmVgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLlN0YXRlRWZmZWN0XmRlZmluZSkuXG4qL1xuY2xhc3MgU3RhdGVFZmZlY3RUeXBlIHtcbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8vIFRoZSBgYW55YCB0eXBlcyBpbiB0aGVzZSBmdW5jdGlvbiB0eXBlcyBhcmUgdGhlcmUgdG8gd29ya1xuICAgIC8vIGFyb3VuZCBUeXBlU2NyaXB0IGlzc3VlICMzNzYzMSwgd2hlcmUgdGhlIHR5cGUgZ3VhcmQgb25cbiAgICAvLyBgU3RhdGVFZmZlY3QuaXNgIG15c3RlcmlvdXNseSBzdG9wcyB3b3JraW5nIHdoZW4gdGhlc2UgcHJvcGVybHlcbiAgICAvLyBoYXZlIHR5cGUgYFZhbHVlYC5cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIG1hcCkge1xuICAgICAgICB0aGlzLm1hcCA9IG1hcDtcbiAgICB9XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgW3N0YXRlIGVmZmVjdF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5TdGF0ZUVmZmVjdCkgaW5zdGFuY2Ugb2YgdGhpc1xuICAgIHR5cGUuXG4gICAgKi9cbiAgICBvZih2YWx1ZSkgeyByZXR1cm4gbmV3IFN0YXRlRWZmZWN0KHRoaXMsIHZhbHVlKTsgfVxufVxuLyoqXG5TdGF0ZSBlZmZlY3RzIGNhbiBiZSB1c2VkIHRvIHJlcHJlc2VudCBhZGRpdGlvbmFsIGVmZmVjdHNcbmFzc29jaWF0ZWQgd2l0aCBhIFt0cmFuc2FjdGlvbl0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5UcmFuc2FjdGlvbi5lZmZlY3RzKS4gVGhleVxuYXJlIG9mdGVuIHVzZWZ1bCB0byBtb2RlbCBjaGFuZ2VzIHRvIGN1c3RvbSBbc3RhdGVcbmZpZWxkc10oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5TdGF0ZUZpZWxkKSwgd2hlbiB0aG9zZSBjaGFuZ2VzIGFyZW4ndCBpbXBsaWNpdCBpblxuZG9jdW1lbnQgb3Igc2VsZWN0aW9uIGNoYW5nZXMuXG4qL1xuY2xhc3MgU3RhdGVFZmZlY3Qge1xuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICB0eXBlLCBcbiAgICAvKipcbiAgICBUaGUgdmFsdWUgb2YgdGhpcyBlZmZlY3QuXG4gICAgKi9cbiAgICB2YWx1ZSkge1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgIE1hcCB0aGlzIGVmZmVjdCB0aHJvdWdoIGEgcG9zaXRpb24gbWFwcGluZy4gV2lsbCByZXR1cm5cbiAgICBgdW5kZWZpbmVkYCB3aGVuIHRoYXQgZW5kcyB1cCBkZWxldGluZyB0aGUgZWZmZWN0LlxuICAgICovXG4gICAgbWFwKG1hcHBpbmcpIHtcbiAgICAgICAgbGV0IG1hcHBlZCA9IHRoaXMudHlwZS5tYXAodGhpcy52YWx1ZSwgbWFwcGluZyk7XG4gICAgICAgIHJldHVybiBtYXBwZWQgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IG1hcHBlZCA9PSB0aGlzLnZhbHVlID8gdGhpcyA6IG5ldyBTdGF0ZUVmZmVjdCh0aGlzLnR5cGUsIG1hcHBlZCk7XG4gICAgfVxuICAgIC8qKlxuICAgIFRlbGxzIHlvdSB3aGV0aGVyIHRoaXMgZWZmZWN0IG9iamVjdCBpcyBvZiBhIGdpdmVuXG4gICAgW3R5cGVdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuU3RhdGVFZmZlY3RUeXBlKS5cbiAgICAqL1xuICAgIGlzKHR5cGUpIHsgcmV0dXJuIHRoaXMudHlwZSA9PSB0eXBlOyB9XG4gICAgLyoqXG4gICAgRGVmaW5lIGEgbmV3IGVmZmVjdCB0eXBlLiBUaGUgdHlwZSBwYXJhbWV0ZXIgaW5kaWNhdGVzIHRoZSB0eXBlXG4gICAgb2YgdmFsdWVzIHRoYXQgaGlzIGVmZmVjdCBob2xkcy4gSXQgc2hvdWxkIGJlIGEgdHlwZSB0aGF0XG4gICAgZG9lc24ndCBpbmNsdWRlIGB1bmRlZmluZWRgLCBzaW5jZSB0aGF0IGlzIHVzZWQgaW5cbiAgICBbbWFwcGluZ10oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5TdGF0ZUVmZmVjdC5tYXApIHRvIGluZGljYXRlIHRoYXQgYW4gZWZmZWN0IGlzXG4gICAgcmVtb3ZlZC5cbiAgICAqL1xuICAgIHN0YXRpYyBkZWZpbmUoc3BlYyA9IHt9KSB7XG4gICAgICAgIHJldHVybiBuZXcgU3RhdGVFZmZlY3RUeXBlKHNwZWMubWFwIHx8ICh2ID0+IHYpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgTWFwIGFuIGFycmF5IG9mIGVmZmVjdHMgdGhyb3VnaCBhIGNoYW5nZSBzZXQuXG4gICAgKi9cbiAgICBzdGF0aWMgbWFwRWZmZWN0cyhlZmZlY3RzLCBtYXBwaW5nKSB7XG4gICAgICAgIGlmICghZWZmZWN0cy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gZWZmZWN0cztcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBlZmZlY3Qgb2YgZWZmZWN0cykge1xuICAgICAgICAgICAgbGV0IG1hcHBlZCA9IGVmZmVjdC5tYXAobWFwcGluZyk7XG4gICAgICAgICAgICBpZiAobWFwcGVkKVxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG1hcHBlZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG4vKipcblRoaXMgZWZmZWN0IGNhbiBiZSB1c2VkIHRvIHJlY29uZmlndXJlIHRoZSByb290IGV4dGVuc2lvbnMgb2ZcbnRoZSBlZGl0b3IuIERvaW5nIHRoaXMgd2lsbCBkaXNjYXJkIGFueSBleHRlbnNpb25zXG5bYXBwZW5kZWRdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuU3RhdGVFZmZlY3ReYXBwZW5kQ29uZmlnKSwgYnV0IGRvZXMgbm90IHJlc2V0XG50aGUgY29udGVudCBvZiBbcmVjb25maWd1cmVkXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLkNvbXBhcnRtZW50LnJlY29uZmlndXJlKVxuY29tcGFydG1lbnRzLlxuKi9cblN0YXRlRWZmZWN0LnJlY29uZmlndXJlID0gU3RhdGVFZmZlY3QuZGVmaW5lKCk7XG4vKipcbkFwcGVuZCBleHRlbnNpb25zIHRvIHRoZSB0b3AtbGV2ZWwgY29uZmlndXJhdGlvbiBvZiB0aGUgZWRpdG9yLlxuKi9cblN0YXRlRWZmZWN0LmFwcGVuZENvbmZpZyA9IFN0YXRlRWZmZWN0LmRlZmluZSgpO1xuLyoqXG5DaGFuZ2VzIHRvIHRoZSBlZGl0b3Igc3RhdGUgYXJlIGdyb3VwZWQgaW50byB0cmFuc2FjdGlvbnMuXG5UeXBpY2FsbHksIGEgdXNlciBhY3Rpb24gY3JlYXRlcyBhIHNpbmdsZSB0cmFuc2FjdGlvbiwgd2hpY2ggbWF5XG5jb250YWluIGFueSBudW1iZXIgb2YgZG9jdW1lbnQgY2hhbmdlcywgbWF5IGNoYW5nZSB0aGUgc2VsZWN0aW9uLFxub3IgaGF2ZSBvdGhlciBlZmZlY3RzLiBDcmVhdGUgYSB0cmFuc2FjdGlvbiBieSBjYWxsaW5nXG5bYEVkaXRvclN0YXRlLnVwZGF0ZWBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuRWRpdG9yU3RhdGUudXBkYXRlKSwgb3IgaW1tZWRpYXRlbHlcbmRpc3BhdGNoIG9uZSBieSBjYWxsaW5nXG5bYEVkaXRvclZpZXcuZGlzcGF0Y2hgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3ZpZXcuRWRpdG9yVmlldy5kaXNwYXRjaCkuXG4qL1xuY2xhc3MgVHJhbnNhY3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgIFRoZSBzdGF0ZSBmcm9tIHdoaWNoIHRoZSB0cmFuc2FjdGlvbiBzdGFydHMuXG4gICAgKi9cbiAgICBzdGFydFN0YXRlLCBcbiAgICAvKipcbiAgICBUaGUgZG9jdW1lbnQgY2hhbmdlcyBtYWRlIGJ5IHRoaXMgdHJhbnNhY3Rpb24uXG4gICAgKi9cbiAgICBjaGFuZ2VzLCBcbiAgICAvKipcbiAgICBUaGUgc2VsZWN0aW9uIHNldCBieSB0aGlzIHRyYW5zYWN0aW9uLCBvciB1bmRlZmluZWQgaWYgaXRcbiAgICBkb2Vzbid0IGV4cGxpY2l0bHkgc2V0IGEgc2VsZWN0aW9uLlxuICAgICovXG4gICAgc2VsZWN0aW9uLCBcbiAgICAvKipcbiAgICBUaGUgZWZmZWN0cyBhZGRlZCB0byB0aGUgdHJhbnNhY3Rpb24uXG4gICAgKi9cbiAgICBlZmZlY3RzLCBcbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGFubm90YXRpb25zLCBcbiAgICAvKipcbiAgICBXaGV0aGVyIHRoZSBzZWxlY3Rpb24gc2hvdWxkIGJlIHNjcm9sbGVkIGludG8gdmlldyBhZnRlciB0aGlzXG4gICAgdHJhbnNhY3Rpb24gaXMgZGlzcGF0Y2hlZC5cbiAgICAqL1xuICAgIHNjcm9sbEludG9WaWV3KSB7XG4gICAgICAgIHRoaXMuc3RhcnRTdGF0ZSA9IHN0YXJ0U3RhdGU7XG4gICAgICAgIHRoaXMuY2hhbmdlcyA9IGNoYW5nZXM7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uID0gc2VsZWN0aW9uO1xuICAgICAgICB0aGlzLmVmZmVjdHMgPSBlZmZlY3RzO1xuICAgICAgICB0aGlzLmFubm90YXRpb25zID0gYW5ub3RhdGlvbnM7XG4gICAgICAgIHRoaXMuc2Nyb2xsSW50b1ZpZXcgPSBzY3JvbGxJbnRvVmlldztcbiAgICAgICAgLyoqXG4gICAgICAgIEBpbnRlcm5hbFxuICAgICAgICAqL1xuICAgICAgICB0aGlzLl9kb2MgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgQGludGVybmFsXG4gICAgICAgICovXG4gICAgICAgIHRoaXMuX3N0YXRlID0gbnVsbDtcbiAgICAgICAgaWYgKHNlbGVjdGlvbilcbiAgICAgICAgICAgIGNoZWNrU2VsZWN0aW9uKHNlbGVjdGlvbiwgY2hhbmdlcy5uZXdMZW5ndGgpO1xuICAgICAgICBpZiAoIWFubm90YXRpb25zLnNvbWUoKGEpID0+IGEudHlwZSA9PSBUcmFuc2FjdGlvbi50aW1lKSlcbiAgICAgICAgICAgIHRoaXMuYW5ub3RhdGlvbnMgPSBhbm5vdGF0aW9ucy5jb25jYXQoVHJhbnNhY3Rpb24udGltZS5vZihEYXRlLm5vdygpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgc3RhdGljIGNyZWF0ZShzdGFydFN0YXRlLCBjaGFuZ2VzLCBzZWxlY3Rpb24sIGVmZmVjdHMsIGFubm90YXRpb25zLCBzY3JvbGxJbnRvVmlldykge1xuICAgICAgICByZXR1cm4gbmV3IFRyYW5zYWN0aW9uKHN0YXJ0U3RhdGUsIGNoYW5nZXMsIHNlbGVjdGlvbiwgZWZmZWN0cywgYW5ub3RhdGlvbnMsIHNjcm9sbEludG9WaWV3KTtcbiAgICB9XG4gICAgLyoqXG4gICAgVGhlIG5ldyBkb2N1bWVudCBwcm9kdWNlZCBieSB0aGUgdHJhbnNhY3Rpb24uIENvbnRyYXJ5IHRvXG4gICAgW2Auc3RhdGVgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLlRyYW5zYWN0aW9uLnN0YXRlKWAuZG9jYCwgYWNjZXNzaW5nIHRoaXMgd29uJ3RcbiAgICBmb3JjZSB0aGUgZW50aXJlIG5ldyBzdGF0ZSB0byBiZSBjb21wdXRlZCByaWdodCBhd2F5LCBzbyBpdCBpc1xuICAgIHJlY29tbWVuZGVkIHRoYXQgW3RyYW5zYWN0aW9uXG4gICAgZmlsdGVyc10oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5FZGl0b3JTdGF0ZV50cmFuc2FjdGlvbkZpbHRlcikgdXNlIHRoaXMgZ2V0dGVyXG4gICAgd2hlbiB0aGV5IG5lZWQgdG8gbG9vayBhdCB0aGUgbmV3IGRvY3VtZW50LlxuICAgICovXG4gICAgZ2V0IG5ld0RvYygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RvYyB8fCAodGhpcy5fZG9jID0gdGhpcy5jaGFuZ2VzLmFwcGx5KHRoaXMuc3RhcnRTdGF0ZS5kb2MpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgVGhlIG5ldyBzZWxlY3Rpb24gcHJvZHVjZWQgYnkgdGhlIHRyYW5zYWN0aW9uLiBJZlxuICAgIFtgdGhpcy5zZWxlY3Rpb25gXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLlRyYW5zYWN0aW9uLnNlbGVjdGlvbikgaXMgdW5kZWZpbmVkLFxuICAgIHRoaXMgd2lsbCBbbWFwXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLkVkaXRvclNlbGVjdGlvbi5tYXApIHRoZSBzdGFydCBzdGF0ZSdzXG4gICAgY3VycmVudCBzZWxlY3Rpb24gdGhyb3VnaCB0aGUgY2hhbmdlcyBtYWRlIGJ5IHRoZSB0cmFuc2FjdGlvbi5cbiAgICAqL1xuICAgIGdldCBuZXdTZWxlY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGlvbiB8fCB0aGlzLnN0YXJ0U3RhdGUuc2VsZWN0aW9uLm1hcCh0aGlzLmNoYW5nZXMpO1xuICAgIH1cbiAgICAvKipcbiAgICBUaGUgbmV3IHN0YXRlIGNyZWF0ZWQgYnkgdGhlIHRyYW5zYWN0aW9uLiBDb21wdXRlZCBvbiBkZW1hbmRcbiAgICAoYnV0IHJldGFpbmVkIGZvciBzdWJzZXF1ZW50IGFjY2VzcyksIHNvIGl0IGlzIHJlY29tbWVuZGVkIG5vdCB0b1xuICAgIGFjY2VzcyBpdCBpbiBbdHJhbnNhY3Rpb25cbiAgICBmaWx0ZXJzXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLkVkaXRvclN0YXRlXnRyYW5zYWN0aW9uRmlsdGVyKSB3aGVuIHBvc3NpYmxlLlxuICAgICovXG4gICAgZ2V0IHN0YXRlKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3N0YXRlKVxuICAgICAgICAgICAgdGhpcy5zdGFydFN0YXRlLmFwcGx5VHJhbnNhY3Rpb24odGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgR2V0IHRoZSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gYW5ub3RhdGlvbiB0eXBlLCBpZiBhbnkuXG4gICAgKi9cbiAgICBhbm5vdGF0aW9uKHR5cGUpIHtcbiAgICAgICAgZm9yIChsZXQgYW5uIG9mIHRoaXMuYW5ub3RhdGlvbnMpXG4gICAgICAgICAgICBpZiAoYW5uLnR5cGUgPT0gdHlwZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gYW5uLnZhbHVlO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvKipcbiAgICBJbmRpY2F0ZXMgd2hldGhlciB0aGUgdHJhbnNhY3Rpb24gY2hhbmdlZCB0aGUgZG9jdW1lbnQuXG4gICAgKi9cbiAgICBnZXQgZG9jQ2hhbmdlZCgpIHsgcmV0dXJuICF0aGlzLmNoYW5nZXMuZW1wdHk7IH1cbiAgICAvKipcbiAgICBJbmRpY2F0ZXMgd2hldGhlciB0aGlzIHRyYW5zYWN0aW9uIHJlY29uZmlndXJlcyB0aGUgc3RhdGVcbiAgICAodGhyb3VnaCBhIFtjb25maWd1cmF0aW9uIGNvbXBhcnRtZW50XShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLkNvbXBhcnRtZW50KSBvclxuICAgIHdpdGggYSB0b3AtbGV2ZWwgY29uZmlndXJhdGlvblxuICAgIFtlZmZlY3RdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuU3RhdGVFZmZlY3RecmVjb25maWd1cmUpLlxuICAgICovXG4gICAgZ2V0IHJlY29uZmlndXJlZCgpIHsgcmV0dXJuIHRoaXMuc3RhcnRTdGF0ZS5jb25maWcgIT0gdGhpcy5zdGF0ZS5jb25maWc7IH1cbiAgICAvKipcbiAgICBSZXR1cm5zIHRydWUgaWYgdGhlIHRyYW5zYWN0aW9uIGhhcyBhIFt1c2VyXG4gICAgZXZlbnRdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuVHJhbnNhY3Rpb25edXNlckV2ZW50KSBhbm5vdGF0aW9uIHRoYXQgaXMgZXF1YWwgdG9cbiAgICBvciBtb3JlIHNwZWNpZmljIHRoYW4gYGV2ZW50YC4gRm9yIGV4YW1wbGUsIGlmIHRoZSB0cmFuc2FjdGlvblxuICAgIGhhcyBgXCJzZWxlY3QucG9pbnRlclwiYCBhcyB1c2VyIGV2ZW50LCBgXCJzZWxlY3RcImAgYW5kXG4gICAgYFwic2VsZWN0LnBvaW50ZXJcImAgd2lsbCBtYXRjaCBpdC5cbiAgICAqL1xuICAgIGlzVXNlckV2ZW50KGV2ZW50KSB7XG4gICAgICAgIGxldCBlID0gdGhpcy5hbm5vdGF0aW9uKFRyYW5zYWN0aW9uLnVzZXJFdmVudCk7XG4gICAgICAgIHJldHVybiAhIShlICYmIChlID09IGV2ZW50IHx8IGUubGVuZ3RoID4gZXZlbnQubGVuZ3RoICYmIGUuc2xpY2UoMCwgZXZlbnQubGVuZ3RoKSA9PSBldmVudCAmJiBlW2V2ZW50Lmxlbmd0aF0gPT0gXCIuXCIpKTtcbiAgICB9XG59XG4vKipcbkFubm90YXRpb24gdXNlZCB0byBzdG9yZSB0cmFuc2FjdGlvbiB0aW1lc3RhbXBzLiBBdXRvbWF0aWNhbGx5XG5hZGRlZCB0byBldmVyeSB0cmFuc2FjdGlvbiwgaG9sZGluZyBgRGF0ZS5ub3coKWAuXG4qL1xuVHJhbnNhY3Rpb24udGltZSA9IEFubm90YXRpb24uZGVmaW5lKCk7XG4vKipcbkFubm90YXRpb24gdXNlZCB0byBhc3NvY2lhdGUgYSB0cmFuc2FjdGlvbiB3aXRoIGEgdXNlciBpbnRlcmZhY2VcbmV2ZW50LiBIb2xkcyBhIHN0cmluZyBpZGVudGlmeWluZyB0aGUgZXZlbnQsIHVzaW5nIGFcbmRvdC1zZXBhcmF0ZWQgZm9ybWF0IHRvIHN1cHBvcnQgYXR0YWNoaW5nIG1vcmUgc3BlY2lmaWNcbmluZm9ybWF0aW9uLiBUaGUgZXZlbnRzIHVzZWQgYnkgdGhlIGNvcmUgbGlicmFyaWVzIGFyZTpcblxuIC0gYFwiaW5wdXRcImAgd2hlbiBjb250ZW50IGlzIGVudGVyZWRcbiAgIC0gYFwiaW5wdXQudHlwZVwiYCBmb3IgdHlwZWQgaW5wdXRcbiAgICAgLSBgXCJpbnB1dC50eXBlLmNvbXBvc2VcImAgZm9yIGNvbXBvc2l0aW9uXG4gICAtIGBcImlucHV0LnBhc3RlXCJgIGZvciBwYXN0ZWQgaW5wdXRcbiAgIC0gYFwiaW5wdXQuZHJvcFwiYCB3aGVuIGFkZGluZyBjb250ZW50IHdpdGggZHJhZy1hbmQtZHJvcFxuICAgLSBgXCJpbnB1dC5jb21wbGV0ZVwiYCB3aGVuIGF1dG9jb21wbGV0aW5nXG4gLSBgXCJkZWxldGVcImAgd2hlbiB0aGUgdXNlciBkZWxldGVzIGNvbnRlbnRcbiAgIC0gYFwiZGVsZXRlLnNlbGVjdGlvblwiYCB3aGVuIGRlbGV0aW5nIHRoZSBzZWxlY3Rpb25cbiAgIC0gYFwiZGVsZXRlLmZvcndhcmRcImAgd2hlbiBkZWxldGluZyBmb3J3YXJkIGZyb20gdGhlIHNlbGVjdGlvblxuICAgLSBgXCJkZWxldGUuYmFja3dhcmRcImAgd2hlbiBkZWxldGluZyBiYWNrd2FyZCBmcm9tIHRoZSBzZWxlY3Rpb25cbiAgIC0gYFwiZGVsZXRlLmN1dFwiYCB3aGVuIGN1dHRpbmcgdG8gdGhlIGNsaXBib2FyZFxuIC0gYFwibW92ZVwiYCB3aGVuIGNvbnRlbnQgaXMgbW92ZWRcbiAgIC0gYFwibW92ZS5kcm9wXCJgIHdoZW4gY29udGVudCBpcyBtb3ZlZCB3aXRoaW4gdGhlIGVkaXRvciB0aHJvdWdoIGRyYWctYW5kLWRyb3BcbiAtIGBcInNlbGVjdFwiYCB3aGVuIGV4cGxpY2l0bHkgY2hhbmdpbmcgdGhlIHNlbGVjdGlvblxuICAgLSBgXCJzZWxlY3QucG9pbnRlclwiYCB3aGVuIHNlbGVjdGluZyB3aXRoIGEgbW91c2Ugb3Igb3RoZXIgcG9pbnRpbmcgZGV2aWNlXG4gLSBgXCJ1bmRvXCJgIGFuZCBgXCJyZWRvXCJgIGZvciBoaXN0b3J5IGFjdGlvbnNcblxuVXNlIFtgaXNVc2VyRXZlbnRgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLlRyYW5zYWN0aW9uLmlzVXNlckV2ZW50KSB0byBjaGVja1xud2hldGhlciB0aGUgYW5ub3RhdGlvbiBtYXRjaGVzIGEgZ2l2ZW4gZXZlbnQuXG4qL1xuVHJhbnNhY3Rpb24udXNlckV2ZW50ID0gQW5ub3RhdGlvbi5kZWZpbmUoKTtcbi8qKlxuQW5ub3RhdGlvbiBpbmRpY2F0aW5nIHdoZXRoZXIgYSB0cmFuc2FjdGlvbiBzaG91bGQgYmUgYWRkZWQgdG9cbnRoZSB1bmRvIGhpc3Rvcnkgb3Igbm90LlxuKi9cblRyYW5zYWN0aW9uLmFkZFRvSGlzdG9yeSA9IEFubm90YXRpb24uZGVmaW5lKCk7XG4vKipcbkFubm90YXRpb24gaW5kaWNhdGluZyAod2hlbiBwcmVzZW50IGFuZCB0cnVlKSB0aGF0IGEgdHJhbnNhY3Rpb25cbnJlcHJlc2VudHMgYSBjaGFuZ2UgbWFkZSBieSBzb21lIG90aGVyIGFjdG9yLCBub3QgdGhlIHVzZXIuIFRoaXNcbmlzIHVzZWQsIGZvciBleGFtcGxlLCB0byB0YWcgb3RoZXIgcGVvcGxlJ3MgY2hhbmdlcyBpblxuY29sbGFib3JhdGl2ZSBlZGl0aW5nLlxuKi9cblRyYW5zYWN0aW9uLnJlbW90ZSA9IEFubm90YXRpb24uZGVmaW5lKCk7XG5mdW5jdGlvbiBqb2luUmFuZ2VzKGEsIGIpIHtcbiAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgZm9yIChsZXQgaUEgPSAwLCBpQiA9IDA7Oykge1xuICAgICAgICBsZXQgZnJvbSwgdG87XG4gICAgICAgIGlmIChpQSA8IGEubGVuZ3RoICYmIChpQiA9PSBiLmxlbmd0aCB8fCBiW2lCXSA+PSBhW2lBXSkpIHtcbiAgICAgICAgICAgIGZyb20gPSBhW2lBKytdO1xuICAgICAgICAgICAgdG8gPSBhW2lBKytdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlCIDwgYi5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZyb20gPSBiW2lCKytdO1xuICAgICAgICAgICAgdG8gPSBiW2lCKytdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIGlmICghcmVzdWx0Lmxlbmd0aCB8fCByZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdIDwgZnJvbSlcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGZyb20sIHRvKTtcbiAgICAgICAgZWxzZSBpZiAocmVzdWx0W3Jlc3VsdC5sZW5ndGggLSAxXSA8IHRvKVxuICAgICAgICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGggLSAxXSA9IHRvO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1lcmdlVHJhbnNhY3Rpb24oYSwgYiwgc2VxdWVudGlhbCkge1xuICAgIHZhciBfYTtcbiAgICBsZXQgbWFwRm9yQSwgbWFwRm9yQiwgY2hhbmdlcztcbiAgICBpZiAoc2VxdWVudGlhbCkge1xuICAgICAgICBtYXBGb3JBID0gYi5jaGFuZ2VzO1xuICAgICAgICBtYXBGb3JCID0gQ2hhbmdlU2V0LmVtcHR5KGIuY2hhbmdlcy5sZW5ndGgpO1xuICAgICAgICBjaGFuZ2VzID0gYS5jaGFuZ2VzLmNvbXBvc2UoYi5jaGFuZ2VzKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG1hcEZvckEgPSBiLmNoYW5nZXMubWFwKGEuY2hhbmdlcyk7XG4gICAgICAgIG1hcEZvckIgPSBhLmNoYW5nZXMubWFwRGVzYyhiLmNoYW5nZXMsIHRydWUpO1xuICAgICAgICBjaGFuZ2VzID0gYS5jaGFuZ2VzLmNvbXBvc2UobWFwRm9yQSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGNoYW5nZXMsXG4gICAgICAgIHNlbGVjdGlvbjogYi5zZWxlY3Rpb24gPyBiLnNlbGVjdGlvbi5tYXAobWFwRm9yQikgOiAoX2EgPSBhLnNlbGVjdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1hcChtYXBGb3JBKSxcbiAgICAgICAgZWZmZWN0czogU3RhdGVFZmZlY3QubWFwRWZmZWN0cyhhLmVmZmVjdHMsIG1hcEZvckEpLmNvbmNhdChTdGF0ZUVmZmVjdC5tYXBFZmZlY3RzKGIuZWZmZWN0cywgbWFwRm9yQikpLFxuICAgICAgICBhbm5vdGF0aW9uczogYS5hbm5vdGF0aW9ucy5sZW5ndGggPyBhLmFubm90YXRpb25zLmNvbmNhdChiLmFubm90YXRpb25zKSA6IGIuYW5ub3RhdGlvbnMsXG4gICAgICAgIHNjcm9sbEludG9WaWV3OiBhLnNjcm9sbEludG9WaWV3IHx8IGIuc2Nyb2xsSW50b1ZpZXdcbiAgICB9O1xufVxuZnVuY3Rpb24gcmVzb2x2ZVRyYW5zYWN0aW9uSW5uZXIoc3RhdGUsIHNwZWMsIGRvY1NpemUpIHtcbiAgICBsZXQgc2VsID0gc3BlYy5zZWxlY3Rpb24sIGFubm90YXRpb25zID0gYXNBcnJheShzcGVjLmFubm90YXRpb25zKTtcbiAgICBpZiAoc3BlYy51c2VyRXZlbnQpXG4gICAgICAgIGFubm90YXRpb25zID0gYW5ub3RhdGlvbnMuY29uY2F0KFRyYW5zYWN0aW9uLnVzZXJFdmVudC5vZihzcGVjLnVzZXJFdmVudCkpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGNoYW5nZXM6IHNwZWMuY2hhbmdlcyBpbnN0YW5jZW9mIENoYW5nZVNldCA/IHNwZWMuY2hhbmdlc1xuICAgICAgICAgICAgOiBDaGFuZ2VTZXQub2Yoc3BlYy5jaGFuZ2VzIHx8IFtdLCBkb2NTaXplLCBzdGF0ZS5mYWNldChsaW5lU2VwYXJhdG9yKSksXG4gICAgICAgIHNlbGVjdGlvbjogc2VsICYmIChzZWwgaW5zdGFuY2VvZiBFZGl0b3JTZWxlY3Rpb24gPyBzZWwgOiBFZGl0b3JTZWxlY3Rpb24uc2luZ2xlKHNlbC5hbmNob3IsIHNlbC5oZWFkKSksXG4gICAgICAgIGVmZmVjdHM6IGFzQXJyYXkoc3BlYy5lZmZlY3RzKSxcbiAgICAgICAgYW5ub3RhdGlvbnMsXG4gICAgICAgIHNjcm9sbEludG9WaWV3OiAhIXNwZWMuc2Nyb2xsSW50b1ZpZXdcbiAgICB9O1xufVxuZnVuY3Rpb24gcmVzb2x2ZVRyYW5zYWN0aW9uKHN0YXRlLCBzcGVjcywgZmlsdGVyKSB7XG4gICAgbGV0IHMgPSByZXNvbHZlVHJhbnNhY3Rpb25Jbm5lcihzdGF0ZSwgc3BlY3MubGVuZ3RoID8gc3BlY3NbMF0gOiB7fSwgc3RhdGUuZG9jLmxlbmd0aCk7XG4gICAgaWYgKHNwZWNzLmxlbmd0aCAmJiBzcGVjc1swXS5maWx0ZXIgPT09IGZhbHNlKVxuICAgICAgICBmaWx0ZXIgPSBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHNwZWNzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChzcGVjc1tpXS5maWx0ZXIgPT09IGZhbHNlKVxuICAgICAgICAgICAgZmlsdGVyID0gZmFsc2U7XG4gICAgICAgIGxldCBzZXEgPSAhIXNwZWNzW2ldLnNlcXVlbnRpYWw7XG4gICAgICAgIHMgPSBtZXJnZVRyYW5zYWN0aW9uKHMsIHJlc29sdmVUcmFuc2FjdGlvbklubmVyKHN0YXRlLCBzcGVjc1tpXSwgc2VxID8gcy5jaGFuZ2VzLm5ld0xlbmd0aCA6IHN0YXRlLmRvYy5sZW5ndGgpLCBzZXEpO1xuICAgIH1cbiAgICBsZXQgdHIgPSBUcmFuc2FjdGlvbi5jcmVhdGUoc3RhdGUsIHMuY2hhbmdlcywgcy5zZWxlY3Rpb24sIHMuZWZmZWN0cywgcy5hbm5vdGF0aW9ucywgcy5zY3JvbGxJbnRvVmlldyk7XG4gICAgcmV0dXJuIGV4dGVuZFRyYW5zYWN0aW9uKGZpbHRlciA/IGZpbHRlclRyYW5zYWN0aW9uKHRyKSA6IHRyKTtcbn1cbi8vIEZpbmlzaCBhIHRyYW5zYWN0aW9uIGJ5IGFwcGx5aW5nIGZpbHRlcnMgaWYgbmVjZXNzYXJ5LlxuZnVuY3Rpb24gZmlsdGVyVHJhbnNhY3Rpb24odHIpIHtcbiAgICBsZXQgc3RhdGUgPSB0ci5zdGFydFN0YXRlO1xuICAgIC8vIENoYW5nZSBmaWx0ZXJzXG4gICAgbGV0IHJlc3VsdCA9IHRydWU7XG4gICAgZm9yIChsZXQgZmlsdGVyIG9mIHN0YXRlLmZhY2V0KGNoYW5nZUZpbHRlcikpIHtcbiAgICAgICAgbGV0IHZhbHVlID0gZmlsdGVyKHRyKTtcbiAgICAgICAgaWYgKHZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpXG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHQgPT09IHRydWUgPyB2YWx1ZSA6IGpvaW5SYW5nZXMocmVzdWx0LCB2YWx1ZSk7XG4gICAgfVxuICAgIGlmIChyZXN1bHQgIT09IHRydWUpIHtcbiAgICAgICAgbGV0IGNoYW5nZXMsIGJhY2s7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBiYWNrID0gdHIuY2hhbmdlcy5pbnZlcnRlZERlc2M7XG4gICAgICAgICAgICBjaGFuZ2VzID0gQ2hhbmdlU2V0LmVtcHR5KHN0YXRlLmRvYy5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGV0IGZpbHRlcmVkID0gdHIuY2hhbmdlcy5maWx0ZXIocmVzdWx0KTtcbiAgICAgICAgICAgIGNoYW5nZXMgPSBmaWx0ZXJlZC5jaGFuZ2VzO1xuICAgICAgICAgICAgYmFjayA9IGZpbHRlcmVkLmZpbHRlcmVkLm1hcERlc2MoZmlsdGVyZWQuY2hhbmdlcykuaW52ZXJ0ZWREZXNjO1xuICAgICAgICB9XG4gICAgICAgIHRyID0gVHJhbnNhY3Rpb24uY3JlYXRlKHN0YXRlLCBjaGFuZ2VzLCB0ci5zZWxlY3Rpb24gJiYgdHIuc2VsZWN0aW9uLm1hcChiYWNrKSwgU3RhdGVFZmZlY3QubWFwRWZmZWN0cyh0ci5lZmZlY3RzLCBiYWNrKSwgdHIuYW5ub3RhdGlvbnMsIHRyLnNjcm9sbEludG9WaWV3KTtcbiAgICB9XG4gICAgLy8gVHJhbnNhY3Rpb24gZmlsdGVyc1xuICAgIGxldCBmaWx0ZXJzID0gc3RhdGUuZmFjZXQodHJhbnNhY3Rpb25GaWx0ZXIpO1xuICAgIGZvciAobGV0IGkgPSBmaWx0ZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGxldCBmaWx0ZXJlZCA9IGZpbHRlcnNbaV0odHIpO1xuICAgICAgICBpZiAoZmlsdGVyZWQgaW5zdGFuY2VvZiBUcmFuc2FjdGlvbilcbiAgICAgICAgICAgIHRyID0gZmlsdGVyZWQ7XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZmlsdGVyZWQpICYmIGZpbHRlcmVkLmxlbmd0aCA9PSAxICYmIGZpbHRlcmVkWzBdIGluc3RhbmNlb2YgVHJhbnNhY3Rpb24pXG4gICAgICAgICAgICB0ciA9IGZpbHRlcmVkWzBdO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0ciA9IHJlc29sdmVUcmFuc2FjdGlvbihzdGF0ZSwgYXNBcnJheShmaWx0ZXJlZCksIGZhbHNlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRyO1xufVxuZnVuY3Rpb24gZXh0ZW5kVHJhbnNhY3Rpb24odHIpIHtcbiAgICBsZXQgc3RhdGUgPSB0ci5zdGFydFN0YXRlLCBleHRlbmRlcnMgPSBzdGF0ZS5mYWNldCh0cmFuc2FjdGlvbkV4dGVuZGVyKSwgc3BlYyA9IHRyO1xuICAgIGZvciAobGV0IGkgPSBleHRlbmRlcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgbGV0IGV4dGVuc2lvbiA9IGV4dGVuZGVyc1tpXSh0cik7XG4gICAgICAgIGlmIChleHRlbnNpb24gJiYgT2JqZWN0LmtleXMoZXh0ZW5zaW9uKS5sZW5ndGgpXG4gICAgICAgICAgICBzcGVjID0gbWVyZ2VUcmFuc2FjdGlvbihzcGVjLCByZXNvbHZlVHJhbnNhY3Rpb25Jbm5lcihzdGF0ZSwgZXh0ZW5zaW9uLCB0ci5jaGFuZ2VzLm5ld0xlbmd0aCksIHRydWUpO1xuICAgIH1cbiAgICByZXR1cm4gc3BlYyA9PSB0ciA/IHRyIDogVHJhbnNhY3Rpb24uY3JlYXRlKHN0YXRlLCB0ci5jaGFuZ2VzLCB0ci5zZWxlY3Rpb24sIHNwZWMuZWZmZWN0cywgc3BlYy5hbm5vdGF0aW9ucywgc3BlYy5zY3JvbGxJbnRvVmlldyk7XG59XG5jb25zdCBub25lID0gW107XG5mdW5jdGlvbiBhc0FycmF5KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyBub25lIDogQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV07XG59XG5cbi8qKlxuVGhlIGNhdGVnb3JpZXMgcHJvZHVjZWQgYnkgYSBbY2hhcmFjdGVyXG5jYXRlZ29yaXplcl0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5FZGl0b3JTdGF0ZS5jaGFyQ2F0ZWdvcml6ZXIpLiBUaGVzZSBhcmUgdXNlZFxuZG8gdGhpbmdzIGxpa2Ugc2VsZWN0aW5nIGJ5IHdvcmQuXG4qL1xuZXhwb3J0cy5DaGFyQ2F0ZWdvcnkgPSB2b2lkIDA7XG4oZnVuY3Rpb24gKENoYXJDYXRlZ29yeSkge1xuICAgIC8qKlxuICAgIFdvcmQgY2hhcmFjdGVycy5cbiAgICAqL1xuICAgIENoYXJDYXRlZ29yeVtDaGFyQ2F0ZWdvcnlbXCJXb3JkXCJdID0gMF0gPSBcIldvcmRcIjtcbiAgICAvKipcbiAgICBXaGl0ZXNwYWNlLlxuICAgICovXG4gICAgQ2hhckNhdGVnb3J5W0NoYXJDYXRlZ29yeVtcIlNwYWNlXCJdID0gMV0gPSBcIlNwYWNlXCI7XG4gICAgLyoqXG4gICAgQW55dGhpbmcgZWxzZS5cbiAgICAqL1xuICAgIENoYXJDYXRlZ29yeVtDaGFyQ2F0ZWdvcnlbXCJPdGhlclwiXSA9IDJdID0gXCJPdGhlclwiO1xufSkoZXhwb3J0cy5DaGFyQ2F0ZWdvcnkgfHwgKGV4cG9ydHMuQ2hhckNhdGVnb3J5ID0ge30pKTtcbmNvbnN0IG5vbkFTQ0lJU2luZ2xlQ2FzZVdvcmRDaGFyID0gL1tcXHUwMGRmXFx1MDU4N1xcdTA1OTAtXFx1MDVmNFxcdTA2MDAtXFx1MDZmZlxcdTMwNDAtXFx1MzA5ZlxcdTMwYTAtXFx1MzBmZlxcdTM0MDAtXFx1NGRiNVxcdTRlMDAtXFx1OWZjY1xcdWFjMDAtXFx1ZDdhZl0vO1xubGV0IHdvcmRDaGFyO1xudHJ5IHtcbiAgICB3b3JkQ2hhciA9IG5ldyBSZWdFeHAoXCJbXFxcXHB7QWxwaGFiZXRpY31cXFxccHtOdW1iZXJ9X11cIiwgXCJ1XCIpO1xufVxuY2F0Y2ggKF8pIHsgfVxuZnVuY3Rpb24gaGFzV29yZENoYXIoc3RyKSB7XG4gICAgaWYgKHdvcmRDaGFyKVxuICAgICAgICByZXR1cm4gd29yZENoYXIudGVzdChzdHIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBjaCA9IHN0cltpXTtcbiAgICAgICAgaWYgKC9cXHcvLnRlc3QoY2gpIHx8IGNoID4gXCJcXHg4MFwiICYmIChjaC50b1VwcGVyQ2FzZSgpICE9IGNoLnRvTG93ZXJDYXNlKCkgfHwgbm9uQVNDSUlTaW5nbGVDYXNlV29yZENoYXIudGVzdChjaCkpKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIG1ha2VDYXRlZ29yaXplcih3b3JkQ2hhcnMpIHtcbiAgICByZXR1cm4gKGNoYXIpID0+IHtcbiAgICAgICAgaWYgKCEvXFxTLy50ZXN0KGNoYXIpKVxuICAgICAgICAgICAgcmV0dXJuIGV4cG9ydHMuQ2hhckNhdGVnb3J5LlNwYWNlO1xuICAgICAgICBpZiAoaGFzV29yZENoYXIoY2hhcikpXG4gICAgICAgICAgICByZXR1cm4gZXhwb3J0cy5DaGFyQ2F0ZWdvcnkuV29yZDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3b3JkQ2hhcnMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBpZiAoY2hhci5pbmRleE9mKHdvcmRDaGFyc1tpXSkgPiAtMSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZXhwb3J0cy5DaGFyQ2F0ZWdvcnkuV29yZDtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuQ2hhckNhdGVnb3J5Lk90aGVyO1xuICAgIH07XG59XG5cbi8qKlxuVGhlIGVkaXRvciBzdGF0ZSBjbGFzcyBpcyBhIHBlcnNpc3RlbnQgKGltbXV0YWJsZSkgZGF0YSBzdHJ1Y3R1cmUuXG5UbyB1cGRhdGUgYSBzdGF0ZSwgeW91IFtjcmVhdGVdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuRWRpdG9yU3RhdGUudXBkYXRlKSBhXG5bdHJhbnNhY3Rpb25dKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuVHJhbnNhY3Rpb24pLCB3aGljaCBwcm9kdWNlcyBhIF9uZXdfIHN0YXRlXG5pbnN0YW5jZSwgd2l0aG91dCBtb2RpZnlpbmcgdGhlIG9yaWdpbmFsIG9iamVjdC5cblxuQXMgc3VjaCwgX25ldmVyXyBtdXRhdGUgcHJvcGVydGllcyBvZiBhIHN0YXRlIGRpcmVjdGx5LiBUaGF0J2xsXG5qdXN0IGJyZWFrIHRoaW5ncy5cbiovXG5jbGFzcyBFZGl0b3JTdGF0ZSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBjb25maWcsIFxuICAgIC8qKlxuICAgIFRoZSBjdXJyZW50IGRvY3VtZW50LlxuICAgICovXG4gICAgZG9jLCBcbiAgICAvKipcbiAgICBUaGUgY3VycmVudCBzZWxlY3Rpb24uXG4gICAgKi9cbiAgICBzZWxlY3Rpb24sIFxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgdmFsdWVzLCBjb21wdXRlU2xvdCwgdHIpIHtcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgICAgIHRoaXMuZG9jID0gZG9jO1xuICAgICAgICB0aGlzLnNlbGVjdGlvbiA9IHNlbGVjdGlvbjtcbiAgICAgICAgdGhpcy52YWx1ZXMgPSB2YWx1ZXM7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gY29uZmlnLnN0YXR1c1RlbXBsYXRlLnNsaWNlKCk7XG4gICAgICAgIHRoaXMuY29tcHV0ZVNsb3QgPSBjb21wdXRlU2xvdDtcbiAgICAgICAgLy8gRmlsbCBpbiB0aGUgY29tcHV0ZWQgc3RhdGUgaW1tZWRpYXRlbHksIHNvIHRoYXQgZnVydGhlciBxdWVyaWVzXG4gICAgICAgIC8vIGZvciBpdCBtYWRlIGR1cmluZyB0aGUgdXBkYXRlIHJldHVybiB0aGlzIHN0YXRlXG4gICAgICAgIGlmICh0cilcbiAgICAgICAgICAgIHRyLl9zdGF0ZSA9IHRoaXM7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb25maWcuZHluYW1pY1Nsb3RzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgZW5zdXJlQWRkcih0aGlzLCBpIDw8IDEpO1xuICAgICAgICB0aGlzLmNvbXB1dGVTbG90ID0gbnVsbDtcbiAgICB9XG4gICAgZmllbGQoZmllbGQsIHJlcXVpcmUgPSB0cnVlKSB7XG4gICAgICAgIGxldCBhZGRyID0gdGhpcy5jb25maWcuYWRkcmVzc1tmaWVsZC5pZF07XG4gICAgICAgIGlmIChhZGRyID09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChyZXF1aXJlKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiRmllbGQgaXMgbm90IHByZXNlbnQgaW4gdGhpcyBzdGF0ZVwiKTtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZW5zdXJlQWRkcih0aGlzLCBhZGRyKTtcbiAgICAgICAgcmV0dXJuIGdldEFkZHIodGhpcywgYWRkcik7XG4gICAgfVxuICAgIC8qKlxuICAgIENyZWF0ZSBhIFt0cmFuc2FjdGlvbl0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5UcmFuc2FjdGlvbikgdGhhdCB1cGRhdGVzIHRoaXNcbiAgICBzdGF0ZS4gQW55IG51bWJlciBvZiBbdHJhbnNhY3Rpb24gc3BlY3NdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuVHJhbnNhY3Rpb25TcGVjKVxuICAgIGNhbiBiZSBwYXNzZWQuIFVubGVzc1xuICAgIFtgc2VxdWVudGlhbGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuVHJhbnNhY3Rpb25TcGVjLnNlcXVlbnRpYWwpIGlzIHNldCwgdGhlXG4gICAgW2NoYW5nZXNdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuVHJhbnNhY3Rpb25TcGVjLmNoYW5nZXMpIChpZiBhbnkpIG9mIGVhY2ggc3BlY1xuICAgIGFyZSBhc3N1bWVkIHRvIHN0YXJ0IGluIHRoZSBfY3VycmVudF8gZG9jdW1lbnQgKG5vdCB0aGUgZG9jdW1lbnRcbiAgICBwcm9kdWNlZCBieSBwcmV2aW91cyBzcGVjcyksIGFuZCBpdHNcbiAgICBbc2VsZWN0aW9uXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLlRyYW5zYWN0aW9uU3BlYy5zZWxlY3Rpb24pIGFuZFxuICAgIFtlZmZlY3RzXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLlRyYW5zYWN0aW9uU3BlYy5lZmZlY3RzKSBhcmUgYXNzdW1lZCB0byByZWZlclxuICAgIHRvIHRoZSBkb2N1bWVudCBjcmVhdGVkIGJ5IGl0cyBfb3duXyBjaGFuZ2VzLiBUaGUgcmVzdWx0aW5nXG4gICAgdHJhbnNhY3Rpb24gY29udGFpbnMgdGhlIGNvbWJpbmVkIGVmZmVjdCBvZiBhbGwgdGhlIGRpZmZlcmVudFxuICAgIHNwZWNzLiBGb3IgW3NlbGVjdGlvbl0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5UcmFuc2FjdGlvblNwZWMuc2VsZWN0aW9uKSwgbGF0ZXJcbiAgICBzcGVjcyB0YWtlIHByZWNlZGVuY2Ugb3ZlciBlYXJsaWVyIG9uZXMuXG4gICAgKi9cbiAgICB1cGRhdGUoLi4uc3BlY3MpIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmVUcmFuc2FjdGlvbih0aGlzLCBzcGVjcywgdHJ1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgYXBwbHlUcmFuc2FjdGlvbih0cikge1xuICAgICAgICBsZXQgY29uZiA9IHRoaXMuY29uZmlnLCB7IGJhc2UsIGNvbXBhcnRtZW50cyB9ID0gY29uZjtcbiAgICAgICAgZm9yIChsZXQgZWZmZWN0IG9mIHRyLmVmZmVjdHMpIHtcbiAgICAgICAgICAgIGlmIChlZmZlY3QuaXMoQ29tcGFydG1lbnQucmVjb25maWd1cmUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbmYpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGFydG1lbnRzID0gbmV3IE1hcDtcbiAgICAgICAgICAgICAgICAgICAgY29uZi5jb21wYXJ0bWVudHMuZm9yRWFjaCgodmFsLCBrZXkpID0+IGNvbXBhcnRtZW50cy5zZXQoa2V5LCB2YWwpKTtcbiAgICAgICAgICAgICAgICAgICAgY29uZiA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbXBhcnRtZW50cy5zZXQoZWZmZWN0LnZhbHVlLmNvbXBhcnRtZW50LCBlZmZlY3QudmFsdWUuZXh0ZW5zaW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGVmZmVjdC5pcyhTdGF0ZUVmZmVjdC5yZWNvbmZpZ3VyZSkpIHtcbiAgICAgICAgICAgICAgICBjb25mID0gbnVsbDtcbiAgICAgICAgICAgICAgICBiYXNlID0gZWZmZWN0LnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZWZmZWN0LmlzKFN0YXRlRWZmZWN0LmFwcGVuZENvbmZpZykpIHtcbiAgICAgICAgICAgICAgICBjb25mID0gbnVsbDtcbiAgICAgICAgICAgICAgICBiYXNlID0gYXNBcnJheShiYXNlKS5jb25jYXQoZWZmZWN0LnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgc3RhcnRWYWx1ZXM7XG4gICAgICAgIGlmICghY29uZikge1xuICAgICAgICAgICAgY29uZiA9IENvbmZpZ3VyYXRpb24ucmVzb2x2ZShiYXNlLCBjb21wYXJ0bWVudHMsIHRoaXMpO1xuICAgICAgICAgICAgbGV0IGludGVybWVkaWF0ZVN0YXRlID0gbmV3IEVkaXRvclN0YXRlKGNvbmYsIHRoaXMuZG9jLCB0aGlzLnNlbGVjdGlvbiwgY29uZi5keW5hbWljU2xvdHMubWFwKCgpID0+IG51bGwpLCAoc3RhdGUsIHNsb3QpID0+IHNsb3QucmVjb25maWd1cmUoc3RhdGUsIHRoaXMpLCBudWxsKTtcbiAgICAgICAgICAgIHN0YXJ0VmFsdWVzID0gaW50ZXJtZWRpYXRlU3RhdGUudmFsdWVzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3RhcnRWYWx1ZXMgPSB0ci5zdGFydFN0YXRlLnZhbHVlcy5zbGljZSgpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzZWxlY3Rpb24gPSB0ci5zdGFydFN0YXRlLmZhY2V0KGFsbG93TXVsdGlwbGVTZWxlY3Rpb25zKSA/IHRyLm5ld1NlbGVjdGlvbiA6IHRyLm5ld1NlbGVjdGlvbi5hc1NpbmdsZSgpO1xuICAgICAgICBuZXcgRWRpdG9yU3RhdGUoY29uZiwgdHIubmV3RG9jLCBzZWxlY3Rpb24sIHN0YXJ0VmFsdWVzLCAoc3RhdGUsIHNsb3QpID0+IHNsb3QudXBkYXRlKHN0YXRlLCB0ciksIHRyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgW3RyYW5zYWN0aW9uIHNwZWNdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuVHJhbnNhY3Rpb25TcGVjKSB0aGF0XG4gICAgcmVwbGFjZXMgZXZlcnkgc2VsZWN0aW9uIHJhbmdlIHdpdGggdGhlIGdpdmVuIGNvbnRlbnQuXG4gICAgKi9cbiAgICByZXBsYWNlU2VsZWN0aW9uKHRleHQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0ZXh0ID09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICB0ZXh0ID0gdGhpcy50b1RleHQodGV4dCk7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYW5nZUJ5UmFuZ2UocmFuZ2UgPT4gKHsgY2hhbmdlczogeyBmcm9tOiByYW5nZS5mcm9tLCB0bzogcmFuZ2UudG8sIGluc2VydDogdGV4dCB9LFxuICAgICAgICAgICAgcmFuZ2U6IEVkaXRvclNlbGVjdGlvbi5jdXJzb3IocmFuZ2UuZnJvbSArIHRleHQubGVuZ3RoKSB9KSk7XG4gICAgfVxuICAgIC8qKlxuICAgIENyZWF0ZSBhIHNldCBvZiBjaGFuZ2VzIGFuZCBhIG5ldyBzZWxlY3Rpb24gYnkgcnVubmluZyB0aGUgZ2l2ZW5cbiAgICBmdW5jdGlvbiBmb3IgZWFjaCByYW5nZSBpbiB0aGUgYWN0aXZlIHNlbGVjdGlvbi4gVGhlIGZ1bmN0aW9uXG4gICAgY2FuIHJldHVybiBhbiBvcHRpb25hbCBzZXQgb2YgY2hhbmdlcyAoaW4gdGhlIGNvb3JkaW5hdGUgc3BhY2VcbiAgICBvZiB0aGUgc3RhcnQgZG9jdW1lbnQpLCBwbHVzIGFuIHVwZGF0ZWQgcmFuZ2UgKGluIHRoZSBjb29yZGluYXRlXG4gICAgc3BhY2Ugb2YgdGhlIGRvY3VtZW50IHByb2R1Y2VkIGJ5IHRoZSBjYWxsJ3Mgb3duIGNoYW5nZXMpLiBUaGlzXG4gICAgbWV0aG9kIHdpbGwgbWVyZ2UgYWxsIHRoZSBjaGFuZ2VzIGFuZCByYW5nZXMgaW50byBhIHNpbmdsZVxuICAgIGNoYW5nZXNldCBhbmQgc2VsZWN0aW9uLCBhbmQgcmV0dXJuIGl0IGFzIGEgW3RyYW5zYWN0aW9uXG4gICAgc3BlY10oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5UcmFuc2FjdGlvblNwZWMpLCB3aGljaCBjYW4gYmUgcGFzc2VkIHRvXG4gICAgW2B1cGRhdGVgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLkVkaXRvclN0YXRlLnVwZGF0ZSkuXG4gICAgKi9cbiAgICBjaGFuZ2VCeVJhbmdlKGYpIHtcbiAgICAgICAgbGV0IHNlbCA9IHRoaXMuc2VsZWN0aW9uO1xuICAgICAgICBsZXQgcmVzdWx0MSA9IGYoc2VsLnJhbmdlc1swXSk7XG4gICAgICAgIGxldCBjaGFuZ2VzID0gdGhpcy5jaGFuZ2VzKHJlc3VsdDEuY2hhbmdlcyksIHJhbmdlcyA9IFtyZXN1bHQxLnJhbmdlXTtcbiAgICAgICAgbGV0IGVmZmVjdHMgPSBhc0FycmF5KHJlc3VsdDEuZWZmZWN0cyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgc2VsLnJhbmdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGYoc2VsLnJhbmdlc1tpXSk7XG4gICAgICAgICAgICBsZXQgbmV3Q2hhbmdlcyA9IHRoaXMuY2hhbmdlcyhyZXN1bHQuY2hhbmdlcyksIG5ld01hcHBlZCA9IG5ld0NoYW5nZXMubWFwKGNoYW5nZXMpO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBpOyBqKyspXG4gICAgICAgICAgICAgICAgcmFuZ2VzW2pdID0gcmFuZ2VzW2pdLm1hcChuZXdNYXBwZWQpO1xuICAgICAgICAgICAgbGV0IG1hcEJ5ID0gY2hhbmdlcy5tYXBEZXNjKG5ld0NoYW5nZXMsIHRydWUpO1xuICAgICAgICAgICAgcmFuZ2VzLnB1c2gocmVzdWx0LnJhbmdlLm1hcChtYXBCeSkpO1xuICAgICAgICAgICAgY2hhbmdlcyA9IGNoYW5nZXMuY29tcG9zZShuZXdNYXBwZWQpO1xuICAgICAgICAgICAgZWZmZWN0cyA9IFN0YXRlRWZmZWN0Lm1hcEVmZmVjdHMoZWZmZWN0cywgbmV3TWFwcGVkKS5jb25jYXQoU3RhdGVFZmZlY3QubWFwRWZmZWN0cyhhc0FycmF5KHJlc3VsdC5lZmZlY3RzKSwgbWFwQnkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2hhbmdlcyxcbiAgICAgICAgICAgIHNlbGVjdGlvbjogRWRpdG9yU2VsZWN0aW9uLmNyZWF0ZShyYW5nZXMsIHNlbC5tYWluSW5kZXgpLFxuICAgICAgICAgICAgZWZmZWN0c1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICBDcmVhdGUgYSBbY2hhbmdlIHNldF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5DaGFuZ2VTZXQpIGZyb20gdGhlIGdpdmVuIGNoYW5nZVxuICAgIGRlc2NyaXB0aW9uLCB0YWtpbmcgdGhlIHN0YXRlJ3MgZG9jdW1lbnQgbGVuZ3RoIGFuZCBsaW5lXG4gICAgc2VwYXJhdG9yIGludG8gYWNjb3VudC5cbiAgICAqL1xuICAgIGNoYW5nZXMoc3BlYyA9IFtdKSB7XG4gICAgICAgIGlmIChzcGVjIGluc3RhbmNlb2YgQ2hhbmdlU2V0KVxuICAgICAgICAgICAgcmV0dXJuIHNwZWM7XG4gICAgICAgIHJldHVybiBDaGFuZ2VTZXQub2Yoc3BlYywgdGhpcy5kb2MubGVuZ3RoLCB0aGlzLmZhY2V0KEVkaXRvclN0YXRlLmxpbmVTZXBhcmF0b3IpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgVXNpbmcgdGhlIHN0YXRlJ3MgW2xpbmVcbiAgICBzZXBhcmF0b3JdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuRWRpdG9yU3RhdGVebGluZVNlcGFyYXRvciksIGNyZWF0ZSBhXG4gICAgW2BUZXh0YF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5UZXh0KSBpbnN0YW5jZSBmcm9tIHRoZSBnaXZlbiBzdHJpbmcuXG4gICAgKi9cbiAgICB0b1RleHQoc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBUZXh0Lm9mKHN0cmluZy5zcGxpdCh0aGlzLmZhY2V0KEVkaXRvclN0YXRlLmxpbmVTZXBhcmF0b3IpIHx8IERlZmF1bHRTcGxpdCkpO1xuICAgIH1cbiAgICAvKipcbiAgICBSZXR1cm4gdGhlIGdpdmVuIHJhbmdlIG9mIHRoZSBkb2N1bWVudCBhcyBhIHN0cmluZy5cbiAgICAqL1xuICAgIHNsaWNlRG9jKGZyb20gPSAwLCB0byA9IHRoaXMuZG9jLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kb2Muc2xpY2VTdHJpbmcoZnJvbSwgdG8sIHRoaXMubGluZUJyZWFrKTtcbiAgICB9XG4gICAgLyoqXG4gICAgR2V0IHRoZSB2YWx1ZSBvZiBhIHN0YXRlIFtmYWNldF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5GYWNldCkuXG4gICAgKi9cbiAgICBmYWNldChmYWNldCkge1xuICAgICAgICBsZXQgYWRkciA9IHRoaXMuY29uZmlnLmFkZHJlc3NbZmFjZXQuaWRdO1xuICAgICAgICBpZiAoYWRkciA9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIGZhY2V0LmRlZmF1bHQ7XG4gICAgICAgIGVuc3VyZUFkZHIodGhpcywgYWRkcik7XG4gICAgICAgIHJldHVybiBnZXRBZGRyKHRoaXMsIGFkZHIpO1xuICAgIH1cbiAgICAvKipcbiAgICBDb252ZXJ0IHRoaXMgc3RhdGUgdG8gYSBKU09OLXNlcmlhbGl6YWJsZSBvYmplY3QuIFdoZW4gY3VzdG9tXG4gICAgZmllbGRzIHNob3VsZCBiZSBzZXJpYWxpemVkLCB5b3UgY2FuIHBhc3MgdGhlbSBpbiBhcyBhbiBvYmplY3RcbiAgICBtYXBwaW5nIHByb3BlcnR5IG5hbWVzIChpbiB0aGUgcmVzdWx0aW5nIG9iamVjdCwgd2hpY2ggc2hvdWxkXG4gICAgbm90IHVzZSBgZG9jYCBvciBgc2VsZWN0aW9uYCkgdG8gZmllbGRzLlxuICAgICovXG4gICAgdG9KU09OKGZpZWxkcykge1xuICAgICAgICBsZXQgcmVzdWx0ID0ge1xuICAgICAgICAgICAgZG9jOiB0aGlzLnNsaWNlRG9jKCksXG4gICAgICAgICAgICBzZWxlY3Rpb246IHRoaXMuc2VsZWN0aW9uLnRvSlNPTigpXG4gICAgICAgIH07XG4gICAgICAgIGlmIChmaWVsZHMpXG4gICAgICAgICAgICBmb3IgKGxldCBwcm9wIGluIGZpZWxkcykge1xuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IGZpZWxkc1twcm9wXTtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBTdGF0ZUZpZWxkICYmIHRoaXMuY29uZmlnLmFkZHJlc3NbdmFsdWUuaWRdICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtwcm9wXSA9IHZhbHVlLnNwZWMudG9KU09OKHRoaXMuZmllbGQoZmllbGRzW3Byb3BdKSwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgIERlc2VyaWFsaXplIGEgc3RhdGUgZnJvbSBpdHMgSlNPTiByZXByZXNlbnRhdGlvbi4gV2hlbiBjdXN0b21cbiAgICBmaWVsZHMgc2hvdWxkIGJlIGRlc2VyaWFsaXplZCwgcGFzcyB0aGUgc2FtZSBvYmplY3QgeW91IHBhc3NlZFxuICAgIHRvIFtgdG9KU09OYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5FZGl0b3JTdGF0ZS50b0pTT04pIHdoZW4gc2VyaWFsaXppbmcgYXNcbiAgICB0aGlyZCBhcmd1bWVudC5cbiAgICAqL1xuICAgIHN0YXRpYyBmcm9tSlNPTihqc29uLCBjb25maWcgPSB7fSwgZmllbGRzKSB7XG4gICAgICAgIGlmICghanNvbiB8fCB0eXBlb2YganNvbi5kb2MgIT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBKU09OIHJlcHJlc2VudGF0aW9uIGZvciBFZGl0b3JTdGF0ZVwiKTtcbiAgICAgICAgbGV0IGZpZWxkSW5pdCA9IFtdO1xuICAgICAgICBpZiAoZmllbGRzKVxuICAgICAgICAgICAgZm9yIChsZXQgcHJvcCBpbiBmaWVsZHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGpzb24sIHByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBmaWVsZCA9IGZpZWxkc1twcm9wXSwgdmFsdWUgPSBqc29uW3Byb3BdO1xuICAgICAgICAgICAgICAgICAgICBmaWVsZEluaXQucHVzaChmaWVsZC5pbml0KHN0YXRlID0+IGZpZWxkLnNwZWMuZnJvbUpTT04odmFsdWUsIHN0YXRlKSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEVkaXRvclN0YXRlLmNyZWF0ZSh7XG4gICAgICAgICAgICBkb2M6IGpzb24uZG9jLFxuICAgICAgICAgICAgc2VsZWN0aW9uOiBFZGl0b3JTZWxlY3Rpb24uZnJvbUpTT04oanNvbi5zZWxlY3Rpb24pLFxuICAgICAgICAgICAgZXh0ZW5zaW9uczogY29uZmlnLmV4dGVuc2lvbnMgPyBmaWVsZEluaXQuY29uY2F0KFtjb25maWcuZXh0ZW5zaW9uc10pIDogZmllbGRJbml0XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICBDcmVhdGUgYSBuZXcgc3RhdGUuIFlvdSdsbCB1c3VhbGx5IG9ubHkgbmVlZCB0aGlzIHdoZW5cbiAgICBpbml0aWFsaXppbmcgYW4gZWRpdG9y4oCUdXBkYXRlZCBzdGF0ZXMgYXJlIGNyZWF0ZWQgYnkgYXBwbHlpbmdcbiAgICB0cmFuc2FjdGlvbnMuXG4gICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlKGNvbmZpZyA9IHt9KSB7XG4gICAgICAgIGxldCBjb25maWd1cmF0aW9uID0gQ29uZmlndXJhdGlvbi5yZXNvbHZlKGNvbmZpZy5leHRlbnNpb25zIHx8IFtdLCBuZXcgTWFwKTtcbiAgICAgICAgbGV0IGRvYyA9IGNvbmZpZy5kb2MgaW5zdGFuY2VvZiBUZXh0ID8gY29uZmlnLmRvY1xuICAgICAgICAgICAgOiBUZXh0Lm9mKChjb25maWcuZG9jIHx8IFwiXCIpLnNwbGl0KGNvbmZpZ3VyYXRpb24uc3RhdGljRmFjZXQoRWRpdG9yU3RhdGUubGluZVNlcGFyYXRvcikgfHwgRGVmYXVsdFNwbGl0KSk7XG4gICAgICAgIGxldCBzZWxlY3Rpb24gPSAhY29uZmlnLnNlbGVjdGlvbiA/IEVkaXRvclNlbGVjdGlvbi5zaW5nbGUoMClcbiAgICAgICAgICAgIDogY29uZmlnLnNlbGVjdGlvbiBpbnN0YW5jZW9mIEVkaXRvclNlbGVjdGlvbiA/IGNvbmZpZy5zZWxlY3Rpb25cbiAgICAgICAgICAgICAgICA6IEVkaXRvclNlbGVjdGlvbi5zaW5nbGUoY29uZmlnLnNlbGVjdGlvbi5hbmNob3IsIGNvbmZpZy5zZWxlY3Rpb24uaGVhZCk7XG4gICAgICAgIGNoZWNrU2VsZWN0aW9uKHNlbGVjdGlvbiwgZG9jLmxlbmd0aCk7XG4gICAgICAgIGlmICghY29uZmlndXJhdGlvbi5zdGF0aWNGYWNldChhbGxvd011bHRpcGxlU2VsZWN0aW9ucykpXG4gICAgICAgICAgICBzZWxlY3Rpb24gPSBzZWxlY3Rpb24uYXNTaW5nbGUoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBFZGl0b3JTdGF0ZShjb25maWd1cmF0aW9uLCBkb2MsIHNlbGVjdGlvbiwgY29uZmlndXJhdGlvbi5keW5hbWljU2xvdHMubWFwKCgpID0+IG51bGwpLCAoc3RhdGUsIHNsb3QpID0+IHNsb3QuY3JlYXRlKHN0YXRlKSwgbnVsbCk7XG4gICAgfVxuICAgIC8qKlxuICAgIFRoZSBzaXplIChpbiBjb2x1bW5zKSBvZiBhIHRhYiBpbiB0aGUgZG9jdW1lbnQsIGRldGVybWluZWQgYnlcbiAgICB0aGUgW2B0YWJTaXplYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5FZGl0b3JTdGF0ZV50YWJTaXplKSBmYWNldC5cbiAgICAqL1xuICAgIGdldCB0YWJTaXplKCkgeyByZXR1cm4gdGhpcy5mYWNldChFZGl0b3JTdGF0ZS50YWJTaXplKTsgfVxuICAgIC8qKlxuICAgIEdldCB0aGUgcHJvcGVyIFtsaW5lLWJyZWFrXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLkVkaXRvclN0YXRlXmxpbmVTZXBhcmF0b3IpXG4gICAgc3RyaW5nIGZvciB0aGlzIHN0YXRlLlxuICAgICovXG4gICAgZ2V0IGxpbmVCcmVhaygpIHsgcmV0dXJuIHRoaXMuZmFjZXQoRWRpdG9yU3RhdGUubGluZVNlcGFyYXRvcikgfHwgXCJcXG5cIjsgfVxuICAgIC8qKlxuICAgIFJldHVybnMgdHJ1ZSB3aGVuIHRoZSBlZGl0b3IgaXNcbiAgICBbY29uZmlndXJlZF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5FZGl0b3JTdGF0ZV5yZWFkT25seSkgdG8gYmUgcmVhZC1vbmx5LlxuICAgICovXG4gICAgZ2V0IHJlYWRPbmx5KCkgeyByZXR1cm4gdGhpcy5mYWNldChyZWFkT25seSk7IH1cbiAgICAvKipcbiAgICBMb29rIHVwIGEgdHJhbnNsYXRpb24gZm9yIHRoZSBnaXZlbiBwaHJhc2UgKHZpYSB0aGVcbiAgICBbYHBocmFzZXNgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLkVkaXRvclN0YXRlXnBocmFzZXMpIGZhY2V0KSwgb3IgcmV0dXJuIHRoZVxuICAgIG9yaWdpbmFsIHN0cmluZyBpZiBubyB0cmFuc2xhdGlvbiBpcyBmb3VuZC5cbiAgICBcbiAgICBJZiBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmUgcGFzc2VkLCB0aGV5IHdpbGwgYmUgaW5zZXJ0ZWQgaW5cbiAgICBwbGFjZSBvZiBtYXJrZXJzIGxpa2UgYCQxYCAoZm9yIHRoZSBmaXJzdCB2YWx1ZSkgYW5kIGAkMmAsIGV0Yy5cbiAgICBBIHNpbmdsZSBgJGAgaXMgZXF1aXZhbGVudCB0byBgJDFgLCBhbmQgYCQkYCB3aWxsIHByb2R1Y2UgYVxuICAgIGxpdGVyYWwgZG9sbGFyIHNpZ24uXG4gICAgKi9cbiAgICBwaHJhc2UocGhyYXNlLCAuLi5pbnNlcnQpIHtcbiAgICAgICAgZm9yIChsZXQgbWFwIG9mIHRoaXMuZmFjZXQoRWRpdG9yU3RhdGUucGhyYXNlcykpXG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1hcCwgcGhyYXNlKSkge1xuICAgICAgICAgICAgICAgIHBocmFzZSA9IG1hcFtwaHJhc2VdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICBpZiAoaW5zZXJ0Lmxlbmd0aClcbiAgICAgICAgICAgIHBocmFzZSA9IHBocmFzZS5yZXBsYWNlKC9cXCQoXFwkfFxcZCopL2csIChtLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGkgPT0gXCIkXCIpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIiRcIjtcbiAgICAgICAgICAgICAgICBsZXQgbiA9ICsoaSB8fCAxKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gIW4gfHwgbiA+IGluc2VydC5sZW5ndGggPyBtIDogaW5zZXJ0W24gLSAxXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGhyYXNlO1xuICAgIH1cbiAgICAvKipcbiAgICBGaW5kIHRoZSB2YWx1ZXMgZm9yIGEgZ2l2ZW4gbGFuZ3VhZ2UgZGF0YSBmaWVsZCwgcHJvdmlkZWQgYnkgdGhlXG4gICAgdGhlIFtgbGFuZ3VhZ2VEYXRhYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5FZGl0b3JTdGF0ZV5sYW5ndWFnZURhdGEpIGZhY2V0LlxuICAgIFxuICAgIEV4YW1wbGVzIG9mIGxhbmd1YWdlIGRhdGEgZmllbGRzIGFyZS4uLlxuICAgIFxuICAgIC0gW2BcImNvbW1lbnRUb2tlbnNcImBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jY29tbWFuZHMuQ29tbWVudFRva2VucykgZm9yIHNwZWNpZnlpbmdcbiAgICAgIGNvbW1lbnQgc3ludGF4LlxuICAgIC0gW2BcImF1dG9jb21wbGV0ZVwiYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNhdXRvY29tcGxldGUuYXV0b2NvbXBsZXRpb25eY29uZmlnLm92ZXJyaWRlKVxuICAgICAgZm9yIHByb3ZpZGluZyBsYW5ndWFnZS1zcGVjaWZpYyBjb21wbGV0aW9uIHNvdXJjZXMuXG4gICAgLSBbYFwid29yZENoYXJzXCJgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLkVkaXRvclN0YXRlLmNoYXJDYXRlZ29yaXplcikgZm9yIGFkZGluZ1xuICAgICAgY2hhcmFjdGVycyB0aGF0IHNob3VsZCBiZSBjb25zaWRlcmVkIHBhcnQgb2Ygd29yZHMgaW4gdGhpc1xuICAgICAgbGFuZ3VhZ2UuXG4gICAgLSBbYFwiY2xvc2VCcmFja2V0c1wiYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNhdXRvY29tcGxldGUuQ2xvc2VCcmFja2V0Q29uZmlnKSBjb250cm9sc1xuICAgICAgYnJhY2tldCBjbG9zaW5nIGJlaGF2aW9yLlxuICAgICovXG4gICAgbGFuZ3VhZ2VEYXRhQXQobmFtZSwgcG9zLCBzaWRlID0gLTEpIHtcbiAgICAgICAgbGV0IHZhbHVlcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBwcm92aWRlciBvZiB0aGlzLmZhY2V0KGxhbmd1YWdlRGF0YSkpIHtcbiAgICAgICAgICAgIGZvciAobGV0IHJlc3VsdCBvZiBwcm92aWRlcih0aGlzLCBwb3MsIHNpZGUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIG5hbWUpKVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaChyZXN1bHRbbmFtZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfVxuICAgIC8qKlxuICAgIFJldHVybiBhIGZ1bmN0aW9uIHRoYXQgY2FuIGNhdGVnb3JpemUgc3RyaW5ncyAoZXhwZWN0ZWQgdG9cbiAgICByZXByZXNlbnQgYSBzaW5nbGUgW2dyYXBoZW1lIGNsdXN0ZXJdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuZmluZENsdXN0ZXJCcmVhaykpXG4gICAgaW50byBvbmUgb2Y6XG4gICAgXG4gICAgIC0gV29yZCAoY29udGFpbnMgYW4gYWxwaGFudW1lcmljIGNoYXJhY3RlciBvciBhIGNoYXJhY3RlclxuICAgICAgIGV4cGxpY2l0bHkgbGlzdGVkIGluIHRoZSBsb2NhbCBsYW5ndWFnZSdzIGBcIndvcmRDaGFyc1wiYFxuICAgICAgIGxhbmd1YWdlIGRhdGEsIHdoaWNoIHNob3VsZCBiZSBhIHN0cmluZylcbiAgICAgLSBTcGFjZSAoY29udGFpbnMgb25seSB3aGl0ZXNwYWNlKVxuICAgICAtIE90aGVyIChhbnl0aGluZyBlbHNlKVxuICAgICovXG4gICAgY2hhckNhdGVnb3JpemVyKGF0KSB7XG4gICAgICAgIHJldHVybiBtYWtlQ2F0ZWdvcml6ZXIodGhpcy5sYW5ndWFnZURhdGFBdChcIndvcmRDaGFyc1wiLCBhdCkuam9pbihcIlwiKSk7XG4gICAgfVxuICAgIC8qKlxuICAgIEZpbmQgdGhlIHdvcmQgYXQgdGhlIGdpdmVuIHBvc2l0aW9uLCBtZWFuaW5nIHRoZSByYW5nZVxuICAgIGNvbnRhaW5pbmcgYWxsIFt3b3JkXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLkNoYXJDYXRlZ29yeS5Xb3JkKSBjaGFyYWN0ZXJzXG4gICAgYXJvdW5kIGl0LiBJZiBubyB3b3JkIGNoYXJhY3RlcnMgYXJlIGFkamFjZW50IHRvIHRoZSBwb3NpdGlvbixcbiAgICB0aGlzIHJldHVybnMgbnVsbC5cbiAgICAqL1xuICAgIHdvcmRBdChwb3MpIHtcbiAgICAgICAgbGV0IHsgdGV4dCwgZnJvbSwgbGVuZ3RoIH0gPSB0aGlzLmRvYy5saW5lQXQocG9zKTtcbiAgICAgICAgbGV0IGNhdCA9IHRoaXMuY2hhckNhdGVnb3JpemVyKHBvcyk7XG4gICAgICAgIGxldCBzdGFydCA9IHBvcyAtIGZyb20sIGVuZCA9IHBvcyAtIGZyb207XG4gICAgICAgIHdoaWxlIChzdGFydCA+IDApIHtcbiAgICAgICAgICAgIGxldCBwcmV2ID0gZmluZENsdXN0ZXJCcmVhayh0ZXh0LCBzdGFydCwgZmFsc2UpO1xuICAgICAgICAgICAgaWYgKGNhdCh0ZXh0LnNsaWNlKHByZXYsIHN0YXJ0KSkgIT0gZXhwb3J0cy5DaGFyQ2F0ZWdvcnkuV29yZClcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIHN0YXJ0ID0gcHJldjtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoZW5kIDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBsZXQgbmV4dCA9IGZpbmRDbHVzdGVyQnJlYWsodGV4dCwgZW5kKTtcbiAgICAgICAgICAgIGlmIChjYXQodGV4dC5zbGljZShlbmQsIG5leHQpKSAhPSBleHBvcnRzLkNoYXJDYXRlZ29yeS5Xb3JkKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZW5kID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhcnQgPT0gZW5kID8gbnVsbCA6IEVkaXRvclNlbGVjdGlvbi5yYW5nZShzdGFydCArIGZyb20sIGVuZCArIGZyb20pO1xuICAgIH1cbn1cbi8qKlxuQSBmYWNldCB0aGF0LCB3aGVuIGVuYWJsZWQsIGNhdXNlcyB0aGUgZWRpdG9yIHRvIGFsbG93IG11bHRpcGxlXG5yYW5nZXMgdG8gYmUgc2VsZWN0ZWQuIEJlIGNhcmVmdWwgdGhvdWdoLCBiZWNhdXNlIGJ5IGRlZmF1bHQgdGhlXG5lZGl0b3IgcmVsaWVzIG9uIHRoZSBuYXRpdmUgRE9NIHNlbGVjdGlvbiwgd2hpY2ggY2Fubm90IGhhbmRsZVxubXVsdGlwbGUgc2VsZWN0aW9ucy4gQW4gZXh0ZW5zaW9uIGxpa2VcbltgZHJhd1NlbGVjdGlvbmBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jdmlldy5kcmF3U2VsZWN0aW9uKSBjYW4gYmUgdXNlZCB0byBtYWtlXG5zZWNvbmRhcnkgc2VsZWN0aW9ucyB2aXNpYmxlIHRvIHRoZSB1c2VyLlxuKi9cbkVkaXRvclN0YXRlLmFsbG93TXVsdGlwbGVTZWxlY3Rpb25zID0gYWxsb3dNdWx0aXBsZVNlbGVjdGlvbnM7XG4vKipcbkNvbmZpZ3VyZXMgdGhlIHRhYiBzaXplIHRvIHVzZSBpbiB0aGlzIHN0YXRlLiBUaGUgZmlyc3RcbihoaWdoZXN0LXByZWNlZGVuY2UpIHZhbHVlIG9mIHRoZSBmYWNldCBpcyB1c2VkLiBJZiBubyB2YWx1ZSBpc1xuZ2l2ZW4sIHRoaXMgZGVmYXVsdHMgdG8gNC5cbiovXG5FZGl0b3JTdGF0ZS50YWJTaXplID0gRmFjZXQuZGVmaW5lKHtcbiAgICBjb21iaW5lOiB2YWx1ZXMgPT4gdmFsdWVzLmxlbmd0aCA/IHZhbHVlc1swXSA6IDRcbn0pO1xuLyoqXG5UaGUgbGluZSBzZXBhcmF0b3IgdG8gdXNlLiBCeSBkZWZhdWx0LCBhbnkgb2YgYFwiXFxuXCJgLCBgXCJcXHJcXG5cImBcbmFuZCBgXCJcXHJcImAgaXMgdHJlYXRlZCBhcyBhIHNlcGFyYXRvciB3aGVuIHNwbGl0dGluZyBsaW5lcywgYW5kXG5saW5lcyBhcmUgam9pbmVkIHdpdGggYFwiXFxuXCJgLlxuXG5XaGVuIHlvdSBjb25maWd1cmUgYSB2YWx1ZSBoZXJlLCBvbmx5IHRoYXQgcHJlY2lzZSBzZXBhcmF0b3JcbndpbGwgYmUgdXNlZCwgYWxsb3dpbmcgeW91IHRvIHJvdW5kLXRyaXAgZG9jdW1lbnRzIHRocm91Z2ggdGhlXG5lZGl0b3Igd2l0aG91dCBub3JtYWxpemluZyBsaW5lIHNlcGFyYXRvcnMuXG4qL1xuRWRpdG9yU3RhdGUubGluZVNlcGFyYXRvciA9IGxpbmVTZXBhcmF0b3I7XG4vKipcblRoaXMgZmFjZXQgY29udHJvbHMgdGhlIHZhbHVlIG9mIHRoZVxuW2ByZWFkT25seWBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuRWRpdG9yU3RhdGUucmVhZE9ubHkpIGdldHRlciwgd2hpY2ggaXNcbmNvbnN1bHRlZCBieSBjb21tYW5kcyBhbmQgZXh0ZW5zaW9ucyB0aGF0IGltcGxlbWVudCBlZGl0aW5nXG5mdW5jdGlvbmFsaXR5IHRvIGRldGVybWluZSB3aGV0aGVyIHRoZXkgc2hvdWxkIGFwcGx5LiBJdFxuZGVmYXVsdHMgdG8gZmFsc2UsIGJ1dCB3aGVuIGl0cyBoaWdoZXN0LXByZWNlZGVuY2UgdmFsdWUgaXNcbmB0cnVlYCwgc3VjaCBmdW5jdGlvbmFsaXR5IGRpc2FibGVzIGl0c2VsZi5cblxuTm90IHRvIGJlIGNvbmZ1c2VkIHdpdGhcbltgRWRpdG9yVmlldy5lZGl0YWJsZWBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jdmlldy5FZGl0b3JWaWV3XmVkaXRhYmxlKSwgd2hpY2hcbmNvbnRyb2xzIHdoZXRoZXIgdGhlIGVkaXRvcidzIERPTSBpcyBzZXQgdG8gYmUgZWRpdGFibGUgKGFuZFxudGh1cyBmb2N1c2FibGUpLlxuKi9cbkVkaXRvclN0YXRlLnJlYWRPbmx5ID0gcmVhZE9ubHk7XG4vKipcblJlZ2lzdGVycyB0cmFuc2xhdGlvbiBwaHJhc2VzLiBUaGVcbltgcGhyYXNlYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5FZGl0b3JTdGF0ZS5waHJhc2UpIG1ldGhvZCB3aWxsIGxvb2sgdGhyb3VnaFxuYWxsIG9iamVjdHMgcmVnaXN0ZXJlZCB3aXRoIHRoaXMgZmFjZXQgdG8gZmluZCB0cmFuc2xhdGlvbnMgZm9yXG5pdHMgYXJndW1lbnQuXG4qL1xuRWRpdG9yU3RhdGUucGhyYXNlcyA9IEZhY2V0LmRlZmluZSh7XG4gICAgY29tcGFyZShhLCBiKSB7XG4gICAgICAgIGxldCBrQSA9IE9iamVjdC5rZXlzKGEpLCBrQiA9IE9iamVjdC5rZXlzKGIpO1xuICAgICAgICByZXR1cm4ga0EubGVuZ3RoID09IGtCLmxlbmd0aCAmJiBrQS5ldmVyeShrID0+IGFba10gPT0gYltrXSk7XG4gICAgfVxufSk7XG4vKipcbkEgZmFjZXQgdXNlZCB0byByZWdpc3RlciBbbGFuZ3VhZ2VcbmRhdGFdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuRWRpdG9yU3RhdGUubGFuZ3VhZ2VEYXRhQXQpIHByb3ZpZGVycy5cbiovXG5FZGl0b3JTdGF0ZS5sYW5ndWFnZURhdGEgPSBsYW5ndWFnZURhdGE7XG4vKipcbkZhY2V0IHVzZWQgdG8gcmVnaXN0ZXIgY2hhbmdlIGZpbHRlcnMsIHdoaWNoIGFyZSBjYWxsZWQgZm9yIGVhY2hcbnRyYW5zYWN0aW9uICh1bmxlc3MgZXhwbGljaXRseVxuW2Rpc2FibGVkXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLlRyYW5zYWN0aW9uU3BlYy5maWx0ZXIpKSwgYW5kIGNhbiBzdXBwcmVzc1xucGFydCBvZiB0aGUgdHJhbnNhY3Rpb24ncyBjaGFuZ2VzLlxuXG5TdWNoIGEgZnVuY3Rpb24gY2FuIHJldHVybiBgdHJ1ZWAgdG8gaW5kaWNhdGUgdGhhdCBpdCBkb2Vzbid0XG53YW50IHRvIGRvIGFueXRoaW5nLCBgZmFsc2VgIHRvIGNvbXBsZXRlbHkgc3RvcCB0aGUgY2hhbmdlcyBpblxudGhlIHRyYW5zYWN0aW9uLCBvciBhIHNldCBvZiByYW5nZXMgaW4gd2hpY2ggY2hhbmdlcyBzaG91bGQgYmVcbnN1cHByZXNzZWQuIFN1Y2ggcmFuZ2VzIGFyZSByZXByZXNlbnRlZCBhcyBhbiBhcnJheSBvZiBudW1iZXJzLFxud2l0aCBlYWNoIHBhaXIgb2YgdHdvIG51bWJlcnMgaW5kaWNhdGluZyB0aGUgc3RhcnQgYW5kIGVuZCBvZiBhXG5yYW5nZS4gU28gZm9yIGV4YW1wbGUgYFsxMCwgMjAsIDEwMCwgMTEwXWAgc3VwcHJlc3NlcyBjaGFuZ2VzXG5iZXR3ZWVuIDEwIGFuZCAyMCwgYW5kIGJldHdlZW4gMTAwIGFuZCAxMTAuXG4qL1xuRWRpdG9yU3RhdGUuY2hhbmdlRmlsdGVyID0gY2hhbmdlRmlsdGVyO1xuLyoqXG5GYWNldCB1c2VkIHRvIHJlZ2lzdGVyIGEgaG9vayB0aGF0IGdldHMgYSBjaGFuY2UgdG8gdXBkYXRlIG9yXG5yZXBsYWNlIHRyYW5zYWN0aW9uIHNwZWNzIGJlZm9yZSB0aGV5IGFyZSBhcHBsaWVkLiBUaGlzIHdpbGxcbm9ubHkgYmUgYXBwbGllZCBmb3IgdHJhbnNhY3Rpb25zIHRoYXQgZG9uJ3QgaGF2ZVxuW2BmaWx0ZXJgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLlRyYW5zYWN0aW9uU3BlYy5maWx0ZXIpIHNldCB0byBgZmFsc2VgLiBZb3VcbmNhbiBlaXRoZXIgcmV0dXJuIGEgc2luZ2xlIHRyYW5zYWN0aW9uIHNwZWMgKHBvc3NpYmx5IHRoZSBpbnB1dFxudHJhbnNhY3Rpb24pLCBvciBhbiBhcnJheSBvZiBzcGVjcyAod2hpY2ggd2lsbCBiZSBjb21iaW5lZCBpblxudGhlIHNhbWUgd2F5IGFzIHRoZSBhcmd1bWVudHMgdG9cbltgRWRpdG9yU3RhdGUudXBkYXRlYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5FZGl0b3JTdGF0ZS51cGRhdGUpKS5cblxuV2hlbiBwb3NzaWJsZSwgaXQgaXMgcmVjb21tZW5kZWQgdG8gYXZvaWQgYWNjZXNzaW5nXG5bYFRyYW5zYWN0aW9uLnN0YXRlYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5UcmFuc2FjdGlvbi5zdGF0ZSkgaW4gYSBmaWx0ZXIsXG5zaW5jZSBpdCB3aWxsIGZvcmNlIGNyZWF0aW9uIG9mIGEgc3RhdGUgdGhhdCB3aWxsIHRoZW4gYmVcbmRpc2NhcmRlZCBhZ2FpbiwgaWYgdGhlIHRyYW5zYWN0aW9uIGlzIGFjdHVhbGx5IGZpbHRlcmVkLlxuXG4oVGhpcyBmdW5jdGlvbmFsaXR5IHNob3VsZCBiZSB1c2VkIHdpdGggY2FyZS4gSW5kaXNjcmltaW5hdGVseVxubW9kaWZ5aW5nIHRyYW5zYWN0aW9uIGlzIGxpa2VseSB0byBicmVhayBzb21ldGhpbmcgb3IgZGVncmFkZVxudGhlIHVzZXIgZXhwZXJpZW5jZS4pXG4qL1xuRWRpdG9yU3RhdGUudHJhbnNhY3Rpb25GaWx0ZXIgPSB0cmFuc2FjdGlvbkZpbHRlcjtcbi8qKlxuVGhpcyBpcyBhIG1vcmUgbGltaXRlZCBmb3JtIG9mXG5bYHRyYW5zYWN0aW9uRmlsdGVyYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5FZGl0b3JTdGF0ZV50cmFuc2FjdGlvbkZpbHRlciksXG53aGljaCBjYW4gb25seSBhZGRcblthbm5vdGF0aW9uc10oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5UcmFuc2FjdGlvblNwZWMuYW5ub3RhdGlvbnMpIGFuZFxuW2VmZmVjdHNdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuVHJhbnNhY3Rpb25TcGVjLmVmZmVjdHMpLiBfQnV0XywgdGhpcyB0eXBlXG5vZiBmaWx0ZXIgcnVucyBldmVuIGlmIHRoZSB0cmFuc2FjdGlvbiBoYXMgZGlzYWJsZWQgcmVndWxhclxuW2ZpbHRlcmluZ10oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5UcmFuc2FjdGlvblNwZWMuZmlsdGVyKSwgbWFraW5nIGl0IHN1aXRhYmxlXG5mb3IgZWZmZWN0cyB0aGF0IGRvbid0IG5lZWQgdG8gdG91Y2ggdGhlIGNoYW5nZXMgb3Igc2VsZWN0aW9uLFxuYnV0IGRvIHdhbnQgdG8gcHJvY2VzcyBldmVyeSB0cmFuc2FjdGlvbi5cblxuRXh0ZW5kZXJzIHJ1biBfYWZ0ZXJfIGZpbHRlcnMsIHdoZW4gYm90aCBhcmUgcHJlc2VudC5cbiovXG5FZGl0b3JTdGF0ZS50cmFuc2FjdGlvbkV4dGVuZGVyID0gdHJhbnNhY3Rpb25FeHRlbmRlcjtcbkNvbXBhcnRtZW50LnJlY29uZmlndXJlID0gU3RhdGVFZmZlY3QuZGVmaW5lKCk7XG5cbi8qKlxuVXRpbGl0eSBmdW5jdGlvbiBmb3IgY29tYmluaW5nIGJlaGF2aW9ycyB0byBmaWxsIGluIGEgY29uZmlnXG5vYmplY3QgZnJvbSBhbiBhcnJheSBvZiBwcm92aWRlZCBjb25maWdzLiBgZGVmYXVsdHNgIHNob3VsZCBob2xkXG5kZWZhdWx0IHZhbHVlcyBmb3IgYWxsIG9wdGlvbmFsIGZpZWxkcyBpbiBgQ29uZmlnYC5cblxuVGhlIGZ1bmN0aW9uIHdpbGwsIGJ5IGRlZmF1bHQsIGVycm9yXG53aGVuIGEgZmllbGQgZ2V0cyB0d28gdmFsdWVzIHRoYXQgYXJlbid0IGA9PT1gLWVxdWFsLCBidXQgeW91IGNhblxucHJvdmlkZSBjb21iaW5lIGZ1bmN0aW9ucyBwZXIgZmllbGQgdG8gZG8gc29tZXRoaW5nIGVsc2UuXG4qL1xuZnVuY3Rpb24gY29tYmluZUNvbmZpZyhjb25maWdzLCBkZWZhdWx0cywgLy8gU2hvdWxkIGhvbGQgb25seSB0aGUgb3B0aW9uYWwgcHJvcGVydGllcyBvZiBDb25maWcsIGJ1dCBJIGhhdmVuJ3QgbWFuYWdlZCB0byBleHByZXNzIHRoYXRcbmNvbWJpbmUgPSB7fSkge1xuICAgIGxldCByZXN1bHQgPSB7fTtcbiAgICBmb3IgKGxldCBjb25maWcgb2YgY29uZmlncylcbiAgICAgICAgZm9yIChsZXQga2V5IG9mIE9iamVjdC5rZXlzKGNvbmZpZykpIHtcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IGNvbmZpZ1trZXldLCBjdXJyZW50ID0gcmVzdWx0W2tleV07XG4gICAgICAgICAgICBpZiAoY3VycmVudCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICBlbHNlIGlmIChjdXJyZW50ID09PSB2YWx1ZSB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA7IC8vIE5vIGNvbmZsaWN0XG4gICAgICAgICAgICBlbHNlIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChjb21iaW5lLCBrZXkpKVxuICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gY29tYmluZVtrZXldKGN1cnJlbnQsIHZhbHVlKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb25maWcgbWVyZ2UgY29uZmxpY3QgZm9yIGZpZWxkIFwiICsga2V5KTtcbiAgICAgICAgfVxuICAgIGZvciAobGV0IGtleSBpbiBkZWZhdWx0cylcbiAgICAgICAgaWYgKHJlc3VsdFtrZXldID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXN1bHRba2V5XSA9IGRlZmF1bHRzW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG5FYWNoIHJhbmdlIGlzIGFzc29jaWF0ZWQgd2l0aCBhIHZhbHVlLCB3aGljaCBtdXN0IGluaGVyaXQgZnJvbVxudGhpcyBjbGFzcy5cbiovXG5jbGFzcyBSYW5nZVZhbHVlIHtcbiAgICAvKipcbiAgICBDb21wYXJlIHRoaXMgdmFsdWUgd2l0aCBhbm90aGVyIHZhbHVlLiBVc2VkIHdoZW4gY29tcGFyaW5nXG4gICAgcmFuZ2VzZXRzLiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBjb21wYXJlcyBieSBpZGVudGl0eS5cbiAgICBVbmxlc3MgeW91IGFyZSBvbmx5IGNyZWF0aW5nIGEgZml4ZWQgbnVtYmVyIG9mIHVuaXF1ZSBpbnN0YW5jZXNcbiAgICBvZiB5b3VyIHZhbHVlIHR5cGUsIGl0IGlzIGEgZ29vZCBpZGVhIHRvIGltcGxlbWVudCB0aGlzXG4gICAgcHJvcGVybHkuXG4gICAgKi9cbiAgICBlcShvdGhlcikgeyByZXR1cm4gdGhpcyA9PSBvdGhlcjsgfVxuICAgIC8qKlxuICAgIENyZWF0ZSBhIFtyYW5nZV0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5SYW5nZSkgd2l0aCB0aGlzIHZhbHVlLlxuICAgICovXG4gICAgcmFuZ2UoZnJvbSwgdG8gPSBmcm9tKSB7IHJldHVybiBSYW5nZS5jcmVhdGUoZnJvbSwgdG8sIHRoaXMpOyB9XG59XG5SYW5nZVZhbHVlLnByb3RvdHlwZS5zdGFydFNpZGUgPSBSYW5nZVZhbHVlLnByb3RvdHlwZS5lbmRTaWRlID0gMDtcblJhbmdlVmFsdWUucHJvdG90eXBlLnBvaW50ID0gZmFsc2U7XG5SYW5nZVZhbHVlLnByb3RvdHlwZS5tYXBNb2RlID0gZXhwb3J0cy5NYXBNb2RlLlRyYWNrRGVsO1xuLyoqXG5BIHJhbmdlIGFzc29jaWF0ZXMgYSB2YWx1ZSB3aXRoIGEgcmFuZ2Ugb2YgcG9zaXRpb25zLlxuKi9cbmNsYXNzIFJhbmdlIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICBUaGUgcmFuZ2UncyBzdGFydCBwb3NpdGlvbi5cbiAgICAqL1xuICAgIGZyb20sIFxuICAgIC8qKlxuICAgIEl0cyBlbmQgcG9zaXRpb24uXG4gICAgKi9cbiAgICB0bywgXG4gICAgLyoqXG4gICAgVGhlIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHJhbmdlLlxuICAgICovXG4gICAgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5mcm9tID0gZnJvbTtcbiAgICAgICAgdGhpcy50byA9IHRvO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgc3RhdGljIGNyZWF0ZShmcm9tLCB0bywgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSYW5nZShmcm9tLCB0bywgdmFsdWUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNtcFJhbmdlKGEsIGIpIHtcbiAgICByZXR1cm4gYS5mcm9tIC0gYi5mcm9tIHx8IGEudmFsdWUuc3RhcnRTaWRlIC0gYi52YWx1ZS5zdGFydFNpZGU7XG59XG5jbGFzcyBDaHVuayB7XG4gICAgY29uc3RydWN0b3IoZnJvbSwgdG8sIHZhbHVlLCBcbiAgICAvLyBDaHVua3MgYXJlIG1hcmtlZCB3aXRoIHRoZSBsYXJnZXN0IHBvaW50IHRoYXQgb2NjdXJzXG4gICAgLy8gaW4gdGhlbSAob3IgLTEgZm9yIG5vIHBvaW50cyksIHNvIHRoYXQgc2NhbnMgdGhhdCBhcmVcbiAgICAvLyBvbmx5IGludGVyZXN0ZWQgaW4gcG9pbnRzIChzdWNoIGFzIHRoZVxuICAgIC8vIGhlaWdodG1hcC1yZWxhdGVkIGxvZ2ljKSBjYW4gc2tpcCByYW5nZS1vbmx5IGNodW5rcy5cbiAgICBtYXhQb2ludCkge1xuICAgICAgICB0aGlzLmZyb20gPSBmcm9tO1xuICAgICAgICB0aGlzLnRvID0gdG87XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5tYXhQb2ludCA9IG1heFBvaW50O1xuICAgIH1cbiAgICBnZXQgbGVuZ3RoKCkgeyByZXR1cm4gdGhpcy50b1t0aGlzLnRvLmxlbmd0aCAtIDFdOyB9XG4gICAgLy8gRmluZCB0aGUgaW5kZXggb2YgdGhlIGdpdmVuIHBvc2l0aW9uIGFuZCBzaWRlLiBVc2UgdGhlIHJhbmdlcydcbiAgICAvLyBgZnJvbWAgcG9zIHdoZW4gYGVuZCA9PSBmYWxzZWAsIGB0b2Agd2hlbiBgZW5kID09IHRydWVgLlxuICAgIGZpbmRJbmRleChwb3MsIHNpZGUsIGVuZCwgc3RhcnRBdCA9IDApIHtcbiAgICAgICAgbGV0IGFyciA9IGVuZCA/IHRoaXMudG8gOiB0aGlzLmZyb207XG4gICAgICAgIGZvciAobGV0IGxvID0gc3RhcnRBdCwgaGkgPSBhcnIubGVuZ3RoOzspIHtcbiAgICAgICAgICAgIGlmIChsbyA9PSBoaSlcbiAgICAgICAgICAgICAgICByZXR1cm4gbG87XG4gICAgICAgICAgICBsZXQgbWlkID0gKGxvICsgaGkpID4+IDE7XG4gICAgICAgICAgICBsZXQgZGlmZiA9IGFyclttaWRdIC0gcG9zIHx8IChlbmQgPyB0aGlzLnZhbHVlW21pZF0uZW5kU2lkZSA6IHRoaXMudmFsdWVbbWlkXS5zdGFydFNpZGUpIC0gc2lkZTtcbiAgICAgICAgICAgIGlmIChtaWQgPT0gbG8pXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRpZmYgPj0gMCA/IGxvIDogaGk7XG4gICAgICAgICAgICBpZiAoZGlmZiA+PSAwKVxuICAgICAgICAgICAgICAgIGhpID0gbWlkO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGxvID0gbWlkICsgMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBiZXR3ZWVuKG9mZnNldCwgZnJvbSwgdG8sIGYpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuZmluZEluZGV4KGZyb20sIC0xMDAwMDAwMDAwIC8qIEMuRmFyICovLCB0cnVlKSwgZSA9IHRoaXMuZmluZEluZGV4KHRvLCAxMDAwMDAwMDAwIC8qIEMuRmFyICovLCBmYWxzZSwgaSk7IGkgPCBlOyBpKyspXG4gICAgICAgICAgICBpZiAoZih0aGlzLmZyb21baV0gKyBvZmZzZXQsIHRoaXMudG9baV0gKyBvZmZzZXQsIHRoaXMudmFsdWVbaV0pID09PSBmYWxzZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIG1hcChvZmZzZXQsIGNoYW5nZXMpIHtcbiAgICAgICAgbGV0IHZhbHVlID0gW10sIGZyb20gPSBbXSwgdG8gPSBbXSwgbmV3UG9zID0gLTEsIG1heFBvaW50ID0gLTE7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy52YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHZhbCA9IHRoaXMudmFsdWVbaV0sIGN1ckZyb20gPSB0aGlzLmZyb21baV0gKyBvZmZzZXQsIGN1clRvID0gdGhpcy50b1tpXSArIG9mZnNldCwgbmV3RnJvbSwgbmV3VG87XG4gICAgICAgICAgICBpZiAoY3VyRnJvbSA9PSBjdXJUbykge1xuICAgICAgICAgICAgICAgIGxldCBtYXBwZWQgPSBjaGFuZ2VzLm1hcFBvcyhjdXJGcm9tLCB2YWwuc3RhcnRTaWRlLCB2YWwubWFwTW9kZSk7XG4gICAgICAgICAgICAgICAgaWYgKG1hcHBlZCA9PSBudWxsKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBuZXdGcm9tID0gbmV3VG8gPSBtYXBwZWQ7XG4gICAgICAgICAgICAgICAgaWYgKHZhbC5zdGFydFNpZGUgIT0gdmFsLmVuZFNpZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3VG8gPSBjaGFuZ2VzLm1hcFBvcyhjdXJGcm9tLCB2YWwuZW5kU2lkZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdUbyA8IG5ld0Zyb20pXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXdGcm9tID0gY2hhbmdlcy5tYXBQb3MoY3VyRnJvbSwgdmFsLnN0YXJ0U2lkZSk7XG4gICAgICAgICAgICAgICAgbmV3VG8gPSBjaGFuZ2VzLm1hcFBvcyhjdXJUbywgdmFsLmVuZFNpZGUpO1xuICAgICAgICAgICAgICAgIGlmIChuZXdGcm9tID4gbmV3VG8gfHwgbmV3RnJvbSA9PSBuZXdUbyAmJiB2YWwuc3RhcnRTaWRlID4gMCAmJiB2YWwuZW5kU2lkZSA8PSAwKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgobmV3VG8gLSBuZXdGcm9tIHx8IHZhbC5lbmRTaWRlIC0gdmFsLnN0YXJ0U2lkZSkgPCAwKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKG5ld1BvcyA8IDApXG4gICAgICAgICAgICAgICAgbmV3UG9zID0gbmV3RnJvbTtcbiAgICAgICAgICAgIGlmICh2YWwucG9pbnQpXG4gICAgICAgICAgICAgICAgbWF4UG9pbnQgPSBNYXRoLm1heChtYXhQb2ludCwgbmV3VG8gLSBuZXdGcm9tKTtcbiAgICAgICAgICAgIHZhbHVlLnB1c2godmFsKTtcbiAgICAgICAgICAgIGZyb20ucHVzaChuZXdGcm9tIC0gbmV3UG9zKTtcbiAgICAgICAgICAgIHRvLnB1c2gobmV3VG8gLSBuZXdQb3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IG1hcHBlZDogdmFsdWUubGVuZ3RoID8gbmV3IENodW5rKGZyb20sIHRvLCB2YWx1ZSwgbWF4UG9pbnQpIDogbnVsbCwgcG9zOiBuZXdQb3MgfTtcbiAgICB9XG59XG4vKipcbkEgcmFuZ2Ugc2V0IHN0b3JlcyBhIGNvbGxlY3Rpb24gb2YgW3Jhbmdlc10oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5SYW5nZSkgaW4gYVxud2F5IHRoYXQgbWFrZXMgdGhlbSBlZmZpY2llbnQgdG8gW21hcF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5SYW5nZVNldC5tYXApIGFuZFxuW3VwZGF0ZV0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5SYW5nZVNldC51cGRhdGUpLiBUaGlzIGlzIGFuIGltbXV0YWJsZSBkYXRhXG5zdHJ1Y3R1cmUuXG4qL1xuY2xhc3MgUmFuZ2VTZXQge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgY2h1bmtQb3MsIFxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgY2h1bmssIFxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgbmV4dExheWVyLCBcbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIG1heFBvaW50KSB7XG4gICAgICAgIHRoaXMuY2h1bmtQb3MgPSBjaHVua1BvcztcbiAgICAgICAgdGhpcy5jaHVuayA9IGNodW5rO1xuICAgICAgICB0aGlzLm5leHRMYXllciA9IG5leHRMYXllcjtcbiAgICAgICAgdGhpcy5tYXhQb2ludCA9IG1heFBvaW50O1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGUoY2h1bmtQb3MsIGNodW5rLCBuZXh0TGF5ZXIsIG1heFBvaW50KSB7XG4gICAgICAgIHJldHVybiBuZXcgUmFuZ2VTZXQoY2h1bmtQb3MsIGNodW5rLCBuZXh0TGF5ZXIsIG1heFBvaW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBnZXQgbGVuZ3RoKCkge1xuICAgICAgICBsZXQgbGFzdCA9IHRoaXMuY2h1bmsubGVuZ3RoIC0gMTtcbiAgICAgICAgcmV0dXJuIGxhc3QgPCAwID8gMCA6IE1hdGgubWF4KHRoaXMuY2h1bmtFbmQobGFzdCksIHRoaXMubmV4dExheWVyLmxlbmd0aCk7XG4gICAgfVxuICAgIC8qKlxuICAgIFRoZSBudW1iZXIgb2YgcmFuZ2VzIGluIHRoZSBzZXQuXG4gICAgKi9cbiAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNFbXB0eSlcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICBsZXQgc2l6ZSA9IHRoaXMubmV4dExheWVyLnNpemU7XG4gICAgICAgIGZvciAobGV0IGNodW5rIG9mIHRoaXMuY2h1bmspXG4gICAgICAgICAgICBzaXplICs9IGNodW5rLnZhbHVlLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgY2h1bmtFbmQoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2h1bmtQb3NbaW5kZXhdICsgdGhpcy5jaHVua1tpbmRleF0ubGVuZ3RoO1xuICAgIH1cbiAgICAvKipcbiAgICBVcGRhdGUgdGhlIHJhbmdlIHNldCwgb3B0aW9uYWxseSBhZGRpbmcgbmV3IHJhbmdlcyBvciBmaWx0ZXJpbmdcbiAgICBvdXQgZXhpc3Rpbmcgb25lcy5cbiAgICBcbiAgICAoTm90ZTogVGhlIHR5cGUgcGFyYW1ldGVyIGlzIGp1c3QgdGhlcmUgYXMgYSBrbHVkZ2UgdG8gd29ya1xuICAgIGFyb3VuZCBUeXBlU2NyaXB0IHZhcmlhbmNlIGlzc3VlcyB0aGF0IHByZXZlbnRlZCBgUmFuZ2VTZXQ8WD5gXG4gICAgZnJvbSBiZWluZyBhIHN1YnR5cGUgb2YgYFJhbmdlU2V0PFk+YCB3aGVuIGBYYCBpcyBhIHN1YnR5cGUgb2ZcbiAgICBgWWAuKVxuICAgICovXG4gICAgdXBkYXRlKHVwZGF0ZVNwZWMpIHtcbiAgICAgICAgbGV0IHsgYWRkID0gW10sIHNvcnQgPSBmYWxzZSwgZmlsdGVyRnJvbSA9IDAsIGZpbHRlclRvID0gdGhpcy5sZW5ndGggfSA9IHVwZGF0ZVNwZWM7XG4gICAgICAgIGxldCBmaWx0ZXIgPSB1cGRhdGVTcGVjLmZpbHRlcjtcbiAgICAgICAgaWYgKGFkZC5sZW5ndGggPT0gMCAmJiAhZmlsdGVyKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIGlmIChzb3J0KVxuICAgICAgICAgICAgYWRkID0gYWRkLnNsaWNlKCkuc29ydChjbXBSYW5nZSk7XG4gICAgICAgIGlmICh0aGlzLmlzRW1wdHkpXG4gICAgICAgICAgICByZXR1cm4gYWRkLmxlbmd0aCA/IFJhbmdlU2V0Lm9mKGFkZCkgOiB0aGlzO1xuICAgICAgICBsZXQgY3VyID0gbmV3IExheWVyQ3Vyc29yKHRoaXMsIG51bGwsIC0xKS5nb3RvKDApLCBpID0gMCwgc3BpbGwgPSBbXTtcbiAgICAgICAgbGV0IGJ1aWxkZXIgPSBuZXcgUmFuZ2VTZXRCdWlsZGVyKCk7XG4gICAgICAgIHdoaWxlIChjdXIudmFsdWUgfHwgaSA8IGFkZC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChpIDwgYWRkLmxlbmd0aCAmJiAoY3VyLmZyb20gLSBhZGRbaV0uZnJvbSB8fCBjdXIuc3RhcnRTaWRlIC0gYWRkW2ldLnZhbHVlLnN0YXJ0U2lkZSkgPj0gMCkge1xuICAgICAgICAgICAgICAgIGxldCByYW5nZSA9IGFkZFtpKytdO1xuICAgICAgICAgICAgICAgIGlmICghYnVpbGRlci5hZGRJbm5lcihyYW5nZS5mcm9tLCByYW5nZS50bywgcmFuZ2UudmFsdWUpKVxuICAgICAgICAgICAgICAgICAgICBzcGlsbC5wdXNoKHJhbmdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGN1ci5yYW5nZUluZGV4ID09IDEgJiYgY3VyLmNodW5rSW5kZXggPCB0aGlzLmNodW5rLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgIChpID09IGFkZC5sZW5ndGggfHwgdGhpcy5jaHVua0VuZChjdXIuY2h1bmtJbmRleCkgPCBhZGRbaV0uZnJvbSkgJiZcbiAgICAgICAgICAgICAgICAoIWZpbHRlciB8fCBmaWx0ZXJGcm9tID4gdGhpcy5jaHVua0VuZChjdXIuY2h1bmtJbmRleCkgfHwgZmlsdGVyVG8gPCB0aGlzLmNodW5rUG9zW2N1ci5jaHVua0luZGV4XSkgJiZcbiAgICAgICAgICAgICAgICBidWlsZGVyLmFkZENodW5rKHRoaXMuY2h1bmtQb3NbY3VyLmNodW5rSW5kZXhdLCB0aGlzLmNodW5rW2N1ci5jaHVua0luZGV4XSkpIHtcbiAgICAgICAgICAgICAgICBjdXIubmV4dENodW5rKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoIWZpbHRlciB8fCBmaWx0ZXJGcm9tID4gY3VyLnRvIHx8IGZpbHRlclRvIDwgY3VyLmZyb20gfHwgZmlsdGVyKGN1ci5mcm9tLCBjdXIudG8sIGN1ci52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFidWlsZGVyLmFkZElubmVyKGN1ci5mcm9tLCBjdXIudG8sIGN1ci52YWx1ZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICBzcGlsbC5wdXNoKFJhbmdlLmNyZWF0ZShjdXIuZnJvbSwgY3VyLnRvLCBjdXIudmFsdWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3VyLm5leHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYnVpbGRlci5maW5pc2hJbm5lcih0aGlzLm5leHRMYXllci5pc0VtcHR5ICYmICFzcGlsbC5sZW5ndGggPyBSYW5nZVNldC5lbXB0eVxuICAgICAgICAgICAgOiB0aGlzLm5leHRMYXllci51cGRhdGUoeyBhZGQ6IHNwaWxsLCBmaWx0ZXIsIGZpbHRlckZyb20sIGZpbHRlclRvIH0pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgTWFwIHRoaXMgcmFuZ2Ugc2V0IHRocm91Z2ggYSBzZXQgb2YgY2hhbmdlcywgcmV0dXJuIHRoZSBuZXcgc2V0LlxuICAgICovXG4gICAgbWFwKGNoYW5nZXMpIHtcbiAgICAgICAgaWYgKGNoYW5nZXMuZW1wdHkgfHwgdGhpcy5pc0VtcHR5KVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIGxldCBjaHVua3MgPSBbXSwgY2h1bmtQb3MgPSBbXSwgbWF4UG9pbnQgPSAtMTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNodW5rLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgc3RhcnQgPSB0aGlzLmNodW5rUG9zW2ldLCBjaHVuayA9IHRoaXMuY2h1bmtbaV07XG4gICAgICAgICAgICBsZXQgdG91Y2ggPSBjaGFuZ2VzLnRvdWNoZXNSYW5nZShzdGFydCwgc3RhcnQgKyBjaHVuay5sZW5ndGgpO1xuICAgICAgICAgICAgaWYgKHRvdWNoID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIG1heFBvaW50ID0gTWF0aC5tYXgobWF4UG9pbnQsIGNodW5rLm1heFBvaW50KTtcbiAgICAgICAgICAgICAgICBjaHVua3MucHVzaChjaHVuayk7XG4gICAgICAgICAgICAgICAgY2h1bmtQb3MucHVzaChjaGFuZ2VzLm1hcFBvcyhzdGFydCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodG91Y2ggPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBsZXQgeyBtYXBwZWQsIHBvcyB9ID0gY2h1bmsubWFwKHN0YXJ0LCBjaGFuZ2VzKTtcbiAgICAgICAgICAgICAgICBpZiAobWFwcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG1heFBvaW50ID0gTWF0aC5tYXgobWF4UG9pbnQsIG1hcHBlZC5tYXhQb2ludCk7XG4gICAgICAgICAgICAgICAgICAgIGNodW5rcy5wdXNoKG1hcHBlZCk7XG4gICAgICAgICAgICAgICAgICAgIGNodW5rUG9zLnB1c2gocG9zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG5leHQgPSB0aGlzLm5leHRMYXllci5tYXAoY2hhbmdlcyk7XG4gICAgICAgIHJldHVybiBjaHVua3MubGVuZ3RoID09IDAgPyBuZXh0IDogbmV3IFJhbmdlU2V0KGNodW5rUG9zLCBjaHVua3MsIG5leHQgfHwgUmFuZ2VTZXQuZW1wdHksIG1heFBvaW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgSXRlcmF0ZSBvdmVyIHRoZSByYW5nZXMgdGhhdCB0b3VjaCB0aGUgcmVnaW9uIGBmcm9tYCB0byBgdG9gLFxuICAgIGNhbGxpbmcgYGZgIGZvciBlYWNoLiBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCB0aGUgcmFuZ2VzIHdpbGxcbiAgICBiZSByZXBvcnRlZCBpbiBhbnkgc3BlY2lmaWMgb3JkZXIuIFdoZW4gdGhlIGNhbGxiYWNrIHJldHVybnNcbiAgICBgZmFsc2VgLCBpdGVyYXRpb24gc3RvcHMuXG4gICAgKi9cbiAgICBiZXR3ZWVuKGZyb20sIHRvLCBmKSB7XG4gICAgICAgIGlmICh0aGlzLmlzRW1wdHkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jaHVuay5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHN0YXJ0ID0gdGhpcy5jaHVua1Bvc1tpXSwgY2h1bmsgPSB0aGlzLmNodW5rW2ldO1xuICAgICAgICAgICAgaWYgKHRvID49IHN0YXJ0ICYmIGZyb20gPD0gc3RhcnQgKyBjaHVuay5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICBjaHVuay5iZXR3ZWVuKHN0YXJ0LCBmcm9tIC0gc3RhcnQsIHRvIC0gc3RhcnQsIGYpID09PSBmYWxzZSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5uZXh0TGF5ZXIuYmV0d2Vlbihmcm9tLCB0bywgZik7XG4gICAgfVxuICAgIC8qKlxuICAgIEl0ZXJhdGUgb3ZlciB0aGUgcmFuZ2VzIGluIHRoaXMgc2V0LCBpbiBvcmRlciwgaW5jbHVkaW5nIGFsbFxuICAgIHJhbmdlcyB0aGF0IGVuZCBhdCBvciBhZnRlciBgZnJvbWAuXG4gICAgKi9cbiAgICBpdGVyKGZyb20gPSAwKSB7XG4gICAgICAgIHJldHVybiBIZWFwQ3Vyc29yLmZyb20oW3RoaXNdKS5nb3RvKGZyb20pO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGdldCBpc0VtcHR5KCkgeyByZXR1cm4gdGhpcy5uZXh0TGF5ZXIgPT0gdGhpczsgfVxuICAgIC8qKlxuICAgIEl0ZXJhdGUgb3ZlciB0aGUgcmFuZ2VzIGluIGEgY29sbGVjdGlvbiBvZiBzZXRzLCBpbiBvcmRlcixcbiAgICBzdGFydGluZyBmcm9tIGBmcm9tYC5cbiAgICAqL1xuICAgIHN0YXRpYyBpdGVyKHNldHMsIGZyb20gPSAwKSB7XG4gICAgICAgIHJldHVybiBIZWFwQ3Vyc29yLmZyb20oc2V0cykuZ290byhmcm9tKTtcbiAgICB9XG4gICAgLyoqXG4gICAgSXRlcmF0ZSBvdmVyIHR3byBncm91cHMgb2Ygc2V0cywgY2FsbGluZyBtZXRob2RzIG9uIGBjb21wYXJhdG9yYFxuICAgIHRvIG5vdGlmeSBpdCBvZiBwb3NzaWJsZSBkaWZmZXJlbmNlcy5cbiAgICAqL1xuICAgIHN0YXRpYyBjb21wYXJlKG9sZFNldHMsIG5ld1NldHMsIFxuICAgIC8qKlxuICAgIFRoaXMgaW5kaWNhdGVzIGhvdyB0aGUgdW5kZXJseWluZyBkYXRhIGNoYW5nZWQgYmV0d2VlbiB0aGVzZVxuICAgIHJhbmdlcywgYW5kIGlzIG5lZWRlZCB0byBzeW5jaHJvbml6ZSB0aGUgaXRlcmF0aW9uLlxuICAgICovXG4gICAgdGV4dERpZmYsIGNvbXBhcmF0b3IsIFxuICAgIC8qKlxuICAgIENhbiBiZSB1c2VkIHRvIGlnbm9yZSBhbGwgbm9uLXBvaW50IHJhbmdlcywgYW5kIHBvaW50cyBiZWxvd1xuICAgIHRoZSBnaXZlbiBzaXplLiBXaGVuIC0xLCBhbGwgcmFuZ2VzIGFyZSBjb21wYXJlZC5cbiAgICAqL1xuICAgIG1pblBvaW50U2l6ZSA9IC0xKSB7XG4gICAgICAgIGxldCBhID0gb2xkU2V0cy5maWx0ZXIoc2V0ID0+IHNldC5tYXhQb2ludCA+IDAgfHwgIXNldC5pc0VtcHR5ICYmIHNldC5tYXhQb2ludCA+PSBtaW5Qb2ludFNpemUpO1xuICAgICAgICBsZXQgYiA9IG5ld1NldHMuZmlsdGVyKHNldCA9PiBzZXQubWF4UG9pbnQgPiAwIHx8ICFzZXQuaXNFbXB0eSAmJiBzZXQubWF4UG9pbnQgPj0gbWluUG9pbnRTaXplKTtcbiAgICAgICAgbGV0IHNoYXJlZENodW5rcyA9IGZpbmRTaGFyZWRDaHVua3MoYSwgYiwgdGV4dERpZmYpO1xuICAgICAgICBsZXQgc2lkZUEgPSBuZXcgU3BhbkN1cnNvcihhLCBzaGFyZWRDaHVua3MsIG1pblBvaW50U2l6ZSk7XG4gICAgICAgIGxldCBzaWRlQiA9IG5ldyBTcGFuQ3Vyc29yKGIsIHNoYXJlZENodW5rcywgbWluUG9pbnRTaXplKTtcbiAgICAgICAgdGV4dERpZmYuaXRlckdhcHMoKGZyb21BLCBmcm9tQiwgbGVuZ3RoKSA9PiBjb21wYXJlKHNpZGVBLCBmcm9tQSwgc2lkZUIsIGZyb21CLCBsZW5ndGgsIGNvbXBhcmF0b3IpKTtcbiAgICAgICAgaWYgKHRleHREaWZmLmVtcHR5ICYmIHRleHREaWZmLmxlbmd0aCA9PSAwKVxuICAgICAgICAgICAgY29tcGFyZShzaWRlQSwgMCwgc2lkZUIsIDAsIDAsIGNvbXBhcmF0b3IpO1xuICAgIH1cbiAgICAvKipcbiAgICBDb21wYXJlIHRoZSBjb250ZW50cyBvZiB0d28gZ3JvdXBzIG9mIHJhbmdlIHNldHMsIHJldHVybmluZyB0cnVlXG4gICAgaWYgdGhleSBhcmUgZXF1aXZhbGVudCBpbiB0aGUgZ2l2ZW4gcmFuZ2UuXG4gICAgKi9cbiAgICBzdGF0aWMgZXEob2xkU2V0cywgbmV3U2V0cywgZnJvbSA9IDAsIHRvKSB7XG4gICAgICAgIGlmICh0byA9PSBudWxsKVxuICAgICAgICAgICAgdG8gPSAxMDAwMDAwMDAwIC8qIEMuRmFyICovIC0gMTtcbiAgICAgICAgbGV0IGEgPSBvbGRTZXRzLmZpbHRlcihzZXQgPT4gIXNldC5pc0VtcHR5ICYmIG5ld1NldHMuaW5kZXhPZihzZXQpIDwgMCk7XG4gICAgICAgIGxldCBiID0gbmV3U2V0cy5maWx0ZXIoc2V0ID0+ICFzZXQuaXNFbXB0eSAmJiBvbGRTZXRzLmluZGV4T2Yoc2V0KSA8IDApO1xuICAgICAgICBpZiAoYS5sZW5ndGggIT0gYi5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmICghYS5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgbGV0IHNoYXJlZENodW5rcyA9IGZpbmRTaGFyZWRDaHVua3MoYSwgYik7XG4gICAgICAgIGxldCBzaWRlQSA9IG5ldyBTcGFuQ3Vyc29yKGEsIHNoYXJlZENodW5rcywgMCkuZ290byhmcm9tKSwgc2lkZUIgPSBuZXcgU3BhbkN1cnNvcihiLCBzaGFyZWRDaHVua3MsIDApLmdvdG8oZnJvbSk7XG4gICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgIGlmIChzaWRlQS50byAhPSBzaWRlQi50byB8fFxuICAgICAgICAgICAgICAgICFzYW1lVmFsdWVzKHNpZGVBLmFjdGl2ZSwgc2lkZUIuYWN0aXZlKSB8fFxuICAgICAgICAgICAgICAgIHNpZGVBLnBvaW50ICYmICghc2lkZUIucG9pbnQgfHwgIXNpZGVBLnBvaW50LmVxKHNpZGVCLnBvaW50KSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgaWYgKHNpZGVBLnRvID4gdG8pXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBzaWRlQS5uZXh0KCk7XG4gICAgICAgICAgICBzaWRlQi5uZXh0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgSXRlcmF0ZSBvdmVyIGEgZ3JvdXAgb2YgcmFuZ2Ugc2V0cyBhdCB0aGUgc2FtZSB0aW1lLCBub3RpZnlpbmdcbiAgICB0aGUgaXRlcmF0b3IgYWJvdXQgdGhlIHJhbmdlcyBjb3ZlcmluZyBldmVyeSBnaXZlbiBwaWVjZSBvZlxuICAgIGNvbnRlbnQuIFJldHVybnMgdGhlIG9wZW4gY291bnQgKHNlZVxuICAgIFtgU3Bhbkl0ZXJhdG9yLnNwYW5gXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLlNwYW5JdGVyYXRvci5zcGFuKSkgYXQgdGhlIGVuZFxuICAgIG9mIHRoZSBpdGVyYXRpb24uXG4gICAgKi9cbiAgICBzdGF0aWMgc3BhbnMoc2V0cywgZnJvbSwgdG8sIGl0ZXJhdG9yLCBcbiAgICAvKipcbiAgICBXaGVuIGdpdmVuIGFuZCBncmVhdGVyIHRoYW4gLTEsIG9ubHkgcG9pbnRzIG9mIGF0IGxlYXN0IHRoaXNcbiAgICBzaXplIGFyZSB0YWtlbiBpbnRvIGFjY291bnQuXG4gICAgKi9cbiAgICBtaW5Qb2ludFNpemUgPSAtMSkge1xuICAgICAgICBsZXQgY3Vyc29yID0gbmV3IFNwYW5DdXJzb3Ioc2V0cywgbnVsbCwgbWluUG9pbnRTaXplKS5nb3RvKGZyb20pLCBwb3MgPSBmcm9tO1xuICAgICAgICBsZXQgb3BlblJhbmdlcyA9IGN1cnNvci5vcGVuU3RhcnQ7XG4gICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgIGxldCBjdXJUbyA9IE1hdGgubWluKGN1cnNvci50bywgdG8pO1xuICAgICAgICAgICAgaWYgKGN1cnNvci5wb2ludCkge1xuICAgICAgICAgICAgICAgIGxldCBhY3RpdmUgPSBjdXJzb3IuYWN0aXZlRm9yUG9pbnQoY3Vyc29yLnRvKTtcbiAgICAgICAgICAgICAgICBsZXQgb3BlbkNvdW50ID0gY3Vyc29yLnBvaW50RnJvbSA8IGZyb20gPyBhY3RpdmUubGVuZ3RoICsgMVxuICAgICAgICAgICAgICAgICAgICA6IGN1cnNvci5wb2ludC5zdGFydFNpZGUgPCAwID8gYWN0aXZlLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgOiBNYXRoLm1pbihhY3RpdmUubGVuZ3RoLCBvcGVuUmFuZ2VzKTtcbiAgICAgICAgICAgICAgICBpdGVyYXRvci5wb2ludChwb3MsIGN1clRvLCBjdXJzb3IucG9pbnQsIGFjdGl2ZSwgb3BlbkNvdW50LCBjdXJzb3IucG9pbnRSYW5rKTtcbiAgICAgICAgICAgICAgICBvcGVuUmFuZ2VzID0gTWF0aC5taW4oY3Vyc29yLm9wZW5FbmQoY3VyVG8pLCBhY3RpdmUubGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGN1clRvID4gcG9zKSB7XG4gICAgICAgICAgICAgICAgaXRlcmF0b3Iuc3Bhbihwb3MsIGN1clRvLCBjdXJzb3IuYWN0aXZlLCBvcGVuUmFuZ2VzKTtcbiAgICAgICAgICAgICAgICBvcGVuUmFuZ2VzID0gY3Vyc29yLm9wZW5FbmQoY3VyVG8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGN1cnNvci50byA+IHRvKVxuICAgICAgICAgICAgICAgIHJldHVybiBvcGVuUmFuZ2VzICsgKGN1cnNvci5wb2ludCAmJiBjdXJzb3IudG8gPiB0byA/IDEgOiAwKTtcbiAgICAgICAgICAgIHBvcyA9IGN1cnNvci50bztcbiAgICAgICAgICAgIGN1cnNvci5uZXh0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgcmFuZ2Ugc2V0IGZvciB0aGUgZ2l2ZW4gcmFuZ2Ugb3IgYXJyYXkgb2YgcmFuZ2VzLiBCeVxuICAgIGRlZmF1bHQsIHRoaXMgZXhwZWN0cyB0aGUgcmFuZ2VzIHRvIGJlIF9zb3J0ZWRfIChieSBzdGFydFxuICAgIHBvc2l0aW9uIGFuZCwgaWYgdHdvIHN0YXJ0IGF0IHRoZSBzYW1lIHBvc2l0aW9uLFxuICAgIGB2YWx1ZS5zdGFydFNpZGVgKS4gWW91IGNhbiBwYXNzIGB0cnVlYCBhcyBzZWNvbmQgYXJndW1lbnQgdG9cbiAgICBjYXVzZSB0aGUgbWV0aG9kIHRvIHNvcnQgdGhlbS5cbiAgICAqL1xuICAgIHN0YXRpYyBvZihyYW5nZXMsIHNvcnQgPSBmYWxzZSkge1xuICAgICAgICBsZXQgYnVpbGQgPSBuZXcgUmFuZ2VTZXRCdWlsZGVyKCk7XG4gICAgICAgIGZvciAobGV0IHJhbmdlIG9mIHJhbmdlcyBpbnN0YW5jZW9mIFJhbmdlID8gW3Jhbmdlc10gOiBzb3J0ID8gbGF6eVNvcnQocmFuZ2VzKSA6IHJhbmdlcylcbiAgICAgICAgICAgIGJ1aWxkLmFkZChyYW5nZS5mcm9tLCByYW5nZS50bywgcmFuZ2UudmFsdWUpO1xuICAgICAgICByZXR1cm4gYnVpbGQuZmluaXNoKCk7XG4gICAgfVxuICAgIC8qKlxuICAgIEpvaW4gYW4gYXJyYXkgb2YgcmFuZ2Ugc2V0cyBpbnRvIGEgc2luZ2xlIHNldC5cbiAgICAqL1xuICAgIHN0YXRpYyBqb2luKHNldHMpIHtcbiAgICAgICAgaWYgKCFzZXRzLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiBSYW5nZVNldC5lbXB0eTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHNldHNbc2V0cy5sZW5ndGggLSAxXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHNldHMubGVuZ3RoIC0gMjsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGZvciAobGV0IGxheWVyID0gc2V0c1tpXTsgbGF5ZXIgIT0gUmFuZ2VTZXQuZW1wdHk7IGxheWVyID0gbGF5ZXIubmV4dExheWVyKVxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBSYW5nZVNldChsYXllci5jaHVua1BvcywgbGF5ZXIuY2h1bmssIHJlc3VsdCwgTWF0aC5tYXgobGF5ZXIubWF4UG9pbnQsIHJlc3VsdC5tYXhQb2ludCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuLyoqXG5UaGUgZW1wdHkgc2V0IG9mIHJhbmdlcy5cbiovXG5SYW5nZVNldC5lbXB0eSA9IG5ldyBSYW5nZVNldChbXSwgW10sIG51bGwsIC0xKTtcbmZ1bmN0aW9uIGxhenlTb3J0KHJhbmdlcykge1xuICAgIGlmIChyYW5nZXMubGVuZ3RoID4gMSlcbiAgICAgICAgZm9yIChsZXQgcHJldiA9IHJhbmdlc1swXSwgaSA9IDE7IGkgPCByYW5nZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBjdXIgPSByYW5nZXNbaV07XG4gICAgICAgICAgICBpZiAoY21wUmFuZ2UocHJldiwgY3VyKSA+IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJhbmdlcy5zbGljZSgpLnNvcnQoY21wUmFuZ2UpO1xuICAgICAgICAgICAgcHJldiA9IGN1cjtcbiAgICAgICAgfVxuICAgIHJldHVybiByYW5nZXM7XG59XG5SYW5nZVNldC5lbXB0eS5uZXh0TGF5ZXIgPSBSYW5nZVNldC5lbXB0eTtcbi8qKlxuQSByYW5nZSBzZXQgYnVpbGRlciBpcyBhIGRhdGEgc3RydWN0dXJlIHRoYXQgaGVscHMgYnVpbGQgdXAgYVxuW3JhbmdlIHNldF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5SYW5nZVNldCkgZGlyZWN0bHksIHdpdGhvdXQgZmlyc3QgYWxsb2NhdGluZ1xuYW4gYXJyYXkgb2YgW2BSYW5nZWBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuUmFuZ2UpIG9iamVjdHMuXG4qL1xuY2xhc3MgUmFuZ2VTZXRCdWlsZGVyIHtcbiAgICBmaW5pc2hDaHVuayhuZXdBcnJheXMpIHtcbiAgICAgICAgdGhpcy5jaHVua3MucHVzaChuZXcgQ2h1bmsodGhpcy5mcm9tLCB0aGlzLnRvLCB0aGlzLnZhbHVlLCB0aGlzLm1heFBvaW50KSk7XG4gICAgICAgIHRoaXMuY2h1bmtQb3MucHVzaCh0aGlzLmNodW5rU3RhcnQpO1xuICAgICAgICB0aGlzLmNodW5rU3RhcnQgPSAtMTtcbiAgICAgICAgdGhpcy5zZXRNYXhQb2ludCA9IE1hdGgubWF4KHRoaXMuc2V0TWF4UG9pbnQsIHRoaXMubWF4UG9pbnQpO1xuICAgICAgICB0aGlzLm1heFBvaW50ID0gLTE7XG4gICAgICAgIGlmIChuZXdBcnJheXMpIHtcbiAgICAgICAgICAgIHRoaXMuZnJvbSA9IFtdO1xuICAgICAgICAgICAgdGhpcy50byA9IFtdO1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IFtdO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgIENyZWF0ZSBhbiBlbXB0eSBidWlsZGVyLlxuICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuY2h1bmtzID0gW107XG4gICAgICAgIHRoaXMuY2h1bmtQb3MgPSBbXTtcbiAgICAgICAgdGhpcy5jaHVua1N0YXJ0ID0gLTE7XG4gICAgICAgIHRoaXMubGFzdCA9IG51bGw7XG4gICAgICAgIHRoaXMubGFzdEZyb20gPSAtMTAwMDAwMDAwMCAvKiBDLkZhciAqLztcbiAgICAgICAgdGhpcy5sYXN0VG8gPSAtMTAwMDAwMDAwMCAvKiBDLkZhciAqLztcbiAgICAgICAgdGhpcy5mcm9tID0gW107XG4gICAgICAgIHRoaXMudG8gPSBbXTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IFtdO1xuICAgICAgICB0aGlzLm1heFBvaW50ID0gLTE7XG4gICAgICAgIHRoaXMuc2V0TWF4UG9pbnQgPSAtMTtcbiAgICAgICAgdGhpcy5uZXh0TGF5ZXIgPSBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICBBZGQgYSByYW5nZS4gUmFuZ2VzIHNob3VsZCBiZSBhZGRlZCBpbiBzb3J0ZWQgKGJ5IGBmcm9tYCBhbmRcbiAgICBgdmFsdWUuc3RhcnRTaWRlYCkgb3JkZXIuXG4gICAgKi9cbiAgICBhZGQoZnJvbSwgdG8sIHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5hZGRJbm5lcihmcm9tLCB0bywgdmFsdWUpKVxuICAgICAgICAgICAgKHRoaXMubmV4dExheWVyIHx8ICh0aGlzLm5leHRMYXllciA9IG5ldyBSYW5nZVNldEJ1aWxkZXIpKS5hZGQoZnJvbSwgdG8sIHZhbHVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBhZGRJbm5lcihmcm9tLCB0bywgdmFsdWUpIHtcbiAgICAgICAgbGV0IGRpZmYgPSBmcm9tIC0gdGhpcy5sYXN0VG8gfHwgdmFsdWUuc3RhcnRTaWRlIC0gdGhpcy5sYXN0LmVuZFNpZGU7XG4gICAgICAgIGlmIChkaWZmIDw9IDAgJiYgKGZyb20gLSB0aGlzLmxhc3RGcm9tIHx8IHZhbHVlLnN0YXJ0U2lkZSAtIHRoaXMubGFzdC5zdGFydFNpZGUpIDwgMClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlJhbmdlcyBtdXN0IGJlIGFkZGVkIHNvcnRlZCBieSBgZnJvbWAgcG9zaXRpb24gYW5kIGBzdGFydFNpZGVgXCIpO1xuICAgICAgICBpZiAoZGlmZiA8IDApXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLmZyb20ubGVuZ3RoID09IDI1MCAvKiBDLkNodW5rU2l6ZSAqLylcbiAgICAgICAgICAgIHRoaXMuZmluaXNoQ2h1bmsodHJ1ZSk7XG4gICAgICAgIGlmICh0aGlzLmNodW5rU3RhcnQgPCAwKVxuICAgICAgICAgICAgdGhpcy5jaHVua1N0YXJ0ID0gZnJvbTtcbiAgICAgICAgdGhpcy5mcm9tLnB1c2goZnJvbSAtIHRoaXMuY2h1bmtTdGFydCk7XG4gICAgICAgIHRoaXMudG8ucHVzaCh0byAtIHRoaXMuY2h1bmtTdGFydCk7XG4gICAgICAgIHRoaXMubGFzdCA9IHZhbHVlO1xuICAgICAgICB0aGlzLmxhc3RGcm9tID0gZnJvbTtcbiAgICAgICAgdGhpcy5sYXN0VG8gPSB0bztcbiAgICAgICAgdGhpcy52YWx1ZS5wdXNoKHZhbHVlKTtcbiAgICAgICAgaWYgKHZhbHVlLnBvaW50KVxuICAgICAgICAgICAgdGhpcy5tYXhQb2ludCA9IE1hdGgubWF4KHRoaXMubWF4UG9pbnQsIHRvIC0gZnJvbSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGFkZENodW5rKGZyb20sIGNodW5rKSB7XG4gICAgICAgIGlmICgoZnJvbSAtIHRoaXMubGFzdFRvIHx8IGNodW5rLnZhbHVlWzBdLnN0YXJ0U2lkZSAtIHRoaXMubGFzdC5lbmRTaWRlKSA8IDApXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLmZyb20ubGVuZ3RoKVxuICAgICAgICAgICAgdGhpcy5maW5pc2hDaHVuayh0cnVlKTtcbiAgICAgICAgdGhpcy5zZXRNYXhQb2ludCA9IE1hdGgubWF4KHRoaXMuc2V0TWF4UG9pbnQsIGNodW5rLm1heFBvaW50KTtcbiAgICAgICAgdGhpcy5jaHVua3MucHVzaChjaHVuayk7XG4gICAgICAgIHRoaXMuY2h1bmtQb3MucHVzaChmcm9tKTtcbiAgICAgICAgbGV0IGxhc3QgPSBjaHVuay52YWx1ZS5sZW5ndGggLSAxO1xuICAgICAgICB0aGlzLmxhc3QgPSBjaHVuay52YWx1ZVtsYXN0XTtcbiAgICAgICAgdGhpcy5sYXN0RnJvbSA9IGNodW5rLmZyb21bbGFzdF0gKyBmcm9tO1xuICAgICAgICB0aGlzLmxhc3RUbyA9IGNodW5rLnRvW2xhc3RdICsgZnJvbTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgIEZpbmlzaCB0aGUgcmFuZ2Ugc2V0LiBSZXR1cm5zIHRoZSBuZXcgc2V0LiBUaGUgYnVpbGRlciBjYW4ndCBiZVxuICAgIHVzZWQgYW55bW9yZSBhZnRlciB0aGlzIGhhcyBiZWVuIGNhbGxlZC5cbiAgICAqL1xuICAgIGZpbmlzaCgpIHsgcmV0dXJuIHRoaXMuZmluaXNoSW5uZXIoUmFuZ2VTZXQuZW1wdHkpOyB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBmaW5pc2hJbm5lcihuZXh0KSB7XG4gICAgICAgIGlmICh0aGlzLmZyb20ubGVuZ3RoKVxuICAgICAgICAgICAgdGhpcy5maW5pc2hDaHVuayhmYWxzZSk7XG4gICAgICAgIGlmICh0aGlzLmNodW5rcy5sZW5ndGggPT0gMClcbiAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICBsZXQgcmVzdWx0ID0gUmFuZ2VTZXQuY3JlYXRlKHRoaXMuY2h1bmtQb3MsIHRoaXMuY2h1bmtzLCB0aGlzLm5leHRMYXllciA/IHRoaXMubmV4dExheWVyLmZpbmlzaElubmVyKG5leHQpIDogbmV4dCwgdGhpcy5zZXRNYXhQb2ludCk7XG4gICAgICAgIHRoaXMuZnJvbSA9IG51bGw7IC8vIE1ha2Ugc3VyZSBmdXJ0aGVyIGBhZGRgIGNhbGxzIHByb2R1Y2UgZXJyb3JzXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuZnVuY3Rpb24gZmluZFNoYXJlZENodW5rcyhhLCBiLCB0ZXh0RGlmZikge1xuICAgIGxldCBpbkEgPSBuZXcgTWFwKCk7XG4gICAgZm9yIChsZXQgc2V0IG9mIGEpXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2V0LmNodW5rLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgaWYgKHNldC5jaHVua1tpXS5tYXhQb2ludCA8PSAwKVxuICAgICAgICAgICAgICAgIGluQS5zZXQoc2V0LmNodW5rW2ldLCBzZXQuY2h1bmtQb3NbaV0pO1xuICAgIGxldCBzaGFyZWQgPSBuZXcgU2V0KCk7XG4gICAgZm9yIChsZXQgc2V0IG9mIGIpXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2V0LmNodW5rLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQga25vd24gPSBpbkEuZ2V0KHNldC5jaHVua1tpXSk7XG4gICAgICAgICAgICBpZiAoa25vd24gIT0gbnVsbCAmJiAodGV4dERpZmYgPyB0ZXh0RGlmZi5tYXBQb3Moa25vd24pIDoga25vd24pID09IHNldC5jaHVua1Bvc1tpXSAmJlxuICAgICAgICAgICAgICAgICEodGV4dERpZmYgPT09IG51bGwgfHwgdGV4dERpZmYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRleHREaWZmLnRvdWNoZXNSYW5nZShrbm93biwga25vd24gKyBzZXQuY2h1bmtbaV0ubGVuZ3RoKSkpXG4gICAgICAgICAgICAgICAgc2hhcmVkLmFkZChzZXQuY2h1bmtbaV0pO1xuICAgICAgICB9XG4gICAgcmV0dXJuIHNoYXJlZDtcbn1cbmNsYXNzIExheWVyQ3Vyc29yIHtcbiAgICBjb25zdHJ1Y3RvcihsYXllciwgc2tpcCwgbWluUG9pbnQsIHJhbmsgPSAwKSB7XG4gICAgICAgIHRoaXMubGF5ZXIgPSBsYXllcjtcbiAgICAgICAgdGhpcy5za2lwID0gc2tpcDtcbiAgICAgICAgdGhpcy5taW5Qb2ludCA9IG1pblBvaW50O1xuICAgICAgICB0aGlzLnJhbmsgPSByYW5rO1xuICAgIH1cbiAgICBnZXQgc3RhcnRTaWRlKCkgeyByZXR1cm4gdGhpcy52YWx1ZSA/IHRoaXMudmFsdWUuc3RhcnRTaWRlIDogMDsgfVxuICAgIGdldCBlbmRTaWRlKCkgeyByZXR1cm4gdGhpcy52YWx1ZSA/IHRoaXMudmFsdWUuZW5kU2lkZSA6IDA7IH1cbiAgICBnb3RvKHBvcywgc2lkZSA9IC0xMDAwMDAwMDAwIC8qIEMuRmFyICovKSB7XG4gICAgICAgIHRoaXMuY2h1bmtJbmRleCA9IHRoaXMucmFuZ2VJbmRleCA9IDA7XG4gICAgICAgIHRoaXMuZ290b0lubmVyKHBvcywgc2lkZSwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZ290b0lubmVyKHBvcywgc2lkZSwgZm9yd2FyZCkge1xuICAgICAgICB3aGlsZSAodGhpcy5jaHVua0luZGV4IDwgdGhpcy5sYXllci5jaHVuay5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxldCBuZXh0ID0gdGhpcy5sYXllci5jaHVua1t0aGlzLmNodW5rSW5kZXhdO1xuICAgICAgICAgICAgaWYgKCEodGhpcy5za2lwICYmIHRoaXMuc2tpcC5oYXMobmV4dCkgfHxcbiAgICAgICAgICAgICAgICB0aGlzLmxheWVyLmNodW5rRW5kKHRoaXMuY2h1bmtJbmRleCkgPCBwb3MgfHxcbiAgICAgICAgICAgICAgICBuZXh0Lm1heFBvaW50IDwgdGhpcy5taW5Qb2ludCkpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB0aGlzLmNodW5rSW5kZXgrKztcbiAgICAgICAgICAgIGZvcndhcmQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jaHVua0luZGV4IDwgdGhpcy5sYXllci5jaHVuay5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxldCByYW5nZUluZGV4ID0gdGhpcy5sYXllci5jaHVua1t0aGlzLmNodW5rSW5kZXhdLmZpbmRJbmRleChwb3MgLSB0aGlzLmxheWVyLmNodW5rUG9zW3RoaXMuY2h1bmtJbmRleF0sIHNpZGUsIHRydWUpO1xuICAgICAgICAgICAgaWYgKCFmb3J3YXJkIHx8IHRoaXMucmFuZ2VJbmRleCA8IHJhbmdlSW5kZXgpXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRSYW5nZUluZGV4KHJhbmdlSW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubmV4dCgpO1xuICAgIH1cbiAgICBmb3J3YXJkKHBvcywgc2lkZSkge1xuICAgICAgICBpZiAoKHRoaXMudG8gLSBwb3MgfHwgdGhpcy5lbmRTaWRlIC0gc2lkZSkgPCAwKVxuICAgICAgICAgICAgdGhpcy5nb3RvSW5uZXIocG9zLCBzaWRlLCB0cnVlKTtcbiAgICB9XG4gICAgbmV4dCgpIHtcbiAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2h1bmtJbmRleCA9PSB0aGlzLmxheWVyLmNodW5rLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZnJvbSA9IHRoaXMudG8gPSAxMDAwMDAwMDAwIC8qIEMuRmFyICovO1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IGNodW5rUG9zID0gdGhpcy5sYXllci5jaHVua1Bvc1t0aGlzLmNodW5rSW5kZXhdLCBjaHVuayA9IHRoaXMubGF5ZXIuY2h1bmtbdGhpcy5jaHVua0luZGV4XTtcbiAgICAgICAgICAgICAgICBsZXQgZnJvbSA9IGNodW5rUG9zICsgY2h1bmsuZnJvbVt0aGlzLnJhbmdlSW5kZXhdO1xuICAgICAgICAgICAgICAgIHRoaXMuZnJvbSA9IGZyb207XG4gICAgICAgICAgICAgICAgdGhpcy50byA9IGNodW5rUG9zICsgY2h1bmsudG9bdGhpcy5yYW5nZUluZGV4XTtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gY2h1bmsudmFsdWVbdGhpcy5yYW5nZUluZGV4XTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFJhbmdlSW5kZXgodGhpcy5yYW5nZUluZGV4ICsgMSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubWluUG9pbnQgPCAwIHx8IHRoaXMudmFsdWUucG9pbnQgJiYgdGhpcy50byAtIHRoaXMuZnJvbSA+PSB0aGlzLm1pblBvaW50KVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXRSYW5nZUluZGV4KGluZGV4KSB7XG4gICAgICAgIGlmIChpbmRleCA9PSB0aGlzLmxheWVyLmNodW5rW3RoaXMuY2h1bmtJbmRleF0udmFsdWUubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmNodW5rSW5kZXgrKztcbiAgICAgICAgICAgIGlmICh0aGlzLnNraXApIHtcbiAgICAgICAgICAgICAgICB3aGlsZSAodGhpcy5jaHVua0luZGV4IDwgdGhpcy5sYXllci5jaHVuay5sZW5ndGggJiYgdGhpcy5za2lwLmhhcyh0aGlzLmxheWVyLmNodW5rW3RoaXMuY2h1bmtJbmRleF0pKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNodW5rSW5kZXgrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmFuZ2VJbmRleCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJhbmdlSW5kZXggPSBpbmRleDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBuZXh0Q2h1bmsoKSB7XG4gICAgICAgIHRoaXMuY2h1bmtJbmRleCsrO1xuICAgICAgICB0aGlzLnJhbmdlSW5kZXggPSAwO1xuICAgICAgICB0aGlzLm5leHQoKTtcbiAgICB9XG4gICAgY29tcGFyZShvdGhlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5mcm9tIC0gb3RoZXIuZnJvbSB8fCB0aGlzLnN0YXJ0U2lkZSAtIG90aGVyLnN0YXJ0U2lkZSB8fCB0aGlzLnJhbmsgLSBvdGhlci5yYW5rIHx8XG4gICAgICAgICAgICB0aGlzLnRvIC0gb3RoZXIudG8gfHwgdGhpcy5lbmRTaWRlIC0gb3RoZXIuZW5kU2lkZTtcbiAgICB9XG59XG5jbGFzcyBIZWFwQ3Vyc29yIHtcbiAgICBjb25zdHJ1Y3RvcihoZWFwKSB7XG4gICAgICAgIHRoaXMuaGVhcCA9IGhlYXA7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tKHNldHMsIHNraXAgPSBudWxsLCBtaW5Qb2ludCA9IC0xKSB7XG4gICAgICAgIGxldCBoZWFwID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgY3VyID0gc2V0c1tpXTsgIWN1ci5pc0VtcHR5OyBjdXIgPSBjdXIubmV4dExheWVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1ci5tYXhQb2ludCA+PSBtaW5Qb2ludClcbiAgICAgICAgICAgICAgICAgICAgaGVhcC5wdXNoKG5ldyBMYXllckN1cnNvcihjdXIsIHNraXAsIG1pblBvaW50LCBpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhlYXAubGVuZ3RoID09IDEgPyBoZWFwWzBdIDogbmV3IEhlYXBDdXJzb3IoaGVhcCk7XG4gICAgfVxuICAgIGdldCBzdGFydFNpZGUoKSB7IHJldHVybiB0aGlzLnZhbHVlID8gdGhpcy52YWx1ZS5zdGFydFNpZGUgOiAwOyB9XG4gICAgZ290byhwb3MsIHNpZGUgPSAtMTAwMDAwMDAwMCAvKiBDLkZhciAqLykge1xuICAgICAgICBmb3IgKGxldCBjdXIgb2YgdGhpcy5oZWFwKVxuICAgICAgICAgICAgY3VyLmdvdG8ocG9zLCBzaWRlKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuaGVhcC5sZW5ndGggPj4gMTsgaSA+PSAwOyBpLS0pXG4gICAgICAgICAgICBoZWFwQnViYmxlKHRoaXMuaGVhcCwgaSk7XG4gICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZm9yd2FyZChwb3MsIHNpZGUpIHtcbiAgICAgICAgZm9yIChsZXQgY3VyIG9mIHRoaXMuaGVhcClcbiAgICAgICAgICAgIGN1ci5mb3J3YXJkKHBvcywgc2lkZSk7XG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLmhlYXAubGVuZ3RoID4+IDE7IGkgPj0gMDsgaS0tKVxuICAgICAgICAgICAgaGVhcEJ1YmJsZSh0aGlzLmhlYXAsIGkpO1xuICAgICAgICBpZiAoKHRoaXMudG8gLSBwb3MgfHwgdGhpcy52YWx1ZS5lbmRTaWRlIC0gc2lkZSkgPCAwKVxuICAgICAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgfVxuICAgIG5leHQoKSB7XG4gICAgICAgIGlmICh0aGlzLmhlYXAubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZnJvbSA9IHRoaXMudG8gPSAxMDAwMDAwMDAwIC8qIEMuRmFyICovO1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnJhbmsgPSAtMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCB0b3AgPSB0aGlzLmhlYXBbMF07XG4gICAgICAgICAgICB0aGlzLmZyb20gPSB0b3AuZnJvbTtcbiAgICAgICAgICAgIHRoaXMudG8gPSB0b3AudG87XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdG9wLnZhbHVlO1xuICAgICAgICAgICAgdGhpcy5yYW5rID0gdG9wLnJhbms7XG4gICAgICAgICAgICBpZiAodG9wLnZhbHVlKVxuICAgICAgICAgICAgICAgIHRvcC5uZXh0KCk7XG4gICAgICAgICAgICBoZWFwQnViYmxlKHRoaXMuaGVhcCwgMCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBoZWFwQnViYmxlKGhlYXAsIGluZGV4KSB7XG4gICAgZm9yIChsZXQgY3VyID0gaGVhcFtpbmRleF07Oykge1xuICAgICAgICBsZXQgY2hpbGRJbmRleCA9IChpbmRleCA8PCAxKSArIDE7XG4gICAgICAgIGlmIChjaGlsZEluZGV4ID49IGhlYXAubGVuZ3RoKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGxldCBjaGlsZCA9IGhlYXBbY2hpbGRJbmRleF07XG4gICAgICAgIGlmIChjaGlsZEluZGV4ICsgMSA8IGhlYXAubGVuZ3RoICYmIGNoaWxkLmNvbXBhcmUoaGVhcFtjaGlsZEluZGV4ICsgMV0pID49IDApIHtcbiAgICAgICAgICAgIGNoaWxkID0gaGVhcFtjaGlsZEluZGV4ICsgMV07XG4gICAgICAgICAgICBjaGlsZEluZGV4Kys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1ci5jb21wYXJlKGNoaWxkKSA8IDApXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgaGVhcFtjaGlsZEluZGV4XSA9IGN1cjtcbiAgICAgICAgaGVhcFtpbmRleF0gPSBjaGlsZDtcbiAgICAgICAgaW5kZXggPSBjaGlsZEluZGV4O1xuICAgIH1cbn1cbmNsYXNzIFNwYW5DdXJzb3Ige1xuICAgIGNvbnN0cnVjdG9yKHNldHMsIHNraXAsIG1pblBvaW50KSB7XG4gICAgICAgIHRoaXMubWluUG9pbnQgPSBtaW5Qb2ludDtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBbXTtcbiAgICAgICAgdGhpcy5hY3RpdmVUbyA9IFtdO1xuICAgICAgICB0aGlzLmFjdGl2ZVJhbmsgPSBbXTtcbiAgICAgICAgdGhpcy5taW5BY3RpdmUgPSAtMTtcbiAgICAgICAgLy8gQSBjdXJyZW50bHkgYWN0aXZlIHBvaW50IHJhbmdlLCBpZiBhbnlcbiAgICAgICAgdGhpcy5wb2ludCA9IG51bGw7XG4gICAgICAgIHRoaXMucG9pbnRGcm9tID0gMDtcbiAgICAgICAgdGhpcy5wb2ludFJhbmsgPSAwO1xuICAgICAgICB0aGlzLnRvID0gLTEwMDAwMDAwMDAgLyogQy5GYXIgKi87XG4gICAgICAgIHRoaXMuZW5kU2lkZSA9IDA7XG4gICAgICAgIC8vIFRoZSBhbW91bnQgb2Ygb3BlbiBhY3RpdmUgcmFuZ2VzIGF0IHRoZSBzdGFydCBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgIC8vIE5vdCBpbmNsdWRpbmcgcG9pbnRzLlxuICAgICAgICB0aGlzLm9wZW5TdGFydCA9IC0xO1xuICAgICAgICB0aGlzLmN1cnNvciA9IEhlYXBDdXJzb3IuZnJvbShzZXRzLCBza2lwLCBtaW5Qb2ludCk7XG4gICAgfVxuICAgIGdvdG8ocG9zLCBzaWRlID0gLTEwMDAwMDAwMDAgLyogQy5GYXIgKi8pIHtcbiAgICAgICAgdGhpcy5jdXJzb3IuZ290byhwb3MsIHNpZGUpO1xuICAgICAgICB0aGlzLmFjdGl2ZS5sZW5ndGggPSB0aGlzLmFjdGl2ZVRvLmxlbmd0aCA9IHRoaXMuYWN0aXZlUmFuay5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLm1pbkFjdGl2ZSA9IC0xO1xuICAgICAgICB0aGlzLnRvID0gcG9zO1xuICAgICAgICB0aGlzLmVuZFNpZGUgPSBzaWRlO1xuICAgICAgICB0aGlzLm9wZW5TdGFydCA9IC0xO1xuICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGZvcndhcmQocG9zLCBzaWRlKSB7XG4gICAgICAgIHdoaWxlICh0aGlzLm1pbkFjdGl2ZSA+IC0xICYmICh0aGlzLmFjdGl2ZVRvW3RoaXMubWluQWN0aXZlXSAtIHBvcyB8fCB0aGlzLmFjdGl2ZVt0aGlzLm1pbkFjdGl2ZV0uZW5kU2lkZSAtIHNpZGUpIDwgMClcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQWN0aXZlKHRoaXMubWluQWN0aXZlKTtcbiAgICAgICAgdGhpcy5jdXJzb3IuZm9yd2FyZChwb3MsIHNpZGUpO1xuICAgIH1cbiAgICByZW1vdmVBY3RpdmUoaW5kZXgpIHtcbiAgICAgICAgcmVtb3ZlKHRoaXMuYWN0aXZlLCBpbmRleCk7XG4gICAgICAgIHJlbW92ZSh0aGlzLmFjdGl2ZVRvLCBpbmRleCk7XG4gICAgICAgIHJlbW92ZSh0aGlzLmFjdGl2ZVJhbmssIGluZGV4KTtcbiAgICAgICAgdGhpcy5taW5BY3RpdmUgPSBmaW5kTWluSW5kZXgodGhpcy5hY3RpdmUsIHRoaXMuYWN0aXZlVG8pO1xuICAgIH1cbiAgICBhZGRBY3RpdmUodHJhY2tPcGVuKSB7XG4gICAgICAgIGxldCBpID0gMCwgeyB2YWx1ZSwgdG8sIHJhbmsgfSA9IHRoaXMuY3Vyc29yO1xuICAgICAgICAvLyBPcmdhbml6ZSBhY3RpdmUgbWFya3MgYnkgcmFuayBmaXJzdCwgdGhlbiBieSBzaXplXG4gICAgICAgIHdoaWxlIChpIDwgdGhpcy5hY3RpdmVSYW5rLmxlbmd0aCAmJiAocmFuayAtIHRoaXMuYWN0aXZlUmFua1tpXSB8fCB0byAtIHRoaXMuYWN0aXZlVG9baV0pID4gMClcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgaW5zZXJ0KHRoaXMuYWN0aXZlLCBpLCB2YWx1ZSk7XG4gICAgICAgIGluc2VydCh0aGlzLmFjdGl2ZVRvLCBpLCB0byk7XG4gICAgICAgIGluc2VydCh0aGlzLmFjdGl2ZVJhbmssIGksIHJhbmspO1xuICAgICAgICBpZiAodHJhY2tPcGVuKVxuICAgICAgICAgICAgaW5zZXJ0KHRyYWNrT3BlbiwgaSwgdGhpcy5jdXJzb3IuZnJvbSk7XG4gICAgICAgIHRoaXMubWluQWN0aXZlID0gZmluZE1pbkluZGV4KHRoaXMuYWN0aXZlLCB0aGlzLmFjdGl2ZVRvKTtcbiAgICB9XG4gICAgLy8gQWZ0ZXIgY2FsbGluZyB0aGlzLCBpZiBgdGhpcy5wb2ludGAgIT0gbnVsbCwgdGhlIG5leHQgcmFuZ2UgaXMgYVxuICAgIC8vIHBvaW50LiBPdGhlcndpc2UsIGl0J3MgYSByZWd1bGFyIHJhbmdlLCBjb3ZlcmVkIGJ5IGB0aGlzLmFjdGl2ZWAuXG4gICAgbmV4dCgpIHtcbiAgICAgICAgbGV0IGZyb20gPSB0aGlzLnRvLCB3YXNQb2ludCA9IHRoaXMucG9pbnQ7XG4gICAgICAgIHRoaXMucG9pbnQgPSBudWxsO1xuICAgICAgICBsZXQgdHJhY2tPcGVuID0gdGhpcy5vcGVuU3RhcnQgPCAwID8gW10gOiBudWxsO1xuICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICBsZXQgYSA9IHRoaXMubWluQWN0aXZlO1xuICAgICAgICAgICAgaWYgKGEgPiAtMSAmJiAodGhpcy5hY3RpdmVUb1thXSAtIHRoaXMuY3Vyc29yLmZyb20gfHwgdGhpcy5hY3RpdmVbYV0uZW5kU2lkZSAtIHRoaXMuY3Vyc29yLnN0YXJ0U2lkZSkgPCAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYWN0aXZlVG9bYV0gPiBmcm9tKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG8gPSB0aGlzLmFjdGl2ZVRvW2FdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVuZFNpZGUgPSB0aGlzLmFjdGl2ZVthXS5lbmRTaWRlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVBY3RpdmUoYSk7XG4gICAgICAgICAgICAgICAgaWYgKHRyYWNrT3BlbilcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlKHRyYWNrT3BlbiwgYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghdGhpcy5jdXJzb3IudmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRvID0gdGhpcy5lbmRTaWRlID0gMTAwMDAwMDAwMCAvKiBDLkZhciAqLztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuY3Vyc29yLmZyb20gPiBmcm9tKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50byA9IHRoaXMuY3Vyc29yLmZyb207XG4gICAgICAgICAgICAgICAgdGhpcy5lbmRTaWRlID0gdGhpcy5jdXJzb3Iuc3RhcnRTaWRlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IG5leHRWYWwgPSB0aGlzLmN1cnNvci52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAoIW5leHRWYWwucG9pbnQpIHsgLy8gT3BlbmluZyBhIHJhbmdlXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkQWN0aXZlKHRyYWNrT3Blbik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3Vyc29yLm5leHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAod2FzUG9pbnQgJiYgdGhpcy5jdXJzb3IudG8gPT0gdGhpcy50byAmJiB0aGlzLmN1cnNvci5mcm9tIDwgdGhpcy5jdXJzb3IudG8pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWdub3JlIGFueSBub24tZW1wdHkgcG9pbnRzIHRoYXQgZW5kIHByZWNpc2VseSBhdCB0aGUgZW5kIG9mIHRoZSBwcmV2IHBvaW50XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3Vyc29yLm5leHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7IC8vIE5ldyBwb2ludFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvaW50ID0gbmV4dFZhbDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb2ludEZyb20gPSB0aGlzLmN1cnNvci5mcm9tO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvaW50UmFuayA9IHRoaXMuY3Vyc29yLnJhbms7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG8gPSB0aGlzLmN1cnNvci50bztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbmRTaWRlID0gbmV4dFZhbC5lbmRTaWRlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnNvci5uZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9yd2FyZCh0aGlzLnRvLCB0aGlzLmVuZFNpZGUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRyYWNrT3Blbikge1xuICAgICAgICAgICAgdGhpcy5vcGVuU3RhcnQgPSAwO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IHRyYWNrT3Blbi5sZW5ndGggLSAxOyBpID49IDAgJiYgdHJhY2tPcGVuW2ldIDwgZnJvbTsgaS0tKVxuICAgICAgICAgICAgICAgIHRoaXMub3BlblN0YXJ0Kys7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWN0aXZlRm9yUG9pbnQodG8pIHtcbiAgICAgICAgaWYgKCF0aGlzLmFjdGl2ZS5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hY3RpdmU7XG4gICAgICAgIGxldCBhY3RpdmUgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuYWN0aXZlLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hY3RpdmVSYW5rW2ldIDwgdGhpcy5wb2ludFJhbmspXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBpZiAodGhpcy5hY3RpdmVUb1tpXSA+IHRvIHx8IHRoaXMuYWN0aXZlVG9baV0gPT0gdG8gJiYgdGhpcy5hY3RpdmVbaV0uZW5kU2lkZSA+PSB0aGlzLnBvaW50LmVuZFNpZGUpXG4gICAgICAgICAgICAgICAgYWN0aXZlLnB1c2godGhpcy5hY3RpdmVbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY3RpdmUucmV2ZXJzZSgpO1xuICAgIH1cbiAgICBvcGVuRW5kKHRvKSB7XG4gICAgICAgIGxldCBvcGVuID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuYWN0aXZlVG8ubGVuZ3RoIC0gMTsgaSA+PSAwICYmIHRoaXMuYWN0aXZlVG9baV0gPiB0bzsgaS0tKVxuICAgICAgICAgICAgb3BlbisrO1xuICAgICAgICByZXR1cm4gb3BlbjtcbiAgICB9XG59XG5mdW5jdGlvbiBjb21wYXJlKGEsIHN0YXJ0QSwgYiwgc3RhcnRCLCBsZW5ndGgsIGNvbXBhcmF0b3IpIHtcbiAgICBhLmdvdG8oc3RhcnRBKTtcbiAgICBiLmdvdG8oc3RhcnRCKTtcbiAgICBsZXQgZW5kQiA9IHN0YXJ0QiArIGxlbmd0aDtcbiAgICBsZXQgcG9zID0gc3RhcnRCLCBkUG9zID0gc3RhcnRCIC0gc3RhcnRBO1xuICAgIGZvciAoOzspIHtcbiAgICAgICAgbGV0IGRpZmYgPSAoYS50byArIGRQb3MpIC0gYi50byB8fCBhLmVuZFNpZGUgLSBiLmVuZFNpZGU7XG4gICAgICAgIGxldCBlbmQgPSBkaWZmIDwgMCA/IGEudG8gKyBkUG9zIDogYi50bywgY2xpcEVuZCA9IE1hdGgubWluKGVuZCwgZW5kQik7XG4gICAgICAgIGlmIChhLnBvaW50IHx8IGIucG9pbnQpIHtcbiAgICAgICAgICAgIGlmICghKGEucG9pbnQgJiYgYi5wb2ludCAmJiAoYS5wb2ludCA9PSBiLnBvaW50IHx8IGEucG9pbnQuZXEoYi5wb2ludCkpICYmXG4gICAgICAgICAgICAgICAgc2FtZVZhbHVlcyhhLmFjdGl2ZUZvclBvaW50KGEudG8pLCBiLmFjdGl2ZUZvclBvaW50KGIudG8pKSkpXG4gICAgICAgICAgICAgICAgY29tcGFyYXRvci5jb21wYXJlUG9pbnQocG9zLCBjbGlwRW5kLCBhLnBvaW50LCBiLnBvaW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChjbGlwRW5kID4gcG9zICYmICFzYW1lVmFsdWVzKGEuYWN0aXZlLCBiLmFjdGl2ZSkpXG4gICAgICAgICAgICAgICAgY29tcGFyYXRvci5jb21wYXJlUmFuZ2UocG9zLCBjbGlwRW5kLCBhLmFjdGl2ZSwgYi5hY3RpdmUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbmQgPiBlbmRCKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIHBvcyA9IGVuZDtcbiAgICAgICAgaWYgKGRpZmYgPD0gMClcbiAgICAgICAgICAgIGEubmV4dCgpO1xuICAgICAgICBpZiAoZGlmZiA+PSAwKVxuICAgICAgICAgICAgYi5uZXh0KCk7XG4gICAgfVxufVxuZnVuY3Rpb24gc2FtZVZhbHVlcyhhLCBiKSB7XG4gICAgaWYgKGEubGVuZ3RoICE9IGIubGVuZ3RoKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKVxuICAgICAgICBpZiAoYVtpXSAhPSBiW2ldICYmICFhW2ldLmVxKGJbaV0pKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gcmVtb3ZlKGFycmF5LCBpbmRleCkge1xuICAgIGZvciAobGV0IGkgPSBpbmRleCwgZSA9IGFycmF5Lmxlbmd0aCAtIDE7IGkgPCBlOyBpKyspXG4gICAgICAgIGFycmF5W2ldID0gYXJyYXlbaSArIDFdO1xuICAgIGFycmF5LnBvcCgpO1xufVxuZnVuY3Rpb24gaW5zZXJ0KGFycmF5LCBpbmRleCwgdmFsdWUpIHtcbiAgICBmb3IgKGxldCBpID0gYXJyYXkubGVuZ3RoIC0gMTsgaSA+PSBpbmRleDsgaS0tKVxuICAgICAgICBhcnJheVtpICsgMV0gPSBhcnJheVtpXTtcbiAgICBhcnJheVtpbmRleF0gPSB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGZpbmRNaW5JbmRleCh2YWx1ZSwgYXJyYXkpIHtcbiAgICBsZXQgZm91bmQgPSAtMSwgZm91bmRQb3MgPSAxMDAwMDAwMDAwIC8qIEMuRmFyICovO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspXG4gICAgICAgIGlmICgoYXJyYXlbaV0gLSBmb3VuZFBvcyB8fCB2YWx1ZVtpXS5lbmRTaWRlIC0gdmFsdWVbZm91bmRdLmVuZFNpZGUpIDwgMCkge1xuICAgICAgICAgICAgZm91bmQgPSBpO1xuICAgICAgICAgICAgZm91bmRQb3MgPSBhcnJheVtpXTtcbiAgICAgICAgfVxuICAgIHJldHVybiBmb3VuZDtcbn1cblxuLyoqXG5Db3VudCB0aGUgY29sdW1uIHBvc2l0aW9uIGF0IHRoZSBnaXZlbiBvZmZzZXQgaW50byB0aGUgc3RyaW5nLFxudGFraW5nIGV4dGVuZGluZyBjaGFyYWN0ZXJzIGFuZCB0YWIgc2l6ZSBpbnRvIGFjY291bnQuXG4qL1xuZnVuY3Rpb24gY291bnRDb2x1bW4oc3RyaW5nLCB0YWJTaXplLCB0byA9IHN0cmluZy5sZW5ndGgpIHtcbiAgICBsZXQgbiA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0bzspIHtcbiAgICAgICAgaWYgKHN0cmluZy5jaGFyQ29kZUF0KGkpID09IDkpIHtcbiAgICAgICAgICAgIG4gKz0gdGFiU2l6ZSAtIChuICUgdGFiU2l6ZSk7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuKys7XG4gICAgICAgICAgICBpID0gZmluZENsdXN0ZXJCcmVhayhzdHJpbmcsIGkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuO1xufVxuLyoqXG5GaW5kIHRoZSBvZmZzZXQgdGhhdCBjb3JyZXNwb25kcyB0byB0aGUgZ2l2ZW4gY29sdW1uIHBvc2l0aW9uIGluIGFcbnN0cmluZywgdGFraW5nIGV4dGVuZGluZyBjaGFyYWN0ZXJzIGFuZCB0YWIgc2l6ZSBpbnRvIGFjY291bnQuIEJ5XG5kZWZhdWx0LCB0aGUgc3RyaW5nIGxlbmd0aCBpcyByZXR1cm5lZCB3aGVuIGl0IGlzIHRvbyBzaG9ydCB0b1xucmVhY2ggdGhlIGNvbHVtbi4gUGFzcyBgc3RyaWN0YCB0cnVlIHRvIG1ha2UgaXQgcmV0dXJuIC0xIGluIHRoYXRcbnNpdHVhdGlvbi5cbiovXG5mdW5jdGlvbiBmaW5kQ29sdW1uKHN0cmluZywgY29sLCB0YWJTaXplLCBzdHJpY3QpIHtcbiAgICBmb3IgKGxldCBpID0gMCwgbiA9IDA7Oykge1xuICAgICAgICBpZiAobiA+PSBjb2wpXG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgaWYgKGkgPT0gc3RyaW5nLmxlbmd0aClcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBuICs9IHN0cmluZy5jaGFyQ29kZUF0KGkpID09IDkgPyB0YWJTaXplIC0gKG4gJSB0YWJTaXplKSA6IDE7XG4gICAgICAgIGkgPSBmaW5kQ2x1c3RlckJyZWFrKHN0cmluZywgaSk7XG4gICAgfVxuICAgIHJldHVybiBzdHJpY3QgPT09IHRydWUgPyAtMSA6IHN0cmluZy5sZW5ndGg7XG59XG5cbmV4cG9ydHMuQW5ub3RhdGlvbiA9IEFubm90YXRpb247XG5leHBvcnRzLkFubm90YXRpb25UeXBlID0gQW5ub3RhdGlvblR5cGU7XG5leHBvcnRzLkNoYW5nZURlc2MgPSBDaGFuZ2VEZXNjO1xuZXhwb3J0cy5DaGFuZ2VTZXQgPSBDaGFuZ2VTZXQ7XG5leHBvcnRzLkNvbXBhcnRtZW50ID0gQ29tcGFydG1lbnQ7XG5leHBvcnRzLkVkaXRvclNlbGVjdGlvbiA9IEVkaXRvclNlbGVjdGlvbjtcbmV4cG9ydHMuRWRpdG9yU3RhdGUgPSBFZGl0b3JTdGF0ZTtcbmV4cG9ydHMuRmFjZXQgPSBGYWNldDtcbmV4cG9ydHMuTGluZSA9IExpbmU7XG5leHBvcnRzLlByZWMgPSBQcmVjO1xuZXhwb3J0cy5SYW5nZSA9IFJhbmdlO1xuZXhwb3J0cy5SYW5nZVNldCA9IFJhbmdlU2V0O1xuZXhwb3J0cy5SYW5nZVNldEJ1aWxkZXIgPSBSYW5nZVNldEJ1aWxkZXI7XG5leHBvcnRzLlJhbmdlVmFsdWUgPSBSYW5nZVZhbHVlO1xuZXhwb3J0cy5TZWxlY3Rpb25SYW5nZSA9IFNlbGVjdGlvblJhbmdlO1xuZXhwb3J0cy5TdGF0ZUVmZmVjdCA9IFN0YXRlRWZmZWN0O1xuZXhwb3J0cy5TdGF0ZUVmZmVjdFR5cGUgPSBTdGF0ZUVmZmVjdFR5cGU7XG5leHBvcnRzLlN0YXRlRmllbGQgPSBTdGF0ZUZpZWxkO1xuZXhwb3J0cy5UZXh0ID0gVGV4dDtcbmV4cG9ydHMuVHJhbnNhY3Rpb24gPSBUcmFuc2FjdGlvbjtcbmV4cG9ydHMuY29kZVBvaW50QXQgPSBjb2RlUG9pbnRBdDtcbmV4cG9ydHMuY29kZVBvaW50U2l6ZSA9IGNvZGVQb2ludFNpemU7XG5leHBvcnRzLmNvbWJpbmVDb25maWcgPSBjb21iaW5lQ29uZmlnO1xuZXhwb3J0cy5jb3VudENvbHVtbiA9IGNvdW50Q29sdW1uO1xuZXhwb3J0cy5maW5kQ2x1c3RlckJyZWFrID0gZmluZENsdXN0ZXJCcmVhaztcbmV4cG9ydHMuZmluZENvbHVtbiA9IGZpbmRDb2x1bW47XG5leHBvcnRzLmZyb21Db2RlUG9pbnQgPSBmcm9tQ29kZVBvaW50O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgc3RhdGUgPSByZXF1aXJlKCdAY29kZW1pcnJvci9zdGF0ZScpO1xudmFyIHN0eWxlTW9kID0gcmVxdWlyZSgnc3R5bGUtbW9kJyk7XG52YXIgdzNjS2V5bmFtZSA9IHJlcXVpcmUoJ3czYy1rZXluYW1lJyk7XG5cbmZ1bmN0aW9uIGdldFNlbGVjdGlvbihyb290KSB7XG4gICAgbGV0IHRhcmdldDtcbiAgICAvLyBCcm93c2VycyBkaWZmZXIgb24gd2hldGhlciBzaGFkb3cgcm9vdHMgaGF2ZSBhIGdldFNlbGVjdGlvblxuICAgIC8vIG1ldGhvZC4gSWYgaXQgZXhpc3RzLCB1c2UgdGhhdCwgb3RoZXJ3aXNlLCBjYWxsIGl0IG9uIHRoZVxuICAgIC8vIGRvY3VtZW50LlxuICAgIGlmIChyb290Lm5vZGVUeXBlID09IDExKSB7IC8vIFNoYWRvdyByb290XG4gICAgICAgIHRhcmdldCA9IHJvb3QuZ2V0U2VsZWN0aW9uID8gcm9vdCA6IHJvb3Qub3duZXJEb2N1bWVudDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRhcmdldCA9IHJvb3Q7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQuZ2V0U2VsZWN0aW9uKCk7XG59XG5mdW5jdGlvbiBjb250YWlucyhkb20sIG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZSA/IGRvbSA9PSBub2RlIHx8IGRvbS5jb250YWlucyhub2RlLm5vZGVUeXBlICE9IDEgPyBub2RlLnBhcmVudE5vZGUgOiBub2RlKSA6IGZhbHNlO1xufVxuZnVuY3Rpb24gZGVlcEFjdGl2ZUVsZW1lbnQoZG9jKSB7XG4gICAgbGV0IGVsdCA9IGRvYy5hY3RpdmVFbGVtZW50O1xuICAgIHdoaWxlIChlbHQgJiYgZWx0LnNoYWRvd1Jvb3QpXG4gICAgICAgIGVsdCA9IGVsdC5zaGFkb3dSb290LmFjdGl2ZUVsZW1lbnQ7XG4gICAgcmV0dXJuIGVsdDtcbn1cbmZ1bmN0aW9uIGhhc1NlbGVjdGlvbihkb20sIHNlbGVjdGlvbikge1xuICAgIGlmICghc2VsZWN0aW9uLmFuY2hvck5vZGUpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB0cnkge1xuICAgICAgICAvLyBGaXJlZm94IHdpbGwgcmFpc2UgJ3Blcm1pc3Npb24gZGVuaWVkJyBlcnJvcnMgd2hlbiBhY2Nlc3NpbmdcbiAgICAgICAgLy8gcHJvcGVydGllcyBvZiBgc2VsLmFuY2hvck5vZGVgIHdoZW4gaXQncyBpbiBhIGdlbmVyYXRlZCBDU1NcbiAgICAgICAgLy8gZWxlbWVudC5cbiAgICAgICAgcmV0dXJuIGNvbnRhaW5zKGRvbSwgc2VsZWN0aW9uLmFuY2hvck5vZGUpO1xuICAgIH1cbiAgICBjYXRjaCAoXykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuZnVuY3Rpb24gY2xpZW50UmVjdHNGb3IoZG9tKSB7XG4gICAgaWYgKGRvbS5ub2RlVHlwZSA9PSAzKVxuICAgICAgICByZXR1cm4gdGV4dFJhbmdlKGRvbSwgMCwgZG9tLm5vZGVWYWx1ZS5sZW5ndGgpLmdldENsaWVudFJlY3RzKCk7XG4gICAgZWxzZSBpZiAoZG9tLm5vZGVUeXBlID09IDEpXG4gICAgICAgIHJldHVybiBkb20uZ2V0Q2xpZW50UmVjdHMoKTtcbiAgICBlbHNlXG4gICAgICAgIHJldHVybiBbXTtcbn1cbi8vIFNjYW5zIGZvcndhcmQgYW5kIGJhY2t3YXJkIHRocm91Z2ggRE9NIHBvc2l0aW9ucyBlcXVpdmFsZW50IHRvIHRoZVxuLy8gZ2l2ZW4gb25lIHRvIHNlZSBpZiB0aGUgdHdvIGFyZSBpbiB0aGUgc2FtZSBwbGFjZSAoaS5lLiBhZnRlciBhXG4vLyB0ZXh0IG5vZGUgdnMgYXQgdGhlIGVuZCBvZiB0aGF0IHRleHQgbm9kZSlcbmZ1bmN0aW9uIGlzRXF1aXZhbGVudFBvc2l0aW9uKG5vZGUsIG9mZiwgdGFyZ2V0Tm9kZSwgdGFyZ2V0T2ZmKSB7XG4gICAgcmV0dXJuIHRhcmdldE5vZGUgPyAoc2NhbkZvcihub2RlLCBvZmYsIHRhcmdldE5vZGUsIHRhcmdldE9mZiwgLTEpIHx8XG4gICAgICAgIHNjYW5Gb3Iobm9kZSwgb2ZmLCB0YXJnZXROb2RlLCB0YXJnZXRPZmYsIDEpKSA6IGZhbHNlO1xufVxuZnVuY3Rpb24gZG9tSW5kZXgobm9kZSkge1xuICAgIGZvciAodmFyIGluZGV4ID0gMDs7IGluZGV4KyspIHtcbiAgICAgICAgbm9kZSA9IG5vZGUucHJldmlvdXNTaWJsaW5nO1xuICAgICAgICBpZiAoIW5vZGUpXG4gICAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgfVxufVxuZnVuY3Rpb24gaXNCbG9ja0VsZW1lbnQobm9kZSkge1xuICAgIHJldHVybiBub2RlLm5vZGVUeXBlID09IDEgJiYgL14oRElWfFB8TEl8VUx8T0x8QkxPQ0tRVU9URXxERHxEVHxIXFxkfFNFQ1RJT058UFJFKSQvLnRlc3Qobm9kZS5ub2RlTmFtZSk7XG59XG5mdW5jdGlvbiBzY2FuRm9yKG5vZGUsIG9mZiwgdGFyZ2V0Tm9kZSwgdGFyZ2V0T2ZmLCBkaXIpIHtcbiAgICBmb3IgKDs7KSB7XG4gICAgICAgIGlmIChub2RlID09IHRhcmdldE5vZGUgJiYgb2ZmID09IHRhcmdldE9mZilcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAob2ZmID09IChkaXIgPCAwID8gMCA6IG1heE9mZnNldChub2RlKSkpIHtcbiAgICAgICAgICAgIGlmIChub2RlLm5vZGVOYW1lID09IFwiRElWXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgbGV0IHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIGlmICghcGFyZW50IHx8IHBhcmVudC5ub2RlVHlwZSAhPSAxKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIG9mZiA9IGRvbUluZGV4KG5vZGUpICsgKGRpciA8IDAgPyAwIDogMSk7XG4gICAgICAgICAgICBub2RlID0gcGFyZW50O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5vZGUubm9kZVR5cGUgPT0gMSkge1xuICAgICAgICAgICAgbm9kZSA9IG5vZGUuY2hpbGROb2Rlc1tvZmYgKyAoZGlyIDwgMCA/IC0xIDogMCldO1xuICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMSAmJiBub2RlLmNvbnRlbnRFZGl0YWJsZSA9PSBcImZhbHNlXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgb2ZmID0gZGlyIDwgMCA/IG1heE9mZnNldChub2RlKSA6IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBtYXhPZmZzZXQobm9kZSkge1xuICAgIHJldHVybiBub2RlLm5vZGVUeXBlID09IDMgPyBub2RlLm5vZGVWYWx1ZS5sZW5ndGggOiBub2RlLmNoaWxkTm9kZXMubGVuZ3RoO1xufVxuZnVuY3Rpb24gZmxhdHRlblJlY3QocmVjdCwgbGVmdCkge1xuICAgIGxldCB4ID0gbGVmdCA/IHJlY3QubGVmdCA6IHJlY3QucmlnaHQ7XG4gICAgcmV0dXJuIHsgbGVmdDogeCwgcmlnaHQ6IHgsIHRvcDogcmVjdC50b3AsIGJvdHRvbTogcmVjdC5ib3R0b20gfTtcbn1cbmZ1bmN0aW9uIHdpbmRvd1JlY3Qod2luKSB7XG4gICAgbGV0IHZwID0gd2luLnZpc3VhbFZpZXdwb3J0O1xuICAgIGlmICh2cClcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxlZnQ6IDAsIHJpZ2h0OiB2cC53aWR0aCxcbiAgICAgICAgICAgIHRvcDogMCwgYm90dG9tOiB2cC5oZWlnaHRcbiAgICAgICAgfTtcbiAgICByZXR1cm4geyBsZWZ0OiAwLCByaWdodDogd2luLmlubmVyV2lkdGgsXG4gICAgICAgIHRvcDogMCwgYm90dG9tOiB3aW4uaW5uZXJIZWlnaHQgfTtcbn1cbmZ1bmN0aW9uIGdldFNjYWxlKGVsdCwgcmVjdCkge1xuICAgIGxldCBzY2FsZVggPSByZWN0LndpZHRoIC8gZWx0Lm9mZnNldFdpZHRoO1xuICAgIGxldCBzY2FsZVkgPSByZWN0LmhlaWdodCAvIGVsdC5vZmZzZXRIZWlnaHQ7XG4gICAgaWYgKHNjYWxlWCA+IDAuOTk1ICYmIHNjYWxlWCA8IDEuMDA1IHx8ICFpc0Zpbml0ZShzY2FsZVgpIHx8IE1hdGguYWJzKHJlY3Qud2lkdGggLSBlbHQub2Zmc2V0V2lkdGgpIDwgMSlcbiAgICAgICAgc2NhbGVYID0gMTtcbiAgICBpZiAoc2NhbGVZID4gMC45OTUgJiYgc2NhbGVZIDwgMS4wMDUgfHwgIWlzRmluaXRlKHNjYWxlWSkgfHwgTWF0aC5hYnMocmVjdC5oZWlnaHQgLSBlbHQub2Zmc2V0SGVpZ2h0KSA8IDEpXG4gICAgICAgIHNjYWxlWSA9IDE7XG4gICAgcmV0dXJuIHsgc2NhbGVYLCBzY2FsZVkgfTtcbn1cbmZ1bmN0aW9uIHNjcm9sbFJlY3RJbnRvVmlldyhkb20sIHJlY3QsIHNpZGUsIHgsIHksIHhNYXJnaW4sIHlNYXJnaW4sIGx0cikge1xuICAgIGxldCBkb2MgPSBkb20ub3duZXJEb2N1bWVudCwgd2luID0gZG9jLmRlZmF1bHRWaWV3IHx8IHdpbmRvdztcbiAgICBmb3IgKGxldCBjdXIgPSBkb20sIHN0b3AgPSBmYWxzZTsgY3VyICYmICFzdG9wOykge1xuICAgICAgICBpZiAoY3VyLm5vZGVUeXBlID09IDEpIHsgLy8gRWxlbWVudFxuICAgICAgICAgICAgbGV0IGJvdW5kaW5nLCB0b3AgPSBjdXIgPT0gZG9jLmJvZHk7XG4gICAgICAgICAgICBsZXQgc2NhbGVYID0gMSwgc2NhbGVZID0gMTtcbiAgICAgICAgICAgIGlmICh0b3ApIHtcbiAgICAgICAgICAgICAgICBib3VuZGluZyA9IHdpbmRvd1JlY3Qod2luKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICgvXihmaXhlZHxzdGlja3kpJC8udGVzdChnZXRDb21wdXRlZFN0eWxlKGN1cikucG9zaXRpb24pKVxuICAgICAgICAgICAgICAgICAgICBzdG9wID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoY3VyLnNjcm9sbEhlaWdodCA8PSBjdXIuY2xpZW50SGVpZ2h0ICYmIGN1ci5zY3JvbGxXaWR0aCA8PSBjdXIuY2xpZW50V2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VyID0gY3VyLmFzc2lnbmVkU2xvdCB8fCBjdXIucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCByZWN0ID0gY3VyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgICAgICh7IHNjYWxlWCwgc2NhbGVZIH0gPSBnZXRTY2FsZShjdXIsIHJlY3QpKTtcbiAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgc2Nyb2xsYmFyIHdpZHRoIGlzbid0IGluY2x1ZGVkIGluIHRoZSByZWN0YW5nbGVcbiAgICAgICAgICAgICAgICBib3VuZGluZyA9IHsgbGVmdDogcmVjdC5sZWZ0LCByaWdodDogcmVjdC5sZWZ0ICsgY3VyLmNsaWVudFdpZHRoICogc2NhbGVYLFxuICAgICAgICAgICAgICAgICAgICB0b3A6IHJlY3QudG9wLCBib3R0b206IHJlY3QudG9wICsgY3VyLmNsaWVudEhlaWdodCAqIHNjYWxlWSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IG1vdmVYID0gMCwgbW92ZVkgPSAwO1xuICAgICAgICAgICAgaWYgKHkgPT0gXCJuZWFyZXN0XCIpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVjdC50b3AgPCBib3VuZGluZy50b3ApIHtcbiAgICAgICAgICAgICAgICAgICAgbW92ZVkgPSAtKGJvdW5kaW5nLnRvcCAtIHJlY3QudG9wICsgeU1hcmdpbik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaWRlID4gMCAmJiByZWN0LmJvdHRvbSA+IGJvdW5kaW5nLmJvdHRvbSArIG1vdmVZKVxuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZVkgPSByZWN0LmJvdHRvbSAtIGJvdW5kaW5nLmJvdHRvbSArIG1vdmVZICsgeU1hcmdpbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocmVjdC5ib3R0b20gPiBib3VuZGluZy5ib3R0b20pIHtcbiAgICAgICAgICAgICAgICAgICAgbW92ZVkgPSByZWN0LmJvdHRvbSAtIGJvdW5kaW5nLmJvdHRvbSArIHlNYXJnaW47XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaWRlIDwgMCAmJiAocmVjdC50b3AgLSBtb3ZlWSkgPCBib3VuZGluZy50b3ApXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3ZlWSA9IC0oYm91bmRpbmcudG9wICsgbW92ZVkgLSByZWN0LnRvcCArIHlNYXJnaW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCByZWN0SGVpZ2h0ID0gcmVjdC5ib3R0b20gLSByZWN0LnRvcCwgYm91bmRpbmdIZWlnaHQgPSBib3VuZGluZy5ib3R0b20gLSBib3VuZGluZy50b3A7XG4gICAgICAgICAgICAgICAgbGV0IHRhcmdldFRvcCA9IHkgPT0gXCJjZW50ZXJcIiAmJiByZWN0SGVpZ2h0IDw9IGJvdW5kaW5nSGVpZ2h0ID8gcmVjdC50b3AgKyByZWN0SGVpZ2h0IC8gMiAtIGJvdW5kaW5nSGVpZ2h0IC8gMiA6XG4gICAgICAgICAgICAgICAgICAgIHkgPT0gXCJzdGFydFwiIHx8IHkgPT0gXCJjZW50ZXJcIiAmJiBzaWRlIDwgMCA/IHJlY3QudG9wIC0geU1hcmdpbiA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZWN0LmJvdHRvbSAtIGJvdW5kaW5nSGVpZ2h0ICsgeU1hcmdpbjtcbiAgICAgICAgICAgICAgICBtb3ZlWSA9IHRhcmdldFRvcCAtIGJvdW5kaW5nLnRvcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh4ID09IFwibmVhcmVzdFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlY3QubGVmdCA8IGJvdW5kaW5nLmxlZnQpIHtcbiAgICAgICAgICAgICAgICAgICAgbW92ZVggPSAtKGJvdW5kaW5nLmxlZnQgLSByZWN0LmxlZnQgKyB4TWFyZ2luKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNpZGUgPiAwICYmIHJlY3QucmlnaHQgPiBib3VuZGluZy5yaWdodCArIG1vdmVYKVxuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZVggPSByZWN0LnJpZ2h0IC0gYm91bmRpbmcucmlnaHQgKyBtb3ZlWCArIHhNYXJnaW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlY3QucmlnaHQgPiBib3VuZGluZy5yaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBtb3ZlWCA9IHJlY3QucmlnaHQgLSBib3VuZGluZy5yaWdodCArIHhNYXJnaW47XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaWRlIDwgMCAmJiByZWN0LmxlZnQgPCBib3VuZGluZy5sZWZ0ICsgbW92ZVgpXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3ZlWCA9IC0oYm91bmRpbmcubGVmdCArIG1vdmVYIC0gcmVjdC5sZWZ0ICsgeE1hcmdpbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IHRhcmdldExlZnQgPSB4ID09IFwiY2VudGVyXCIgPyByZWN0LmxlZnQgKyAocmVjdC5yaWdodCAtIHJlY3QubGVmdCkgLyAyIC0gKGJvdW5kaW5nLnJpZ2h0IC0gYm91bmRpbmcubGVmdCkgLyAyIDpcbiAgICAgICAgICAgICAgICAgICAgKHggPT0gXCJzdGFydFwiKSA9PSBsdHIgPyByZWN0LmxlZnQgLSB4TWFyZ2luIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY3QucmlnaHQgLSAoYm91bmRpbmcucmlnaHQgLSBib3VuZGluZy5sZWZ0KSArIHhNYXJnaW47XG4gICAgICAgICAgICAgICAgbW92ZVggPSB0YXJnZXRMZWZ0IC0gYm91bmRpbmcubGVmdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtb3ZlWCB8fCBtb3ZlWSkge1xuICAgICAgICAgICAgICAgIGlmICh0b3ApIHtcbiAgICAgICAgICAgICAgICAgICAgd2luLnNjcm9sbEJ5KG1vdmVYLCBtb3ZlWSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbW92ZWRYID0gMCwgbW92ZWRZID0gMDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1vdmVZKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3RhcnQgPSBjdXIuc2Nyb2xsVG9wO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VyLnNjcm9sbFRvcCArPSBtb3ZlWSAvIHNjYWxlWTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdmVkWSA9IChjdXIuc2Nyb2xsVG9wIC0gc3RhcnQpICogc2NhbGVZO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChtb3ZlWCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0YXJ0ID0gY3VyLnNjcm9sbExlZnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXIuc2Nyb2xsTGVmdCArPSBtb3ZlWCAvIHNjYWxlWDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdmVkWCA9IChjdXIuc2Nyb2xsTGVmdCAtIHN0YXJ0KSAqIHNjYWxlWDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZWN0ID0geyBsZWZ0OiByZWN0LmxlZnQgLSBtb3ZlZFgsIHRvcDogcmVjdC50b3AgLSBtb3ZlZFksXG4gICAgICAgICAgICAgICAgICAgICAgICByaWdodDogcmVjdC5yaWdodCAtIG1vdmVkWCwgYm90dG9tOiByZWN0LmJvdHRvbSAtIG1vdmVkWSB9O1xuICAgICAgICAgICAgICAgICAgICBpZiAobW92ZWRYICYmIE1hdGguYWJzKG1vdmVkWCAtIG1vdmVYKSA8IDEpXG4gICAgICAgICAgICAgICAgICAgICAgICB4ID0gXCJuZWFyZXN0XCI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtb3ZlZFkgJiYgTWF0aC5hYnMobW92ZWRZIC0gbW92ZVkpIDwgMSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHkgPSBcIm5lYXJlc3RcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodG9wKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY3VyID0gY3VyLmFzc2lnbmVkU2xvdCB8fCBjdXIucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjdXIubm9kZVR5cGUgPT0gMTEpIHsgLy8gQSBzaGFkb3cgcm9vdFxuICAgICAgICAgICAgY3VyID0gY3VyLmhvc3Q7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHNjcm9sbGFibGVQYXJlbnQoZG9tKSB7XG4gICAgbGV0IGRvYyA9IGRvbS5vd25lckRvY3VtZW50O1xuICAgIGZvciAobGV0IGN1ciA9IGRvbS5wYXJlbnROb2RlOyBjdXI7KSB7XG4gICAgICAgIGlmIChjdXIgPT0gZG9jLmJvZHkpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGN1ci5ub2RlVHlwZSA9PSAxKSB7XG4gICAgICAgICAgICBpZiAoY3VyLnNjcm9sbEhlaWdodCA+IGN1ci5jbGllbnRIZWlnaHQgfHwgY3VyLnNjcm9sbFdpZHRoID4gY3VyLmNsaWVudFdpZHRoKVxuICAgICAgICAgICAgICAgIHJldHVybiBjdXI7XG4gICAgICAgICAgICBjdXIgPSBjdXIuYXNzaWduZWRTbG90IHx8IGN1ci5wYXJlbnROb2RlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGN1ci5ub2RlVHlwZSA9PSAxMSkge1xuICAgICAgICAgICAgY3VyID0gY3VyLmhvc3Q7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmNsYXNzIERPTVNlbGVjdGlvblN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5hbmNob3JOb2RlID0gbnVsbDtcbiAgICAgICAgdGhpcy5hbmNob3JPZmZzZXQgPSAwO1xuICAgICAgICB0aGlzLmZvY3VzTm9kZSA9IG51bGw7XG4gICAgICAgIHRoaXMuZm9jdXNPZmZzZXQgPSAwO1xuICAgIH1cbiAgICBlcShkb21TZWwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYW5jaG9yTm9kZSA9PSBkb21TZWwuYW5jaG9yTm9kZSAmJiB0aGlzLmFuY2hvck9mZnNldCA9PSBkb21TZWwuYW5jaG9yT2Zmc2V0ICYmXG4gICAgICAgICAgICB0aGlzLmZvY3VzTm9kZSA9PSBkb21TZWwuZm9jdXNOb2RlICYmIHRoaXMuZm9jdXNPZmZzZXQgPT0gZG9tU2VsLmZvY3VzT2Zmc2V0O1xuICAgIH1cbiAgICBzZXRSYW5nZShyYW5nZSkge1xuICAgICAgICBsZXQgeyBhbmNob3JOb2RlLCBmb2N1c05vZGUgfSA9IHJhbmdlO1xuICAgICAgICAvLyBDbGlwIG9mZnNldHMgdG8gbm9kZSBzaXplIHRvIGF2b2lkIGNyYXNoZXMgd2hlbiBTYWZhcmkgcmVwb3J0cyBib2d1cyBvZmZzZXRzICgjMTE1MilcbiAgICAgICAgdGhpcy5zZXQoYW5jaG9yTm9kZSwgTWF0aC5taW4ocmFuZ2UuYW5jaG9yT2Zmc2V0LCBhbmNob3JOb2RlID8gbWF4T2Zmc2V0KGFuY2hvck5vZGUpIDogMCksIGZvY3VzTm9kZSwgTWF0aC5taW4ocmFuZ2UuZm9jdXNPZmZzZXQsIGZvY3VzTm9kZSA/IG1heE9mZnNldChmb2N1c05vZGUpIDogMCkpO1xuICAgIH1cbiAgICBzZXQoYW5jaG9yTm9kZSwgYW5jaG9yT2Zmc2V0LCBmb2N1c05vZGUsIGZvY3VzT2Zmc2V0KSB7XG4gICAgICAgIHRoaXMuYW5jaG9yTm9kZSA9IGFuY2hvck5vZGU7XG4gICAgICAgIHRoaXMuYW5jaG9yT2Zmc2V0ID0gYW5jaG9yT2Zmc2V0O1xuICAgICAgICB0aGlzLmZvY3VzTm9kZSA9IGZvY3VzTm9kZTtcbiAgICAgICAgdGhpcy5mb2N1c09mZnNldCA9IGZvY3VzT2Zmc2V0O1xuICAgIH1cbn1cbmxldCBwcmV2ZW50U2Nyb2xsU3VwcG9ydGVkID0gbnVsbDtcbi8vIEZlYXR1cmUtZGV0ZWN0cyBzdXBwb3J0IGZvciAuZm9jdXMoe3ByZXZlbnRTY3JvbGw6IHRydWV9KSwgYW5kIHVzZXNcbi8vIGEgZmFsbGJhY2sga2x1ZGdlIHdoZW4gbm90IHN1cHBvcnRlZC5cbmZ1bmN0aW9uIGZvY3VzUHJldmVudFNjcm9sbChkb20pIHtcbiAgICBpZiAoZG9tLnNldEFjdGl2ZSlcbiAgICAgICAgcmV0dXJuIGRvbS5zZXRBY3RpdmUoKTsgLy8gaW4gSUVcbiAgICBpZiAocHJldmVudFNjcm9sbFN1cHBvcnRlZClcbiAgICAgICAgcmV0dXJuIGRvbS5mb2N1cyhwcmV2ZW50U2Nyb2xsU3VwcG9ydGVkKTtcbiAgICBsZXQgc3RhY2sgPSBbXTtcbiAgICBmb3IgKGxldCBjdXIgPSBkb207IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUpIHtcbiAgICAgICAgc3RhY2sucHVzaChjdXIsIGN1ci5zY3JvbGxUb3AsIGN1ci5zY3JvbGxMZWZ0KTtcbiAgICAgICAgaWYgKGN1ciA9PSBjdXIub3duZXJEb2N1bWVudClcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBkb20uZm9jdXMocHJldmVudFNjcm9sbFN1cHBvcnRlZCA9PSBudWxsID8ge1xuICAgICAgICBnZXQgcHJldmVudFNjcm9sbCgpIHtcbiAgICAgICAgICAgIHByZXZlbnRTY3JvbGxTdXBwb3J0ZWQgPSB7IHByZXZlbnRTY3JvbGw6IHRydWUgfTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfSA6IHVuZGVmaW5lZCk7XG4gICAgaWYgKCFwcmV2ZW50U2Nyb2xsU3VwcG9ydGVkKSB7XG4gICAgICAgIHByZXZlbnRTY3JvbGxTdXBwb3J0ZWQgPSBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGFjay5sZW5ndGg7KSB7XG4gICAgICAgICAgICBsZXQgZWx0ID0gc3RhY2tbaSsrXSwgdG9wID0gc3RhY2tbaSsrXSwgbGVmdCA9IHN0YWNrW2krK107XG4gICAgICAgICAgICBpZiAoZWx0LnNjcm9sbFRvcCAhPSB0b3ApXG4gICAgICAgICAgICAgICAgZWx0LnNjcm9sbFRvcCA9IHRvcDtcbiAgICAgICAgICAgIGlmIChlbHQuc2Nyb2xsTGVmdCAhPSBsZWZ0KVxuICAgICAgICAgICAgICAgIGVsdC5zY3JvbGxMZWZ0ID0gbGVmdDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmxldCBzY3JhdGNoUmFuZ2U7XG5mdW5jdGlvbiB0ZXh0UmFuZ2Uobm9kZSwgZnJvbSwgdG8gPSBmcm9tKSB7XG4gICAgbGV0IHJhbmdlID0gc2NyYXRjaFJhbmdlIHx8IChzY3JhdGNoUmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpKTtcbiAgICByYW5nZS5zZXRFbmQobm9kZSwgdG8pO1xuICAgIHJhbmdlLnNldFN0YXJ0KG5vZGUsIGZyb20pO1xuICAgIHJldHVybiByYW5nZTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoS2V5KGVsdCwgbmFtZSwgY29kZSwgbW9kcykge1xuICAgIGxldCBvcHRpb25zID0geyBrZXk6IG5hbWUsIGNvZGU6IG5hbWUsIGtleUNvZGU6IGNvZGUsIHdoaWNoOiBjb2RlLCBjYW5jZWxhYmxlOiB0cnVlIH07XG4gICAgaWYgKG1vZHMpXG4gICAgICAgICh7IGFsdEtleTogb3B0aW9ucy5hbHRLZXksIGN0cmxLZXk6IG9wdGlvbnMuY3RybEtleSwgc2hpZnRLZXk6IG9wdGlvbnMuc2hpZnRLZXksIG1ldGFLZXk6IG9wdGlvbnMubWV0YUtleSB9ID0gbW9kcyk7XG4gICAgbGV0IGRvd24gPSBuZXcgS2V5Ym9hcmRFdmVudChcImtleWRvd25cIiwgb3B0aW9ucyk7XG4gICAgZG93bi5zeW50aGV0aWMgPSB0cnVlO1xuICAgIGVsdC5kaXNwYXRjaEV2ZW50KGRvd24pO1xuICAgIGxldCB1cCA9IG5ldyBLZXlib2FyZEV2ZW50KFwia2V5dXBcIiwgb3B0aW9ucyk7XG4gICAgdXAuc3ludGhldGljID0gdHJ1ZTtcbiAgICBlbHQuZGlzcGF0Y2hFdmVudCh1cCk7XG4gICAgcmV0dXJuIGRvd24uZGVmYXVsdFByZXZlbnRlZCB8fCB1cC5kZWZhdWx0UHJldmVudGVkO1xufVxuZnVuY3Rpb24gZ2V0Um9vdChub2RlKSB7XG4gICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUgJiYgKG5vZGUubm9kZVR5cGUgPT0gOSB8fCBub2RlLm5vZGVUeXBlID09IDExICYmIG5vZGUuaG9zdCkpXG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgbm9kZSA9IG5vZGUuYXNzaWduZWRTbG90IHx8IG5vZGUucGFyZW50Tm9kZTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBjbGVhckF0dHJpYnV0ZXMobm9kZSkge1xuICAgIHdoaWxlIChub2RlLmF0dHJpYnV0ZXMubGVuZ3RoKVxuICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZU5vZGUobm9kZS5hdHRyaWJ1dGVzWzBdKTtcbn1cbmZ1bmN0aW9uIGF0RWxlbWVudFN0YXJ0KGRvYywgc2VsZWN0aW9uKSB7XG4gICAgbGV0IG5vZGUgPSBzZWxlY3Rpb24uZm9jdXNOb2RlLCBvZmZzZXQgPSBzZWxlY3Rpb24uZm9jdXNPZmZzZXQ7XG4gICAgaWYgKCFub2RlIHx8IHNlbGVjdGlvbi5hbmNob3JOb2RlICE9IG5vZGUgfHwgc2VsZWN0aW9uLmFuY2hvck9mZnNldCAhPSBvZmZzZXQpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAvLyBTYWZhcmkgY2FuIHJlcG9ydCBib2d1cyBvZmZzZXRzICgjMTE1MilcbiAgICBvZmZzZXQgPSBNYXRoLm1pbihvZmZzZXQsIG1heE9mZnNldChub2RlKSk7XG4gICAgZm9yICg7Oykge1xuICAgICAgICBpZiAob2Zmc2V0KSB7XG4gICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSAhPSAxKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGxldCBwcmV2ID0gbm9kZS5jaGlsZE5vZGVzW29mZnNldCAtIDFdO1xuICAgICAgICAgICAgaWYgKHByZXYuY29udGVudEVkaXRhYmxlID09IFwiZmFsc2VcIilcbiAgICAgICAgICAgICAgICBvZmZzZXQtLTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG5vZGUgPSBwcmV2O1xuICAgICAgICAgICAgICAgIG9mZnNldCA9IG1heE9mZnNldChub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChub2RlID09IGRvYykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvZmZzZXQgPSBkb21JbmRleChub2RlKTtcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBpc1Njcm9sbGVkVG9Cb3R0b20oZWx0KSB7XG4gICAgcmV0dXJuIGVsdC5zY3JvbGxUb3AgPiBNYXRoLm1heCgxLCBlbHQuc2Nyb2xsSGVpZ2h0IC0gZWx0LmNsaWVudEhlaWdodCAtIDQpO1xufVxuZnVuY3Rpb24gdGV4dE5vZGVCZWZvcmUoc3RhcnROb2RlLCBzdGFydE9mZnNldCkge1xuICAgIGZvciAobGV0IG5vZGUgPSBzdGFydE5vZGUsIG9mZnNldCA9IHN0YXJ0T2Zmc2V0OzspIHtcbiAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMyAmJiBvZmZzZXQgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4geyBub2RlOiBub2RlLCBvZmZzZXQ6IG9mZnNldCB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5vZGUubm9kZVR5cGUgPT0gMSAmJiBvZmZzZXQgPiAwKSB7XG4gICAgICAgICAgICBpZiAobm9kZS5jb250ZW50RWRpdGFibGUgPT0gXCJmYWxzZVwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgbm9kZSA9IG5vZGUuY2hpbGROb2Rlc1tvZmZzZXQgLSAxXTtcbiAgICAgICAgICAgIG9mZnNldCA9IG1heE9mZnNldChub2RlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChub2RlLnBhcmVudE5vZGUgJiYgIWlzQmxvY2tFbGVtZW50KG5vZGUpKSB7XG4gICAgICAgICAgICBvZmZzZXQgPSBkb21JbmRleChub2RlKTtcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHRleHROb2RlQWZ0ZXIoc3RhcnROb2RlLCBzdGFydE9mZnNldCkge1xuICAgIGZvciAobGV0IG5vZGUgPSBzdGFydE5vZGUsIG9mZnNldCA9IHN0YXJ0T2Zmc2V0OzspIHtcbiAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMyAmJiBvZmZzZXQgPCBub2RlLm5vZGVWYWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB7IG5vZGU6IG5vZGUsIG9mZnNldDogb2Zmc2V0IH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobm9kZS5ub2RlVHlwZSA9PSAxICYmIG9mZnNldCA8IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChub2RlLmNvbnRlbnRFZGl0YWJsZSA9PSBcImZhbHNlXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBub2RlID0gbm9kZS5jaGlsZE5vZGVzW29mZnNldF07XG4gICAgICAgICAgICBvZmZzZXQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5vZGUucGFyZW50Tm9kZSAmJiAhaXNCbG9ja0VsZW1lbnQobm9kZSkpIHtcbiAgICAgICAgICAgIG9mZnNldCA9IGRvbUluZGV4KG5vZGUpICsgMTtcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuY2xhc3MgRE9NUG9zIHtcbiAgICBjb25zdHJ1Y3Rvcihub2RlLCBvZmZzZXQsIHByZWNpc2UgPSB0cnVlKSB7XG4gICAgICAgIHRoaXMubm9kZSA9IG5vZGU7XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgICB0aGlzLnByZWNpc2UgPSBwcmVjaXNlO1xuICAgIH1cbiAgICBzdGF0aWMgYmVmb3JlKGRvbSwgcHJlY2lzZSkgeyByZXR1cm4gbmV3IERPTVBvcyhkb20ucGFyZW50Tm9kZSwgZG9tSW5kZXgoZG9tKSwgcHJlY2lzZSk7IH1cbiAgICBzdGF0aWMgYWZ0ZXIoZG9tLCBwcmVjaXNlKSB7IHJldHVybiBuZXcgRE9NUG9zKGRvbS5wYXJlbnROb2RlLCBkb21JbmRleChkb20pICsgMSwgcHJlY2lzZSk7IH1cbn1cbmNvbnN0IG5vQ2hpbGRyZW4gPSBbXTtcbmNsYXNzIENvbnRlbnRWaWV3IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICAgICAgICB0aGlzLmRvbSA9IG51bGw7XG4gICAgICAgIHRoaXMuZmxhZ3MgPSAyIC8qIFZpZXdGbGFnLk5vZGVEaXJ0eSAqLztcbiAgICB9XG4gICAgZ2V0IG92ZXJyaWRlRE9NVGV4dCgpIHsgcmV0dXJuIG51bGw7IH1cbiAgICBnZXQgcG9zQXRTdGFydCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50ID8gdGhpcy5wYXJlbnQucG9zQmVmb3JlKHRoaXMpIDogMDtcbiAgICB9XG4gICAgZ2V0IHBvc0F0RW5kKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wb3NBdFN0YXJ0ICsgdGhpcy5sZW5ndGg7XG4gICAgfVxuICAgIHBvc0JlZm9yZSh2aWV3KSB7XG4gICAgICAgIGxldCBwb3MgPSB0aGlzLnBvc0F0U3RhcnQ7XG4gICAgICAgIGZvciAobGV0IGNoaWxkIG9mIHRoaXMuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGlmIChjaGlsZCA9PSB2aWV3KVxuICAgICAgICAgICAgICAgIHJldHVybiBwb3M7XG4gICAgICAgICAgICBwb3MgKz0gY2hpbGQubGVuZ3RoICsgY2hpbGQuYnJlYWtBZnRlcjtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludmFsaWQgY2hpbGQgaW4gcG9zQmVmb3JlXCIpO1xuICAgIH1cbiAgICBwb3NBZnRlcih2aWV3KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvc0JlZm9yZSh2aWV3KSArIHZpZXcubGVuZ3RoO1xuICAgIH1cbiAgICBzeW5jKHZpZXcsIHRyYWNrKSB7XG4gICAgICAgIGlmICh0aGlzLmZsYWdzICYgMiAvKiBWaWV3RmxhZy5Ob2RlRGlydHkgKi8pIHtcbiAgICAgICAgICAgIGxldCBwYXJlbnQgPSB0aGlzLmRvbTtcbiAgICAgICAgICAgIGxldCBwcmV2ID0gbnVsbCwgbmV4dDtcbiAgICAgICAgICAgIGZvciAobGV0IGNoaWxkIG9mIHRoaXMuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQuZmxhZ3MgJiA3IC8qIFZpZXdGbGFnLkRpcnR5ICovKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY2hpbGQuZG9tICYmIChuZXh0ID0gcHJldiA/IHByZXYubmV4dFNpYmxpbmcgOiBwYXJlbnQuZmlyc3RDaGlsZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb250ZW50VmlldyA9IENvbnRlbnRWaWV3LmdldChuZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY29udGVudFZpZXcgfHwgIWNvbnRlbnRWaWV3LnBhcmVudCAmJiBjb250ZW50Vmlldy5jYW5SZXVzZURPTShjaGlsZCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQucmV1c2VET00obmV4dCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2hpbGQuc3luYyh2aWV3LCB0cmFjayk7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkLmZsYWdzICY9IH43IC8qIFZpZXdGbGFnLkRpcnR5ICovO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuZXh0ID0gcHJldiA/IHByZXYubmV4dFNpYmxpbmcgOiBwYXJlbnQuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgICAgICBpZiAodHJhY2sgJiYgIXRyYWNrLndyaXR0ZW4gJiYgdHJhY2subm9kZSA9PSBwYXJlbnQgJiYgbmV4dCAhPSBjaGlsZC5kb20pXG4gICAgICAgICAgICAgICAgICAgIHRyYWNrLndyaXR0ZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChjaGlsZC5kb20ucGFyZW50Tm9kZSA9PSBwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG5leHQgJiYgbmV4dCAhPSBjaGlsZC5kb20pXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0ID0gcm0kMShuZXh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQuZG9tLCBuZXh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcHJldiA9IGNoaWxkLmRvbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5leHQgPSBwcmV2ID8gcHJldi5uZXh0U2libGluZyA6IHBhcmVudC5maXJzdENoaWxkO1xuICAgICAgICAgICAgaWYgKG5leHQgJiYgdHJhY2sgJiYgdHJhY2subm9kZSA9PSBwYXJlbnQpXG4gICAgICAgICAgICAgICAgdHJhY2sud3JpdHRlbiA9IHRydWU7XG4gICAgICAgICAgICB3aGlsZSAobmV4dClcbiAgICAgICAgICAgICAgICBuZXh0ID0gcm0kMShuZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmZsYWdzICYgMSAvKiBWaWV3RmxhZy5DaGlsZERpcnR5ICovKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBjaGlsZCBvZiB0aGlzLmNoaWxkcmVuKVxuICAgICAgICAgICAgICAgIGlmIChjaGlsZC5mbGFncyAmIDcgLyogVmlld0ZsYWcuRGlydHkgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQuc3luYyh2aWV3LCB0cmFjayk7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkLmZsYWdzICY9IH43IC8qIFZpZXdGbGFnLkRpcnR5ICovO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXVzZURPTShfZG9tKSB7IH1cbiAgICBsb2NhbFBvc0Zyb21ET00obm9kZSwgb2Zmc2V0KSB7XG4gICAgICAgIGxldCBhZnRlcjtcbiAgICAgICAgaWYgKG5vZGUgPT0gdGhpcy5kb20pIHtcbiAgICAgICAgICAgIGFmdGVyID0gdGhpcy5kb20uY2hpbGROb2Rlc1tvZmZzZXRdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGV0IGJpYXMgPSBtYXhPZmZzZXQobm9kZSkgPT0gMCA/IDAgOiBvZmZzZXQgPT0gMCA/IC0xIDogMTtcbiAgICAgICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgICAgICBsZXQgcGFyZW50ID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgIGlmIChwYXJlbnQgPT0gdGhpcy5kb20pXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGlmIChiaWFzID09IDAgJiYgcGFyZW50LmZpcnN0Q2hpbGQgIT0gcGFyZW50Lmxhc3RDaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZSA9PSBwYXJlbnQuZmlyc3RDaGlsZClcbiAgICAgICAgICAgICAgICAgICAgICAgIGJpYXMgPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgYmlhcyA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5vZGUgPSBwYXJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYmlhcyA8IDApXG4gICAgICAgICAgICAgICAgYWZ0ZXIgPSBub2RlO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGFmdGVyID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWZ0ZXIgPT0gdGhpcy5kb20uZmlyc3RDaGlsZClcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB3aGlsZSAoYWZ0ZXIgJiYgIUNvbnRlbnRWaWV3LmdldChhZnRlcikpXG4gICAgICAgICAgICBhZnRlciA9IGFmdGVyLm5leHRTaWJsaW5nO1xuICAgICAgICBpZiAoIWFmdGVyKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgcG9zID0gMDs7IGkrKykge1xuICAgICAgICAgICAgbGV0IGNoaWxkID0gdGhpcy5jaGlsZHJlbltpXTtcbiAgICAgICAgICAgIGlmIChjaGlsZC5kb20gPT0gYWZ0ZXIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBvcztcbiAgICAgICAgICAgIHBvcyArPSBjaGlsZC5sZW5ndGggKyBjaGlsZC5icmVha0FmdGVyO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRvbUJvdW5kc0Fyb3VuZChmcm9tLCB0bywgb2Zmc2V0ID0gMCkge1xuICAgICAgICBsZXQgZnJvbUkgPSAtMSwgZnJvbVN0YXJ0ID0gLTEsIHRvSSA9IC0xLCB0b0VuZCA9IC0xO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgcG9zID0gb2Zmc2V0LCBwcmV2RW5kID0gb2Zmc2V0OyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGNoaWxkID0gdGhpcy5jaGlsZHJlbltpXSwgZW5kID0gcG9zICsgY2hpbGQubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKHBvcyA8IGZyb20gJiYgZW5kID4gdG8pXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkLmRvbUJvdW5kc0Fyb3VuZChmcm9tLCB0bywgcG9zKTtcbiAgICAgICAgICAgIGlmIChlbmQgPj0gZnJvbSAmJiBmcm9tSSA9PSAtMSkge1xuICAgICAgICAgICAgICAgIGZyb21JID0gaTtcbiAgICAgICAgICAgICAgICBmcm9tU3RhcnQgPSBwb3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocG9zID4gdG8gJiYgY2hpbGQuZG9tLnBhcmVudE5vZGUgPT0gdGhpcy5kb20pIHtcbiAgICAgICAgICAgICAgICB0b0kgPSBpO1xuICAgICAgICAgICAgICAgIHRvRW5kID0gcHJldkVuZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZXZFbmQgPSBlbmQ7XG4gICAgICAgICAgICBwb3MgPSBlbmQgKyBjaGlsZC5icmVha0FmdGVyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGZyb206IGZyb21TdGFydCwgdG86IHRvRW5kIDwgMCA/IG9mZnNldCArIHRoaXMubGVuZ3RoIDogdG9FbmQsXG4gICAgICAgICAgICBzdGFydERPTTogKGZyb21JID8gdGhpcy5jaGlsZHJlbltmcm9tSSAtIDFdLmRvbS5uZXh0U2libGluZyA6IG51bGwpIHx8IHRoaXMuZG9tLmZpcnN0Q2hpbGQsXG4gICAgICAgICAgICBlbmRET006IHRvSSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoICYmIHRvSSA+PSAwID8gdGhpcy5jaGlsZHJlblt0b0ldLmRvbSA6IG51bGwgfTtcbiAgICB9XG4gICAgbWFya0RpcnR5KGFuZFBhcmVudCA9IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuZmxhZ3MgfD0gMiAvKiBWaWV3RmxhZy5Ob2RlRGlydHkgKi87XG4gICAgICAgIHRoaXMubWFya1BhcmVudHNEaXJ0eShhbmRQYXJlbnQpO1xuICAgIH1cbiAgICBtYXJrUGFyZW50c0RpcnR5KGNoaWxkTGlzdCkge1xuICAgICAgICBmb3IgKGxldCBwYXJlbnQgPSB0aGlzLnBhcmVudDsgcGFyZW50OyBwYXJlbnQgPSBwYXJlbnQucGFyZW50KSB7XG4gICAgICAgICAgICBpZiAoY2hpbGRMaXN0KVxuICAgICAgICAgICAgICAgIHBhcmVudC5mbGFncyB8PSAyIC8qIFZpZXdGbGFnLk5vZGVEaXJ0eSAqLztcbiAgICAgICAgICAgIGlmIChwYXJlbnQuZmxhZ3MgJiAxIC8qIFZpZXdGbGFnLkNoaWxkRGlydHkgKi8pXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgcGFyZW50LmZsYWdzIHw9IDEgLyogVmlld0ZsYWcuQ2hpbGREaXJ0eSAqLztcbiAgICAgICAgICAgIGNoaWxkTGlzdCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldFBhcmVudChwYXJlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50ICE9IHBhcmVudCkge1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgICAgICBpZiAodGhpcy5mbGFncyAmIDcgLyogVmlld0ZsYWcuRGlydHkgKi8pXG4gICAgICAgICAgICAgICAgdGhpcy5tYXJrUGFyZW50c0RpcnR5KHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldERPTShkb20pIHtcbiAgICAgICAgaWYgKHRoaXMuZG9tID09IGRvbSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKHRoaXMuZG9tKVxuICAgICAgICAgICAgdGhpcy5kb20uY21WaWV3ID0gbnVsbDtcbiAgICAgICAgdGhpcy5kb20gPSBkb207XG4gICAgICAgIGRvbS5jbVZpZXcgPSB0aGlzO1xuICAgIH1cbiAgICBnZXQgcm9vdFZpZXcoKSB7XG4gICAgICAgIGZvciAobGV0IHYgPSB0aGlzOzspIHtcbiAgICAgICAgICAgIGxldCBwYXJlbnQgPSB2LnBhcmVudDtcbiAgICAgICAgICAgIGlmICghcGFyZW50KVxuICAgICAgICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICAgICAgdiA9IHBhcmVudDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXBsYWNlQ2hpbGRyZW4oZnJvbSwgdG8sIGNoaWxkcmVuID0gbm9DaGlsZHJlbikge1xuICAgICAgICB0aGlzLm1hcmtEaXJ0eSgpO1xuICAgICAgICBmb3IgKGxldCBpID0gZnJvbTsgaSA8IHRvOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBjaGlsZCA9IHRoaXMuY2hpbGRyZW5baV07XG4gICAgICAgICAgICBpZiAoY2hpbGQucGFyZW50ID09IHRoaXMgJiYgY2hpbGRyZW4uaW5kZXhPZihjaGlsZCkgPCAwKVxuICAgICAgICAgICAgICAgIGNoaWxkLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNoaWxkcmVuLnNwbGljZShmcm9tLCB0byAtIGZyb20sIC4uLmNoaWxkcmVuKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGNoaWxkcmVuW2ldLnNldFBhcmVudCh0aGlzKTtcbiAgICB9XG4gICAgaWdub3JlTXV0YXRpb24oX3JlYykgeyByZXR1cm4gZmFsc2U7IH1cbiAgICBpZ25vcmVFdmVudChfZXZlbnQpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgY2hpbGRDdXJzb3IocG9zID0gdGhpcy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDaGlsZEN1cnNvcih0aGlzLmNoaWxkcmVuLCBwb3MsIHRoaXMuY2hpbGRyZW4ubGVuZ3RoKTtcbiAgICB9XG4gICAgY2hpbGRQb3MocG9zLCBiaWFzID0gMSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZEN1cnNvcigpLmZpbmRQb3MocG9zLCBiaWFzKTtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIGxldCBuYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lLnJlcGxhY2UoXCJWaWV3XCIsIFwiXCIpO1xuICAgICAgICByZXR1cm4gbmFtZSArICh0aGlzLmNoaWxkcmVuLmxlbmd0aCA/IFwiKFwiICsgdGhpcy5jaGlsZHJlbi5qb2luKCkgKyBcIilcIiA6XG4gICAgICAgICAgICB0aGlzLmxlbmd0aCA/IFwiW1wiICsgKG5hbWUgPT0gXCJUZXh0XCIgPyB0aGlzLnRleHQgOiB0aGlzLmxlbmd0aCkgKyBcIl1cIiA6IFwiXCIpICtcbiAgICAgICAgICAgICh0aGlzLmJyZWFrQWZ0ZXIgPyBcIiNcIiA6IFwiXCIpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0KG5vZGUpIHsgcmV0dXJuIG5vZGUuY21WaWV3OyB9XG4gICAgZ2V0IGlzRWRpdGFibGUoKSB7IHJldHVybiB0cnVlOyB9XG4gICAgZ2V0IGlzV2lkZ2V0KCkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICBnZXQgaXNIaWRkZW4oKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIG1lcmdlKGZyb20sIHRvLCBzb3VyY2UsIGhhc1N0YXJ0LCBvcGVuU3RhcnQsIG9wZW5FbmQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBiZWNvbWUob3RoZXIpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgY2FuUmV1c2VET00ob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIG90aGVyLmNvbnN0cnVjdG9yID09IHRoaXMuY29uc3RydWN0b3IgJiYgISgodGhpcy5mbGFncyB8IG90aGVyLmZsYWdzKSAmIDggLyogVmlld0ZsYWcuQ29tcG9zaXRpb24gKi8pO1xuICAgIH1cbiAgICAvLyBXaGVuIHRoaXMgaXMgYSB6ZXJvLWxlbmd0aCB2aWV3IHdpdGggYSBzaWRlLCB0aGlzIHNob3VsZCByZXR1cm4gYVxuICAgIC8vIG51bWJlciA8PSAwIHRvIGluZGljYXRlIGl0IGlzIGJlZm9yZSBpdHMgcG9zaXRpb24sIG9yIGFcbiAgICAvLyBudW1iZXIgPiAwIHdoZW4gYWZ0ZXIgaXRzIHBvc2l0aW9uLlxuICAgIGdldFNpZGUoKSB7IHJldHVybiAwOyB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgZm9yIChsZXQgY2hpbGQgb2YgdGhpcy5jaGlsZHJlbilcbiAgICAgICAgICAgIGlmIChjaGlsZC5wYXJlbnQgPT0gdGhpcylcbiAgICAgICAgICAgICAgICBjaGlsZC5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgICB9XG59XG5Db250ZW50Vmlldy5wcm90b3R5cGUuYnJlYWtBZnRlciA9IDA7XG4vLyBSZW1vdmUgYSBET00gbm9kZSBhbmQgcmV0dXJuIGl0cyBuZXh0IHNpYmxpbmcuXG5mdW5jdGlvbiBybSQxKGRvbSkge1xuICAgIGxldCBuZXh0ID0gZG9tLm5leHRTaWJsaW5nO1xuICAgIGRvbS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGRvbSk7XG4gICAgcmV0dXJuIG5leHQ7XG59XG5jbGFzcyBDaGlsZEN1cnNvciB7XG4gICAgY29uc3RydWN0b3IoY2hpbGRyZW4sIHBvcywgaSkge1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgICAgIHRoaXMucG9zID0gcG9zO1xuICAgICAgICB0aGlzLmkgPSBpO1xuICAgICAgICB0aGlzLm9mZiA9IDA7XG4gICAgfVxuICAgIGZpbmRQb3MocG9zLCBiaWFzID0gMSkge1xuICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICBpZiAocG9zID4gdGhpcy5wb3MgfHwgcG9zID09IHRoaXMucG9zICYmXG4gICAgICAgICAgICAgICAgKGJpYXMgPiAwIHx8IHRoaXMuaSA9PSAwIHx8IHRoaXMuY2hpbGRyZW5bdGhpcy5pIC0gMV0uYnJlYWtBZnRlcikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9mZiA9IHBvcyAtIHRoaXMucG9zO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IG5leHQgPSB0aGlzLmNoaWxkcmVuWy0tdGhpcy5pXTtcbiAgICAgICAgICAgIHRoaXMucG9zIC09IG5leHQubGVuZ3RoICsgbmV4dC5icmVha0FmdGVyO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gcmVwbGFjZVJhbmdlKHBhcmVudCwgZnJvbUksIGZyb21PZmYsIHRvSSwgdG9PZmYsIGluc2VydCwgYnJlYWtBdFN0YXJ0LCBvcGVuU3RhcnQsIG9wZW5FbmQpIHtcbiAgICBsZXQgeyBjaGlsZHJlbiB9ID0gcGFyZW50O1xuICAgIGxldCBiZWZvcmUgPSBjaGlsZHJlbi5sZW5ndGggPyBjaGlsZHJlbltmcm9tSV0gOiBudWxsO1xuICAgIGxldCBsYXN0ID0gaW5zZXJ0Lmxlbmd0aCA/IGluc2VydFtpbnNlcnQubGVuZ3RoIC0gMV0gOiBudWxsO1xuICAgIGxldCBicmVha0F0RW5kID0gbGFzdCA/IGxhc3QuYnJlYWtBZnRlciA6IGJyZWFrQXRTdGFydDtcbiAgICAvLyBDaGFuZ2Ugd2l0aGluIGEgc2luZ2xlIGNoaWxkXG4gICAgaWYgKGZyb21JID09IHRvSSAmJiBiZWZvcmUgJiYgIWJyZWFrQXRTdGFydCAmJiAhYnJlYWtBdEVuZCAmJiBpbnNlcnQubGVuZ3RoIDwgMiAmJlxuICAgICAgICBiZWZvcmUubWVyZ2UoZnJvbU9mZiwgdG9PZmYsIGluc2VydC5sZW5ndGggPyBsYXN0IDogbnVsbCwgZnJvbU9mZiA9PSAwLCBvcGVuU3RhcnQsIG9wZW5FbmQpKVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKHRvSSA8IGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICBsZXQgYWZ0ZXIgPSBjaGlsZHJlblt0b0ldO1xuICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIGVuZCBvZiB0aGUgY2hpbGQgYWZ0ZXIgdGhlIHVwZGF0ZSBpcyBwcmVzZXJ2ZWQgaW4gYGFmdGVyYFxuICAgICAgICBpZiAoYWZ0ZXIgJiYgKHRvT2ZmIDwgYWZ0ZXIubGVuZ3RoIHx8IGFmdGVyLmJyZWFrQWZ0ZXIgJiYgKGxhc3QgPT09IG51bGwgfHwgbGFzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogbGFzdC5icmVha0FmdGVyKSkpIHtcbiAgICAgICAgICAgIC8vIElmIHdlJ3JlIHNwbGl0dGluZyBhIGNoaWxkLCBzZXBhcmF0ZSBwYXJ0IG9mIGl0IHRvIGF2b2lkIHRoYXRcbiAgICAgICAgICAgIC8vIGJlaW5nIG1hbmdsZWQgd2hlbiB1cGRhdGluZyB0aGUgY2hpbGQgYmVmb3JlIHRoZSB1cGRhdGUuXG4gICAgICAgICAgICBpZiAoZnJvbUkgPT0gdG9JKSB7XG4gICAgICAgICAgICAgICAgYWZ0ZXIgPSBhZnRlci5zcGxpdCh0b09mZik7XG4gICAgICAgICAgICAgICAgdG9PZmYgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgdGhlIGVsZW1lbnQgYWZ0ZXIgdGhlIHJlcGxhY2VtZW50IHNob3VsZCBiZSBtZXJnZWQgd2l0aFxuICAgICAgICAgICAgLy8gdGhlIGxhc3QgcmVwbGFjaW5nIGVsZW1lbnQsIHVwZGF0ZSBgY29udGVudGBcbiAgICAgICAgICAgIGlmICghYnJlYWtBdEVuZCAmJiBsYXN0ICYmIGFmdGVyLm1lcmdlKDAsIHRvT2ZmLCBsYXN0LCB0cnVlLCAwLCBvcGVuRW5kKSkge1xuICAgICAgICAgICAgICAgIGluc2VydFtpbnNlcnQubGVuZ3RoIC0gMV0gPSBhZnRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgc3RhcnQgb2YgdGhlIGFmdGVyIGVsZW1lbnQsIGlmIG5lY2Vzc2FyeSwgYW5kXG4gICAgICAgICAgICAgICAgLy8gYWRkIGl0IHRvIGBjb250ZW50YC5cbiAgICAgICAgICAgICAgICBpZiAodG9PZmYgfHwgYWZ0ZXIuY2hpbGRyZW4ubGVuZ3RoICYmICFhZnRlci5jaGlsZHJlblswXS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIGFmdGVyLm1lcmdlKDAsIHRvT2ZmLCBudWxsLCBmYWxzZSwgMCwgb3BlbkVuZCk7XG4gICAgICAgICAgICAgICAgaW5zZXJ0LnB1c2goYWZ0ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGFmdGVyID09PSBudWxsIHx8IGFmdGVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhZnRlci5icmVha0FmdGVyKSB7XG4gICAgICAgICAgICAvLyBUaGUgZWxlbWVudCBhdCBgdG9JYCBpcyBlbnRpcmVseSBjb3ZlcmVkIGJ5IHRoaXMgcmFuZ2UuXG4gICAgICAgICAgICAvLyBQcmVzZXJ2ZSBpdHMgbGluZSBicmVhaywgaWYgYW55LlxuICAgICAgICAgICAgaWYgKGxhc3QpXG4gICAgICAgICAgICAgICAgbGFzdC5icmVha0FmdGVyID0gMTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBicmVha0F0U3RhcnQgPSAxO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNpbmNlIHdlJ3ZlIGhhbmRsZWQgdGhlIG5leHQgZWxlbWVudCBmcm9tIHRoZSBjdXJyZW50IGVsZW1lbnRzXG4gICAgICAgIC8vIG5vdywgbWFrZSBzdXJlIGB0b0lgIHBvaW50cyBhZnRlciB0aGF0LlxuICAgICAgICB0b0krKztcbiAgICB9XG4gICAgaWYgKGJlZm9yZSkge1xuICAgICAgICBiZWZvcmUuYnJlYWtBZnRlciA9IGJyZWFrQXRTdGFydDtcbiAgICAgICAgaWYgKGZyb21PZmYgPiAwKSB7XG4gICAgICAgICAgICBpZiAoIWJyZWFrQXRTdGFydCAmJiBpbnNlcnQubGVuZ3RoICYmIGJlZm9yZS5tZXJnZShmcm9tT2ZmLCBiZWZvcmUubGVuZ3RoLCBpbnNlcnRbMF0sIGZhbHNlLCBvcGVuU3RhcnQsIDApKSB7XG4gICAgICAgICAgICAgICAgYmVmb3JlLmJyZWFrQWZ0ZXIgPSBpbnNlcnQuc2hpZnQoKS5icmVha0FmdGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZnJvbU9mZiA8IGJlZm9yZS5sZW5ndGggfHwgYmVmb3JlLmNoaWxkcmVuLmxlbmd0aCAmJiBiZWZvcmUuY2hpbGRyZW5bYmVmb3JlLmNoaWxkcmVuLmxlbmd0aCAtIDFdLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgYmVmb3JlLm1lcmdlKGZyb21PZmYsIGJlZm9yZS5sZW5ndGgsIG51bGwsIGZhbHNlLCBvcGVuU3RhcnQsIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnJvbUkrKztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBUcnkgdG8gbWVyZ2Ugd2lkZ2V0cyBvbiB0aGUgYm91bmRhcmllcyBvZiB0aGUgcmVwbGFjZW1lbnRcbiAgICB3aGlsZSAoZnJvbUkgPCB0b0kgJiYgaW5zZXJ0Lmxlbmd0aCkge1xuICAgICAgICBpZiAoY2hpbGRyZW5bdG9JIC0gMV0uYmVjb21lKGluc2VydFtpbnNlcnQubGVuZ3RoIC0gMV0pKSB7XG4gICAgICAgICAgICB0b0ktLTtcbiAgICAgICAgICAgIGluc2VydC5wb3AoKTtcbiAgICAgICAgICAgIG9wZW5FbmQgPSBpbnNlcnQubGVuZ3RoID8gMCA6IG9wZW5TdGFydDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjaGlsZHJlbltmcm9tSV0uYmVjb21lKGluc2VydFswXSkpIHtcbiAgICAgICAgICAgIGZyb21JKys7XG4gICAgICAgICAgICBpbnNlcnQuc2hpZnQoKTtcbiAgICAgICAgICAgIG9wZW5TdGFydCA9IGluc2VydC5sZW5ndGggPyAwIDogb3BlbkVuZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghaW5zZXJ0Lmxlbmd0aCAmJiBmcm9tSSAmJiB0b0kgPCBjaGlsZHJlbi5sZW5ndGggJiYgIWNoaWxkcmVuW2Zyb21JIC0gMV0uYnJlYWtBZnRlciAmJlxuICAgICAgICBjaGlsZHJlblt0b0ldLm1lcmdlKDAsIDAsIGNoaWxkcmVuW2Zyb21JIC0gMV0sIGZhbHNlLCBvcGVuU3RhcnQsIG9wZW5FbmQpKVxuICAgICAgICBmcm9tSS0tO1xuICAgIGlmIChmcm9tSSA8IHRvSSB8fCBpbnNlcnQubGVuZ3RoKVxuICAgICAgICBwYXJlbnQucmVwbGFjZUNoaWxkcmVuKGZyb21JLCB0b0ksIGluc2VydCk7XG59XG5mdW5jdGlvbiBtZXJnZUNoaWxkcmVuSW50byhwYXJlbnQsIGZyb20sIHRvLCBpbnNlcnQsIG9wZW5TdGFydCwgb3BlbkVuZCkge1xuICAgIGxldCBjdXIgPSBwYXJlbnQuY2hpbGRDdXJzb3IoKTtcbiAgICBsZXQgeyBpOiB0b0ksIG9mZjogdG9PZmYgfSA9IGN1ci5maW5kUG9zKHRvLCAxKTtcbiAgICBsZXQgeyBpOiBmcm9tSSwgb2ZmOiBmcm9tT2ZmIH0gPSBjdXIuZmluZFBvcyhmcm9tLCAtMSk7XG4gICAgbGV0IGRMZW4gPSBmcm9tIC0gdG87XG4gICAgZm9yIChsZXQgdmlldyBvZiBpbnNlcnQpXG4gICAgICAgIGRMZW4gKz0gdmlldy5sZW5ndGg7XG4gICAgcGFyZW50Lmxlbmd0aCArPSBkTGVuO1xuICAgIHJlcGxhY2VSYW5nZShwYXJlbnQsIGZyb21JLCBmcm9tT2ZmLCB0b0ksIHRvT2ZmLCBpbnNlcnQsIDAsIG9wZW5TdGFydCwgb3BlbkVuZCk7XG59XG5cbmxldCBuYXYgPSB0eXBlb2YgbmF2aWdhdG9yICE9IFwidW5kZWZpbmVkXCIgPyBuYXZpZ2F0b3IgOiB7IHVzZXJBZ2VudDogXCJcIiwgdmVuZG9yOiBcIlwiLCBwbGF0Zm9ybTogXCJcIiB9O1xubGV0IGRvYyA9IHR5cGVvZiBkb2N1bWVudCAhPSBcInVuZGVmaW5lZFwiID8gZG9jdW1lbnQgOiB7IGRvY3VtZW50RWxlbWVudDogeyBzdHlsZToge30gfSB9O1xuY29uc3QgaWVfZWRnZSA9IC9FZGdlXFwvKFxcZCspLy5leGVjKG5hdi51c2VyQWdlbnQpO1xuY29uc3QgaWVfdXB0bzEwID0gL01TSUUgXFxkLy50ZXN0KG5hdi51c2VyQWdlbnQpO1xuY29uc3QgaWVfMTF1cCA9IC9UcmlkZW50XFwvKD86WzctOV18XFxkezIsfSlcXC4uKnJ2OihcXGQrKS8uZXhlYyhuYXYudXNlckFnZW50KTtcbmNvbnN0IGllID0gISEoaWVfdXB0bzEwIHx8IGllXzExdXAgfHwgaWVfZWRnZSk7XG5jb25zdCBnZWNrbyA9ICFpZSAmJiAvZ2Vja29cXC8oXFxkKykvaS50ZXN0KG5hdi51c2VyQWdlbnQpO1xuY29uc3QgY2hyb21lID0gIWllICYmIC9DaHJvbWVcXC8oXFxkKykvLmV4ZWMobmF2LnVzZXJBZ2VudCk7XG5jb25zdCB3ZWJraXQgPSBcIndlYmtpdEZvbnRTbW9vdGhpbmdcIiBpbiBkb2MuZG9jdW1lbnRFbGVtZW50LnN0eWxlO1xuY29uc3Qgc2FmYXJpID0gIWllICYmIC9BcHBsZSBDb21wdXRlci8udGVzdChuYXYudmVuZG9yKTtcbmNvbnN0IGlvcyA9IHNhZmFyaSAmJiAoL01vYmlsZVxcL1xcdysvLnRlc3QobmF2LnVzZXJBZ2VudCkgfHwgbmF2Lm1heFRvdWNoUG9pbnRzID4gMik7XG52YXIgYnJvd3NlciA9IHtcbiAgICBtYWM6IGlvcyB8fCAvTWFjLy50ZXN0KG5hdi5wbGF0Zm9ybSksXG4gICAgd2luZG93czogL1dpbi8udGVzdChuYXYucGxhdGZvcm0pLFxuICAgIGxpbnV4OiAvTGludXh8WDExLy50ZXN0KG5hdi5wbGF0Zm9ybSksXG4gICAgaWUsXG4gICAgaWVfdmVyc2lvbjogaWVfdXB0bzEwID8gZG9jLmRvY3VtZW50TW9kZSB8fCA2IDogaWVfMTF1cCA/ICtpZV8xMXVwWzFdIDogaWVfZWRnZSA/ICtpZV9lZGdlWzFdIDogMCxcbiAgICBnZWNrbyxcbiAgICBnZWNrb192ZXJzaW9uOiBnZWNrbyA/ICsoL0ZpcmVmb3hcXC8oXFxkKykvLmV4ZWMobmF2LnVzZXJBZ2VudCkgfHwgWzAsIDBdKVsxXSA6IDAsXG4gICAgY2hyb21lOiAhIWNocm9tZSxcbiAgICBjaHJvbWVfdmVyc2lvbjogY2hyb21lID8gK2Nocm9tZVsxXSA6IDAsXG4gICAgaW9zLFxuICAgIGFuZHJvaWQ6IC9BbmRyb2lkXFxiLy50ZXN0KG5hdi51c2VyQWdlbnQpLFxuICAgIHdlYmtpdCxcbiAgICBzYWZhcmksXG4gICAgd2Via2l0X3ZlcnNpb246IHdlYmtpdCA/ICsoL1xcYkFwcGxlV2ViS2l0XFwvKFxcZCspLy5leGVjKG5hdi51c2VyQWdlbnQpIHx8IFswLCAwXSlbMV0gOiAwLFxuICAgIHRhYlNpemU6IGRvYy5kb2N1bWVudEVsZW1lbnQuc3R5bGUudGFiU2l6ZSAhPSBudWxsID8gXCJ0YWItc2l6ZVwiIDogXCItbW96LXRhYi1zaXplXCJcbn07XG5cbmNvbnN0IE1heEpvaW5MZW4gPSAyNTY7XG5jbGFzcyBUZXh0VmlldyBleHRlbmRzIENvbnRlbnRWaWV3IHtcbiAgICBjb25zdHJ1Y3Rvcih0ZXh0KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgfVxuICAgIGdldCBsZW5ndGgoKSB7IHJldHVybiB0aGlzLnRleHQubGVuZ3RoOyB9XG4gICAgY3JlYXRlRE9NKHRleHRET00pIHtcbiAgICAgICAgdGhpcy5zZXRET00odGV4dERPTSB8fCBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0aGlzLnRleHQpKTtcbiAgICB9XG4gICAgc3luYyh2aWV3LCB0cmFjaykge1xuICAgICAgICBpZiAoIXRoaXMuZG9tKVxuICAgICAgICAgICAgdGhpcy5jcmVhdGVET00oKTtcbiAgICAgICAgaWYgKHRoaXMuZG9tLm5vZGVWYWx1ZSAhPSB0aGlzLnRleHQpIHtcbiAgICAgICAgICAgIGlmICh0cmFjayAmJiB0cmFjay5ub2RlID09IHRoaXMuZG9tKVxuICAgICAgICAgICAgICAgIHRyYWNrLndyaXR0ZW4gPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5kb20ubm9kZVZhbHVlID0gdGhpcy50ZXh0O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldXNlRE9NKGRvbSkge1xuICAgICAgICBpZiAoZG9tLm5vZGVUeXBlID09IDMpXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZURPTShkb20pO1xuICAgIH1cbiAgICBtZXJnZShmcm9tLCB0bywgc291cmNlKSB7XG4gICAgICAgIGlmICgodGhpcy5mbGFncyAmIDggLyogVmlld0ZsYWcuQ29tcG9zaXRpb24gKi8pIHx8XG4gICAgICAgICAgICBzb3VyY2UgJiYgKCEoc291cmNlIGluc3RhbmNlb2YgVGV4dFZpZXcpIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5sZW5ndGggLSAodG8gLSBmcm9tKSArIHNvdXJjZS5sZW5ndGggPiBNYXhKb2luTGVuIHx8XG4gICAgICAgICAgICAgICAgKHNvdXJjZS5mbGFncyAmIDggLyogVmlld0ZsYWcuQ29tcG9zaXRpb24gKi8pKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgdGhpcy50ZXh0ID0gdGhpcy50ZXh0LnNsaWNlKDAsIGZyb20pICsgKHNvdXJjZSA/IHNvdXJjZS50ZXh0IDogXCJcIikgKyB0aGlzLnRleHQuc2xpY2UodG8pO1xuICAgICAgICB0aGlzLm1hcmtEaXJ0eSgpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgc3BsaXQoZnJvbSkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gbmV3IFRleHRWaWV3KHRoaXMudGV4dC5zbGljZShmcm9tKSk7XG4gICAgICAgIHRoaXMudGV4dCA9IHRoaXMudGV4dC5zbGljZSgwLCBmcm9tKTtcbiAgICAgICAgdGhpcy5tYXJrRGlydHkoKTtcbiAgICAgICAgcmVzdWx0LmZsYWdzIHw9IHRoaXMuZmxhZ3MgJiA4IC8qIFZpZXdGbGFnLkNvbXBvc2l0aW9uICovO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBsb2NhbFBvc0Zyb21ET00obm9kZSwgb2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiBub2RlID09IHRoaXMuZG9tID8gb2Zmc2V0IDogb2Zmc2V0ID8gdGhpcy50ZXh0Lmxlbmd0aCA6IDA7XG4gICAgfVxuICAgIGRvbUF0UG9zKHBvcykgeyByZXR1cm4gbmV3IERPTVBvcyh0aGlzLmRvbSwgcG9zKTsgfVxuICAgIGRvbUJvdW5kc0Fyb3VuZChfZnJvbSwgX3RvLCBvZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIHsgZnJvbTogb2Zmc2V0LCB0bzogb2Zmc2V0ICsgdGhpcy5sZW5ndGgsIHN0YXJ0RE9NOiB0aGlzLmRvbSwgZW5kRE9NOiB0aGlzLmRvbS5uZXh0U2libGluZyB9O1xuICAgIH1cbiAgICBjb29yZHNBdChwb3MsIHNpZGUpIHtcbiAgICAgICAgcmV0dXJuIHRleHRDb29yZHModGhpcy5kb20sIHBvcywgc2lkZSk7XG4gICAgfVxufVxuY2xhc3MgTWFya1ZpZXcgZXh0ZW5kcyBDb250ZW50VmlldyB7XG4gICAgY29uc3RydWN0b3IobWFyaywgY2hpbGRyZW4gPSBbXSwgbGVuZ3RoID0gMCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm1hcmsgPSBtYXJrO1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBjaCBvZiBjaGlsZHJlbilcbiAgICAgICAgICAgIGNoLnNldFBhcmVudCh0aGlzKTtcbiAgICB9XG4gICAgc2V0QXR0cnMoZG9tKSB7XG4gICAgICAgIGNsZWFyQXR0cmlidXRlcyhkb20pO1xuICAgICAgICBpZiAodGhpcy5tYXJrLmNsYXNzKVxuICAgICAgICAgICAgZG9tLmNsYXNzTmFtZSA9IHRoaXMubWFyay5jbGFzcztcbiAgICAgICAgaWYgKHRoaXMubWFyay5hdHRycylcbiAgICAgICAgICAgIGZvciAobGV0IG5hbWUgaW4gdGhpcy5tYXJrLmF0dHJzKVxuICAgICAgICAgICAgICAgIGRvbS5zZXRBdHRyaWJ1dGUobmFtZSwgdGhpcy5tYXJrLmF0dHJzW25hbWVdKTtcbiAgICAgICAgcmV0dXJuIGRvbTtcbiAgICB9XG4gICAgY2FuUmV1c2VET00ob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmNhblJldXNlRE9NKG90aGVyKSAmJiAhKCh0aGlzLmZsYWdzIHwgb3RoZXIuZmxhZ3MpICYgOCAvKiBWaWV3RmxhZy5Db21wb3NpdGlvbiAqLyk7XG4gICAgfVxuICAgIHJldXNlRE9NKG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUubm9kZU5hbWUgPT0gdGhpcy5tYXJrLnRhZ05hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgICAgICAgdGhpcy5zZXRET00obm9kZSk7XG4gICAgICAgICAgICB0aGlzLmZsYWdzIHw9IDQgLyogVmlld0ZsYWcuQXR0cnNEaXJ0eSAqLyB8IDIgLyogVmlld0ZsYWcuTm9kZURpcnR5ICovO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN5bmModmlldywgdHJhY2spIHtcbiAgICAgICAgaWYgKCF0aGlzLmRvbSlcbiAgICAgICAgICAgIHRoaXMuc2V0RE9NKHRoaXMuc2V0QXR0cnMoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0aGlzLm1hcmsudGFnTmFtZSkpKTtcbiAgICAgICAgZWxzZSBpZiAodGhpcy5mbGFncyAmIDQgLyogVmlld0ZsYWcuQXR0cnNEaXJ0eSAqLylcbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cnModGhpcy5kb20pO1xuICAgICAgICBzdXBlci5zeW5jKHZpZXcsIHRyYWNrKTtcbiAgICB9XG4gICAgbWVyZ2UoZnJvbSwgdG8sIHNvdXJjZSwgX2hhc1N0YXJ0LCBvcGVuU3RhcnQsIG9wZW5FbmQpIHtcbiAgICAgICAgaWYgKHNvdXJjZSAmJiAoIShzb3VyY2UgaW5zdGFuY2VvZiBNYXJrVmlldyAmJiBzb3VyY2UubWFyay5lcSh0aGlzLm1hcmspKSB8fFxuICAgICAgICAgICAgKGZyb20gJiYgb3BlblN0YXJ0IDw9IDApIHx8ICh0byA8IHRoaXMubGVuZ3RoICYmIG9wZW5FbmQgPD0gMCkpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBtZXJnZUNoaWxkcmVuSW50byh0aGlzLCBmcm9tLCB0bywgc291cmNlID8gc291cmNlLmNoaWxkcmVuLnNsaWNlKCkgOiBbXSwgb3BlblN0YXJ0IC0gMSwgb3BlbkVuZCAtIDEpO1xuICAgICAgICB0aGlzLm1hcmtEaXJ0eSgpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgc3BsaXQoZnJvbSkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gW10sIG9mZiA9IDAsIGRldGFjaEZyb20gPSAtMSwgaSA9IDA7XG4gICAgICAgIGZvciAobGV0IGVsdCBvZiB0aGlzLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICBsZXQgZW5kID0gb2ZmICsgZWx0Lmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChlbmQgPiBmcm9tKVxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9mZiA8IGZyb20gPyBlbHQuc3BsaXQoZnJvbSAtIG9mZikgOiBlbHQpO1xuICAgICAgICAgICAgaWYgKGRldGFjaEZyb20gPCAwICYmIG9mZiA+PSBmcm9tKVxuICAgICAgICAgICAgICAgIGRldGFjaEZyb20gPSBpO1xuICAgICAgICAgICAgb2ZmID0gZW5kO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIGxldCBsZW5ndGggPSB0aGlzLmxlbmd0aCAtIGZyb207XG4gICAgICAgIHRoaXMubGVuZ3RoID0gZnJvbTtcbiAgICAgICAgaWYgKGRldGFjaEZyb20gPiAtMSkge1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5sZW5ndGggPSBkZXRhY2hGcm9tO1xuICAgICAgICAgICAgdGhpcy5tYXJrRGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IE1hcmtWaWV3KHRoaXMubWFyaywgcmVzdWx0LCBsZW5ndGgpO1xuICAgIH1cbiAgICBkb21BdFBvcyhwb3MpIHtcbiAgICAgICAgcmV0dXJuIGlubGluZURPTUF0UG9zKHRoaXMsIHBvcyk7XG4gICAgfVxuICAgIGNvb3Jkc0F0KHBvcywgc2lkZSkge1xuICAgICAgICByZXR1cm4gY29vcmRzSW5DaGlsZHJlbih0aGlzLCBwb3MsIHNpZGUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHRleHRDb29yZHModGV4dCwgcG9zLCBzaWRlKSB7XG4gICAgbGV0IGxlbmd0aCA9IHRleHQubm9kZVZhbHVlLmxlbmd0aDtcbiAgICBpZiAocG9zID4gbGVuZ3RoKVxuICAgICAgICBwb3MgPSBsZW5ndGg7XG4gICAgbGV0IGZyb20gPSBwb3MsIHRvID0gcG9zLCBmbGF0dGVuID0gMDtcbiAgICBpZiAocG9zID09IDAgJiYgc2lkZSA8IDAgfHwgcG9zID09IGxlbmd0aCAmJiBzaWRlID49IDApIHtcbiAgICAgICAgaWYgKCEoYnJvd3Nlci5jaHJvbWUgfHwgYnJvd3Nlci5nZWNrbykpIHsgLy8gVGhlc2UgYnJvd3NlcnMgcmVsaWFibHkgcmV0dXJuIHZhbGlkIHJlY3RhbmdsZXMgZm9yIGVtcHR5IHJhbmdlc1xuICAgICAgICAgICAgaWYgKHBvcykge1xuICAgICAgICAgICAgICAgIGZyb20tLTtcbiAgICAgICAgICAgICAgICBmbGF0dGVuID0gMTtcbiAgICAgICAgICAgIH0gLy8gRklYTUUgdGhpcyBpcyB3cm9uZyBpbiBSVEwgdGV4dFxuICAgICAgICAgICAgZWxzZSBpZiAodG8gPCBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0bysrO1xuICAgICAgICAgICAgICAgIGZsYXR0ZW4gPSAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKHNpZGUgPCAwKVxuICAgICAgICAgICAgZnJvbS0tO1xuICAgICAgICBlbHNlIGlmICh0byA8IGxlbmd0aClcbiAgICAgICAgICAgIHRvKys7XG4gICAgfVxuICAgIGxldCByZWN0cyA9IHRleHRSYW5nZSh0ZXh0LCBmcm9tLCB0bykuZ2V0Q2xpZW50UmVjdHMoKTtcbiAgICBpZiAoIXJlY3RzLmxlbmd0aClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgbGV0IHJlY3QgPSByZWN0c1soZmxhdHRlbiA/IGZsYXR0ZW4gPCAwIDogc2lkZSA+PSAwKSA/IDAgOiByZWN0cy5sZW5ndGggLSAxXTtcbiAgICBpZiAoYnJvd3Nlci5zYWZhcmkgJiYgIWZsYXR0ZW4gJiYgcmVjdC53aWR0aCA9PSAwKVxuICAgICAgICByZWN0ID0gQXJyYXkucHJvdG90eXBlLmZpbmQuY2FsbChyZWN0cywgciA9PiByLndpZHRoKSB8fCByZWN0O1xuICAgIHJldHVybiBmbGF0dGVuID8gZmxhdHRlblJlY3QocmVjdCwgZmxhdHRlbiA8IDApIDogcmVjdCB8fCBudWxsO1xufVxuLy8gQWxzbyB1c2VkIGZvciBjb2xsYXBzZWQgcmFuZ2VzIHRoYXQgZG9uJ3QgaGF2ZSBhIHBsYWNlaG9sZGVyIHdpZGdldCFcbmNsYXNzIFdpZGdldFZpZXcgZXh0ZW5kcyBDb250ZW50VmlldyB7XG4gICAgc3RhdGljIGNyZWF0ZSh3aWRnZXQsIGxlbmd0aCwgc2lkZSkge1xuICAgICAgICByZXR1cm4gbmV3IFdpZGdldFZpZXcod2lkZ2V0LCBsZW5ndGgsIHNpZGUpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcih3aWRnZXQsIGxlbmd0aCwgc2lkZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLndpZGdldCA9IHdpZGdldDtcbiAgICAgICAgdGhpcy5sZW5ndGggPSBsZW5ndGg7XG4gICAgICAgIHRoaXMuc2lkZSA9IHNpZGU7XG4gICAgICAgIHRoaXMucHJldldpZGdldCA9IG51bGw7XG4gICAgfVxuICAgIHNwbGl0KGZyb20pIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFdpZGdldFZpZXcuY3JlYXRlKHRoaXMud2lkZ2V0LCB0aGlzLmxlbmd0aCAtIGZyb20sIHRoaXMuc2lkZSk7XG4gICAgICAgIHRoaXMubGVuZ3RoIC09IGZyb207XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHN5bmModmlldykge1xuICAgICAgICBpZiAoIXRoaXMuZG9tIHx8ICF0aGlzLndpZGdldC51cGRhdGVET00odGhpcy5kb20sIHZpZXcpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5kb20gJiYgdGhpcy5wcmV2V2lkZ2V0KVxuICAgICAgICAgICAgICAgIHRoaXMucHJldldpZGdldC5kZXN0cm95KHRoaXMuZG9tKTtcbiAgICAgICAgICAgIHRoaXMucHJldldpZGdldCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnNldERPTSh0aGlzLndpZGdldC50b0RPTSh2aWV3KSk7XG4gICAgICAgICAgICBpZiAoIXRoaXMud2lkZ2V0LmVkaXRhYmxlKVxuICAgICAgICAgICAgICAgIHRoaXMuZG9tLmNvbnRlbnRFZGl0YWJsZSA9IFwiZmFsc2VcIjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRTaWRlKCkgeyByZXR1cm4gdGhpcy5zaWRlOyB9XG4gICAgbWVyZ2UoZnJvbSwgdG8sIHNvdXJjZSwgaGFzU3RhcnQsIG9wZW5TdGFydCwgb3BlbkVuZCkge1xuICAgICAgICBpZiAoc291cmNlICYmICghKHNvdXJjZSBpbnN0YW5jZW9mIFdpZGdldFZpZXcpIHx8ICF0aGlzLndpZGdldC5jb21wYXJlKHNvdXJjZS53aWRnZXQpIHx8XG4gICAgICAgICAgICBmcm9tID4gMCAmJiBvcGVuU3RhcnQgPD0gMCB8fCB0byA8IHRoaXMubGVuZ3RoICYmIG9wZW5FbmQgPD0gMCkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gZnJvbSArIChzb3VyY2UgPyBzb3VyY2UubGVuZ3RoIDogMCkgKyAodGhpcy5sZW5ndGggLSB0byk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBiZWNvbWUob3RoZXIpIHtcbiAgICAgICAgaWYgKG90aGVyIGluc3RhbmNlb2YgV2lkZ2V0VmlldyAmJiBvdGhlci5zaWRlID09IHRoaXMuc2lkZSAmJlxuICAgICAgICAgICAgdGhpcy53aWRnZXQuY29uc3RydWN0b3IgPT0gb3RoZXIud2lkZ2V0LmNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMud2lkZ2V0LmNvbXBhcmUob3RoZXIud2lkZ2V0KSlcbiAgICAgICAgICAgICAgICB0aGlzLm1hcmtEaXJ0eSh0cnVlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmRvbSAmJiAhdGhpcy5wcmV2V2lkZ2V0KVxuICAgICAgICAgICAgICAgIHRoaXMucHJldldpZGdldCA9IHRoaXMud2lkZ2V0O1xuICAgICAgICAgICAgdGhpcy53aWRnZXQgPSBvdGhlci53aWRnZXQ7XG4gICAgICAgICAgICB0aGlzLmxlbmd0aCA9IG90aGVyLmxlbmd0aDtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWdub3JlTXV0YXRpb24oKSB7IHJldHVybiB0cnVlOyB9XG4gICAgaWdub3JlRXZlbnQoZXZlbnQpIHsgcmV0dXJuIHRoaXMud2lkZ2V0Lmlnbm9yZUV2ZW50KGV2ZW50KTsgfVxuICAgIGdldCBvdmVycmlkZURPTVRleHQoKSB7XG4gICAgICAgIGlmICh0aGlzLmxlbmd0aCA9PSAwKVxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlLlRleHQuZW1wdHk7XG4gICAgICAgIGxldCB0b3AgPSB0aGlzO1xuICAgICAgICB3aGlsZSAodG9wLnBhcmVudClcbiAgICAgICAgICAgIHRvcCA9IHRvcC5wYXJlbnQ7XG4gICAgICAgIGxldCB7IHZpZXcgfSA9IHRvcCwgdGV4dCA9IHZpZXcgJiYgdmlldy5zdGF0ZS5kb2MsIHN0YXJ0ID0gdGhpcy5wb3NBdFN0YXJ0O1xuICAgICAgICByZXR1cm4gdGV4dCA/IHRleHQuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgdGhpcy5sZW5ndGgpIDogc3RhdGUuVGV4dC5lbXB0eTtcbiAgICB9XG4gICAgZG9tQXRQb3MocG9zKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5sZW5ndGggPyBwb3MgPT0gMCA6IHRoaXMuc2lkZSA+IDApXG4gICAgICAgICAgICA/IERPTVBvcy5iZWZvcmUodGhpcy5kb20pXG4gICAgICAgICAgICA6IERPTVBvcy5hZnRlcih0aGlzLmRvbSwgcG9zID09IHRoaXMubGVuZ3RoKTtcbiAgICB9XG4gICAgZG9tQm91bmRzQXJvdW5kKCkgeyByZXR1cm4gbnVsbDsgfVxuICAgIGNvb3Jkc0F0KHBvcywgc2lkZSkge1xuICAgICAgICBsZXQgY3VzdG9tID0gdGhpcy53aWRnZXQuY29vcmRzQXQodGhpcy5kb20sIHBvcywgc2lkZSk7XG4gICAgICAgIGlmIChjdXN0b20pXG4gICAgICAgICAgICByZXR1cm4gY3VzdG9tO1xuICAgICAgICBsZXQgcmVjdHMgPSB0aGlzLmRvbS5nZXRDbGllbnRSZWN0cygpLCByZWN0ID0gbnVsbDtcbiAgICAgICAgaWYgKCFyZWN0cy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgbGV0IGZyb21CYWNrID0gdGhpcy5zaWRlID8gdGhpcy5zaWRlIDwgMCA6IHBvcyA+IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSBmcm9tQmFjayA/IHJlY3RzLmxlbmd0aCAtIDEgOiAwOzsgaSArPSAoZnJvbUJhY2sgPyAtMSA6IDEpKSB7XG4gICAgICAgICAgICByZWN0ID0gcmVjdHNbaV07XG4gICAgICAgICAgICBpZiAocG9zID4gMCA/IGkgPT0gMCA6IGkgPT0gcmVjdHMubGVuZ3RoIC0gMSB8fCByZWN0LnRvcCA8IHJlY3QuYm90dG9tKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmbGF0dGVuUmVjdChyZWN0LCAhZnJvbUJhY2spO1xuICAgIH1cbiAgICBnZXQgaXNFZGl0YWJsZSgpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgZ2V0IGlzV2lkZ2V0KCkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgIGdldCBpc0hpZGRlbigpIHsgcmV0dXJuIHRoaXMud2lkZ2V0LmlzSGlkZGVuOyB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgc3VwZXIuZGVzdHJveSgpO1xuICAgICAgICBpZiAodGhpcy5kb20pXG4gICAgICAgICAgICB0aGlzLndpZGdldC5kZXN0cm95KHRoaXMuZG9tKTtcbiAgICB9XG59XG4vLyBUaGVzZSBhcmUgZHJhd24gYXJvdW5kIHVuZWRpdGFibGUgd2lkZ2V0cyB0byBhdm9pZCBhIG51bWJlciBvZlxuLy8gYnJvd3NlciBidWdzIHRoYXQgc2hvdyB1cCB3aGVuIHRoZSBjdXJzb3IgaXMgZGlyZWN0bHkgbmV4dCB0b1xuLy8gdW5lZGl0YWJsZSBpbmxpbmUgY29udGVudC5cbmNsYXNzIFdpZGdldEJ1ZmZlclZpZXcgZXh0ZW5kcyBDb250ZW50VmlldyB7XG4gICAgY29uc3RydWN0b3Ioc2lkZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnNpZGUgPSBzaWRlO1xuICAgIH1cbiAgICBnZXQgbGVuZ3RoKCkgeyByZXR1cm4gMDsgfVxuICAgIG1lcmdlKCkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICBiZWNvbWUob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIG90aGVyIGluc3RhbmNlb2YgV2lkZ2V0QnVmZmVyVmlldyAmJiBvdGhlci5zaWRlID09IHRoaXMuc2lkZTtcbiAgICB9XG4gICAgc3BsaXQoKSB7IHJldHVybiBuZXcgV2lkZ2V0QnVmZmVyVmlldyh0aGlzLnNpZGUpOyB9XG4gICAgc3luYygpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRvbSkge1xuICAgICAgICAgICAgbGV0IGRvbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XG4gICAgICAgICAgICBkb20uY2xhc3NOYW1lID0gXCJjbS13aWRnZXRCdWZmZXJcIjtcbiAgICAgICAgICAgIGRvbS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLCBcInRydWVcIik7XG4gICAgICAgICAgICB0aGlzLnNldERPTShkb20pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldFNpZGUoKSB7IHJldHVybiB0aGlzLnNpZGU7IH1cbiAgICBkb21BdFBvcyhwb3MpIHsgcmV0dXJuIHRoaXMuc2lkZSA+IDAgPyBET01Qb3MuYmVmb3JlKHRoaXMuZG9tKSA6IERPTVBvcy5hZnRlcih0aGlzLmRvbSk7IH1cbiAgICBsb2NhbFBvc0Zyb21ET00oKSB7IHJldHVybiAwOyB9XG4gICAgZG9tQm91bmRzQXJvdW5kKCkgeyByZXR1cm4gbnVsbDsgfVxuICAgIGNvb3Jkc0F0KHBvcykge1xuICAgICAgICByZXR1cm4gdGhpcy5kb20uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgfVxuICAgIGdldCBvdmVycmlkZURPTVRleHQoKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZS5UZXh0LmVtcHR5O1xuICAgIH1cbiAgICBnZXQgaXNIaWRkZW4oKSB7IHJldHVybiB0cnVlOyB9XG59XG5UZXh0Vmlldy5wcm90b3R5cGUuY2hpbGRyZW4gPSBXaWRnZXRWaWV3LnByb3RvdHlwZS5jaGlsZHJlbiA9IFdpZGdldEJ1ZmZlclZpZXcucHJvdG90eXBlLmNoaWxkcmVuID0gbm9DaGlsZHJlbjtcbmZ1bmN0aW9uIGlubGluZURPTUF0UG9zKHBhcmVudCwgcG9zKSB7XG4gICAgbGV0IGRvbSA9IHBhcmVudC5kb20sIHsgY2hpbGRyZW4gfSA9IHBhcmVudCwgaSA9IDA7XG4gICAgZm9yIChsZXQgb2ZmID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBjaGlsZCA9IGNoaWxkcmVuW2ldLCBlbmQgPSBvZmYgKyBjaGlsZC5sZW5ndGg7XG4gICAgICAgIGlmIChlbmQgPT0gb2ZmICYmIGNoaWxkLmdldFNpZGUoKSA8PSAwKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGlmIChwb3MgPiBvZmYgJiYgcG9zIDwgZW5kICYmIGNoaWxkLmRvbS5wYXJlbnROb2RlID09IGRvbSlcbiAgICAgICAgICAgIHJldHVybiBjaGlsZC5kb21BdFBvcyhwb3MgLSBvZmYpO1xuICAgICAgICBpZiAocG9zIDw9IG9mZilcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBvZmYgPSBlbmQ7XG4gICAgfVxuICAgIGZvciAobGV0IGogPSBpOyBqID4gMDsgai0tKSB7XG4gICAgICAgIGxldCBwcmV2ID0gY2hpbGRyZW5baiAtIDFdO1xuICAgICAgICBpZiAocHJldi5kb20ucGFyZW50Tm9kZSA9PSBkb20pXG4gICAgICAgICAgICByZXR1cm4gcHJldi5kb21BdFBvcyhwcmV2Lmxlbmd0aCk7XG4gICAgfVxuICAgIGZvciAobGV0IGogPSBpOyBqIDwgY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgbGV0IG5leHQgPSBjaGlsZHJlbltqXTtcbiAgICAgICAgaWYgKG5leHQuZG9tLnBhcmVudE5vZGUgPT0gZG9tKVxuICAgICAgICAgICAgcmV0dXJuIG5leHQuZG9tQXRQb3MoMCk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgRE9NUG9zKGRvbSwgMCk7XG59XG4vLyBBc3N1bWVzIGB2aWV3YCwgaWYgYSBtYXJrIHZpZXcsIGhhcyBwcmVjaXNlbHkgMSBjaGlsZC5cbmZ1bmN0aW9uIGpvaW5JbmxpbmVJbnRvKHBhcmVudCwgdmlldywgb3Blbikge1xuICAgIGxldCBsYXN0LCB7IGNoaWxkcmVuIH0gPSBwYXJlbnQ7XG4gICAgaWYgKG9wZW4gPiAwICYmIHZpZXcgaW5zdGFuY2VvZiBNYXJrVmlldyAmJiBjaGlsZHJlbi5sZW5ndGggJiZcbiAgICAgICAgKGxhc3QgPSBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXSkgaW5zdGFuY2VvZiBNYXJrVmlldyAmJiBsYXN0Lm1hcmsuZXEodmlldy5tYXJrKSkge1xuICAgICAgICBqb2luSW5saW5lSW50byhsYXN0LCB2aWV3LmNoaWxkcmVuWzBdLCBvcGVuIC0gMSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjaGlsZHJlbi5wdXNoKHZpZXcpO1xuICAgICAgICB2aWV3LnNldFBhcmVudChwYXJlbnQpO1xuICAgIH1cbiAgICBwYXJlbnQubGVuZ3RoICs9IHZpZXcubGVuZ3RoO1xufVxuZnVuY3Rpb24gY29vcmRzSW5DaGlsZHJlbih2aWV3LCBwb3MsIHNpZGUpIHtcbiAgICBsZXQgYmVmb3JlID0gbnVsbCwgYmVmb3JlUG9zID0gLTEsIGFmdGVyID0gbnVsbCwgYWZ0ZXJQb3MgPSAtMTtcbiAgICBmdW5jdGlvbiBzY2FuKHZpZXcsIHBvcykge1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgb2ZmID0gMDsgaSA8IHZpZXcuY2hpbGRyZW4ubGVuZ3RoICYmIG9mZiA8PSBwb3M7IGkrKykge1xuICAgICAgICAgICAgbGV0IGNoaWxkID0gdmlldy5jaGlsZHJlbltpXSwgZW5kID0gb2ZmICsgY2hpbGQubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGVuZCA+PSBwb3MpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNjYW4oY2hpbGQsIHBvcyAtIG9mZik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCghYWZ0ZXIgfHwgYWZ0ZXIuaXNIaWRkZW4gJiYgc2lkZSA+IDApICYmXG4gICAgICAgICAgICAgICAgICAgIChlbmQgPiBwb3MgfHwgb2ZmID09IGVuZCAmJiBjaGlsZC5nZXRTaWRlKCkgPiAwKSkge1xuICAgICAgICAgICAgICAgICAgICBhZnRlciA9IGNoaWxkO1xuICAgICAgICAgICAgICAgICAgICBhZnRlclBvcyA9IHBvcyAtIG9mZjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAob2ZmIDwgcG9zIHx8IChvZmYgPT0gZW5kICYmIGNoaWxkLmdldFNpZGUoKSA8IDApICYmICFjaGlsZC5pc0hpZGRlbikge1xuICAgICAgICAgICAgICAgICAgICBiZWZvcmUgPSBjaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgYmVmb3JlUG9zID0gcG9zIC0gb2ZmO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9mZiA9IGVuZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzY2FuKHZpZXcsIHBvcyk7XG4gICAgbGV0IHRhcmdldCA9IChzaWRlIDwgMCA/IGJlZm9yZSA6IGFmdGVyKSB8fCBiZWZvcmUgfHwgYWZ0ZXI7XG4gICAgaWYgKHRhcmdldClcbiAgICAgICAgcmV0dXJuIHRhcmdldC5jb29yZHNBdChNYXRoLm1heCgwLCB0YXJnZXQgPT0gYmVmb3JlID8gYmVmb3JlUG9zIDogYWZ0ZXJQb3MpLCBzaWRlKTtcbiAgICByZXR1cm4gZmFsbGJhY2tSZWN0KHZpZXcpO1xufVxuZnVuY3Rpb24gZmFsbGJhY2tSZWN0KHZpZXcpIHtcbiAgICBsZXQgbGFzdCA9IHZpZXcuZG9tLmxhc3RDaGlsZDtcbiAgICBpZiAoIWxhc3QpXG4gICAgICAgIHJldHVybiB2aWV3LmRvbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBsZXQgcmVjdHMgPSBjbGllbnRSZWN0c0ZvcihsYXN0KTtcbiAgICByZXR1cm4gcmVjdHNbcmVjdHMubGVuZ3RoIC0gMV0gfHwgbnVsbDtcbn1cblxuZnVuY3Rpb24gY29tYmluZUF0dHJzKHNvdXJjZSwgdGFyZ2V0KSB7XG4gICAgZm9yIChsZXQgbmFtZSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKG5hbWUgPT0gXCJjbGFzc1wiICYmIHRhcmdldC5jbGFzcylcbiAgICAgICAgICAgIHRhcmdldC5jbGFzcyArPSBcIiBcIiArIHNvdXJjZS5jbGFzcztcbiAgICAgICAgZWxzZSBpZiAobmFtZSA9PSBcInN0eWxlXCIgJiYgdGFyZ2V0LnN0eWxlKVxuICAgICAgICAgICAgdGFyZ2V0LnN0eWxlICs9IFwiO1wiICsgc291cmNlLnN0eWxlO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0YXJnZXRbbmFtZV0gPSBzb3VyY2VbbmFtZV07XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59XG5jb25zdCBub0F0dHJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmZ1bmN0aW9uIGF0dHJzRXEoYSwgYiwgaWdub3JlKSB7XG4gICAgaWYgKGEgPT0gYilcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgaWYgKCFhKVxuICAgICAgICBhID0gbm9BdHRycztcbiAgICBpZiAoIWIpXG4gICAgICAgIGIgPSBub0F0dHJzO1xuICAgIGxldCBrZXlzQSA9IE9iamVjdC5rZXlzKGEpLCBrZXlzQiA9IE9iamVjdC5rZXlzKGIpO1xuICAgIGlmIChrZXlzQS5sZW5ndGggLSAoaWdub3JlICYmIGtleXNBLmluZGV4T2YoaWdub3JlKSA+IC0xID8gMSA6IDApICE9XG4gICAgICAgIGtleXNCLmxlbmd0aCAtIChpZ25vcmUgJiYga2V5c0IuaW5kZXhPZihpZ25vcmUpID4gLTEgPyAxIDogMCkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGxldCBrZXkgb2Yga2V5c0EpIHtcbiAgICAgICAgaWYgKGtleSAhPSBpZ25vcmUgJiYgKGtleXNCLmluZGV4T2Yoa2V5KSA9PSAtMSB8fCBhW2tleV0gIT09IGJba2V5XSkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gdXBkYXRlQXR0cnMoZG9tLCBwcmV2LCBhdHRycykge1xuICAgIGxldCBjaGFuZ2VkID0gZmFsc2U7XG4gICAgaWYgKHByZXYpXG4gICAgICAgIGZvciAobGV0IG5hbWUgaW4gcHJldilcbiAgICAgICAgICAgIGlmICghKGF0dHJzICYmIG5hbWUgaW4gYXR0cnMpKSB7XG4gICAgICAgICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKG5hbWUgPT0gXCJzdHlsZVwiKVxuICAgICAgICAgICAgICAgICAgICBkb20uc3R5bGUuY3NzVGV4dCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkb20ucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgICAgICAgfVxuICAgIGlmIChhdHRycylcbiAgICAgICAgZm9yIChsZXQgbmFtZSBpbiBhdHRycylcbiAgICAgICAgICAgIGlmICghKHByZXYgJiYgcHJldltuYW1lXSA9PSBhdHRyc1tuYW1lXSkpIHtcbiAgICAgICAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAobmFtZSA9PSBcInN0eWxlXCIpXG4gICAgICAgICAgICAgICAgICAgIGRvbS5zdHlsZS5jc3NUZXh0ID0gYXR0cnNbbmFtZV07XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkb20uc2V0QXR0cmlidXRlKG5hbWUsIGF0dHJzW25hbWVdKTtcbiAgICAgICAgICAgIH1cbiAgICByZXR1cm4gY2hhbmdlZDtcbn1cbmZ1bmN0aW9uIGdldEF0dHJzKGRvbSkge1xuICAgIGxldCBhdHRycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkb20uYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgYXR0ciA9IGRvbS5hdHRyaWJ1dGVzW2ldO1xuICAgICAgICBhdHRyc1thdHRyLm5hbWVdID0gYXR0ci52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGF0dHJzO1xufVxuXG5jbGFzcyBMaW5lVmlldyBleHRlbmRzIENvbnRlbnRWaWV3IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgICAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMucHJldkF0dHJzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmF0dHJzID0gbnVsbDtcbiAgICAgICAgdGhpcy5icmVha0FmdGVyID0gMDtcbiAgICB9XG4gICAgLy8gQ29uc3VtZXMgc291cmNlXG4gICAgbWVyZ2UoZnJvbSwgdG8sIHNvdXJjZSwgaGFzU3RhcnQsIG9wZW5TdGFydCwgb3BlbkVuZCkge1xuICAgICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgICAgICBpZiAoIShzb3VyY2UgaW5zdGFuY2VvZiBMaW5lVmlldykpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmRvbSlcbiAgICAgICAgICAgICAgICBzb3VyY2UudHJhbnNmZXJET00odGhpcyk7IC8vIFJldXNlIHNvdXJjZS5kb20gd2hlbiBhcHByb3ByaWF0ZVxuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNTdGFydClcbiAgICAgICAgICAgIHRoaXMuc2V0RGVjbyhzb3VyY2UgPyBzb3VyY2UuYXR0cnMgOiBudWxsKTtcbiAgICAgICAgbWVyZ2VDaGlsZHJlbkludG8odGhpcywgZnJvbSwgdG8sIHNvdXJjZSA/IHNvdXJjZS5jaGlsZHJlbi5zbGljZSgpIDogW10sIG9wZW5TdGFydCwgb3BlbkVuZCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBzcGxpdChhdCkge1xuICAgICAgICBsZXQgZW5kID0gbmV3IExpbmVWaWV3O1xuICAgICAgICBlbmQuYnJlYWtBZnRlciA9IHRoaXMuYnJlYWtBZnRlcjtcbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoID09IDApXG4gICAgICAgICAgICByZXR1cm4gZW5kO1xuICAgICAgICBsZXQgeyBpLCBvZmYgfSA9IHRoaXMuY2hpbGRQb3MoYXQpO1xuICAgICAgICBpZiAob2ZmKSB7XG4gICAgICAgICAgICBlbmQuYXBwZW5kKHRoaXMuY2hpbGRyZW5baV0uc3BsaXQob2ZmKSwgMCk7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuW2ldLm1lcmdlKG9mZiwgdGhpcy5jaGlsZHJlbltpXS5sZW5ndGgsIG51bGwsIGZhbHNlLCAwLCAwKTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBqID0gaTsgaiA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBqKyspXG4gICAgICAgICAgICBlbmQuYXBwZW5kKHRoaXMuY2hpbGRyZW5bal0sIDApO1xuICAgICAgICB3aGlsZSAoaSA+IDAgJiYgdGhpcy5jaGlsZHJlbltpIC0gMV0ubGVuZ3RoID09IDApXG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuWy0taV0uZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmNoaWxkcmVuLmxlbmd0aCA9IGk7XG4gICAgICAgIHRoaXMubWFya0RpcnR5KCk7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gYXQ7XG4gICAgICAgIHJldHVybiBlbmQ7XG4gICAgfVxuICAgIHRyYW5zZmVyRE9NKG90aGVyKSB7XG4gICAgICAgIGlmICghdGhpcy5kb20pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMubWFya0RpcnR5KCk7XG4gICAgICAgIG90aGVyLnNldERPTSh0aGlzLmRvbSk7XG4gICAgICAgIG90aGVyLnByZXZBdHRycyA9IHRoaXMucHJldkF0dHJzID09PSB1bmRlZmluZWQgPyB0aGlzLmF0dHJzIDogdGhpcy5wcmV2QXR0cnM7XG4gICAgICAgIHRoaXMucHJldkF0dHJzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmRvbSA9IG51bGw7XG4gICAgfVxuICAgIHNldERlY28oYXR0cnMpIHtcbiAgICAgICAgaWYgKCFhdHRyc0VxKHRoaXMuYXR0cnMsIGF0dHJzKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZG9tKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcmV2QXR0cnMgPSB0aGlzLmF0dHJzO1xuICAgICAgICAgICAgICAgIHRoaXMubWFya0RpcnR5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmF0dHJzID0gYXR0cnM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXBwZW5kKGNoaWxkLCBvcGVuU3RhcnQpIHtcbiAgICAgICAgam9pbklubGluZUludG8odGhpcywgY2hpbGQsIG9wZW5TdGFydCk7XG4gICAgfVxuICAgIC8vIE9ubHkgY2FsbGVkIHdoZW4gYnVpbGRpbmcgYSBsaW5lIHZpZXcgaW4gQ29udGVudEJ1aWxkZXJcbiAgICBhZGRMaW5lRGVjbyhkZWNvKSB7XG4gICAgICAgIGxldCBhdHRycyA9IGRlY28uc3BlYy5hdHRyaWJ1dGVzLCBjbHMgPSBkZWNvLnNwZWMuY2xhc3M7XG4gICAgICAgIGlmIChhdHRycylcbiAgICAgICAgICAgIHRoaXMuYXR0cnMgPSBjb21iaW5lQXR0cnMoYXR0cnMsIHRoaXMuYXR0cnMgfHwge30pO1xuICAgICAgICBpZiAoY2xzKVxuICAgICAgICAgICAgdGhpcy5hdHRycyA9IGNvbWJpbmVBdHRycyh7IGNsYXNzOiBjbHMgfSwgdGhpcy5hdHRycyB8fCB7fSk7XG4gICAgfVxuICAgIGRvbUF0UG9zKHBvcykge1xuICAgICAgICByZXR1cm4gaW5saW5lRE9NQXRQb3ModGhpcywgcG9zKTtcbiAgICB9XG4gICAgcmV1c2VET00obm9kZSkge1xuICAgICAgICBpZiAobm9kZS5ub2RlTmFtZSA9PSBcIkRJVlwiKSB7XG4gICAgICAgICAgICB0aGlzLnNldERPTShub2RlKTtcbiAgICAgICAgICAgIHRoaXMuZmxhZ3MgfD0gNCAvKiBWaWV3RmxhZy5BdHRyc0RpcnR5ICovIHwgMiAvKiBWaWV3RmxhZy5Ob2RlRGlydHkgKi87XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3luYyh2aWV3LCB0cmFjaykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICghdGhpcy5kb20pIHtcbiAgICAgICAgICAgIHRoaXMuc2V0RE9NKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpO1xuICAgICAgICAgICAgdGhpcy5kb20uY2xhc3NOYW1lID0gXCJjbS1saW5lXCI7XG4gICAgICAgICAgICB0aGlzLnByZXZBdHRycyA9IHRoaXMuYXR0cnMgPyBudWxsIDogdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZmxhZ3MgJiA0IC8qIFZpZXdGbGFnLkF0dHJzRGlydHkgKi8pIHtcbiAgICAgICAgICAgIGNsZWFyQXR0cmlidXRlcyh0aGlzLmRvbSk7XG4gICAgICAgICAgICB0aGlzLmRvbS5jbGFzc05hbWUgPSBcImNtLWxpbmVcIjtcbiAgICAgICAgICAgIHRoaXMucHJldkF0dHJzID0gdGhpcy5hdHRycyA/IG51bGwgOiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucHJldkF0dHJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHVwZGF0ZUF0dHJzKHRoaXMuZG9tLCB0aGlzLnByZXZBdHRycywgdGhpcy5hdHRycyk7XG4gICAgICAgICAgICB0aGlzLmRvbS5jbGFzc0xpc3QuYWRkKFwiY20tbGluZVwiKTtcbiAgICAgICAgICAgIHRoaXMucHJldkF0dHJzID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLnN5bmModmlldywgdHJhY2spO1xuICAgICAgICBsZXQgbGFzdCA9IHRoaXMuZG9tLmxhc3RDaGlsZDtcbiAgICAgICAgd2hpbGUgKGxhc3QgJiYgQ29udGVudFZpZXcuZ2V0KGxhc3QpIGluc3RhbmNlb2YgTWFya1ZpZXcpXG4gICAgICAgICAgICBsYXN0ID0gbGFzdC5sYXN0Q2hpbGQ7XG4gICAgICAgIGlmICghbGFzdCB8fCAhdGhpcy5sZW5ndGggfHxcbiAgICAgICAgICAgIGxhc3Qubm9kZU5hbWUgIT0gXCJCUlwiICYmICgoX2EgPSBDb250ZW50Vmlldy5nZXQobGFzdCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pc0VkaXRhYmxlKSA9PSBmYWxzZSAmJlxuICAgICAgICAgICAgICAgICghYnJvd3Nlci5pb3MgfHwgIXRoaXMuY2hpbGRyZW4uc29tZShjaCA9PiBjaCBpbnN0YW5jZW9mIFRleHRWaWV3KSkpIHtcbiAgICAgICAgICAgIGxldCBoYWNrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkJSXCIpO1xuICAgICAgICAgICAgaGFjay5jbUlnbm9yZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmRvbS5hcHBlbmRDaGlsZChoYWNrKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBtZWFzdXJlVGV4dFNpemUoKSB7XG4gICAgICAgIGlmICh0aGlzLmNoaWxkcmVuLmxlbmd0aCA9PSAwIHx8IHRoaXMubGVuZ3RoID4gMjApXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgbGV0IHRvdGFsV2lkdGggPSAwLCB0ZXh0SGVpZ2h0O1xuICAgICAgICBmb3IgKGxldCBjaGlsZCBvZiB0aGlzLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICBpZiAoIShjaGlsZCBpbnN0YW5jZW9mIFRleHRWaWV3KSB8fCAvW14gLX5dLy50ZXN0KGNoaWxkLnRleHQpKVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgbGV0IHJlY3RzID0gY2xpZW50UmVjdHNGb3IoY2hpbGQuZG9tKTtcbiAgICAgICAgICAgIGlmIChyZWN0cy5sZW5ndGggIT0gMSlcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIHRvdGFsV2lkdGggKz0gcmVjdHNbMF0ud2lkdGg7XG4gICAgICAgICAgICB0ZXh0SGVpZ2h0ID0gcmVjdHNbMF0uaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhdG90YWxXaWR0aCA/IG51bGwgOiB7XG4gICAgICAgICAgICBsaW5lSGVpZ2h0OiB0aGlzLmRvbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQsXG4gICAgICAgICAgICBjaGFyV2lkdGg6IHRvdGFsV2lkdGggLyB0aGlzLmxlbmd0aCxcbiAgICAgICAgICAgIHRleHRIZWlnaHRcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29vcmRzQXQocG9zLCBzaWRlKSB7XG4gICAgICAgIGxldCByZWN0ID0gY29vcmRzSW5DaGlsZHJlbih0aGlzLCBwb3MsIHNpZGUpO1xuICAgICAgICAvLyBDb3JyZWN0IHJlY3RhbmdsZSBoZWlnaHQgZm9yIGVtcHR5IGxpbmVzIHdoZW4gdGhlIHJldHVybmVkXG4gICAgICAgIC8vIGhlaWdodCBpcyBsYXJnZXIgdGhhbiB0aGUgdGV4dCBoZWlnaHQuXG4gICAgICAgIGlmICghdGhpcy5jaGlsZHJlbi5sZW5ndGggJiYgcmVjdCAmJiB0aGlzLnBhcmVudCkge1xuICAgICAgICAgICAgbGV0IHsgaGVpZ2h0T3JhY2xlIH0gPSB0aGlzLnBhcmVudC52aWV3LnZpZXdTdGF0ZSwgaGVpZ2h0ID0gcmVjdC5ib3R0b20gLSByZWN0LnRvcDtcbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhoZWlnaHQgLSBoZWlnaHRPcmFjbGUubGluZUhlaWdodCkgPCAyICYmIGhlaWdodE9yYWNsZS50ZXh0SGVpZ2h0IDwgaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgbGV0IGRpc3QgPSAoaGVpZ2h0IC0gaGVpZ2h0T3JhY2xlLnRleHRIZWlnaHQpIC8gMjtcbiAgICAgICAgICAgICAgICByZXR1cm4geyB0b3A6IHJlY3QudG9wICsgZGlzdCwgYm90dG9tOiByZWN0LmJvdHRvbSAtIGRpc3QsIGxlZnQ6IHJlY3QubGVmdCwgcmlnaHQ6IHJlY3QubGVmdCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWN0O1xuICAgIH1cbiAgICBiZWNvbWUob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIG90aGVyIGluc3RhbmNlb2YgTGluZVZpZXcgJiYgdGhpcy5jaGlsZHJlbi5sZW5ndGggPT0gMCAmJiBvdGhlci5jaGlsZHJlbi5sZW5ndGggPT0gMCAmJlxuICAgICAgICAgICAgYXR0cnNFcSh0aGlzLmF0dHJzLCBvdGhlci5hdHRycykgJiYgdGhpcy5icmVha0FmdGVyID09IG90aGVyLmJyZWFrQWZ0ZXI7XG4gICAgfVxuICAgIGNvdmVycygpIHsgcmV0dXJuIHRydWU7IH1cbiAgICBzdGF0aWMgZmluZChkb2NWaWV3LCBwb3MpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIG9mZiA9IDA7IGkgPCBkb2NWaWV3LmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgYmxvY2sgPSBkb2NWaWV3LmNoaWxkcmVuW2ldLCBlbmQgPSBvZmYgKyBibG9jay5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoZW5kID49IHBvcykge1xuICAgICAgICAgICAgICAgIGlmIChibG9jayBpbnN0YW5jZW9mIExpbmVWaWV3KVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmxvY2s7XG4gICAgICAgICAgICAgICAgaWYgKGVuZCA+IHBvcylcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvZmYgPSBlbmQgKyBibG9jay5icmVha0FmdGVyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbmNsYXNzIEJsb2NrV2lkZ2V0VmlldyBleHRlbmRzIENvbnRlbnRWaWV3IHtcbiAgICBjb25zdHJ1Y3Rvcih3aWRnZXQsIGxlbmd0aCwgZGVjbykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLndpZGdldCA9IHdpZGdldDtcbiAgICAgICAgdGhpcy5sZW5ndGggPSBsZW5ndGg7XG4gICAgICAgIHRoaXMuZGVjbyA9IGRlY287XG4gICAgICAgIHRoaXMuYnJlYWtBZnRlciA9IDA7XG4gICAgICAgIHRoaXMucHJldldpZGdldCA9IG51bGw7XG4gICAgfVxuICAgIG1lcmdlKGZyb20sIHRvLCBzb3VyY2UsIF90YWtlRGVjbywgb3BlblN0YXJ0LCBvcGVuRW5kKSB7XG4gICAgICAgIGlmIChzb3VyY2UgJiYgKCEoc291cmNlIGluc3RhbmNlb2YgQmxvY2tXaWRnZXRWaWV3KSB8fCAhdGhpcy53aWRnZXQuY29tcGFyZShzb3VyY2Uud2lkZ2V0KSB8fFxuICAgICAgICAgICAgZnJvbSA+IDAgJiYgb3BlblN0YXJ0IDw9IDAgfHwgdG8gPCB0aGlzLmxlbmd0aCAmJiBvcGVuRW5kIDw9IDApKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB0aGlzLmxlbmd0aCA9IGZyb20gKyAoc291cmNlID8gc291cmNlLmxlbmd0aCA6IDApICsgKHRoaXMubGVuZ3RoIC0gdG8pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZG9tQXRQb3MocG9zKSB7XG4gICAgICAgIHJldHVybiBwb3MgPT0gMCA/IERPTVBvcy5iZWZvcmUodGhpcy5kb20pIDogRE9NUG9zLmFmdGVyKHRoaXMuZG9tLCBwb3MgPT0gdGhpcy5sZW5ndGgpO1xuICAgIH1cbiAgICBzcGxpdChhdCkge1xuICAgICAgICBsZXQgbGVuID0gdGhpcy5sZW5ndGggLSBhdDtcbiAgICAgICAgdGhpcy5sZW5ndGggPSBhdDtcbiAgICAgICAgbGV0IGVuZCA9IG5ldyBCbG9ja1dpZGdldFZpZXcodGhpcy53aWRnZXQsIGxlbiwgdGhpcy5kZWNvKTtcbiAgICAgICAgZW5kLmJyZWFrQWZ0ZXIgPSB0aGlzLmJyZWFrQWZ0ZXI7XG4gICAgICAgIHJldHVybiBlbmQ7XG4gICAgfVxuICAgIGdldCBjaGlsZHJlbigpIHsgcmV0dXJuIG5vQ2hpbGRyZW47IH1cbiAgICBzeW5jKHZpZXcpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRvbSB8fCAhdGhpcy53aWRnZXQudXBkYXRlRE9NKHRoaXMuZG9tLCB2aWV3KSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZG9tICYmIHRoaXMucHJldldpZGdldClcbiAgICAgICAgICAgICAgICB0aGlzLnByZXZXaWRnZXQuZGVzdHJveSh0aGlzLmRvbSk7XG4gICAgICAgICAgICB0aGlzLnByZXZXaWRnZXQgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5zZXRET00odGhpcy53aWRnZXQudG9ET00odmlldykpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLndpZGdldC5lZGl0YWJsZSlcbiAgICAgICAgICAgICAgICB0aGlzLmRvbS5jb250ZW50RWRpdGFibGUgPSBcImZhbHNlXCI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IG92ZXJyaWRlRE9NVGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50ID8gdGhpcy5wYXJlbnQudmlldy5zdGF0ZS5kb2Muc2xpY2UodGhpcy5wb3NBdFN0YXJ0LCB0aGlzLnBvc0F0RW5kKSA6IHN0YXRlLlRleHQuZW1wdHk7XG4gICAgfVxuICAgIGRvbUJvdW5kc0Fyb3VuZCgpIHsgcmV0dXJuIG51bGw7IH1cbiAgICBiZWNvbWUob3RoZXIpIHtcbiAgICAgICAgaWYgKG90aGVyIGluc3RhbmNlb2YgQmxvY2tXaWRnZXRWaWV3ICYmXG4gICAgICAgICAgICBvdGhlci53aWRnZXQuY29uc3RydWN0b3IgPT0gdGhpcy53aWRnZXQuY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIGlmICghb3RoZXIud2lkZ2V0LmNvbXBhcmUodGhpcy53aWRnZXQpKVxuICAgICAgICAgICAgICAgIHRoaXMubWFya0RpcnR5KHRydWUpO1xuICAgICAgICAgICAgaWYgKHRoaXMuZG9tICYmICF0aGlzLnByZXZXaWRnZXQpXG4gICAgICAgICAgICAgICAgdGhpcy5wcmV2V2lkZ2V0ID0gdGhpcy53aWRnZXQ7XG4gICAgICAgICAgICB0aGlzLndpZGdldCA9IG90aGVyLndpZGdldDtcbiAgICAgICAgICAgIHRoaXMubGVuZ3RoID0gb3RoZXIubGVuZ3RoO1xuICAgICAgICAgICAgdGhpcy5kZWNvID0gb3RoZXIuZGVjbztcbiAgICAgICAgICAgIHRoaXMuYnJlYWtBZnRlciA9IG90aGVyLmJyZWFrQWZ0ZXI7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlnbm9yZU11dGF0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgIGlnbm9yZUV2ZW50KGV2ZW50KSB7IHJldHVybiB0aGlzLndpZGdldC5pZ25vcmVFdmVudChldmVudCk7IH1cbiAgICBnZXQgaXNFZGl0YWJsZSgpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgZ2V0IGlzV2lkZ2V0KCkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgIGNvb3Jkc0F0KHBvcywgc2lkZSkge1xuICAgICAgICByZXR1cm4gdGhpcy53aWRnZXQuY29vcmRzQXQodGhpcy5kb20sIHBvcywgc2lkZSk7XG4gICAgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgICAgICAgaWYgKHRoaXMuZG9tKVxuICAgICAgICAgICAgdGhpcy53aWRnZXQuZGVzdHJveSh0aGlzLmRvbSk7XG4gICAgfVxuICAgIGNvdmVycyhzaWRlKSB7XG4gICAgICAgIGxldCB7IHN0YXJ0U2lkZSwgZW5kU2lkZSB9ID0gdGhpcy5kZWNvO1xuICAgICAgICByZXR1cm4gc3RhcnRTaWRlID09IGVuZFNpZGUgPyBmYWxzZSA6IHNpZGUgPCAwID8gc3RhcnRTaWRlIDwgMCA6IGVuZFNpZGUgPiAwO1xuICAgIH1cbn1cblxuLyoqXG5XaWRnZXRzIGFkZGVkIHRvIHRoZSBjb250ZW50IGFyZSBkZXNjcmliZWQgYnkgc3ViY2xhc3NlcyBvZiB0aGlzXG5jbGFzcy4gVXNpbmcgYSBkZXNjcmlwdGlvbiBvYmplY3QgbGlrZSB0aGF0IG1ha2VzIGl0IHBvc3NpYmxlIHRvXG5kZWxheSBjcmVhdGluZyBvZiB0aGUgRE9NIHN0cnVjdHVyZSBmb3IgYSB3aWRnZXQgdW50aWwgaXQgaXNcbm5lZWRlZCwgYW5kIHRvIGF2b2lkIHJlZHJhd2luZyB3aWRnZXRzIGV2ZW4gaWYgdGhlIGRlY29yYXRpb25zXG50aGF0IGRlZmluZSB0aGVtIGFyZSByZWNyZWF0ZWQuXG4qL1xuY2xhc3MgV2lkZ2V0VHlwZSB7XG4gICAgLyoqXG4gICAgQ29tcGFyZSB0aGlzIGluc3RhbmNlIHRvIGFub3RoZXIgaW5zdGFuY2Ugb2YgdGhlIHNhbWUgdHlwZS5cbiAgICAoVHlwZVNjcmlwdCBjYW4ndCBleHByZXNzIHRoaXMsIGJ1dCBvbmx5IGluc3RhbmNlcyBvZiB0aGUgc2FtZVxuICAgIHNwZWNpZmljIGNsYXNzIHdpbGwgYmUgcGFzc2VkIHRvIHRoaXMgbWV0aG9kLikgVGhpcyBpcyB1c2VkIHRvXG4gICAgYXZvaWQgcmVkcmF3aW5nIHdpZGdldHMgd2hlbiB0aGV5IGFyZSByZXBsYWNlZCBieSBhIG5ld1xuICAgIGRlY29yYXRpb24gb2YgdGhlIHNhbWUgdHlwZS4gVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24ganVzdFxuICAgIHJldHVybnMgYGZhbHNlYCwgd2hpY2ggd2lsbCBjYXVzZSBuZXcgaW5zdGFuY2VzIG9mIHRoZSB3aWRnZXQgdG9cbiAgICBhbHdheXMgYmUgcmVkcmF3bi5cbiAgICAqL1xuICAgIGVxKHdpZGdldCkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAvKipcbiAgICBVcGRhdGUgYSBET00gZWxlbWVudCBjcmVhdGVkIGJ5IGEgd2lkZ2V0IG9mIHRoZSBzYW1lIHR5cGUgKGJ1dFxuICAgIGRpZmZlcmVudCwgbm9uLWBlcWAgY29udGVudCkgdG8gcmVmbGVjdCB0aGlzIHdpZGdldC4gTWF5IHJldHVyblxuICAgIHRydWUgdG8gaW5kaWNhdGUgdGhhdCBpdCBjb3VsZCB1cGRhdGUsIGZhbHNlIHRvIGluZGljYXRlIGl0XG4gICAgY291bGRuJ3QgKGluIHdoaWNoIGNhc2UgdGhlIHdpZGdldCB3aWxsIGJlIHJlZHJhd24pLiBUaGUgZGVmYXVsdFxuICAgIGltcGxlbWVudGF0aW9uIGp1c3QgcmV0dXJucyBmYWxzZS5cbiAgICAqL1xuICAgIHVwZGF0ZURPTShkb20sIHZpZXcpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBjb21wYXJlKG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzID09IG90aGVyIHx8IHRoaXMuY29uc3RydWN0b3IgPT0gb3RoZXIuY29uc3RydWN0b3IgJiYgdGhpcy5lcShvdGhlcik7XG4gICAgfVxuICAgIC8qKlxuICAgIFRoZSBlc3RpbWF0ZWQgaGVpZ2h0IHRoaXMgd2lkZ2V0IHdpbGwgaGF2ZSwgdG8gYmUgdXNlZCB3aGVuXG4gICAgZXN0aW1hdGluZyB0aGUgaGVpZ2h0IG9mIGNvbnRlbnQgdGhhdCBoYXNuJ3QgYmVlbiBkcmF3bi4gTWF5XG4gICAgcmV0dXJuIC0xIHRvIGluZGljYXRlIHlvdSBkb24ndCBrbm93LiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvblxuICAgIHJldHVybnMgLTEuXG4gICAgKi9cbiAgICBnZXQgZXN0aW1hdGVkSGVpZ2h0KCkgeyByZXR1cm4gLTE7IH1cbiAgICAvKipcbiAgICBGb3IgaW5saW5lIHdpZGdldHMgdGhhdCBhcmUgZGlzcGxheWVkIGlubGluZSAoYXMgb3Bwb3NlZCB0b1xuICAgIGBpbmxpbmUtYmxvY2tgKSBhbmQgaW50cm9kdWNlIGxpbmUgYnJlYWtzICh0aHJvdWdoIGA8YnI+YCB0YWdzXG4gICAgb3IgdGV4dHVhbCBuZXdsaW5lcyksIHRoaXMgbXVzdCBpbmRpY2F0ZSB0aGUgYW1vdW50IG9mIGxpbmVcbiAgICBicmVha3MgdGhleSBpbnRyb2R1Y2UuIERlZmF1bHRzIHRvIDAuXG4gICAgKi9cbiAgICBnZXQgbGluZUJyZWFrcygpIHsgcmV0dXJuIDA7IH1cbiAgICAvKipcbiAgICBDYW4gYmUgdXNlZCB0byBjb25maWd1cmUgd2hpY2gga2luZHMgb2YgZXZlbnRzIGluc2lkZSB0aGUgd2lkZ2V0XG4gICAgc2hvdWxkIGJlIGlnbm9yZWQgYnkgdGhlIGVkaXRvci4gVGhlIGRlZmF1bHQgaXMgdG8gaWdub3JlIGFsbFxuICAgIGV2ZW50cy5cbiAgICAqL1xuICAgIGlnbm9yZUV2ZW50KGV2ZW50KSB7IHJldHVybiB0cnVlOyB9XG4gICAgLyoqXG4gICAgT3ZlcnJpZGUgdGhlIHdheSBzY3JlZW4gY29vcmRpbmF0ZXMgZm9yIHBvc2l0aW9ucyBhdC9pbiB0aGVcbiAgICB3aWRnZXQgYXJlIGZvdW5kLiBgcG9zYCB3aWxsIGJlIHRoZSBvZmZzZXQgaW50byB0aGUgd2lkZ2V0LCBhbmRcbiAgICBgc2lkZWAgdGhlIHNpZGUgb2YgdGhlIHBvc2l0aW9uIHRoYXQgaXMgYmVpbmcgcXVlcmllZOKAlGxlc3MgdGhhblxuICAgIHplcm8gZm9yIGJlZm9yZSwgZ3JlYXRlciB0aGFuIHplcm8gZm9yIGFmdGVyLCBhbmQgemVybyBmb3JcbiAgICBkaXJlY3RseSBhdCB0aGF0IHBvc2l0aW9uLlxuICAgICovXG4gICAgY29vcmRzQXQoZG9tLCBwb3MsIHNpZGUpIHsgcmV0dXJuIG51bGw7IH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGdldCBpc0hpZGRlbigpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBnZXQgZWRpdGFibGUoKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIC8qKlxuICAgIFRoaXMgaXMgY2FsbGVkIHdoZW4gdGhlIGFuIGluc3RhbmNlIG9mIHRoZSB3aWRnZXQgaXMgcmVtb3ZlZFxuICAgIGZyb20gdGhlIGVkaXRvciB2aWV3LlxuICAgICovXG4gICAgZGVzdHJveShkb20pIHsgfVxufVxuLyoqXG5UaGUgZGlmZmVyZW50IHR5cGVzIG9mIGJsb2NrcyB0aGF0IGNhbiBvY2N1ciBpbiBhbiBlZGl0b3Igdmlldy5cbiovXG5leHBvcnRzLkJsb2NrVHlwZSA9IHZvaWQgMDtcbihmdW5jdGlvbiAoQmxvY2tUeXBlKSB7XG4gICAgLyoqXG4gICAgQSBsaW5lIG9mIHRleHQuXG4gICAgKi9cbiAgICBCbG9ja1R5cGVbQmxvY2tUeXBlW1wiVGV4dFwiXSA9IDBdID0gXCJUZXh0XCI7XG4gICAgLyoqXG4gICAgQSBibG9jayB3aWRnZXQgYXNzb2NpYXRlZCB3aXRoIHRoZSBwb3NpdGlvbiBhZnRlciBpdC5cbiAgICAqL1xuICAgIEJsb2NrVHlwZVtCbG9ja1R5cGVbXCJXaWRnZXRCZWZvcmVcIl0gPSAxXSA9IFwiV2lkZ2V0QmVmb3JlXCI7XG4gICAgLyoqXG4gICAgQSBibG9jayB3aWRnZXQgYXNzb2NpYXRlZCB3aXRoIHRoZSBwb3NpdGlvbiBiZWZvcmUgaXQuXG4gICAgKi9cbiAgICBCbG9ja1R5cGVbQmxvY2tUeXBlW1wiV2lkZ2V0QWZ0ZXJcIl0gPSAyXSA9IFwiV2lkZ2V0QWZ0ZXJcIjtcbiAgICAvKipcbiAgICBBIGJsb2NrIHdpZGdldCBbcmVwbGFjaW5nXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3ZpZXcuRGVjb3JhdGlvbl5yZXBsYWNlKSBhIHJhbmdlIG9mIGNvbnRlbnQuXG4gICAgKi9cbiAgICBCbG9ja1R5cGVbQmxvY2tUeXBlW1wiV2lkZ2V0UmFuZ2VcIl0gPSAzXSA9IFwiV2lkZ2V0UmFuZ2VcIjtcbn0pKGV4cG9ydHMuQmxvY2tUeXBlIHx8IChleHBvcnRzLkJsb2NrVHlwZSA9IHt9KSk7XG4vKipcbkEgZGVjb3JhdGlvbiBwcm92aWRlcyBpbmZvcm1hdGlvbiBvbiBob3cgdG8gZHJhdyBvciBzdHlsZSBhIHBpZWNlXG5vZiBjb250ZW50LiBZb3UnbGwgdXN1YWxseSB1c2UgaXQgd3JhcHBlZCBpbiBhXG5bYFJhbmdlYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5SYW5nZSksIHdoaWNoIGFkZHMgYSBzdGFydCBhbmQgZW5kIHBvc2l0aW9uLlxuQG5vbmFic3RyYWN0XG4qL1xuY2xhc3MgRGVjb3JhdGlvbiBleHRlbmRzIHN0YXRlLlJhbmdlVmFsdWUge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgc3RhcnRTaWRlLCBcbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGVuZFNpZGUsIFxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgd2lkZ2V0LCBcbiAgICAvKipcbiAgICBUaGUgY29uZmlnIG9iamVjdCB1c2VkIHRvIGNyZWF0ZSB0aGlzIGRlY29yYXRpb24uIFlvdSBjYW5cbiAgICBpbmNsdWRlIGFkZGl0aW9uYWwgcHJvcGVydGllcyBpbiB0aGVyZSB0byBzdG9yZSBtZXRhZGF0YSBhYm91dFxuICAgIHlvdXIgZGVjb3JhdGlvbi5cbiAgICAqL1xuICAgIHNwZWMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5zdGFydFNpZGUgPSBzdGFydFNpZGU7XG4gICAgICAgIHRoaXMuZW5kU2lkZSA9IGVuZFNpZGU7XG4gICAgICAgIHRoaXMud2lkZ2V0ID0gd2lkZ2V0O1xuICAgICAgICB0aGlzLnNwZWMgPSBzcGVjO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGdldCBoZWlnaHRSZWxldmFudCgpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgbWFyayBkZWNvcmF0aW9uLCB3aGljaCBpbmZsdWVuY2VzIHRoZSBzdHlsaW5nIG9mIHRoZVxuICAgIGNvbnRlbnQgaW4gaXRzIHJhbmdlLiBOZXN0ZWQgbWFyayBkZWNvcmF0aW9ucyB3aWxsIGNhdXNlIG5lc3RlZFxuICAgIERPTSBlbGVtZW50cyB0byBiZSBjcmVhdGVkLiBOZXN0aW5nIG9yZGVyIGlzIGRldGVybWluZWQgYnlcbiAgICBwcmVjZWRlbmNlIG9mIHRoZSBbZmFjZXRdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jdmlldy5FZGl0b3JWaWV3XmRlY29yYXRpb25zKSwgd2l0aFxuICAgIHRoZSBoaWdoZXItcHJlY2VkZW5jZSBkZWNvcmF0aW9ucyBjcmVhdGluZyB0aGUgaW5uZXIgRE9NIG5vZGVzLlxuICAgIFN1Y2ggZWxlbWVudHMgYXJlIHNwbGl0IG9uIGxpbmUgYm91bmRhcmllcyBhbmQgb24gdGhlIGJvdW5kYXJpZXNcbiAgICBvZiBsb3dlci1wcmVjZWRlbmNlIGRlY29yYXRpb25zLlxuICAgICovXG4gICAgc3RhdGljIG1hcmsoc3BlYykge1xuICAgICAgICByZXR1cm4gbmV3IE1hcmtEZWNvcmF0aW9uKHNwZWMpO1xuICAgIH1cbiAgICAvKipcbiAgICBDcmVhdGUgYSB3aWRnZXQgZGVjb3JhdGlvbiwgd2hpY2ggZGlzcGxheXMgYSBET00gZWxlbWVudCBhdCB0aGVcbiAgICBnaXZlbiBwb3NpdGlvbi5cbiAgICAqL1xuICAgIHN0YXRpYyB3aWRnZXQoc3BlYykge1xuICAgICAgICBsZXQgc2lkZSA9IE1hdGgubWF4KC0xMDAwMCwgTWF0aC5taW4oMTAwMDAsIHNwZWMuc2lkZSB8fCAwKSksIGJsb2NrID0gISFzcGVjLmJsb2NrO1xuICAgICAgICBzaWRlICs9IChibG9jayAmJiAhc3BlYy5pbmxpbmVPcmRlcilcbiAgICAgICAgICAgID8gKHNpZGUgPiAwID8gMzAwMDAwMDAwIC8qIFNpZGUuQmxvY2tBZnRlciAqLyA6IC00MDAwMDAwMDAgLyogU2lkZS5CbG9ja0JlZm9yZSAqLylcbiAgICAgICAgICAgIDogKHNpZGUgPiAwID8gMTAwMDAwMDAwIC8qIFNpZGUuSW5saW5lQWZ0ZXIgKi8gOiAtMTAwMDAwMDAwIC8qIFNpZGUuSW5saW5lQmVmb3JlICovKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQb2ludERlY29yYXRpb24oc3BlYywgc2lkZSwgc2lkZSwgYmxvY2ssIHNwZWMud2lkZ2V0IHx8IG51bGwsIGZhbHNlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgcmVwbGFjZSBkZWNvcmF0aW9uIHdoaWNoIHJlcGxhY2VzIHRoZSBnaXZlbiByYW5nZSB3aXRoXG4gICAgYSB3aWRnZXQsIG9yIHNpbXBseSBoaWRlcyBpdC5cbiAgICAqL1xuICAgIHN0YXRpYyByZXBsYWNlKHNwZWMpIHtcbiAgICAgICAgbGV0IGJsb2NrID0gISFzcGVjLmJsb2NrLCBzdGFydFNpZGUsIGVuZFNpZGU7XG4gICAgICAgIGlmIChzcGVjLmlzQmxvY2tHYXApIHtcbiAgICAgICAgICAgIHN0YXJ0U2lkZSA9IC01MDAwMDAwMDAgLyogU2lkZS5HYXBTdGFydCAqLztcbiAgICAgICAgICAgIGVuZFNpZGUgPSA0MDAwMDAwMDAgLyogU2lkZS5HYXBFbmQgKi87XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgeyBzdGFydCwgZW5kIH0gPSBnZXRJbmNsdXNpdmUoc3BlYywgYmxvY2spO1xuICAgICAgICAgICAgc3RhcnRTaWRlID0gKHN0YXJ0ID8gKGJsb2NrID8gLTMwMDAwMDAwMCAvKiBTaWRlLkJsb2NrSW5jU3RhcnQgKi8gOiAtMSAvKiBTaWRlLklubGluZUluY1N0YXJ0ICovKSA6IDUwMDAwMDAwMCAvKiBTaWRlLk5vbkluY1N0YXJ0ICovKSAtIDE7XG4gICAgICAgICAgICBlbmRTaWRlID0gKGVuZCA/IChibG9jayA/IDIwMDAwMDAwMCAvKiBTaWRlLkJsb2NrSW5jRW5kICovIDogMSAvKiBTaWRlLklubGluZUluY0VuZCAqLykgOiAtNjAwMDAwMDAwIC8qIFNpZGUuTm9uSW5jRW5kICovKSArIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBQb2ludERlY29yYXRpb24oc3BlYywgc3RhcnRTaWRlLCBlbmRTaWRlLCBibG9jaywgc3BlYy53aWRnZXQgfHwgbnVsbCwgdHJ1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgIENyZWF0ZSBhIGxpbmUgZGVjb3JhdGlvbiwgd2hpY2ggY2FuIGFkZCBET00gYXR0cmlidXRlcyB0byB0aGVcbiAgICBsaW5lIHN0YXJ0aW5nIGF0IHRoZSBnaXZlbiBwb3NpdGlvbi5cbiAgICAqL1xuICAgIHN0YXRpYyBsaW5lKHNwZWMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMaW5lRGVjb3JhdGlvbihzcGVjKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQnVpbGQgYSBbYERlY29yYXRpb25TZXRgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3ZpZXcuRGVjb3JhdGlvblNldCkgZnJvbSB0aGUgZ2l2ZW5cbiAgICBkZWNvcmF0ZWQgcmFuZ2Ugb3IgcmFuZ2VzLiBJZiB0aGUgcmFuZ2VzIGFyZW4ndCBhbHJlYWR5IHNvcnRlZCxcbiAgICBwYXNzIGB0cnVlYCBmb3IgYHNvcnRgIHRvIG1ha2UgdGhlIGxpYnJhcnkgc29ydCB0aGVtIGZvciB5b3UuXG4gICAgKi9cbiAgICBzdGF0aWMgc2V0KG9mLCBzb3J0ID0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlLlJhbmdlU2V0Lm9mKG9mLCBzb3J0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBoYXNIZWlnaHQoKSB7IHJldHVybiB0aGlzLndpZGdldCA/IHRoaXMud2lkZ2V0LmVzdGltYXRlZEhlaWdodCA+IC0xIDogZmFsc2U7IH1cbn1cbi8qKlxuVGhlIGVtcHR5IHNldCBvZiBkZWNvcmF0aW9ucy5cbiovXG5EZWNvcmF0aW9uLm5vbmUgPSBzdGF0ZS5SYW5nZVNldC5lbXB0eTtcbmNsYXNzIE1hcmtEZWNvcmF0aW9uIGV4dGVuZHMgRGVjb3JhdGlvbiB7XG4gICAgY29uc3RydWN0b3Ioc3BlYykge1xuICAgICAgICBsZXQgeyBzdGFydCwgZW5kIH0gPSBnZXRJbmNsdXNpdmUoc3BlYyk7XG4gICAgICAgIHN1cGVyKHN0YXJ0ID8gLTEgLyogU2lkZS5JbmxpbmVJbmNTdGFydCAqLyA6IDUwMDAwMDAwMCAvKiBTaWRlLk5vbkluY1N0YXJ0ICovLCBlbmQgPyAxIC8qIFNpZGUuSW5saW5lSW5jRW5kICovIDogLTYwMDAwMDAwMCAvKiBTaWRlLk5vbkluY0VuZCAqLywgbnVsbCwgc3BlYyk7XG4gICAgICAgIHRoaXMudGFnTmFtZSA9IHNwZWMudGFnTmFtZSB8fCBcInNwYW5cIjtcbiAgICAgICAgdGhpcy5jbGFzcyA9IHNwZWMuY2xhc3MgfHwgXCJcIjtcbiAgICAgICAgdGhpcy5hdHRycyA9IHNwZWMuYXR0cmlidXRlcyB8fCBudWxsO1xuICAgIH1cbiAgICBlcShvdGhlcikge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICByZXR1cm4gdGhpcyA9PSBvdGhlciB8fFxuICAgICAgICAgICAgb3RoZXIgaW5zdGFuY2VvZiBNYXJrRGVjb3JhdGlvbiAmJlxuICAgICAgICAgICAgICAgIHRoaXMudGFnTmFtZSA9PSBvdGhlci50YWdOYW1lICYmXG4gICAgICAgICAgICAgICAgKHRoaXMuY2xhc3MgfHwgKChfYSA9IHRoaXMuYXR0cnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jbGFzcykpID09IChvdGhlci5jbGFzcyB8fCAoKF9iID0gb3RoZXIuYXR0cnMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jbGFzcykpICYmXG4gICAgICAgICAgICAgICAgYXR0cnNFcSh0aGlzLmF0dHJzLCBvdGhlci5hdHRycywgXCJjbGFzc1wiKTtcbiAgICB9XG4gICAgcmFuZ2UoZnJvbSwgdG8gPSBmcm9tKSB7XG4gICAgICAgIGlmIChmcm9tID49IHRvKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJNYXJrIGRlY29yYXRpb25zIG1heSBub3QgYmUgZW1wdHlcIik7XG4gICAgICAgIHJldHVybiBzdXBlci5yYW5nZShmcm9tLCB0byk7XG4gICAgfVxufVxuTWFya0RlY29yYXRpb24ucHJvdG90eXBlLnBvaW50ID0gZmFsc2U7XG5jbGFzcyBMaW5lRGVjb3JhdGlvbiBleHRlbmRzIERlY29yYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKHNwZWMpIHtcbiAgICAgICAgc3VwZXIoLTIwMDAwMDAwMCAvKiBTaWRlLkxpbmUgKi8sIC0yMDAwMDAwMDAgLyogU2lkZS5MaW5lICovLCBudWxsLCBzcGVjKTtcbiAgICB9XG4gICAgZXEob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIG90aGVyIGluc3RhbmNlb2YgTGluZURlY29yYXRpb24gJiZcbiAgICAgICAgICAgIHRoaXMuc3BlYy5jbGFzcyA9PSBvdGhlci5zcGVjLmNsYXNzICYmXG4gICAgICAgICAgICBhdHRyc0VxKHRoaXMuc3BlYy5hdHRyaWJ1dGVzLCBvdGhlci5zcGVjLmF0dHJpYnV0ZXMpO1xuICAgIH1cbiAgICByYW5nZShmcm9tLCB0byA9IGZyb20pIHtcbiAgICAgICAgaWYgKHRvICE9IGZyb20pXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkxpbmUgZGVjb3JhdGlvbiByYW5nZXMgbXVzdCBiZSB6ZXJvLWxlbmd0aFwiKTtcbiAgICAgICAgcmV0dXJuIHN1cGVyLnJhbmdlKGZyb20sIHRvKTtcbiAgICB9XG59XG5MaW5lRGVjb3JhdGlvbi5wcm90b3R5cGUubWFwTW9kZSA9IHN0YXRlLk1hcE1vZGUuVHJhY2tCZWZvcmU7XG5MaW5lRGVjb3JhdGlvbi5wcm90b3R5cGUucG9pbnQgPSB0cnVlO1xuY2xhc3MgUG9pbnREZWNvcmF0aW9uIGV4dGVuZHMgRGVjb3JhdGlvbiB7XG4gICAgY29uc3RydWN0b3Ioc3BlYywgc3RhcnRTaWRlLCBlbmRTaWRlLCBibG9jaywgd2lkZ2V0LCBpc1JlcGxhY2UpIHtcbiAgICAgICAgc3VwZXIoc3RhcnRTaWRlLCBlbmRTaWRlLCB3aWRnZXQsIHNwZWMpO1xuICAgICAgICB0aGlzLmJsb2NrID0gYmxvY2s7XG4gICAgICAgIHRoaXMuaXNSZXBsYWNlID0gaXNSZXBsYWNlO1xuICAgICAgICB0aGlzLm1hcE1vZGUgPSAhYmxvY2sgPyBzdGF0ZS5NYXBNb2RlLlRyYWNrRGVsIDogc3RhcnRTaWRlIDw9IDAgPyBzdGF0ZS5NYXBNb2RlLlRyYWNrQmVmb3JlIDogc3RhdGUuTWFwTW9kZS5UcmFja0FmdGVyO1xuICAgIH1cbiAgICAvLyBPbmx5IHJlbGV2YW50IHdoZW4gdGhpcy5ibG9jayA9PSB0cnVlXG4gICAgZ2V0IHR5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXJ0U2lkZSAhPSB0aGlzLmVuZFNpZGUgPyBleHBvcnRzLkJsb2NrVHlwZS5XaWRnZXRSYW5nZVxuICAgICAgICAgICAgOiB0aGlzLnN0YXJ0U2lkZSA8PSAwID8gZXhwb3J0cy5CbG9ja1R5cGUuV2lkZ2V0QmVmb3JlIDogZXhwb3J0cy5CbG9ja1R5cGUuV2lkZ2V0QWZ0ZXI7XG4gICAgfVxuICAgIGdldCBoZWlnaHRSZWxldmFudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmxvY2sgfHwgISF0aGlzLndpZGdldCAmJiAodGhpcy53aWRnZXQuZXN0aW1hdGVkSGVpZ2h0ID49IDUgfHwgdGhpcy53aWRnZXQubGluZUJyZWFrcyA+IDApO1xuICAgIH1cbiAgICBlcShvdGhlcikge1xuICAgICAgICByZXR1cm4gb3RoZXIgaW5zdGFuY2VvZiBQb2ludERlY29yYXRpb24gJiZcbiAgICAgICAgICAgIHdpZGdldHNFcSh0aGlzLndpZGdldCwgb3RoZXIud2lkZ2V0KSAmJlxuICAgICAgICAgICAgdGhpcy5ibG9jayA9PSBvdGhlci5ibG9jayAmJlxuICAgICAgICAgICAgdGhpcy5zdGFydFNpZGUgPT0gb3RoZXIuc3RhcnRTaWRlICYmIHRoaXMuZW5kU2lkZSA9PSBvdGhlci5lbmRTaWRlO1xuICAgIH1cbiAgICByYW5nZShmcm9tLCB0byA9IGZyb20pIHtcbiAgICAgICAgaWYgKHRoaXMuaXNSZXBsYWNlICYmIChmcm9tID4gdG8gfHwgKGZyb20gPT0gdG8gJiYgdGhpcy5zdGFydFNpZGUgPiAwICYmIHRoaXMuZW5kU2lkZSA8PSAwKSkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludmFsaWQgcmFuZ2UgZm9yIHJlcGxhY2VtZW50IGRlY29yYXRpb25cIik7XG4gICAgICAgIGlmICghdGhpcy5pc1JlcGxhY2UgJiYgdG8gIT0gZnJvbSlcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiV2lkZ2V0IGRlY29yYXRpb25zIGNhbiBvbmx5IGhhdmUgemVyby1sZW5ndGggcmFuZ2VzXCIpO1xuICAgICAgICByZXR1cm4gc3VwZXIucmFuZ2UoZnJvbSwgdG8pO1xuICAgIH1cbn1cblBvaW50RGVjb3JhdGlvbi5wcm90b3R5cGUucG9pbnQgPSB0cnVlO1xuZnVuY3Rpb24gZ2V0SW5jbHVzaXZlKHNwZWMsIGJsb2NrID0gZmFsc2UpIHtcbiAgICBsZXQgeyBpbmNsdXNpdmVTdGFydDogc3RhcnQsIGluY2x1c2l2ZUVuZDogZW5kIH0gPSBzcGVjO1xuICAgIGlmIChzdGFydCA9PSBudWxsKVxuICAgICAgICBzdGFydCA9IHNwZWMuaW5jbHVzaXZlO1xuICAgIGlmIChlbmQgPT0gbnVsbClcbiAgICAgICAgZW5kID0gc3BlYy5pbmNsdXNpdmU7XG4gICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0ICE9PSBudWxsICYmIHN0YXJ0ICE9PSB2b2lkIDAgPyBzdGFydCA6IGJsb2NrLCBlbmQ6IGVuZCAhPT0gbnVsbCAmJiBlbmQgIT09IHZvaWQgMCA/IGVuZCA6IGJsb2NrIH07XG59XG5mdW5jdGlvbiB3aWRnZXRzRXEoYSwgYikge1xuICAgIHJldHVybiBhID09IGIgfHwgISEoYSAmJiBiICYmIGEuY29tcGFyZShiKSk7XG59XG5mdW5jdGlvbiBhZGRSYW5nZShmcm9tLCB0bywgcmFuZ2VzLCBtYXJnaW4gPSAwKSB7XG4gICAgbGV0IGxhc3QgPSByYW5nZXMubGVuZ3RoIC0gMTtcbiAgICBpZiAobGFzdCA+PSAwICYmIHJhbmdlc1tsYXN0XSArIG1hcmdpbiA+PSBmcm9tKVxuICAgICAgICByYW5nZXNbbGFzdF0gPSBNYXRoLm1heChyYW5nZXNbbGFzdF0sIHRvKTtcbiAgICBlbHNlXG4gICAgICAgIHJhbmdlcy5wdXNoKGZyb20sIHRvKTtcbn1cblxuY2xhc3MgQ29udGVudEJ1aWxkZXIge1xuICAgIGNvbnN0cnVjdG9yKGRvYywgcG9zLCBlbmQsIGRpc2FsbG93QmxvY2tFZmZlY3RzRm9yKSB7XG4gICAgICAgIHRoaXMuZG9jID0gZG9jO1xuICAgICAgICB0aGlzLnBvcyA9IHBvcztcbiAgICAgICAgdGhpcy5lbmQgPSBlbmQ7XG4gICAgICAgIHRoaXMuZGlzYWxsb3dCbG9ja0VmZmVjdHNGb3IgPSBkaXNhbGxvd0Jsb2NrRWZmZWN0c0ZvcjtcbiAgICAgICAgdGhpcy5jb250ZW50ID0gW107XG4gICAgICAgIHRoaXMuY3VyTGluZSA9IG51bGw7XG4gICAgICAgIHRoaXMuYnJlYWtBdFN0YXJ0ID0gMDtcbiAgICAgICAgdGhpcy5wZW5kaW5nQnVmZmVyID0gMCAvKiBCdWYuTm8gKi87XG4gICAgICAgIHRoaXMuYnVmZmVyTWFya3MgPSBbXTtcbiAgICAgICAgLy8gU2V0IHRvIGZhbHNlIGRpcmVjdGx5IGFmdGVyIGEgd2lkZ2V0IHRoYXQgY292ZXJzIHRoZSBwb3NpdGlvbiBhZnRlciBpdFxuICAgICAgICB0aGlzLmF0Q3Vyc29yUG9zID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5vcGVuU3RhcnQgPSAtMTtcbiAgICAgICAgdGhpcy5vcGVuRW5kID0gLTE7XG4gICAgICAgIHRoaXMudGV4dCA9IFwiXCI7XG4gICAgICAgIHRoaXMudGV4dE9mZiA9IDA7XG4gICAgICAgIHRoaXMuY3Vyc29yID0gZG9jLml0ZXIoKTtcbiAgICAgICAgdGhpcy5za2lwID0gcG9zO1xuICAgIH1cbiAgICBwb3NDb3ZlcmVkKCkge1xuICAgICAgICBpZiAodGhpcy5jb250ZW50Lmxlbmd0aCA9PSAwKVxuICAgICAgICAgICAgcmV0dXJuICF0aGlzLmJyZWFrQXRTdGFydCAmJiB0aGlzLmRvYy5saW5lQXQodGhpcy5wb3MpLmZyb20gIT0gdGhpcy5wb3M7XG4gICAgICAgIGxldCBsYXN0ID0gdGhpcy5jb250ZW50W3RoaXMuY29udGVudC5sZW5ndGggLSAxXTtcbiAgICAgICAgcmV0dXJuICEobGFzdC5icmVha0FmdGVyIHx8IGxhc3QgaW5zdGFuY2VvZiBCbG9ja1dpZGdldFZpZXcgJiYgbGFzdC5kZWNvLmVuZFNpZGUgPCAwKTtcbiAgICB9XG4gICAgZ2V0TGluZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmN1ckxpbmUpIHtcbiAgICAgICAgICAgIHRoaXMuY29udGVudC5wdXNoKHRoaXMuY3VyTGluZSA9IG5ldyBMaW5lVmlldyk7XG4gICAgICAgICAgICB0aGlzLmF0Q3Vyc29yUG9zID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5jdXJMaW5lO1xuICAgIH1cbiAgICBmbHVzaEJ1ZmZlcihhY3RpdmUgPSB0aGlzLmJ1ZmZlck1hcmtzKSB7XG4gICAgICAgIGlmICh0aGlzLnBlbmRpbmdCdWZmZXIpIHtcbiAgICAgICAgICAgIHRoaXMuY3VyTGluZS5hcHBlbmQod3JhcE1hcmtzKG5ldyBXaWRnZXRCdWZmZXJWaWV3KC0xKSwgYWN0aXZlKSwgYWN0aXZlLmxlbmd0aCk7XG4gICAgICAgICAgICB0aGlzLnBlbmRpbmdCdWZmZXIgPSAwIC8qIEJ1Zi5ObyAqLztcbiAgICAgICAgfVxuICAgIH1cbiAgICBhZGRCbG9ja1dpZGdldCh2aWV3KSB7XG4gICAgICAgIHRoaXMuZmx1c2hCdWZmZXIoKTtcbiAgICAgICAgdGhpcy5jdXJMaW5lID0gbnVsbDtcbiAgICAgICAgdGhpcy5jb250ZW50LnB1c2godmlldyk7XG4gICAgfVxuICAgIGZpbmlzaChvcGVuRW5kKSB7XG4gICAgICAgIGlmICh0aGlzLnBlbmRpbmdCdWZmZXIgJiYgb3BlbkVuZCA8PSB0aGlzLmJ1ZmZlck1hcmtzLmxlbmd0aClcbiAgICAgICAgICAgIHRoaXMuZmx1c2hCdWZmZXIoKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy5wZW5kaW5nQnVmZmVyID0gMCAvKiBCdWYuTm8gKi87XG4gICAgICAgIGlmICghdGhpcy5wb3NDb3ZlcmVkKCkgJiZcbiAgICAgICAgICAgICEob3BlbkVuZCAmJiB0aGlzLmNvbnRlbnQubGVuZ3RoICYmIHRoaXMuY29udGVudFt0aGlzLmNvbnRlbnQubGVuZ3RoIC0gMV0gaW5zdGFuY2VvZiBCbG9ja1dpZGdldFZpZXcpKVxuICAgICAgICAgICAgdGhpcy5nZXRMaW5lKCk7XG4gICAgfVxuICAgIGJ1aWxkVGV4dChsZW5ndGgsIGFjdGl2ZSwgb3BlblN0YXJ0KSB7XG4gICAgICAgIHdoaWxlIChsZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBpZiAodGhpcy50ZXh0T2ZmID09IHRoaXMudGV4dC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBsZXQgeyB2YWx1ZSwgbGluZUJyZWFrLCBkb25lIH0gPSB0aGlzLmN1cnNvci5uZXh0KHRoaXMuc2tpcCk7XG4gICAgICAgICAgICAgICAgdGhpcy5za2lwID0gMDtcbiAgICAgICAgICAgICAgICBpZiAoZG9uZSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmFuIG91dCBvZiB0ZXh0IGNvbnRlbnQgd2hlbiBkcmF3aW5nIGlubGluZSB2aWV3c1wiKTtcbiAgICAgICAgICAgICAgICBpZiAobGluZUJyZWFrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5wb3NDb3ZlcmVkKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdldExpbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29udGVudC5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRbdGhpcy5jb250ZW50Lmxlbmd0aCAtIDFdLmJyZWFrQWZ0ZXIgPSAxO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJyZWFrQXRTdGFydCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmx1c2hCdWZmZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJMaW5lID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdEN1cnNvclBvcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aC0tO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGV4dCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRleHRPZmYgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCB0YWtlID0gTWF0aC5taW4odGhpcy50ZXh0Lmxlbmd0aCAtIHRoaXMudGV4dE9mZiwgbGVuZ3RoLCA1MTIgLyogVC5DaHVuayAqLyk7XG4gICAgICAgICAgICB0aGlzLmZsdXNoQnVmZmVyKGFjdGl2ZS5zbGljZShhY3RpdmUubGVuZ3RoIC0gb3BlblN0YXJ0KSk7XG4gICAgICAgICAgICB0aGlzLmdldExpbmUoKS5hcHBlbmQod3JhcE1hcmtzKG5ldyBUZXh0Vmlldyh0aGlzLnRleHQuc2xpY2UodGhpcy50ZXh0T2ZmLCB0aGlzLnRleHRPZmYgKyB0YWtlKSksIGFjdGl2ZSksIG9wZW5TdGFydCk7XG4gICAgICAgICAgICB0aGlzLmF0Q3Vyc29yUG9zID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMudGV4dE9mZiArPSB0YWtlO1xuICAgICAgICAgICAgbGVuZ3RoIC09IHRha2U7XG4gICAgICAgICAgICBvcGVuU3RhcnQgPSAwO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNwYW4oZnJvbSwgdG8sIGFjdGl2ZSwgb3BlblN0YXJ0KSB7XG4gICAgICAgIHRoaXMuYnVpbGRUZXh0KHRvIC0gZnJvbSwgYWN0aXZlLCBvcGVuU3RhcnQpO1xuICAgICAgICB0aGlzLnBvcyA9IHRvO1xuICAgICAgICBpZiAodGhpcy5vcGVuU3RhcnQgPCAwKVxuICAgICAgICAgICAgdGhpcy5vcGVuU3RhcnQgPSBvcGVuU3RhcnQ7XG4gICAgfVxuICAgIHBvaW50KGZyb20sIHRvLCBkZWNvLCBhY3RpdmUsIG9wZW5TdGFydCwgaW5kZXgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGlzYWxsb3dCbG9ja0VmZmVjdHNGb3JbaW5kZXhdICYmIGRlY28gaW5zdGFuY2VvZiBQb2ludERlY29yYXRpb24pIHtcbiAgICAgICAgICAgIGlmIChkZWNvLmJsb2NrKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiQmxvY2sgZGVjb3JhdGlvbnMgbWF5IG5vdCBiZSBzcGVjaWZpZWQgdmlhIHBsdWdpbnNcIik7XG4gICAgICAgICAgICBpZiAodG8gPiB0aGlzLmRvYy5saW5lQXQodGhpcy5wb3MpLnRvKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiRGVjb3JhdGlvbnMgdGhhdCByZXBsYWNlIGxpbmUgYnJlYWtzIG1heSBub3QgYmUgc3BlY2lmaWVkIHZpYSBwbHVnaW5zXCIpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBsZW4gPSB0byAtIGZyb207XG4gICAgICAgIGlmIChkZWNvIGluc3RhbmNlb2YgUG9pbnREZWNvcmF0aW9uKSB7XG4gICAgICAgICAgICBpZiAoZGVjby5ibG9jaykge1xuICAgICAgICAgICAgICAgIGlmIChkZWNvLnN0YXJ0U2lkZSA+IDAgJiYgIXRoaXMucG9zQ292ZXJlZCgpKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdldExpbmUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZEJsb2NrV2lkZ2V0KG5ldyBCbG9ja1dpZGdldFZpZXcoZGVjby53aWRnZXQgfHwgTnVsbFdpZGdldC5ibG9jaywgbGVuLCBkZWNvKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgdmlldyA9IFdpZGdldFZpZXcuY3JlYXRlKGRlY28ud2lkZ2V0IHx8IE51bGxXaWRnZXQuaW5saW5lLCBsZW4sIGxlbiA/IDAgOiBkZWNvLnN0YXJ0U2lkZSk7XG4gICAgICAgICAgICAgICAgbGV0IGN1cnNvckJlZm9yZSA9IHRoaXMuYXRDdXJzb3JQb3MgJiYgIXZpZXcuaXNFZGl0YWJsZSAmJiBvcGVuU3RhcnQgPD0gYWN0aXZlLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgICAgICAoZnJvbSA8IHRvIHx8IGRlY28uc3RhcnRTaWRlID4gMCk7XG4gICAgICAgICAgICAgICAgbGV0IGN1cnNvckFmdGVyID0gIXZpZXcuaXNFZGl0YWJsZSAmJiAoZnJvbSA8IHRvIHx8IG9wZW5TdGFydCA+IGFjdGl2ZS5sZW5ndGggfHwgZGVjby5zdGFydFNpZGUgPD0gMCk7XG4gICAgICAgICAgICAgICAgbGV0IGxpbmUgPSB0aGlzLmdldExpbmUoKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wZW5kaW5nQnVmZmVyID09IDIgLyogQnVmLklmQ3Vyc29yICovICYmICFjdXJzb3JCZWZvcmUgJiYgIXZpZXcuaXNFZGl0YWJsZSlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5nQnVmZmVyID0gMCAvKiBCdWYuTm8gKi87XG4gICAgICAgICAgICAgICAgdGhpcy5mbHVzaEJ1ZmZlcihhY3RpdmUpO1xuICAgICAgICAgICAgICAgIGlmIChjdXJzb3JCZWZvcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgbGluZS5hcHBlbmQod3JhcE1hcmtzKG5ldyBXaWRnZXRCdWZmZXJWaWV3KDEpLCBhY3RpdmUpLCBvcGVuU3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICBvcGVuU3RhcnQgPSBhY3RpdmUubGVuZ3RoICsgTWF0aC5tYXgoMCwgb3BlblN0YXJ0IC0gYWN0aXZlLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxpbmUuYXBwZW5kKHdyYXBNYXJrcyh2aWV3LCBhY3RpdmUpLCBvcGVuU3RhcnQpO1xuICAgICAgICAgICAgICAgIHRoaXMuYXRDdXJzb3JQb3MgPSBjdXJzb3JBZnRlcjtcbiAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdCdWZmZXIgPSAhY3Vyc29yQWZ0ZXIgPyAwIC8qIEJ1Zi5ObyAqLyA6IGZyb20gPCB0byB8fCBvcGVuU3RhcnQgPiBhY3RpdmUubGVuZ3RoID8gMSAvKiBCdWYuWWVzICovIDogMiAvKiBCdWYuSWZDdXJzb3IgKi87XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucGVuZGluZ0J1ZmZlcilcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5idWZmZXJNYXJrcyA9IGFjdGl2ZS5zbGljZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZG9jLmxpbmVBdCh0aGlzLnBvcykuZnJvbSA9PSB0aGlzLnBvcykgeyAvLyBMaW5lIGRlY29yYXRpb25cbiAgICAgICAgICAgIHRoaXMuZ2V0TGluZSgpLmFkZExpbmVEZWNvKGRlY28pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsZW4pIHtcbiAgICAgICAgICAgIC8vIEFkdmFuY2UgdGhlIGl0ZXJhdG9yIHBhc3QgdGhlIHJlcGxhY2VkIGNvbnRlbnRcbiAgICAgICAgICAgIGlmICh0aGlzLnRleHRPZmYgKyBsZW4gPD0gdGhpcy50ZXh0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMudGV4dE9mZiArPSBsZW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNraXAgKz0gbGVuIC0gKHRoaXMudGV4dC5sZW5ndGggLSB0aGlzLnRleHRPZmYpO1xuICAgICAgICAgICAgICAgIHRoaXMudGV4dCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0T2ZmID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucG9zID0gdG87XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3BlblN0YXJ0IDwgMClcbiAgICAgICAgICAgIHRoaXMub3BlblN0YXJ0ID0gb3BlblN0YXJ0O1xuICAgIH1cbiAgICBzdGF0aWMgYnVpbGQodGV4dCwgZnJvbSwgdG8sIGRlY29yYXRpb25zLCBkeW5hbWljRGVjb3JhdGlvbk1hcCkge1xuICAgICAgICBsZXQgYnVpbGRlciA9IG5ldyBDb250ZW50QnVpbGRlcih0ZXh0LCBmcm9tLCB0bywgZHluYW1pY0RlY29yYXRpb25NYXApO1xuICAgICAgICBidWlsZGVyLm9wZW5FbmQgPSBzdGF0ZS5SYW5nZVNldC5zcGFucyhkZWNvcmF0aW9ucywgZnJvbSwgdG8sIGJ1aWxkZXIpO1xuICAgICAgICBpZiAoYnVpbGRlci5vcGVuU3RhcnQgPCAwKVxuICAgICAgICAgICAgYnVpbGRlci5vcGVuU3RhcnQgPSBidWlsZGVyLm9wZW5FbmQ7XG4gICAgICAgIGJ1aWxkZXIuZmluaXNoKGJ1aWxkZXIub3BlbkVuZCk7XG4gICAgICAgIHJldHVybiBidWlsZGVyO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHdyYXBNYXJrcyh2aWV3LCBhY3RpdmUpIHtcbiAgICBmb3IgKGxldCBtYXJrIG9mIGFjdGl2ZSlcbiAgICAgICAgdmlldyA9IG5ldyBNYXJrVmlldyhtYXJrLCBbdmlld10sIHZpZXcubGVuZ3RoKTtcbiAgICByZXR1cm4gdmlldztcbn1cbmNsYXNzIE51bGxXaWRnZXQgZXh0ZW5kcyBXaWRnZXRUeXBlIHtcbiAgICBjb25zdHJ1Y3Rvcih0YWcpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy50YWcgPSB0YWc7XG4gICAgfVxuICAgIGVxKG90aGVyKSB7IHJldHVybiBvdGhlci50YWcgPT0gdGhpcy50YWc7IH1cbiAgICB0b0RPTSgpIHsgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGhpcy50YWcpOyB9XG4gICAgdXBkYXRlRE9NKGVsdCkgeyByZXR1cm4gZWx0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT0gdGhpcy50YWc7IH1cbiAgICBnZXQgaXNIaWRkZW4oKSB7IHJldHVybiB0cnVlOyB9XG59XG5OdWxsV2lkZ2V0LmlubGluZSA9IG5ldyBOdWxsV2lkZ2V0KFwic3BhblwiKTtcbk51bGxXaWRnZXQuYmxvY2sgPSBuZXcgTnVsbFdpZGdldChcImRpdlwiKTtcblxuLyoqXG5Vc2VkIHRvIGluZGljYXRlIFt0ZXh0IGRpcmVjdGlvbl0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyN2aWV3LkVkaXRvclZpZXcudGV4dERpcmVjdGlvbikuXG4qL1xuZXhwb3J0cy5EaXJlY3Rpb24gPSB2b2lkIDA7XG4oZnVuY3Rpb24gKERpcmVjdGlvbikge1xuICAgIC8vIChUaGVzZSBhcmUgY2hvc2VuIHRvIG1hdGNoIHRoZSBiYXNlIGxldmVscywgaW4gYmlkaSBhbGdvcml0aG1cbiAgICAvLyB0ZXJtcywgb2Ygc3BhbnMgaW4gdGhhdCBkaXJlY3Rpb24uKVxuICAgIC8qKlxuICAgIExlZnQtdG8tcmlnaHQuXG4gICAgKi9cbiAgICBEaXJlY3Rpb25bRGlyZWN0aW9uW1wiTFRSXCJdID0gMF0gPSBcIkxUUlwiO1xuICAgIC8qKlxuICAgIFJpZ2h0LXRvLWxlZnQuXG4gICAgKi9cbiAgICBEaXJlY3Rpb25bRGlyZWN0aW9uW1wiUlRMXCJdID0gMV0gPSBcIlJUTFwiO1xufSkoZXhwb3J0cy5EaXJlY3Rpb24gfHwgKGV4cG9ydHMuRGlyZWN0aW9uID0ge30pKTtcbmNvbnN0IExUUiA9IGV4cG9ydHMuRGlyZWN0aW9uLkxUUiwgUlRMID0gZXhwb3J0cy5EaXJlY3Rpb24uUlRMO1xuLy8gRGVjb2RlIGEgc3RyaW5nIHdpdGggZWFjaCB0eXBlIGVuY29kZWQgYXMgbG9nMih0eXBlKVxuZnVuY3Rpb24gZGVjKHN0cikge1xuICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKylcbiAgICAgICAgcmVzdWx0LnB1c2goMSA8PCArc3RyW2ldKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8gQ2hhcmFjdGVyIHR5cGVzIGZvciBjb2RlcG9pbnRzIDAgdG8gMHhmOFxuY29uc3QgTG93VHlwZXMgPSBkZWMoXCI4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODY2Njg4ODg4ODc4NzgzMzMzMzMzMzMzNzg4ODg4ODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODg4ODg4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4Nzg2NjY2ODg4ODA4ODg4ODY2MzM4MDg4ODMwODg4ODgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwOFwiKTtcbi8vIENoYXJhY3RlciB0eXBlcyBmb3IgY29kZXBvaW50cyAweDYwMCB0byAweDZmOVxuY29uc3QgQXJhYmljVHlwZXMgPSBkZWMoXCI0NDQ0NDQ4ODI2NjI3Mjg4OTk5OTk5OTk5OTkyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI5OTk5OTk5OTk5OTk5OTk5OTk5OTk0NDQ0NDQ0NDQ0NjQ0MjIyODIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyOTk5OTk5OTQ5OTk5OTk5MjI5OTg5OTk5MjIzMzMzMzMzMzMzXCIpO1xuY29uc3QgQnJhY2tldHMgPSBPYmplY3QuY3JlYXRlKG51bGwpLCBCcmFja2V0U3RhY2sgPSBbXTtcbi8vIFRoZXJlJ3MgYSBsb3QgbW9yZSBpblxuLy8gaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvUHVibGljL1VDRC9sYXRlc3QvdWNkL0JpZGlCcmFja2V0cy50eHQsXG4vLyB3aGljaCBhcmUgbGVmdCBvdXQgdG8ga2VlcCBjb2RlIHNpemUgZG93bi5cbmZvciAobGV0IHAgb2YgW1wiKClcIiwgXCJbXVwiLCBcInt9XCJdKSB7XG4gICAgbGV0IGwgPSBwLmNoYXJDb2RlQXQoMCksIHIgPSBwLmNoYXJDb2RlQXQoMSk7XG4gICAgQnJhY2tldHNbbF0gPSByO1xuICAgIEJyYWNrZXRzW3JdID0gLWw7XG59XG5mdW5jdGlvbiBjaGFyVHlwZShjaCkge1xuICAgIHJldHVybiBjaCA8PSAweGY3ID8gTG93VHlwZXNbY2hdIDpcbiAgICAgICAgMHg1OTAgPD0gY2ggJiYgY2ggPD0gMHg1ZjQgPyAyIC8qIFQuUiAqLyA6XG4gICAgICAgICAgICAweDYwMCA8PSBjaCAmJiBjaCA8PSAweDZmOSA/IEFyYWJpY1R5cGVzW2NoIC0gMHg2MDBdIDpcbiAgICAgICAgICAgICAgICAweDZlZSA8PSBjaCAmJiBjaCA8PSAweDhhYyA/IDQgLyogVC5BTCAqLyA6XG4gICAgICAgICAgICAgICAgICAgIDB4MjAwMCA8PSBjaCAmJiBjaCA8PSAweDIwMGMgPyAyNTYgLyogVC5OSSAqLyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAweGZiNTAgPD0gY2ggJiYgY2ggPD0gMHhmZGZmID8gNCAvKiBULkFMICovIDogMSAvKiBULkwgKi87XG59XG5jb25zdCBCaWRpUkUgPSAvW1xcdTA1OTAtXFx1MDVmNFxcdTA2MDAtXFx1MDZmZlxcdTA3MDAtXFx1MDhhY1xcdWZiNTAtXFx1ZmRmZl0vO1xuLyoqXG5SZXByZXNlbnRzIGEgY29udGlndW91cyByYW5nZSBvZiB0ZXh0IHRoYXQgaGFzIGEgc2luZ2xlIGRpcmVjdGlvblxuKGFzIGluIGxlZnQtdG8tcmlnaHQgb3IgcmlnaHQtdG8tbGVmdCkuXG4qL1xuY2xhc3MgQmlkaVNwYW4ge1xuICAgIC8qKlxuICAgIFRoZSBkaXJlY3Rpb24gb2YgdGhpcyBzcGFuLlxuICAgICovXG4gICAgZ2V0IGRpcigpIHsgcmV0dXJuIHRoaXMubGV2ZWwgJSAyID8gUlRMIDogTFRSOyB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICBUaGUgc3RhcnQgb2YgdGhlIHNwYW4gKHJlbGF0aXZlIHRvIHRoZSBzdGFydCBvZiB0aGUgbGluZSkuXG4gICAgKi9cbiAgICBmcm9tLCBcbiAgICAvKipcbiAgICBUaGUgZW5kIG9mIHRoZSBzcGFuLlxuICAgICovXG4gICAgdG8sIFxuICAgIC8qKlxuICAgIFRoZSBbXCJiaWRpXG4gICAgbGV2ZWxcIl0oaHR0cHM6Ly91bmljb2RlLm9yZy9yZXBvcnRzL3RyOS8jQmFzaWNfRGlzcGxheV9BbGdvcml0aG0pXG4gICAgb2YgdGhlIHNwYW4gKGluIHRoaXMgY29udGV4dCwgMCBtZWFuc1xuICAgIGxlZnQtdG8tcmlnaHQsIDEgbWVhbnMgcmlnaHQtdG8tbGVmdCwgMiBtZWFucyBsZWZ0LXRvLXJpZ2h0XG4gICAgbnVtYmVyIGluc2lkZSByaWdodC10by1sZWZ0IHRleHQpLlxuICAgICovXG4gICAgbGV2ZWwpIHtcbiAgICAgICAgdGhpcy5mcm9tID0gZnJvbTtcbiAgICAgICAgdGhpcy50byA9IHRvO1xuICAgICAgICB0aGlzLmxldmVsID0gbGV2ZWw7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgc2lkZShlbmQsIGRpcikgeyByZXR1cm4gKHRoaXMuZGlyID09IGRpcikgPT0gZW5kID8gdGhpcy50byA6IHRoaXMuZnJvbTsgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgZm9yd2FyZChmb3J3YXJkLCBkaXIpIHsgcmV0dXJuIGZvcndhcmQgPT0gKHRoaXMuZGlyID09IGRpcik7IH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHN0YXRpYyBmaW5kKG9yZGVyLCBpbmRleCwgbGV2ZWwsIGFzc29jKSB7XG4gICAgICAgIGxldCBtYXliZSA9IC0xO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9yZGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgc3BhbiA9IG9yZGVyW2ldO1xuICAgICAgICAgICAgaWYgKHNwYW4uZnJvbSA8PSBpbmRleCAmJiBzcGFuLnRvID49IGluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKHNwYW4ubGV2ZWwgPT0gbGV2ZWwpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgICAgIC8vIFdoZW4gbXVsdGlwbGUgc3BhbnMgbWF0Y2gsIGlmIGFzc29jICE9IDAsIHRha2UgdGhlIG9uZSB0aGF0XG4gICAgICAgICAgICAgICAgLy8gY292ZXJzIHRoYXQgc2lkZSwgb3RoZXJ3aXNlIHRha2UgdGhlIG9uZSB3aXRoIHRoZSBtaW5pbXVtXG4gICAgICAgICAgICAgICAgLy8gbGV2ZWwuXG4gICAgICAgICAgICAgICAgaWYgKG1heWJlIDwgMCB8fCAoYXNzb2MgIT0gMCA/IChhc3NvYyA8IDAgPyBzcGFuLmZyb20gPCBpbmRleCA6IHNwYW4udG8gPiBpbmRleCkgOiBvcmRlclttYXliZV0ubGV2ZWwgPiBzcGFuLmxldmVsKSlcbiAgICAgICAgICAgICAgICAgICAgbWF5YmUgPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtYXliZSA8IDApXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkluZGV4IG91dCBvZiByYW5nZVwiKTtcbiAgICAgICAgcmV0dXJuIG1heWJlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGlzb2xhdGVzRXEoYSwgYikge1xuICAgIGlmIChhLmxlbmd0aCAhPSBiLmxlbmd0aClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgaUEgPSBhW2ldLCBpQiA9IGJbaV07XG4gICAgICAgIGlmIChpQS5mcm9tICE9IGlCLmZyb20gfHwgaUEudG8gIT0gaUIudG8gfHwgaUEuZGlyZWN0aW9uICE9IGlCLmRpcmVjdGlvbiB8fCAhaXNvbGF0ZXNFcShpQS5pbm5lciwgaUIuaW5uZXIpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8vIFJldXNlZCBhcnJheSBvZiBjaGFyYWN0ZXIgdHlwZXNcbmNvbnN0IHR5cGVzID0gW107XG4vLyBGaWxsIGluIHRoZSBjaGFyYWN0ZXIgdHlwZXMgKGluIGB0eXBlc2ApIGZyb20gYGZyb21gIHRvIGB0b2AgYW5kXG4vLyBhcHBseSBXIG5vcm1hbGl6YXRpb24gcnVsZXMuXG5mdW5jdGlvbiBjb21wdXRlQ2hhclR5cGVzKGxpbmUsIHJGcm9tLCByVG8sIGlzb2xhdGVzLCBvdXRlclR5cGUpIHtcbiAgICBmb3IgKGxldCBpSSA9IDA7IGlJIDw9IGlzb2xhdGVzLmxlbmd0aDsgaUkrKykge1xuICAgICAgICBsZXQgZnJvbSA9IGlJID8gaXNvbGF0ZXNbaUkgLSAxXS50byA6IHJGcm9tLCB0byA9IGlJIDwgaXNvbGF0ZXMubGVuZ3RoID8gaXNvbGF0ZXNbaUldLmZyb20gOiByVG87XG4gICAgICAgIGxldCBwcmV2VHlwZSA9IGlJID8gMjU2IC8qIFQuTkkgKi8gOiBvdXRlclR5cGU7XG4gICAgICAgIC8vIFcxLiBFeGFtaW5lIGVhY2ggbm9uLXNwYWNpbmcgbWFyayAoTlNNKSBpbiB0aGUgbGV2ZWwgcnVuLCBhbmRcbiAgICAgICAgLy8gY2hhbmdlIHRoZSB0eXBlIG9mIHRoZSBOU00gdG8gdGhlIHR5cGUgb2YgdGhlIHByZXZpb3VzXG4gICAgICAgIC8vIGNoYXJhY3Rlci4gSWYgdGhlIE5TTSBpcyBhdCB0aGUgc3RhcnQgb2YgdGhlIGxldmVsIHJ1biwgaXQgd2lsbFxuICAgICAgICAvLyBnZXQgdGhlIHR5cGUgb2Ygc29yLlxuICAgICAgICAvLyBXMi4gU2VhcmNoIGJhY2t3YXJkcyBmcm9tIGVhY2ggaW5zdGFuY2Ugb2YgYSBFdXJvcGVhbiBudW1iZXJcbiAgICAgICAgLy8gdW50aWwgdGhlIGZpcnN0IHN0cm9uZyB0eXBlIChSLCBMLCBBTCwgb3Igc29yKSBpcyBmb3VuZC4gSWYgYW5cbiAgICAgICAgLy8gQUwgaXMgZm91bmQsIGNoYW5nZSB0aGUgdHlwZSBvZiB0aGUgRXVyb3BlYW4gbnVtYmVyIHRvIEFyYWJpY1xuICAgICAgICAvLyBudW1iZXIuXG4gICAgICAgIC8vIFczLiBDaGFuZ2UgYWxsIEFMcyB0byBSLlxuICAgICAgICAvLyAoTGVmdCBhZnRlciB0aGlzOiBMLCBSLCBFTiwgQU4sIEVULCBDUywgTkkpXG4gICAgICAgIGZvciAobGV0IGkgPSBmcm9tLCBwcmV2ID0gcHJldlR5cGUsIHByZXZTdHJvbmcgPSBwcmV2VHlwZTsgaSA8IHRvOyBpKyspIHtcbiAgICAgICAgICAgIGxldCB0eXBlID0gY2hhclR5cGUobGluZS5jaGFyQ29kZUF0KGkpKTtcbiAgICAgICAgICAgIGlmICh0eXBlID09IDUxMiAvKiBULk5TTSAqLylcbiAgICAgICAgICAgICAgICB0eXBlID0gcHJldjtcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGUgPT0gOCAvKiBULkVOICovICYmIHByZXZTdHJvbmcgPT0gNCAvKiBULkFMICovKVxuICAgICAgICAgICAgICAgIHR5cGUgPSAxNiAvKiBULkFOICovO1xuICAgICAgICAgICAgdHlwZXNbaV0gPSB0eXBlID09IDQgLyogVC5BTCAqLyA/IDIgLyogVC5SICovIDogdHlwZTtcbiAgICAgICAgICAgIGlmICh0eXBlICYgNyAvKiBULlN0cm9uZyAqLylcbiAgICAgICAgICAgICAgICBwcmV2U3Ryb25nID0gdHlwZTtcbiAgICAgICAgICAgIHByZXYgPSB0eXBlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFc1LiBBIHNlcXVlbmNlIG9mIEV1cm9wZWFuIHRlcm1pbmF0b3JzIGFkamFjZW50IHRvIEV1cm9wZWFuXG4gICAgICAgIC8vIG51bWJlcnMgY2hhbmdlcyB0byBhbGwgRXVyb3BlYW4gbnVtYmVycy5cbiAgICAgICAgLy8gVzYuIE90aGVyd2lzZSwgc2VwYXJhdG9ycyBhbmQgdGVybWluYXRvcnMgY2hhbmdlIHRvIE90aGVyXG4gICAgICAgIC8vIE5ldXRyYWwuXG4gICAgICAgIC8vIFc3LiBTZWFyY2ggYmFja3dhcmRzIGZyb20gZWFjaCBpbnN0YW5jZSBvZiBhIEV1cm9wZWFuIG51bWJlclxuICAgICAgICAvLyB1bnRpbCB0aGUgZmlyc3Qgc3Ryb25nIHR5cGUgKFIsIEwsIG9yIHNvcikgaXMgZm91bmQuIElmIGFuIEwgaXNcbiAgICAgICAgLy8gZm91bmQsIHRoZW4gY2hhbmdlIHRoZSB0eXBlIG9mIHRoZSBFdXJvcGVhbiBudW1iZXIgdG8gTC5cbiAgICAgICAgLy8gKExlZnQgYWZ0ZXIgdGhpczogTCwgUiwgRU4rQU4sIE5JKVxuICAgICAgICBmb3IgKGxldCBpID0gZnJvbSwgcHJldiA9IHByZXZUeXBlLCBwcmV2U3Ryb25nID0gcHJldlR5cGU7IGkgPCB0bzsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgdHlwZSA9IHR5cGVzW2ldO1xuICAgICAgICAgICAgaWYgKHR5cGUgPT0gMTI4IC8qIFQuQ1MgKi8pIHtcbiAgICAgICAgICAgICAgICBpZiAoaSA8IHRvIC0gMSAmJiBwcmV2ID09IHR5cGVzW2kgKyAxXSAmJiAocHJldiAmIDI0IC8qIFQuTnVtICovKSlcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9IHR5cGVzW2ldID0gcHJldjtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHR5cGVzW2ldID0gMjU2IC8qIFQuTkkgKi87XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlID09IDY0IC8qIFQuRVQgKi8pIHtcbiAgICAgICAgICAgICAgICBsZXQgZW5kID0gaSArIDE7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGVuZCA8IHRvICYmIHR5cGVzW2VuZF0gPT0gNjQgLyogVC5FVCAqLylcbiAgICAgICAgICAgICAgICAgICAgZW5kKys7XG4gICAgICAgICAgICAgICAgbGV0IHJlcGxhY2UgPSAoaSAmJiBwcmV2ID09IDggLyogVC5FTiAqLykgfHwgKGVuZCA8IHJUbyAmJiB0eXBlc1tlbmRdID09IDggLyogVC5FTiAqLykgPyAocHJldlN0cm9uZyA9PSAxIC8qIFQuTCAqLyA/IDEgLyogVC5MICovIDogOCAvKiBULkVOICovKSA6IDI1NiAvKiBULk5JICovO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSBpOyBqIDwgZW5kOyBqKyspXG4gICAgICAgICAgICAgICAgICAgIHR5cGVzW2pdID0gcmVwbGFjZTtcbiAgICAgICAgICAgICAgICBpID0gZW5kIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGUgPT0gOCAvKiBULkVOICovICYmIHByZXZTdHJvbmcgPT0gMSAvKiBULkwgKi8pIHtcbiAgICAgICAgICAgICAgICB0eXBlc1tpXSA9IDEgLyogVC5MICovO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJldiA9IHR5cGU7XG4gICAgICAgICAgICBpZiAodHlwZSAmIDcgLyogVC5TdHJvbmcgKi8pXG4gICAgICAgICAgICAgICAgcHJldlN0cm9uZyA9IHR5cGU7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyBQcm9jZXNzIGJyYWNrZXRzIHRocm91Z2hvdXQgYSBydW4gc2VxdWVuY2UuXG5mdW5jdGlvbiBwcm9jZXNzQnJhY2tldFBhaXJzKGxpbmUsIHJGcm9tLCByVG8sIGlzb2xhdGVzLCBvdXRlclR5cGUpIHtcbiAgICBsZXQgb3Bwb3NpdGVUeXBlID0gb3V0ZXJUeXBlID09IDEgLyogVC5MICovID8gMiAvKiBULlIgKi8gOiAxIC8qIFQuTCAqLztcbiAgICBmb3IgKGxldCBpSSA9IDAsIHNJID0gMCwgY29udGV4dCA9IDA7IGlJIDw9IGlzb2xhdGVzLmxlbmd0aDsgaUkrKykge1xuICAgICAgICBsZXQgZnJvbSA9IGlJID8gaXNvbGF0ZXNbaUkgLSAxXS50byA6IHJGcm9tLCB0byA9IGlJIDwgaXNvbGF0ZXMubGVuZ3RoID8gaXNvbGF0ZXNbaUldLmZyb20gOiByVG87XG4gICAgICAgIC8vIE4wLiBQcm9jZXNzIGJyYWNrZXQgcGFpcnMgaW4gYW4gaXNvbGF0aW5nIHJ1biBzZXF1ZW5jZVxuICAgICAgICAvLyBzZXF1ZW50aWFsbHkgaW4gdGhlIGxvZ2ljYWwgb3JkZXIgb2YgdGhlIHRleHQgcG9zaXRpb25zIG9mIHRoZVxuICAgICAgICAvLyBvcGVuaW5nIHBhaXJlZCBicmFja2V0cyB1c2luZyB0aGUgbG9naWMgZ2l2ZW4gYmVsb3cuIFdpdGhpbiB0aGlzXG4gICAgICAgIC8vIHNjb3BlLCBiaWRpcmVjdGlvbmFsIHR5cGVzIEVOIGFuZCBBTiBhcmUgdHJlYXRlZCBhcyBSLlxuICAgICAgICBmb3IgKGxldCBpID0gZnJvbSwgY2gsIGJyLCB0eXBlOyBpIDwgdG87IGkrKykge1xuICAgICAgICAgICAgLy8gS2VlcHMgW3N0YXJ0SW5kZXgsIHR5cGUsIHN0cm9uZ1NlZW5dIHRyaXBsZXMgZm9yIGVhY2ggb3BlblxuICAgICAgICAgICAgLy8gYnJhY2tldCBvbiBCcmFja2V0U3RhY2suXG4gICAgICAgICAgICBpZiAoYnIgPSBCcmFja2V0c1tjaCA9IGxpbmUuY2hhckNvZGVBdChpKV0pIHtcbiAgICAgICAgICAgICAgICBpZiAoYnIgPCAwKSB7IC8vIENsb3NpbmcgYnJhY2tldFxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBzSiA9IHNJIC0gMzsgc0ogPj0gMDsgc0ogLT0gMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEJyYWNrZXRTdGFja1tzSiArIDFdID09IC1icikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmbGFncyA9IEJyYWNrZXRTdGFja1tzSiArIDJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0eXBlID0gKGZsYWdzICYgMiAvKiBCcmFja2V0ZWQuRW1iZWRJbnNpZGUgKi8pID8gb3V0ZXJUeXBlIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIShmbGFncyAmIDQgLyogQnJhY2tldGVkLk9wcG9zaXRlSW5zaWRlICovKSA/IDAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZsYWdzICYgMSAvKiBCcmFja2V0ZWQuT3Bwb3NpdGVCZWZvcmUgKi8pID8gb3Bwb3NpdGVUeXBlIDogb3V0ZXJUeXBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlc1tpXSA9IHR5cGVzW0JyYWNrZXRTdGFja1tzSl1dID0gdHlwZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzSSA9IHNKO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKEJyYWNrZXRTdGFjay5sZW5ndGggPT0gMTg5IC8qIEJyYWNrZXRlZC5NYXhEZXB0aCAqLykge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIEJyYWNrZXRTdGFja1tzSSsrXSA9IGk7XG4gICAgICAgICAgICAgICAgICAgIEJyYWNrZXRTdGFja1tzSSsrXSA9IGNoO1xuICAgICAgICAgICAgICAgICAgICBCcmFja2V0U3RhY2tbc0krK10gPSBjb250ZXh0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCh0eXBlID0gdHlwZXNbaV0pID09IDIgLyogVC5SICovIHx8IHR5cGUgPT0gMSAvKiBULkwgKi8pIHtcbiAgICAgICAgICAgICAgICBsZXQgZW1iZWQgPSB0eXBlID09IG91dGVyVHlwZTtcbiAgICAgICAgICAgICAgICBjb250ZXh0ID0gZW1iZWQgPyAwIDogMSAvKiBCcmFja2V0ZWQuT3Bwb3NpdGVCZWZvcmUgKi87XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc0ogPSBzSSAtIDM7IHNKID49IDA7IHNKIC09IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGN1ciA9IEJyYWNrZXRTdGFja1tzSiArIDJdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VyICYgMiAvKiBCcmFja2V0ZWQuRW1iZWRJbnNpZGUgKi8pXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVtYmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBCcmFja2V0U3RhY2tbc0ogKyAyXSB8PSAyIC8qIEJyYWNrZXRlZC5FbWJlZEluc2lkZSAqLztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXIgJiA0IC8qIEJyYWNrZXRlZC5PcHBvc2l0ZUluc2lkZSAqLylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIEJyYWNrZXRTdGFja1tzSiArIDJdIHw9IDQgLyogQnJhY2tldGVkLk9wcG9zaXRlSW5zaWRlICovO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gcHJvY2Vzc05ldXRyYWxzKHJGcm9tLCByVG8sIGlzb2xhdGVzLCBvdXRlclR5cGUpIHtcbiAgICBmb3IgKGxldCBpSSA9IDAsIHByZXYgPSBvdXRlclR5cGU7IGlJIDw9IGlzb2xhdGVzLmxlbmd0aDsgaUkrKykge1xuICAgICAgICBsZXQgZnJvbSA9IGlJID8gaXNvbGF0ZXNbaUkgLSAxXS50byA6IHJGcm9tLCB0byA9IGlJIDwgaXNvbGF0ZXMubGVuZ3RoID8gaXNvbGF0ZXNbaUldLmZyb20gOiByVG87XG4gICAgICAgIC8vIE4xLiBBIHNlcXVlbmNlIG9mIG5ldXRyYWxzIHRha2VzIHRoZSBkaXJlY3Rpb24gb2YgdGhlXG4gICAgICAgIC8vIHN1cnJvdW5kaW5nIHN0cm9uZyB0ZXh0IGlmIHRoZSB0ZXh0IG9uIGJvdGggc2lkZXMgaGFzIHRoZSBzYW1lXG4gICAgICAgIC8vIGRpcmVjdGlvbi4gRXVyb3BlYW4gYW5kIEFyYWJpYyBudW1iZXJzIGFjdCBhcyBpZiB0aGV5IHdlcmUgUiBpblxuICAgICAgICAvLyB0ZXJtcyBvZiB0aGVpciBpbmZsdWVuY2Ugb24gbmV1dHJhbHMuIFN0YXJ0LW9mLWxldmVsLXJ1biAoc29yKVxuICAgICAgICAvLyBhbmQgZW5kLW9mLWxldmVsLXJ1biAoZW9yKSBhcmUgdXNlZCBhdCBsZXZlbCBydW4gYm91bmRhcmllcy5cbiAgICAgICAgLy8gTjIuIEFueSByZW1haW5pbmcgbmV1dHJhbHMgdGFrZSB0aGUgZW1iZWRkaW5nIGRpcmVjdGlvbi5cbiAgICAgICAgLy8gKExlZnQgYWZ0ZXIgdGhpczogTCwgUiwgRU4rQU4pXG4gICAgICAgIGZvciAobGV0IGkgPSBmcm9tOyBpIDwgdG87KSB7XG4gICAgICAgICAgICBsZXQgdHlwZSA9IHR5cGVzW2ldO1xuICAgICAgICAgICAgaWYgKHR5cGUgPT0gMjU2IC8qIFQuTkkgKi8pIHtcbiAgICAgICAgICAgICAgICBsZXQgZW5kID0gaSArIDE7XG4gICAgICAgICAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZW5kID09IHRvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaUkgPT0gaXNvbGF0ZXMubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gaXNvbGF0ZXNbaUkrK10udG87XG4gICAgICAgICAgICAgICAgICAgICAgICB0byA9IGlJIDwgaXNvbGF0ZXMubGVuZ3RoID8gaXNvbGF0ZXNbaUldLmZyb20gOiByVG87XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZXNbZW5kXSA9PSAyNTYgLyogVC5OSSAqLykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW5kKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgYmVmb3JlTCA9IHByZXYgPT0gMSAvKiBULkwgKi87XG4gICAgICAgICAgICAgICAgbGV0IGFmdGVyTCA9IChlbmQgPCByVG8gPyB0eXBlc1tlbmRdIDogb3V0ZXJUeXBlKSA9PSAxIC8qIFQuTCAqLztcbiAgICAgICAgICAgICAgICBsZXQgcmVwbGFjZSA9IGJlZm9yZUwgPT0gYWZ0ZXJMID8gKGJlZm9yZUwgPyAxIC8qIFQuTCAqLyA6IDIgLyogVC5SICovKSA6IG91dGVyVHlwZTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gZW5kLCBqSSA9IGlJLCBmcm9tSiA9IGpJID8gaXNvbGF0ZXNbakkgLSAxXS50byA6IHJGcm9tOyBqID4gaTspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGogPT0gZnJvbUopIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGogPSBpc29sYXRlc1stLWpJXS5mcm9tO1xuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbUogPSBqSSA/IGlzb2xhdGVzW2pJIC0gMV0udG8gOiByRnJvbTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0eXBlc1stLWpdID0gcmVwbGFjZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaSA9IGVuZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHByZXYgPSB0eXBlO1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIEZpbmQgdGhlIGNvbnRpZ3VvdXMgcmFuZ2VzIG9mIGNoYXJhY3RlciB0eXBlcyBpbiBhIGdpdmVuIHJhbmdlLCBhbmRcbi8vIGVtaXQgc3BhbnMgZm9yIHRoZW0uIEZsaXAgdGhlIG9yZGVyIG9mIHRoZSBzcGFucyBhcyBhcHByb3ByaWF0ZVxuLy8gYmFzZWQgb24gdGhlIGxldmVsLCBhbmQgY2FsbCB0aHJvdWdoIHRvIGNvbXB1dGUgdGhlIHNwYW5zIGZvclxuLy8gaXNvbGF0ZXMgYXQgdGhlIHByb3BlciBwb2ludC5cbmZ1bmN0aW9uIGVtaXRTcGFucyhsaW5lLCBmcm9tLCB0bywgbGV2ZWwsIGJhc2VMZXZlbCwgaXNvbGF0ZXMsIG9yZGVyKSB7XG4gICAgbGV0IG91clR5cGUgPSBsZXZlbCAlIDIgPyAyIC8qIFQuUiAqLyA6IDEgLyogVC5MICovO1xuICAgIGlmICgobGV2ZWwgJSAyKSA9PSAoYmFzZUxldmVsICUgMikpIHsgLy8gU2FtZSBkaXIgYXMgYmFzZSBkaXJlY3Rpb24sIGRvbid0IGZsaXBcbiAgICAgICAgZm9yIChsZXQgaUNoID0gZnJvbSwgaUkgPSAwOyBpQ2ggPCB0bzspIHtcbiAgICAgICAgICAgIC8vIFNjYW4gYSBzZWN0aW9uIG9mIGNoYXJhY3RlcnMgaW4gZGlyZWN0aW9uIG91clR5cGUsIHVubGVzc1xuICAgICAgICAgICAgLy8gdGhlcmUncyBhbm90aGVyIHR5cGUgb2YgY2hhciByaWdodCBhZnRlciBpQ2gsIGluIHdoaWNoIGNhc2VcbiAgICAgICAgICAgIC8vIHdlIHNjYW4gYSBzZWN0aW9uIG9mIG90aGVyIGNoYXJhY3RlcnMgKHdoaWNoLCBpZiBvdXJUeXBlID09XG4gICAgICAgICAgICAvLyBULkwsIG1heSBjb250YWluIGJvdGggVC5SIGFuZCBULkFOIGNoYXJzKS5cbiAgICAgICAgICAgIGxldCBzYW1lRGlyID0gdHJ1ZSwgaXNOdW0gPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChpSSA9PSBpc29sYXRlcy5sZW5ndGggfHwgaUNoIDwgaXNvbGF0ZXNbaUldLmZyb20pIHtcbiAgICAgICAgICAgICAgICBsZXQgbmV4dCA9IHR5cGVzW2lDaF07XG4gICAgICAgICAgICAgICAgaWYgKG5leHQgIT0gb3VyVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBzYW1lRGlyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlzTnVtID0gbmV4dCA9PSAxNiAvKiBULkFOICovO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEhvbGRzIGFuIGFycmF5IG9mIGlzb2xhdGVzIHRvIHBhc3MgdG8gYSByZWN1cnNpdmUgY2FsbCBpZiB3ZVxuICAgICAgICAgICAgLy8gbXVzdCByZWN1cnNlICh0byBkaXN0aW5ndWlzaCBULkFOIGluc2lkZSBhbiBSVEwgc2VjdGlvbiBpblxuICAgICAgICAgICAgLy8gTFRSIHRleHQpLCBudWxsIGlmIHdlIGNhbiBlbWl0IGRpcmVjdGx5XG4gICAgICAgICAgICBsZXQgcmVjdXJzZSA9ICFzYW1lRGlyICYmIG91clR5cGUgPT0gMSAvKiBULkwgKi8gPyBbXSA6IG51bGw7XG4gICAgICAgICAgICBsZXQgbG9jYWxMZXZlbCA9IHNhbWVEaXIgPyBsZXZlbCA6IGxldmVsICsgMTtcbiAgICAgICAgICAgIGxldCBpU2NhbiA9IGlDaDtcbiAgICAgICAgICAgIHJ1bjogZm9yICg7Oykge1xuICAgICAgICAgICAgICAgIGlmIChpSSA8IGlzb2xhdGVzLmxlbmd0aCAmJiBpU2NhbiA9PSBpc29sYXRlc1tpSV0uZnJvbSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNOdW0pXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhayBydW47XG4gICAgICAgICAgICAgICAgICAgIGxldCBpc28gPSBpc29sYXRlc1tpSV07XG4gICAgICAgICAgICAgICAgICAgIC8vIFNjYW4gYWhlYWQgdG8gdmVyaWZ5IHRoYXQgdGhlcmUgaXMgYW5vdGhlciBjaGFyIGluIHRoaXMgZGlyIGFmdGVyIHRoZSBpc29sYXRlKHMpXG4gICAgICAgICAgICAgICAgICAgIGlmICghc2FtZURpcilcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHVwdG8gPSBpc28udG8sIGpJID0gaUkgKyAxOzspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXB0byA9PSB0bylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgcnVuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqSSA8IGlzb2xhdGVzLmxlbmd0aCAmJiBpc29sYXRlc1tqSV0uZnJvbSA9PSB1cHRvKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cHRvID0gaXNvbGF0ZXNbakkrK10udG87XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZXNbdXB0b10gPT0gb3VyVHlwZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgcnVuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlJKys7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWN1cnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWN1cnNlLnB1c2goaXNvKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc28uZnJvbSA+IGlDaClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmRlci5wdXNoKG5ldyBCaWRpU3BhbihpQ2gsIGlzby5mcm9tLCBsb2NhbExldmVsKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGlyU3dhcCA9IChpc28uZGlyZWN0aW9uID09IExUUikgIT0gIShsb2NhbExldmVsICUgMik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wdXRlU2VjdGlvbk9yZGVyKGxpbmUsIGRpclN3YXAgPyBsZXZlbCArIDEgOiBsZXZlbCwgYmFzZUxldmVsLCBpc28uaW5uZXIsIGlzby5mcm9tLCBpc28udG8sIG9yZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlDaCA9IGlzby50bztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpU2NhbiA9IGlzby50bztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaVNjYW4gPT0gdG8gfHwgKHNhbWVEaXIgPyB0eXBlc1tpU2Nhbl0gIT0gb3VyVHlwZSA6IHR5cGVzW2lTY2FuXSA9PSBvdXJUeXBlKSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlTY2FuKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlY3Vyc2UpXG4gICAgICAgICAgICAgICAgZW1pdFNwYW5zKGxpbmUsIGlDaCwgaVNjYW4sIGxldmVsICsgMSwgYmFzZUxldmVsLCByZWN1cnNlLCBvcmRlcik7XG4gICAgICAgICAgICBlbHNlIGlmIChpQ2ggPCBpU2NhbilcbiAgICAgICAgICAgICAgICBvcmRlci5wdXNoKG5ldyBCaWRpU3BhbihpQ2gsIGlTY2FuLCBsb2NhbExldmVsKSk7XG4gICAgICAgICAgICBpQ2ggPSBpU2NhbjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gSXRlcmF0ZSBpbiByZXZlcnNlIHRvIGZsaXAgdGhlIHNwYW4gb3JkZXIuIFNhbWUgY29kZSBhZ2FpbiwgYnV0XG4gICAgICAgIC8vIGdvaW5nIGZyb20gdGhlIGJhY2sgb2YgdGhlIHNlY3Rpb24gdG8gdGhlIGZyb250XG4gICAgICAgIGZvciAobGV0IGlDaCA9IHRvLCBpSSA9IGlzb2xhdGVzLmxlbmd0aDsgaUNoID4gZnJvbTspIHtcbiAgICAgICAgICAgIGxldCBzYW1lRGlyID0gdHJ1ZSwgaXNOdW0gPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICghaUkgfHwgaUNoID4gaXNvbGF0ZXNbaUkgLSAxXS50bykge1xuICAgICAgICAgICAgICAgIGxldCBuZXh0ID0gdHlwZXNbaUNoIC0gMV07XG4gICAgICAgICAgICAgICAgaWYgKG5leHQgIT0gb3VyVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBzYW1lRGlyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlzTnVtID0gbmV4dCA9PSAxNiAvKiBULkFOICovO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCByZWN1cnNlID0gIXNhbWVEaXIgJiYgb3VyVHlwZSA9PSAxIC8qIFQuTCAqLyA/IFtdIDogbnVsbDtcbiAgICAgICAgICAgIGxldCBsb2NhbExldmVsID0gc2FtZURpciA/IGxldmVsIDogbGV2ZWwgKyAxO1xuICAgICAgICAgICAgbGV0IGlTY2FuID0gaUNoO1xuICAgICAgICAgICAgcnVuOiBmb3IgKDs7KSB7XG4gICAgICAgICAgICAgICAgaWYgKGlJICYmIGlTY2FuID09IGlzb2xhdGVzW2lJIC0gMV0udG8pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTnVtKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgcnVuO1xuICAgICAgICAgICAgICAgICAgICBsZXQgaXNvID0gaXNvbGF0ZXNbLS1pSV07XG4gICAgICAgICAgICAgICAgICAgIC8vIFNjYW4gYWhlYWQgdG8gdmVyaWZ5IHRoYXQgdGhlcmUgaXMgYW5vdGhlciBjaGFyIGluIHRoaXMgZGlyIGFmdGVyIHRoZSBpc29sYXRlKHMpXG4gICAgICAgICAgICAgICAgICAgIGlmICghc2FtZURpcilcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHVwdG8gPSBpc28uZnJvbSwgakkgPSBpSTs7KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVwdG8gPT0gZnJvbSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgcnVuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqSSAmJiBpc29sYXRlc1tqSSAtIDFdLnRvID09IHVwdG8pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwdG8gPSBpc29sYXRlc1stLWpJXS5mcm9tO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVzW3VwdG8gLSAxXSA9PSBvdXJUeXBlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBydW47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlY3Vyc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY3Vyc2UucHVzaChpc28pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzby50byA8IGlDaClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmRlci5wdXNoKG5ldyBCaWRpU3Bhbihpc28udG8sIGlDaCwgbG9jYWxMZXZlbCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRpclN3YXAgPSAoaXNvLmRpcmVjdGlvbiA9PSBMVFIpICE9ICEobG9jYWxMZXZlbCAlIDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tcHV0ZVNlY3Rpb25PcmRlcihsaW5lLCBkaXJTd2FwID8gbGV2ZWwgKyAxIDogbGV2ZWwsIGJhc2VMZXZlbCwgaXNvLmlubmVyLCBpc28uZnJvbSwgaXNvLnRvLCBvcmRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpQ2ggPSBpc28uZnJvbTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpU2NhbiA9IGlzby5mcm9tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpU2NhbiA9PSBmcm9tIHx8IChzYW1lRGlyID8gdHlwZXNbaVNjYW4gLSAxXSAhPSBvdXJUeXBlIDogdHlwZXNbaVNjYW4gLSAxXSA9PSBvdXJUeXBlKSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlTY2FuLS07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlY3Vyc2UpXG4gICAgICAgICAgICAgICAgZW1pdFNwYW5zKGxpbmUsIGlTY2FuLCBpQ2gsIGxldmVsICsgMSwgYmFzZUxldmVsLCByZWN1cnNlLCBvcmRlcik7XG4gICAgICAgICAgICBlbHNlIGlmIChpU2NhbiA8IGlDaClcbiAgICAgICAgICAgICAgICBvcmRlci5wdXNoKG5ldyBCaWRpU3BhbihpU2NhbiwgaUNoLCBsb2NhbExldmVsKSk7XG4gICAgICAgICAgICBpQ2ggPSBpU2NhbjtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGNvbXB1dGVTZWN0aW9uT3JkZXIobGluZSwgbGV2ZWwsIGJhc2VMZXZlbCwgaXNvbGF0ZXMsIGZyb20sIHRvLCBvcmRlcikge1xuICAgIGxldCBvdXRlclR5cGUgPSAobGV2ZWwgJSAyID8gMiAvKiBULlIgKi8gOiAxIC8qIFQuTCAqLyk7XG4gICAgY29tcHV0ZUNoYXJUeXBlcyhsaW5lLCBmcm9tLCB0bywgaXNvbGF0ZXMsIG91dGVyVHlwZSk7XG4gICAgcHJvY2Vzc0JyYWNrZXRQYWlycyhsaW5lLCBmcm9tLCB0bywgaXNvbGF0ZXMsIG91dGVyVHlwZSk7XG4gICAgcHJvY2Vzc05ldXRyYWxzKGZyb20sIHRvLCBpc29sYXRlcywgb3V0ZXJUeXBlKTtcbiAgICBlbWl0U3BhbnMobGluZSwgZnJvbSwgdG8sIGxldmVsLCBiYXNlTGV2ZWwsIGlzb2xhdGVzLCBvcmRlcik7XG59XG5mdW5jdGlvbiBjb21wdXRlT3JkZXIobGluZSwgZGlyZWN0aW9uLCBpc29sYXRlcykge1xuICAgIGlmICghbGluZSlcbiAgICAgICAgcmV0dXJuIFtuZXcgQmlkaVNwYW4oMCwgMCwgZGlyZWN0aW9uID09IFJUTCA/IDEgOiAwKV07XG4gICAgaWYgKGRpcmVjdGlvbiA9PSBMVFIgJiYgIWlzb2xhdGVzLmxlbmd0aCAmJiAhQmlkaVJFLnRlc3QobGluZSkpXG4gICAgICAgIHJldHVybiB0cml2aWFsT3JkZXIobGluZS5sZW5ndGgpO1xuICAgIGlmIChpc29sYXRlcy5sZW5ndGgpXG4gICAgICAgIHdoaWxlIChsaW5lLmxlbmd0aCA+IHR5cGVzLmxlbmd0aClcbiAgICAgICAgICAgIHR5cGVzW3R5cGVzLmxlbmd0aF0gPSAyNTYgLyogVC5OSSAqLzsgLy8gTWFrZSBzdXJlIHR5cGVzIGFycmF5IGhhcyBubyBnYXBzXG4gICAgbGV0IG9yZGVyID0gW10sIGxldmVsID0gZGlyZWN0aW9uID09IExUUiA/IDAgOiAxO1xuICAgIGNvbXB1dGVTZWN0aW9uT3JkZXIobGluZSwgbGV2ZWwsIGxldmVsLCBpc29sYXRlcywgMCwgbGluZS5sZW5ndGgsIG9yZGVyKTtcbiAgICByZXR1cm4gb3JkZXI7XG59XG5mdW5jdGlvbiB0cml2aWFsT3JkZXIobGVuZ3RoKSB7XG4gICAgcmV0dXJuIFtuZXcgQmlkaVNwYW4oMCwgbGVuZ3RoLCAwKV07XG59XG5sZXQgbW92ZWRPdmVyID0gXCJcIjtcbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gbW92ZXMgc3RyaWN0bHkgdmlzdWFsbHksIHdpdGhvdXQgY29uY2VybiBmb3IgYVxuLy8gdHJhdmVyc2FsIHZpc2l0aW5nIGV2ZXJ5IGxvZ2ljYWwgcG9zaXRpb24gaW4gdGhlIHN0cmluZy4gSXQgd2lsbFxuLy8gc3RpbGwgZG8gc28gZm9yIHNpbXBsZSBpbnB1dCwgYnV0IHNpdHVhdGlvbnMgbGlrZSBtdWx0aXBsZSBpc29sYXRlc1xuLy8gd2l0aCB0aGUgc2FtZSBsZXZlbCBuZXh0IHRvIGVhY2ggb3RoZXIsIG9yIHRleHQgZ29pbmcgYWdhaW5zdCB0aGVcbi8vIG1haW4gZGlyIGF0IHRoZSBlbmQgb2YgdGhlIGxpbmUsIHdpbGwgbWFrZSBzb21lIHBvc2l0aW9uc1xuLy8gdW5yZWFjaGFibGUgd2l0aCB0aGlzIG1vdGlvbi4gRWFjaCB2aXNpYmxlIGN1cnNvciBwb3NpdGlvbiB3aWxsXG4vLyBjb3JyZXNwb25kIHRvIHRoZSBsb3dlci1sZXZlbCBiaWRpIHNwYW4gdGhhdCB0b3VjaGVzIGl0LlxuLy9cbi8vIFRoZSBhbHRlcm5hdGl2ZSB3b3VsZCBiZSB0byBzb2x2ZSBhbiBvcmRlciBnbG9iYWxseSBmb3IgYSBnaXZlblxuLy8gbGluZSwgbWFraW5nIHN1cmUgdGhhdCBpdCBpbmNsdWRlcyBldmVyeSBwb3NpdGlvbiwgYnV0IHRoYXQgd291bGRcbi8vIHJlcXVpcmUgYXNzb2NpYXRpbmcgbm9uLWNhbm9uaWNhbCAoaGlnaGVyIGJpZGkgc3BhbiBsZXZlbClcbi8vIHBvc2l0aW9ucyB3aXRoIGEgZ2l2ZW4gdmlzdWFsIHBvc2l0aW9uLCB3aGljaCBpcyBsaWtlbHkgdG8gY29uZnVzZVxuLy8gcGVvcGxlLiAoQW5kIHdvdWxkIGdlbmVyYWxseSBiZSBhIGxvdCBtb3JlIGNvbXBsaWNhdGVkLilcbmZ1bmN0aW9uIG1vdmVWaXN1YWxseShsaW5lLCBvcmRlciwgZGlyLCBzdGFydCwgZm9yd2FyZCkge1xuICAgIHZhciBfYTtcbiAgICBsZXQgc3RhcnRJbmRleCA9IHN0YXJ0LmhlYWQgLSBsaW5lLmZyb207XG4gICAgbGV0IHNwYW5JID0gQmlkaVNwYW4uZmluZChvcmRlciwgc3RhcnRJbmRleCwgKF9hID0gc3RhcnQuYmlkaUxldmVsKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAtMSwgc3RhcnQuYXNzb2MpO1xuICAgIGxldCBzcGFuID0gb3JkZXJbc3BhbkldLCBzcGFuRW5kID0gc3Bhbi5zaWRlKGZvcndhcmQsIGRpcik7XG4gICAgLy8gRW5kIG9mIHNwYW5cbiAgICBpZiAoc3RhcnRJbmRleCA9PSBzcGFuRW5kKSB7XG4gICAgICAgIGxldCBuZXh0SSA9IHNwYW5JICs9IGZvcndhcmQgPyAxIDogLTE7XG4gICAgICAgIGlmIChuZXh0SSA8IDAgfHwgbmV4dEkgPj0gb3JkZXIubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIHNwYW4gPSBvcmRlcltzcGFuSSA9IG5leHRJXTtcbiAgICAgICAgc3RhcnRJbmRleCA9IHNwYW4uc2lkZSghZm9yd2FyZCwgZGlyKTtcbiAgICAgICAgc3BhbkVuZCA9IHNwYW4uc2lkZShmb3J3YXJkLCBkaXIpO1xuICAgIH1cbiAgICBsZXQgbmV4dEluZGV4ID0gc3RhdGUuZmluZENsdXN0ZXJCcmVhayhsaW5lLnRleHQsIHN0YXJ0SW5kZXgsIHNwYW4uZm9yd2FyZChmb3J3YXJkLCBkaXIpKTtcbiAgICBpZiAobmV4dEluZGV4IDwgc3Bhbi5mcm9tIHx8IG5leHRJbmRleCA+IHNwYW4udG8pXG4gICAgICAgIG5leHRJbmRleCA9IHNwYW5FbmQ7XG4gICAgbW92ZWRPdmVyID0gbGluZS50ZXh0LnNsaWNlKE1hdGgubWluKHN0YXJ0SW5kZXgsIG5leHRJbmRleCksIE1hdGgubWF4KHN0YXJ0SW5kZXgsIG5leHRJbmRleCkpO1xuICAgIGxldCBuZXh0U3BhbiA9IHNwYW5JID09IChmb3J3YXJkID8gb3JkZXIubGVuZ3RoIC0gMSA6IDApID8gbnVsbCA6IG9yZGVyW3NwYW5JICsgKGZvcndhcmQgPyAxIDogLTEpXTtcbiAgICBpZiAobmV4dFNwYW4gJiYgbmV4dEluZGV4ID09IHNwYW5FbmQgJiYgbmV4dFNwYW4ubGV2ZWwgKyAoZm9yd2FyZCA/IDAgOiAxKSA8IHNwYW4ubGV2ZWwpXG4gICAgICAgIHJldHVybiBzdGF0ZS5FZGl0b3JTZWxlY3Rpb24uY3Vyc29yKG5leHRTcGFuLnNpZGUoIWZvcndhcmQsIGRpcikgKyBsaW5lLmZyb20sIG5leHRTcGFuLmZvcndhcmQoZm9yd2FyZCwgZGlyKSA/IDEgOiAtMSwgbmV4dFNwYW4ubGV2ZWwpO1xuICAgIHJldHVybiBzdGF0ZS5FZGl0b3JTZWxlY3Rpb24uY3Vyc29yKG5leHRJbmRleCArIGxpbmUuZnJvbSwgc3Bhbi5mb3J3YXJkKGZvcndhcmQsIGRpcikgPyAtMSA6IDEsIHNwYW4ubGV2ZWwpO1xufVxuZnVuY3Rpb24gYXV0b0RpcmVjdGlvbih0ZXh0LCBmcm9tLCB0bykge1xuICAgIGZvciAobGV0IGkgPSBmcm9tOyBpIDwgdG87IGkrKykge1xuICAgICAgICBsZXQgdHlwZSA9IGNoYXJUeXBlKHRleHQuY2hhckNvZGVBdChpKSk7XG4gICAgICAgIGlmICh0eXBlID09IDEgLyogVC5MICovKVxuICAgICAgICAgICAgcmV0dXJuIExUUjtcbiAgICAgICAgaWYgKHR5cGUgPT0gMiAvKiBULlIgKi8gfHwgdHlwZSA9PSA0IC8qIFQuQUwgKi8pXG4gICAgICAgICAgICByZXR1cm4gUlRMO1xuICAgIH1cbiAgICByZXR1cm4gTFRSO1xufVxuXG5jb25zdCBjbGlja0FkZHNTZWxlY3Rpb25SYW5nZSA9IHN0YXRlLkZhY2V0LmRlZmluZSgpO1xuY29uc3QgZHJhZ01vdmVzU2VsZWN0aW9uJDEgPSBzdGF0ZS5GYWNldC5kZWZpbmUoKTtcbmNvbnN0IG1vdXNlU2VsZWN0aW9uU3R5bGUgPSBzdGF0ZS5GYWNldC5kZWZpbmUoKTtcbmNvbnN0IGV4Y2VwdGlvblNpbmsgPSBzdGF0ZS5GYWNldC5kZWZpbmUoKTtcbmNvbnN0IHVwZGF0ZUxpc3RlbmVyID0gc3RhdGUuRmFjZXQuZGVmaW5lKCk7XG5jb25zdCBpbnB1dEhhbmRsZXIgPSBzdGF0ZS5GYWNldC5kZWZpbmUoKTtcbmNvbnN0IGZvY3VzQ2hhbmdlRWZmZWN0ID0gc3RhdGUuRmFjZXQuZGVmaW5lKCk7XG5jb25zdCBwZXJMaW5lVGV4dERpcmVjdGlvbiA9IHN0YXRlLkZhY2V0LmRlZmluZSh7XG4gICAgY29tYmluZTogdmFsdWVzID0+IHZhbHVlcy5zb21lKHggPT4geClcbn0pO1xuY29uc3QgbmF0aXZlU2VsZWN0aW9uSGlkZGVuID0gc3RhdGUuRmFjZXQuZGVmaW5lKHtcbiAgICBjb21iaW5lOiB2YWx1ZXMgPT4gdmFsdWVzLnNvbWUoeCA9PiB4KVxufSk7XG5jb25zdCBzY3JvbGxIYW5kbGVyID0gc3RhdGUuRmFjZXQuZGVmaW5lKCk7XG5jbGFzcyBTY3JvbGxUYXJnZXQge1xuICAgIGNvbnN0cnVjdG9yKHJhbmdlLCB5ID0gXCJuZWFyZXN0XCIsIHggPSBcIm5lYXJlc3RcIiwgeU1hcmdpbiA9IDUsIHhNYXJnaW4gPSA1LCBcbiAgICAvLyBUaGlzIGRhdGEgc3RydWN0dXJlIGlzIGFidXNlZCB0byBhbHNvIHN0b3JlIHByZWNpc2Ugc2Nyb2xsXG4gICAgLy8gc25hcHNob3RzLCBpbnN0ZWFkIG9mIGEgYHNjcm9sbEludG9WaWV3YCByZXF1ZXN0LiBXaGVuIHRoaXNcbiAgICAvLyBmbGFnIGlzIGB0cnVlYCwgYHJhbmdlYCBwb2ludHMgYXQgYSBwb3NpdGlvbiBpbiB0aGUgcmVmZXJlbmNlXG4gICAgLy8gbGluZSwgYHlNYXJnaW5gIGhvbGRzIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIHRvcCBvZiB0aGF0XG4gICAgLy8gbGluZSBhbmQgdGhlIHRvcCBvZiB0aGUgZWRpdG9yLCBhbmQgYHhNYXJnaW5gIGhvbGRzIHRoZVxuICAgIC8vIGVkaXRvcidzIGBzY3JvbGxMZWZ0YC5cbiAgICBpc1NuYXBzaG90ID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5yYW5nZSA9IHJhbmdlO1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnlNYXJnaW4gPSB5TWFyZ2luO1xuICAgICAgICB0aGlzLnhNYXJnaW4gPSB4TWFyZ2luO1xuICAgICAgICB0aGlzLmlzU25hcHNob3QgPSBpc1NuYXBzaG90O1xuICAgIH1cbiAgICBtYXAoY2hhbmdlcykge1xuICAgICAgICByZXR1cm4gY2hhbmdlcy5lbXB0eSA/IHRoaXMgOlxuICAgICAgICAgICAgbmV3IFNjcm9sbFRhcmdldCh0aGlzLnJhbmdlLm1hcChjaGFuZ2VzKSwgdGhpcy55LCB0aGlzLngsIHRoaXMueU1hcmdpbiwgdGhpcy54TWFyZ2luLCB0aGlzLmlzU25hcHNob3QpO1xuICAgIH1cbiAgICBjbGlwKHN0YXRlJDEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmFuZ2UudG8gPD0gc3RhdGUkMS5kb2MubGVuZ3RoID8gdGhpcyA6XG4gICAgICAgICAgICBuZXcgU2Nyb2xsVGFyZ2V0KHN0YXRlLkVkaXRvclNlbGVjdGlvbi5jdXJzb3Ioc3RhdGUkMS5kb2MubGVuZ3RoKSwgdGhpcy55LCB0aGlzLngsIHRoaXMueU1hcmdpbiwgdGhpcy54TWFyZ2luLCB0aGlzLmlzU25hcHNob3QpO1xuICAgIH1cbn1cbmNvbnN0IHNjcm9sbEludG9WaWV3ID0gc3RhdGUuU3RhdGVFZmZlY3QuZGVmaW5lKHsgbWFwOiAodCwgY2gpID0+IHQubWFwKGNoKSB9KTtcbmNvbnN0IHNldEVkaXRDb250ZXh0Rm9ybWF0dGluZyA9IHN0YXRlLlN0YXRlRWZmZWN0LmRlZmluZSgpO1xuLyoqXG5Mb2cgb3IgcmVwb3J0IGFuIHVuaGFuZGxlZCBleGNlcHRpb24gaW4gY2xpZW50IGNvZGUuIFNob3VsZFxucHJvYmFibHkgb25seSBiZSB1c2VkIGJ5IGV4dGVuc2lvbiBjb2RlIHRoYXQgYWxsb3dzIGNsaWVudCBjb2RlIHRvXG5wcm92aWRlIGZ1bmN0aW9ucywgYW5kIGNhbGxzIHRob3NlIGZ1bmN0aW9ucyBpbiBhIGNvbnRleHQgd2hlcmUgYW5cbmV4Y2VwdGlvbiBjYW4ndCBiZSBwcm9wYWdhdGVkIHRvIGNhbGxpbmcgY29kZSBpbiBhIHJlYXNvbmFibGUgd2F5XG4oZm9yIGV4YW1wbGUgd2hlbiBpbiBhbiBldmVudCBoYW5kbGVyKS5cblxuRWl0aGVyIGNhbGxzIGEgaGFuZGxlciByZWdpc3RlcmVkIHdpdGhcbltgRWRpdG9yVmlldy5leGNlcHRpb25TaW5rYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyN2aWV3LkVkaXRvclZpZXdeZXhjZXB0aW9uU2luayksXG5gd2luZG93Lm9uZXJyb3JgLCBpZiBkZWZpbmVkLCBvciBgY29uc29sZS5lcnJvcmAgKGluIHdoaWNoIGNhc2Vcbml0J2xsIHBhc3MgYGNvbnRleHRgLCB3aGVuIGdpdmVuLCBhcyBmaXJzdCBhcmd1bWVudCkuXG4qL1xuZnVuY3Rpb24gbG9nRXhjZXB0aW9uKHN0YXRlLCBleGNlcHRpb24sIGNvbnRleHQpIHtcbiAgICBsZXQgaGFuZGxlciA9IHN0YXRlLmZhY2V0KGV4Y2VwdGlvblNpbmspO1xuICAgIGlmIChoYW5kbGVyLmxlbmd0aClcbiAgICAgICAgaGFuZGxlclswXShleGNlcHRpb24pO1xuICAgIGVsc2UgaWYgKHdpbmRvdy5vbmVycm9yKVxuICAgICAgICB3aW5kb3cub25lcnJvcihTdHJpbmcoZXhjZXB0aW9uKSwgY29udGV4dCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGV4Y2VwdGlvbik7XG4gICAgZWxzZSBpZiAoY29udGV4dClcbiAgICAgICAgY29uc29sZS5lcnJvcihjb250ZXh0ICsgXCI6XCIsIGV4Y2VwdGlvbik7XG4gICAgZWxzZVxuICAgICAgICBjb25zb2xlLmVycm9yKGV4Y2VwdGlvbik7XG59XG5jb25zdCBlZGl0YWJsZSA9IHN0YXRlLkZhY2V0LmRlZmluZSh7IGNvbWJpbmU6IHZhbHVlcyA9PiB2YWx1ZXMubGVuZ3RoID8gdmFsdWVzWzBdIDogdHJ1ZSB9KTtcbmxldCBuZXh0UGx1Z2luSUQgPSAwO1xuY29uc3Qgdmlld1BsdWdpbiA9IHN0YXRlLkZhY2V0LmRlZmluZSgpO1xuLyoqXG5WaWV3IHBsdWdpbnMgYXNzb2NpYXRlIHN0YXRlZnVsIHZhbHVlcyB3aXRoIGEgdmlldy4gVGhleSBjYW5cbmluZmx1ZW5jZSB0aGUgd2F5IHRoZSBjb250ZW50IGlzIGRyYXduLCBhbmQgYXJlIG5vdGlmaWVkIG9mIHRoaW5nc1xudGhhdCBoYXBwZW4gaW4gdGhlIHZpZXcuXG4qL1xuY2xhc3MgVmlld1BsdWdpbiB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBpZCwgXG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBjcmVhdGUsIFxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgZG9tRXZlbnRIYW5kbGVycywgXG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBkb21FdmVudE9ic2VydmVycywgYnVpbGRFeHRlbnNpb25zKSB7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5jcmVhdGUgPSBjcmVhdGU7XG4gICAgICAgIHRoaXMuZG9tRXZlbnRIYW5kbGVycyA9IGRvbUV2ZW50SGFuZGxlcnM7XG4gICAgICAgIHRoaXMuZG9tRXZlbnRPYnNlcnZlcnMgPSBkb21FdmVudE9ic2VydmVycztcbiAgICAgICAgdGhpcy5leHRlbnNpb24gPSBidWlsZEV4dGVuc2lvbnModGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgIERlZmluZSBhIHBsdWdpbiBmcm9tIGEgY29uc3RydWN0b3IgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZVxuICAgIHBsdWdpbidzIHZhbHVlLCBnaXZlbiBhbiBlZGl0b3Igdmlldy5cbiAgICAqL1xuICAgIHN0YXRpYyBkZWZpbmUoY3JlYXRlLCBzcGVjKSB7XG4gICAgICAgIGNvbnN0IHsgZXZlbnRIYW5kbGVycywgZXZlbnRPYnNlcnZlcnMsIHByb3ZpZGUsIGRlY29yYXRpb25zOiBkZWNvIH0gPSBzcGVjIHx8IHt9O1xuICAgICAgICByZXR1cm4gbmV3IFZpZXdQbHVnaW4obmV4dFBsdWdpbklEKyssIGNyZWF0ZSwgZXZlbnRIYW5kbGVycywgZXZlbnRPYnNlcnZlcnMsIHBsdWdpbiA9PiB7XG4gICAgICAgICAgICBsZXQgZXh0ID0gW3ZpZXdQbHVnaW4ub2YocGx1Z2luKV07XG4gICAgICAgICAgICBpZiAoZGVjbylcbiAgICAgICAgICAgICAgICBleHQucHVzaChkZWNvcmF0aW9ucy5vZih2aWV3ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBsdWdpbkluc3QgPSB2aWV3LnBsdWdpbihwbHVnaW4pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGx1Z2luSW5zdCA/IGRlY28ocGx1Z2luSW5zdCkgOiBEZWNvcmF0aW9uLm5vbmU7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgaWYgKHByb3ZpZGUpXG4gICAgICAgICAgICAgICAgZXh0LnB1c2gocHJvdmlkZShwbHVnaW4pKTtcbiAgICAgICAgICAgIHJldHVybiBleHQ7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICBDcmVhdGUgYSBwbHVnaW4gZm9yIGEgY2xhc3Mgd2hvc2UgY29uc3RydWN0b3IgdGFrZXMgYSBzaW5nbGVcbiAgICBlZGl0b3IgdmlldyBhcyBhcmd1bWVudC5cbiAgICAqL1xuICAgIHN0YXRpYyBmcm9tQ2xhc3MoY2xzLCBzcGVjKSB7XG4gICAgICAgIHJldHVybiBWaWV3UGx1Z2luLmRlZmluZSh2aWV3ID0+IG5ldyBjbHModmlldyksIHNwZWMpO1xuICAgIH1cbn1cbmNsYXNzIFBsdWdpbkluc3RhbmNlIHtcbiAgICBjb25zdHJ1Y3RvcihzcGVjKSB7XG4gICAgICAgIHRoaXMuc3BlYyA9IHNwZWM7XG4gICAgICAgIC8vIFdoZW4gc3RhcnRpbmcgYW4gdXBkYXRlLCBhbGwgcGx1Z2lucyBoYXZlIHRoaXMgZmllbGQgc2V0IHRvIHRoZVxuICAgICAgICAvLyB1cGRhdGUgb2JqZWN0LCBpbmRpY2F0aW5nIHRoZXkgbmVlZCB0byBiZSB1cGRhdGVkLiBXaGVuIGZpbmlzaGVkXG4gICAgICAgIC8vIHVwZGF0aW5nLCBpdCBpcyBzZXQgdG8gYGZhbHNlYC4gUmV0cmlldmluZyBhIHBsdWdpbiB0aGF0IG5lZWRzIHRvXG4gICAgICAgIC8vIGJlIHVwZGF0ZWQgd2l0aCBgdmlldy5wbHVnaW5gIGZvcmNlcyBhbiBlYWdlciB1cGRhdGUuXG4gICAgICAgIHRoaXMubXVzdFVwZGF0ZSA9IG51bGw7XG4gICAgICAgIC8vIFRoaXMgaXMgbnVsbCB3aGVuIHRoZSBwbHVnaW4gaXMgaW5pdGlhbGx5IGNyZWF0ZWQsIGJ1dFxuICAgICAgICAvLyBpbml0aWFsaXplZCBvbiB0aGUgZmlyc3QgdXBkYXRlLlxuICAgICAgICB0aGlzLnZhbHVlID0gbnVsbDtcbiAgICB9XG4gICAgdXBkYXRlKHZpZXcpIHtcbiAgICAgICAgaWYgKCF0aGlzLnZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zcGVjKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuc3BlYy5jcmVhdGUodmlldyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ0V4Y2VwdGlvbih2aWV3LnN0YXRlLCBlLCBcIkNvZGVNaXJyb3IgcGx1Z2luIGNyYXNoZWRcIik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGVhY3RpdmF0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLm11c3RVcGRhdGUpIHtcbiAgICAgICAgICAgIGxldCB1cGRhdGUgPSB0aGlzLm11c3RVcGRhdGU7XG4gICAgICAgICAgICB0aGlzLm11c3RVcGRhdGUgPSBudWxsO1xuICAgICAgICAgICAgaWYgKHRoaXMudmFsdWUudXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZS51cGRhdGUodXBkYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nRXhjZXB0aW9uKHVwZGF0ZS5zdGF0ZSwgZSwgXCJDb2RlTWlycm9yIHBsdWdpbiBjcmFzaGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy52YWx1ZS5kZXN0cm95KVxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChfKSB7IH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWFjdGl2YXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkZXN0cm95KHZpZXcpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoKF9hID0gdGhpcy52YWx1ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRlc3Ryb3kpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZS5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGxvZ0V4Y2VwdGlvbih2aWV3LnN0YXRlLCBlLCBcIkNvZGVNaXJyb3IgcGx1Z2luIGNyYXNoZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGVhY3RpdmF0ZSgpIHtcbiAgICAgICAgdGhpcy5zcGVjID0gdGhpcy52YWx1ZSA9IG51bGw7XG4gICAgfVxufVxuY29uc3QgZWRpdG9yQXR0cmlidXRlcyA9IHN0YXRlLkZhY2V0LmRlZmluZSgpO1xuY29uc3QgY29udGVudEF0dHJpYnV0ZXMgPSBzdGF0ZS5GYWNldC5kZWZpbmUoKTtcbi8vIFByb3ZpZGUgZGVjb3JhdGlvbnNcbmNvbnN0IGRlY29yYXRpb25zID0gc3RhdGUuRmFjZXQuZGVmaW5lKCk7XG5jb25zdCBvdXRlckRlY29yYXRpb25zID0gc3RhdGUuRmFjZXQuZGVmaW5lKCk7XG5jb25zdCBhdG9taWNSYW5nZXMgPSBzdGF0ZS5GYWNldC5kZWZpbmUoKTtcbmNvbnN0IGJpZGlJc29sYXRlZFJhbmdlcyA9IHN0YXRlLkZhY2V0LmRlZmluZSgpO1xuZnVuY3Rpb24gZ2V0SXNvbGF0ZWRSYW5nZXModmlldywgbGluZSkge1xuICAgIGxldCBpc29sYXRlcyA9IHZpZXcuc3RhdGUuZmFjZXQoYmlkaUlzb2xhdGVkUmFuZ2VzKTtcbiAgICBpZiAoIWlzb2xhdGVzLmxlbmd0aClcbiAgICAgICAgcmV0dXJuIGlzb2xhdGVzO1xuICAgIGxldCBzZXRzID0gaXNvbGF0ZXMubWFwKGkgPT4gaSBpbnN0YW5jZW9mIEZ1bmN0aW9uID8gaSh2aWV3KSA6IGkpO1xuICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICBzdGF0ZS5SYW5nZVNldC5zcGFucyhzZXRzLCBsaW5lLmZyb20sIGxpbmUudG8sIHtcbiAgICAgICAgcG9pbnQoKSB7IH0sXG4gICAgICAgIHNwYW4oZnJvbURvYywgdG9Eb2MsIGFjdGl2ZSwgb3Blbikge1xuICAgICAgICAgICAgbGV0IGZyb20gPSBmcm9tRG9jIC0gbGluZS5mcm9tLCB0byA9IHRvRG9jIC0gbGluZS5mcm9tO1xuICAgICAgICAgICAgbGV0IGxldmVsID0gcmVzdWx0O1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZS5sZW5ndGggLSAxOyBpID49IDA7IGktLSwgb3Blbi0tKSB7XG4gICAgICAgICAgICAgICAgbGV0IGRpcmVjdGlvbiA9IGFjdGl2ZVtpXS5zcGVjLmJpZGlJc29sYXRlLCB1cGRhdGU7XG4gICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PSBudWxsKVxuICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPSBhdXRvRGlyZWN0aW9uKGxpbmUudGV4dCwgZnJvbSwgdG8pO1xuICAgICAgICAgICAgICAgIGlmIChvcGVuID4gMCAmJiBsZXZlbC5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICAgICAgKHVwZGF0ZSA9IGxldmVsW2xldmVsLmxlbmd0aCAtIDFdKS50byA9PSBmcm9tICYmIHVwZGF0ZS5kaXJlY3Rpb24gPT0gZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZS50byA9IHRvO1xuICAgICAgICAgICAgICAgICAgICBsZXZlbCA9IHVwZGF0ZS5pbm5lcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBhZGQgPSB7IGZyb20sIHRvLCBkaXJlY3Rpb24sIGlubmVyOiBbXSB9O1xuICAgICAgICAgICAgICAgICAgICBsZXZlbC5wdXNoKGFkZCk7XG4gICAgICAgICAgICAgICAgICAgIGxldmVsID0gYWRkLmlubmVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5jb25zdCBzY3JvbGxNYXJnaW5zID0gc3RhdGUuRmFjZXQuZGVmaW5lKCk7XG5mdW5jdGlvbiBnZXRTY3JvbGxNYXJnaW5zKHZpZXcpIHtcbiAgICBsZXQgbGVmdCA9IDAsIHJpZ2h0ID0gMCwgdG9wID0gMCwgYm90dG9tID0gMDtcbiAgICBmb3IgKGxldCBzb3VyY2Ugb2Ygdmlldy5zdGF0ZS5mYWNldChzY3JvbGxNYXJnaW5zKSkge1xuICAgICAgICBsZXQgbSA9IHNvdXJjZSh2aWV3KTtcbiAgICAgICAgaWYgKG0pIHtcbiAgICAgICAgICAgIGlmIChtLmxlZnQgIT0gbnVsbClcbiAgICAgICAgICAgICAgICBsZWZ0ID0gTWF0aC5tYXgobGVmdCwgbS5sZWZ0KTtcbiAgICAgICAgICAgIGlmIChtLnJpZ2h0ICE9IG51bGwpXG4gICAgICAgICAgICAgICAgcmlnaHQgPSBNYXRoLm1heChyaWdodCwgbS5yaWdodCk7XG4gICAgICAgICAgICBpZiAobS50b3AgIT0gbnVsbClcbiAgICAgICAgICAgICAgICB0b3AgPSBNYXRoLm1heCh0b3AsIG0udG9wKTtcbiAgICAgICAgICAgIGlmIChtLmJvdHRvbSAhPSBudWxsKVxuICAgICAgICAgICAgICAgIGJvdHRvbSA9IE1hdGgubWF4KGJvdHRvbSwgbS5ib3R0b20pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IGxlZnQsIHJpZ2h0LCB0b3AsIGJvdHRvbSB9O1xufVxuY29uc3Qgc3R5bGVNb2R1bGUgPSBzdGF0ZS5GYWNldC5kZWZpbmUoKTtcbmNsYXNzIENoYW5nZWRSYW5nZSB7XG4gICAgY29uc3RydWN0b3IoZnJvbUEsIHRvQSwgZnJvbUIsIHRvQikge1xuICAgICAgICB0aGlzLmZyb21BID0gZnJvbUE7XG4gICAgICAgIHRoaXMudG9BID0gdG9BO1xuICAgICAgICB0aGlzLmZyb21CID0gZnJvbUI7XG4gICAgICAgIHRoaXMudG9CID0gdG9CO1xuICAgIH1cbiAgICBqb2luKG90aGVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ2hhbmdlZFJhbmdlKE1hdGgubWluKHRoaXMuZnJvbUEsIG90aGVyLmZyb21BKSwgTWF0aC5tYXgodGhpcy50b0EsIG90aGVyLnRvQSksIE1hdGgubWluKHRoaXMuZnJvbUIsIG90aGVyLmZyb21CKSwgTWF0aC5tYXgodGhpcy50b0IsIG90aGVyLnRvQikpO1xuICAgIH1cbiAgICBhZGRUb1NldChzZXQpIHtcbiAgICAgICAgbGV0IGkgPSBzZXQubGVuZ3RoLCBtZSA9IHRoaXM7XG4gICAgICAgIGZvciAoOyBpID4gMDsgaS0tKSB7XG4gICAgICAgICAgICBsZXQgcmFuZ2UgPSBzZXRbaSAtIDFdO1xuICAgICAgICAgICAgaWYgKHJhbmdlLmZyb21BID4gbWUudG9BKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKHJhbmdlLnRvQSA8IG1lLmZyb21BKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgbWUgPSBtZS5qb2luKHJhbmdlKTtcbiAgICAgICAgICAgIHNldC5zcGxpY2UoaSAtIDEsIDEpO1xuICAgICAgICB9XG4gICAgICAgIHNldC5zcGxpY2UoaSwgMCwgbWUpO1xuICAgICAgICByZXR1cm4gc2V0O1xuICAgIH1cbiAgICBzdGF0aWMgZXh0ZW5kV2l0aFJhbmdlcyhkaWZmLCByYW5nZXMpIHtcbiAgICAgICAgaWYgKHJhbmdlcy5sZW5ndGggPT0gMClcbiAgICAgICAgICAgIHJldHVybiBkaWZmO1xuICAgICAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgICAgIGZvciAobGV0IGRJID0gMCwgckkgPSAwLCBwb3NBID0gMCwgcG9zQiA9IDA7OyBkSSsrKSB7XG4gICAgICAgICAgICBsZXQgbmV4dCA9IGRJID09IGRpZmYubGVuZ3RoID8gbnVsbCA6IGRpZmZbZEldLCBvZmYgPSBwb3NBIC0gcG9zQjtcbiAgICAgICAgICAgIGxldCBlbmQgPSBuZXh0ID8gbmV4dC5mcm9tQiA6IDFlOTtcbiAgICAgICAgICAgIHdoaWxlIChySSA8IHJhbmdlcy5sZW5ndGggJiYgcmFuZ2VzW3JJXSA8IGVuZCkge1xuICAgICAgICAgICAgICAgIGxldCBmcm9tID0gcmFuZ2VzW3JJXSwgdG8gPSByYW5nZXNbckkgKyAxXTtcbiAgICAgICAgICAgICAgICBsZXQgZnJvbUIgPSBNYXRoLm1heChwb3NCLCBmcm9tKSwgdG9CID0gTWF0aC5taW4oZW5kLCB0byk7XG4gICAgICAgICAgICAgICAgaWYgKGZyb21CIDw9IHRvQilcbiAgICAgICAgICAgICAgICAgICAgbmV3IENoYW5nZWRSYW5nZShmcm9tQiArIG9mZiwgdG9CICsgb2ZmLCBmcm9tQiwgdG9CKS5hZGRUb1NldChyZXN1bHQpO1xuICAgICAgICAgICAgICAgIGlmICh0byA+IGVuZClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBySSArPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFuZXh0KVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBuZXcgQ2hhbmdlZFJhbmdlKG5leHQuZnJvbUEsIG5leHQudG9BLCBuZXh0LmZyb21CLCBuZXh0LnRvQikuYWRkVG9TZXQocmVzdWx0KTtcbiAgICAgICAgICAgIHBvc0EgPSBuZXh0LnRvQTtcbiAgICAgICAgICAgIHBvc0IgPSBuZXh0LnRvQjtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuVmlldyBbcGx1Z2luc10oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyN2aWV3LlZpZXdQbHVnaW4pIGFyZSBnaXZlbiBpbnN0YW5jZXMgb2YgdGhpc1xuY2xhc3MsIHdoaWNoIGRlc2NyaWJlIHdoYXQgaGFwcGVuZWQsIHdoZW5ldmVyIHRoZSB2aWV3IGlzIHVwZGF0ZWQuXG4qL1xuY2xhc3MgVmlld1VwZGF0ZSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgVGhlIGVkaXRvciB2aWV3IHRoYXQgdGhlIHVwZGF0ZSBpcyBhc3NvY2lhdGVkIHdpdGguXG4gICAgKi9cbiAgICB2aWV3LCBcbiAgICAvKipcbiAgICBUaGUgbmV3IGVkaXRvciBzdGF0ZS5cbiAgICAqL1xuICAgIHN0YXRlJDEsIFxuICAgIC8qKlxuICAgIFRoZSB0cmFuc2FjdGlvbnMgaW52b2x2ZWQgaW4gdGhlIHVwZGF0ZS4gTWF5IGJlIGVtcHR5LlxuICAgICovXG4gICAgdHJhbnNhY3Rpb25zKSB7XG4gICAgICAgIHRoaXMudmlldyA9IHZpZXc7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZSQxO1xuICAgICAgICB0aGlzLnRyYW5zYWN0aW9ucyA9IHRyYW5zYWN0aW9ucztcbiAgICAgICAgLyoqXG4gICAgICAgIEBpbnRlcm5hbFxuICAgICAgICAqL1xuICAgICAgICB0aGlzLmZsYWdzID0gMDtcbiAgICAgICAgdGhpcy5zdGFydFN0YXRlID0gdmlldy5zdGF0ZTtcbiAgICAgICAgdGhpcy5jaGFuZ2VzID0gc3RhdGUuQ2hhbmdlU2V0LmVtcHR5KHRoaXMuc3RhcnRTdGF0ZS5kb2MubGVuZ3RoKTtcbiAgICAgICAgZm9yIChsZXQgdHIgb2YgdHJhbnNhY3Rpb25zKVxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VzID0gdGhpcy5jaGFuZ2VzLmNvbXBvc2UodHIuY2hhbmdlcyk7XG4gICAgICAgIGxldCBjaGFuZ2VkUmFuZ2VzID0gW107XG4gICAgICAgIHRoaXMuY2hhbmdlcy5pdGVyQ2hhbmdlZFJhbmdlcygoZnJvbUEsIHRvQSwgZnJvbUIsIHRvQikgPT4gY2hhbmdlZFJhbmdlcy5wdXNoKG5ldyBDaGFuZ2VkUmFuZ2UoZnJvbUEsIHRvQSwgZnJvbUIsIHRvQikpKTtcbiAgICAgICAgdGhpcy5jaGFuZ2VkUmFuZ2VzID0gY2hhbmdlZFJhbmdlcztcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlKHZpZXcsIHN0YXRlLCB0cmFuc2FjdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWaWV3VXBkYXRlKHZpZXcsIHN0YXRlLCB0cmFuc2FjdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICBUZWxscyB5b3Ugd2hldGhlciB0aGUgW3ZpZXdwb3J0XShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3ZpZXcuRWRpdG9yVmlldy52aWV3cG9ydCkgb3JcbiAgICBbdmlzaWJsZSByYW5nZXNdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jdmlldy5FZGl0b3JWaWV3LnZpc2libGVSYW5nZXMpIGNoYW5nZWQgaW4gdGhpc1xuICAgIHVwZGF0ZS5cbiAgICAqL1xuICAgIGdldCB2aWV3cG9ydENoYW5nZWQoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5mbGFncyAmIDQgLyogVXBkYXRlRmxhZy5WaWV3cG9ydCAqLykgPiAwO1xuICAgIH1cbiAgICAvKipcbiAgICBJbmRpY2F0ZXMgd2hldGhlciB0aGUgaGVpZ2h0IG9mIGEgYmxvY2sgZWxlbWVudCBpbiB0aGUgZWRpdG9yXG4gICAgY2hhbmdlZCBpbiB0aGlzIHVwZGF0ZS5cbiAgICAqL1xuICAgIGdldCBoZWlnaHRDaGFuZ2VkKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuZmxhZ3MgJiAyIC8qIFVwZGF0ZUZsYWcuSGVpZ2h0ICovKSA+IDA7XG4gICAgfVxuICAgIC8qKlxuICAgIFJldHVybnMgdHJ1ZSB3aGVuIHRoZSBkb2N1bWVudCB3YXMgbW9kaWZpZWQgb3IgdGhlIHNpemUgb2YgdGhlXG4gICAgZWRpdG9yLCBvciBlbGVtZW50cyB3aXRoaW4gdGhlIGVkaXRvciwgY2hhbmdlZC5cbiAgICAqL1xuICAgIGdldCBnZW9tZXRyeUNoYW5nZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvY0NoYW5nZWQgfHwgKHRoaXMuZmxhZ3MgJiAoOCAvKiBVcGRhdGVGbGFnLkdlb21ldHJ5ICovIHwgMiAvKiBVcGRhdGVGbGFnLkhlaWdodCAqLykpID4gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgVHJ1ZSB3aGVuIHRoaXMgdXBkYXRlIGluZGljYXRlcyBhIGZvY3VzIGNoYW5nZS5cbiAgICAqL1xuICAgIGdldCBmb2N1c0NoYW5nZWQoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5mbGFncyAmIDEgLyogVXBkYXRlRmxhZy5Gb2N1cyAqLykgPiAwO1xuICAgIH1cbiAgICAvKipcbiAgICBXaGV0aGVyIHRoZSBkb2N1bWVudCBjaGFuZ2VkIGluIHRoaXMgdXBkYXRlLlxuICAgICovXG4gICAgZ2V0IGRvY0NoYW5nZWQoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5jaGFuZ2VzLmVtcHR5O1xuICAgIH1cbiAgICAvKipcbiAgICBXaGV0aGVyIHRoZSBzZWxlY3Rpb24gd2FzIGV4cGxpY2l0bHkgc2V0IGluIHRoaXMgdXBkYXRlLlxuICAgICovXG4gICAgZ2V0IHNlbGVjdGlvblNldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNhY3Rpb25zLnNvbWUodHIgPT4gdHIuc2VsZWN0aW9uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBnZXQgZW1wdHkoKSB7IHJldHVybiB0aGlzLmZsYWdzID09IDAgJiYgdGhpcy50cmFuc2FjdGlvbnMubGVuZ3RoID09IDA7IH1cbn1cblxuY2xhc3MgRG9jVmlldyBleHRlbmRzIENvbnRlbnRWaWV3IHtcbiAgICBnZXQgbGVuZ3RoKCkgeyByZXR1cm4gdGhpcy52aWV3LnN0YXRlLmRvYy5sZW5ndGg7IH1cbiAgICBjb25zdHJ1Y3Rvcih2aWV3KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMudmlldyA9IHZpZXc7XG4gICAgICAgIHRoaXMuZGVjb3JhdGlvbnMgPSBbXTtcbiAgICAgICAgdGhpcy5keW5hbWljRGVjb3JhdGlvbk1hcCA9IFtmYWxzZV07XG4gICAgICAgIHRoaXMuZG9tQ2hhbmdlZCA9IG51bGw7XG4gICAgICAgIHRoaXMuaGFzQ29tcG9zaXRpb24gPSBudWxsO1xuICAgICAgICB0aGlzLm1hcmtlZEZvckNvbXBvc2l0aW9uID0gbmV3IFNldDtcbiAgICAgICAgdGhpcy5lZGl0Q29udGV4dEZvcm1hdHRpbmcgPSBEZWNvcmF0aW9uLm5vbmU7XG4gICAgICAgIHRoaXMubGFzdENvbXBvc2l0aW9uQWZ0ZXJDdXJzb3IgPSBmYWxzZTtcbiAgICAgICAgLy8gVHJhY2sgYSBtaW5pbXVtIHdpZHRoIGZvciB0aGUgZWRpdG9yLiBXaGVuIG1lYXN1cmluZyBzaXplcyBpblxuICAgICAgICAvLyBtZWFzdXJlVmlzaWJsZUxpbmVIZWlnaHRzLCB0aGlzIGlzIHVwZGF0ZWQgdG8gcG9pbnQgYXQgdGhlIHdpZHRoXG4gICAgICAgIC8vIG9mIGEgZ2l2ZW4gZWxlbWVudCBhbmQgaXRzIGV4dGVudCBpbiB0aGUgZG9jdW1lbnQuIFdoZW4gYSBjaGFuZ2VcbiAgICAgICAgLy8gaGFwcGVucyBpbiB0aGF0IHJhbmdlLCB0aGVzZSBhcmUgcmVzZXQuIFRoYXQgd2F5LCBvbmNlIHdlJ3ZlIHNlZW5cbiAgICAgICAgLy8gYSBsaW5lL2VsZW1lbnQgb2YgYSBnaXZlbiBsZW5ndGgsIHdlIGtlZXAgdGhlIGVkaXRvciB3aWRlIGVub3VnaFxuICAgICAgICAvLyB0byBmaXQgYXQgbGVhc3QgdGhhdCBlbGVtZW50LCB1bnRpbCBpdCBpcyBjaGFuZ2VkLCBhdCB3aGljaCBwb2ludFxuICAgICAgICAvLyB3ZSBmb3JnZXQgaXQgYWdhaW4uXG4gICAgICAgIHRoaXMubWluV2lkdGggPSAwO1xuICAgICAgICB0aGlzLm1pbldpZHRoRnJvbSA9IDA7XG4gICAgICAgIHRoaXMubWluV2lkdGhUbyA9IDA7XG4gICAgICAgIC8vIFRyYWNrIHdoZXRoZXIgdGhlIERPTSBzZWxlY3Rpb24gd2FzIHNldCBpbiBhIGxvc3N5IHdheSwgc28gdGhhdFxuICAgICAgICAvLyB3ZSBkb24ndCBtZXNzIGl0IHVwIHdoZW4gcmVhZGluZyBpdCBiYWNrIGl0XG4gICAgICAgIHRoaXMuaW1wcmVjaXNlQW5jaG9yID0gbnVsbDtcbiAgICAgICAgdGhpcy5pbXByZWNpc2VIZWFkID0gbnVsbDtcbiAgICAgICAgdGhpcy5mb3JjZVNlbGVjdGlvbiA9IGZhbHNlO1xuICAgICAgICAvLyBVc2VkIGJ5IHRoZSByZXNpemUgb2JzZXJ2ZXIgdG8gaWdub3JlIHJlc2l6ZXMgdGhhdCB3ZSBjYXVzZWRcbiAgICAgICAgLy8gb3Vyc2VsdmVzXG4gICAgICAgIHRoaXMubGFzdFVwZGF0ZSA9IERhdGUubm93KCk7XG4gICAgICAgIHRoaXMuc2V0RE9NKHZpZXcuY29udGVudERPTSk7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBbbmV3IExpbmVWaWV3XTtcbiAgICAgICAgdGhpcy5jaGlsZHJlblswXS5zZXRQYXJlbnQodGhpcyk7XG4gICAgICAgIHRoaXMudXBkYXRlRGVjbygpO1xuICAgICAgICB0aGlzLnVwZGF0ZUlubmVyKFtuZXcgQ2hhbmdlZFJhbmdlKDAsIDAsIDAsIHZpZXcuc3RhdGUuZG9jLmxlbmd0aCldLCAwLCBudWxsKTtcbiAgICB9XG4gICAgLy8gVXBkYXRlIHRoZSBkb2N1bWVudCB2aWV3IHRvIGEgZ2l2ZW4gc3RhdGUuXG4gICAgdXBkYXRlKHVwZGF0ZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGxldCBjaGFuZ2VkUmFuZ2VzID0gdXBkYXRlLmNoYW5nZWRSYW5nZXM7XG4gICAgICAgIGlmICh0aGlzLm1pbldpZHRoID4gMCAmJiBjaGFuZ2VkUmFuZ2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKCFjaGFuZ2VkUmFuZ2VzLmV2ZXJ5KCh7IGZyb21BLCB0b0EgfSkgPT4gdG9BIDwgdGhpcy5taW5XaWR0aEZyb20gfHwgZnJvbUEgPiB0aGlzLm1pbldpZHRoVG8pKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5taW5XaWR0aCA9IHRoaXMubWluV2lkdGhGcm9tID0gdGhpcy5taW5XaWR0aFRvID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubWluV2lkdGhGcm9tID0gdXBkYXRlLmNoYW5nZXMubWFwUG9zKHRoaXMubWluV2lkdGhGcm9tLCAxKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1pbldpZHRoVG8gPSB1cGRhdGUuY2hhbmdlcy5tYXBQb3ModGhpcy5taW5XaWR0aFRvLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZUVkaXRDb250ZXh0Rm9ybWF0dGluZyh1cGRhdGUpO1xuICAgICAgICBsZXQgcmVhZENvbXBvc2l0aW9uQXQgPSAtMTtcbiAgICAgICAgaWYgKHRoaXMudmlldy5pbnB1dFN0YXRlLmNvbXBvc2luZyA+PSAwICYmICF0aGlzLnZpZXcub2JzZXJ2ZXIuZWRpdENvbnRleHQpIHtcbiAgICAgICAgICAgIGlmICgoX2EgPSB0aGlzLmRvbUNoYW5nZWQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uZXdTZWwpXG4gICAgICAgICAgICAgICAgcmVhZENvbXBvc2l0aW9uQXQgPSB0aGlzLmRvbUNoYW5nZWQubmV3U2VsLmhlYWQ7XG4gICAgICAgICAgICBlbHNlIGlmICghdG91Y2hlc0NvbXBvc2l0aW9uKHVwZGF0ZS5jaGFuZ2VzLCB0aGlzLmhhc0NvbXBvc2l0aW9uKSAmJiAhdXBkYXRlLnNlbGVjdGlvblNldClcbiAgICAgICAgICAgICAgICByZWFkQ29tcG9zaXRpb25BdCA9IHVwZGF0ZS5zdGF0ZS5zZWxlY3Rpb24ubWFpbi5oZWFkO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjb21wb3NpdGlvbiA9IHJlYWRDb21wb3NpdGlvbkF0ID4gLTEgPyBmaW5kQ29tcG9zaXRpb25SYW5nZSh0aGlzLnZpZXcsIHVwZGF0ZS5jaGFuZ2VzLCByZWFkQ29tcG9zaXRpb25BdCkgOiBudWxsO1xuICAgICAgICB0aGlzLmRvbUNoYW5nZWQgPSBudWxsO1xuICAgICAgICBpZiAodGhpcy5oYXNDb21wb3NpdGlvbikge1xuICAgICAgICAgICAgdGhpcy5tYXJrZWRGb3JDb21wb3NpdGlvbi5jbGVhcigpO1xuICAgICAgICAgICAgbGV0IHsgZnJvbSwgdG8gfSA9IHRoaXMuaGFzQ29tcG9zaXRpb247XG4gICAgICAgICAgICBjaGFuZ2VkUmFuZ2VzID0gbmV3IENoYW5nZWRSYW5nZShmcm9tLCB0bywgdXBkYXRlLmNoYW5nZXMubWFwUG9zKGZyb20sIC0xKSwgdXBkYXRlLmNoYW5nZXMubWFwUG9zKHRvLCAxKSlcbiAgICAgICAgICAgICAgICAuYWRkVG9TZXQoY2hhbmdlZFJhbmdlcy5zbGljZSgpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhhc0NvbXBvc2l0aW9uID0gY29tcG9zaXRpb24gPyB7IGZyb206IGNvbXBvc2l0aW9uLnJhbmdlLmZyb21CLCB0bzogY29tcG9zaXRpb24ucmFuZ2UudG9CIH0gOiBudWxsO1xuICAgICAgICAvLyBXaGVuIHRoZSBET00gbm9kZXMgYXJvdW5kIHRoZSBzZWxlY3Rpb24gYXJlIG1vdmVkIHRvIGFub3RoZXJcbiAgICAgICAgLy8gcGFyZW50LCBDaHJvbWUgc29tZXRpbWVzIHJlcG9ydHMgYSBkaWZmZXJlbnQgc2VsZWN0aW9uIHRocm91Z2hcbiAgICAgICAgLy8gZ2V0U2VsZWN0aW9uIHRoYW4gdGhlIG9uZSB0aGF0IGl0IGFjdHVhbGx5IHNob3dzIHRvIHRoZSB1c2VyLlxuICAgICAgICAvLyBUaGlzIGZvcmNlcyBhIHNlbGVjdGlvbiB1cGRhdGUgd2hlbiBsaW5lcyBhcmUgam9pbmVkIHRvIHdvcmtcbiAgICAgICAgLy8gYXJvdW5kIHRoYXQuIElzc3VlICM1NFxuICAgICAgICBpZiAoKGJyb3dzZXIuaWUgfHwgYnJvd3Nlci5jaHJvbWUpICYmICFjb21wb3NpdGlvbiAmJiB1cGRhdGUgJiZcbiAgICAgICAgICAgIHVwZGF0ZS5zdGF0ZS5kb2MubGluZXMgIT0gdXBkYXRlLnN0YXJ0U3RhdGUuZG9jLmxpbmVzKVxuICAgICAgICAgICAgdGhpcy5mb3JjZVNlbGVjdGlvbiA9IHRydWU7XG4gICAgICAgIGxldCBwcmV2RGVjbyA9IHRoaXMuZGVjb3JhdGlvbnMsIGRlY28gPSB0aGlzLnVwZGF0ZURlY28oKTtcbiAgICAgICAgbGV0IGRlY29EaWZmID0gZmluZENoYW5nZWREZWNvKHByZXZEZWNvLCBkZWNvLCB1cGRhdGUuY2hhbmdlcyk7XG4gICAgICAgIGNoYW5nZWRSYW5nZXMgPSBDaGFuZ2VkUmFuZ2UuZXh0ZW5kV2l0aFJhbmdlcyhjaGFuZ2VkUmFuZ2VzLCBkZWNvRGlmZik7XG4gICAgICAgIGlmICghKHRoaXMuZmxhZ3MgJiA3IC8qIFZpZXdGbGFnLkRpcnR5ICovKSAmJiBjaGFuZ2VkUmFuZ2VzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUlubmVyKGNoYW5nZWRSYW5nZXMsIHVwZGF0ZS5zdGFydFN0YXRlLmRvYy5sZW5ndGgsIGNvbXBvc2l0aW9uKTtcbiAgICAgICAgICAgIGlmICh1cGRhdGUudHJhbnNhY3Rpb25zLmxlbmd0aClcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RVcGRhdGUgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gVXNlZCBieSB1cGRhdGUgYW5kIHRoZSBjb25zdHJ1Y3RvciBkbyBwZXJmb3JtIHRoZSBhY3R1YWwgRE9NXG4gICAgLy8gdXBkYXRlXG4gICAgdXBkYXRlSW5uZXIoY2hhbmdlcywgb2xkTGVuZ3RoLCBjb21wb3NpdGlvbikge1xuICAgICAgICB0aGlzLnZpZXcudmlld1N0YXRlLm11c3RNZWFzdXJlQ29udGVudCA9IHRydWU7XG4gICAgICAgIHRoaXMudXBkYXRlQ2hpbGRyZW4oY2hhbmdlcywgb2xkTGVuZ3RoLCBjb21wb3NpdGlvbik7XG4gICAgICAgIGxldCB7IG9ic2VydmVyIH0gPSB0aGlzLnZpZXc7XG4gICAgICAgIG9ic2VydmVyLmlnbm9yZSgoKSA9PiB7XG4gICAgICAgICAgICAvLyBMb2NrIHRoZSBoZWlnaHQgZHVyaW5nIHJlZHJhd2luZywgc2luY2UgQ2hyb21lIHNvbWV0aW1lc1xuICAgICAgICAgICAgLy8gbWVzc2VzIHdpdGggdGhlIHNjcm9sbCBwb3NpdGlvbiBkdXJpbmcgRE9NIG11dGF0aW9uICh0aG91Z2hcbiAgICAgICAgICAgIC8vIG5vIHJlbGF5b3V0IGlzIHRyaWdnZXJlZCBhbmQgSSBjYW5ub3QgaW1hZ2luZSBob3cgaXQgY2FuXG4gICAgICAgICAgICAvLyByZWNvbXB1dGUgdGhlIHNjcm9sbCBwb3NpdGlvbiB3aXRob3V0IGEgbGF5b3V0KVxuICAgICAgICAgICAgdGhpcy5kb20uc3R5bGUuaGVpZ2h0ID0gdGhpcy52aWV3LnZpZXdTdGF0ZS5jb250ZW50SGVpZ2h0IC8gdGhpcy52aWV3LnNjYWxlWSArIFwicHhcIjtcbiAgICAgICAgICAgIHRoaXMuZG9tLnN0eWxlLmZsZXhCYXNpcyA9IHRoaXMubWluV2lkdGggPyB0aGlzLm1pbldpZHRoICsgXCJweFwiIDogXCJcIjtcbiAgICAgICAgICAgIC8vIENocm9tZSB3aWxsIHNvbWV0aW1lcywgd2hlbiBET00gbXV0YXRpb25zIG9jY3VyIGRpcmVjdGx5XG4gICAgICAgICAgICAvLyBhcm91bmQgdGhlIHNlbGVjdGlvbiwgZ2V0IGNvbmZ1c2VkIGFuZCByZXBvcnQgYSBkaWZmZXJlbnRcbiAgICAgICAgICAgIC8vIHNlbGVjdGlvbiBmcm9tIHRoZSBvbmUgaXQgZGlzcGxheXMgKGlzc3VlICMyMTgpLiBUaGlzIHRyaWVzXG4gICAgICAgICAgICAvLyB0byBkZXRlY3QgdGhhdCBzaXR1YXRpb24uXG4gICAgICAgICAgICBsZXQgdHJhY2sgPSBicm93c2VyLmNocm9tZSB8fCBicm93c2VyLmlvcyA/IHsgbm9kZTogb2JzZXJ2ZXIuc2VsZWN0aW9uUmFuZ2UuZm9jdXNOb2RlLCB3cml0dGVuOiBmYWxzZSB9IDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5zeW5jKHRoaXMudmlldywgdHJhY2spO1xuICAgICAgICAgICAgdGhpcy5mbGFncyAmPSB+NyAvKiBWaWV3RmxhZy5EaXJ0eSAqLztcbiAgICAgICAgICAgIGlmICh0cmFjayAmJiAodHJhY2sud3JpdHRlbiB8fCBvYnNlcnZlci5zZWxlY3Rpb25SYW5nZS5mb2N1c05vZGUgIT0gdHJhY2subm9kZSkpXG4gICAgICAgICAgICAgICAgdGhpcy5mb3JjZVNlbGVjdGlvbiA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmRvbS5zdHlsZS5oZWlnaHQgPSBcIlwiO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5tYXJrZWRGb3JDb21wb3NpdGlvbi5mb3JFYWNoKGNWaWV3ID0+IGNWaWV3LmZsYWdzICY9IH44IC8qIFZpZXdGbGFnLkNvbXBvc2l0aW9uICovKTtcbiAgICAgICAgbGV0IGdhcHMgPSBbXTtcbiAgICAgICAgaWYgKHRoaXMudmlldy52aWV3cG9ydC5mcm9tIHx8IHRoaXMudmlldy52aWV3cG9ydC50byA8IHRoaXMudmlldy5zdGF0ZS5kb2MubGVuZ3RoKVxuICAgICAgICAgICAgZm9yIChsZXQgY2hpbGQgb2YgdGhpcy5jaGlsZHJlbilcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBCbG9ja1dpZGdldFZpZXcgJiYgY2hpbGQud2lkZ2V0IGluc3RhbmNlb2YgQmxvY2tHYXBXaWRnZXQpXG4gICAgICAgICAgICAgICAgICAgIGdhcHMucHVzaChjaGlsZC5kb20pO1xuICAgICAgICBvYnNlcnZlci51cGRhdGVHYXBzKGdhcHMpO1xuICAgIH1cbiAgICB1cGRhdGVDaGlsZHJlbihjaGFuZ2VzLCBvbGRMZW5ndGgsIGNvbXBvc2l0aW9uKSB7XG4gICAgICAgIGxldCByYW5nZXMgPSBjb21wb3NpdGlvbiA/IGNvbXBvc2l0aW9uLnJhbmdlLmFkZFRvU2V0KGNoYW5nZXMuc2xpY2UoKSkgOiBjaGFuZ2VzO1xuICAgICAgICBsZXQgY3Vyc29yID0gdGhpcy5jaGlsZEN1cnNvcihvbGRMZW5ndGgpO1xuICAgICAgICBmb3IgKGxldCBpID0gcmFuZ2VzLmxlbmd0aCAtIDE7OyBpLS0pIHtcbiAgICAgICAgICAgIGxldCBuZXh0ID0gaSA+PSAwID8gcmFuZ2VzW2ldIDogbnVsbDtcbiAgICAgICAgICAgIGlmICghbmV4dClcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGxldCB7IGZyb21BLCB0b0EsIGZyb21CLCB0b0IgfSA9IG5leHQsIGNvbnRlbnQsIGJyZWFrQXRTdGFydCwgb3BlblN0YXJ0LCBvcGVuRW5kO1xuICAgICAgICAgICAgaWYgKGNvbXBvc2l0aW9uICYmIGNvbXBvc2l0aW9uLnJhbmdlLmZyb21CIDwgdG9CICYmIGNvbXBvc2l0aW9uLnJhbmdlLnRvQiA+IGZyb21CKSB7XG4gICAgICAgICAgICAgICAgbGV0IGJlZm9yZSA9IENvbnRlbnRCdWlsZGVyLmJ1aWxkKHRoaXMudmlldy5zdGF0ZS5kb2MsIGZyb21CLCBjb21wb3NpdGlvbi5yYW5nZS5mcm9tQiwgdGhpcy5kZWNvcmF0aW9ucywgdGhpcy5keW5hbWljRGVjb3JhdGlvbk1hcCk7XG4gICAgICAgICAgICAgICAgbGV0IGFmdGVyID0gQ29udGVudEJ1aWxkZXIuYnVpbGQodGhpcy52aWV3LnN0YXRlLmRvYywgY29tcG9zaXRpb24ucmFuZ2UudG9CLCB0b0IsIHRoaXMuZGVjb3JhdGlvbnMsIHRoaXMuZHluYW1pY0RlY29yYXRpb25NYXApO1xuICAgICAgICAgICAgICAgIGJyZWFrQXRTdGFydCA9IGJlZm9yZS5icmVha0F0U3RhcnQ7XG4gICAgICAgICAgICAgICAgb3BlblN0YXJ0ID0gYmVmb3JlLm9wZW5TdGFydDtcbiAgICAgICAgICAgICAgICBvcGVuRW5kID0gYWZ0ZXIub3BlbkVuZDtcbiAgICAgICAgICAgICAgICBsZXQgY29tcExpbmUgPSB0aGlzLmNvbXBvc2l0aW9uVmlldyhjb21wb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgaWYgKGFmdGVyLmJyZWFrQXRTdGFydCkge1xuICAgICAgICAgICAgICAgICAgICBjb21wTGluZS5icmVha0FmdGVyID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYWZ0ZXIuY29udGVudC5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICAgICAgY29tcExpbmUubWVyZ2UoY29tcExpbmUubGVuZ3RoLCBjb21wTGluZS5sZW5ndGgsIGFmdGVyLmNvbnRlbnRbMF0sIGZhbHNlLCBhZnRlci5vcGVuU3RhcnQsIDApKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBMaW5lLmJyZWFrQWZ0ZXIgPSBhZnRlci5jb250ZW50WzBdLmJyZWFrQWZ0ZXI7XG4gICAgICAgICAgICAgICAgICAgIGFmdGVyLmNvbnRlbnQuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGJlZm9yZS5jb250ZW50Lmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgICAgICBjb21wTGluZS5tZXJnZSgwLCAwLCBiZWZvcmUuY29udGVudFtiZWZvcmUuY29udGVudC5sZW5ndGggLSAxXSwgdHJ1ZSwgMCwgYmVmb3JlLm9wZW5FbmQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGJlZm9yZS5jb250ZW50LnBvcCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250ZW50ID0gYmVmb3JlLmNvbnRlbnQuY29uY2F0KGNvbXBMaW5lKS5jb25jYXQoYWZ0ZXIuY29udGVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAoeyBjb250ZW50LCBicmVha0F0U3RhcnQsIG9wZW5TdGFydCwgb3BlbkVuZCB9ID1cbiAgICAgICAgICAgICAgICAgICAgQ29udGVudEJ1aWxkZXIuYnVpbGQodGhpcy52aWV3LnN0YXRlLmRvYywgZnJvbUIsIHRvQiwgdGhpcy5kZWNvcmF0aW9ucywgdGhpcy5keW5hbWljRGVjb3JhdGlvbk1hcCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHsgaTogdG9JLCBvZmY6IHRvT2ZmIH0gPSBjdXJzb3IuZmluZFBvcyh0b0EsIDEpO1xuICAgICAgICAgICAgbGV0IHsgaTogZnJvbUksIG9mZjogZnJvbU9mZiB9ID0gY3Vyc29yLmZpbmRQb3MoZnJvbUEsIC0xKTtcbiAgICAgICAgICAgIHJlcGxhY2VSYW5nZSh0aGlzLCBmcm9tSSwgZnJvbU9mZiwgdG9JLCB0b09mZiwgY29udGVudCwgYnJlYWtBdFN0YXJ0LCBvcGVuU3RhcnQsIG9wZW5FbmQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb21wb3NpdGlvbilcbiAgICAgICAgICAgIHRoaXMuZml4Q29tcG9zaXRpb25ET00oY29tcG9zaXRpb24pO1xuICAgIH1cbiAgICB1cGRhdGVFZGl0Q29udGV4dEZvcm1hdHRpbmcodXBkYXRlKSB7XG4gICAgICAgIHRoaXMuZWRpdENvbnRleHRGb3JtYXR0aW5nID0gdGhpcy5lZGl0Q29udGV4dEZvcm1hdHRpbmcubWFwKHVwZGF0ZS5jaGFuZ2VzKTtcbiAgICAgICAgZm9yIChsZXQgdHIgb2YgdXBkYXRlLnRyYW5zYWN0aW9ucylcbiAgICAgICAgICAgIGZvciAobGV0IGVmZmVjdCBvZiB0ci5lZmZlY3RzKVxuICAgICAgICAgICAgICAgIGlmIChlZmZlY3QuaXMoc2V0RWRpdENvbnRleHRGb3JtYXR0aW5nKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVkaXRDb250ZXh0Rm9ybWF0dGluZyA9IGVmZmVjdC52YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgfVxuICAgIGNvbXBvc2l0aW9uVmlldyhjb21wb3NpdGlvbikge1xuICAgICAgICBsZXQgY3VyID0gbmV3IFRleHRWaWV3KGNvbXBvc2l0aW9uLnRleHQubm9kZVZhbHVlKTtcbiAgICAgICAgY3VyLmZsYWdzIHw9IDggLyogVmlld0ZsYWcuQ29tcG9zaXRpb24gKi87XG4gICAgICAgIGZvciAobGV0IHsgZGVjbyB9IG9mIGNvbXBvc2l0aW9uLm1hcmtzKVxuICAgICAgICAgICAgY3VyID0gbmV3IE1hcmtWaWV3KGRlY28sIFtjdXJdLCBjdXIubGVuZ3RoKTtcbiAgICAgICAgbGV0IGxpbmUgPSBuZXcgTGluZVZpZXc7XG4gICAgICAgIGxpbmUuYXBwZW5kKGN1ciwgMCk7XG4gICAgICAgIHJldHVybiBsaW5lO1xuICAgIH1cbiAgICBmaXhDb21wb3NpdGlvbkRPTShjb21wb3NpdGlvbikge1xuICAgICAgICBsZXQgZml4ID0gKGRvbSwgY1ZpZXcpID0+IHtcbiAgICAgICAgICAgIGNWaWV3LmZsYWdzIHw9IDggLyogVmlld0ZsYWcuQ29tcG9zaXRpb24gKi8gfCAoY1ZpZXcuY2hpbGRyZW4uc29tZShjID0+IGMuZmxhZ3MgJiA3IC8qIFZpZXdGbGFnLkRpcnR5ICovKSA/IDEgLyogVmlld0ZsYWcuQ2hpbGREaXJ0eSAqLyA6IDApO1xuICAgICAgICAgICAgdGhpcy5tYXJrZWRGb3JDb21wb3NpdGlvbi5hZGQoY1ZpZXcpO1xuICAgICAgICAgICAgbGV0IHByZXYgPSBDb250ZW50Vmlldy5nZXQoZG9tKTtcbiAgICAgICAgICAgIGlmIChwcmV2ICYmIHByZXYgIT0gY1ZpZXcpXG4gICAgICAgICAgICAgICAgcHJldi5kb20gPSBudWxsO1xuICAgICAgICAgICAgY1ZpZXcuc2V0RE9NKGRvbSk7XG4gICAgICAgIH07XG4gICAgICAgIGxldCBwb3MgPSB0aGlzLmNoaWxkUG9zKGNvbXBvc2l0aW9uLnJhbmdlLmZyb21CLCAxKTtcbiAgICAgICAgbGV0IGNWaWV3ID0gdGhpcy5jaGlsZHJlbltwb3MuaV07XG4gICAgICAgIGZpeChjb21wb3NpdGlvbi5saW5lLCBjVmlldyk7XG4gICAgICAgIGZvciAobGV0IGkgPSBjb21wb3NpdGlvbi5tYXJrcy5sZW5ndGggLSAxOyBpID49IC0xOyBpLS0pIHtcbiAgICAgICAgICAgIHBvcyA9IGNWaWV3LmNoaWxkUG9zKHBvcy5vZmYsIDEpO1xuICAgICAgICAgICAgY1ZpZXcgPSBjVmlldy5jaGlsZHJlbltwb3MuaV07XG4gICAgICAgICAgICBmaXgoaSA+PSAwID8gY29tcG9zaXRpb24ubWFya3NbaV0ubm9kZSA6IGNvbXBvc2l0aW9uLnRleHQsIGNWaWV3KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBTeW5jIHRoZSBET00gc2VsZWN0aW9uIHRvIHRoaXMuc3RhdGUuc2VsZWN0aW9uXG4gICAgdXBkYXRlU2VsZWN0aW9uKG11c3RSZWFkID0gZmFsc2UsIGZyb21Qb2ludGVyID0gZmFsc2UpIHtcbiAgICAgICAgaWYgKG11c3RSZWFkIHx8ICF0aGlzLnZpZXcub2JzZXJ2ZXIuc2VsZWN0aW9uUmFuZ2UuZm9jdXNOb2RlKVxuICAgICAgICAgICAgdGhpcy52aWV3Lm9ic2VydmVyLnJlYWRTZWxlY3Rpb25SYW5nZSgpO1xuICAgICAgICBsZXQgYWN0aXZlRWx0ID0gdGhpcy52aWV3LnJvb3QuYWN0aXZlRWxlbWVudCwgZm9jdXNlZCA9IGFjdGl2ZUVsdCA9PSB0aGlzLmRvbTtcbiAgICAgICAgbGV0IHNlbGVjdGlvbk5vdEZvY3VzID0gIWZvY3VzZWQgJiZcbiAgICAgICAgICAgIGhhc1NlbGVjdGlvbih0aGlzLmRvbSwgdGhpcy52aWV3Lm9ic2VydmVyLnNlbGVjdGlvblJhbmdlKSAmJiAhKGFjdGl2ZUVsdCAmJiB0aGlzLmRvbS5jb250YWlucyhhY3RpdmVFbHQpKTtcbiAgICAgICAgaWYgKCEoZm9jdXNlZCB8fCBmcm9tUG9pbnRlciB8fCBzZWxlY3Rpb25Ob3RGb2N1cykpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGxldCBmb3JjZSA9IHRoaXMuZm9yY2VTZWxlY3Rpb247XG4gICAgICAgIHRoaXMuZm9yY2VTZWxlY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgbGV0IG1haW4gPSB0aGlzLnZpZXcuc3RhdGUuc2VsZWN0aW9uLm1haW47XG4gICAgICAgIGxldCBhbmNob3IgPSB0aGlzLm1vdmVUb0xpbmUodGhpcy5kb21BdFBvcyhtYWluLmFuY2hvcikpO1xuICAgICAgICBsZXQgaGVhZCA9IG1haW4uZW1wdHkgPyBhbmNob3IgOiB0aGlzLm1vdmVUb0xpbmUodGhpcy5kb21BdFBvcyhtYWluLmhlYWQpKTtcbiAgICAgICAgLy8gQWx3YXlzIHJlc2V0IG9uIEZpcmVmb3ggd2hlbiBuZXh0IHRvIGFuIHVuZWRpdGFibGUgbm9kZSB0b1xuICAgICAgICAvLyBhdm9pZCBpbnZpc2libGUgY3Vyc29yIGJ1Z3MgKCMxMTEpXG4gICAgICAgIGlmIChicm93c2VyLmdlY2tvICYmIG1haW4uZW1wdHkgJiYgIXRoaXMuaGFzQ29tcG9zaXRpb24gJiYgYmV0d2VlblVuZWRpdGFibGUoYW5jaG9yKSkge1xuICAgICAgICAgICAgbGV0IGR1bW15ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJcIik7XG4gICAgICAgICAgICB0aGlzLnZpZXcub2JzZXJ2ZXIuaWdub3JlKCgpID0+IGFuY2hvci5ub2RlLmluc2VydEJlZm9yZShkdW1teSwgYW5jaG9yLm5vZGUuY2hpbGROb2Rlc1thbmNob3Iub2Zmc2V0XSB8fCBudWxsKSk7XG4gICAgICAgICAgICBhbmNob3IgPSBoZWFkID0gbmV3IERPTVBvcyhkdW1teSwgMCk7XG4gICAgICAgICAgICBmb3JjZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGRvbVNlbCA9IHRoaXMudmlldy5vYnNlcnZlci5zZWxlY3Rpb25SYW5nZTtcbiAgICAgICAgLy8gSWYgdGhlIHNlbGVjdGlvbiBpcyBhbHJlYWR5IGhlcmUsIG9yIGluIGFuIGVxdWl2YWxlbnQgcG9zaXRpb24sIGRvbid0IHRvdWNoIGl0XG4gICAgICAgIGlmIChmb3JjZSB8fCAhZG9tU2VsLmZvY3VzTm9kZSB8fCAoIWlzRXF1aXZhbGVudFBvc2l0aW9uKGFuY2hvci5ub2RlLCBhbmNob3Iub2Zmc2V0LCBkb21TZWwuYW5jaG9yTm9kZSwgZG9tU2VsLmFuY2hvck9mZnNldCkgfHxcbiAgICAgICAgICAgICFpc0VxdWl2YWxlbnRQb3NpdGlvbihoZWFkLm5vZGUsIGhlYWQub2Zmc2V0LCBkb21TZWwuZm9jdXNOb2RlLCBkb21TZWwuZm9jdXNPZmZzZXQpKSAmJiAhdGhpcy5zdXBwcmVzc1dpZGdldEN1cnNvckNoYW5nZShkb21TZWwsIG1haW4pKSB7XG4gICAgICAgICAgICB0aGlzLnZpZXcub2JzZXJ2ZXIuaWdub3JlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBDaHJvbWUgQW5kcm9pZCB3aWxsIGhpZGUgdGhlIHZpcnR1YWwga2V5Ym9hcmQgd2hlbiB0YXBwaW5nXG4gICAgICAgICAgICAgICAgLy8gaW5zaWRlIGFuIHVuZWRpdGFibGUgbm9kZSwgYW5kIG5vdCBicmluZyBpdCBiYWNrIHdoZW4gd2VcbiAgICAgICAgICAgICAgICAvLyBtb3ZlIHRoZSBjdXJzb3IgdG8gaXRzIHByb3BlciBwb3NpdGlvbi4gVGhpcyB0cmllcyB0b1xuICAgICAgICAgICAgICAgIC8vIHJlc3RvcmUgdGhlIGtleWJvYXJkIGJ5IGN5Y2xpbmcgZm9jdXMuXG4gICAgICAgICAgICAgICAgaWYgKGJyb3dzZXIuYW5kcm9pZCAmJiBicm93c2VyLmNocm9tZSAmJiB0aGlzLmRvbS5jb250YWlucyhkb21TZWwuZm9jdXNOb2RlKSAmJlxuICAgICAgICAgICAgICAgICAgICBpblVuZWRpdGFibGUoZG9tU2VsLmZvY3VzTm9kZSwgdGhpcy5kb20pKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9tLmJsdXIoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb20uZm9jdXMoeyBwcmV2ZW50U2Nyb2xsOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgcmF3U2VsID0gZ2V0U2VsZWN0aW9uKHRoaXMudmlldy5yb290KTtcbiAgICAgICAgICAgICAgICBpZiAoIXJhd1NlbCkgO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1haW4uZW1wdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV29yayBhcm91bmQgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTYxMjA3NlxuICAgICAgICAgICAgICAgICAgICBpZiAoYnJvd3Nlci5nZWNrbykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5leHRUbyA9IG5leHRUb1VuZWRpdGFibGUoYW5jaG9yLm5vZGUsIGFuY2hvci5vZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRUbyAmJiBuZXh0VG8gIT0gKDEgLyogTmV4dFRvLkJlZm9yZSAqLyB8IDIgLyogTmV4dFRvLkFmdGVyICovKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZXh0ID0gKG5leHRUbyA9PSAxIC8qIE5leHRUby5CZWZvcmUgKi8gPyB0ZXh0Tm9kZUJlZm9yZSA6IHRleHROb2RlQWZ0ZXIpKGFuY2hvci5ub2RlLCBhbmNob3Iub2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGV4dClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yID0gbmV3IERPTVBvcyh0ZXh0Lm5vZGUsIHRleHQub2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByYXdTZWwuY29sbGFwc2UoYW5jaG9yLm5vZGUsIGFuY2hvci5vZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWFpbi5iaWRpTGV2ZWwgIT0gbnVsbCAmJiByYXdTZWwuY2FyZXRCaWRpTGV2ZWwgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhd1NlbC5jYXJldEJpZGlMZXZlbCA9IG1haW4uYmlkaUxldmVsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChyYXdTZWwuZXh0ZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNlbGVjdGlvbi5leHRlbmQgY2FuIGJlIHVzZWQgdG8gY3JlYXRlIGFuICdpbnZlcnRlZCcgc2VsZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIC8vIChvbmUgd2hlcmUgdGhlIGZvY3VzIGlzIGJlZm9yZSB0aGUgYW5jaG9yKSwgYnV0IG5vdCBhbGxcbiAgICAgICAgICAgICAgICAgICAgLy8gYnJvd3NlcnMgc3VwcG9ydCBpdCB5ZXQuXG4gICAgICAgICAgICAgICAgICAgIHJhd1NlbC5jb2xsYXBzZShhbmNob3Iubm9kZSwgYW5jaG9yLm9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNhZmFyaSB3aWxsIGlnbm9yZSB0aGUgY2FsbCBhYm92ZSB3aGVuIHRoZSBlZGl0b3IgaXNcbiAgICAgICAgICAgICAgICAgICAgLy8gaGlkZGVuLCBhbmQgdGhlbiByYWlzZSBhbiBlcnJvciBvbiB0aGUgY2FsbCB0byBleHRlbmRcbiAgICAgICAgICAgICAgICAgICAgLy8gKCM5NDApLlxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmF3U2VsLmV4dGVuZChoZWFkLm5vZGUsIGhlYWQub2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoXykgeyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBQcmltaXRpdmUgKElFKSB3YXlcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1haW4uYW5jaG9yID4gbWFpbi5oZWFkKVxuICAgICAgICAgICAgICAgICAgICAgICAgW2FuY2hvciwgaGVhZF0gPSBbaGVhZCwgYW5jaG9yXTtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kKGhlYWQubm9kZSwgaGVhZC5vZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydChhbmNob3Iubm9kZSwgYW5jaG9yLm9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgIHJhd1NlbC5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgcmF3U2VsLmFkZFJhbmdlKHJhbmdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGlvbk5vdEZvY3VzICYmIHRoaXMudmlldy5yb290LmFjdGl2ZUVsZW1lbnQgPT0gdGhpcy5kb20pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb20uYmx1cigpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aXZlRWx0KVxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlRWx0LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnZpZXcub2JzZXJ2ZXIuc2V0U2VsZWN0aW9uUmFuZ2UoYW5jaG9yLCBoZWFkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmltcHJlY2lzZUFuY2hvciA9IGFuY2hvci5wcmVjaXNlID8gbnVsbCA6IG5ldyBET01Qb3MoZG9tU2VsLmFuY2hvck5vZGUsIGRvbVNlbC5hbmNob3JPZmZzZXQpO1xuICAgICAgICB0aGlzLmltcHJlY2lzZUhlYWQgPSBoZWFkLnByZWNpc2UgPyBudWxsIDogbmV3IERPTVBvcyhkb21TZWwuZm9jdXNOb2RlLCBkb21TZWwuZm9jdXNPZmZzZXQpO1xuICAgIH1cbiAgICAvLyBJZiBhIHplcm8tbGVuZ3RoIHdpZGdldCBpcyBpbnNlcnRlZCBuZXh0IHRvIHRoZSBjdXJzb3IgZHVyaW5nXG4gICAgLy8gY29tcG9zaXRpb24sIGF2b2lkIG1vdmluZyBpdCBhY3Jvc3MgaXQgYW5kIGRpc3J1cHRpbmcgdGhlXG4gICAgLy8gY29tcG9zaXRpb24uXG4gICAgc3VwcHJlc3NXaWRnZXRDdXJzb3JDaGFuZ2Uoc2VsLCBjdXJzb3IpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzQ29tcG9zaXRpb24gJiYgY3Vyc29yLmVtcHR5ICYmXG4gICAgICAgICAgICBpc0VxdWl2YWxlbnRQb3NpdGlvbihzZWwuZm9jdXNOb2RlLCBzZWwuZm9jdXNPZmZzZXQsIHNlbC5hbmNob3JOb2RlLCBzZWwuYW5jaG9yT2Zmc2V0KSAmJlxuICAgICAgICAgICAgdGhpcy5wb3NGcm9tRE9NKHNlbC5mb2N1c05vZGUsIHNlbC5mb2N1c09mZnNldCkgPT0gY3Vyc29yLmhlYWQ7XG4gICAgfVxuICAgIGVuZm9yY2VDdXJzb3JBc3NvYygpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzQ29tcG9zaXRpb24pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGxldCB7IHZpZXcgfSA9IHRoaXMsIGN1cnNvciA9IHZpZXcuc3RhdGUuc2VsZWN0aW9uLm1haW47XG4gICAgICAgIGxldCBzZWwgPSBnZXRTZWxlY3Rpb24odmlldy5yb290KTtcbiAgICAgICAgbGV0IHsgYW5jaG9yTm9kZSwgYW5jaG9yT2Zmc2V0IH0gPSB2aWV3Lm9ic2VydmVyLnNlbGVjdGlvblJhbmdlO1xuICAgICAgICBpZiAoIXNlbCB8fCAhY3Vyc29yLmVtcHR5IHx8ICFjdXJzb3IuYXNzb2MgfHwgIXNlbC5tb2RpZnkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGxldCBsaW5lID0gTGluZVZpZXcuZmluZCh0aGlzLCBjdXJzb3IuaGVhZCk7XG4gICAgICAgIGlmICghbGluZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbGV0IGxpbmVTdGFydCA9IGxpbmUucG9zQXRTdGFydDtcbiAgICAgICAgaWYgKGN1cnNvci5oZWFkID09IGxpbmVTdGFydCB8fCBjdXJzb3IuaGVhZCA9PSBsaW5lU3RhcnQgKyBsaW5lLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbGV0IGJlZm9yZSA9IHRoaXMuY29vcmRzQXQoY3Vyc29yLmhlYWQsIC0xKSwgYWZ0ZXIgPSB0aGlzLmNvb3Jkc0F0KGN1cnNvci5oZWFkLCAxKTtcbiAgICAgICAgaWYgKCFiZWZvcmUgfHwgIWFmdGVyIHx8IGJlZm9yZS5ib3R0b20gPiBhZnRlci50b3ApXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGxldCBkb20gPSB0aGlzLmRvbUF0UG9zKGN1cnNvci5oZWFkICsgY3Vyc29yLmFzc29jKTtcbiAgICAgICAgc2VsLmNvbGxhcHNlKGRvbS5ub2RlLCBkb20ub2Zmc2V0KTtcbiAgICAgICAgc2VsLm1vZGlmeShcIm1vdmVcIiwgY3Vyc29yLmFzc29jIDwgMCA/IFwiZm9yd2FyZFwiIDogXCJiYWNrd2FyZFwiLCBcImxpbmVib3VuZGFyeVwiKTtcbiAgICAgICAgLy8gVGhpcyBjYW4gZ28gd3JvbmcgaW4gY29ybmVyIGNhc2VzIGxpa2Ugc2luZ2xlLWNoYXJhY3RlciBsaW5lcyxcbiAgICAgICAgLy8gc28gY2hlY2sgYW5kIHJlc2V0IGlmIG5lY2Vzc2FyeS5cbiAgICAgICAgdmlldy5vYnNlcnZlci5yZWFkU2VsZWN0aW9uUmFuZ2UoKTtcbiAgICAgICAgbGV0IG5ld1JhbmdlID0gdmlldy5vYnNlcnZlci5zZWxlY3Rpb25SYW5nZTtcbiAgICAgICAgaWYgKHZpZXcuZG9jVmlldy5wb3NGcm9tRE9NKG5ld1JhbmdlLmFuY2hvck5vZGUsIG5ld1JhbmdlLmFuY2hvck9mZnNldCkgIT0gY3Vyc29yLmZyb20pXG4gICAgICAgICAgICBzZWwuY29sbGFwc2UoYW5jaG9yTm9kZSwgYW5jaG9yT2Zmc2V0KTtcbiAgICB9XG4gICAgLy8gSWYgYSBwb3NpdGlvbiBpcyBpbi9uZWFyIGEgYmxvY2sgd2lkZ2V0LCBtb3ZlIGl0IHRvIGEgbmVhcmJ5IHRleHRcbiAgICAvLyBsaW5lLCBzaW5jZSB3ZSBkb24ndCB3YW50IHRoZSBjdXJzb3IgaW5zaWRlIGEgYmxvY2sgd2lkZ2V0LlxuICAgIG1vdmVUb0xpbmUocG9zKSB7XG4gICAgICAgIC8vIEJsb2NrIHdpZGdldHMgd2lsbCByZXR1cm4gcG9zaXRpb25zIGJlZm9yZS9hZnRlciB0aGVtLCB3aGljaFxuICAgICAgICAvLyBhcmUgdGh1cyBkaXJlY3RseSBpbiB0aGUgZG9jdW1lbnQgRE9NIGVsZW1lbnQuXG4gICAgICAgIGxldCBkb20gPSB0aGlzLmRvbSwgbmV3UG9zO1xuICAgICAgICBpZiAocG9zLm5vZGUgIT0gZG9tKVxuICAgICAgICAgICAgcmV0dXJuIHBvcztcbiAgICAgICAgZm9yIChsZXQgaSA9IHBvcy5vZmZzZXQ7ICFuZXdQb3MgJiYgaSA8IGRvbS5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgdmlldyA9IENvbnRlbnRWaWV3LmdldChkb20uY2hpbGROb2Rlc1tpXSk7XG4gICAgICAgICAgICBpZiAodmlldyBpbnN0YW5jZW9mIExpbmVWaWV3KVxuICAgICAgICAgICAgICAgIG5ld1BvcyA9IHZpZXcuZG9tQXRQb3MoMCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IHBvcy5vZmZzZXQgLSAxOyAhbmV3UG9zICYmIGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBsZXQgdmlldyA9IENvbnRlbnRWaWV3LmdldChkb20uY2hpbGROb2Rlc1tpXSk7XG4gICAgICAgICAgICBpZiAodmlldyBpbnN0YW5jZW9mIExpbmVWaWV3KVxuICAgICAgICAgICAgICAgIG5ld1BvcyA9IHZpZXcuZG9tQXRQb3Modmlldy5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdQb3MgPyBuZXcgRE9NUG9zKG5ld1Bvcy5ub2RlLCBuZXdQb3Mub2Zmc2V0LCB0cnVlKSA6IHBvcztcbiAgICB9XG4gICAgbmVhcmVzdChkb20pIHtcbiAgICAgICAgZm9yIChsZXQgY3VyID0gZG9tOyBjdXI7KSB7XG4gICAgICAgICAgICBsZXQgZG9tVmlldyA9IENvbnRlbnRWaWV3LmdldChjdXIpO1xuICAgICAgICAgICAgaWYgKGRvbVZpZXcgJiYgZG9tVmlldy5yb290VmlldyA9PSB0aGlzKVxuICAgICAgICAgICAgICAgIHJldHVybiBkb21WaWV3O1xuICAgICAgICAgICAgY3VyID0gY3VyLnBhcmVudE5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHBvc0Zyb21ET00obm9kZSwgb2Zmc2V0KSB7XG4gICAgICAgIGxldCB2aWV3ID0gdGhpcy5uZWFyZXN0KG5vZGUpO1xuICAgICAgICBpZiAoIXZpZXcpXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlRyeWluZyB0byBmaW5kIHBvc2l0aW9uIGZvciBhIERPTSBwb3NpdGlvbiBvdXRzaWRlIG9mIHRoZSBkb2N1bWVudFwiKTtcbiAgICAgICAgcmV0dXJuIHZpZXcubG9jYWxQb3NGcm9tRE9NKG5vZGUsIG9mZnNldCkgKyB2aWV3LnBvc0F0U3RhcnQ7XG4gICAgfVxuICAgIGRvbUF0UG9zKHBvcykge1xuICAgICAgICBsZXQgeyBpLCBvZmYgfSA9IHRoaXMuY2hpbGRDdXJzb3IoKS5maW5kUG9zKHBvcywgLTEpO1xuICAgICAgICBmb3IgKDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gMTspIHtcbiAgICAgICAgICAgIGxldCBjaGlsZCA9IHRoaXMuY2hpbGRyZW5baV07XG4gICAgICAgICAgICBpZiAob2ZmIDwgY2hpbGQubGVuZ3RoIHx8IGNoaWxkIGluc3RhbmNlb2YgTGluZVZpZXcpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgICAgICBvZmYgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuW2ldLmRvbUF0UG9zKG9mZik7XG4gICAgfVxuICAgIGNvb3Jkc0F0KHBvcywgc2lkZSkge1xuICAgICAgICBsZXQgYmVzdCA9IG51bGwsIGJlc3RQb3MgPSAwO1xuICAgICAgICBmb3IgKGxldCBvZmYgPSB0aGlzLmxlbmd0aCwgaSA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGxldCBjaGlsZCA9IHRoaXMuY2hpbGRyZW5baV0sIGVuZCA9IG9mZiAtIGNoaWxkLmJyZWFrQWZ0ZXIsIHN0YXJ0ID0gZW5kIC0gY2hpbGQubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGVuZCA8IHBvcylcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGlmIChzdGFydCA8PSBwb3MgJiYgKHN0YXJ0IDwgcG9zIHx8IGNoaWxkLmNvdmVycygtMSkpICYmIChlbmQgPiBwb3MgfHwgY2hpbGQuY292ZXJzKDEpKSAmJlxuICAgICAgICAgICAgICAgICghYmVzdCB8fCBjaGlsZCBpbnN0YW5jZW9mIExpbmVWaWV3ICYmICEoYmVzdCBpbnN0YW5jZW9mIExpbmVWaWV3ICYmIHNpZGUgPj0gMCkpKSB7XG4gICAgICAgICAgICAgICAgYmVzdCA9IGNoaWxkO1xuICAgICAgICAgICAgICAgIGJlc3RQb3MgPSBzdGFydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGJlc3QgJiYgc3RhcnQgPT0gcG9zICYmIGVuZCA9PSBwb3MgJiYgY2hpbGQgaW5zdGFuY2VvZiBCbG9ja1dpZGdldFZpZXcgJiYgTWF0aC5hYnMoc2lkZSkgPCAyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkLmRlY28uc3RhcnRTaWRlIDwgMClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaSlcbiAgICAgICAgICAgICAgICAgICAgYmVzdCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvZmYgPSBzdGFydDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmVzdCA/IGJlc3QuY29vcmRzQXQocG9zIC0gYmVzdFBvcywgc2lkZSkgOiBudWxsO1xuICAgIH1cbiAgICBjb29yZHNGb3JDaGFyKHBvcykge1xuICAgICAgICBsZXQgeyBpLCBvZmYgfSA9IHRoaXMuY2hpbGRQb3MocG9zLCAxKSwgY2hpbGQgPSB0aGlzLmNoaWxkcmVuW2ldO1xuICAgICAgICBpZiAoIShjaGlsZCBpbnN0YW5jZW9mIExpbmVWaWV3KSlcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB3aGlsZSAoY2hpbGQuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICBsZXQgeyBpLCBvZmY6IGNoaWxkT2ZmIH0gPSBjaGlsZC5jaGlsZFBvcyhvZmYsIDEpO1xuICAgICAgICAgICAgZm9yICg7OyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaSA9PSBjaGlsZC5jaGlsZHJlbi5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIGlmICgoY2hpbGQgPSBjaGlsZC5jaGlsZHJlbltpXSkubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9mZiA9IGNoaWxkT2ZmO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKGNoaWxkIGluc3RhbmNlb2YgVGV4dFZpZXcpKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGxldCBlbmQgPSBzdGF0ZS5maW5kQ2x1c3RlckJyZWFrKGNoaWxkLnRleHQsIG9mZik7XG4gICAgICAgIGlmIChlbmQgPT0gb2ZmKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGxldCByZWN0cyA9IHRleHRSYW5nZShjaGlsZC5kb20sIG9mZiwgZW5kKS5nZXRDbGllbnRSZWN0cygpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlY3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgcmVjdCA9IHJlY3RzW2ldO1xuICAgICAgICAgICAgaWYgKGkgPT0gcmVjdHMubGVuZ3RoIC0gMSB8fCByZWN0LnRvcCA8IHJlY3QuYm90dG9tICYmIHJlY3QubGVmdCA8IHJlY3QucmlnaHQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlY3Q7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIG1lYXN1cmVWaXNpYmxlTGluZUhlaWdodHModmlld3BvcnQpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdLCB7IGZyb20sIHRvIH0gPSB2aWV3cG9ydDtcbiAgICAgICAgbGV0IGNvbnRlbnRXaWR0aCA9IHRoaXMudmlldy5jb250ZW50RE9NLmNsaWVudFdpZHRoO1xuICAgICAgICBsZXQgaXNXaWRlciA9IGNvbnRlbnRXaWR0aCA+IE1hdGgubWF4KHRoaXMudmlldy5zY3JvbGxET00uY2xpZW50V2lkdGgsIHRoaXMubWluV2lkdGgpICsgMTtcbiAgICAgICAgbGV0IHdpZGVzdCA9IC0xLCBsdHIgPSB0aGlzLnZpZXcudGV4dERpcmVjdGlvbiA9PSBleHBvcnRzLkRpcmVjdGlvbi5MVFI7XG4gICAgICAgIGZvciAobGV0IHBvcyA9IDAsIGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGNoaWxkID0gdGhpcy5jaGlsZHJlbltpXSwgZW5kID0gcG9zICsgY2hpbGQubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGVuZCA+IHRvKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgaWYgKHBvcyA+PSBmcm9tKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNoaWxkUmVjdCA9IGNoaWxkLmRvbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChjaGlsZFJlY3QuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICBpZiAoaXNXaWRlcikge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbGFzdCA9IGNoaWxkLmRvbS5sYXN0Q2hpbGQ7XG4gICAgICAgICAgICAgICAgICAgIGxldCByZWN0cyA9IGxhc3QgPyBjbGllbnRSZWN0c0ZvcihsYXN0KSA6IFtdO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVjdHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVjdCA9IHJlY3RzW3JlY3RzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHdpZHRoID0gbHRyID8gcmVjdC5yaWdodCAtIGNoaWxkUmVjdC5sZWZ0IDogY2hpbGRSZWN0LnJpZ2h0IC0gcmVjdC5sZWZ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpZHRoID4gd2lkZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkZXN0ID0gd2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5taW5XaWR0aCA9IGNvbnRlbnRXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1pbldpZHRoRnJvbSA9IHBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1pbldpZHRoVG8gPSBlbmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwb3MgPSBlbmQgKyBjaGlsZC5icmVha0FmdGVyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHRleHREaXJlY3Rpb25BdChwb3MpIHtcbiAgICAgICAgbGV0IHsgaSB9ID0gdGhpcy5jaGlsZFBvcyhwb3MsIDEpO1xuICAgICAgICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmNoaWxkcmVuW2ldLmRvbSkuZGlyZWN0aW9uID09IFwicnRsXCIgPyBleHBvcnRzLkRpcmVjdGlvbi5SVEwgOiBleHBvcnRzLkRpcmVjdGlvbi5MVFI7XG4gICAgfVxuICAgIG1lYXN1cmVUZXh0U2l6ZSgpIHtcbiAgICAgICAgZm9yIChsZXQgY2hpbGQgb2YgdGhpcy5jaGlsZHJlbikge1xuICAgICAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgTGluZVZpZXcpIHtcbiAgICAgICAgICAgICAgICBsZXQgbWVhc3VyZSA9IGNoaWxkLm1lYXN1cmVUZXh0U2l6ZSgpO1xuICAgICAgICAgICAgICAgIGlmIChtZWFzdXJlKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWVhc3VyZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBJZiBubyB3b3JrYWJsZSBsaW5lIGV4aXN0cywgZm9yY2UgYSBsYXlvdXQgb2YgYSBtZWFzdXJhYmxlIGVsZW1lbnRcbiAgICAgICAgbGV0IGR1bW15ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSwgbGluZUhlaWdodCwgY2hhcldpZHRoLCB0ZXh0SGVpZ2h0O1xuICAgICAgICBkdW1teS5jbGFzc05hbWUgPSBcImNtLWxpbmVcIjtcbiAgICAgICAgZHVtbXkuc3R5bGUud2lkdGggPSBcIjk5OTk5cHhcIjtcbiAgICAgICAgZHVtbXkuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICAgIGR1bW15LnRleHRDb250ZW50ID0gXCJhYmMgZGVmIGdoaSBqa2wgbW5vIHBxciBzdHVcIjtcbiAgICAgICAgdGhpcy52aWV3Lm9ic2VydmVyLmlnbm9yZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRvbS5hcHBlbmRDaGlsZChkdW1teSk7XG4gICAgICAgICAgICBsZXQgcmVjdCA9IGNsaWVudFJlY3RzRm9yKGR1bW15LmZpcnN0Q2hpbGQpWzBdO1xuICAgICAgICAgICAgbGluZUhlaWdodCA9IGR1bW15LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgICAgICAgICAgIGNoYXJXaWR0aCA9IHJlY3QgPyByZWN0LndpZHRoIC8gMjcgOiA3O1xuICAgICAgICAgICAgdGV4dEhlaWdodCA9IHJlY3QgPyByZWN0LmhlaWdodCA6IGxpbmVIZWlnaHQ7XG4gICAgICAgICAgICBkdW1teS5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7IGxpbmVIZWlnaHQsIGNoYXJXaWR0aCwgdGV4dEhlaWdodCB9O1xuICAgIH1cbiAgICBjaGlsZEN1cnNvcihwb3MgPSB0aGlzLmxlbmd0aCkge1xuICAgICAgICAvLyBNb3ZlIGJhY2sgdG8gc3RhcnQgb2YgbGFzdCBlbGVtZW50IHdoZW4gcG9zc2libGUsIHNvIHRoYXRcbiAgICAgICAgLy8gYENoaWxkQ3Vyc29yLmZpbmRQb3NgIGRvZXNuJ3QgaGF2ZSB0byBkZWFsIHdpdGggdGhlIGVkZ2UgY2FzZVxuICAgICAgICAvLyBvZiBiZWluZyBhZnRlciB0aGUgbGFzdCBlbGVtZW50LlxuICAgICAgICBsZXQgaSA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICBpZiAoaSlcbiAgICAgICAgICAgIHBvcyAtPSB0aGlzLmNoaWxkcmVuWy0taV0ubGVuZ3RoO1xuICAgICAgICByZXR1cm4gbmV3IENoaWxkQ3Vyc29yKHRoaXMuY2hpbGRyZW4sIHBvcywgaSk7XG4gICAgfVxuICAgIGNvbXB1dGVCbG9ja0dhcERlY28oKSB7XG4gICAgICAgIGxldCBkZWNvID0gW10sIHZzID0gdGhpcy52aWV3LnZpZXdTdGF0ZTtcbiAgICAgICAgZm9yIChsZXQgcG9zID0gMCwgaSA9IDA7OyBpKyspIHtcbiAgICAgICAgICAgIGxldCBuZXh0ID0gaSA9PSB2cy52aWV3cG9ydHMubGVuZ3RoID8gbnVsbCA6IHZzLnZpZXdwb3J0c1tpXTtcbiAgICAgICAgICAgIGxldCBlbmQgPSBuZXh0ID8gbmV4dC5mcm9tIC0gMSA6IHRoaXMubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGVuZCA+IHBvcykge1xuICAgICAgICAgICAgICAgIGxldCBoZWlnaHQgPSAodnMubGluZUJsb2NrQXQoZW5kKS5ib3R0b20gLSB2cy5saW5lQmxvY2tBdChwb3MpLnRvcCkgLyB0aGlzLnZpZXcuc2NhbGVZO1xuICAgICAgICAgICAgICAgIGRlY28ucHVzaChEZWNvcmF0aW9uLnJlcGxhY2Uoe1xuICAgICAgICAgICAgICAgICAgICB3aWRnZXQ6IG5ldyBCbG9ja0dhcFdpZGdldChoZWlnaHQpLFxuICAgICAgICAgICAgICAgICAgICBibG9jazogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBpc0Jsb2NrR2FwOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pLnJhbmdlKHBvcywgZW5kKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIW5leHQpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBwb3MgPSBuZXh0LnRvICsgMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRGVjb3JhdGlvbi5zZXQoZGVjbyk7XG4gICAgfVxuICAgIHVwZGF0ZURlY28oKSB7XG4gICAgICAgIGxldCBpID0gMTtcbiAgICAgICAgbGV0IGFsbERlY28gPSB0aGlzLnZpZXcuc3RhdGUuZmFjZXQoZGVjb3JhdGlvbnMpLm1hcChkID0+IHtcbiAgICAgICAgICAgIGxldCBkeW5hbWljID0gdGhpcy5keW5hbWljRGVjb3JhdGlvbk1hcFtpKytdID0gdHlwZW9mIGQgPT0gXCJmdW5jdGlvblwiO1xuICAgICAgICAgICAgcmV0dXJuIGR5bmFtaWMgPyBkKHRoaXMudmlldykgOiBkO1xuICAgICAgICB9KTtcbiAgICAgICAgbGV0IGR5bmFtaWNPdXRlciA9IGZhbHNlLCBvdXRlckRlY28gPSB0aGlzLnZpZXcuc3RhdGUuZmFjZXQob3V0ZXJEZWNvcmF0aW9ucykubWFwKChkLCBpKSA9PiB7XG4gICAgICAgICAgICBsZXQgZHluYW1pYyA9IHR5cGVvZiBkID09IFwiZnVuY3Rpb25cIjtcbiAgICAgICAgICAgIGlmIChkeW5hbWljKVxuICAgICAgICAgICAgICAgIGR5bmFtaWNPdXRlciA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gZHluYW1pYyA/IGQodGhpcy52aWV3KSA6IGQ7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAob3V0ZXJEZWNvLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5keW5hbWljRGVjb3JhdGlvbk1hcFtpKytdID0gZHluYW1pY091dGVyO1xuICAgICAgICAgICAgYWxsRGVjby5wdXNoKHN0YXRlLlJhbmdlU2V0LmpvaW4ob3V0ZXJEZWNvKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZWNvcmF0aW9ucyA9IFtcbiAgICAgICAgICAgIHRoaXMuZWRpdENvbnRleHRGb3JtYXR0aW5nLFxuICAgICAgICAgICAgLi4uYWxsRGVjbyxcbiAgICAgICAgICAgIHRoaXMuY29tcHV0ZUJsb2NrR2FwRGVjbygpLFxuICAgICAgICAgICAgdGhpcy52aWV3LnZpZXdTdGF0ZS5saW5lR2FwRGVjb1xuICAgICAgICBdO1xuICAgICAgICB3aGlsZSAoaSA8IHRoaXMuZGVjb3JhdGlvbnMubGVuZ3RoKVxuICAgICAgICAgICAgdGhpcy5keW5hbWljRGVjb3JhdGlvbk1hcFtpKytdID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzLmRlY29yYXRpb25zO1xuICAgIH1cbiAgICBzY3JvbGxJbnRvVmlldyh0YXJnZXQpIHtcbiAgICAgICAgaWYgKHRhcmdldC5pc1NuYXBzaG90KSB7XG4gICAgICAgICAgICBsZXQgcmVmID0gdGhpcy52aWV3LnZpZXdTdGF0ZS5saW5lQmxvY2tBdCh0YXJnZXQucmFuZ2UuaGVhZCk7XG4gICAgICAgICAgICB0aGlzLnZpZXcuc2Nyb2xsRE9NLnNjcm9sbFRvcCA9IHJlZi50b3AgLSB0YXJnZXQueU1hcmdpbjtcbiAgICAgICAgICAgIHRoaXMudmlldy5zY3JvbGxET00uc2Nyb2xsTGVmdCA9IHRhcmdldC54TWFyZ2luO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGhhbmRsZXIgb2YgdGhpcy52aWV3LnN0YXRlLmZhY2V0KHNjcm9sbEhhbmRsZXIpKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChoYW5kbGVyKHRoaXMudmlldywgdGFyZ2V0LnJhbmdlLCB0YXJnZXQpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgbG9nRXhjZXB0aW9uKHRoaXMudmlldy5zdGF0ZSwgZSwgXCJzY3JvbGwgaGFuZGxlclwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgeyByYW5nZSB9ID0gdGFyZ2V0O1xuICAgICAgICBsZXQgcmVjdCA9IHRoaXMuY29vcmRzQXQocmFuZ2UuaGVhZCwgcmFuZ2UuZW1wdHkgPyByYW5nZS5hc3NvYyA6IHJhbmdlLmhlYWQgPiByYW5nZS5hbmNob3IgPyAtMSA6IDEpLCBvdGhlcjtcbiAgICAgICAgaWYgKCFyZWN0KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAoIXJhbmdlLmVtcHR5ICYmIChvdGhlciA9IHRoaXMuY29vcmRzQXQocmFuZ2UuYW5jaG9yLCByYW5nZS5hbmNob3IgPiByYW5nZS5oZWFkID8gLTEgOiAxKSkpXG4gICAgICAgICAgICByZWN0ID0geyBsZWZ0OiBNYXRoLm1pbihyZWN0LmxlZnQsIG90aGVyLmxlZnQpLCB0b3A6IE1hdGgubWluKHJlY3QudG9wLCBvdGhlci50b3ApLFxuICAgICAgICAgICAgICAgIHJpZ2h0OiBNYXRoLm1heChyZWN0LnJpZ2h0LCBvdGhlci5yaWdodCksIGJvdHRvbTogTWF0aC5tYXgocmVjdC5ib3R0b20sIG90aGVyLmJvdHRvbSkgfTtcbiAgICAgICAgbGV0IG1hcmdpbnMgPSBnZXRTY3JvbGxNYXJnaW5zKHRoaXMudmlldyk7XG4gICAgICAgIGxldCB0YXJnZXRSZWN0ID0ge1xuICAgICAgICAgICAgbGVmdDogcmVjdC5sZWZ0IC0gbWFyZ2lucy5sZWZ0LCB0b3A6IHJlY3QudG9wIC0gbWFyZ2lucy50b3AsXG4gICAgICAgICAgICByaWdodDogcmVjdC5yaWdodCArIG1hcmdpbnMucmlnaHQsIGJvdHRvbTogcmVjdC5ib3R0b20gKyBtYXJnaW5zLmJvdHRvbVxuICAgICAgICB9O1xuICAgICAgICBsZXQgeyBvZmZzZXRXaWR0aCwgb2Zmc2V0SGVpZ2h0IH0gPSB0aGlzLnZpZXcuc2Nyb2xsRE9NO1xuICAgICAgICBzY3JvbGxSZWN0SW50b1ZpZXcodGhpcy52aWV3LnNjcm9sbERPTSwgdGFyZ2V0UmVjdCwgcmFuZ2UuaGVhZCA8IHJhbmdlLmFuY2hvciA/IC0xIDogMSwgdGFyZ2V0LngsIHRhcmdldC55LCBNYXRoLm1heChNYXRoLm1pbih0YXJnZXQueE1hcmdpbiwgb2Zmc2V0V2lkdGgpLCAtb2Zmc2V0V2lkdGgpLCBNYXRoLm1heChNYXRoLm1pbih0YXJnZXQueU1hcmdpbiwgb2Zmc2V0SGVpZ2h0KSwgLW9mZnNldEhlaWdodCksIHRoaXMudmlldy50ZXh0RGlyZWN0aW9uID09IGV4cG9ydHMuRGlyZWN0aW9uLkxUUik7XG4gICAgfVxufVxuZnVuY3Rpb24gYmV0d2VlblVuZWRpdGFibGUocG9zKSB7XG4gICAgcmV0dXJuIHBvcy5ub2RlLm5vZGVUeXBlID09IDEgJiYgcG9zLm5vZGUuZmlyc3RDaGlsZCAmJlxuICAgICAgICAocG9zLm9mZnNldCA9PSAwIHx8IHBvcy5ub2RlLmNoaWxkTm9kZXNbcG9zLm9mZnNldCAtIDFdLmNvbnRlbnRFZGl0YWJsZSA9PSBcImZhbHNlXCIpICYmXG4gICAgICAgIChwb3Mub2Zmc2V0ID09IHBvcy5ub2RlLmNoaWxkTm9kZXMubGVuZ3RoIHx8IHBvcy5ub2RlLmNoaWxkTm9kZXNbcG9zLm9mZnNldF0uY29udGVudEVkaXRhYmxlID09IFwiZmFsc2VcIik7XG59XG5jbGFzcyBCbG9ja0dhcFdpZGdldCBleHRlbmRzIFdpZGdldFR5cGUge1xuICAgIGNvbnN0cnVjdG9yKGhlaWdodCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICB9XG4gICAgdG9ET00oKSB7XG4gICAgICAgIGxldCBlbHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBlbHQuY2xhc3NOYW1lID0gXCJjbS1nYXBcIjtcbiAgICAgICAgdGhpcy51cGRhdGVET00oZWx0KTtcbiAgICAgICAgcmV0dXJuIGVsdDtcbiAgICB9XG4gICAgZXEob3RoZXIpIHsgcmV0dXJuIG90aGVyLmhlaWdodCA9PSB0aGlzLmhlaWdodDsgfVxuICAgIHVwZGF0ZURPTShlbHQpIHtcbiAgICAgICAgZWx0LnN0eWxlLmhlaWdodCA9IHRoaXMuaGVpZ2h0ICsgXCJweFwiO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZ2V0IGVkaXRhYmxlKCkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgIGdldCBlc3RpbWF0ZWRIZWlnaHQoKSB7IHJldHVybiB0aGlzLmhlaWdodDsgfVxuICAgIGlnbm9yZUV2ZW50KCkgeyByZXR1cm4gZmFsc2U7IH1cbn1cbmZ1bmN0aW9uIGZpbmRDb21wb3NpdGlvbk5vZGUodmlldywgaGVhZFBvcykge1xuICAgIGxldCBzZWwgPSB2aWV3Lm9ic2VydmVyLnNlbGVjdGlvblJhbmdlO1xuICAgIGlmICghc2VsLmZvY3VzTm9kZSlcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgbGV0IHRleHRCZWZvcmUgPSB0ZXh0Tm9kZUJlZm9yZShzZWwuZm9jdXNOb2RlLCBzZWwuZm9jdXNPZmZzZXQpO1xuICAgIGxldCB0ZXh0QWZ0ZXIgPSB0ZXh0Tm9kZUFmdGVyKHNlbC5mb2N1c05vZGUsIHNlbC5mb2N1c09mZnNldCk7XG4gICAgbGV0IHRleHROb2RlID0gdGV4dEJlZm9yZSB8fCB0ZXh0QWZ0ZXI7XG4gICAgaWYgKHRleHRBZnRlciAmJiB0ZXh0QmVmb3JlICYmIHRleHRBZnRlci5ub2RlICE9IHRleHRCZWZvcmUubm9kZSkge1xuICAgICAgICBsZXQgZGVzY0FmdGVyID0gQ29udGVudFZpZXcuZ2V0KHRleHRBZnRlci5ub2RlKTtcbiAgICAgICAgaWYgKCFkZXNjQWZ0ZXIgfHwgZGVzY0FmdGVyIGluc3RhbmNlb2YgVGV4dFZpZXcgJiYgZGVzY0FmdGVyLnRleHQgIT0gdGV4dEFmdGVyLm5vZGUubm9kZVZhbHVlKSB7XG4gICAgICAgICAgICB0ZXh0Tm9kZSA9IHRleHRBZnRlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2aWV3LmRvY1ZpZXcubGFzdENvbXBvc2l0aW9uQWZ0ZXJDdXJzb3IpIHtcbiAgICAgICAgICAgIGxldCBkZXNjQmVmb3JlID0gQ29udGVudFZpZXcuZ2V0KHRleHRCZWZvcmUubm9kZSk7XG4gICAgICAgICAgICBpZiAoISghZGVzY0JlZm9yZSB8fCBkZXNjQmVmb3JlIGluc3RhbmNlb2YgVGV4dFZpZXcgJiYgZGVzY0JlZm9yZS50ZXh0ICE9IHRleHRCZWZvcmUubm9kZS5ub2RlVmFsdWUpKVxuICAgICAgICAgICAgICAgIHRleHROb2RlID0gdGV4dEFmdGVyO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZpZXcuZG9jVmlldy5sYXN0Q29tcG9zaXRpb25BZnRlckN1cnNvciA9IHRleHROb2RlICE9IHRleHRCZWZvcmU7XG4gICAgaWYgKCF0ZXh0Tm9kZSlcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgbGV0IGZyb20gPSBoZWFkUG9zIC0gdGV4dE5vZGUub2Zmc2V0O1xuICAgIHJldHVybiB7IGZyb20sIHRvOiBmcm9tICsgdGV4dE5vZGUubm9kZS5ub2RlVmFsdWUubGVuZ3RoLCBub2RlOiB0ZXh0Tm9kZS5ub2RlIH07XG59XG5mdW5jdGlvbiBmaW5kQ29tcG9zaXRpb25SYW5nZSh2aWV3LCBjaGFuZ2VzLCBoZWFkUG9zKSB7XG4gICAgbGV0IGZvdW5kID0gZmluZENvbXBvc2l0aW9uTm9kZSh2aWV3LCBoZWFkUG9zKTtcbiAgICBpZiAoIWZvdW5kKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICBsZXQgeyBub2RlOiB0ZXh0Tm9kZSwgZnJvbSwgdG8gfSA9IGZvdW5kLCB0ZXh0ID0gdGV4dE5vZGUubm9kZVZhbHVlO1xuICAgIC8vIERvbid0IHRyeSB0byBwcmVzZXJ2ZSBtdWx0aS1saW5lIGNvbXBvc2l0aW9uc1xuICAgIGlmICgvW1xcblxccl0vLnRlc3QodGV4dCkpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIGlmICh2aWV3LnN0YXRlLmRvYy5zbGljZVN0cmluZyhmb3VuZC5mcm9tLCBmb3VuZC50bykgIT0gdGV4dClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgbGV0IGludiA9IGNoYW5nZXMuaW52ZXJ0ZWREZXNjO1xuICAgIGxldCByYW5nZSA9IG5ldyBDaGFuZ2VkUmFuZ2UoaW52Lm1hcFBvcyhmcm9tKSwgaW52Lm1hcFBvcyh0byksIGZyb20sIHRvKTtcbiAgICBsZXQgbWFya3MgPSBbXTtcbiAgICBmb3IgKGxldCBwYXJlbnQgPSB0ZXh0Tm9kZS5wYXJlbnROb2RlOzsgcGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGUpIHtcbiAgICAgICAgbGV0IHBhcmVudFZpZXcgPSBDb250ZW50Vmlldy5nZXQocGFyZW50KTtcbiAgICAgICAgaWYgKHBhcmVudFZpZXcgaW5zdGFuY2VvZiBNYXJrVmlldylcbiAgICAgICAgICAgIG1hcmtzLnB1c2goeyBub2RlOiBwYXJlbnQsIGRlY286IHBhcmVudFZpZXcubWFyayB9KTtcbiAgICAgICAgZWxzZSBpZiAocGFyZW50VmlldyBpbnN0YW5jZW9mIExpbmVWaWV3IHx8IHBhcmVudC5ub2RlTmFtZSA9PSBcIkRJVlwiICYmIHBhcmVudC5wYXJlbnROb2RlID09IHZpZXcuY29udGVudERPTSlcbiAgICAgICAgICAgIHJldHVybiB7IHJhbmdlLCB0ZXh0OiB0ZXh0Tm9kZSwgbWFya3MsIGxpbmU6IHBhcmVudCB9O1xuICAgICAgICBlbHNlIGlmIChwYXJlbnQgIT0gdmlldy5jb250ZW50RE9NKVxuICAgICAgICAgICAgbWFya3MucHVzaCh7IG5vZGU6IHBhcmVudCwgZGVjbzogbmV3IE1hcmtEZWNvcmF0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiBnZXRBdHRycyhwYXJlbnQpLFxuICAgICAgICAgICAgICAgICAgICB0YWdOYW1lOiBwYXJlbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICAgICAgfSkgfSk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG5leHRUb1VuZWRpdGFibGUobm9kZSwgb2Zmc2V0KSB7XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgIT0gMSlcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgcmV0dXJuIChvZmZzZXQgJiYgbm9kZS5jaGlsZE5vZGVzW29mZnNldCAtIDFdLmNvbnRlbnRFZGl0YWJsZSA9PSBcImZhbHNlXCIgPyAxIC8qIE5leHRUby5CZWZvcmUgKi8gOiAwKSB8XG4gICAgICAgIChvZmZzZXQgPCBub2RlLmNoaWxkTm9kZXMubGVuZ3RoICYmIG5vZGUuY2hpbGROb2Rlc1tvZmZzZXRdLmNvbnRlbnRFZGl0YWJsZSA9PSBcImZhbHNlXCIgPyAyIC8qIE5leHRUby5BZnRlciAqLyA6IDApO1xufVxubGV0IERlY29yYXRpb25Db21wYXJhdG9yJDEgPSBjbGFzcyBEZWNvcmF0aW9uQ29tcGFyYXRvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlcyA9IFtdO1xuICAgIH1cbiAgICBjb21wYXJlUmFuZ2UoZnJvbSwgdG8pIHsgYWRkUmFuZ2UoZnJvbSwgdG8sIHRoaXMuY2hhbmdlcyk7IH1cbiAgICBjb21wYXJlUG9pbnQoZnJvbSwgdG8pIHsgYWRkUmFuZ2UoZnJvbSwgdG8sIHRoaXMuY2hhbmdlcyk7IH1cbn07XG5mdW5jdGlvbiBmaW5kQ2hhbmdlZERlY28oYSwgYiwgZGlmZikge1xuICAgIGxldCBjb21wID0gbmV3IERlY29yYXRpb25Db21wYXJhdG9yJDE7XG4gICAgc3RhdGUuUmFuZ2VTZXQuY29tcGFyZShhLCBiLCBkaWZmLCBjb21wKTtcbiAgICByZXR1cm4gY29tcC5jaGFuZ2VzO1xufVxuZnVuY3Rpb24gaW5VbmVkaXRhYmxlKG5vZGUsIGluc2lkZSkge1xuICAgIGZvciAobGV0IGN1ciA9IG5vZGU7IGN1ciAmJiBjdXIgIT0gaW5zaWRlOyBjdXIgPSBjdXIuYXNzaWduZWRTbG90IHx8IGN1ci5wYXJlbnROb2RlKSB7XG4gICAgICAgIGlmIChjdXIubm9kZVR5cGUgPT0gMSAmJiBjdXIuY29udGVudEVkaXRhYmxlID09ICdmYWxzZScpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIHRvdWNoZXNDb21wb3NpdGlvbihjaGFuZ2VzLCBjb21wb3NpdGlvbikge1xuICAgIGxldCB0b3VjaGVkID0gZmFsc2U7XG4gICAgaWYgKGNvbXBvc2l0aW9uKVxuICAgICAgICBjaGFuZ2VzLml0ZXJDaGFuZ2VkUmFuZ2VzKChmcm9tLCB0bykgPT4ge1xuICAgICAgICAgICAgaWYgKGZyb20gPCBjb21wb3NpdGlvbi50byAmJiB0byA+IGNvbXBvc2l0aW9uLmZyb20pXG4gICAgICAgICAgICAgICAgdG91Y2hlZCA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgIHJldHVybiB0b3VjaGVkO1xufVxuXG5mdW5jdGlvbiBncm91cEF0KHN0YXRlJDEsIHBvcywgYmlhcyA9IDEpIHtcbiAgICBsZXQgY2F0ZWdvcml6ZSA9IHN0YXRlJDEuY2hhckNhdGVnb3JpemVyKHBvcyk7XG4gICAgbGV0IGxpbmUgPSBzdGF0ZSQxLmRvYy5saW5lQXQocG9zKSwgbGluZVBvcyA9IHBvcyAtIGxpbmUuZnJvbTtcbiAgICBpZiAobGluZS5sZW5ndGggPT0gMClcbiAgICAgICAgcmV0dXJuIHN0YXRlLkVkaXRvclNlbGVjdGlvbi5jdXJzb3IocG9zKTtcbiAgICBpZiAobGluZVBvcyA9PSAwKVxuICAgICAgICBiaWFzID0gMTtcbiAgICBlbHNlIGlmIChsaW5lUG9zID09IGxpbmUubGVuZ3RoKVxuICAgICAgICBiaWFzID0gLTE7XG4gICAgbGV0IGZyb20gPSBsaW5lUG9zLCB0byA9IGxpbmVQb3M7XG4gICAgaWYgKGJpYXMgPCAwKVxuICAgICAgICBmcm9tID0gc3RhdGUuZmluZENsdXN0ZXJCcmVhayhsaW5lLnRleHQsIGxpbmVQb3MsIGZhbHNlKTtcbiAgICBlbHNlXG4gICAgICAgIHRvID0gc3RhdGUuZmluZENsdXN0ZXJCcmVhayhsaW5lLnRleHQsIGxpbmVQb3MpO1xuICAgIGxldCBjYXQgPSBjYXRlZ29yaXplKGxpbmUudGV4dC5zbGljZShmcm9tLCB0bykpO1xuICAgIHdoaWxlIChmcm9tID4gMCkge1xuICAgICAgICBsZXQgcHJldiA9IHN0YXRlLmZpbmRDbHVzdGVyQnJlYWsobGluZS50ZXh0LCBmcm9tLCBmYWxzZSk7XG4gICAgICAgIGlmIChjYXRlZ29yaXplKGxpbmUudGV4dC5zbGljZShwcmV2LCBmcm9tKSkgIT0gY2F0KVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGZyb20gPSBwcmV2O1xuICAgIH1cbiAgICB3aGlsZSAodG8gPCBsaW5lLmxlbmd0aCkge1xuICAgICAgICBsZXQgbmV4dCA9IHN0YXRlLmZpbmRDbHVzdGVyQnJlYWsobGluZS50ZXh0LCB0byk7XG4gICAgICAgIGlmIChjYXRlZ29yaXplKGxpbmUudGV4dC5zbGljZSh0bywgbmV4dCkpICE9IGNhdClcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB0byA9IG5leHQ7XG4gICAgfVxuICAgIHJldHVybiBzdGF0ZS5FZGl0b3JTZWxlY3Rpb24ucmFuZ2UoZnJvbSArIGxpbmUuZnJvbSwgdG8gKyBsaW5lLmZyb20pO1xufVxuLy8gU2VhcmNoIHRoZSBET00gZm9yIHRoZSB7bm9kZSwgb2Zmc2V0fSBwb3NpdGlvbiBjbG9zZXN0IHRvIHRoZSBnaXZlblxuLy8gY29vcmRpbmF0ZXMuIFZlcnkgaW5lZmZpY2llbnQgYW5kIGNydWRlLCBidXQgY2FuIHVzdWFsbHkgYmUgYXZvaWRlZFxuLy8gYnkgY2FsbGluZyBjYXJldChQb3NpdGlvbnxSYW5nZSlGcm9tUG9pbnQgaW5zdGVhZC5cbmZ1bmN0aW9uIGdldGR4KHgsIHJlY3QpIHtcbiAgICByZXR1cm4gcmVjdC5sZWZ0ID4geCA/IHJlY3QubGVmdCAtIHggOiBNYXRoLm1heCgwLCB4IC0gcmVjdC5yaWdodCk7XG59XG5mdW5jdGlvbiBnZXRkeSh5LCByZWN0KSB7XG4gICAgcmV0dXJuIHJlY3QudG9wID4geSA/IHJlY3QudG9wIC0geSA6IE1hdGgubWF4KDAsIHkgLSByZWN0LmJvdHRvbSk7XG59XG5mdW5jdGlvbiB5T3ZlcmxhcChhLCBiKSB7XG4gICAgcmV0dXJuIGEudG9wIDwgYi5ib3R0b20gLSAxICYmIGEuYm90dG9tID4gYi50b3AgKyAxO1xufVxuZnVuY3Rpb24gdXBUb3AocmVjdCwgdG9wKSB7XG4gICAgcmV0dXJuIHRvcCA8IHJlY3QudG9wID8geyB0b3AsIGxlZnQ6IHJlY3QubGVmdCwgcmlnaHQ6IHJlY3QucmlnaHQsIGJvdHRvbTogcmVjdC5ib3R0b20gfSA6IHJlY3Q7XG59XG5mdW5jdGlvbiB1cEJvdChyZWN0LCBib3R0b20pIHtcbiAgICByZXR1cm4gYm90dG9tID4gcmVjdC5ib3R0b20gPyB7IHRvcDogcmVjdC50b3AsIGxlZnQ6IHJlY3QubGVmdCwgcmlnaHQ6IHJlY3QucmlnaHQsIGJvdHRvbSB9IDogcmVjdDtcbn1cbmZ1bmN0aW9uIGRvbVBvc0F0Q29vcmRzKHBhcmVudCwgeCwgeSkge1xuICAgIGxldCBjbG9zZXN0LCBjbG9zZXN0UmVjdCwgY2xvc2VzdFgsIGNsb3Nlc3RZLCBjbG9zZXN0T3ZlcmxhcCA9IGZhbHNlO1xuICAgIGxldCBhYm92ZSwgYmVsb3csIGFib3ZlUmVjdCwgYmVsb3dSZWN0O1xuICAgIGZvciAobGV0IGNoaWxkID0gcGFyZW50LmZpcnN0Q2hpbGQ7IGNoaWxkOyBjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nKSB7XG4gICAgICAgIGxldCByZWN0cyA9IGNsaWVudFJlY3RzRm9yKGNoaWxkKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZWN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHJlY3QgPSByZWN0c1tpXTtcbiAgICAgICAgICAgIGlmIChjbG9zZXN0UmVjdCAmJiB5T3ZlcmxhcChjbG9zZXN0UmVjdCwgcmVjdCkpXG4gICAgICAgICAgICAgICAgcmVjdCA9IHVwVG9wKHVwQm90KHJlY3QsIGNsb3Nlc3RSZWN0LmJvdHRvbSksIGNsb3Nlc3RSZWN0LnRvcCk7XG4gICAgICAgICAgICBsZXQgZHggPSBnZXRkeCh4LCByZWN0KSwgZHkgPSBnZXRkeSh5LCByZWN0KTtcbiAgICAgICAgICAgIGlmIChkeCA9PSAwICYmIGR5ID09IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkLm5vZGVUeXBlID09IDMgPyBkb21Qb3NJblRleHQoY2hpbGQsIHgsIHkpIDogZG9tUG9zQXRDb29yZHMoY2hpbGQsIHgsIHkpO1xuICAgICAgICAgICAgaWYgKCFjbG9zZXN0IHx8IGNsb3Nlc3RZID4gZHkgfHwgY2xvc2VzdFkgPT0gZHkgJiYgY2xvc2VzdFggPiBkeCkge1xuICAgICAgICAgICAgICAgIGNsb3Nlc3QgPSBjaGlsZDtcbiAgICAgICAgICAgICAgICBjbG9zZXN0UmVjdCA9IHJlY3Q7XG4gICAgICAgICAgICAgICAgY2xvc2VzdFggPSBkeDtcbiAgICAgICAgICAgICAgICBjbG9zZXN0WSA9IGR5O1xuICAgICAgICAgICAgICAgIGxldCBzaWRlID0gZHkgPyAoeSA8IHJlY3QudG9wID8gLTEgOiAxKSA6IGR4ID8gKHggPCByZWN0LmxlZnQgPyAtMSA6IDEpIDogMDtcbiAgICAgICAgICAgICAgICBjbG9zZXN0T3ZlcmxhcCA9ICFzaWRlIHx8IChzaWRlID4gMCA/IGkgPCByZWN0cy5sZW5ndGggLSAxIDogaSA+IDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGR4ID09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoeSA+IHJlY3QuYm90dG9tICYmICghYWJvdmVSZWN0IHx8IGFib3ZlUmVjdC5ib3R0b20gPCByZWN0LmJvdHRvbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgYWJvdmUgPSBjaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgYWJvdmVSZWN0ID0gcmVjdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoeSA8IHJlY3QudG9wICYmICghYmVsb3dSZWN0IHx8IGJlbG93UmVjdC50b3AgPiByZWN0LnRvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYmVsb3cgPSBjaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgYmVsb3dSZWN0ID0gcmVjdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhYm92ZVJlY3QgJiYgeU92ZXJsYXAoYWJvdmVSZWN0LCByZWN0KSkge1xuICAgICAgICAgICAgICAgIGFib3ZlUmVjdCA9IHVwQm90KGFib3ZlUmVjdCwgcmVjdC5ib3R0b20pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYmVsb3dSZWN0ICYmIHlPdmVybGFwKGJlbG93UmVjdCwgcmVjdCkpIHtcbiAgICAgICAgICAgICAgICBiZWxvd1JlY3QgPSB1cFRvcChiZWxvd1JlY3QsIHJlY3QudG9wKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYWJvdmVSZWN0ICYmIGFib3ZlUmVjdC5ib3R0b20gPj0geSkge1xuICAgICAgICBjbG9zZXN0ID0gYWJvdmU7XG4gICAgICAgIGNsb3Nlc3RSZWN0ID0gYWJvdmVSZWN0O1xuICAgIH1cbiAgICBlbHNlIGlmIChiZWxvd1JlY3QgJiYgYmVsb3dSZWN0LnRvcCA8PSB5KSB7XG4gICAgICAgIGNsb3Nlc3QgPSBiZWxvdztcbiAgICAgICAgY2xvc2VzdFJlY3QgPSBiZWxvd1JlY3Q7XG4gICAgfVxuICAgIGlmICghY2xvc2VzdClcbiAgICAgICAgcmV0dXJuIHsgbm9kZTogcGFyZW50LCBvZmZzZXQ6IDAgfTtcbiAgICBsZXQgY2xpcFggPSBNYXRoLm1heChjbG9zZXN0UmVjdC5sZWZ0LCBNYXRoLm1pbihjbG9zZXN0UmVjdC5yaWdodCwgeCkpO1xuICAgIGlmIChjbG9zZXN0Lm5vZGVUeXBlID09IDMpXG4gICAgICAgIHJldHVybiBkb21Qb3NJblRleHQoY2xvc2VzdCwgY2xpcFgsIHkpO1xuICAgIGlmIChjbG9zZXN0T3ZlcmxhcCAmJiBjbG9zZXN0LmNvbnRlbnRFZGl0YWJsZSAhPSBcImZhbHNlXCIpXG4gICAgICAgIHJldHVybiBkb21Qb3NBdENvb3JkcyhjbG9zZXN0LCBjbGlwWCwgeSk7XG4gICAgbGV0IG9mZnNldCA9IEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwocGFyZW50LmNoaWxkTm9kZXMsIGNsb3Nlc3QpICtcbiAgICAgICAgKHggPj0gKGNsb3Nlc3RSZWN0LmxlZnQgKyBjbG9zZXN0UmVjdC5yaWdodCkgLyAyID8gMSA6IDApO1xuICAgIHJldHVybiB7IG5vZGU6IHBhcmVudCwgb2Zmc2V0IH07XG59XG5mdW5jdGlvbiBkb21Qb3NJblRleHQobm9kZSwgeCwgeSkge1xuICAgIGxldCBsZW4gPSBub2RlLm5vZGVWYWx1ZS5sZW5ndGg7XG4gICAgbGV0IGNsb3Nlc3RPZmZzZXQgPSAtMSwgY2xvc2VzdERZID0gMWU5LCBnZW5lcmFsU2lkZSA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBsZXQgcmVjdHMgPSB0ZXh0UmFuZ2Uobm9kZSwgaSwgaSArIDEpLmdldENsaWVudFJlY3RzKCk7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcmVjdHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGxldCByZWN0ID0gcmVjdHNbal07XG4gICAgICAgICAgICBpZiAocmVjdC50b3AgPT0gcmVjdC5ib3R0b20pXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBpZiAoIWdlbmVyYWxTaWRlKVxuICAgICAgICAgICAgICAgIGdlbmVyYWxTaWRlID0geCAtIHJlY3QubGVmdDtcbiAgICAgICAgICAgIGxldCBkeSA9IChyZWN0LnRvcCA+IHkgPyByZWN0LnRvcCAtIHkgOiB5IC0gcmVjdC5ib3R0b20pIC0gMTtcbiAgICAgICAgICAgIGlmIChyZWN0LmxlZnQgLSAxIDw9IHggJiYgcmVjdC5yaWdodCArIDEgPj0geCAmJiBkeSA8IGNsb3Nlc3REWSkge1xuICAgICAgICAgICAgICAgIGxldCByaWdodCA9IHggPj0gKHJlY3QubGVmdCArIHJlY3QucmlnaHQpIC8gMiwgYWZ0ZXIgPSByaWdodDtcbiAgICAgICAgICAgICAgICBpZiAoYnJvd3Nlci5jaHJvbWUgfHwgYnJvd3Nlci5nZWNrbykge1xuICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBmb3IgUlRMIG9uIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCBnZXR0aW5nIGNsaWVudFxuICAgICAgICAgICAgICAgICAgICAvLyByZWN0cyBmb3IgZW1wdHkgcmFuZ2VzLlxuICAgICAgICAgICAgICAgICAgICBsZXQgcmVjdEJlZm9yZSA9IHRleHRSYW5nZShub2RlLCBpKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlY3RCZWZvcmUubGVmdCA9PSByZWN0LnJpZ2h0KVxuICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgPSAhcmlnaHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChkeSA8PSAwKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBub2RlLCBvZmZzZXQ6IGkgKyAoYWZ0ZXIgPyAxIDogMCkgfTtcbiAgICAgICAgICAgICAgICBjbG9zZXN0T2Zmc2V0ID0gaSArIChhZnRlciA/IDEgOiAwKTtcbiAgICAgICAgICAgICAgICBjbG9zZXN0RFkgPSBkeTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyBub2RlLCBvZmZzZXQ6IGNsb3Nlc3RPZmZzZXQgPiAtMSA/IGNsb3Nlc3RPZmZzZXQgOiBnZW5lcmFsU2lkZSA+IDAgPyBub2RlLm5vZGVWYWx1ZS5sZW5ndGggOiAwIH07XG59XG5mdW5jdGlvbiBwb3NBdENvb3Jkcyh2aWV3LCBjb29yZHMsIHByZWNpc2UsIGJpYXMgPSAtMSkge1xuICAgIHZhciBfYSwgX2I7XG4gICAgbGV0IGNvbnRlbnQgPSB2aWV3LmNvbnRlbnRET00uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIGRvY1RvcCA9IGNvbnRlbnQudG9wICsgdmlldy52aWV3U3RhdGUucGFkZGluZ1RvcDtcbiAgICBsZXQgYmxvY2ssIHsgZG9jSGVpZ2h0IH0gPSB2aWV3LnZpZXdTdGF0ZTtcbiAgICBsZXQgeyB4LCB5IH0gPSBjb29yZHMsIHlPZmZzZXQgPSB5IC0gZG9jVG9wO1xuICAgIGlmICh5T2Zmc2V0IDwgMClcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgaWYgKHlPZmZzZXQgPiBkb2NIZWlnaHQpXG4gICAgICAgIHJldHVybiB2aWV3LnN0YXRlLmRvYy5sZW5ndGg7XG4gICAgLy8gU2NhbiBmb3IgYSB0ZXh0IGJsb2NrIG5lYXIgdGhlIHF1ZXJpZWQgeSBwb3NpdGlvblxuICAgIGZvciAobGV0IGhhbGZMaW5lID0gdmlldy52aWV3U3RhdGUuaGVpZ2h0T3JhY2xlLnRleHRIZWlnaHQgLyAyLCBib3VuY2VkID0gZmFsc2U7Oykge1xuICAgICAgICBibG9jayA9IHZpZXcuZWxlbWVudEF0SGVpZ2h0KHlPZmZzZXQpO1xuICAgICAgICBpZiAoYmxvY2sudHlwZSA9PSBleHBvcnRzLkJsb2NrVHlwZS5UZXh0KVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgIC8vIE1vdmUgdGhlIHkgcG9zaXRpb24gb3V0IG9mIHRoaXMgYmxvY2tcbiAgICAgICAgICAgIHlPZmZzZXQgPSBiaWFzID4gMCA/IGJsb2NrLmJvdHRvbSArIGhhbGZMaW5lIDogYmxvY2sudG9wIC0gaGFsZkxpbmU7XG4gICAgICAgICAgICBpZiAoeU9mZnNldCA+PSAwICYmIHlPZmZzZXQgPD0gZG9jSGVpZ2h0KVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgLy8gSWYgdGhlIGRvY3VtZW50IGNvbnNpc3RzIGVudGlyZWx5IG9mIHJlcGxhY2VkIHdpZGdldHMsIHdlXG4gICAgICAgICAgICAvLyB3b24ndCBmaW5kIGEgdGV4dCBibG9jaywgc28gcmV0dXJuIDBcbiAgICAgICAgICAgIGlmIChib3VuY2VkKVxuICAgICAgICAgICAgICAgIHJldHVybiBwcmVjaXNlID8gbnVsbCA6IDA7XG4gICAgICAgICAgICBib3VuY2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIGJpYXMgPSAtYmlhcztcbiAgICAgICAgfVxuICAgIH1cbiAgICB5ID0gZG9jVG9wICsgeU9mZnNldDtcbiAgICBsZXQgbGluZVN0YXJ0ID0gYmxvY2suZnJvbTtcbiAgICAvLyBJZiB0aGlzIGlzIG91dHNpZGUgb2YgdGhlIHJlbmRlcmVkIHZpZXdwb3J0LCB3ZSBjYW4ndCBkZXRlcm1pbmUgYSBwb3NpdGlvblxuICAgIGlmIChsaW5lU3RhcnQgPCB2aWV3LnZpZXdwb3J0LmZyb20pXG4gICAgICAgIHJldHVybiB2aWV3LnZpZXdwb3J0LmZyb20gPT0gMCA/IDAgOiBwcmVjaXNlID8gbnVsbCA6IHBvc0F0Q29vcmRzSW1wcmVjaXNlKHZpZXcsIGNvbnRlbnQsIGJsb2NrLCB4LCB5KTtcbiAgICBpZiAobGluZVN0YXJ0ID4gdmlldy52aWV3cG9ydC50bylcbiAgICAgICAgcmV0dXJuIHZpZXcudmlld3BvcnQudG8gPT0gdmlldy5zdGF0ZS5kb2MubGVuZ3RoID8gdmlldy5zdGF0ZS5kb2MubGVuZ3RoIDpcbiAgICAgICAgICAgIHByZWNpc2UgPyBudWxsIDogcG9zQXRDb29yZHNJbXByZWNpc2UodmlldywgY29udGVudCwgYmxvY2ssIHgsIHkpO1xuICAgIC8vIFByZWZlciBTaGFkb3dSb290T3JEb2N1bWVudC5lbGVtZW50RnJvbVBvaW50IGlmIHByZXNlbnQsIGZhbGwgYmFjayB0byBkb2N1bWVudCBpZiBub3RcbiAgICBsZXQgZG9jID0gdmlldy5kb20ub3duZXJEb2N1bWVudDtcbiAgICBsZXQgcm9vdCA9IHZpZXcucm9vdC5lbGVtZW50RnJvbVBvaW50ID8gdmlldy5yb290IDogZG9jO1xuICAgIGxldCBlbGVtZW50ID0gcm9vdC5lbGVtZW50RnJvbVBvaW50KHgsIHkpO1xuICAgIGlmIChlbGVtZW50ICYmICF2aWV3LmNvbnRlbnRET00uY29udGFpbnMoZWxlbWVudCkpXG4gICAgICAgIGVsZW1lbnQgPSBudWxsO1xuICAgIC8vIElmIHRoZSBlbGVtZW50IGlzIHVuZXhwZWN0ZWQsIGNsaXAgeCBhdCB0aGUgc2lkZXMgb2YgdGhlIGNvbnRlbnQgYXJlYSBhbmQgdHJ5IGFnYWluXG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgIHggPSBNYXRoLm1heChjb250ZW50LmxlZnQgKyAxLCBNYXRoLm1pbihjb250ZW50LnJpZ2h0IC0gMSwgeCkpO1xuICAgICAgICBlbGVtZW50ID0gcm9vdC5lbGVtZW50RnJvbVBvaW50KHgsIHkpO1xuICAgICAgICBpZiAoZWxlbWVudCAmJiAhdmlldy5jb250ZW50RE9NLmNvbnRhaW5zKGVsZW1lbnQpKVxuICAgICAgICAgICAgZWxlbWVudCA9IG51bGw7XG4gICAgfVxuICAgIC8vIFRoZXJlJ3MgdmlzaWJsZSBlZGl0b3IgY29udGVudCB1bmRlciB0aGUgcG9pbnQsIHNvIHdlIGNhbiB0cnlcbiAgICAvLyB1c2luZyBjYXJldChQb3NpdGlvbnxSYW5nZSlGcm9tUG9pbnQgYXMgYSBzaG9ydGN1dFxuICAgIGxldCBub2RlLCBvZmZzZXQgPSAtMTtcbiAgICBpZiAoZWxlbWVudCAmJiAoKF9hID0gdmlldy5kb2NWaWV3Lm5lYXJlc3QoZWxlbWVudCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pc0VkaXRhYmxlKSAhPSBmYWxzZSkge1xuICAgICAgICBpZiAoZG9jLmNhcmV0UG9zaXRpb25Gcm9tUG9pbnQpIHtcbiAgICAgICAgICAgIGxldCBwb3MgPSBkb2MuY2FyZXRQb3NpdGlvbkZyb21Qb2ludCh4LCB5KTtcbiAgICAgICAgICAgIGlmIChwb3MpXG4gICAgICAgICAgICAgICAgKHsgb2Zmc2V0Tm9kZTogbm9kZSwgb2Zmc2V0IH0gPSBwb3MpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRvYy5jYXJldFJhbmdlRnJvbVBvaW50KSB7XG4gICAgICAgICAgICBsZXQgcmFuZ2UgPSBkb2MuY2FyZXRSYW5nZUZyb21Qb2ludCh4LCB5KTtcbiAgICAgICAgICAgIGlmIChyYW5nZSkge1xuICAgICAgICAgICAgICAgICh7IHN0YXJ0Q29udGFpbmVyOiBub2RlLCBzdGFydE9mZnNldDogb2Zmc2V0IH0gPSByYW5nZSk7XG4gICAgICAgICAgICAgICAgaWYgKCF2aWV3LmNvbnRlbnRET00uY29udGFpbnMobm9kZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgYnJvd3Nlci5zYWZhcmkgJiYgaXNTdXNwaWNpb3VzU2FmYXJpQ2FyZXRSZXN1bHQobm9kZSwgb2Zmc2V0LCB4KSB8fFxuICAgICAgICAgICAgICAgICAgICBicm93c2VyLmNocm9tZSAmJiBpc1N1c3BpY2lvdXNDaHJvbWVDYXJldFJlc3VsdChub2RlLCBvZmZzZXQsIHgpKVxuICAgICAgICAgICAgICAgICAgICBub2RlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIE5vIGx1Y2ssIGRvIG91ciBvd24gKHBvdGVudGlhbGx5IGV4cGVuc2l2ZSkgc2VhcmNoXG4gICAgaWYgKCFub2RlIHx8ICF2aWV3LmRvY1ZpZXcuZG9tLmNvbnRhaW5zKG5vZGUpKSB7XG4gICAgICAgIGxldCBsaW5lID0gTGluZVZpZXcuZmluZCh2aWV3LmRvY1ZpZXcsIGxpbmVTdGFydCk7XG4gICAgICAgIGlmICghbGluZSlcbiAgICAgICAgICAgIHJldHVybiB5T2Zmc2V0ID4gYmxvY2sudG9wICsgYmxvY2suaGVpZ2h0IC8gMiA/IGJsb2NrLnRvIDogYmxvY2suZnJvbTtcbiAgICAgICAgKHsgbm9kZSwgb2Zmc2V0IH0gPSBkb21Qb3NBdENvb3JkcyhsaW5lLmRvbSwgeCwgeSkpO1xuICAgIH1cbiAgICBsZXQgbmVhcmVzdCA9IHZpZXcuZG9jVmlldy5uZWFyZXN0KG5vZGUpO1xuICAgIGlmICghbmVhcmVzdClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgaWYgKG5lYXJlc3QuaXNXaWRnZXQgJiYgKChfYiA9IG5lYXJlc3QuZG9tKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iubm9kZVR5cGUpID09IDEpIHtcbiAgICAgICAgbGV0IHJlY3QgPSBuZWFyZXN0LmRvbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgcmV0dXJuIGNvb3Jkcy55IDwgcmVjdC50b3AgfHwgY29vcmRzLnkgPD0gcmVjdC5ib3R0b20gJiYgY29vcmRzLnggPD0gKHJlY3QubGVmdCArIHJlY3QucmlnaHQpIC8gMlxuICAgICAgICAgICAgPyBuZWFyZXN0LnBvc0F0U3RhcnQgOiBuZWFyZXN0LnBvc0F0RW5kO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5lYXJlc3QubG9jYWxQb3NGcm9tRE9NKG5vZGUsIG9mZnNldCkgKyBuZWFyZXN0LnBvc0F0U3RhcnQ7XG4gICAgfVxufVxuZnVuY3Rpb24gcG9zQXRDb29yZHNJbXByZWNpc2UodmlldywgY29udGVudFJlY3QsIGJsb2NrLCB4LCB5KSB7XG4gICAgbGV0IGludG8gPSBNYXRoLnJvdW5kKCh4IC0gY29udGVudFJlY3QubGVmdCkgKiB2aWV3LmRlZmF1bHRDaGFyYWN0ZXJXaWR0aCk7XG4gICAgaWYgKHZpZXcubGluZVdyYXBwaW5nICYmIGJsb2NrLmhlaWdodCA+IHZpZXcuZGVmYXVsdExpbmVIZWlnaHQgKiAxLjUpIHtcbiAgICAgICAgbGV0IHRleHRIZWlnaHQgPSB2aWV3LnZpZXdTdGF0ZS5oZWlnaHRPcmFjbGUudGV4dEhlaWdodDtcbiAgICAgICAgbGV0IGxpbmUgPSBNYXRoLmZsb29yKCh5IC0gYmxvY2sudG9wIC0gKHZpZXcuZGVmYXVsdExpbmVIZWlnaHQgLSB0ZXh0SGVpZ2h0KSAqIDAuNSkgLyB0ZXh0SGVpZ2h0KTtcbiAgICAgICAgaW50byArPSBsaW5lICogdmlldy52aWV3U3RhdGUuaGVpZ2h0T3JhY2xlLmxpbmVMZW5ndGg7XG4gICAgfVxuICAgIGxldCBjb250ZW50ID0gdmlldy5zdGF0ZS5zbGljZURvYyhibG9jay5mcm9tLCBibG9jay50byk7XG4gICAgcmV0dXJuIGJsb2NrLmZyb20gKyBzdGF0ZS5maW5kQ29sdW1uKGNvbnRlbnQsIGludG8sIHZpZXcuc3RhdGUudGFiU2l6ZSk7XG59XG4vLyBJbiBjYXNlIG9mIGEgaGlnaCBsaW5lIGhlaWdodCwgU2FmYXJpJ3MgY2FyZXRSYW5nZUZyb21Qb2ludCB0cmVhdHNcbi8vIHRoZSBzcGFjZSBiZXR3ZWVuIGxpbmVzIGFzIGJlbG9uZ2luZyB0byB0aGUgbGFzdCBjaGFyYWN0ZXIgb2YgdGhlXG4vLyBsaW5lIGJlZm9yZS4gVGhpcyBpcyB1c2VkIHRvIGRldGVjdCBzdWNoIGEgcmVzdWx0IHNvIHRoYXQgaXQgY2FuIGJlXG4vLyBpZ25vcmVkIChpc3N1ZSAjNDAxKS5cbmZ1bmN0aW9uIGlzU3VzcGljaW91c1NhZmFyaUNhcmV0UmVzdWx0KG5vZGUsIG9mZnNldCwgeCkge1xuICAgIGxldCBsZW47XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgIT0gMyB8fCBvZmZzZXQgIT0gKGxlbiA9IG5vZGUubm9kZVZhbHVlLmxlbmd0aCkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGxldCBuZXh0ID0gbm9kZS5uZXh0U2libGluZzsgbmV4dDsgbmV4dCA9IG5leHQubmV4dFNpYmxpbmcpXG4gICAgICAgIGlmIChuZXh0Lm5vZGVUeXBlICE9IDEgfHwgbmV4dC5ub2RlTmFtZSAhPSBcIkJSXCIpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRleHRSYW5nZShub2RlLCBsZW4gLSAxLCBsZW4pLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgPiB4O1xufVxuLy8gQ2hyb21lIHdpbGwgbW92ZSBwb3NpdGlvbnMgYmV0d2VlbiBsaW5lcyB0byB0aGUgc3RhcnQgb2YgdGhlIG5leHQgbGluZVxuZnVuY3Rpb24gaXNTdXNwaWNpb3VzQ2hyb21lQ2FyZXRSZXN1bHQobm9kZSwgb2Zmc2V0LCB4KSB7XG4gICAgaWYgKG9mZnNldCAhPSAwKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgZm9yIChsZXQgY3VyID0gbm9kZTs7KSB7XG4gICAgICAgIGxldCBwYXJlbnQgPSBjdXIucGFyZW50Tm9kZTtcbiAgICAgICAgaWYgKCFwYXJlbnQgfHwgcGFyZW50Lm5vZGVUeXBlICE9IDEgfHwgcGFyZW50LmZpcnN0Q2hpbGQgIT0gY3VyKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAocGFyZW50LmNsYXNzTGlzdC5jb250YWlucyhcImNtLWxpbmVcIikpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY3VyID0gcGFyZW50O1xuICAgIH1cbiAgICBsZXQgcmVjdCA9IG5vZGUubm9kZVR5cGUgPT0gMSA/IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgICAgOiB0ZXh0UmFuZ2Uobm9kZSwgMCwgTWF0aC5tYXgobm9kZS5ub2RlVmFsdWUubGVuZ3RoLCAxKSkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgcmV0dXJuIHggLSByZWN0LmxlZnQgPiA1O1xufVxuZnVuY3Rpb24gYmxvY2tBdCh2aWV3LCBwb3MpIHtcbiAgICBsZXQgbGluZSA9IHZpZXcubGluZUJsb2NrQXQocG9zKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShsaW5lLnR5cGUpKVxuICAgICAgICBmb3IgKGxldCBsIG9mIGxpbmUudHlwZSkge1xuICAgICAgICAgICAgaWYgKGwudG8gPiBwb3MgfHwgbC50byA9PSBwb3MgJiYgKGwudG8gPT0gbGluZS50byB8fCBsLnR5cGUgPT0gZXhwb3J0cy5CbG9ja1R5cGUuVGV4dCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGw7XG4gICAgICAgIH1cbiAgICByZXR1cm4gbGluZTtcbn1cbmZ1bmN0aW9uIG1vdmVUb0xpbmVCb3VuZGFyeSh2aWV3LCBzdGFydCwgZm9yd2FyZCwgaW5jbHVkZVdyYXApIHtcbiAgICBsZXQgbGluZSA9IGJsb2NrQXQodmlldywgc3RhcnQuaGVhZCk7XG4gICAgbGV0IGNvb3JkcyA9ICFpbmNsdWRlV3JhcCB8fCBsaW5lLnR5cGUgIT0gZXhwb3J0cy5CbG9ja1R5cGUuVGV4dCB8fCAhKHZpZXcubGluZVdyYXBwaW5nIHx8IGxpbmUud2lkZ2V0TGluZUJyZWFrcykgPyBudWxsXG4gICAgICAgIDogdmlldy5jb29yZHNBdFBvcyhzdGFydC5hc3NvYyA8IDAgJiYgc3RhcnQuaGVhZCA+IGxpbmUuZnJvbSA/IHN0YXJ0LmhlYWQgLSAxIDogc3RhcnQuaGVhZCk7XG4gICAgaWYgKGNvb3Jkcykge1xuICAgICAgICBsZXQgZWRpdG9yUmVjdCA9IHZpZXcuZG9tLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBsZXQgZGlyZWN0aW9uID0gdmlldy50ZXh0RGlyZWN0aW9uQXQobGluZS5mcm9tKTtcbiAgICAgICAgbGV0IHBvcyA9IHZpZXcucG9zQXRDb29yZHMoeyB4OiBmb3J3YXJkID09IChkaXJlY3Rpb24gPT0gZXhwb3J0cy5EaXJlY3Rpb24uTFRSKSA/IGVkaXRvclJlY3QucmlnaHQgLSAxIDogZWRpdG9yUmVjdC5sZWZ0ICsgMSxcbiAgICAgICAgICAgIHk6IChjb29yZHMudG9wICsgY29vcmRzLmJvdHRvbSkgLyAyIH0pO1xuICAgICAgICBpZiAocG9zICE9IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gc3RhdGUuRWRpdG9yU2VsZWN0aW9uLmN1cnNvcihwb3MsIGZvcndhcmQgPyAtMSA6IDEpO1xuICAgIH1cbiAgICByZXR1cm4gc3RhdGUuRWRpdG9yU2VsZWN0aW9uLmN1cnNvcihmb3J3YXJkID8gbGluZS50byA6IGxpbmUuZnJvbSwgZm9yd2FyZCA/IC0xIDogMSk7XG59XG5mdW5jdGlvbiBtb3ZlQnlDaGFyKHZpZXcsIHN0YXJ0LCBmb3J3YXJkLCBieSkge1xuICAgIGxldCBsaW5lID0gdmlldy5zdGF0ZS5kb2MubGluZUF0KHN0YXJ0LmhlYWQpLCBzcGFucyA9IHZpZXcuYmlkaVNwYW5zKGxpbmUpO1xuICAgIGxldCBkaXJlY3Rpb24gPSB2aWV3LnRleHREaXJlY3Rpb25BdChsaW5lLmZyb20pO1xuICAgIGZvciAobGV0IGN1ciA9IHN0YXJ0LCBjaGVjayA9IG51bGw7Oykge1xuICAgICAgICBsZXQgbmV4dCA9IG1vdmVWaXN1YWxseShsaW5lLCBzcGFucywgZGlyZWN0aW9uLCBjdXIsIGZvcndhcmQpLCBjaGFyID0gbW92ZWRPdmVyO1xuICAgICAgICBpZiAoIW5leHQpIHtcbiAgICAgICAgICAgIGlmIChsaW5lLm51bWJlciA9PSAoZm9yd2FyZCA/IHZpZXcuc3RhdGUuZG9jLmxpbmVzIDogMSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cjtcbiAgICAgICAgICAgIGNoYXIgPSBcIlxcblwiO1xuICAgICAgICAgICAgbGluZSA9IHZpZXcuc3RhdGUuZG9jLmxpbmUobGluZS5udW1iZXIgKyAoZm9yd2FyZCA/IDEgOiAtMSkpO1xuICAgICAgICAgICAgc3BhbnMgPSB2aWV3LmJpZGlTcGFucyhsaW5lKTtcbiAgICAgICAgICAgIG5leHQgPSB2aWV3LnZpc3VhbExpbmVTaWRlKGxpbmUsICFmb3J3YXJkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNoZWNrKSB7XG4gICAgICAgICAgICBpZiAoIWJ5KVxuICAgICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgY2hlY2sgPSBieShjaGFyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghY2hlY2soY2hhcikpIHtcbiAgICAgICAgICAgIHJldHVybiBjdXI7XG4gICAgICAgIH1cbiAgICAgICAgY3VyID0gbmV4dDtcbiAgICB9XG59XG5mdW5jdGlvbiBieUdyb3VwKHZpZXcsIHBvcywgc3RhcnQpIHtcbiAgICBsZXQgY2F0ZWdvcml6ZSA9IHZpZXcuc3RhdGUuY2hhckNhdGVnb3JpemVyKHBvcyk7XG4gICAgbGV0IGNhdCA9IGNhdGVnb3JpemUoc3RhcnQpO1xuICAgIHJldHVybiAobmV4dCkgPT4ge1xuICAgICAgICBsZXQgbmV4dENhdCA9IGNhdGVnb3JpemUobmV4dCk7XG4gICAgICAgIGlmIChjYXQgPT0gc3RhdGUuQ2hhckNhdGVnb3J5LlNwYWNlKVxuICAgICAgICAgICAgY2F0ID0gbmV4dENhdDtcbiAgICAgICAgcmV0dXJuIGNhdCA9PSBuZXh0Q2F0O1xuICAgIH07XG59XG5mdW5jdGlvbiBtb3ZlVmVydGljYWxseSh2aWV3LCBzdGFydCwgZm9yd2FyZCwgZGlzdGFuY2UpIHtcbiAgICBsZXQgc3RhcnRQb3MgPSBzdGFydC5oZWFkLCBkaXIgPSBmb3J3YXJkID8gMSA6IC0xO1xuICAgIGlmIChzdGFydFBvcyA9PSAoZm9yd2FyZCA/IHZpZXcuc3RhdGUuZG9jLmxlbmd0aCA6IDApKVxuICAgICAgICByZXR1cm4gc3RhdGUuRWRpdG9yU2VsZWN0aW9uLmN1cnNvcihzdGFydFBvcywgc3RhcnQuYXNzb2MpO1xuICAgIGxldCBnb2FsID0gc3RhcnQuZ29hbENvbHVtbiwgc3RhcnRZO1xuICAgIGxldCByZWN0ID0gdmlldy5jb250ZW50RE9NLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGxldCBzdGFydENvb3JkcyA9IHZpZXcuY29vcmRzQXRQb3Moc3RhcnRQb3MsIHN0YXJ0LmFzc29jIHx8IC0xKSwgZG9jVG9wID0gdmlldy5kb2N1bWVudFRvcDtcbiAgICBpZiAoc3RhcnRDb29yZHMpIHtcbiAgICAgICAgaWYgKGdvYWwgPT0gbnVsbClcbiAgICAgICAgICAgIGdvYWwgPSBzdGFydENvb3Jkcy5sZWZ0IC0gcmVjdC5sZWZ0O1xuICAgICAgICBzdGFydFkgPSBkaXIgPCAwID8gc3RhcnRDb29yZHMudG9wIDogc3RhcnRDb29yZHMuYm90dG9tO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbGV0IGxpbmUgPSB2aWV3LnZpZXdTdGF0ZS5saW5lQmxvY2tBdChzdGFydFBvcyk7XG4gICAgICAgIGlmIChnb2FsID09IG51bGwpXG4gICAgICAgICAgICBnb2FsID0gTWF0aC5taW4ocmVjdC5yaWdodCAtIHJlY3QubGVmdCwgdmlldy5kZWZhdWx0Q2hhcmFjdGVyV2lkdGggKiAoc3RhcnRQb3MgLSBsaW5lLmZyb20pKTtcbiAgICAgICAgc3RhcnRZID0gKGRpciA8IDAgPyBsaW5lLnRvcCA6IGxpbmUuYm90dG9tKSArIGRvY1RvcDtcbiAgICB9XG4gICAgbGV0IHJlc29sdmVkR29hbCA9IHJlY3QubGVmdCArIGdvYWw7XG4gICAgbGV0IGRpc3QgPSBkaXN0YW5jZSAhPT0gbnVsbCAmJiBkaXN0YW5jZSAhPT0gdm9pZCAwID8gZGlzdGFuY2UgOiAodmlldy52aWV3U3RhdGUuaGVpZ2h0T3JhY2xlLnRleHRIZWlnaHQgPj4gMSk7XG4gICAgZm9yIChsZXQgZXh0cmEgPSAwOzsgZXh0cmEgKz0gMTApIHtcbiAgICAgICAgbGV0IGN1clkgPSBzdGFydFkgKyAoZGlzdCArIGV4dHJhKSAqIGRpcjtcbiAgICAgICAgbGV0IHBvcyA9IHBvc0F0Q29vcmRzKHZpZXcsIHsgeDogcmVzb2x2ZWRHb2FsLCB5OiBjdXJZIH0sIGZhbHNlLCBkaXIpO1xuICAgICAgICBpZiAoY3VyWSA8IHJlY3QudG9wIHx8IGN1clkgPiByZWN0LmJvdHRvbSB8fCAoZGlyIDwgMCA/IHBvcyA8IHN0YXJ0UG9zIDogcG9zID4gc3RhcnRQb3MpKSB7XG4gICAgICAgICAgICBsZXQgY2hhclJlY3QgPSB2aWV3LmRvY1ZpZXcuY29vcmRzRm9yQ2hhcihwb3MpO1xuICAgICAgICAgICAgbGV0IGFzc29jID0gIWNoYXJSZWN0IHx8IGN1clkgPCBjaGFyUmVjdC50b3AgPyAtMSA6IDE7XG4gICAgICAgICAgICByZXR1cm4gc3RhdGUuRWRpdG9yU2VsZWN0aW9uLmN1cnNvcihwb3MsIGFzc29jLCB1bmRlZmluZWQsIGdvYWwpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gc2tpcEF0b21pY1JhbmdlcyhhdG9tcywgcG9zLCBiaWFzKSB7XG4gICAgZm9yICg7Oykge1xuICAgICAgICBsZXQgbW92ZWQgPSAwO1xuICAgICAgICBmb3IgKGxldCBzZXQgb2YgYXRvbXMpIHtcbiAgICAgICAgICAgIHNldC5iZXR3ZWVuKHBvcyAtIDEsIHBvcyArIDEsIChmcm9tLCB0bywgdmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocG9zID4gZnJvbSAmJiBwb3MgPCB0bykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgc2lkZSA9IG1vdmVkIHx8IGJpYXMgfHwgKHBvcyAtIGZyb20gPCB0byAtIHBvcyA/IC0xIDogMSk7XG4gICAgICAgICAgICAgICAgICAgIHBvcyA9IHNpZGUgPCAwID8gZnJvbSA6IHRvO1xuICAgICAgICAgICAgICAgICAgICBtb3ZlZCA9IHNpZGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFtb3ZlZClcbiAgICAgICAgICAgIHJldHVybiBwb3M7XG4gICAgfVxufVxuZnVuY3Rpb24gc2tpcEF0b21zKHZpZXcsIG9sZFBvcywgcG9zKSB7XG4gICAgbGV0IG5ld1BvcyA9IHNraXBBdG9taWNSYW5nZXModmlldy5zdGF0ZS5mYWNldChhdG9taWNSYW5nZXMpLm1hcChmID0+IGYodmlldykpLCBwb3MuZnJvbSwgb2xkUG9zLmhlYWQgPiBwb3MuZnJvbSA/IC0xIDogMSk7XG4gICAgcmV0dXJuIG5ld1BvcyA9PSBwb3MuZnJvbSA/IHBvcyA6IHN0YXRlLkVkaXRvclNlbGVjdGlvbi5jdXJzb3IobmV3UG9zLCBuZXdQb3MgPCBwb3MuZnJvbSA/IDEgOiAtMSk7XG59XG5cbi8vIFRoaXMgd2lsbCBhbHNvIGJlIHdoZXJlIGRyYWdnaW5nIGluZm8gYW5kIHN1Y2ggZ29lc1xuY2xhc3MgSW5wdXRTdGF0ZSB7XG4gICAgc2V0U2VsZWN0aW9uT3JpZ2luKG9yaWdpbikge1xuICAgICAgICB0aGlzLmxhc3RTZWxlY3Rpb25PcmlnaW4gPSBvcmlnaW47XG4gICAgICAgIHRoaXMubGFzdFNlbGVjdGlvblRpbWUgPSBEYXRlLm5vdygpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcih2aWV3KSB7XG4gICAgICAgIHRoaXMudmlldyA9IHZpZXc7XG4gICAgICAgIHRoaXMubGFzdEtleUNvZGUgPSAwO1xuICAgICAgICB0aGlzLmxhc3RLZXlUaW1lID0gMDtcbiAgICAgICAgdGhpcy5sYXN0VG91Y2hUaW1lID0gMDtcbiAgICAgICAgdGhpcy5sYXN0Rm9jdXNUaW1lID0gMDtcbiAgICAgICAgdGhpcy5sYXN0U2Nyb2xsVG9wID0gMDtcbiAgICAgICAgdGhpcy5sYXN0U2Nyb2xsTGVmdCA9IDA7XG4gICAgICAgIC8vIE9uIGlPUywgc29tZSBrZXlzIG5lZWQgdG8gaGF2ZSB0aGVpciBkZWZhdWx0IGJlaGF2aW9yIGhhcHBlblxuICAgICAgICAvLyAoYWZ0ZXIgd2hpY2ggd2UgcmV0cm9hY3RpdmVseSBoYW5kbGUgdGhlbSBhbmQgcmVzZXQgdGhlIERPTSkgdG9cbiAgICAgICAgLy8gYXZvaWQgbWVzc2luZyB1cCB0aGUgdmlydHVhbCBrZXlib2FyZCBzdGF0ZS5cbiAgICAgICAgdGhpcy5wZW5kaW5nSU9TS2V5ID0gdW5kZWZpbmVkO1xuICAgICAgICAvKipcbiAgICAgICAgV2hlbiBlbmFibGVkICg+LTEpLCB0YWIgcHJlc3NlcyBhcmUgbm90IGdpdmVuIHRvIGtleSBoYW5kbGVycyxcbiAgICAgICAgbGVhdmluZyB0aGUgYnJvd3NlcidzIGRlZmF1bHQgYmVoYXZpb3IuIElmID4wLCB0aGUgbW9kZSBleHBpcmVzXG4gICAgICAgIGF0IHRoYXQgdGltZXN0YW1wLCBhbmQgYW55IG90aGVyIGtleXByZXNzIGNsZWFycyBpdC5cbiAgICAgICAgRXNjIGVuYWJsZXMgdGVtcG9yYXJ5IHRhYiBmb2N1cyBtb2RlIGZvciB0d28gc2Vjb25kcyB3aGVuIG5vdFxuICAgICAgICBvdGhlcndpc2UgaGFuZGxlZC5cbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy50YWJGb2N1c01vZGUgPSAtMTtcbiAgICAgICAgdGhpcy5sYXN0U2VsZWN0aW9uT3JpZ2luID0gbnVsbDtcbiAgICAgICAgdGhpcy5sYXN0U2VsZWN0aW9uVGltZSA9IDA7XG4gICAgICAgIHRoaXMubGFzdENvbnRleHRNZW51ID0gMDtcbiAgICAgICAgdGhpcy5zY3JvbGxIYW5kbGVycyA9IFtdO1xuICAgICAgICB0aGlzLmhhbmRsZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgLy8gLTEgbWVhbnMgbm90IGluIGEgY29tcG9zaXRpb24uIE90aGVyd2lzZSwgdGhpcyBjb3VudHMgdGhlIG51bWJlclxuICAgICAgICAvLyBvZiBjaGFuZ2VzIG1hZGUgZHVyaW5nIHRoZSBjb21wb3NpdGlvbi4gVGhlIGNvdW50IGlzIHVzZWQgdG9cbiAgICAgICAgLy8gYXZvaWQgdHJlYXRpbmcgdGhlIHN0YXJ0IHN0YXRlIG9mIHRoZSBjb21wb3NpdGlvbiwgYmVmb3JlIGFueVxuICAgICAgICAvLyBjaGFuZ2VzIGhhdmUgYmVlbiBtYWRlLCBhcyBwYXJ0IG9mIHRoZSBjb21wb3NpdGlvbi5cbiAgICAgICAgdGhpcy5jb21wb3NpbmcgPSAtMTtcbiAgICAgICAgLy8gVHJhY2tzIHdoZXRoZXIgdGhlIG5leHQgY2hhbmdlIHNob3VsZCBiZSBtYXJrZWQgYXMgc3RhcnRpbmcgdGhlXG4gICAgICAgIC8vIGNvbXBvc2l0aW9uIChudWxsIG1lYW5zIG5vIGNvbXBvc2l0aW9uLCB0cnVlIG1lYW5zIG5leHQgaXMgdGhlXG4gICAgICAgIC8vIGZpcnN0LCBmYWxzZSBtZWFucyBmaXJzdCBoYXMgYWxyZWFkeSBiZWVuIG1hcmtlZCBmb3IgdGhpc1xuICAgICAgICAvLyBjb21wb3NpdGlvbilcbiAgICAgICAgdGhpcy5jb21wb3NpdGlvbkZpcnN0Q2hhbmdlID0gbnVsbDtcbiAgICAgICAgLy8gRW5kIHRpbWUgb2YgdGhlIHByZXZpb3VzIGNvbXBvc2l0aW9uXG4gICAgICAgIHRoaXMuY29tcG9zaXRpb25FbmRlZEF0ID0gMDtcbiAgICAgICAgLy8gVXNlZCBpbiBhIGtsdWRnZSB0byBkZXRlY3Qgd2hlbiBhbiBFbnRlciBrZXlwcmVzcyBzaG91bGQgYmVcbiAgICAgICAgLy8gY29uc2lkZXJlZCBwYXJ0IG9mIHRoZSBjb21wb3NpdGlvbiBvbiBTYWZhcmksIHdoaWNoIGZpcmVzIGV2ZW50c1xuICAgICAgICAvLyBpbiB0aGUgd3Jvbmcgb3JkZXJcbiAgICAgICAgdGhpcy5jb21wb3NpdGlvblBlbmRpbmdLZXkgPSBmYWxzZTtcbiAgICAgICAgLy8gVXNlZCB0byBjYXRlZ29yaXplIGNoYW5nZXMgYXMgcGFydCBvZiBhIGNvbXBvc2l0aW9uLCBldmVuIHdoZW5cbiAgICAgICAgLy8gdGhlIG11dGF0aW9uIGV2ZW50cyBmaXJlIHNob3J0bHkgYWZ0ZXIgdGhlIGNvbXBvc2l0aW9uZW5kIGV2ZW50XG4gICAgICAgIHRoaXMuY29tcG9zaXRpb25QZW5kaW5nQ2hhbmdlID0gZmFsc2U7XG4gICAgICAgIHRoaXMubW91c2VTZWxlY3Rpb24gPSBudWxsO1xuICAgICAgICAvLyBXaGVuIGEgZHJhZyBmcm9tIHRoZSBlZGl0b3IgaXMgYWN0aXZlLCB0aGlzIHBvaW50cyBhdCB0aGUgcmFuZ2VcbiAgICAgICAgLy8gYmVpbmcgZHJhZ2dlZC5cbiAgICAgICAgdGhpcy5kcmFnZ2VkQ29udGVudCA9IG51bGw7XG4gICAgICAgIHRoaXMuaGFuZGxlRXZlbnQgPSB0aGlzLmhhbmRsZUV2ZW50LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMubm90aWZpZWRGb2N1c2VkID0gdmlldy5oYXNGb2N1cztcbiAgICAgICAgLy8gT24gU2FmYXJpIGFkZGluZyBhbiBpbnB1dCBldmVudCBoYW5kbGVyIHNvbWVob3cgcHJldmVudHMgYW5cbiAgICAgICAgLy8gaXNzdWUgd2hlcmUgdGhlIGNvbXBvc2l0aW9uIHZhbmlzaGVzIHdoZW4geW91IHByZXNzIGVudGVyLlxuICAgICAgICBpZiAoYnJvd3Nlci5zYWZhcmkpXG4gICAgICAgICAgICB2aWV3LmNvbnRlbnRET00uYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsICgpID0+IG51bGwpO1xuICAgICAgICBpZiAoYnJvd3Nlci5nZWNrbylcbiAgICAgICAgICAgIGZpcmVmb3hDb3B5Q3V0SGFjayh2aWV3LmNvbnRlbnRET00ub3duZXJEb2N1bWVudCk7XG4gICAgfVxuICAgIGhhbmRsZUV2ZW50KGV2ZW50KSB7XG4gICAgICAgIGlmICghZXZlbnRCZWxvbmdzVG9FZGl0b3IodGhpcy52aWV3LCBldmVudCkgfHwgdGhpcy5pZ25vcmVEdXJpbmdDb21wb3NpdGlvbihldmVudCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChldmVudC50eXBlID09IFwia2V5ZG93blwiICYmIHRoaXMua2V5ZG93bihldmVudCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMucnVuSGFuZGxlcnMoZXZlbnQudHlwZSwgZXZlbnQpO1xuICAgIH1cbiAgICBydW5IYW5kbGVycyh0eXBlLCBldmVudCkge1xuICAgICAgICBsZXQgaGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzW3R5cGVdO1xuICAgICAgICBpZiAoaGFuZGxlcnMpIHtcbiAgICAgICAgICAgIGZvciAobGV0IG9ic2VydmVyIG9mIGhhbmRsZXJzLm9ic2VydmVycylcbiAgICAgICAgICAgICAgICBvYnNlcnZlcih0aGlzLnZpZXcsIGV2ZW50KTtcbiAgICAgICAgICAgIGZvciAobGV0IGhhbmRsZXIgb2YgaGFuZGxlcnMuaGFuZGxlcnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgaWYgKGhhbmRsZXIodGhpcy52aWV3LCBldmVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVuc3VyZUhhbmRsZXJzKHBsdWdpbnMpIHtcbiAgICAgICAgbGV0IGhhbmRsZXJzID0gY29tcHV0ZUhhbmRsZXJzKHBsdWdpbnMpLCBwcmV2ID0gdGhpcy5oYW5kbGVycywgZG9tID0gdGhpcy52aWV3LmNvbnRlbnRET007XG4gICAgICAgIGZvciAobGV0IHR5cGUgaW4gaGFuZGxlcnMpXG4gICAgICAgICAgICBpZiAodHlwZSAhPSBcInNjcm9sbFwiKSB7XG4gICAgICAgICAgICAgICAgbGV0IHBhc3NpdmUgPSAhaGFuZGxlcnNbdHlwZV0uaGFuZGxlcnMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGxldCBleGlzdHMgPSBwcmV2W3R5cGVdO1xuICAgICAgICAgICAgICAgIGlmIChleGlzdHMgJiYgcGFzc2l2ZSAhPSAhZXhpc3RzLmhhbmRsZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBkb20ucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCB0aGlzLmhhbmRsZUV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgZXhpc3RzID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFleGlzdHMpXG4gICAgICAgICAgICAgICAgICAgIGRvbS5hZGRFdmVudExpc3RlbmVyKHR5cGUsIHRoaXMuaGFuZGxlRXZlbnQsIHsgcGFzc2l2ZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgdHlwZSBpbiBwcmV2KVxuICAgICAgICAgICAgaWYgKHR5cGUgIT0gXCJzY3JvbGxcIiAmJiAhaGFuZGxlcnNbdHlwZV0pXG4gICAgICAgICAgICAgICAgZG9tLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgdGhpcy5oYW5kbGVFdmVudCk7XG4gICAgICAgIHRoaXMuaGFuZGxlcnMgPSBoYW5kbGVycztcbiAgICB9XG4gICAga2V5ZG93bihldmVudCkge1xuICAgICAgICAvLyBNdXN0IGFsd2F5cyBydW4sIGV2ZW4gaWYgYSBjdXN0b20gaGFuZGxlciBoYW5kbGVkIHRoZSBldmVudFxuICAgICAgICB0aGlzLmxhc3RLZXlDb2RlID0gZXZlbnQua2V5Q29kZTtcbiAgICAgICAgdGhpcy5sYXN0S2V5VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgIGlmIChldmVudC5rZXlDb2RlID09IDkgJiYgdGhpcy50YWJGb2N1c01vZGUgPiAtMSAmJiAoIXRoaXMudGFiRm9jdXNNb2RlIHx8IERhdGUubm93KCkgPD0gdGhpcy50YWJGb2N1c01vZGUpKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmICh0aGlzLnRhYkZvY3VzTW9kZSA+IDAgJiYgZXZlbnQua2V5Q29kZSAhPSAyNyAmJiBtb2RpZmllckNvZGVzLmluZGV4T2YoZXZlbnQua2V5Q29kZSkgPCAwKVxuICAgICAgICAgICAgdGhpcy50YWJGb2N1c01vZGUgPSAtMTtcbiAgICAgICAgLy8gQ2hyb21lIGZvciBBbmRyb2lkIHVzdWFsbHkgZG9lc24ndCBmaXJlIHByb3BlciBrZXkgZXZlbnRzLCBidXRcbiAgICAgICAgLy8gb2NjYXNpb25hbGx5IGRvZXMsIHVzdWFsbHkgc3Vycm91bmRlZCBieSBhIGJ1bmNoIG9mIGNvbXBsaWNhdGVkXG4gICAgICAgIC8vIGNvbXBvc2l0aW9uIGNoYW5nZXMuIFdoZW4gYW4gZW50ZXIgb3IgYmFja3NwYWNlIGtleSBldmVudCBpc1xuICAgICAgICAvLyBzZWVuLCBob2xkIG9mZiBvbiBoYW5kbGluZyBET00gZXZlbnRzIGZvciBhIGJpdCwgYW5kIHRoZW5cbiAgICAgICAgLy8gZGlzcGF0Y2ggaXQuXG4gICAgICAgIGlmIChicm93c2VyLmFuZHJvaWQgJiYgYnJvd3Nlci5jaHJvbWUgJiYgIWV2ZW50LnN5bnRoZXRpYyAmJlxuICAgICAgICAgICAgKGV2ZW50LmtleUNvZGUgPT0gMTMgfHwgZXZlbnQua2V5Q29kZSA9PSA4KSkge1xuICAgICAgICAgICAgdGhpcy52aWV3Lm9ic2VydmVyLmRlbGF5QW5kcm9pZEtleShldmVudC5rZXksIGV2ZW50LmtleUNvZGUpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUHJldmVudGluZyB0aGUgZGVmYXVsdCBiZWhhdmlvciBvZiBFbnRlciBvbiBpT1MgbWFrZXMgdGhlXG4gICAgICAgIC8vIHZpcnR1YWwga2V5Ym9hcmQgZ2V0IHN0dWNrIGluIHRoZSB3cm9uZyAobG93ZXJjYXNlKVxuICAgICAgICAvLyBzdGF0ZS4gU28gd2UgbGV0IGl0IGdvIHRocm91Z2gsIGFuZCB0aGVuLCBpblxuICAgICAgICAvLyBhcHBseURPTUNoYW5nZSwgbm90aWZ5IGtleSBoYW5kbGVycyBvZiBpdCBhbmQgcmVzZXQgdG9cbiAgICAgICAgLy8gdGhlIHN0YXRlIHRoZXkgcHJvZHVjZS5cbiAgICAgICAgbGV0IHBlbmRpbmc7XG4gICAgICAgIGlmIChicm93c2VyLmlvcyAmJiAhZXZlbnQuc3ludGhldGljICYmICFldmVudC5hbHRLZXkgJiYgIWV2ZW50Lm1ldGFLZXkgJiZcbiAgICAgICAgICAgICgocGVuZGluZyA9IFBlbmRpbmdLZXlzLmZpbmQoa2V5ID0+IGtleS5rZXlDb2RlID09IGV2ZW50LmtleUNvZGUpKSAmJiAhZXZlbnQuY3RybEtleSB8fFxuICAgICAgICAgICAgICAgIEVtYWNzeVBlbmRpbmdLZXlzLmluZGV4T2YoZXZlbnQua2V5KSA+IC0xICYmIGV2ZW50LmN0cmxLZXkgJiYgIWV2ZW50LnNoaWZ0S2V5KSkge1xuICAgICAgICAgICAgdGhpcy5wZW5kaW5nSU9TS2V5ID0gcGVuZGluZyB8fCBldmVudDtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5mbHVzaElPU0tleSgpLCAyNTApO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgIT0gMjI5KVxuICAgICAgICAgICAgdGhpcy52aWV3Lm9ic2VydmVyLmZvcmNlRmx1c2goKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmbHVzaElPU0tleShjaGFuZ2UpIHtcbiAgICAgICAgbGV0IGtleSA9IHRoaXMucGVuZGluZ0lPU0tleTtcbiAgICAgICAgaWYgKCFrZXkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIC8vIFRoaXMgbG9va3MgbGlrZSBhbiBhdXRvY29ycmVjdGlvbiBiZWZvcmUgRW50ZXJcbiAgICAgICAgaWYgKGtleS5rZXkgPT0gXCJFbnRlclwiICYmIGNoYW5nZSAmJiBjaGFuZ2UuZnJvbSA8IGNoYW5nZS50byAmJiAvXlxcUyskLy50ZXN0KGNoYW5nZS5pbnNlcnQudG9TdHJpbmcoKSkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHRoaXMucGVuZGluZ0lPU0tleSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIGRpc3BhdGNoS2V5KHRoaXMudmlldy5jb250ZW50RE9NLCBrZXkua2V5LCBrZXkua2V5Q29kZSwga2V5IGluc3RhbmNlb2YgS2V5Ym9hcmRFdmVudCA/IGtleSA6IHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIGlnbm9yZUR1cmluZ0NvbXBvc2l0aW9uKGV2ZW50KSB7XG4gICAgICAgIGlmICghL15rZXkvLnRlc3QoZXZlbnQudHlwZSkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLmNvbXBvc2luZyA+IDApXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vd3d3LnN0dW0uZGUvMjAxNi8wNi8yNC9oYW5kbGluZy1pbWUtZXZlbnRzLWluLWphdmFzY3JpcHQvLlxuICAgICAgICAvLyBPbiBzb21lIGlucHV0IG1ldGhvZCBlZGl0b3JzIChJTUVzKSwgdGhlIEVudGVyIGtleSBpcyB1c2VkIHRvXG4gICAgICAgIC8vIGNvbmZpcm0gY2hhcmFjdGVyIHNlbGVjdGlvbi4gT24gU2FmYXJpLCB3aGVuIEVudGVyIGlzIHByZXNzZWQsXG4gICAgICAgIC8vIGNvbXBvc2l0aW9uZW5kIGFuZCBrZXlkb3duIGV2ZW50cyBhcmUgc29tZXRpbWVzIGVtaXR0ZWQgaW4gdGhlXG4gICAgICAgIC8vIHdyb25nIG9yZGVyLiBUaGUga2V5IGV2ZW50IHNob3VsZCBzdGlsbCBiZSBpZ25vcmVkLCBldmVuIHdoZW5cbiAgICAgICAgLy8gaXQgaGFwcGVucyBhZnRlciB0aGUgY29tcG9zaXRpb25lbmQgZXZlbnQuXG4gICAgICAgIGlmIChicm93c2VyLnNhZmFyaSAmJiAhYnJvd3Nlci5pb3MgJiYgdGhpcy5jb21wb3NpdGlvblBlbmRpbmdLZXkgJiYgRGF0ZS5ub3coKSAtIHRoaXMuY29tcG9zaXRpb25FbmRlZEF0IDwgMTAwKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXBvc2l0aW9uUGVuZGluZ0tleSA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBzdGFydE1vdXNlU2VsZWN0aW9uKG1vdXNlU2VsZWN0aW9uKSB7XG4gICAgICAgIGlmICh0aGlzLm1vdXNlU2VsZWN0aW9uKVxuICAgICAgICAgICAgdGhpcy5tb3VzZVNlbGVjdGlvbi5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMubW91c2VTZWxlY3Rpb24gPSBtb3VzZVNlbGVjdGlvbjtcbiAgICB9XG4gICAgdXBkYXRlKHVwZGF0ZSkge1xuICAgICAgICB0aGlzLnZpZXcub2JzZXJ2ZXIudXBkYXRlKHVwZGF0ZSk7XG4gICAgICAgIGlmICh0aGlzLm1vdXNlU2VsZWN0aW9uKVxuICAgICAgICAgICAgdGhpcy5tb3VzZVNlbGVjdGlvbi51cGRhdGUodXBkYXRlKTtcbiAgICAgICAgaWYgKHRoaXMuZHJhZ2dlZENvbnRlbnQgJiYgdXBkYXRlLmRvY0NoYW5nZWQpXG4gICAgICAgICAgICB0aGlzLmRyYWdnZWRDb250ZW50ID0gdGhpcy5kcmFnZ2VkQ29udGVudC5tYXAodXBkYXRlLmNoYW5nZXMpO1xuICAgICAgICBpZiAodXBkYXRlLnRyYW5zYWN0aW9ucy5sZW5ndGgpXG4gICAgICAgICAgICB0aGlzLmxhc3RLZXlDb2RlID0gdGhpcy5sYXN0U2VsZWN0aW9uVGltZSA9IDA7XG4gICAgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLm1vdXNlU2VsZWN0aW9uKVxuICAgICAgICAgICAgdGhpcy5tb3VzZVNlbGVjdGlvbi5kZXN0cm95KCk7XG4gICAgfVxufVxuZnVuY3Rpb24gYmluZEhhbmRsZXIocGx1Z2luLCBoYW5kbGVyKSB7XG4gICAgcmV0dXJuICh2aWV3LCBldmVudCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXIuY2FsbChwbHVnaW4sIGV2ZW50LCB2aWV3KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgbG9nRXhjZXB0aW9uKHZpZXcuc3RhdGUsIGUpO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVIYW5kbGVycyhwbHVnaW5zKSB7XG4gICAgbGV0IHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgZnVuY3Rpb24gcmVjb3JkKHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdFt0eXBlXSB8fCAocmVzdWx0W3R5cGVdID0geyBvYnNlcnZlcnM6IFtdLCBoYW5kbGVyczogW10gfSk7XG4gICAgfVxuICAgIGZvciAobGV0IHBsdWdpbiBvZiBwbHVnaW5zKSB7XG4gICAgICAgIGxldCBzcGVjID0gcGx1Z2luLnNwZWM7XG4gICAgICAgIGlmIChzcGVjICYmIHNwZWMuZG9tRXZlbnRIYW5kbGVycylcbiAgICAgICAgICAgIGZvciAobGV0IHR5cGUgaW4gc3BlYy5kb21FdmVudEhhbmRsZXJzKSB7XG4gICAgICAgICAgICAgICAgbGV0IGYgPSBzcGVjLmRvbUV2ZW50SGFuZGxlcnNbdHlwZV07XG4gICAgICAgICAgICAgICAgaWYgKGYpXG4gICAgICAgICAgICAgICAgICAgIHJlY29yZCh0eXBlKS5oYW5kbGVycy5wdXNoKGJpbmRIYW5kbGVyKHBsdWdpbi52YWx1ZSwgZikpO1xuICAgICAgICAgICAgfVxuICAgICAgICBpZiAoc3BlYyAmJiBzcGVjLmRvbUV2ZW50T2JzZXJ2ZXJzKVxuICAgICAgICAgICAgZm9yIChsZXQgdHlwZSBpbiBzcGVjLmRvbUV2ZW50T2JzZXJ2ZXJzKSB7XG4gICAgICAgICAgICAgICAgbGV0IGYgPSBzcGVjLmRvbUV2ZW50T2JzZXJ2ZXJzW3R5cGVdO1xuICAgICAgICAgICAgICAgIGlmIChmKVxuICAgICAgICAgICAgICAgICAgICByZWNvcmQodHlwZSkub2JzZXJ2ZXJzLnB1c2goYmluZEhhbmRsZXIocGx1Z2luLnZhbHVlLCBmKSk7XG4gICAgICAgICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IHR5cGUgaW4gaGFuZGxlcnMpXG4gICAgICAgIHJlY29yZCh0eXBlKS5oYW5kbGVycy5wdXNoKGhhbmRsZXJzW3R5cGVdKTtcbiAgICBmb3IgKGxldCB0eXBlIGluIG9ic2VydmVycylcbiAgICAgICAgcmVjb3JkKHR5cGUpLm9ic2VydmVycy5wdXNoKG9ic2VydmVyc1t0eXBlXSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmNvbnN0IFBlbmRpbmdLZXlzID0gW1xuICAgIHsga2V5OiBcIkJhY2tzcGFjZVwiLCBrZXlDb2RlOiA4LCBpbnB1dFR5cGU6IFwiZGVsZXRlQ29udGVudEJhY2t3YXJkXCIgfSxcbiAgICB7IGtleTogXCJFbnRlclwiLCBrZXlDb2RlOiAxMywgaW5wdXRUeXBlOiBcImluc2VydFBhcmFncmFwaFwiIH0sXG4gICAgeyBrZXk6IFwiRW50ZXJcIiwga2V5Q29kZTogMTMsIGlucHV0VHlwZTogXCJpbnNlcnRMaW5lQnJlYWtcIiB9LFxuICAgIHsga2V5OiBcIkRlbGV0ZVwiLCBrZXlDb2RlOiA0NiwgaW5wdXRUeXBlOiBcImRlbGV0ZUNvbnRlbnRGb3J3YXJkXCIgfVxuXTtcbmNvbnN0IEVtYWNzeVBlbmRpbmdLZXlzID0gXCJkdGhrb1wiO1xuLy8gS2V5IGNvZGVzIGZvciBtb2RpZmllciBrZXlzXG5jb25zdCBtb2RpZmllckNvZGVzID0gWzE2LCAxNywgMTgsIDIwLCA5MSwgOTIsIDIyNCwgMjI1XTtcbmNvbnN0IGRyYWdTY3JvbGxNYXJnaW4gPSA2O1xuZnVuY3Rpb24gZHJhZ1Njcm9sbFNwZWVkKGRpc3QpIHtcbiAgICByZXR1cm4gTWF0aC5tYXgoMCwgZGlzdCkgKiAwLjcgKyA4O1xufVxuZnVuY3Rpb24gZGlzdChhLCBiKSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KE1hdGguYWJzKGEuY2xpZW50WCAtIGIuY2xpZW50WCksIE1hdGguYWJzKGEuY2xpZW50WSAtIGIuY2xpZW50WSkpO1xufVxuY2xhc3MgTW91c2VTZWxlY3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKHZpZXcsIHN0YXJ0RXZlbnQsIHN0eWxlLCBtdXN0U2VsZWN0KSB7XG4gICAgICAgIHRoaXMudmlldyA9IHZpZXc7XG4gICAgICAgIHRoaXMuc3RhcnRFdmVudCA9IHN0YXJ0RXZlbnQ7XG4gICAgICAgIHRoaXMuc3R5bGUgPSBzdHlsZTtcbiAgICAgICAgdGhpcy5tdXN0U2VsZWN0ID0gbXVzdFNlbGVjdDtcbiAgICAgICAgdGhpcy5zY3JvbGxTcGVlZCA9IHsgeDogMCwgeTogMCB9O1xuICAgICAgICB0aGlzLnNjcm9sbGluZyA9IC0xO1xuICAgICAgICB0aGlzLmxhc3RFdmVudCA9IHN0YXJ0RXZlbnQ7XG4gICAgICAgIHRoaXMuc2Nyb2xsUGFyZW50ID0gc2Nyb2xsYWJsZVBhcmVudCh2aWV3LmNvbnRlbnRET00pO1xuICAgICAgICB0aGlzLmF0b21zID0gdmlldy5zdGF0ZS5mYWNldChhdG9taWNSYW5nZXMpLm1hcChmID0+IGYodmlldykpO1xuICAgICAgICBsZXQgZG9jID0gdmlldy5jb250ZW50RE9NLm93bmVyRG9jdW1lbnQ7XG4gICAgICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMubW92ZSA9IHRoaXMubW92ZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMudXAgPSB0aGlzLnVwLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmV4dGVuZCA9IHN0YXJ0RXZlbnQuc2hpZnRLZXk7XG4gICAgICAgIHRoaXMubXVsdGlwbGUgPSB2aWV3LnN0YXRlLmZhY2V0KHN0YXRlLkVkaXRvclN0YXRlLmFsbG93TXVsdGlwbGVTZWxlY3Rpb25zKSAmJiBhZGRzU2VsZWN0aW9uUmFuZ2Uodmlldywgc3RhcnRFdmVudCk7XG4gICAgICAgIHRoaXMuZHJhZ2dpbmcgPSBpc0luUHJpbWFyeVNlbGVjdGlvbih2aWV3LCBzdGFydEV2ZW50KSAmJiBnZXRDbGlja1R5cGUoc3RhcnRFdmVudCkgPT0gMSA/IG51bGwgOiBmYWxzZTtcbiAgICB9XG4gICAgc3RhcnQoZXZlbnQpIHtcbiAgICAgICAgLy8gV2hlbiBjbGlja2luZyBvdXRzaWRlIG9mIHRoZSBzZWxlY3Rpb24sIGltbWVkaWF0ZWx5IGFwcGx5IHRoZVxuICAgICAgICAvLyBlZmZlY3Qgb2Ygc3RhcnRpbmcgdGhlIHNlbGVjdGlvblxuICAgICAgICBpZiAodGhpcy5kcmFnZ2luZyA9PT0gZmFsc2UpXG4gICAgICAgICAgICB0aGlzLnNlbGVjdChldmVudCk7XG4gICAgfVxuICAgIG1vdmUoZXZlbnQpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoZXZlbnQuYnV0dG9ucyA9PSAwKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICBpZiAodGhpcy5kcmFnZ2luZyB8fCB0aGlzLmRyYWdnaW5nID09IG51bGwgJiYgZGlzdCh0aGlzLnN0YXJ0RXZlbnQsIGV2ZW50KSA8IDEwKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLnNlbGVjdCh0aGlzLmxhc3RFdmVudCA9IGV2ZW50KTtcbiAgICAgICAgbGV0IHN4ID0gMCwgc3kgPSAwO1xuICAgICAgICBsZXQgcmVjdCA9ICgoX2EgPSB0aGlzLnNjcm9sbFBhcmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKVxuICAgICAgICAgICAgfHwgeyBsZWZ0OiAwLCB0b3A6IDAsIHJpZ2h0OiB0aGlzLnZpZXcud2luLmlubmVyV2lkdGgsIGJvdHRvbTogdGhpcy52aWV3Lndpbi5pbm5lckhlaWdodCB9O1xuICAgICAgICBsZXQgbWFyZ2lucyA9IGdldFNjcm9sbE1hcmdpbnModGhpcy52aWV3KTtcbiAgICAgICAgaWYgKGV2ZW50LmNsaWVudFggLSBtYXJnaW5zLmxlZnQgPD0gcmVjdC5sZWZ0ICsgZHJhZ1Njcm9sbE1hcmdpbilcbiAgICAgICAgICAgIHN4ID0gLWRyYWdTY3JvbGxTcGVlZChyZWN0LmxlZnQgLSBldmVudC5jbGllbnRYKTtcbiAgICAgICAgZWxzZSBpZiAoZXZlbnQuY2xpZW50WCArIG1hcmdpbnMucmlnaHQgPj0gcmVjdC5yaWdodCAtIGRyYWdTY3JvbGxNYXJnaW4pXG4gICAgICAgICAgICBzeCA9IGRyYWdTY3JvbGxTcGVlZChldmVudC5jbGllbnRYIC0gcmVjdC5yaWdodCk7XG4gICAgICAgIGlmIChldmVudC5jbGllbnRZIC0gbWFyZ2lucy50b3AgPD0gcmVjdC50b3AgKyBkcmFnU2Nyb2xsTWFyZ2luKVxuICAgICAgICAgICAgc3kgPSAtZHJhZ1Njcm9sbFNwZWVkKHJlY3QudG9wIC0gZXZlbnQuY2xpZW50WSk7XG4gICAgICAgIGVsc2UgaWYgKGV2ZW50LmNsaWVudFkgKyBtYXJnaW5zLmJvdHRvbSA+PSByZWN0LmJvdHRvbSAtIGRyYWdTY3JvbGxNYXJnaW4pXG4gICAgICAgICAgICBzeSA9IGRyYWdTY3JvbGxTcGVlZChldmVudC5jbGllbnRZIC0gcmVjdC5ib3R0b20pO1xuICAgICAgICB0aGlzLnNldFNjcm9sbFNwZWVkKHN4LCBzeSk7XG4gICAgfVxuICAgIHVwKGV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLmRyYWdnaW5nID09IG51bGwpXG4gICAgICAgICAgICB0aGlzLnNlbGVjdCh0aGlzLmxhc3RFdmVudCk7XG4gICAgICAgIGlmICghdGhpcy5kcmFnZ2luZylcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLnNldFNjcm9sbFNwZWVkKDAsIDApO1xuICAgICAgICBsZXQgZG9jID0gdGhpcy52aWV3LmNvbnRlbnRET00ub3duZXJEb2N1bWVudDtcbiAgICAgICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5tb3ZlKTtcbiAgICAgICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMudXApO1xuICAgICAgICB0aGlzLnZpZXcuaW5wdXRTdGF0ZS5tb3VzZVNlbGVjdGlvbiA9IHRoaXMudmlldy5pbnB1dFN0YXRlLmRyYWdnZWRDb250ZW50ID0gbnVsbDtcbiAgICB9XG4gICAgc2V0U2Nyb2xsU3BlZWQoc3gsIHN5KSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsU3BlZWQgPSB7IHg6IHN4LCB5OiBzeSB9O1xuICAgICAgICBpZiAoc3ggfHwgc3kpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnNjcm9sbGluZyA8IDApXG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxpbmcgPSBzZXRJbnRlcnZhbCgoKSA9PiB0aGlzLnNjcm9sbCgpLCA1MCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5zY3JvbGxpbmcgPiAtMSkge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnNjcm9sbGluZyk7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbGluZyA9IC0xO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNjcm9sbCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2Nyb2xsUGFyZW50KSB7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0ICs9IHRoaXMuc2Nyb2xsU3BlZWQueDtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCArPSB0aGlzLnNjcm9sbFNwZWVkLnk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnZpZXcud2luLnNjcm9sbEJ5KHRoaXMuc2Nyb2xsU3BlZWQueCwgdGhpcy5zY3JvbGxTcGVlZC55KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5kcmFnZ2luZyA9PT0gZmFsc2UpXG4gICAgICAgICAgICB0aGlzLnNlbGVjdCh0aGlzLmxhc3RFdmVudCk7XG4gICAgfVxuICAgIHNraXBBdG9tcyhzZWwpIHtcbiAgICAgICAgbGV0IHJhbmdlcyA9IG51bGw7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsLnJhbmdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHJhbmdlID0gc2VsLnJhbmdlc1tpXSwgdXBkYXRlZCA9IG51bGw7XG4gICAgICAgICAgICBpZiAocmFuZ2UuZW1wdHkpIHtcbiAgICAgICAgICAgICAgICBsZXQgcG9zID0gc2tpcEF0b21pY1Jhbmdlcyh0aGlzLmF0b21zLCByYW5nZS5mcm9tLCAwKTtcbiAgICAgICAgICAgICAgICBpZiAocG9zICE9IHJhbmdlLmZyb20pXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZWQgPSBzdGF0ZS5FZGl0b3JTZWxlY3Rpb24uY3Vyc29yKHBvcywgLTEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IGZyb20gPSBza2lwQXRvbWljUmFuZ2VzKHRoaXMuYXRvbXMsIHJhbmdlLmZyb20sIC0xKTtcbiAgICAgICAgICAgICAgICBsZXQgdG8gPSBza2lwQXRvbWljUmFuZ2VzKHRoaXMuYXRvbXMsIHJhbmdlLnRvLCAxKTtcbiAgICAgICAgICAgICAgICBpZiAoZnJvbSAhPSByYW5nZS5mcm9tIHx8IHRvICE9IHJhbmdlLnRvKVxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVkID0gc3RhdGUuRWRpdG9yU2VsZWN0aW9uLnJhbmdlKHJhbmdlLmZyb20gPT0gcmFuZ2UuYW5jaG9yID8gZnJvbSA6IHRvLCByYW5nZS5mcm9tID09IHJhbmdlLmhlYWQgPyBmcm9tIDogdG8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVwZGF0ZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXJhbmdlcylcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VzID0gc2VsLnJhbmdlcy5zbGljZSgpO1xuICAgICAgICAgICAgICAgIHJhbmdlc1tpXSA9IHVwZGF0ZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJhbmdlcyA/IHN0YXRlLkVkaXRvclNlbGVjdGlvbi5jcmVhdGUocmFuZ2VzLCBzZWwubWFpbkluZGV4KSA6IHNlbDtcbiAgICB9XG4gICAgc2VsZWN0KGV2ZW50KSB7XG4gICAgICAgIGxldCB7IHZpZXcgfSA9IHRoaXMsIHNlbGVjdGlvbiA9IHRoaXMuc2tpcEF0b21zKHRoaXMuc3R5bGUuZ2V0KGV2ZW50LCB0aGlzLmV4dGVuZCwgdGhpcy5tdWx0aXBsZSkpO1xuICAgICAgICBpZiAodGhpcy5tdXN0U2VsZWN0IHx8ICFzZWxlY3Rpb24uZXEodmlldy5zdGF0ZS5zZWxlY3Rpb24sIHRoaXMuZHJhZ2dpbmcgPT09IGZhbHNlKSlcbiAgICAgICAgICAgIHRoaXMudmlldy5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uLFxuICAgICAgICAgICAgICAgIHVzZXJFdmVudDogXCJzZWxlY3QucG9pbnRlclwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5tdXN0U2VsZWN0ID0gZmFsc2U7XG4gICAgfVxuICAgIHVwZGF0ZSh1cGRhdGUpIHtcbiAgICAgICAgaWYgKHVwZGF0ZS50cmFuc2FjdGlvbnMuc29tZSh0ciA9PiB0ci5pc1VzZXJFdmVudChcImlucHV0LnR5cGVcIikpKVxuICAgICAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuc3R5bGUudXBkYXRlKHVwZGF0ZSkpXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuc2VsZWN0KHRoaXMubGFzdEV2ZW50KSwgMjApO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFkZHNTZWxlY3Rpb25SYW5nZSh2aWV3LCBldmVudCkge1xuICAgIGxldCBmYWNldCA9IHZpZXcuc3RhdGUuZmFjZXQoY2xpY2tBZGRzU2VsZWN0aW9uUmFuZ2UpO1xuICAgIHJldHVybiBmYWNldC5sZW5ndGggPyBmYWNldFswXShldmVudCkgOiBicm93c2VyLm1hYyA/IGV2ZW50Lm1ldGFLZXkgOiBldmVudC5jdHJsS2V5O1xufVxuZnVuY3Rpb24gZHJhZ01vdmVzU2VsZWN0aW9uKHZpZXcsIGV2ZW50KSB7XG4gICAgbGV0IGZhY2V0ID0gdmlldy5zdGF0ZS5mYWNldChkcmFnTW92ZXNTZWxlY3Rpb24kMSk7XG4gICAgcmV0dXJuIGZhY2V0Lmxlbmd0aCA/IGZhY2V0WzBdKGV2ZW50KSA6IGJyb3dzZXIubWFjID8gIWV2ZW50LmFsdEtleSA6ICFldmVudC5jdHJsS2V5O1xufVxuZnVuY3Rpb24gaXNJblByaW1hcnlTZWxlY3Rpb24odmlldywgZXZlbnQpIHtcbiAgICBsZXQgeyBtYWluIH0gPSB2aWV3LnN0YXRlLnNlbGVjdGlvbjtcbiAgICBpZiAobWFpbi5lbXB0eSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIC8vIE9uIGJvdW5kYXJ5IGNsaWNrcywgY2hlY2sgd2hldGhlciB0aGUgY29vcmRpbmF0ZXMgYXJlIGluc2lkZSB0aGVcbiAgICAvLyBzZWxlY3Rpb24ncyBjbGllbnQgcmVjdGFuZ2xlc1xuICAgIGxldCBzZWwgPSBnZXRTZWxlY3Rpb24odmlldy5yb290KTtcbiAgICBpZiAoIXNlbCB8fCBzZWwucmFuZ2VDb3VudCA9PSAwKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICBsZXQgcmVjdHMgPSBzZWwuZ2V0UmFuZ2VBdCgwKS5nZXRDbGllbnRSZWN0cygpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVjdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IHJlY3QgPSByZWN0c1tpXTtcbiAgICAgICAgaWYgKHJlY3QubGVmdCA8PSBldmVudC5jbGllbnRYICYmIHJlY3QucmlnaHQgPj0gZXZlbnQuY2xpZW50WCAmJlxuICAgICAgICAgICAgcmVjdC50b3AgPD0gZXZlbnQuY2xpZW50WSAmJiByZWN0LmJvdHRvbSA+PSBldmVudC5jbGllbnRZKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGV2ZW50QmVsb25nc1RvRWRpdG9yKHZpZXcsIGV2ZW50KSB7XG4gICAgaWYgKCFldmVudC5idWJibGVzKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGZvciAobGV0IG5vZGUgPSBldmVudC50YXJnZXQsIGNWaWV3OyBub2RlICE9IHZpZXcuY29udGVudERPTTsgbm9kZSA9IG5vZGUucGFyZW50Tm9kZSlcbiAgICAgICAgaWYgKCFub2RlIHx8IG5vZGUubm9kZVR5cGUgPT0gMTEgfHwgKChjVmlldyA9IENvbnRlbnRWaWV3LmdldChub2RlKSkgJiYgY1ZpZXcuaWdub3JlRXZlbnQoZXZlbnQpKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmNvbnN0IGhhbmRsZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmNvbnN0IG9ic2VydmVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4vLyBUaGlzIGlzIHZlcnkgY3J1ZGUsIGJ1dCB1bmZvcnR1bmF0ZWx5IGJvdGggdGhlc2UgYnJvd3NlcnMgX3ByZXRlbmRfXG4vLyB0aGF0IHRoZXkgaGF2ZSBhIGNsaXBib2FyZCBBUEnigJRhbGwgdGhlIG9iamVjdHMgYW5kIG1ldGhvZHMgYXJlXG4vLyB0aGVyZSwgdGhleSBqdXN0IGRvbid0IHdvcmssIGFuZCB0aGV5IGFyZSBoYXJkIHRvIHRlc3QuXG5jb25zdCBicm9rZW5DbGlwYm9hcmRBUEkgPSAoYnJvd3Nlci5pZSAmJiBicm93c2VyLmllX3ZlcnNpb24gPCAxNSkgfHxcbiAgICAoYnJvd3Nlci5pb3MgJiYgYnJvd3Nlci53ZWJraXRfdmVyc2lvbiA8IDYwNCk7XG5mdW5jdGlvbiBjYXB0dXJlUGFzdGUodmlldykge1xuICAgIGxldCBwYXJlbnQgPSB2aWV3LmRvbS5wYXJlbnROb2RlO1xuICAgIGlmICghcGFyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgbGV0IHRhcmdldCA9IHBhcmVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIikpO1xuICAgIHRhcmdldC5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjogZml4ZWQ7IGxlZnQ6IC0xMDAwMHB4OyB0b3A6IDEwcHhcIjtcbiAgICB0YXJnZXQuZm9jdXMoKTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdmlldy5mb2N1cygpO1xuICAgICAgICB0YXJnZXQucmVtb3ZlKCk7XG4gICAgICAgIGRvUGFzdGUodmlldywgdGFyZ2V0LnZhbHVlKTtcbiAgICB9LCA1MCk7XG59XG5mdW5jdGlvbiBkb1Bhc3RlKHZpZXcsIGlucHV0KSB7XG4gICAgbGV0IHsgc3RhdGU6IHN0YXRlJDEgfSA9IHZpZXcsIGNoYW5nZXMsIGkgPSAxLCB0ZXh0ID0gc3RhdGUkMS50b1RleHQoaW5wdXQpO1xuICAgIGxldCBieUxpbmUgPSB0ZXh0LmxpbmVzID09IHN0YXRlJDEuc2VsZWN0aW9uLnJhbmdlcy5sZW5ndGg7XG4gICAgbGV0IGxpbmV3aXNlID0gbGFzdExpbmV3aXNlQ29weSAhPSBudWxsICYmIHN0YXRlJDEuc2VsZWN0aW9uLnJhbmdlcy5ldmVyeShyID0+IHIuZW1wdHkpICYmIGxhc3RMaW5ld2lzZUNvcHkgPT0gdGV4dC50b1N0cmluZygpO1xuICAgIGlmIChsaW5ld2lzZSkge1xuICAgICAgICBsZXQgbGFzdExpbmUgPSAtMTtcbiAgICAgICAgY2hhbmdlcyA9IHN0YXRlJDEuY2hhbmdlQnlSYW5nZShyYW5nZSA9PiB7XG4gICAgICAgICAgICBsZXQgbGluZSA9IHN0YXRlJDEuZG9jLmxpbmVBdChyYW5nZS5mcm9tKTtcbiAgICAgICAgICAgIGlmIChsaW5lLmZyb20gPT0gbGFzdExpbmUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgcmFuZ2UgfTtcbiAgICAgICAgICAgIGxhc3RMaW5lID0gbGluZS5mcm9tO1xuICAgICAgICAgICAgbGV0IGluc2VydCA9IHN0YXRlJDEudG9UZXh0KChieUxpbmUgPyB0ZXh0LmxpbmUoaSsrKS50ZXh0IDogaW5wdXQpICsgc3RhdGUkMS5saW5lQnJlYWspO1xuICAgICAgICAgICAgcmV0dXJuIHsgY2hhbmdlczogeyBmcm9tOiBsaW5lLmZyb20sIGluc2VydCB9LFxuICAgICAgICAgICAgICAgIHJhbmdlOiBzdGF0ZS5FZGl0b3JTZWxlY3Rpb24uY3Vyc29yKHJhbmdlLmZyb20gKyBpbnNlcnQubGVuZ3RoKSB9O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYnlMaW5lKSB7XG4gICAgICAgIGNoYW5nZXMgPSBzdGF0ZSQxLmNoYW5nZUJ5UmFuZ2UocmFuZ2UgPT4ge1xuICAgICAgICAgICAgbGV0IGxpbmUgPSB0ZXh0LmxpbmUoaSsrKTtcbiAgICAgICAgICAgIHJldHVybiB7IGNoYW5nZXM6IHsgZnJvbTogcmFuZ2UuZnJvbSwgdG86IHJhbmdlLnRvLCBpbnNlcnQ6IGxpbmUudGV4dCB9LFxuICAgICAgICAgICAgICAgIHJhbmdlOiBzdGF0ZS5FZGl0b3JTZWxlY3Rpb24uY3Vyc29yKHJhbmdlLmZyb20gKyBsaW5lLmxlbmd0aCkgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjaGFuZ2VzID0gc3RhdGUkMS5yZXBsYWNlU2VsZWN0aW9uKHRleHQpO1xuICAgIH1cbiAgICB2aWV3LmRpc3BhdGNoKGNoYW5nZXMsIHtcbiAgICAgICAgdXNlckV2ZW50OiBcImlucHV0LnBhc3RlXCIsXG4gICAgICAgIHNjcm9sbEludG9WaWV3OiB0cnVlXG4gICAgfSk7XG59XG5vYnNlcnZlcnMuc2Nyb2xsID0gdmlldyA9PiB7XG4gICAgdmlldy5pbnB1dFN0YXRlLmxhc3RTY3JvbGxUb3AgPSB2aWV3LnNjcm9sbERPTS5zY3JvbGxUb3A7XG4gICAgdmlldy5pbnB1dFN0YXRlLmxhc3RTY3JvbGxMZWZ0ID0gdmlldy5zY3JvbGxET00uc2Nyb2xsTGVmdDtcbn07XG5oYW5kbGVycy5rZXlkb3duID0gKHZpZXcsIGV2ZW50KSA9PiB7XG4gICAgdmlldy5pbnB1dFN0YXRlLnNldFNlbGVjdGlvbk9yaWdpbihcInNlbGVjdFwiKTtcbiAgICBpZiAoZXZlbnQua2V5Q29kZSA9PSAyNyAmJiB2aWV3LmlucHV0U3RhdGUudGFiRm9jdXNNb2RlICE9IDApXG4gICAgICAgIHZpZXcuaW5wdXRTdGF0ZS50YWJGb2N1c01vZGUgPSBEYXRlLm5vdygpICsgMjAwMDtcbiAgICByZXR1cm4gZmFsc2U7XG59O1xub2JzZXJ2ZXJzLnRvdWNoc3RhcnQgPSAodmlldywgZSkgPT4ge1xuICAgIHZpZXcuaW5wdXRTdGF0ZS5sYXN0VG91Y2hUaW1lID0gRGF0ZS5ub3coKTtcbiAgICB2aWV3LmlucHV0U3RhdGUuc2V0U2VsZWN0aW9uT3JpZ2luKFwic2VsZWN0LnBvaW50ZXJcIik7XG59O1xub2JzZXJ2ZXJzLnRvdWNobW92ZSA9IHZpZXcgPT4ge1xuICAgIHZpZXcuaW5wdXRTdGF0ZS5zZXRTZWxlY3Rpb25PcmlnaW4oXCJzZWxlY3QucG9pbnRlclwiKTtcbn07XG5oYW5kbGVycy5tb3VzZWRvd24gPSAodmlldywgZXZlbnQpID0+IHtcbiAgICB2aWV3Lm9ic2VydmVyLmZsdXNoKCk7XG4gICAgaWYgKHZpZXcuaW5wdXRTdGF0ZS5sYXN0VG91Y2hUaW1lID4gRGF0ZS5ub3coKSAtIDIwMDApXG4gICAgICAgIHJldHVybiBmYWxzZTsgLy8gSWdub3JlIHRvdWNoIGludGVyYWN0aW9uXG4gICAgbGV0IHN0eWxlID0gbnVsbDtcbiAgICBmb3IgKGxldCBtYWtlU3R5bGUgb2Ygdmlldy5zdGF0ZS5mYWNldChtb3VzZVNlbGVjdGlvblN0eWxlKSkge1xuICAgICAgICBzdHlsZSA9IG1ha2VTdHlsZSh2aWV3LCBldmVudCk7XG4gICAgICAgIGlmIChzdHlsZSlcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoIXN0eWxlICYmIGV2ZW50LmJ1dHRvbiA9PSAwKVxuICAgICAgICBzdHlsZSA9IGJhc2ljTW91c2VTZWxlY3Rpb24odmlldywgZXZlbnQpO1xuICAgIGlmIChzdHlsZSkge1xuICAgICAgICBsZXQgbXVzdEZvY3VzID0gIXZpZXcuaGFzRm9jdXM7XG4gICAgICAgIHZpZXcuaW5wdXRTdGF0ZS5zdGFydE1vdXNlU2VsZWN0aW9uKG5ldyBNb3VzZVNlbGVjdGlvbih2aWV3LCBldmVudCwgc3R5bGUsIG11c3RGb2N1cykpO1xuICAgICAgICBpZiAobXVzdEZvY3VzKVxuICAgICAgICAgICAgdmlldy5vYnNlcnZlci5pZ25vcmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGZvY3VzUHJldmVudFNjcm9sbCh2aWV3LmNvbnRlbnRET00pO1xuICAgICAgICAgICAgICAgIGxldCBhY3RpdmUgPSB2aWV3LnJvb3QuYWN0aXZlRWxlbWVudDtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlICYmICFhY3RpdmUuY29udGFpbnModmlldy5jb250ZW50RE9NKSlcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlLmJsdXIoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBsZXQgbW91c2VTZWwgPSB2aWV3LmlucHV0U3RhdGUubW91c2VTZWxlY3Rpb247XG4gICAgICAgIGlmIChtb3VzZVNlbCkge1xuICAgICAgICAgICAgbW91c2VTZWwuc3RhcnQoZXZlbnQpO1xuICAgICAgICAgICAgcmV0dXJuIG1vdXNlU2VsLmRyYWdnaW5nID09PSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuZnVuY3Rpb24gcmFuZ2VGb3JDbGljayh2aWV3LCBwb3MsIGJpYXMsIHR5cGUpIHtcbiAgICBpZiAodHlwZSA9PSAxKSB7IC8vIFNpbmdsZSBjbGlja1xuICAgICAgICByZXR1cm4gc3RhdGUuRWRpdG9yU2VsZWN0aW9uLmN1cnNvcihwb3MsIGJpYXMpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlID09IDIpIHsgLy8gRG91YmxlIGNsaWNrXG4gICAgICAgIHJldHVybiBncm91cEF0KHZpZXcuc3RhdGUsIHBvcywgYmlhcyk7XG4gICAgfVxuICAgIGVsc2UgeyAvLyBUcmlwbGUgY2xpY2tcbiAgICAgICAgbGV0IHZpc3VhbCA9IExpbmVWaWV3LmZpbmQodmlldy5kb2NWaWV3LCBwb3MpLCBsaW5lID0gdmlldy5zdGF0ZS5kb2MubGluZUF0KHZpc3VhbCA/IHZpc3VhbC5wb3NBdEVuZCA6IHBvcyk7XG4gICAgICAgIGxldCBmcm9tID0gdmlzdWFsID8gdmlzdWFsLnBvc0F0U3RhcnQgOiBsaW5lLmZyb20sIHRvID0gdmlzdWFsID8gdmlzdWFsLnBvc0F0RW5kIDogbGluZS50bztcbiAgICAgICAgaWYgKHRvIDwgdmlldy5zdGF0ZS5kb2MubGVuZ3RoICYmIHRvID09IGxpbmUudG8pXG4gICAgICAgICAgICB0bysrO1xuICAgICAgICByZXR1cm4gc3RhdGUuRWRpdG9yU2VsZWN0aW9uLnJhbmdlKGZyb20sIHRvKTtcbiAgICB9XG59XG5sZXQgaW5zaWRlWSA9ICh5LCByZWN0KSA9PiB5ID49IHJlY3QudG9wICYmIHkgPD0gcmVjdC5ib3R0b207XG5sZXQgaW5zaWRlID0gKHgsIHksIHJlY3QpID0+IGluc2lkZVkoeSwgcmVjdCkgJiYgeCA+PSByZWN0LmxlZnQgJiYgeCA8PSByZWN0LnJpZ2h0O1xuLy8gVHJ5IHRvIGRldGVybWluZSwgZm9yIHRoZSBnaXZlbiBjb29yZGluYXRlcywgYXNzb2NpYXRlZCB3aXRoIHRoZVxuLy8gZ2l2ZW4gcG9zaXRpb24sIHdoZXRoZXIgdGhleSBhcmUgcmVsYXRlZCB0byB0aGUgZWxlbWVudCBiZWZvcmUgb3Jcbi8vIHRoZSBlbGVtZW50IGFmdGVyIHRoZSBwb3NpdGlvbi5cbmZ1bmN0aW9uIGZpbmRQb3NpdGlvblNpZGUodmlldywgcG9zLCB4LCB5KSB7XG4gICAgbGV0IGxpbmUgPSBMaW5lVmlldy5maW5kKHZpZXcuZG9jVmlldywgcG9zKTtcbiAgICBpZiAoIWxpbmUpXG4gICAgICAgIHJldHVybiAxO1xuICAgIGxldCBvZmYgPSBwb3MgLSBsaW5lLnBvc0F0U3RhcnQ7XG4gICAgLy8gTGluZSBib3VuZGFyaWVzIHBvaW50IGludG8gdGhlIGxpbmVcbiAgICBpZiAob2ZmID09IDApXG4gICAgICAgIHJldHVybiAxO1xuICAgIGlmIChvZmYgPT0gbGluZS5sZW5ndGgpXG4gICAgICAgIHJldHVybiAtMTtcbiAgICAvLyBQb3NpdGlvbnMgb24gdG9wIG9mIGFuIGVsZW1lbnQgcG9pbnQgYXQgdGhhdCBlbGVtZW50XG4gICAgbGV0IGJlZm9yZSA9IGxpbmUuY29vcmRzQXQob2ZmLCAtMSk7XG4gICAgaWYgKGJlZm9yZSAmJiBpbnNpZGUoeCwgeSwgYmVmb3JlKSlcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIGxldCBhZnRlciA9IGxpbmUuY29vcmRzQXQob2ZmLCAxKTtcbiAgICBpZiAoYWZ0ZXIgJiYgaW5zaWRlKHgsIHksIGFmdGVyKSlcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgLy8gVGhpcyBpcyBwcm9iYWJseSBhIGxpbmUgd3JhcCBwb2ludC4gUGljayBiZWZvcmUgaWYgdGhlIHBvaW50IGlzXG4gICAgLy8gYmVzaWRlIGl0LlxuICAgIHJldHVybiBiZWZvcmUgJiYgaW5zaWRlWSh5LCBiZWZvcmUpID8gLTEgOiAxO1xufVxuZnVuY3Rpb24gcXVlcnlQb3ModmlldywgZXZlbnQpIHtcbiAgICBsZXQgcG9zID0gdmlldy5wb3NBdENvb3Jkcyh7IHg6IGV2ZW50LmNsaWVudFgsIHk6IGV2ZW50LmNsaWVudFkgfSwgZmFsc2UpO1xuICAgIHJldHVybiB7IHBvcywgYmlhczogZmluZFBvc2l0aW9uU2lkZSh2aWV3LCBwb3MsIGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkpIH07XG59XG5jb25zdCBCYWRNb3VzZURldGFpbCA9IGJyb3dzZXIuaWUgJiYgYnJvd3Nlci5pZV92ZXJzaW9uIDw9IDExO1xubGV0IGxhc3RNb3VzZURvd24gPSBudWxsLCBsYXN0TW91c2VEb3duQ291bnQgPSAwLCBsYXN0TW91c2VEb3duVGltZSA9IDA7XG5mdW5jdGlvbiBnZXRDbGlja1R5cGUoZXZlbnQpIHtcbiAgICBpZiAoIUJhZE1vdXNlRGV0YWlsKVxuICAgICAgICByZXR1cm4gZXZlbnQuZGV0YWlsO1xuICAgIGxldCBsYXN0ID0gbGFzdE1vdXNlRG93biwgbGFzdFRpbWUgPSBsYXN0TW91c2VEb3duVGltZTtcbiAgICBsYXN0TW91c2VEb3duID0gZXZlbnQ7XG4gICAgbGFzdE1vdXNlRG93blRpbWUgPSBEYXRlLm5vdygpO1xuICAgIHJldHVybiBsYXN0TW91c2VEb3duQ291bnQgPSAhbGFzdCB8fCAobGFzdFRpbWUgPiBEYXRlLm5vdygpIC0gNDAwICYmIE1hdGguYWJzKGxhc3QuY2xpZW50WCAtIGV2ZW50LmNsaWVudFgpIDwgMiAmJlxuICAgICAgICBNYXRoLmFicyhsYXN0LmNsaWVudFkgLSBldmVudC5jbGllbnRZKSA8IDIpID8gKGxhc3RNb3VzZURvd25Db3VudCArIDEpICUgMyA6IDE7XG59XG5mdW5jdGlvbiBiYXNpY01vdXNlU2VsZWN0aW9uKHZpZXcsIGV2ZW50KSB7XG4gICAgbGV0IHN0YXJ0ID0gcXVlcnlQb3ModmlldywgZXZlbnQpLCB0eXBlID0gZ2V0Q2xpY2tUeXBlKGV2ZW50KTtcbiAgICBsZXQgc3RhcnRTZWwgPSB2aWV3LnN0YXRlLnNlbGVjdGlvbjtcbiAgICByZXR1cm4ge1xuICAgICAgICB1cGRhdGUodXBkYXRlKSB7XG4gICAgICAgICAgICBpZiAodXBkYXRlLmRvY0NoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICBzdGFydC5wb3MgPSB1cGRhdGUuY2hhbmdlcy5tYXBQb3Moc3RhcnQucG9zKTtcbiAgICAgICAgICAgICAgICBzdGFydFNlbCA9IHN0YXJ0U2VsLm1hcCh1cGRhdGUuY2hhbmdlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGdldChldmVudCwgZXh0ZW5kLCBtdWx0aXBsZSkge1xuICAgICAgICAgICAgbGV0IGN1ciA9IHF1ZXJ5UG9zKHZpZXcsIGV2ZW50KSwgcmVtb3ZlZDtcbiAgICAgICAgICAgIGxldCByYW5nZSA9IHJhbmdlRm9yQ2xpY2sodmlldywgY3VyLnBvcywgY3VyLmJpYXMsIHR5cGUpO1xuICAgICAgICAgICAgaWYgKHN0YXJ0LnBvcyAhPSBjdXIucG9zICYmICFleHRlbmQpIHtcbiAgICAgICAgICAgICAgICBsZXQgc3RhcnRSYW5nZSA9IHJhbmdlRm9yQ2xpY2sodmlldywgc3RhcnQucG9zLCBzdGFydC5iaWFzLCB0eXBlKTtcbiAgICAgICAgICAgICAgICBsZXQgZnJvbSA9IE1hdGgubWluKHN0YXJ0UmFuZ2UuZnJvbSwgcmFuZ2UuZnJvbSksIHRvID0gTWF0aC5tYXgoc3RhcnRSYW5nZS50bywgcmFuZ2UudG8pO1xuICAgICAgICAgICAgICAgIHJhbmdlID0gZnJvbSA8IHJhbmdlLmZyb20gPyBzdGF0ZS5FZGl0b3JTZWxlY3Rpb24ucmFuZ2UoZnJvbSwgdG8pIDogc3RhdGUuRWRpdG9yU2VsZWN0aW9uLnJhbmdlKHRvLCBmcm9tKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChleHRlbmQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXJ0U2VsLnJlcGxhY2VSYW5nZShzdGFydFNlbC5tYWluLmV4dGVuZChyYW5nZS5mcm9tLCByYW5nZS50bykpO1xuICAgICAgICAgICAgZWxzZSBpZiAobXVsdGlwbGUgJiYgdHlwZSA9PSAxICYmIHN0YXJ0U2VsLnJhbmdlcy5sZW5ndGggPiAxICYmIChyZW1vdmVkID0gcmVtb3ZlUmFuZ2VBcm91bmQoc3RhcnRTZWwsIGN1ci5wb3MpKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVtb3ZlZDtcbiAgICAgICAgICAgIGVsc2UgaWYgKG11bHRpcGxlKVxuICAgICAgICAgICAgICAgIHJldHVybiBzdGFydFNlbC5hZGRSYW5nZShyYW5nZSk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlLkVkaXRvclNlbGVjdGlvbi5jcmVhdGUoW3JhbmdlXSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gcmVtb3ZlUmFuZ2VBcm91bmQoc2VsLCBwb3MpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlbC5yYW5nZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IHsgZnJvbSwgdG8gfSA9IHNlbC5yYW5nZXNbaV07XG4gICAgICAgIGlmIChmcm9tIDw9IHBvcyAmJiB0byA+PSBwb3MpXG4gICAgICAgICAgICByZXR1cm4gc3RhdGUuRWRpdG9yU2VsZWN0aW9uLmNyZWF0ZShzZWwucmFuZ2VzLnNsaWNlKDAsIGkpLmNvbmNhdChzZWwucmFuZ2VzLnNsaWNlKGkgKyAxKSksIHNlbC5tYWluSW5kZXggPT0gaSA/IDAgOiBzZWwubWFpbkluZGV4IC0gKHNlbC5tYWluSW5kZXggPiBpID8gMSA6IDApKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5oYW5kbGVycy5kcmFnc3RhcnQgPSAodmlldywgZXZlbnQpID0+IHtcbiAgICBsZXQgeyBzZWxlY3Rpb246IHsgbWFpbjogcmFuZ2UgfSB9ID0gdmlldy5zdGF0ZTtcbiAgICBpZiAoZXZlbnQudGFyZ2V0LmRyYWdnYWJsZSkge1xuICAgICAgICBsZXQgY1ZpZXcgPSB2aWV3LmRvY1ZpZXcubmVhcmVzdChldmVudC50YXJnZXQpO1xuICAgICAgICBpZiAoY1ZpZXcgJiYgY1ZpZXcuaXNXaWRnZXQpIHtcbiAgICAgICAgICAgIGxldCBmcm9tID0gY1ZpZXcucG9zQXRTdGFydCwgdG8gPSBmcm9tICsgY1ZpZXcubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGZyb20gPj0gcmFuZ2UudG8gfHwgdG8gPD0gcmFuZ2UuZnJvbSlcbiAgICAgICAgICAgICAgICByYW5nZSA9IHN0YXRlLkVkaXRvclNlbGVjdGlvbi5yYW5nZShmcm9tLCB0byk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IHsgaW5wdXRTdGF0ZSB9ID0gdmlldztcbiAgICBpZiAoaW5wdXRTdGF0ZS5tb3VzZVNlbGVjdGlvbilcbiAgICAgICAgaW5wdXRTdGF0ZS5tb3VzZVNlbGVjdGlvbi5kcmFnZ2luZyA9IHRydWU7XG4gICAgaW5wdXRTdGF0ZS5kcmFnZ2VkQ29udGVudCA9IHJhbmdlO1xuICAgIGlmIChldmVudC5kYXRhVHJhbnNmZXIpIHtcbiAgICAgICAgZXZlbnQuZGF0YVRyYW5zZmVyLnNldERhdGEoXCJUZXh0XCIsIHZpZXcuc3RhdGUuc2xpY2VEb2MocmFuZ2UuZnJvbSwgcmFuZ2UudG8pKTtcbiAgICAgICAgZXZlbnQuZGF0YVRyYW5zZmVyLmVmZmVjdEFsbG93ZWQgPSBcImNvcHlNb3ZlXCI7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn07XG5oYW5kbGVycy5kcmFnZW5kID0gdmlldyA9PiB7XG4gICAgdmlldy5pbnB1dFN0YXRlLmRyYWdnZWRDb250ZW50ID0gbnVsbDtcbiAgICByZXR1cm4gZmFsc2U7XG59O1xuZnVuY3Rpb24gZHJvcFRleHQodmlldywgZXZlbnQsIHRleHQsIGRpcmVjdCkge1xuICAgIGlmICghdGV4dClcbiAgICAgICAgcmV0dXJuO1xuICAgIGxldCBkcm9wUG9zID0gdmlldy5wb3NBdENvb3Jkcyh7IHg6IGV2ZW50LmNsaWVudFgsIHk6IGV2ZW50LmNsaWVudFkgfSwgZmFsc2UpO1xuICAgIGxldCB7IGRyYWdnZWRDb250ZW50IH0gPSB2aWV3LmlucHV0U3RhdGU7XG4gICAgbGV0IGRlbCA9IGRpcmVjdCAmJiBkcmFnZ2VkQ29udGVudCAmJiBkcmFnTW92ZXNTZWxlY3Rpb24odmlldywgZXZlbnQpXG4gICAgICAgID8geyBmcm9tOiBkcmFnZ2VkQ29udGVudC5mcm9tLCB0bzogZHJhZ2dlZENvbnRlbnQudG8gfSA6IG51bGw7XG4gICAgbGV0IGlucyA9IHsgZnJvbTogZHJvcFBvcywgaW5zZXJ0OiB0ZXh0IH07XG4gICAgbGV0IGNoYW5nZXMgPSB2aWV3LnN0YXRlLmNoYW5nZXMoZGVsID8gW2RlbCwgaW5zXSA6IGlucyk7XG4gICAgdmlldy5mb2N1cygpO1xuICAgIHZpZXcuZGlzcGF0Y2goe1xuICAgICAgICBjaGFuZ2VzLFxuICAgICAgICBzZWxlY3Rpb246IHsgYW5jaG9yOiBjaGFuZ2VzLm1hcFBvcyhkcm9wUG9zLCAtMSksIGhlYWQ6IGNoYW5nZXMubWFwUG9zKGRyb3BQb3MsIDEpIH0sXG4gICAgICAgIHVzZXJFdmVudDogZGVsID8gXCJtb3ZlLmRyb3BcIiA6IFwiaW5wdXQuZHJvcFwiXG4gICAgfSk7XG4gICAgdmlldy5pbnB1dFN0YXRlLmRyYWdnZWRDb250ZW50ID0gbnVsbDtcbn1cbmhhbmRsZXJzLmRyb3AgPSAodmlldywgZXZlbnQpID0+IHtcbiAgICBpZiAoIWV2ZW50LmRhdGFUcmFuc2ZlcilcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmICh2aWV3LnN0YXRlLnJlYWRPbmx5KVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICBsZXQgZmlsZXMgPSBldmVudC5kYXRhVHJhbnNmZXIuZmlsZXM7XG4gICAgaWYgKGZpbGVzICYmIGZpbGVzLmxlbmd0aCkgeyAvLyBGb3IgYSBmaWxlIGRyb3AsIHJlYWQgdGhlIGZpbGUncyB0ZXh0LlxuICAgICAgICBsZXQgdGV4dCA9IEFycmF5KGZpbGVzLmxlbmd0aCksIHJlYWQgPSAwO1xuICAgICAgICBsZXQgZmluaXNoRmlsZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICgrK3JlYWQgPT0gZmlsZXMubGVuZ3RoKVxuICAgICAgICAgICAgICAgIGRyb3BUZXh0KHZpZXcsIGV2ZW50LCB0ZXh0LmZpbHRlcihzID0+IHMgIT0gbnVsbCkuam9pbih2aWV3LnN0YXRlLmxpbmVCcmVhayksIGZhbHNlKTtcbiAgICAgICAgfTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyO1xuICAgICAgICAgICAgcmVhZGVyLm9uZXJyb3IgPSBmaW5pc2hGaWxlO1xuICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIS9bXFx4MDAtXFx4MDhcXHgwZS1cXHgxZl17Mn0vLnRlc3QocmVhZGVyLnJlc3VsdCkpXG4gICAgICAgICAgICAgICAgICAgIHRleHRbaV0gPSByZWFkZXIucmVzdWx0O1xuICAgICAgICAgICAgICAgIGZpbmlzaEZpbGUoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZWFkZXIucmVhZEFzVGV4dChmaWxlc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsZXQgdGV4dCA9IGV2ZW50LmRhdGFUcmFuc2Zlci5nZXREYXRhKFwiVGV4dFwiKTtcbiAgICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgICAgIGRyb3BUZXh0KHZpZXcsIGV2ZW50LCB0ZXh0LCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn07XG5oYW5kbGVycy5wYXN0ZSA9ICh2aWV3LCBldmVudCkgPT4ge1xuICAgIGlmICh2aWV3LnN0YXRlLnJlYWRPbmx5KVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB2aWV3Lm9ic2VydmVyLmZsdXNoKCk7XG4gICAgbGV0IGRhdGEgPSBicm9rZW5DbGlwYm9hcmRBUEkgPyBudWxsIDogZXZlbnQuY2xpcGJvYXJkRGF0YTtcbiAgICBpZiAoZGF0YSkge1xuICAgICAgICBkb1Bhc3RlKHZpZXcsIGRhdGEuZ2V0RGF0YShcInRleHQvcGxhaW5cIikgfHwgZGF0YS5nZXREYXRhKFwidGV4dC91cmktbGlzdFwiKSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY2FwdHVyZVBhc3RlKHZpZXcpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufTtcbmZ1bmN0aW9uIGNhcHR1cmVDb3B5KHZpZXcsIHRleHQpIHtcbiAgICAvLyBUaGUgZXh0cmEgd3JhcHBlciBpcyBzb21laG93IG5lY2Vzc2FyeSBvbiBJRS9FZGdlIHRvIHByZXZlbnQgdGhlXG4gICAgLy8gY29udGVudCBmcm9tIGJlaW5nIG1hbmdsZWQgd2hlbiBpdCBpcyBwdXQgb250byB0aGUgY2xpcGJvYXJkXG4gICAgbGV0IHBhcmVudCA9IHZpZXcuZG9tLnBhcmVudE5vZGU7XG4gICAgaWYgKCFwYXJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICBsZXQgdGFyZ2V0ID0gcGFyZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiKSk7XG4gICAgdGFyZ2V0LnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOiBmaXhlZDsgbGVmdDogLTEwMDAwcHg7IHRvcDogMTBweFwiO1xuICAgIHRhcmdldC52YWx1ZSA9IHRleHQ7XG4gICAgdGFyZ2V0LmZvY3VzKCk7XG4gICAgdGFyZ2V0LnNlbGVjdGlvbkVuZCA9IHRleHQubGVuZ3RoO1xuICAgIHRhcmdldC5zZWxlY3Rpb25TdGFydCA9IDA7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRhcmdldC5yZW1vdmUoKTtcbiAgICAgICAgdmlldy5mb2N1cygpO1xuICAgIH0sIDUwKTtcbn1cbmZ1bmN0aW9uIGNvcGllZFJhbmdlKHN0YXRlKSB7XG4gICAgbGV0IGNvbnRlbnQgPSBbXSwgcmFuZ2VzID0gW10sIGxpbmV3aXNlID0gZmFsc2U7XG4gICAgZm9yIChsZXQgcmFuZ2Ugb2Ygc3RhdGUuc2VsZWN0aW9uLnJhbmdlcylcbiAgICAgICAgaWYgKCFyYW5nZS5lbXB0eSkge1xuICAgICAgICAgICAgY29udGVudC5wdXNoKHN0YXRlLnNsaWNlRG9jKHJhbmdlLmZyb20sIHJhbmdlLnRvKSk7XG4gICAgICAgICAgICByYW5nZXMucHVzaChyYW5nZSk7XG4gICAgICAgIH1cbiAgICBpZiAoIWNvbnRlbnQubGVuZ3RoKSB7XG4gICAgICAgIC8vIE5vdGhpbmcgc2VsZWN0ZWQsIGRvIGEgbGluZS13aXNlIGNvcHlcbiAgICAgICAgbGV0IHVwdG8gPSAtMTtcbiAgICAgICAgZm9yIChsZXQgeyBmcm9tIH0gb2Ygc3RhdGUuc2VsZWN0aW9uLnJhbmdlcykge1xuICAgICAgICAgICAgbGV0IGxpbmUgPSBzdGF0ZS5kb2MubGluZUF0KGZyb20pO1xuICAgICAgICAgICAgaWYgKGxpbmUubnVtYmVyID4gdXB0bykge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQucHVzaChsaW5lLnRleHQpO1xuICAgICAgICAgICAgICAgIHJhbmdlcy5wdXNoKHsgZnJvbTogbGluZS5mcm9tLCB0bzogTWF0aC5taW4oc3RhdGUuZG9jLmxlbmd0aCwgbGluZS50byArIDEpIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXB0byA9IGxpbmUubnVtYmVyO1xuICAgICAgICB9XG4gICAgICAgIGxpbmV3aXNlID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHsgdGV4dDogY29udGVudC5qb2luKHN0YXRlLmxpbmVCcmVhayksIHJhbmdlcywgbGluZXdpc2UgfTtcbn1cbmxldCBsYXN0TGluZXdpc2VDb3B5ID0gbnVsbDtcbmhhbmRsZXJzLmNvcHkgPSBoYW5kbGVycy5jdXQgPSAodmlldywgZXZlbnQpID0+IHtcbiAgICBsZXQgeyB0ZXh0LCByYW5nZXMsIGxpbmV3aXNlIH0gPSBjb3BpZWRSYW5nZSh2aWV3LnN0YXRlKTtcbiAgICBpZiAoIXRleHQgJiYgIWxpbmV3aXNlKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGFzdExpbmV3aXNlQ29weSA9IGxpbmV3aXNlID8gdGV4dCA6IG51bGw7XG4gICAgaWYgKGV2ZW50LnR5cGUgPT0gXCJjdXRcIiAmJiAhdmlldy5zdGF0ZS5yZWFkT25seSlcbiAgICAgICAgdmlldy5kaXNwYXRjaCh7XG4gICAgICAgICAgICBjaGFuZ2VzOiByYW5nZXMsXG4gICAgICAgICAgICBzY3JvbGxJbnRvVmlldzogdHJ1ZSxcbiAgICAgICAgICAgIHVzZXJFdmVudDogXCJkZWxldGUuY3V0XCJcbiAgICAgICAgfSk7XG4gICAgbGV0IGRhdGEgPSBicm9rZW5DbGlwYm9hcmRBUEkgPyBudWxsIDogZXZlbnQuY2xpcGJvYXJkRGF0YTtcbiAgICBpZiAoZGF0YSkge1xuICAgICAgICBkYXRhLmNsZWFyRGF0YSgpO1xuICAgICAgICBkYXRhLnNldERhdGEoXCJ0ZXh0L3BsYWluXCIsIHRleHQpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNhcHR1cmVDb3B5KHZpZXcsIHRleHQpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufTtcbmNvbnN0IGlzRm9jdXNDaGFuZ2UgPSBzdGF0ZS5Bbm5vdGF0aW9uLmRlZmluZSgpO1xuZnVuY3Rpb24gZm9jdXNDaGFuZ2VUcmFuc2FjdGlvbihzdGF0ZSwgZm9jdXMpIHtcbiAgICBsZXQgZWZmZWN0cyA9IFtdO1xuICAgIGZvciAobGV0IGdldEVmZmVjdCBvZiBzdGF0ZS5mYWNldChmb2N1c0NoYW5nZUVmZmVjdCkpIHtcbiAgICAgICAgbGV0IGVmZmVjdCA9IGdldEVmZmVjdChzdGF0ZSwgZm9jdXMpO1xuICAgICAgICBpZiAoZWZmZWN0KVxuICAgICAgICAgICAgZWZmZWN0cy5wdXNoKGVmZmVjdCk7XG4gICAgfVxuICAgIHJldHVybiBlZmZlY3RzID8gc3RhdGUudXBkYXRlKHsgZWZmZWN0cywgYW5ub3RhdGlvbnM6IGlzRm9jdXNDaGFuZ2Uub2YodHJ1ZSkgfSkgOiBudWxsO1xufVxuZnVuY3Rpb24gdXBkYXRlRm9yRm9jdXNDaGFuZ2Uodmlldykge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBsZXQgZm9jdXMgPSB2aWV3Lmhhc0ZvY3VzO1xuICAgICAgICBpZiAoZm9jdXMgIT0gdmlldy5pbnB1dFN0YXRlLm5vdGlmaWVkRm9jdXNlZCkge1xuICAgICAgICAgICAgbGV0IHRyID0gZm9jdXNDaGFuZ2VUcmFuc2FjdGlvbih2aWV3LnN0YXRlLCBmb2N1cyk7XG4gICAgICAgICAgICBpZiAodHIpXG4gICAgICAgICAgICAgICAgdmlldy5kaXNwYXRjaCh0cik7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdmlldy51cGRhdGUoW10pO1xuICAgICAgICB9XG4gICAgfSwgMTApO1xufVxub2JzZXJ2ZXJzLmZvY3VzID0gdmlldyA9PiB7XG4gICAgdmlldy5pbnB1dFN0YXRlLmxhc3RGb2N1c1RpbWUgPSBEYXRlLm5vdygpO1xuICAgIC8vIFdoZW4gZm9jdXNpbmcgcmVzZXQgdGhlIHNjcm9sbCBwb3NpdGlvbiwgbW92ZSBpdCBiYWNrIHRvIHdoZXJlIGl0IHdhc1xuICAgIGlmICghdmlldy5zY3JvbGxET00uc2Nyb2xsVG9wICYmICh2aWV3LmlucHV0U3RhdGUubGFzdFNjcm9sbFRvcCB8fCB2aWV3LmlucHV0U3RhdGUubGFzdFNjcm9sbExlZnQpKSB7XG4gICAgICAgIHZpZXcuc2Nyb2xsRE9NLnNjcm9sbFRvcCA9IHZpZXcuaW5wdXRTdGF0ZS5sYXN0U2Nyb2xsVG9wO1xuICAgICAgICB2aWV3LnNjcm9sbERPTS5zY3JvbGxMZWZ0ID0gdmlldy5pbnB1dFN0YXRlLmxhc3RTY3JvbGxMZWZ0O1xuICAgIH1cbiAgICB1cGRhdGVGb3JGb2N1c0NoYW5nZSh2aWV3KTtcbn07XG5vYnNlcnZlcnMuYmx1ciA9IHZpZXcgPT4ge1xuICAgIHZpZXcub2JzZXJ2ZXIuY2xlYXJTZWxlY3Rpb25SYW5nZSgpO1xuICAgIHVwZGF0ZUZvckZvY3VzQ2hhbmdlKHZpZXcpO1xufTtcbm9ic2VydmVycy5jb21wb3NpdGlvbnN0YXJ0ID0gb2JzZXJ2ZXJzLmNvbXBvc2l0aW9udXBkYXRlID0gdmlldyA9PiB7XG4gICAgaWYgKHZpZXcub2JzZXJ2ZXIuZWRpdENvbnRleHQpXG4gICAgICAgIHJldHVybjsgLy8gQ29tcG9zaXRpb24gaGFuZGxlZCBieSBlZGl0IGNvbnRleHRcbiAgICBpZiAodmlldy5pbnB1dFN0YXRlLmNvbXBvc2l0aW9uRmlyc3RDaGFuZ2UgPT0gbnVsbClcbiAgICAgICAgdmlldy5pbnB1dFN0YXRlLmNvbXBvc2l0aW9uRmlyc3RDaGFuZ2UgPSB0cnVlO1xuICAgIGlmICh2aWV3LmlucHV0U3RhdGUuY29tcG9zaW5nIDwgMCkge1xuICAgICAgICAvLyBGSVhNRSBwb3NzaWJseSBzZXQgYSB0aW1lb3V0IHRvIGNsZWFyIGl0IGFnYWluIG9uIEFuZHJvaWRcbiAgICAgICAgdmlldy5pbnB1dFN0YXRlLmNvbXBvc2luZyA9IDA7XG4gICAgfVxufTtcbm9ic2VydmVycy5jb21wb3NpdGlvbmVuZCA9IHZpZXcgPT4ge1xuICAgIGlmICh2aWV3Lm9ic2VydmVyLmVkaXRDb250ZXh0KVxuICAgICAgICByZXR1cm47IC8vIENvbXBvc2l0aW9uIGhhbmRsZWQgYnkgZWRpdCBjb250ZXh0XG4gICAgdmlldy5pbnB1dFN0YXRlLmNvbXBvc2luZyA9IC0xO1xuICAgIHZpZXcuaW5wdXRTdGF0ZS5jb21wb3NpdGlvbkVuZGVkQXQgPSBEYXRlLm5vdygpO1xuICAgIHZpZXcuaW5wdXRTdGF0ZS5jb21wb3NpdGlvblBlbmRpbmdLZXkgPSB0cnVlO1xuICAgIHZpZXcuaW5wdXRTdGF0ZS5jb21wb3NpdGlvblBlbmRpbmdDaGFuZ2UgPSB2aWV3Lm9ic2VydmVyLnBlbmRpbmdSZWNvcmRzKCkubGVuZ3RoID4gMDtcbiAgICB2aWV3LmlucHV0U3RhdGUuY29tcG9zaXRpb25GaXJzdENoYW5nZSA9IG51bGw7XG4gICAgaWYgKGJyb3dzZXIuY2hyb21lICYmIGJyb3dzZXIuYW5kcm9pZCkge1xuICAgICAgICAvLyBEZWxheSBmbHVzaGluZyBmb3IgYSBiaXQgb24gQW5kcm9pZCBiZWNhdXNlIGl0J2xsIG9mdGVuIGZpcmUgYVxuICAgICAgICAvLyBidW5jaCBvZiBjb250cmFkaWN0b3J5IGNoYW5nZXMgaW4gYSByb3cgYXQgZW5kIG9mIGNvbXBvc2l0b25cbiAgICAgICAgdmlldy5vYnNlcnZlci5mbHVzaFNvb24oKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodmlldy5pbnB1dFN0YXRlLmNvbXBvc2l0aW9uUGVuZGluZ0NoYW5nZSkge1xuICAgICAgICAvLyBJZiB3ZSBmb3VuZCBwZW5kaW5nIHJlY29yZHMsIHNjaGVkdWxlIGEgZmx1c2guXG4gICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gdmlldy5vYnNlcnZlci5mbHVzaCgpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIE90aGVyd2lzZSwgbWFrZSBzdXJlIHRoYXQsIGlmIG5vIGNoYW5nZXMgY29tZSBpbiBzb29uLCB0aGVcbiAgICAgICAgLy8gY29tcG9zaXRpb24gdmlldyBpcyBjbGVhcmVkLlxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGlmICh2aWV3LmlucHV0U3RhdGUuY29tcG9zaW5nIDwgMCAmJiB2aWV3LmRvY1ZpZXcuaGFzQ29tcG9zaXRpb24pXG4gICAgICAgICAgICAgICAgdmlldy51cGRhdGUoW10pO1xuICAgICAgICB9LCA1MCk7XG4gICAgfVxufTtcbm9ic2VydmVycy5jb250ZXh0bWVudSA9IHZpZXcgPT4ge1xuICAgIHZpZXcuaW5wdXRTdGF0ZS5sYXN0Q29udGV4dE1lbnUgPSBEYXRlLm5vdygpO1xufTtcbmhhbmRsZXJzLmJlZm9yZWlucHV0ID0gKHZpZXcsIGV2ZW50KSA9PiB7XG4gICAgdmFyIF9hO1xuICAgIC8vIEJlY2F1c2UgQ2hyb21lIEFuZHJvaWQgZG9lc24ndCBmaXJlIHVzZWZ1bCBrZXkgZXZlbnRzLCB1c2VcbiAgICAvLyBiZWZvcmVpbnB1dCB0byBkZXRlY3QgYmFja3NwYWNlIChhbmQgcG9zc2libHkgZW50ZXIgYW5kIGRlbGV0ZSxcbiAgICAvLyBidXQgdGhvc2UgdXN1YWxseSBkb24ndCBldmVuIHNlZW0gdG8gZmlyZSBiZWZvcmVpbnB1dCBldmVudHMgYXRcbiAgICAvLyB0aGUgbW9tZW50KSBhbmQgZmFrZSBhIGtleSBldmVudCBmb3IgaXQuXG4gICAgLy9cbiAgICAvLyAocHJldmVudERlZmF1bHQgb24gYmVmb3JlaW5wdXQsIHRob3VnaCBzdXBwb3J0ZWQgaW4gdGhlIHNwZWMsXG4gICAgLy8gc2VlbXMgdG8gZG8gbm90aGluZyBhdCBhbGwgb24gQ2hyb21lKS5cbiAgICBsZXQgcGVuZGluZztcbiAgICBpZiAoYnJvd3Nlci5jaHJvbWUgJiYgYnJvd3Nlci5hbmRyb2lkICYmIChwZW5kaW5nID0gUGVuZGluZ0tleXMuZmluZChrZXkgPT4ga2V5LmlucHV0VHlwZSA9PSBldmVudC5pbnB1dFR5cGUpKSkge1xuICAgICAgICB2aWV3Lm9ic2VydmVyLmRlbGF5QW5kcm9pZEtleShwZW5kaW5nLmtleSwgcGVuZGluZy5rZXlDb2RlKTtcbiAgICAgICAgaWYgKHBlbmRpbmcua2V5ID09IFwiQmFja3NwYWNlXCIgfHwgcGVuZGluZy5rZXkgPT0gXCJEZWxldGVcIikge1xuICAgICAgICAgICAgbGV0IHN0YXJ0Vmlld0hlaWdodCA9ICgoX2EgPSB3aW5kb3cudmlzdWFsVmlld3BvcnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5oZWlnaHQpIHx8IDA7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgLy8gQmFja3NwYWNpbmcgbmVhciB1bmVkaXRhYmxlIG5vZGVzIG9uIENocm9tZSBBbmRyb2lkIHNvbWV0aW1lc1xuICAgICAgICAgICAgICAgIC8vIGNsb3NlcyB0aGUgdmlydHVhbCBrZXlib2FyZC4gVGhpcyB0cmllcyB0byBjcnVkZWx5IGRldGVjdFxuICAgICAgICAgICAgICAgIC8vIHRoYXQgYW5kIHJlZm9jdXMgdG8gZ2V0IGl0IGJhY2suXG4gICAgICAgICAgICAgICAgaWYgKCgoKF9hID0gd2luZG93LnZpc3VhbFZpZXdwb3J0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaGVpZ2h0KSB8fCAwKSA+IHN0YXJ0Vmlld0hlaWdodCArIDEwICYmIHZpZXcuaGFzRm9jdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmlldy5jb250ZW50RE9NLmJsdXIoKTtcbiAgICAgICAgICAgICAgICAgICAgdmlldy5mb2N1cygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGJyb3dzZXIuaW9zICYmIGV2ZW50LmlucHV0VHlwZSA9PSBcImRlbGV0ZUNvbnRlbnRGb3J3YXJkXCIpIHtcbiAgICAgICAgLy8gRm9yIHNvbWUgcmVhc29uLCBET00gY2hhbmdlcyAoYW5kIGJlZm9yZWlucHV0KSBoYXBwZW4gX2JlZm9yZV9cbiAgICAgICAgLy8gdGhlIGtleSBldmVudCBmb3IgY3RybC1kIG9uIGlPUyB3aGVuIHVzaW5nIGFuIGV4dGVybmFsXG4gICAgICAgIC8vIGtleWJvYXJkLlxuICAgICAgICB2aWV3Lm9ic2VydmVyLmZsdXNoU29vbigpO1xuICAgIH1cbiAgICAvLyBTYWZhcmkgd2lsbCBvY2Nhc2lvbmFsbHkgZm9yZ2V0IHRvIGZpcmUgY29tcG9zaXRpb25lbmQgYXQgdGhlIGVuZCBvZiBhIGRlYWQta2V5IGNvbXBvc2l0aW9uXG4gICAgaWYgKGJyb3dzZXIuc2FmYXJpICYmIGV2ZW50LmlucHV0VHlwZSA9PSBcImluc2VydFRleHRcIiAmJiB2aWV3LmlucHV0U3RhdGUuY29tcG9zaW5nID49IDApIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiBvYnNlcnZlcnMuY29tcG9zaXRpb25lbmQodmlldywgZXZlbnQpLCAyMCk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn07XG5jb25zdCBhcHBsaWVkRmlyZWZveEhhY2sgPSBuZXcgU2V0O1xuLy8gSW4gRmlyZWZveCwgd2hlbiBjdXQvY29weSBoYW5kbGVycyBhcmUgYWRkZWQgdG8gdGhlIGRvY3VtZW50LCB0aGF0XG4vLyBzb21laG93IGF2b2lkcyBhIGJ1ZyB3aGVyZSB0aG9zZSBldmVudHMgYXJlbid0IGZpcmVkIHdoZW4gdGhlXG4vLyBzZWxlY3Rpb24gaXMgZW1wdHkuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vY29kZW1pcnJvci9kZXYvaXNzdWVzLzEwODJcbi8vIGFuZCBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD05OTU5NjFcbmZ1bmN0aW9uIGZpcmVmb3hDb3B5Q3V0SGFjayhkb2MpIHtcbiAgICBpZiAoIWFwcGxpZWRGaXJlZm94SGFjay5oYXMoZG9jKSkge1xuICAgICAgICBhcHBsaWVkRmlyZWZveEhhY2suYWRkKGRvYyk7XG4gICAgICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKFwiY29weVwiLCAoKSA9PiB7IH0pO1xuICAgICAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcihcImN1dFwiLCAoKSA9PiB7IH0pO1xuICAgIH1cbn1cblxuY29uc3Qgd3JhcHBpbmdXaGl0ZVNwYWNlID0gW1wicHJlLXdyYXBcIiwgXCJub3JtYWxcIiwgXCJwcmUtbGluZVwiLCBcImJyZWFrLXNwYWNlc1wiXTtcbmNsYXNzIEhlaWdodE9yYWNsZSB7XG4gICAgY29uc3RydWN0b3IobGluZVdyYXBwaW5nKSB7XG4gICAgICAgIHRoaXMubGluZVdyYXBwaW5nID0gbGluZVdyYXBwaW5nO1xuICAgICAgICB0aGlzLmRvYyA9IHN0YXRlLlRleHQuZW1wdHk7XG4gICAgICAgIHRoaXMuaGVpZ2h0U2FtcGxlcyA9IHt9O1xuICAgICAgICB0aGlzLmxpbmVIZWlnaHQgPSAxNDsgLy8gVGhlIGhlaWdodCBvZiBhbiBlbnRpcmUgbGluZSAobGluZS1oZWlnaHQpXG4gICAgICAgIHRoaXMuY2hhcldpZHRoID0gNztcbiAgICAgICAgdGhpcy50ZXh0SGVpZ2h0ID0gMTQ7IC8vIFRoZSBoZWlnaHQgb2YgdGhlIGFjdHVhbCBmb250IChmb250LXNpemUpXG4gICAgICAgIHRoaXMubGluZUxlbmd0aCA9IDMwO1xuICAgICAgICAvLyBVc2VkIHRvIHRyYWNrLCBkdXJpbmcgdXBkYXRlSGVpZ2h0LCBpZiBhbnkgYWN0dWFsIGhlaWdodHMgY2hhbmdlZFxuICAgICAgICB0aGlzLmhlaWdodENoYW5nZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgaGVpZ2h0Rm9yR2FwKGZyb20sIHRvKSB7XG4gICAgICAgIGxldCBsaW5lcyA9IHRoaXMuZG9jLmxpbmVBdCh0bykubnVtYmVyIC0gdGhpcy5kb2MubGluZUF0KGZyb20pLm51bWJlciArIDE7XG4gICAgICAgIGlmICh0aGlzLmxpbmVXcmFwcGluZylcbiAgICAgICAgICAgIGxpbmVzICs9IE1hdGgubWF4KDAsIE1hdGguY2VpbCgoKHRvIC0gZnJvbSkgLSAobGluZXMgKiB0aGlzLmxpbmVMZW5ndGggKiAwLjUpKSAvIHRoaXMubGluZUxlbmd0aCkpO1xuICAgICAgICByZXR1cm4gdGhpcy5saW5lSGVpZ2h0ICogbGluZXM7XG4gICAgfVxuICAgIGhlaWdodEZvckxpbmUobGVuZ3RoKSB7XG4gICAgICAgIGlmICghdGhpcy5saW5lV3JhcHBpbmcpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saW5lSGVpZ2h0O1xuICAgICAgICBsZXQgbGluZXMgPSAxICsgTWF0aC5tYXgoMCwgTWF0aC5jZWlsKChsZW5ndGggLSB0aGlzLmxpbmVMZW5ndGgpIC8gKHRoaXMubGluZUxlbmd0aCAtIDUpKSk7XG4gICAgICAgIHJldHVybiBsaW5lcyAqIHRoaXMubGluZUhlaWdodDtcbiAgICB9XG4gICAgc2V0RG9jKGRvYykgeyB0aGlzLmRvYyA9IGRvYzsgcmV0dXJuIHRoaXM7IH1cbiAgICBtdXN0UmVmcmVzaEZvcldyYXBwaW5nKHdoaXRlU3BhY2UpIHtcbiAgICAgICAgcmV0dXJuICh3cmFwcGluZ1doaXRlU3BhY2UuaW5kZXhPZih3aGl0ZVNwYWNlKSA+IC0xKSAhPSB0aGlzLmxpbmVXcmFwcGluZztcbiAgICB9XG4gICAgbXVzdFJlZnJlc2hGb3JIZWlnaHRzKGxpbmVIZWlnaHRzKSB7XG4gICAgICAgIGxldCBuZXdIZWlnaHQgPSBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lSGVpZ2h0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGggPSBsaW5lSGVpZ2h0c1tpXTtcbiAgICAgICAgICAgIGlmIChoIDwgMCkge1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCF0aGlzLmhlaWdodFNhbXBsZXNbTWF0aC5mbG9vcihoICogMTApXSkgeyAvLyBSb3VuZCB0byAuMSBwaXhlbHNcbiAgICAgICAgICAgICAgICBuZXdIZWlnaHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuaGVpZ2h0U2FtcGxlc1tNYXRoLmZsb29yKGggKiAxMCldID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3SGVpZ2h0O1xuICAgIH1cbiAgICByZWZyZXNoKHdoaXRlU3BhY2UsIGxpbmVIZWlnaHQsIGNoYXJXaWR0aCwgdGV4dEhlaWdodCwgbGluZUxlbmd0aCwga25vd25IZWlnaHRzKSB7XG4gICAgICAgIGxldCBsaW5lV3JhcHBpbmcgPSB3cmFwcGluZ1doaXRlU3BhY2UuaW5kZXhPZih3aGl0ZVNwYWNlKSA+IC0xO1xuICAgICAgICBsZXQgY2hhbmdlZCA9IE1hdGgucm91bmQobGluZUhlaWdodCkgIT0gTWF0aC5yb3VuZCh0aGlzLmxpbmVIZWlnaHQpIHx8IHRoaXMubGluZVdyYXBwaW5nICE9IGxpbmVXcmFwcGluZztcbiAgICAgICAgdGhpcy5saW5lV3JhcHBpbmcgPSBsaW5lV3JhcHBpbmc7XG4gICAgICAgIHRoaXMubGluZUhlaWdodCA9IGxpbmVIZWlnaHQ7XG4gICAgICAgIHRoaXMuY2hhcldpZHRoID0gY2hhcldpZHRoO1xuICAgICAgICB0aGlzLnRleHRIZWlnaHQgPSB0ZXh0SGVpZ2h0O1xuICAgICAgICB0aGlzLmxpbmVMZW5ndGggPSBsaW5lTGVuZ3RoO1xuICAgICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICAgICAgdGhpcy5oZWlnaHRTYW1wbGVzID0ge307XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtub3duSGVpZ2h0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBoID0ga25vd25IZWlnaHRzW2ldO1xuICAgICAgICAgICAgICAgIGlmIChoIDwgMClcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oZWlnaHRTYW1wbGVzW01hdGguZmxvb3IoaCAqIDEwKV0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGFuZ2VkO1xuICAgIH1cbn1cbi8vIFRoaXMgb2JqZWN0IGlzIHVzZWQgYnkgYHVwZGF0ZUhlaWdodGAgdG8gbWFrZSBET00gbWVhc3VyZW1lbnRzXG4vLyBhcnJpdmUgYXQgdGhlIHJpZ2h0IG5pZGVzLiBUaGUgYGhlaWdodHNgIGFycmF5IGlzIGEgc2VxdWVuY2Ugb2Zcbi8vIGJsb2NrIGhlaWdodHMsIHN0YXJ0aW5nIGZyb20gcG9zaXRpb24gYGZyb21gLlxuY2xhc3MgTWVhc3VyZWRIZWlnaHRzIHtcbiAgICBjb25zdHJ1Y3Rvcihmcm9tLCBoZWlnaHRzKSB7XG4gICAgICAgIHRoaXMuZnJvbSA9IGZyb207XG4gICAgICAgIHRoaXMuaGVpZ2h0cyA9IGhlaWdodHM7XG4gICAgICAgIHRoaXMuaW5kZXggPSAwO1xuICAgIH1cbiAgICBnZXQgbW9yZSgpIHsgcmV0dXJuIHRoaXMuaW5kZXggPCB0aGlzLmhlaWdodHMubGVuZ3RoOyB9XG59XG4vKipcblJlY29yZCB1c2VkIHRvIHJlcHJlc2VudCBpbmZvcm1hdGlvbiBhYm91dCBhIGJsb2NrLWxldmVsIGVsZW1lbnRcbmluIHRoZSBlZGl0b3Igdmlldy5cbiovXG5jbGFzcyBCbG9ja0luZm8ge1xuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgVGhlIHN0YXJ0IG9mIHRoZSBlbGVtZW50IGluIHRoZSBkb2N1bWVudC5cbiAgICAqL1xuICAgIGZyb20sIFxuICAgIC8qKlxuICAgIFRoZSBsZW5ndGggb2YgdGhlIGVsZW1lbnQuXG4gICAgKi9cbiAgICBsZW5ndGgsIFxuICAgIC8qKlxuICAgIFRoZSB0b3AgcG9zaXRpb24gb2YgdGhlIGVsZW1lbnQgKHJlbGF0aXZlIHRvIHRoZSB0b3Agb2YgdGhlXG4gICAgZG9jdW1lbnQpLlxuICAgICovXG4gICAgdG9wLCBcbiAgICAvKipcbiAgICBJdHMgaGVpZ2h0LlxuICAgICovXG4gICAgaGVpZ2h0LCBcbiAgICAvKipcbiAgICBAaW50ZXJuYWwgV2VpcmQgcGFja2VkIGZpZWxkIHRoYXQgaG9sZHMgYW4gYXJyYXkgb2YgY2hpbGRyZW5cbiAgICBmb3IgY29tcG9zaXRlIGJsb2NrcywgYSBkZWNvcmF0aW9uIGZvciBibG9jayB3aWRnZXRzLCBhbmQgYVxuICAgIG51bWJlciBpbmRpY2F0aW5nIHRoZSBhbW91bnQgb2Ygd2lkZ2V0LWNyZWF0ZSBsaW5lIGJyZWFrcyBmb3JcbiAgICB0ZXh0IGJsb2Nrcy5cbiAgICAqL1xuICAgIF9jb250ZW50KSB7XG4gICAgICAgIHRoaXMuZnJvbSA9IGZyb207XG4gICAgICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoO1xuICAgICAgICB0aGlzLnRvcCA9IHRvcDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIHRoaXMuX2NvbnRlbnQgPSBfY29udGVudDtcbiAgICB9XG4gICAgLyoqXG4gICAgVGhlIHR5cGUgb2YgZWxlbWVudCB0aGlzIGlzLiBXaGVuIHF1ZXJ5aW5nIGxpbmVzLCB0aGlzIG1heSBiZVxuICAgIGFuIGFycmF5IG9mIGFsbCB0aGUgYmxvY2tzIHRoYXQgbWFrZSB1cCB0aGUgbGluZS5cbiAgICAqL1xuICAgIGdldCB0eXBlKCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHRoaXMuX2NvbnRlbnQgPT0gXCJudW1iZXJcIiA/IGV4cG9ydHMuQmxvY2tUeXBlLlRleHQgOlxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheSh0aGlzLl9jb250ZW50KSA/IHRoaXMuX2NvbnRlbnQgOiB0aGlzLl9jb250ZW50LnR5cGU7XG4gICAgfVxuICAgIC8qKlxuICAgIFRoZSBlbmQgb2YgdGhlIGVsZW1lbnQgYXMgYSBkb2N1bWVudCBwb3NpdGlvbi5cbiAgICAqL1xuICAgIGdldCB0bygpIHsgcmV0dXJuIHRoaXMuZnJvbSArIHRoaXMubGVuZ3RoOyB9XG4gICAgLyoqXG4gICAgVGhlIGJvdHRvbSBwb3NpdGlvbiBvZiB0aGUgZWxlbWVudC5cbiAgICAqL1xuICAgIGdldCBib3R0b20oKSB7IHJldHVybiB0aGlzLnRvcCArIHRoaXMuaGVpZ2h0OyB9XG4gICAgLyoqXG4gICAgSWYgdGhpcyBpcyBhIHdpZGdldCBibG9jaywgdGhpcyB3aWxsIHJldHVybiB0aGUgd2lkZ2V0XG4gICAgYXNzb2NpYXRlZCB3aXRoIGl0LlxuICAgICovXG4gICAgZ2V0IHdpZGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQgaW5zdGFuY2VvZiBQb2ludERlY29yYXRpb24gPyB0aGlzLl9jb250ZW50LndpZGdldCA6IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgIElmIHRoaXMgaXMgYSB0ZXh0YmxvY2ssIHRoaXMgaG9sZHMgdGhlIG51bWJlciBvZiBsaW5lIGJyZWFrc1xuICAgIHRoYXQgYXBwZWFyIGluIHdpZGdldHMgaW5zaWRlIHRoZSBibG9jay5cbiAgICAqL1xuICAgIGdldCB3aWRnZXRMaW5lQnJlYWtzKCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHRoaXMuX2NvbnRlbnQgPT0gXCJudW1iZXJcIiA/IHRoaXMuX2NvbnRlbnQgOiAwO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGpvaW4ob3RoZXIpIHtcbiAgICAgICAgbGV0IGNvbnRlbnQgPSAoQXJyYXkuaXNBcnJheSh0aGlzLl9jb250ZW50KSA/IHRoaXMuX2NvbnRlbnQgOiBbdGhpc10pXG4gICAgICAgICAgICAuY29uY2F0KEFycmF5LmlzQXJyYXkob3RoZXIuX2NvbnRlbnQpID8gb3RoZXIuX2NvbnRlbnQgOiBbb3RoZXJdKTtcbiAgICAgICAgcmV0dXJuIG5ldyBCbG9ja0luZm8odGhpcy5mcm9tLCB0aGlzLmxlbmd0aCArIG90aGVyLmxlbmd0aCwgdGhpcy50b3AsIHRoaXMuaGVpZ2h0ICsgb3RoZXIuaGVpZ2h0LCBjb250ZW50KTtcbiAgICB9XG59XG52YXIgUXVlcnlUeXBlO1xuKGZ1bmN0aW9uIChRdWVyeVR5cGUpIHtcbiAgICBRdWVyeVR5cGVbUXVlcnlUeXBlW1wiQnlQb3NcIl0gPSAwXSA9IFwiQnlQb3NcIjtcbiAgICBRdWVyeVR5cGVbUXVlcnlUeXBlW1wiQnlIZWlnaHRcIl0gPSAxXSA9IFwiQnlIZWlnaHRcIjtcbiAgICBRdWVyeVR5cGVbUXVlcnlUeXBlW1wiQnlQb3NOb0hlaWdodFwiXSA9IDJdID0gXCJCeVBvc05vSGVpZ2h0XCI7XG59KShRdWVyeVR5cGUgfHwgKFF1ZXJ5VHlwZSA9IHt9KSk7XG5jb25zdCBFcHNpbG9uID0gMWUtMztcbmNsYXNzIEhlaWdodE1hcCB7XG4gICAgY29uc3RydWN0b3IobGVuZ3RoLCAvLyBUaGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgY292ZXJlZFxuICAgIGhlaWdodCwgLy8gSGVpZ2h0IG9mIHRoaXMgcGFydCBvZiB0aGUgZG9jdW1lbnRcbiAgICBmbGFncyA9IDIgLyogRmxhZy5PdXRkYXRlZCAqLykge1xuICAgICAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIHRoaXMuZmxhZ3MgPSBmbGFncztcbiAgICB9XG4gICAgZ2V0IG91dGRhdGVkKCkgeyByZXR1cm4gKHRoaXMuZmxhZ3MgJiAyIC8qIEZsYWcuT3V0ZGF0ZWQgKi8pID4gMDsgfVxuICAgIHNldCBvdXRkYXRlZCh2YWx1ZSkgeyB0aGlzLmZsYWdzID0gKHZhbHVlID8gMiAvKiBGbGFnLk91dGRhdGVkICovIDogMCkgfCAodGhpcy5mbGFncyAmIH4yIC8qIEZsYWcuT3V0ZGF0ZWQgKi8pOyB9XG4gICAgc2V0SGVpZ2h0KG9yYWNsZSwgaGVpZ2h0KSB7XG4gICAgICAgIGlmICh0aGlzLmhlaWdodCAhPSBoZWlnaHQpIHtcbiAgICAgICAgICAgIGlmIChNYXRoLmFicyh0aGlzLmhlaWdodCAtIGhlaWdodCkgPiBFcHNpbG9uKVxuICAgICAgICAgICAgICAgIG9yYWNsZS5oZWlnaHRDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEJhc2UgY2FzZSBpcyB0byByZXBsYWNlIGEgbGVhZiBub2RlLCB3aGljaCBzaW1wbHkgYnVpbGRzIGEgdHJlZVxuICAgIC8vIGZyb20gdGhlIG5ldyBub2RlcyBhbmQgcmV0dXJucyB0aGF0IChIZWlnaHRNYXBCcmFuY2ggYW5kXG4gICAgLy8gSGVpZ2h0TWFwR2FwIG92ZXJyaWRlIHRoaXMgdG8gYWN0dWFsbHkgdXNlIGZyb20vdG8pXG4gICAgcmVwbGFjZShfZnJvbSwgX3RvLCBub2Rlcykge1xuICAgICAgICByZXR1cm4gSGVpZ2h0TWFwLm9mKG5vZGVzKTtcbiAgICB9XG4gICAgLy8gQWdhaW4sIHRoZXNlIGFyZSBiYXNlIGNhc2VzLCBhbmQgYXJlIG92ZXJyaWRkZW4gZm9yIGJyYW5jaCBhbmQgZ2FwIG5vZGVzLlxuICAgIGRlY29tcG9zZUxlZnQoX3RvLCByZXN1bHQpIHsgcmVzdWx0LnB1c2godGhpcyk7IH1cbiAgICBkZWNvbXBvc2VSaWdodChfZnJvbSwgcmVzdWx0KSB7IHJlc3VsdC5wdXNoKHRoaXMpOyB9XG4gICAgYXBwbHlDaGFuZ2VzKGRlY29yYXRpb25zLCBvbGREb2MsIG9yYWNsZSwgY2hhbmdlcykge1xuICAgICAgICBsZXQgbWUgPSB0aGlzLCBkb2MgPSBvcmFjbGUuZG9jO1xuICAgICAgICBmb3IgKGxldCBpID0gY2hhbmdlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgbGV0IHsgZnJvbUEsIHRvQSwgZnJvbUIsIHRvQiB9ID0gY2hhbmdlc1tpXTtcbiAgICAgICAgICAgIGxldCBzdGFydCA9IG1lLmxpbmVBdChmcm9tQSwgUXVlcnlUeXBlLkJ5UG9zTm9IZWlnaHQsIG9yYWNsZS5zZXREb2Mob2xkRG9jKSwgMCwgMCk7XG4gICAgICAgICAgICBsZXQgZW5kID0gc3RhcnQudG8gPj0gdG9BID8gc3RhcnQgOiBtZS5saW5lQXQodG9BLCBRdWVyeVR5cGUuQnlQb3NOb0hlaWdodCwgb3JhY2xlLCAwLCAwKTtcbiAgICAgICAgICAgIHRvQiArPSBlbmQudG8gLSB0b0E7XG4gICAgICAgICAgICB0b0EgPSBlbmQudG87XG4gICAgICAgICAgICB3aGlsZSAoaSA+IDAgJiYgc3RhcnQuZnJvbSA8PSBjaGFuZ2VzW2kgLSAxXS50b0EpIHtcbiAgICAgICAgICAgICAgICBmcm9tQSA9IGNoYW5nZXNbaSAtIDFdLmZyb21BO1xuICAgICAgICAgICAgICAgIGZyb21CID0gY2hhbmdlc1tpIC0gMV0uZnJvbUI7XG4gICAgICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgICAgIGlmIChmcm9tQSA8IHN0YXJ0LmZyb20pXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gbWUubGluZUF0KGZyb21BLCBRdWVyeVR5cGUuQnlQb3NOb0hlaWdodCwgb3JhY2xlLCAwLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZyb21CICs9IHN0YXJ0LmZyb20gLSBmcm9tQTtcbiAgICAgICAgICAgIGZyb21BID0gc3RhcnQuZnJvbTtcbiAgICAgICAgICAgIGxldCBub2RlcyA9IE5vZGVCdWlsZGVyLmJ1aWxkKG9yYWNsZS5zZXREb2MoZG9jKSwgZGVjb3JhdGlvbnMsIGZyb21CLCB0b0IpO1xuICAgICAgICAgICAgbWUgPSBtZS5yZXBsYWNlKGZyb21BLCB0b0EsIG5vZGVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWUudXBkYXRlSGVpZ2h0KG9yYWNsZSwgMCk7XG4gICAgfVxuICAgIHN0YXRpYyBlbXB0eSgpIHsgcmV0dXJuIG5ldyBIZWlnaHRNYXBUZXh0KDAsIDApOyB9XG4gICAgLy8gbm9kZXMgdXNlcyBudWxsIHZhbHVlcyB0byBpbmRpY2F0ZSB0aGUgcG9zaXRpb24gb2YgbGluZSBicmVha3MuXG4gICAgLy8gVGhlcmUgYXJlIG5ldmVyIGxpbmUgYnJlYWtzIGF0IHRoZSBzdGFydCBvciBlbmQgb2YgdGhlIGFycmF5LCBvclxuICAgIC8vIHR3byBsaW5lIGJyZWFrcyBuZXh0IHRvIGVhY2ggb3RoZXIsIGFuZCB0aGUgYXJyYXkgaXNuJ3QgYWxsb3dlZFxuICAgIC8vIHRvIGJlIGVtcHR5IChzYW1lIHJlc3RyaWN0aW9ucyBhcyByZXR1cm4gdmFsdWUgZnJvbSB0aGUgYnVpbGRlcikuXG4gICAgc3RhdGljIG9mKG5vZGVzKSB7XG4gICAgICAgIGlmIChub2Rlcy5sZW5ndGggPT0gMSlcbiAgICAgICAgICAgIHJldHVybiBub2Rlc1swXTtcbiAgICAgICAgbGV0IGkgPSAwLCBqID0gbm9kZXMubGVuZ3RoLCBiZWZvcmUgPSAwLCBhZnRlciA9IDA7XG4gICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgIGlmIChpID09IGopIHtcbiAgICAgICAgICAgICAgICBpZiAoYmVmb3JlID4gYWZ0ZXIgKiAyKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzcGxpdCA9IG5vZGVzW2kgLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNwbGl0LmJyZWFrKVxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXMuc3BsaWNlKC0taSwgMSwgc3BsaXQubGVmdCwgbnVsbCwgc3BsaXQucmlnaHQpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBub2Rlcy5zcGxpY2UoLS1pLCAxLCBzcGxpdC5sZWZ0LCBzcGxpdC5yaWdodCk7XG4gICAgICAgICAgICAgICAgICAgIGogKz0gMSArIHNwbGl0LmJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBiZWZvcmUgLT0gc3BsaXQuc2l6ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYWZ0ZXIgPiBiZWZvcmUgKiAyKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzcGxpdCA9IG5vZGVzW2pdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3BsaXQuYnJlYWspXG4gICAgICAgICAgICAgICAgICAgICAgICBub2Rlcy5zcGxpY2UoaiwgMSwgc3BsaXQubGVmdCwgbnVsbCwgc3BsaXQucmlnaHQpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBub2Rlcy5zcGxpY2UoaiwgMSwgc3BsaXQubGVmdCwgc3BsaXQucmlnaHQpO1xuICAgICAgICAgICAgICAgICAgICBqICs9IDIgKyBzcGxpdC5icmVhaztcbiAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgLT0gc3BsaXQuc2l6ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGJlZm9yZSA8IGFmdGVyKSB7XG4gICAgICAgICAgICAgICAgbGV0IG5leHQgPSBub2Rlc1tpKytdO1xuICAgICAgICAgICAgICAgIGlmIChuZXh0KVxuICAgICAgICAgICAgICAgICAgICBiZWZvcmUgKz0gbmV4dC5zaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IG5leHQgPSBub2Rlc1stLWpdO1xuICAgICAgICAgICAgICAgIGlmIChuZXh0KVxuICAgICAgICAgICAgICAgICAgICBhZnRlciArPSBuZXh0LnNpemU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGJyayA9IDA7XG4gICAgICAgIGlmIChub2Rlc1tpIC0gMV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgYnJrID0gMTtcbiAgICAgICAgICAgIGktLTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChub2Rlc1tpXSA9PSBudWxsKSB7XG4gICAgICAgICAgICBicmsgPSAxO1xuICAgICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgSGVpZ2h0TWFwQnJhbmNoKEhlaWdodE1hcC5vZihub2Rlcy5zbGljZSgwLCBpKSksIGJyaywgSGVpZ2h0TWFwLm9mKG5vZGVzLnNsaWNlKGopKSk7XG4gICAgfVxufVxuSGVpZ2h0TWFwLnByb3RvdHlwZS5zaXplID0gMTtcbmNsYXNzIEhlaWdodE1hcEJsb2NrIGV4dGVuZHMgSGVpZ2h0TWFwIHtcbiAgICBjb25zdHJ1Y3RvcihsZW5ndGgsIGhlaWdodCwgZGVjbykge1xuICAgICAgICBzdXBlcihsZW5ndGgsIGhlaWdodCk7XG4gICAgICAgIHRoaXMuZGVjbyA9IGRlY287XG4gICAgfVxuICAgIGJsb2NrQXQoX2hlaWdodCwgX29yYWNsZSwgdG9wLCBvZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBCbG9ja0luZm8ob2Zmc2V0LCB0aGlzLmxlbmd0aCwgdG9wLCB0aGlzLmhlaWdodCwgdGhpcy5kZWNvIHx8IDApO1xuICAgIH1cbiAgICBsaW5lQXQoX3ZhbHVlLCBfdHlwZSwgb3JhY2xlLCB0b3AsIG9mZnNldCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ibG9ja0F0KDAsIG9yYWNsZSwgdG9wLCBvZmZzZXQpO1xuICAgIH1cbiAgICBmb3JFYWNoTGluZShmcm9tLCB0bywgb3JhY2xlLCB0b3AsIG9mZnNldCwgZikge1xuICAgICAgICBpZiAoZnJvbSA8PSBvZmZzZXQgKyB0aGlzLmxlbmd0aCAmJiB0byA+PSBvZmZzZXQpXG4gICAgICAgICAgICBmKHRoaXMuYmxvY2tBdCgwLCBvcmFjbGUsIHRvcCwgb2Zmc2V0KSk7XG4gICAgfVxuICAgIHVwZGF0ZUhlaWdodChvcmFjbGUsIG9mZnNldCA9IDAsIF9mb3JjZSA9IGZhbHNlLCBtZWFzdXJlZCkge1xuICAgICAgICBpZiAobWVhc3VyZWQgJiYgbWVhc3VyZWQuZnJvbSA8PSBvZmZzZXQgJiYgbWVhc3VyZWQubW9yZSlcbiAgICAgICAgICAgIHRoaXMuc2V0SGVpZ2h0KG9yYWNsZSwgbWVhc3VyZWQuaGVpZ2h0c1ttZWFzdXJlZC5pbmRleCsrXSk7XG4gICAgICAgIHRoaXMub3V0ZGF0ZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkgeyByZXR1cm4gYGJsb2NrKCR7dGhpcy5sZW5ndGh9KWA7IH1cbn1cbmNsYXNzIEhlaWdodE1hcFRleHQgZXh0ZW5kcyBIZWlnaHRNYXBCbG9jayB7XG4gICAgY29uc3RydWN0b3IobGVuZ3RoLCBoZWlnaHQpIHtcbiAgICAgICAgc3VwZXIobGVuZ3RoLCBoZWlnaHQsIG51bGwpO1xuICAgICAgICB0aGlzLmNvbGxhcHNlZCA9IDA7IC8vIEFtb3VudCBvZiBjb2xsYXBzZWQgY29udGVudCBpbiB0aGUgbGluZVxuICAgICAgICB0aGlzLndpZGdldEhlaWdodCA9IDA7IC8vIE1heGltdW0gaW5saW5lIHdpZGdldCBoZWlnaHRcbiAgICAgICAgdGhpcy5icmVha3MgPSAwOyAvLyBOdW1iZXIgb2Ygd2lkZ2V0LWludHJvZHVjZWQgbGluZSBicmVha3Mgb24gdGhlIGxpbmVcbiAgICB9XG4gICAgYmxvY2tBdChfaGVpZ2h0LCBfb3JhY2xlLCB0b3AsIG9mZnNldCkge1xuICAgICAgICByZXR1cm4gbmV3IEJsb2NrSW5mbyhvZmZzZXQsIHRoaXMubGVuZ3RoLCB0b3AsIHRoaXMuaGVpZ2h0LCB0aGlzLmJyZWFrcyk7XG4gICAgfVxuICAgIHJlcGxhY2UoX2Zyb20sIF90bywgbm9kZXMpIHtcbiAgICAgICAgbGV0IG5vZGUgPSBub2Rlc1swXTtcbiAgICAgICAgaWYgKG5vZGVzLmxlbmd0aCA9PSAxICYmIChub2RlIGluc3RhbmNlb2YgSGVpZ2h0TWFwVGV4dCB8fCBub2RlIGluc3RhbmNlb2YgSGVpZ2h0TWFwR2FwICYmIChub2RlLmZsYWdzICYgNCAvKiBGbGFnLlNpbmdsZUxpbmUgKi8pKSAmJlxuICAgICAgICAgICAgTWF0aC5hYnModGhpcy5sZW5ndGggLSBub2RlLmxlbmd0aCkgPCAxMCkge1xuICAgICAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBIZWlnaHRNYXBHYXApXG4gICAgICAgICAgICAgICAgbm9kZSA9IG5ldyBIZWlnaHRNYXBUZXh0KG5vZGUubGVuZ3RoLCB0aGlzLmhlaWdodCk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgbm9kZS5oZWlnaHQgPSB0aGlzLmhlaWdodDtcbiAgICAgICAgICAgIGlmICghdGhpcy5vdXRkYXRlZClcbiAgICAgICAgICAgICAgICBub2RlLm91dGRhdGVkID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBIZWlnaHRNYXAub2Yobm9kZXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZUhlaWdodChvcmFjbGUsIG9mZnNldCA9IDAsIGZvcmNlID0gZmFsc2UsIG1lYXN1cmVkKSB7XG4gICAgICAgIGlmIChtZWFzdXJlZCAmJiBtZWFzdXJlZC5mcm9tIDw9IG9mZnNldCAmJiBtZWFzdXJlZC5tb3JlKVxuICAgICAgICAgICAgdGhpcy5zZXRIZWlnaHQob3JhY2xlLCBtZWFzdXJlZC5oZWlnaHRzW21lYXN1cmVkLmluZGV4KytdKTtcbiAgICAgICAgZWxzZSBpZiAoZm9yY2UgfHwgdGhpcy5vdXRkYXRlZClcbiAgICAgICAgICAgIHRoaXMuc2V0SGVpZ2h0KG9yYWNsZSwgTWF0aC5tYXgodGhpcy53aWRnZXRIZWlnaHQsIG9yYWNsZS5oZWlnaHRGb3JMaW5lKHRoaXMubGVuZ3RoIC0gdGhpcy5jb2xsYXBzZWQpKSArXG4gICAgICAgICAgICAgICAgdGhpcy5icmVha3MgKiBvcmFjbGUubGluZUhlaWdodCk7XG4gICAgICAgIHRoaXMub3V0ZGF0ZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYGxpbmUoJHt0aGlzLmxlbmd0aH0ke3RoaXMuY29sbGFwc2VkID8gLXRoaXMuY29sbGFwc2VkIDogXCJcIn0ke3RoaXMud2lkZ2V0SGVpZ2h0ID8gXCI6XCIgKyB0aGlzLndpZGdldEhlaWdodCA6IFwiXCJ9KWA7XG4gICAgfVxufVxuY2xhc3MgSGVpZ2h0TWFwR2FwIGV4dGVuZHMgSGVpZ2h0TWFwIHtcbiAgICBjb25zdHJ1Y3RvcihsZW5ndGgpIHsgc3VwZXIobGVuZ3RoLCAwKTsgfVxuICAgIGhlaWdodE1ldHJpY3Mob3JhY2xlLCBvZmZzZXQpIHtcbiAgICAgICAgbGV0IGZpcnN0TGluZSA9IG9yYWNsZS5kb2MubGluZUF0KG9mZnNldCkubnVtYmVyLCBsYXN0TGluZSA9IG9yYWNsZS5kb2MubGluZUF0KG9mZnNldCArIHRoaXMubGVuZ3RoKS5udW1iZXI7XG4gICAgICAgIGxldCBsaW5lcyA9IGxhc3RMaW5lIC0gZmlyc3RMaW5lICsgMTtcbiAgICAgICAgbGV0IHBlckxpbmUsIHBlckNoYXIgPSAwO1xuICAgICAgICBpZiAob3JhY2xlLmxpbmVXcmFwcGluZykge1xuICAgICAgICAgICAgbGV0IHRvdGFsUGVyTGluZSA9IE1hdGgubWluKHRoaXMuaGVpZ2h0LCBvcmFjbGUubGluZUhlaWdodCAqIGxpbmVzKTtcbiAgICAgICAgICAgIHBlckxpbmUgPSB0b3RhbFBlckxpbmUgLyBsaW5lcztcbiAgICAgICAgICAgIGlmICh0aGlzLmxlbmd0aCA+IGxpbmVzICsgMSlcbiAgICAgICAgICAgICAgICBwZXJDaGFyID0gKHRoaXMuaGVpZ2h0IC0gdG90YWxQZXJMaW5lKSAvICh0aGlzLmxlbmd0aCAtIGxpbmVzIC0gMSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwZXJMaW5lID0gdGhpcy5oZWlnaHQgLyBsaW5lcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBmaXJzdExpbmUsIGxhc3RMaW5lLCBwZXJMaW5lLCBwZXJDaGFyIH07XG4gICAgfVxuICAgIGJsb2NrQXQoaGVpZ2h0LCBvcmFjbGUsIHRvcCwgb2Zmc2V0KSB7XG4gICAgICAgIGxldCB7IGZpcnN0TGluZSwgbGFzdExpbmUsIHBlckxpbmUsIHBlckNoYXIgfSA9IHRoaXMuaGVpZ2h0TWV0cmljcyhvcmFjbGUsIG9mZnNldCk7XG4gICAgICAgIGlmIChvcmFjbGUubGluZVdyYXBwaW5nKSB7XG4gICAgICAgICAgICBsZXQgZ3Vlc3MgPSBvZmZzZXQgKyAoaGVpZ2h0IDwgb3JhY2xlLmxpbmVIZWlnaHQgPyAwXG4gICAgICAgICAgICAgICAgOiBNYXRoLnJvdW5kKE1hdGgubWF4KDAsIE1hdGgubWluKDEsIChoZWlnaHQgLSB0b3ApIC8gdGhpcy5oZWlnaHQpKSAqIHRoaXMubGVuZ3RoKSk7XG4gICAgICAgICAgICBsZXQgbGluZSA9IG9yYWNsZS5kb2MubGluZUF0KGd1ZXNzKSwgbGluZUhlaWdodCA9IHBlckxpbmUgKyBsaW5lLmxlbmd0aCAqIHBlckNoYXI7XG4gICAgICAgICAgICBsZXQgbGluZVRvcCA9IE1hdGgubWF4KHRvcCwgaGVpZ2h0IC0gbGluZUhlaWdodCAvIDIpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBCbG9ja0luZm8obGluZS5mcm9tLCBsaW5lLmxlbmd0aCwgbGluZVRvcCwgbGluZUhlaWdodCwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgbGluZSA9IE1hdGgubWF4KDAsIE1hdGgubWluKGxhc3RMaW5lIC0gZmlyc3RMaW5lLCBNYXRoLmZsb29yKChoZWlnaHQgLSB0b3ApIC8gcGVyTGluZSkpKTtcbiAgICAgICAgICAgIGxldCB7IGZyb20sIGxlbmd0aCB9ID0gb3JhY2xlLmRvYy5saW5lKGZpcnN0TGluZSArIGxpbmUpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBCbG9ja0luZm8oZnJvbSwgbGVuZ3RoLCB0b3AgKyBwZXJMaW5lICogbGluZSwgcGVyTGluZSwgMCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGluZUF0KHZhbHVlLCB0eXBlLCBvcmFjbGUsIHRvcCwgb2Zmc2V0KSB7XG4gICAgICAgIGlmICh0eXBlID09IFF1ZXJ5VHlwZS5CeUhlaWdodClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJsb2NrQXQodmFsdWUsIG9yYWNsZSwgdG9wLCBvZmZzZXQpO1xuICAgICAgICBpZiAodHlwZSA9PSBRdWVyeVR5cGUuQnlQb3NOb0hlaWdodCkge1xuICAgICAgICAgICAgbGV0IHsgZnJvbSwgdG8gfSA9IG9yYWNsZS5kb2MubGluZUF0KHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQmxvY2tJbmZvKGZyb20sIHRvIC0gZnJvbSwgMCwgMCwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHsgZmlyc3RMaW5lLCBwZXJMaW5lLCBwZXJDaGFyIH0gPSB0aGlzLmhlaWdodE1ldHJpY3Mob3JhY2xlLCBvZmZzZXQpO1xuICAgICAgICBsZXQgbGluZSA9IG9yYWNsZS5kb2MubGluZUF0KHZhbHVlKSwgbGluZUhlaWdodCA9IHBlckxpbmUgKyBsaW5lLmxlbmd0aCAqIHBlckNoYXI7XG4gICAgICAgIGxldCBsaW5lc0Fib3ZlID0gbGluZS5udW1iZXIgLSBmaXJzdExpbmU7XG4gICAgICAgIGxldCBsaW5lVG9wID0gdG9wICsgcGVyTGluZSAqIGxpbmVzQWJvdmUgKyBwZXJDaGFyICogKGxpbmUuZnJvbSAtIG9mZnNldCAtIGxpbmVzQWJvdmUpO1xuICAgICAgICByZXR1cm4gbmV3IEJsb2NrSW5mbyhsaW5lLmZyb20sIGxpbmUubGVuZ3RoLCBNYXRoLm1heCh0b3AsIE1hdGgubWluKGxpbmVUb3AsIHRvcCArIHRoaXMuaGVpZ2h0IC0gbGluZUhlaWdodCkpLCBsaW5lSGVpZ2h0LCAwKTtcbiAgICB9XG4gICAgZm9yRWFjaExpbmUoZnJvbSwgdG8sIG9yYWNsZSwgdG9wLCBvZmZzZXQsIGYpIHtcbiAgICAgICAgZnJvbSA9IE1hdGgubWF4KGZyb20sIG9mZnNldCk7XG4gICAgICAgIHRvID0gTWF0aC5taW4odG8sIG9mZnNldCArIHRoaXMubGVuZ3RoKTtcbiAgICAgICAgbGV0IHsgZmlyc3RMaW5lLCBwZXJMaW5lLCBwZXJDaGFyIH0gPSB0aGlzLmhlaWdodE1ldHJpY3Mob3JhY2xlLCBvZmZzZXQpO1xuICAgICAgICBmb3IgKGxldCBwb3MgPSBmcm9tLCBsaW5lVG9wID0gdG9wOyBwb3MgPD0gdG87KSB7XG4gICAgICAgICAgICBsZXQgbGluZSA9IG9yYWNsZS5kb2MubGluZUF0KHBvcyk7XG4gICAgICAgICAgICBpZiAocG9zID09IGZyb20pIHtcbiAgICAgICAgICAgICAgICBsZXQgbGluZXNBYm92ZSA9IGxpbmUubnVtYmVyIC0gZmlyc3RMaW5lO1xuICAgICAgICAgICAgICAgIGxpbmVUb3AgKz0gcGVyTGluZSAqIGxpbmVzQWJvdmUgKyBwZXJDaGFyICogKGZyb20gLSBvZmZzZXQgLSBsaW5lc0Fib3ZlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBsaW5lSGVpZ2h0ID0gcGVyTGluZSArIHBlckNoYXIgKiBsaW5lLmxlbmd0aDtcbiAgICAgICAgICAgIGYobmV3IEJsb2NrSW5mbyhsaW5lLmZyb20sIGxpbmUubGVuZ3RoLCBsaW5lVG9wLCBsaW5lSGVpZ2h0LCAwKSk7XG4gICAgICAgICAgICBsaW5lVG9wICs9IGxpbmVIZWlnaHQ7XG4gICAgICAgICAgICBwb3MgPSBsaW5lLnRvICsgMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXBsYWNlKGZyb20sIHRvLCBub2Rlcykge1xuICAgICAgICBsZXQgYWZ0ZXIgPSB0aGlzLmxlbmd0aCAtIHRvO1xuICAgICAgICBpZiAoYWZ0ZXIgPiAwKSB7XG4gICAgICAgICAgICBsZXQgbGFzdCA9IG5vZGVzW25vZGVzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgaWYgKGxhc3QgaW5zdGFuY2VvZiBIZWlnaHRNYXBHYXApXG4gICAgICAgICAgICAgICAgbm9kZXNbbm9kZXMubGVuZ3RoIC0gMV0gPSBuZXcgSGVpZ2h0TWFwR2FwKGxhc3QubGVuZ3RoICsgYWZ0ZXIpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIG5vZGVzLnB1c2gobnVsbCwgbmV3IEhlaWdodE1hcEdhcChhZnRlciAtIDEpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZnJvbSA+IDApIHtcbiAgICAgICAgICAgIGxldCBmaXJzdCA9IG5vZGVzWzBdO1xuICAgICAgICAgICAgaWYgKGZpcnN0IGluc3RhbmNlb2YgSGVpZ2h0TWFwR2FwKVxuICAgICAgICAgICAgICAgIG5vZGVzWzBdID0gbmV3IEhlaWdodE1hcEdhcChmcm9tICsgZmlyc3QubGVuZ3RoKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBub2Rlcy51bnNoaWZ0KG5ldyBIZWlnaHRNYXBHYXAoZnJvbSAtIDEpLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gSGVpZ2h0TWFwLm9mKG5vZGVzKTtcbiAgICB9XG4gICAgZGVjb21wb3NlTGVmdCh0bywgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKG5ldyBIZWlnaHRNYXBHYXAodG8gLSAxKSwgbnVsbCk7XG4gICAgfVxuICAgIGRlY29tcG9zZVJpZ2h0KGZyb20sIHJlc3VsdCkge1xuICAgICAgICByZXN1bHQucHVzaChudWxsLCBuZXcgSGVpZ2h0TWFwR2FwKHRoaXMubGVuZ3RoIC0gZnJvbSAtIDEpKTtcbiAgICB9XG4gICAgdXBkYXRlSGVpZ2h0KG9yYWNsZSwgb2Zmc2V0ID0gMCwgZm9yY2UgPSBmYWxzZSwgbWVhc3VyZWQpIHtcbiAgICAgICAgbGV0IGVuZCA9IG9mZnNldCArIHRoaXMubGVuZ3RoO1xuICAgICAgICBpZiAobWVhc3VyZWQgJiYgbWVhc3VyZWQuZnJvbSA8PSBvZmZzZXQgKyB0aGlzLmxlbmd0aCAmJiBtZWFzdXJlZC5tb3JlKSB7XG4gICAgICAgICAgICAvLyBGaWxsIGluIHBhcnQgb2YgdGhpcyBnYXAgd2l0aCBtZWFzdXJlZCBsaW5lcy4gV2Uga25vdyB0aGVyZVxuICAgICAgICAgICAgLy8gY2FuJ3QgYmUgd2lkZ2V0cyBvciBjb2xsYXBzZWQgcmFuZ2VzIGluIHRob3NlIGxpbmVzLCBiZWNhdXNlXG4gICAgICAgICAgICAvLyB0aGV5IHdvdWxkIGFscmVhZHkgaGF2ZSBiZWVuIGFkZGVkIHRvIHRoZSBoZWlnaHRtYXAgKGdhcHNcbiAgICAgICAgICAgIC8vIG9ubHkgY29udGFpbiBwbGFpbiB0ZXh0KS5cbiAgICAgICAgICAgIGxldCBub2RlcyA9IFtdLCBwb3MgPSBNYXRoLm1heChvZmZzZXQsIG1lYXN1cmVkLmZyb20pLCBzaW5nbGVIZWlnaHQgPSAtMTtcbiAgICAgICAgICAgIGlmIChtZWFzdXJlZC5mcm9tID4gb2Zmc2V0KVxuICAgICAgICAgICAgICAgIG5vZGVzLnB1c2gobmV3IEhlaWdodE1hcEdhcChtZWFzdXJlZC5mcm9tIC0gb2Zmc2V0IC0gMSkudXBkYXRlSGVpZ2h0KG9yYWNsZSwgb2Zmc2V0KSk7XG4gICAgICAgICAgICB3aGlsZSAocG9zIDw9IGVuZCAmJiBtZWFzdXJlZC5tb3JlKSB7XG4gICAgICAgICAgICAgICAgbGV0IGxlbiA9IG9yYWNsZS5kb2MubGluZUF0KHBvcykubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChub2Rlcy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIG5vZGVzLnB1c2gobnVsbCk7XG4gICAgICAgICAgICAgICAgbGV0IGhlaWdodCA9IG1lYXN1cmVkLmhlaWdodHNbbWVhc3VyZWQuaW5kZXgrK107XG4gICAgICAgICAgICAgICAgaWYgKHNpbmdsZUhlaWdodCA9PSAtMSlcbiAgICAgICAgICAgICAgICAgICAgc2luZ2xlSGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKE1hdGguYWJzKGhlaWdodCAtIHNpbmdsZUhlaWdodCkgPj0gRXBzaWxvbilcbiAgICAgICAgICAgICAgICAgICAgc2luZ2xlSGVpZ2h0ID0gLTI7XG4gICAgICAgICAgICAgICAgbGV0IGxpbmUgPSBuZXcgSGVpZ2h0TWFwVGV4dChsZW4sIGhlaWdodCk7XG4gICAgICAgICAgICAgICAgbGluZS5vdXRkYXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIG5vZGVzLnB1c2gobGluZSk7XG4gICAgICAgICAgICAgICAgcG9zICs9IGxlbiArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocG9zIDw9IGVuZClcbiAgICAgICAgICAgICAgICBub2Rlcy5wdXNoKG51bGwsIG5ldyBIZWlnaHRNYXBHYXAoZW5kIC0gcG9zKS51cGRhdGVIZWlnaHQob3JhY2xlLCBwb3MpKTtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBIZWlnaHRNYXAub2Yobm9kZXMpO1xuICAgICAgICAgICAgaWYgKHNpbmdsZUhlaWdodCA8IDAgfHwgTWF0aC5hYnMocmVzdWx0LmhlaWdodCAtIHRoaXMuaGVpZ2h0KSA+PSBFcHNpbG9uIHx8XG4gICAgICAgICAgICAgICAgTWF0aC5hYnMoc2luZ2xlSGVpZ2h0IC0gdGhpcy5oZWlnaHRNZXRyaWNzKG9yYWNsZSwgb2Zmc2V0KS5wZXJMaW5lKSA+PSBFcHNpbG9uKVxuICAgICAgICAgICAgICAgIG9yYWNsZS5oZWlnaHRDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZm9yY2UgfHwgdGhpcy5vdXRkYXRlZCkge1xuICAgICAgICAgICAgdGhpcy5zZXRIZWlnaHQob3JhY2xlLCBvcmFjbGUuaGVpZ2h0Rm9yR2FwKG9mZnNldCwgb2Zmc2V0ICsgdGhpcy5sZW5ndGgpKTtcbiAgICAgICAgICAgIHRoaXMub3V0ZGF0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7IHJldHVybiBgZ2FwKCR7dGhpcy5sZW5ndGh9KWA7IH1cbn1cbmNsYXNzIEhlaWdodE1hcEJyYW5jaCBleHRlbmRzIEhlaWdodE1hcCB7XG4gICAgY29uc3RydWN0b3IobGVmdCwgYnJrLCByaWdodCkge1xuICAgICAgICBzdXBlcihsZWZ0Lmxlbmd0aCArIGJyayArIHJpZ2h0Lmxlbmd0aCwgbGVmdC5oZWlnaHQgKyByaWdodC5oZWlnaHQsIGJyayB8IChsZWZ0Lm91dGRhdGVkIHx8IHJpZ2h0Lm91dGRhdGVkID8gMiAvKiBGbGFnLk91dGRhdGVkICovIDogMCkpO1xuICAgICAgICB0aGlzLmxlZnQgPSBsZWZ0O1xuICAgICAgICB0aGlzLnJpZ2h0ID0gcmlnaHQ7XG4gICAgICAgIHRoaXMuc2l6ZSA9IGxlZnQuc2l6ZSArIHJpZ2h0LnNpemU7XG4gICAgfVxuICAgIGdldCBicmVhaygpIHsgcmV0dXJuIHRoaXMuZmxhZ3MgJiAxIC8qIEZsYWcuQnJlYWsgKi87IH1cbiAgICBibG9ja0F0KGhlaWdodCwgb3JhY2xlLCB0b3AsIG9mZnNldCkge1xuICAgICAgICBsZXQgbWlkID0gdG9wICsgdGhpcy5sZWZ0LmhlaWdodDtcbiAgICAgICAgcmV0dXJuIGhlaWdodCA8IG1pZCA/IHRoaXMubGVmdC5ibG9ja0F0KGhlaWdodCwgb3JhY2xlLCB0b3AsIG9mZnNldClcbiAgICAgICAgICAgIDogdGhpcy5yaWdodC5ibG9ja0F0KGhlaWdodCwgb3JhY2xlLCBtaWQsIG9mZnNldCArIHRoaXMubGVmdC5sZW5ndGggKyB0aGlzLmJyZWFrKTtcbiAgICB9XG4gICAgbGluZUF0KHZhbHVlLCB0eXBlLCBvcmFjbGUsIHRvcCwgb2Zmc2V0KSB7XG4gICAgICAgIGxldCByaWdodFRvcCA9IHRvcCArIHRoaXMubGVmdC5oZWlnaHQsIHJpZ2h0T2Zmc2V0ID0gb2Zmc2V0ICsgdGhpcy5sZWZ0Lmxlbmd0aCArIHRoaXMuYnJlYWs7XG4gICAgICAgIGxldCBsZWZ0ID0gdHlwZSA9PSBRdWVyeVR5cGUuQnlIZWlnaHQgPyB2YWx1ZSA8IHJpZ2h0VG9wIDogdmFsdWUgPCByaWdodE9mZnNldDtcbiAgICAgICAgbGV0IGJhc2UgPSBsZWZ0ID8gdGhpcy5sZWZ0LmxpbmVBdCh2YWx1ZSwgdHlwZSwgb3JhY2xlLCB0b3AsIG9mZnNldClcbiAgICAgICAgICAgIDogdGhpcy5yaWdodC5saW5lQXQodmFsdWUsIHR5cGUsIG9yYWNsZSwgcmlnaHRUb3AsIHJpZ2h0T2Zmc2V0KTtcbiAgICAgICAgaWYgKHRoaXMuYnJlYWsgfHwgKGxlZnQgPyBiYXNlLnRvIDwgcmlnaHRPZmZzZXQgOiBiYXNlLmZyb20gPiByaWdodE9mZnNldCkpXG4gICAgICAgICAgICByZXR1cm4gYmFzZTtcbiAgICAgICAgbGV0IHN1YlF1ZXJ5ID0gdHlwZSA9PSBRdWVyeVR5cGUuQnlQb3NOb0hlaWdodCA/IFF1ZXJ5VHlwZS5CeVBvc05vSGVpZ2h0IDogUXVlcnlUeXBlLkJ5UG9zO1xuICAgICAgICBpZiAobGVmdClcbiAgICAgICAgICAgIHJldHVybiBiYXNlLmpvaW4odGhpcy5yaWdodC5saW5lQXQocmlnaHRPZmZzZXQsIHN1YlF1ZXJ5LCBvcmFjbGUsIHJpZ2h0VG9wLCByaWdodE9mZnNldCkpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sZWZ0LmxpbmVBdChyaWdodE9mZnNldCwgc3ViUXVlcnksIG9yYWNsZSwgdG9wLCBvZmZzZXQpLmpvaW4oYmFzZSk7XG4gICAgfVxuICAgIGZvckVhY2hMaW5lKGZyb20sIHRvLCBvcmFjbGUsIHRvcCwgb2Zmc2V0LCBmKSB7XG4gICAgICAgIGxldCByaWdodFRvcCA9IHRvcCArIHRoaXMubGVmdC5oZWlnaHQsIHJpZ2h0T2Zmc2V0ID0gb2Zmc2V0ICsgdGhpcy5sZWZ0Lmxlbmd0aCArIHRoaXMuYnJlYWs7XG4gICAgICAgIGlmICh0aGlzLmJyZWFrKSB7XG4gICAgICAgICAgICBpZiAoZnJvbSA8IHJpZ2h0T2Zmc2V0KVxuICAgICAgICAgICAgICAgIHRoaXMubGVmdC5mb3JFYWNoTGluZShmcm9tLCB0bywgb3JhY2xlLCB0b3AsIG9mZnNldCwgZik7XG4gICAgICAgICAgICBpZiAodG8gPj0gcmlnaHRPZmZzZXQpXG4gICAgICAgICAgICAgICAgdGhpcy5yaWdodC5mb3JFYWNoTGluZShmcm9tLCB0bywgb3JhY2xlLCByaWdodFRvcCwgcmlnaHRPZmZzZXQsIGYpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGV0IG1pZCA9IHRoaXMubGluZUF0KHJpZ2h0T2Zmc2V0LCBRdWVyeVR5cGUuQnlQb3MsIG9yYWNsZSwgdG9wLCBvZmZzZXQpO1xuICAgICAgICAgICAgaWYgKGZyb20gPCBtaWQuZnJvbSlcbiAgICAgICAgICAgICAgICB0aGlzLmxlZnQuZm9yRWFjaExpbmUoZnJvbSwgbWlkLmZyb20gLSAxLCBvcmFjbGUsIHRvcCwgb2Zmc2V0LCBmKTtcbiAgICAgICAgICAgIGlmIChtaWQudG8gPj0gZnJvbSAmJiBtaWQuZnJvbSA8PSB0bylcbiAgICAgICAgICAgICAgICBmKG1pZCk7XG4gICAgICAgICAgICBpZiAodG8gPiBtaWQudG8pXG4gICAgICAgICAgICAgICAgdGhpcy5yaWdodC5mb3JFYWNoTGluZShtaWQudG8gKyAxLCB0bywgb3JhY2xlLCByaWdodFRvcCwgcmlnaHRPZmZzZXQsIGYpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlcGxhY2UoZnJvbSwgdG8sIG5vZGVzKSB7XG4gICAgICAgIGxldCByaWdodFN0YXJ0ID0gdGhpcy5sZWZ0Lmxlbmd0aCArIHRoaXMuYnJlYWs7XG4gICAgICAgIGlmICh0byA8IHJpZ2h0U3RhcnQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5iYWxhbmNlZCh0aGlzLmxlZnQucmVwbGFjZShmcm9tLCB0bywgbm9kZXMpLCB0aGlzLnJpZ2h0KTtcbiAgICAgICAgaWYgKGZyb20gPiB0aGlzLmxlZnQubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYmFsYW5jZWQodGhpcy5sZWZ0LCB0aGlzLnJpZ2h0LnJlcGxhY2UoZnJvbSAtIHJpZ2h0U3RhcnQsIHRvIC0gcmlnaHRTdGFydCwgbm9kZXMpKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICBpZiAoZnJvbSA+IDApXG4gICAgICAgICAgICB0aGlzLmRlY29tcG9zZUxlZnQoZnJvbSwgcmVzdWx0KTtcbiAgICAgICAgbGV0IGxlZnQgPSByZXN1bHQubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBub2RlIG9mIG5vZGVzKVxuICAgICAgICAgICAgcmVzdWx0LnB1c2gobm9kZSk7XG4gICAgICAgIGlmIChmcm9tID4gMClcbiAgICAgICAgICAgIG1lcmdlR2FwcyhyZXN1bHQsIGxlZnQgLSAxKTtcbiAgICAgICAgaWYgKHRvIDwgdGhpcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxldCByaWdodCA9IHJlc3VsdC5sZW5ndGg7XG4gICAgICAgICAgICB0aGlzLmRlY29tcG9zZVJpZ2h0KHRvLCByZXN1bHQpO1xuICAgICAgICAgICAgbWVyZ2VHYXBzKHJlc3VsdCwgcmlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBIZWlnaHRNYXAub2YocmVzdWx0KTtcbiAgICB9XG4gICAgZGVjb21wb3NlTGVmdCh0bywgcmVzdWx0KSB7XG4gICAgICAgIGxldCBsZWZ0ID0gdGhpcy5sZWZ0Lmxlbmd0aDtcbiAgICAgICAgaWYgKHRvIDw9IGxlZnQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sZWZ0LmRlY29tcG9zZUxlZnQodG8sIHJlc3VsdCk7XG4gICAgICAgIHJlc3VsdC5wdXNoKHRoaXMubGVmdCk7XG4gICAgICAgIGlmICh0aGlzLmJyZWFrKSB7XG4gICAgICAgICAgICBsZWZ0Kys7XG4gICAgICAgICAgICBpZiAodG8gPj0gbGVmdClcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChudWxsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG8gPiBsZWZ0KVxuICAgICAgICAgICAgdGhpcy5yaWdodC5kZWNvbXBvc2VMZWZ0KHRvIC0gbGVmdCwgcmVzdWx0KTtcbiAgICB9XG4gICAgZGVjb21wb3NlUmlnaHQoZnJvbSwgcmVzdWx0KSB7XG4gICAgICAgIGxldCBsZWZ0ID0gdGhpcy5sZWZ0Lmxlbmd0aCwgcmlnaHQgPSBsZWZ0ICsgdGhpcy5icmVhaztcbiAgICAgICAgaWYgKGZyb20gPj0gcmlnaHQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yaWdodC5kZWNvbXBvc2VSaWdodChmcm9tIC0gcmlnaHQsIHJlc3VsdCk7XG4gICAgICAgIGlmIChmcm9tIDwgbGVmdClcbiAgICAgICAgICAgIHRoaXMubGVmdC5kZWNvbXBvc2VSaWdodChmcm9tLCByZXN1bHQpO1xuICAgICAgICBpZiAodGhpcy5icmVhayAmJiBmcm9tIDwgcmlnaHQpXG4gICAgICAgICAgICByZXN1bHQucHVzaChudWxsKTtcbiAgICAgICAgcmVzdWx0LnB1c2godGhpcy5yaWdodCk7XG4gICAgfVxuICAgIGJhbGFuY2VkKGxlZnQsIHJpZ2h0KSB7XG4gICAgICAgIGlmIChsZWZ0LnNpemUgPiAyICogcmlnaHQuc2l6ZSB8fCByaWdodC5zaXplID4gMiAqIGxlZnQuc2l6ZSlcbiAgICAgICAgICAgIHJldHVybiBIZWlnaHRNYXAub2YodGhpcy5icmVhayA/IFtsZWZ0LCBudWxsLCByaWdodF0gOiBbbGVmdCwgcmlnaHRdKTtcbiAgICAgICAgdGhpcy5sZWZ0ID0gbGVmdDtcbiAgICAgICAgdGhpcy5yaWdodCA9IHJpZ2h0O1xuICAgICAgICB0aGlzLmhlaWdodCA9IGxlZnQuaGVpZ2h0ICsgcmlnaHQuaGVpZ2h0O1xuICAgICAgICB0aGlzLm91dGRhdGVkID0gbGVmdC5vdXRkYXRlZCB8fCByaWdodC5vdXRkYXRlZDtcbiAgICAgICAgdGhpcy5zaXplID0gbGVmdC5zaXplICsgcmlnaHQuc2l6ZTtcbiAgICAgICAgdGhpcy5sZW5ndGggPSBsZWZ0Lmxlbmd0aCArIHRoaXMuYnJlYWsgKyByaWdodC5sZW5ndGg7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB1cGRhdGVIZWlnaHQob3JhY2xlLCBvZmZzZXQgPSAwLCBmb3JjZSA9IGZhbHNlLCBtZWFzdXJlZCkge1xuICAgICAgICBsZXQgeyBsZWZ0LCByaWdodCB9ID0gdGhpcywgcmlnaHRTdGFydCA9IG9mZnNldCArIGxlZnQubGVuZ3RoICsgdGhpcy5icmVhaywgcmViYWxhbmNlID0gbnVsbDtcbiAgICAgICAgaWYgKG1lYXN1cmVkICYmIG1lYXN1cmVkLmZyb20gPD0gb2Zmc2V0ICsgbGVmdC5sZW5ndGggJiYgbWVhc3VyZWQubW9yZSlcbiAgICAgICAgICAgIHJlYmFsYW5jZSA9IGxlZnQgPSBsZWZ0LnVwZGF0ZUhlaWdodChvcmFjbGUsIG9mZnNldCwgZm9yY2UsIG1lYXN1cmVkKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgbGVmdC51cGRhdGVIZWlnaHQob3JhY2xlLCBvZmZzZXQsIGZvcmNlKTtcbiAgICAgICAgaWYgKG1lYXN1cmVkICYmIG1lYXN1cmVkLmZyb20gPD0gcmlnaHRTdGFydCArIHJpZ2h0Lmxlbmd0aCAmJiBtZWFzdXJlZC5tb3JlKVxuICAgICAgICAgICAgcmViYWxhbmNlID0gcmlnaHQgPSByaWdodC51cGRhdGVIZWlnaHQob3JhY2xlLCByaWdodFN0YXJ0LCBmb3JjZSwgbWVhc3VyZWQpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICByaWdodC51cGRhdGVIZWlnaHQob3JhY2xlLCByaWdodFN0YXJ0LCBmb3JjZSk7XG4gICAgICAgIGlmIChyZWJhbGFuY2UpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5iYWxhbmNlZChsZWZ0LCByaWdodCk7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5sZWZ0LmhlaWdodCArIHRoaXMucmlnaHQuaGVpZ2h0O1xuICAgICAgICB0aGlzLm91dGRhdGVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHsgcmV0dXJuIHRoaXMubGVmdCArICh0aGlzLmJyZWFrID8gXCIgXCIgOiBcIi1cIikgKyB0aGlzLnJpZ2h0OyB9XG59XG5mdW5jdGlvbiBtZXJnZUdhcHMobm9kZXMsIGFyb3VuZCkge1xuICAgIGxldCBiZWZvcmUsIGFmdGVyO1xuICAgIGlmIChub2Rlc1thcm91bmRdID09IG51bGwgJiZcbiAgICAgICAgKGJlZm9yZSA9IG5vZGVzW2Fyb3VuZCAtIDFdKSBpbnN0YW5jZW9mIEhlaWdodE1hcEdhcCAmJlxuICAgICAgICAoYWZ0ZXIgPSBub2Rlc1thcm91bmQgKyAxXSkgaW5zdGFuY2VvZiBIZWlnaHRNYXBHYXApXG4gICAgICAgIG5vZGVzLnNwbGljZShhcm91bmQgLSAxLCAzLCBuZXcgSGVpZ2h0TWFwR2FwKGJlZm9yZS5sZW5ndGggKyAxICsgYWZ0ZXIubGVuZ3RoKSk7XG59XG5jb25zdCByZWxldmFudFdpZGdldEhlaWdodCA9IDU7XG5jbGFzcyBOb2RlQnVpbGRlciB7XG4gICAgY29uc3RydWN0b3IocG9zLCBvcmFjbGUpIHtcbiAgICAgICAgdGhpcy5wb3MgPSBwb3M7XG4gICAgICAgIHRoaXMub3JhY2xlID0gb3JhY2xlO1xuICAgICAgICB0aGlzLm5vZGVzID0gW107XG4gICAgICAgIHRoaXMubGluZVN0YXJ0ID0gLTE7XG4gICAgICAgIHRoaXMubGluZUVuZCA9IC0xO1xuICAgICAgICB0aGlzLmNvdmVyaW5nID0gbnVsbDtcbiAgICAgICAgdGhpcy53cml0dGVuVG8gPSBwb3M7XG4gICAgfVxuICAgIGdldCBpc0NvdmVyZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvdmVyaW5nICYmIHRoaXMubm9kZXNbdGhpcy5ub2Rlcy5sZW5ndGggLSAxXSA9PSB0aGlzLmNvdmVyaW5nO1xuICAgIH1cbiAgICBzcGFuKF9mcm9tLCB0bykge1xuICAgICAgICBpZiAodGhpcy5saW5lU3RhcnQgPiAtMSkge1xuICAgICAgICAgICAgbGV0IGVuZCA9IE1hdGgubWluKHRvLCB0aGlzLmxpbmVFbmQpLCBsYXN0ID0gdGhpcy5ub2Rlc1t0aGlzLm5vZGVzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgaWYgKGxhc3QgaW5zdGFuY2VvZiBIZWlnaHRNYXBUZXh0KVxuICAgICAgICAgICAgICAgIGxhc3QubGVuZ3RoICs9IGVuZCAtIHRoaXMucG9zO1xuICAgICAgICAgICAgZWxzZSBpZiAoZW5kID4gdGhpcy5wb3MgfHwgIXRoaXMuaXNDb3ZlcmVkKVxuICAgICAgICAgICAgICAgIHRoaXMubm9kZXMucHVzaChuZXcgSGVpZ2h0TWFwVGV4dChlbmQgLSB0aGlzLnBvcywgLTEpKTtcbiAgICAgICAgICAgIHRoaXMud3JpdHRlblRvID0gZW5kO1xuICAgICAgICAgICAgaWYgKHRvID4gZW5kKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ub2Rlcy5wdXNoKG51bGwpO1xuICAgICAgICAgICAgICAgIHRoaXMud3JpdHRlblRvKys7XG4gICAgICAgICAgICAgICAgdGhpcy5saW5lU3RhcnQgPSAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBvcyA9IHRvO1xuICAgIH1cbiAgICBwb2ludChmcm9tLCB0bywgZGVjbykge1xuICAgICAgICBpZiAoZnJvbSA8IHRvIHx8IGRlY28uaGVpZ2h0UmVsZXZhbnQpIHtcbiAgICAgICAgICAgIGxldCBoZWlnaHQgPSBkZWNvLndpZGdldCA/IGRlY28ud2lkZ2V0LmVzdGltYXRlZEhlaWdodCA6IDA7XG4gICAgICAgICAgICBsZXQgYnJlYWtzID0gZGVjby53aWRnZXQgPyBkZWNvLndpZGdldC5saW5lQnJlYWtzIDogMDtcbiAgICAgICAgICAgIGlmIChoZWlnaHQgPCAwKVxuICAgICAgICAgICAgICAgIGhlaWdodCA9IHRoaXMub3JhY2xlLmxpbmVIZWlnaHQ7XG4gICAgICAgICAgICBsZXQgbGVuID0gdG8gLSBmcm9tO1xuICAgICAgICAgICAgaWYgKGRlY28uYmxvY2spIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZEJsb2NrKG5ldyBIZWlnaHRNYXBCbG9jayhsZW4sIGhlaWdodCwgZGVjbykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobGVuIHx8IGJyZWFrcyB8fCBoZWlnaHQgPj0gcmVsZXZhbnRXaWRnZXRIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZExpbmVEZWNvKGhlaWdodCwgYnJlYWtzLCBsZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRvID4gZnJvbSkge1xuICAgICAgICAgICAgdGhpcy5zcGFuKGZyb20sIHRvKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5saW5lRW5kID4gLTEgJiYgdGhpcy5saW5lRW5kIDwgdGhpcy5wb3MpXG4gICAgICAgICAgICB0aGlzLmxpbmVFbmQgPSB0aGlzLm9yYWNsZS5kb2MubGluZUF0KHRoaXMucG9zKS50bztcbiAgICB9XG4gICAgZW50ZXJMaW5lKCkge1xuICAgICAgICBpZiAodGhpcy5saW5lU3RhcnQgPiAtMSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbGV0IHsgZnJvbSwgdG8gfSA9IHRoaXMub3JhY2xlLmRvYy5saW5lQXQodGhpcy5wb3MpO1xuICAgICAgICB0aGlzLmxpbmVTdGFydCA9IGZyb207XG4gICAgICAgIHRoaXMubGluZUVuZCA9IHRvO1xuICAgICAgICBpZiAodGhpcy53cml0dGVuVG8gPCBmcm9tKSB7XG4gICAgICAgICAgICBpZiAodGhpcy53cml0dGVuVG8gPCBmcm9tIC0gMSB8fCB0aGlzLm5vZGVzW3RoaXMubm9kZXMubGVuZ3RoIC0gMV0gPT0gbnVsbClcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGVzLnB1c2godGhpcy5ibGFua0NvbnRlbnQodGhpcy53cml0dGVuVG8sIGZyb20gLSAxKSk7XG4gICAgICAgICAgICB0aGlzLm5vZGVzLnB1c2gobnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucG9zID4gZnJvbSlcbiAgICAgICAgICAgIHRoaXMubm9kZXMucHVzaChuZXcgSGVpZ2h0TWFwVGV4dCh0aGlzLnBvcyAtIGZyb20sIC0xKSk7XG4gICAgICAgIHRoaXMud3JpdHRlblRvID0gdGhpcy5wb3M7XG4gICAgfVxuICAgIGJsYW5rQ29udGVudChmcm9tLCB0bykge1xuICAgICAgICBsZXQgZ2FwID0gbmV3IEhlaWdodE1hcEdhcCh0byAtIGZyb20pO1xuICAgICAgICBpZiAodGhpcy5vcmFjbGUuZG9jLmxpbmVBdChmcm9tKS50byA9PSB0bylcbiAgICAgICAgICAgIGdhcC5mbGFncyB8PSA0IC8qIEZsYWcuU2luZ2xlTGluZSAqLztcbiAgICAgICAgcmV0dXJuIGdhcDtcbiAgICB9XG4gICAgZW5zdXJlTGluZSgpIHtcbiAgICAgICAgdGhpcy5lbnRlckxpbmUoKTtcbiAgICAgICAgbGV0IGxhc3QgPSB0aGlzLm5vZGVzLmxlbmd0aCA/IHRoaXMubm9kZXNbdGhpcy5ub2Rlcy5sZW5ndGggLSAxXSA6IG51bGw7XG4gICAgICAgIGlmIChsYXN0IGluc3RhbmNlb2YgSGVpZ2h0TWFwVGV4dClcbiAgICAgICAgICAgIHJldHVybiBsYXN0O1xuICAgICAgICBsZXQgbGluZSA9IG5ldyBIZWlnaHRNYXBUZXh0KDAsIC0xKTtcbiAgICAgICAgdGhpcy5ub2Rlcy5wdXNoKGxpbmUpO1xuICAgICAgICByZXR1cm4gbGluZTtcbiAgICB9XG4gICAgYWRkQmxvY2soYmxvY2spIHtcbiAgICAgICAgdGhpcy5lbnRlckxpbmUoKTtcbiAgICAgICAgbGV0IGRlY28gPSBibG9jay5kZWNvO1xuICAgICAgICBpZiAoZGVjbyAmJiBkZWNvLnN0YXJ0U2lkZSA+IDAgJiYgIXRoaXMuaXNDb3ZlcmVkKVxuICAgICAgICAgICAgdGhpcy5lbnN1cmVMaW5lKCk7XG4gICAgICAgIHRoaXMubm9kZXMucHVzaChibG9jayk7XG4gICAgICAgIHRoaXMud3JpdHRlblRvID0gdGhpcy5wb3MgPSB0aGlzLnBvcyArIGJsb2NrLmxlbmd0aDtcbiAgICAgICAgaWYgKGRlY28gJiYgZGVjby5lbmRTaWRlID4gMClcbiAgICAgICAgICAgIHRoaXMuY292ZXJpbmcgPSBibG9jaztcbiAgICB9XG4gICAgYWRkTGluZURlY28oaGVpZ2h0LCBicmVha3MsIGxlbmd0aCkge1xuICAgICAgICBsZXQgbGluZSA9IHRoaXMuZW5zdXJlTGluZSgpO1xuICAgICAgICBsaW5lLmxlbmd0aCArPSBsZW5ndGg7XG4gICAgICAgIGxpbmUuY29sbGFwc2VkICs9IGxlbmd0aDtcbiAgICAgICAgbGluZS53aWRnZXRIZWlnaHQgPSBNYXRoLm1heChsaW5lLndpZGdldEhlaWdodCwgaGVpZ2h0KTtcbiAgICAgICAgbGluZS5icmVha3MgKz0gYnJlYWtzO1xuICAgICAgICB0aGlzLndyaXR0ZW5UbyA9IHRoaXMucG9zID0gdGhpcy5wb3MgKyBsZW5ndGg7XG4gICAgfVxuICAgIGZpbmlzaChmcm9tKSB7XG4gICAgICAgIGxldCBsYXN0ID0gdGhpcy5ub2Rlcy5sZW5ndGggPT0gMCA/IG51bGwgOiB0aGlzLm5vZGVzW3RoaXMubm9kZXMubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmICh0aGlzLmxpbmVTdGFydCA+IC0xICYmICEobGFzdCBpbnN0YW5jZW9mIEhlaWdodE1hcFRleHQpICYmICF0aGlzLmlzQ292ZXJlZClcbiAgICAgICAgICAgIHRoaXMubm9kZXMucHVzaChuZXcgSGVpZ2h0TWFwVGV4dCgwLCAtMSkpO1xuICAgICAgICBlbHNlIGlmICh0aGlzLndyaXR0ZW5UbyA8IHRoaXMucG9zIHx8IGxhc3QgPT0gbnVsbClcbiAgICAgICAgICAgIHRoaXMubm9kZXMucHVzaCh0aGlzLmJsYW5rQ29udGVudCh0aGlzLndyaXR0ZW5UbywgdGhpcy5wb3MpKTtcbiAgICAgICAgbGV0IHBvcyA9IGZyb207XG4gICAgICAgIGZvciAobGV0IG5vZGUgb2YgdGhpcy5ub2Rlcykge1xuICAgICAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBIZWlnaHRNYXBUZXh0KVxuICAgICAgICAgICAgICAgIG5vZGUudXBkYXRlSGVpZ2h0KHRoaXMub3JhY2xlLCBwb3MpO1xuICAgICAgICAgICAgcG9zICs9IG5vZGUgPyBub2RlLmxlbmd0aCA6IDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZXM7XG4gICAgfVxuICAgIC8vIEFsd2F5cyBjYWxsZWQgd2l0aCBhIHJlZ2lvbiB0aGF0IG9uIGJvdGggc2lkZXMgZWl0aGVyIHN0cmV0Y2hlc1xuICAgIC8vIHRvIGEgbGluZSBicmVhayBvciB0aGUgZW5kIG9mIHRoZSBkb2N1bWVudC5cbiAgICAvLyBUaGUgcmV0dXJuZWQgYXJyYXkgdXNlcyBudWxsIHRvIGluZGljYXRlIGxpbmUgYnJlYWtzLCBidXQgbmV2ZXJcbiAgICAvLyBzdGFydHMgb3IgZW5kcyBpbiBhIGxpbmUgYnJlYWssIG9yIGhhcyBtdWx0aXBsZSBsaW5lIGJyZWFrcyBuZXh0XG4gICAgLy8gdG8gZWFjaCBvdGhlci5cbiAgICBzdGF0aWMgYnVpbGQob3JhY2xlLCBkZWNvcmF0aW9ucywgZnJvbSwgdG8pIHtcbiAgICAgICAgbGV0IGJ1aWxkZXIgPSBuZXcgTm9kZUJ1aWxkZXIoZnJvbSwgb3JhY2xlKTtcbiAgICAgICAgc3RhdGUuUmFuZ2VTZXQuc3BhbnMoZGVjb3JhdGlvbnMsIGZyb20sIHRvLCBidWlsZGVyLCAwKTtcbiAgICAgICAgcmV0dXJuIGJ1aWxkZXIuZmluaXNoKGZyb20pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGhlaWdodFJlbGV2YW50RGVjb0NoYW5nZXMoYSwgYiwgZGlmZikge1xuICAgIGxldCBjb21wID0gbmV3IERlY29yYXRpb25Db21wYXJhdG9yO1xuICAgIHN0YXRlLlJhbmdlU2V0LmNvbXBhcmUoYSwgYiwgZGlmZiwgY29tcCwgMCk7XG4gICAgcmV0dXJuIGNvbXAuY2hhbmdlcztcbn1cbmNsYXNzIERlY29yYXRpb25Db21wYXJhdG9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VzID0gW107XG4gICAgfVxuICAgIGNvbXBhcmVSYW5nZSgpIHsgfVxuICAgIGNvbXBhcmVQb2ludChmcm9tLCB0bywgYSwgYikge1xuICAgICAgICBpZiAoZnJvbSA8IHRvIHx8IGEgJiYgYS5oZWlnaHRSZWxldmFudCB8fCBiICYmIGIuaGVpZ2h0UmVsZXZhbnQpXG4gICAgICAgICAgICBhZGRSYW5nZShmcm9tLCB0bywgdGhpcy5jaGFuZ2VzLCA1KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHZpc2libGVQaXhlbFJhbmdlKGRvbSwgcGFkZGluZ1RvcCkge1xuICAgIGxldCByZWN0ID0gZG9tLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGxldCBkb2MgPSBkb20ub3duZXJEb2N1bWVudCwgd2luID0gZG9jLmRlZmF1bHRWaWV3IHx8IHdpbmRvdztcbiAgICBsZXQgbGVmdCA9IE1hdGgubWF4KDAsIHJlY3QubGVmdCksIHJpZ2h0ID0gTWF0aC5taW4od2luLmlubmVyV2lkdGgsIHJlY3QucmlnaHQpO1xuICAgIGxldCB0b3AgPSBNYXRoLm1heCgwLCByZWN0LnRvcCksIGJvdHRvbSA9IE1hdGgubWluKHdpbi5pbm5lckhlaWdodCwgcmVjdC5ib3R0b20pO1xuICAgIGZvciAobGV0IHBhcmVudCA9IGRvbS5wYXJlbnROb2RlOyBwYXJlbnQgJiYgcGFyZW50ICE9IGRvYy5ib2R5Oykge1xuICAgICAgICBpZiAocGFyZW50Lm5vZGVUeXBlID09IDEpIHtcbiAgICAgICAgICAgIGxldCBlbHQgPSBwYXJlbnQ7XG4gICAgICAgICAgICBsZXQgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbHQpO1xuICAgICAgICAgICAgaWYgKChlbHQuc2Nyb2xsSGVpZ2h0ID4gZWx0LmNsaWVudEhlaWdodCB8fCBlbHQuc2Nyb2xsV2lkdGggPiBlbHQuY2xpZW50V2lkdGgpICYmXG4gICAgICAgICAgICAgICAgc3R5bGUub3ZlcmZsb3cgIT0gXCJ2aXNpYmxlXCIpIHtcbiAgICAgICAgICAgICAgICBsZXQgcGFyZW50UmVjdCA9IGVsdC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICBsZWZ0ID0gTWF0aC5tYXgobGVmdCwgcGFyZW50UmVjdC5sZWZ0KTtcbiAgICAgICAgICAgICAgICByaWdodCA9IE1hdGgubWluKHJpZ2h0LCBwYXJlbnRSZWN0LnJpZ2h0KTtcbiAgICAgICAgICAgICAgICB0b3AgPSBNYXRoLm1heCh0b3AsIHBhcmVudFJlY3QudG9wKTtcbiAgICAgICAgICAgICAgICBib3R0b20gPSBwYXJlbnQgPT0gZG9tLnBhcmVudE5vZGUgPyBwYXJlbnRSZWN0LmJvdHRvbSA6IE1hdGgubWluKGJvdHRvbSwgcGFyZW50UmVjdC5ib3R0b20pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyZW50ID0gc3R5bGUucG9zaXRpb24gPT0gXCJhYnNvbHV0ZVwiIHx8IHN0eWxlLnBvc2l0aW9uID09IFwiZml4ZWRcIiA/IGVsdC5vZmZzZXRQYXJlbnQgOiBlbHQucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwYXJlbnQubm9kZVR5cGUgPT0gMTEpIHsgLy8gU2hhZG93IHJvb3RcbiAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudC5ob3N0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgbGVmdDogbGVmdCAtIHJlY3QubGVmdCwgcmlnaHQ6IE1hdGgubWF4KGxlZnQsIHJpZ2h0KSAtIHJlY3QubGVmdCxcbiAgICAgICAgdG9wOiB0b3AgLSAocmVjdC50b3AgKyBwYWRkaW5nVG9wKSwgYm90dG9tOiBNYXRoLm1heCh0b3AsIGJvdHRvbSkgLSAocmVjdC50b3AgKyBwYWRkaW5nVG9wKSB9O1xufVxuZnVuY3Rpb24gZnVsbFBpeGVsUmFuZ2UoZG9tLCBwYWRkaW5nVG9wKSB7XG4gICAgbGV0IHJlY3QgPSBkb20uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgcmV0dXJuIHsgbGVmdDogMCwgcmlnaHQ6IHJlY3QucmlnaHQgLSByZWN0LmxlZnQsXG4gICAgICAgIHRvcDogcGFkZGluZ1RvcCwgYm90dG9tOiByZWN0LmJvdHRvbSAtIChyZWN0LnRvcCArIHBhZGRpbmdUb3ApIH07XG59XG4vLyBMaW5lIGdhcHMgYXJlIHBsYWNlaG9sZGVyIHdpZGdldHMgdXNlZCB0byBoaWRlIHBpZWNlcyBvZiBvdmVybG9uZ1xuLy8gbGluZXMgd2l0aGluIHRoZSB2aWV3cG9ydCwgYXMgYSBrbHVkZ2UgdG8ga2VlcCB0aGUgZWRpdG9yXG4vLyByZXNwb25zaXZlIHdoZW4gYSByaWRpY3Vsb3VzbHkgbG9uZyBsaW5lIGlzIGxvYWRlZCBpbnRvIGl0LlxuY2xhc3MgTGluZUdhcCB7XG4gICAgY29uc3RydWN0b3IoZnJvbSwgdG8sIHNpemUpIHtcbiAgICAgICAgdGhpcy5mcm9tID0gZnJvbTtcbiAgICAgICAgdGhpcy50byA9IHRvO1xuICAgICAgICB0aGlzLnNpemUgPSBzaXplO1xuICAgIH1cbiAgICBzdGF0aWMgc2FtZShhLCBiKSB7XG4gICAgICAgIGlmIChhLmxlbmd0aCAhPSBiLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgZ0EgPSBhW2ldLCBnQiA9IGJbaV07XG4gICAgICAgICAgICBpZiAoZ0EuZnJvbSAhPSBnQi5mcm9tIHx8IGdBLnRvICE9IGdCLnRvIHx8IGdBLnNpemUgIT0gZ0Iuc2l6ZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGRyYXcodmlld1N0YXRlLCB3cmFwcGluZykge1xuICAgICAgICByZXR1cm4gRGVjb3JhdGlvbi5yZXBsYWNlKHtcbiAgICAgICAgICAgIHdpZGdldDogbmV3IExpbmVHYXBXaWRnZXQodGhpcy5zaXplICogKHdyYXBwaW5nID8gdmlld1N0YXRlLnNjYWxlWSA6IHZpZXdTdGF0ZS5zY2FsZVgpLCB3cmFwcGluZylcbiAgICAgICAgfSkucmFuZ2UodGhpcy5mcm9tLCB0aGlzLnRvKTtcbiAgICB9XG59XG5jbGFzcyBMaW5lR2FwV2lkZ2V0IGV4dGVuZHMgV2lkZ2V0VHlwZSB7XG4gICAgY29uc3RydWN0b3Ioc2l6ZSwgdmVydGljYWwpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5zaXplID0gc2l6ZTtcbiAgICAgICAgdGhpcy52ZXJ0aWNhbCA9IHZlcnRpY2FsO1xuICAgIH1cbiAgICBlcShvdGhlcikgeyByZXR1cm4gb3RoZXIuc2l6ZSA9PSB0aGlzLnNpemUgJiYgb3RoZXIudmVydGljYWwgPT0gdGhpcy52ZXJ0aWNhbDsgfVxuICAgIHRvRE9NKCkge1xuICAgICAgICBsZXQgZWx0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgaWYgKHRoaXMudmVydGljYWwpIHtcbiAgICAgICAgICAgIGVsdC5zdHlsZS5oZWlnaHQgPSB0aGlzLnNpemUgKyBcInB4XCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlbHQuc3R5bGUud2lkdGggPSB0aGlzLnNpemUgKyBcInB4XCI7XG4gICAgICAgICAgICBlbHQuc3R5bGUuaGVpZ2h0ID0gXCIycHhcIjtcbiAgICAgICAgICAgIGVsdC5zdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZWx0O1xuICAgIH1cbiAgICBnZXQgZXN0aW1hdGVkSGVpZ2h0KCkgeyByZXR1cm4gdGhpcy52ZXJ0aWNhbCA/IHRoaXMuc2l6ZSA6IC0xOyB9XG59XG5jbGFzcyBWaWV3U3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKHN0YXRlJDEpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlJDE7XG4gICAgICAgIC8vIFRoZXNlIGFyZSBjb250ZW50RE9NLWxvY2FsIGNvb3JkaW5hdGVzXG4gICAgICAgIHRoaXMucGl4ZWxWaWV3cG9ydCA9IHsgbGVmdDogMCwgcmlnaHQ6IHdpbmRvdy5pbm5lcldpZHRoLCB0b3A6IDAsIGJvdHRvbTogMCB9O1xuICAgICAgICB0aGlzLmluVmlldyA9IHRydWU7XG4gICAgICAgIHRoaXMucGFkZGluZ1RvcCA9IDA7IC8vIFBhZGRpbmcgYWJvdmUgdGhlIGRvY3VtZW50LCBzY2FsZWRcbiAgICAgICAgdGhpcy5wYWRkaW5nQm90dG9tID0gMDsgLy8gUGFkZGluZyBiZWxvdyB0aGUgZG9jdW1lbnQsIHNjYWxlZFxuICAgICAgICB0aGlzLmNvbnRlbnRET01XaWR0aCA9IDA7IC8vIGNvbnRlbnRET00uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGhcbiAgICAgICAgdGhpcy5jb250ZW50RE9NSGVpZ2h0ID0gMDsgLy8gY29udGVudERPTS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHRcbiAgICAgICAgdGhpcy5lZGl0b3JIZWlnaHQgPSAwOyAvLyBzY3JvbGxET00uY2xpZW50SGVpZ2h0LCB1bnNjYWxlZFxuICAgICAgICB0aGlzLmVkaXRvcldpZHRoID0gMDsgLy8gc2Nyb2xsRE9NLmNsaWVudFdpZHRoLCB1bnNjYWxlZFxuICAgICAgICB0aGlzLnNjcm9sbFRvcCA9IDA7IC8vIExhc3Qgc2VlbiBzY3JvbGxET00uc2Nyb2xsVG9wLCBzY2FsZWRcbiAgICAgICAgdGhpcy5zY3JvbGxlZFRvQm90dG9tID0gZmFsc2U7XG4gICAgICAgIC8vIFRoZSBDU1MtdHJhbnNmb3JtYXRpb24gc2NhbGUgb2YgdGhlIGVkaXRvciAodHJhbnNmb3JtZWQgc2l6ZSAvXG4gICAgICAgIC8vIGNvbmNyZXRlIHNpemUpXG4gICAgICAgIHRoaXMuc2NhbGVYID0gMTtcbiAgICAgICAgdGhpcy5zY2FsZVkgPSAxO1xuICAgICAgICAvLyBUaGUgdmVydGljYWwgcG9zaXRpb24gKGRvY3VtZW50LXJlbGF0aXZlKSB0byB3aGljaCB0byBhbmNob3IgdGhlXG4gICAgICAgIC8vIHNjcm9sbCBwb3NpdGlvbi4gLTEgbWVhbnMgYW5jaG9yIHRvIHRoZSBlbmQgb2YgdGhlIGRvY3VtZW50LlxuICAgICAgICB0aGlzLnNjcm9sbEFuY2hvclBvcyA9IDA7XG4gICAgICAgIC8vIFRoZSBoZWlnaHQgYXQgdGhlIGFuY2hvciBwb3NpdGlvbi4gU2V0IGJ5IHRoZSBET00gdXBkYXRlIHBoYXNlLlxuICAgICAgICAvLyAtMSBtZWFucyBubyBoZWlnaHQgYXZhaWxhYmxlLlxuICAgICAgICB0aGlzLnNjcm9sbEFuY2hvckhlaWdodCA9IC0xO1xuICAgICAgICAvLyBTZWUgVlAuTWF4RE9NSGVpZ2h0XG4gICAgICAgIHRoaXMuc2NhbGVyID0gSWRTY2FsZXI7XG4gICAgICAgIHRoaXMuc2Nyb2xsVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgLy8gQnJpZWZseSBzZXQgdG8gdHJ1ZSB3aGVuIHByaW50aW5nLCB0byBkaXNhYmxlIHZpZXdwb3J0IGxpbWl0aW5nXG4gICAgICAgIHRoaXMucHJpbnRpbmcgPSBmYWxzZTtcbiAgICAgICAgLy8gRmxhZyBzZXQgd2hlbiBlZGl0b3IgY29udGVudCB3YXMgcmVkcmF3biwgc28gdGhhdCB0aGUgbmV4dFxuICAgICAgICAvLyBtZWFzdXJlIHN0YWdlIGtub3dzIGl0IG11c3QgcmVhZCBET00gbGF5b3V0XG4gICAgICAgIHRoaXMubXVzdE1lYXN1cmVDb250ZW50ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kZWZhdWx0VGV4dERpcmVjdGlvbiA9IGV4cG9ydHMuRGlyZWN0aW9uLkxUUjtcbiAgICAgICAgdGhpcy52aXNpYmxlUmFuZ2VzID0gW107XG4gICAgICAgIC8vIEN1cnNvciAnYXNzb2MnIGlzIG9ubHkgc2lnbmlmaWNhbnQgd2hlbiB0aGUgY3Vyc29yIGlzIG9uIGEgbGluZVxuICAgICAgICAvLyB3cmFwIHBvaW50LCB3aGVyZSBpdCBtdXN0IHN0aWNrIHRvIHRoZSBjaGFyYWN0ZXIgdGhhdCBpdCBpc1xuICAgICAgICAvLyBhc3NvY2lhdGVkIHdpdGguIFNpbmNlIGJyb3dzZXJzIGRvbid0IHByb3ZpZGUgYSByZWFzb25hYmxlXG4gICAgICAgIC8vIGludGVyZmFjZSB0byBzZXQgb3IgcXVlcnkgdGhpcywgd2hlbiBhIHNlbGVjdGlvbiBpcyBzZXQgdGhhdFxuICAgICAgICAvLyBtaWdodCBjYXVzZSB0aGlzIHRvIGJlIHNpZ25pZmljYW50LCB0aGlzIGZsYWcgaXMgc2V0LiBUaGUgbmV4dFxuICAgICAgICAvLyBtZWFzdXJlIHBoYXNlIHdpbGwgY2hlY2sgd2hldGhlciB0aGUgY3Vyc29yIGlzIG9uIGEgbGluZS13cmFwcGluZ1xuICAgICAgICAvLyBib3VuZGFyeSBhbmQsIGlmIHNvLCByZXNldCBpdCB0byBtYWtlIHN1cmUgaXQgaXMgcG9zaXRpb25lZCBpblxuICAgICAgICAvLyB0aGUgcmlnaHQgcGxhY2UuXG4gICAgICAgIHRoaXMubXVzdEVuZm9yY2VDdXJzb3JBc3NvYyA9IGZhbHNlO1xuICAgICAgICBsZXQgZ3Vlc3NXcmFwcGluZyA9IHN0YXRlJDEuZmFjZXQoY29udGVudEF0dHJpYnV0ZXMpLnNvbWUodiA9PiB0eXBlb2YgdiAhPSBcImZ1bmN0aW9uXCIgJiYgdi5jbGFzcyA9PSBcImNtLWxpbmVXcmFwcGluZ1wiKTtcbiAgICAgICAgdGhpcy5oZWlnaHRPcmFjbGUgPSBuZXcgSGVpZ2h0T3JhY2xlKGd1ZXNzV3JhcHBpbmcpO1xuICAgICAgICB0aGlzLnN0YXRlRGVjbyA9IHN0YXRlJDEuZmFjZXQoZGVjb3JhdGlvbnMpLmZpbHRlcihkID0+IHR5cGVvZiBkICE9IFwiZnVuY3Rpb25cIik7XG4gICAgICAgIHRoaXMuaGVpZ2h0TWFwID0gSGVpZ2h0TWFwLmVtcHR5KCkuYXBwbHlDaGFuZ2VzKHRoaXMuc3RhdGVEZWNvLCBzdGF0ZS5UZXh0LmVtcHR5LCB0aGlzLmhlaWdodE9yYWNsZS5zZXREb2Moc3RhdGUkMS5kb2MpLCBbbmV3IENoYW5nZWRSYW5nZSgwLCAwLCAwLCBzdGF0ZSQxLmRvYy5sZW5ndGgpXSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLnZpZXdwb3J0ID0gdGhpcy5nZXRWaWV3cG9ydCgwLCBudWxsKTtcbiAgICAgICAgICAgIGlmICghdGhpcy51cGRhdGVGb3JWaWV3cG9ydCgpKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlVmlld3BvcnRMaW5lcygpO1xuICAgICAgICB0aGlzLmxpbmVHYXBzID0gdGhpcy5lbnN1cmVMaW5lR2FwcyhbXSk7XG4gICAgICAgIHRoaXMubGluZUdhcERlY28gPSBEZWNvcmF0aW9uLnNldCh0aGlzLmxpbmVHYXBzLm1hcChnYXAgPT4gZ2FwLmRyYXcodGhpcywgZmFsc2UpKSk7XG4gICAgICAgIHRoaXMuY29tcHV0ZVZpc2libGVSYW5nZXMoKTtcbiAgICB9XG4gICAgdXBkYXRlRm9yVmlld3BvcnQoKSB7XG4gICAgICAgIGxldCB2aWV3cG9ydHMgPSBbdGhpcy52aWV3cG9ydF0sIHsgbWFpbiB9ID0gdGhpcy5zdGF0ZS5zZWxlY3Rpb247XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IDE7IGkrKykge1xuICAgICAgICAgICAgbGV0IHBvcyA9IGkgPyBtYWluLmhlYWQgOiBtYWluLmFuY2hvcjtcbiAgICAgICAgICAgIGlmICghdmlld3BvcnRzLnNvbWUoKHsgZnJvbSwgdG8gfSkgPT4gcG9zID49IGZyb20gJiYgcG9zIDw9IHRvKSkge1xuICAgICAgICAgICAgICAgIGxldCB7IGZyb20sIHRvIH0gPSB0aGlzLmxpbmVCbG9ja0F0KHBvcyk7XG4gICAgICAgICAgICAgICAgdmlld3BvcnRzLnB1c2gobmV3IFZpZXdwb3J0KGZyb20sIHRvKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52aWV3cG9ydHMgPSB2aWV3cG9ydHMuc29ydCgoYSwgYikgPT4gYS5mcm9tIC0gYi5mcm9tKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudXBkYXRlU2NhbGVyKCk7XG4gICAgfVxuICAgIHVwZGF0ZVNjYWxlcigpIHtcbiAgICAgICAgbGV0IHNjYWxlciA9IHRoaXMuc2NhbGVyO1xuICAgICAgICB0aGlzLnNjYWxlciA9IHRoaXMuaGVpZ2h0TWFwLmhlaWdodCA8PSA3MDAwMDAwIC8qIFZQLk1heERPTUhlaWdodCAqLyA/IElkU2NhbGVyIDpcbiAgICAgICAgICAgIG5ldyBCaWdTY2FsZXIodGhpcy5oZWlnaHRPcmFjbGUsIHRoaXMuaGVpZ2h0TWFwLCB0aGlzLnZpZXdwb3J0cyk7XG4gICAgICAgIHJldHVybiBzY2FsZXIuZXEodGhpcy5zY2FsZXIpID8gMCA6IDIgLyogVXBkYXRlRmxhZy5IZWlnaHQgKi87XG4gICAgfVxuICAgIHVwZGF0ZVZpZXdwb3J0TGluZXMoKSB7XG4gICAgICAgIHRoaXMudmlld3BvcnRMaW5lcyA9IFtdO1xuICAgICAgICB0aGlzLmhlaWdodE1hcC5mb3JFYWNoTGluZSh0aGlzLnZpZXdwb3J0LmZyb20sIHRoaXMudmlld3BvcnQudG8sIHRoaXMuaGVpZ2h0T3JhY2xlLnNldERvYyh0aGlzLnN0YXRlLmRvYyksIDAsIDAsIGJsb2NrID0+IHtcbiAgICAgICAgICAgIHRoaXMudmlld3BvcnRMaW5lcy5wdXNoKHNjYWxlQmxvY2soYmxvY2ssIHRoaXMuc2NhbGVyKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB1cGRhdGUodXBkYXRlLCBzY3JvbGxUYXJnZXQgPSBudWxsKSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB1cGRhdGUuc3RhdGU7XG4gICAgICAgIGxldCBwcmV2RGVjbyA9IHRoaXMuc3RhdGVEZWNvO1xuICAgICAgICB0aGlzLnN0YXRlRGVjbyA9IHRoaXMuc3RhdGUuZmFjZXQoZGVjb3JhdGlvbnMpLmZpbHRlcihkID0+IHR5cGVvZiBkICE9IFwiZnVuY3Rpb25cIik7XG4gICAgICAgIGxldCBjb250ZW50Q2hhbmdlcyA9IHVwZGF0ZS5jaGFuZ2VkUmFuZ2VzO1xuICAgICAgICBsZXQgaGVpZ2h0Q2hhbmdlcyA9IENoYW5nZWRSYW5nZS5leHRlbmRXaXRoUmFuZ2VzKGNvbnRlbnRDaGFuZ2VzLCBoZWlnaHRSZWxldmFudERlY29DaGFuZ2VzKHByZXZEZWNvLCB0aGlzLnN0YXRlRGVjbywgdXBkYXRlID8gdXBkYXRlLmNoYW5nZXMgOiBzdGF0ZS5DaGFuZ2VTZXQuZW1wdHkodGhpcy5zdGF0ZS5kb2MubGVuZ3RoKSkpO1xuICAgICAgICBsZXQgcHJldkhlaWdodCA9IHRoaXMuaGVpZ2h0TWFwLmhlaWdodDtcbiAgICAgICAgbGV0IHNjcm9sbEFuY2hvciA9IHRoaXMuc2Nyb2xsZWRUb0JvdHRvbSA/IG51bGwgOiB0aGlzLnNjcm9sbEFuY2hvckF0KHRoaXMuc2Nyb2xsVG9wKTtcbiAgICAgICAgdGhpcy5oZWlnaHRNYXAgPSB0aGlzLmhlaWdodE1hcC5hcHBseUNoYW5nZXModGhpcy5zdGF0ZURlY28sIHVwZGF0ZS5zdGFydFN0YXRlLmRvYywgdGhpcy5oZWlnaHRPcmFjbGUuc2V0RG9jKHRoaXMuc3RhdGUuZG9jKSwgaGVpZ2h0Q2hhbmdlcyk7XG4gICAgICAgIGlmICh0aGlzLmhlaWdodE1hcC5oZWlnaHQgIT0gcHJldkhlaWdodClcbiAgICAgICAgICAgIHVwZGF0ZS5mbGFncyB8PSAyIC8qIFVwZGF0ZUZsYWcuSGVpZ2h0ICovO1xuICAgICAgICBpZiAoc2Nyb2xsQW5jaG9yKSB7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbEFuY2hvclBvcyA9IHVwZGF0ZS5jaGFuZ2VzLm1hcFBvcyhzY3JvbGxBbmNob3IuZnJvbSwgLTEpO1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxBbmNob3JIZWlnaHQgPSBzY3JvbGxBbmNob3IudG9wO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxBbmNob3JQb3MgPSAtMTtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsQW5jaG9ySGVpZ2h0ID0gdGhpcy5oZWlnaHRNYXAuaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIGxldCB2aWV3cG9ydCA9IGhlaWdodENoYW5nZXMubGVuZ3RoID8gdGhpcy5tYXBWaWV3cG9ydCh0aGlzLnZpZXdwb3J0LCB1cGRhdGUuY2hhbmdlcykgOiB0aGlzLnZpZXdwb3J0O1xuICAgICAgICBpZiAoc2Nyb2xsVGFyZ2V0ICYmIChzY3JvbGxUYXJnZXQucmFuZ2UuaGVhZCA8IHZpZXdwb3J0LmZyb20gfHwgc2Nyb2xsVGFyZ2V0LnJhbmdlLmhlYWQgPiB2aWV3cG9ydC50bykgfHxcbiAgICAgICAgICAgICF0aGlzLnZpZXdwb3J0SXNBcHByb3ByaWF0ZSh2aWV3cG9ydCkpXG4gICAgICAgICAgICB2aWV3cG9ydCA9IHRoaXMuZ2V0Vmlld3BvcnQoMCwgc2Nyb2xsVGFyZ2V0KTtcbiAgICAgICAgbGV0IHZpZXdwb3J0Q2hhbmdlID0gdmlld3BvcnQuZnJvbSAhPSB0aGlzLnZpZXdwb3J0LmZyb20gfHwgdmlld3BvcnQudG8gIT0gdGhpcy52aWV3cG9ydC50bztcbiAgICAgICAgdGhpcy52aWV3cG9ydCA9IHZpZXdwb3J0O1xuICAgICAgICB1cGRhdGUuZmxhZ3MgfD0gdGhpcy51cGRhdGVGb3JWaWV3cG9ydCgpO1xuICAgICAgICBpZiAodmlld3BvcnRDaGFuZ2UgfHwgIXVwZGF0ZS5jaGFuZ2VzLmVtcHR5IHx8ICh1cGRhdGUuZmxhZ3MgJiAyIC8qIFVwZGF0ZUZsYWcuSGVpZ2h0ICovKSlcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVmlld3BvcnRMaW5lcygpO1xuICAgICAgICBpZiAodGhpcy5saW5lR2Fwcy5sZW5ndGggfHwgdGhpcy52aWV3cG9ydC50byAtIHRoaXMudmlld3BvcnQuZnJvbSA+ICgyMDAwIC8qIExHLk1hcmdpbiAqLyA8PCAxKSlcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTGluZUdhcHModGhpcy5lbnN1cmVMaW5lR2Fwcyh0aGlzLm1hcExpbmVHYXBzKHRoaXMubGluZUdhcHMsIHVwZGF0ZS5jaGFuZ2VzKSkpO1xuICAgICAgICB1cGRhdGUuZmxhZ3MgfD0gdGhpcy5jb21wdXRlVmlzaWJsZVJhbmdlcygpO1xuICAgICAgICBpZiAoc2Nyb2xsVGFyZ2V0KVxuICAgICAgICAgICAgdGhpcy5zY3JvbGxUYXJnZXQgPSBzY3JvbGxUYXJnZXQ7XG4gICAgICAgIGlmICghdGhpcy5tdXN0RW5mb3JjZUN1cnNvckFzc29jICYmIHVwZGF0ZS5zZWxlY3Rpb25TZXQgJiYgdXBkYXRlLnZpZXcubGluZVdyYXBwaW5nICYmXG4gICAgICAgICAgICB1cGRhdGUuc3RhdGUuc2VsZWN0aW9uLm1haW4uZW1wdHkgJiYgdXBkYXRlLnN0YXRlLnNlbGVjdGlvbi5tYWluLmFzc29jICYmXG4gICAgICAgICAgICAhdXBkYXRlLnN0YXRlLmZhY2V0KG5hdGl2ZVNlbGVjdGlvbkhpZGRlbikpXG4gICAgICAgICAgICB0aGlzLm11c3RFbmZvcmNlQ3Vyc29yQXNzb2MgPSB0cnVlO1xuICAgIH1cbiAgICBtZWFzdXJlKHZpZXcpIHtcbiAgICAgICAgbGV0IGRvbSA9IHZpZXcuY29udGVudERPTSwgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb20pO1xuICAgICAgICBsZXQgb3JhY2xlID0gdGhpcy5oZWlnaHRPcmFjbGU7XG4gICAgICAgIGxldCB3aGl0ZVNwYWNlID0gc3R5bGUud2hpdGVTcGFjZTtcbiAgICAgICAgdGhpcy5kZWZhdWx0VGV4dERpcmVjdGlvbiA9IHN0eWxlLmRpcmVjdGlvbiA9PSBcInJ0bFwiID8gZXhwb3J0cy5EaXJlY3Rpb24uUlRMIDogZXhwb3J0cy5EaXJlY3Rpb24uTFRSO1xuICAgICAgICBsZXQgcmVmcmVzaCA9IHRoaXMuaGVpZ2h0T3JhY2xlLm11c3RSZWZyZXNoRm9yV3JhcHBpbmcod2hpdGVTcGFjZSk7XG4gICAgICAgIGxldCBkb21SZWN0ID0gZG9tLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBsZXQgbWVhc3VyZUNvbnRlbnQgPSByZWZyZXNoIHx8IHRoaXMubXVzdE1lYXN1cmVDb250ZW50IHx8IHRoaXMuY29udGVudERPTUhlaWdodCAhPSBkb21SZWN0LmhlaWdodDtcbiAgICAgICAgdGhpcy5jb250ZW50RE9NSGVpZ2h0ID0gZG9tUmVjdC5oZWlnaHQ7XG4gICAgICAgIHRoaXMubXVzdE1lYXN1cmVDb250ZW50ID0gZmFsc2U7XG4gICAgICAgIGxldCByZXN1bHQgPSAwLCBiaWFzID0gMDtcbiAgICAgICAgaWYgKGRvbVJlY3Qud2lkdGggJiYgZG9tUmVjdC5oZWlnaHQpIHtcbiAgICAgICAgICAgIGxldCB7IHNjYWxlWCwgc2NhbGVZIH0gPSBnZXRTY2FsZShkb20sIGRvbVJlY3QpO1xuICAgICAgICAgICAgaWYgKHNjYWxlWCA+IC4wMDUgJiYgTWF0aC5hYnModGhpcy5zY2FsZVggLSBzY2FsZVgpID4gLjAwNSB8fFxuICAgICAgICAgICAgICAgIHNjYWxlWSA+IC4wMDUgJiYgTWF0aC5hYnModGhpcy5zY2FsZVkgLSBzY2FsZVkpID4gLjAwNSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2NhbGVYID0gc2NhbGVYO1xuICAgICAgICAgICAgICAgIHRoaXMuc2NhbGVZID0gc2NhbGVZO1xuICAgICAgICAgICAgICAgIHJlc3VsdCB8PSA4IC8qIFVwZGF0ZUZsYWcuR2VvbWV0cnkgKi87XG4gICAgICAgICAgICAgICAgcmVmcmVzaCA9IG1lYXN1cmVDb250ZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBWZXJ0aWNhbCBwYWRkaW5nXG4gICAgICAgIGxldCBwYWRkaW5nVG9wID0gKHBhcnNlSW50KHN0eWxlLnBhZGRpbmdUb3ApIHx8IDApICogdGhpcy5zY2FsZVk7XG4gICAgICAgIGxldCBwYWRkaW5nQm90dG9tID0gKHBhcnNlSW50KHN0eWxlLnBhZGRpbmdCb3R0b20pIHx8IDApICogdGhpcy5zY2FsZVk7XG4gICAgICAgIGlmICh0aGlzLnBhZGRpbmdUb3AgIT0gcGFkZGluZ1RvcCB8fCB0aGlzLnBhZGRpbmdCb3R0b20gIT0gcGFkZGluZ0JvdHRvbSkge1xuICAgICAgICAgICAgdGhpcy5wYWRkaW5nVG9wID0gcGFkZGluZ1RvcDtcbiAgICAgICAgICAgIHRoaXMucGFkZGluZ0JvdHRvbSA9IHBhZGRpbmdCb3R0b207XG4gICAgICAgICAgICByZXN1bHQgfD0gOCAvKiBVcGRhdGVGbGFnLkdlb21ldHJ5ICovIHwgMiAvKiBVcGRhdGVGbGFnLkhlaWdodCAqLztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5lZGl0b3JXaWR0aCAhPSB2aWV3LnNjcm9sbERPTS5jbGllbnRXaWR0aCkge1xuICAgICAgICAgICAgaWYgKG9yYWNsZS5saW5lV3JhcHBpbmcpXG4gICAgICAgICAgICAgICAgbWVhc3VyZUNvbnRlbnQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5lZGl0b3JXaWR0aCA9IHZpZXcuc2Nyb2xsRE9NLmNsaWVudFdpZHRoO1xuICAgICAgICAgICAgcmVzdWx0IHw9IDggLyogVXBkYXRlRmxhZy5HZW9tZXRyeSAqLztcbiAgICAgICAgfVxuICAgICAgICBsZXQgc2Nyb2xsVG9wID0gdmlldy5zY3JvbGxET00uc2Nyb2xsVG9wICogdGhpcy5zY2FsZVk7XG4gICAgICAgIGlmICh0aGlzLnNjcm9sbFRvcCAhPSBzY3JvbGxUb3ApIHtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsQW5jaG9ySGVpZ2h0ID0gLTE7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNjcm9sbGVkVG9Cb3R0b20gPSBpc1Njcm9sbGVkVG9Cb3R0b20odmlldy5zY3JvbGxET00pO1xuICAgICAgICAvLyBQaXhlbCB2aWV3cG9ydFxuICAgICAgICBsZXQgcGl4ZWxWaWV3cG9ydCA9ICh0aGlzLnByaW50aW5nID8gZnVsbFBpeGVsUmFuZ2UgOiB2aXNpYmxlUGl4ZWxSYW5nZSkoZG9tLCB0aGlzLnBhZGRpbmdUb3ApO1xuICAgICAgICBsZXQgZFRvcCA9IHBpeGVsVmlld3BvcnQudG9wIC0gdGhpcy5waXhlbFZpZXdwb3J0LnRvcCwgZEJvdHRvbSA9IHBpeGVsVmlld3BvcnQuYm90dG9tIC0gdGhpcy5waXhlbFZpZXdwb3J0LmJvdHRvbTtcbiAgICAgICAgdGhpcy5waXhlbFZpZXdwb3J0ID0gcGl4ZWxWaWV3cG9ydDtcbiAgICAgICAgbGV0IGluVmlldyA9IHRoaXMucGl4ZWxWaWV3cG9ydC5ib3R0b20gPiB0aGlzLnBpeGVsVmlld3BvcnQudG9wICYmIHRoaXMucGl4ZWxWaWV3cG9ydC5yaWdodCA+IHRoaXMucGl4ZWxWaWV3cG9ydC5sZWZ0O1xuICAgICAgICBpZiAoaW5WaWV3ICE9IHRoaXMuaW5WaWV3KSB7XG4gICAgICAgICAgICB0aGlzLmluVmlldyA9IGluVmlldztcbiAgICAgICAgICAgIGlmIChpblZpZXcpXG4gICAgICAgICAgICAgICAgbWVhc3VyZUNvbnRlbnQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5pblZpZXcgJiYgIXRoaXMuc2Nyb2xsVGFyZ2V0KVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIGxldCBjb250ZW50V2lkdGggPSBkb21SZWN0LndpZHRoO1xuICAgICAgICBpZiAodGhpcy5jb250ZW50RE9NV2lkdGggIT0gY29udGVudFdpZHRoIHx8IHRoaXMuZWRpdG9ySGVpZ2h0ICE9IHZpZXcuc2Nyb2xsRE9NLmNsaWVudEhlaWdodCkge1xuICAgICAgICAgICAgdGhpcy5jb250ZW50RE9NV2lkdGggPSBkb21SZWN0LndpZHRoO1xuICAgICAgICAgICAgdGhpcy5lZGl0b3JIZWlnaHQgPSB2aWV3LnNjcm9sbERPTS5jbGllbnRIZWlnaHQ7XG4gICAgICAgICAgICByZXN1bHQgfD0gOCAvKiBVcGRhdGVGbGFnLkdlb21ldHJ5ICovO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZWFzdXJlQ29udGVudCkge1xuICAgICAgICAgICAgbGV0IGxpbmVIZWlnaHRzID0gdmlldy5kb2NWaWV3Lm1lYXN1cmVWaXNpYmxlTGluZUhlaWdodHModGhpcy52aWV3cG9ydCk7XG4gICAgICAgICAgICBpZiAob3JhY2xlLm11c3RSZWZyZXNoRm9ySGVpZ2h0cyhsaW5lSGVpZ2h0cykpXG4gICAgICAgICAgICAgICAgcmVmcmVzaCA9IHRydWU7XG4gICAgICAgICAgICBpZiAocmVmcmVzaCB8fCBvcmFjbGUubGluZVdyYXBwaW5nICYmIE1hdGguYWJzKGNvbnRlbnRXaWR0aCAtIHRoaXMuY29udGVudERPTVdpZHRoKSA+IG9yYWNsZS5jaGFyV2lkdGgpIHtcbiAgICAgICAgICAgICAgICBsZXQgeyBsaW5lSGVpZ2h0LCBjaGFyV2lkdGgsIHRleHRIZWlnaHQgfSA9IHZpZXcuZG9jVmlldy5tZWFzdXJlVGV4dFNpemUoKTtcbiAgICAgICAgICAgICAgICByZWZyZXNoID0gbGluZUhlaWdodCA+IDAgJiYgb3JhY2xlLnJlZnJlc2god2hpdGVTcGFjZSwgbGluZUhlaWdodCwgY2hhcldpZHRoLCB0ZXh0SGVpZ2h0LCBjb250ZW50V2lkdGggLyBjaGFyV2lkdGgsIGxpbmVIZWlnaHRzKTtcbiAgICAgICAgICAgICAgICBpZiAocmVmcmVzaCkge1xuICAgICAgICAgICAgICAgICAgICB2aWV3LmRvY1ZpZXcubWluV2lkdGggPSAwO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgfD0gOCAvKiBVcGRhdGVGbGFnLkdlb21ldHJ5ICovO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkVG9wID4gMCAmJiBkQm90dG9tID4gMClcbiAgICAgICAgICAgICAgICBiaWFzID0gTWF0aC5tYXgoZFRvcCwgZEJvdHRvbSk7XG4gICAgICAgICAgICBlbHNlIGlmIChkVG9wIDwgMCAmJiBkQm90dG9tIDwgMClcbiAgICAgICAgICAgICAgICBiaWFzID0gTWF0aC5taW4oZFRvcCwgZEJvdHRvbSk7XG4gICAgICAgICAgICBvcmFjbGUuaGVpZ2h0Q2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICAgICAgZm9yIChsZXQgdnAgb2YgdGhpcy52aWV3cG9ydHMpIHtcbiAgICAgICAgICAgICAgICBsZXQgaGVpZ2h0cyA9IHZwLmZyb20gPT0gdGhpcy52aWV3cG9ydC5mcm9tID8gbGluZUhlaWdodHMgOiB2aWV3LmRvY1ZpZXcubWVhc3VyZVZpc2libGVMaW5lSGVpZ2h0cyh2cCk7XG4gICAgICAgICAgICAgICAgdGhpcy5oZWlnaHRNYXAgPSAocmVmcmVzaCA/IEhlaWdodE1hcC5lbXB0eSgpLmFwcGx5Q2hhbmdlcyh0aGlzLnN0YXRlRGVjbywgc3RhdGUuVGV4dC5lbXB0eSwgdGhpcy5oZWlnaHRPcmFjbGUsIFtuZXcgQ2hhbmdlZFJhbmdlKDAsIDAsIDAsIHZpZXcuc3RhdGUuZG9jLmxlbmd0aCldKSA6IHRoaXMuaGVpZ2h0TWFwKS51cGRhdGVIZWlnaHQob3JhY2xlLCAwLCByZWZyZXNoLCBuZXcgTWVhc3VyZWRIZWlnaHRzKHZwLmZyb20sIGhlaWdodHMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcmFjbGUuaGVpZ2h0Q2hhbmdlZClcbiAgICAgICAgICAgICAgICByZXN1bHQgfD0gMiAvKiBVcGRhdGVGbGFnLkhlaWdodCAqLztcbiAgICAgICAgfVxuICAgICAgICBsZXQgdmlld3BvcnRDaGFuZ2UgPSAhdGhpcy52aWV3cG9ydElzQXBwcm9wcmlhdGUodGhpcy52aWV3cG9ydCwgYmlhcykgfHxcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsVGFyZ2V0ICYmICh0aGlzLnNjcm9sbFRhcmdldC5yYW5nZS5oZWFkIDwgdGhpcy52aWV3cG9ydC5mcm9tIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxUYXJnZXQucmFuZ2UuaGVhZCA+IHRoaXMudmlld3BvcnQudG8pO1xuICAgICAgICBpZiAodmlld3BvcnRDaGFuZ2UpIHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQgJiAyIC8qIFVwZGF0ZUZsYWcuSGVpZ2h0ICovKVxuICAgICAgICAgICAgICAgIHJlc3VsdCB8PSB0aGlzLnVwZGF0ZVNjYWxlcigpO1xuICAgICAgICAgICAgdGhpcy52aWV3cG9ydCA9IHRoaXMuZ2V0Vmlld3BvcnQoYmlhcywgdGhpcy5zY3JvbGxUYXJnZXQpO1xuICAgICAgICAgICAgcmVzdWx0IHw9IHRoaXMudXBkYXRlRm9yVmlld3BvcnQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHJlc3VsdCAmIDIgLyogVXBkYXRlRmxhZy5IZWlnaHQgKi8pIHx8IHZpZXdwb3J0Q2hhbmdlKVxuICAgICAgICAgICAgdGhpcy51cGRhdGVWaWV3cG9ydExpbmVzKCk7XG4gICAgICAgIGlmICh0aGlzLmxpbmVHYXBzLmxlbmd0aCB8fCB0aGlzLnZpZXdwb3J0LnRvIC0gdGhpcy52aWV3cG9ydC5mcm9tID4gKDIwMDAgLyogTEcuTWFyZ2luICovIDw8IDEpKVxuICAgICAgICAgICAgdGhpcy51cGRhdGVMaW5lR2Fwcyh0aGlzLmVuc3VyZUxpbmVHYXBzKHJlZnJlc2ggPyBbXSA6IHRoaXMubGluZUdhcHMsIHZpZXcpKTtcbiAgICAgICAgcmVzdWx0IHw9IHRoaXMuY29tcHV0ZVZpc2libGVSYW5nZXMoKTtcbiAgICAgICAgaWYgKHRoaXMubXVzdEVuZm9yY2VDdXJzb3JBc3NvYykge1xuICAgICAgICAgICAgdGhpcy5tdXN0RW5mb3JjZUN1cnNvckFzc29jID0gZmFsc2U7XG4gICAgICAgICAgICAvLyBUaGlzIGlzIGRvbmUgaW4gdGhlIHJlYWQgc3RhZ2UsIGJlY2F1c2UgbW92aW5nIHRoZSBzZWxlY3Rpb25cbiAgICAgICAgICAgIC8vIHRvIGEgbGluZSBlbmQgaXMgZ29pbmcgdG8gdHJpZ2dlciBhIGxheW91dCBhbnl3YXksIHNvIGl0XG4gICAgICAgICAgICAvLyBjYW4ndCBiZSBhIHB1cmUgd3JpdGUuIEl0IHNob3VsZCBiZSByYXJlIHRoYXQgaXQgZG9lcyBhbnlcbiAgICAgICAgICAgIC8vIHdyaXRpbmcuXG4gICAgICAgICAgICB2aWV3LmRvY1ZpZXcuZW5mb3JjZUN1cnNvckFzc29jKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgZ2V0IHZpc2libGVUb3AoKSB7IHJldHVybiB0aGlzLnNjYWxlci5mcm9tRE9NKHRoaXMucGl4ZWxWaWV3cG9ydC50b3ApOyB9XG4gICAgZ2V0IHZpc2libGVCb3R0b20oKSB7IHJldHVybiB0aGlzLnNjYWxlci5mcm9tRE9NKHRoaXMucGl4ZWxWaWV3cG9ydC5ib3R0b20pOyB9XG4gICAgZ2V0Vmlld3BvcnQoYmlhcywgc2Nyb2xsVGFyZ2V0KSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCBkaXZpZGUgVlAuTWFyZ2luIGJldHdlZW4gdGhlIHRvcCBhbmQgdGhlXG4gICAgICAgIC8vIGJvdHRvbSwgZGVwZW5kaW5nIG9uIHRoZSBiaWFzICh0aGUgY2hhbmdlIGluIHZpZXdwb3J0IHBvc2l0aW9uXG4gICAgICAgIC8vIHNpbmNlIHRoZSBsYXN0IHVwZGF0ZSkuIEl0J2xsIGhvbGQgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxXG4gICAgICAgIGxldCBtYXJnaW5Ub3AgPSAwLjUgLSBNYXRoLm1heCgtMC41LCBNYXRoLm1pbigwLjUsIGJpYXMgLyAxMDAwIC8qIFZQLk1hcmdpbiAqLyAvIDIpKTtcbiAgICAgICAgbGV0IG1hcCA9IHRoaXMuaGVpZ2h0TWFwLCBvcmFjbGUgPSB0aGlzLmhlaWdodE9yYWNsZTtcbiAgICAgICAgbGV0IHsgdmlzaWJsZVRvcCwgdmlzaWJsZUJvdHRvbSB9ID0gdGhpcztcbiAgICAgICAgbGV0IHZpZXdwb3J0ID0gbmV3IFZpZXdwb3J0KG1hcC5saW5lQXQodmlzaWJsZVRvcCAtIG1hcmdpblRvcCAqIDEwMDAgLyogVlAuTWFyZ2luICovLCBRdWVyeVR5cGUuQnlIZWlnaHQsIG9yYWNsZSwgMCwgMCkuZnJvbSwgbWFwLmxpbmVBdCh2aXNpYmxlQm90dG9tICsgKDEgLSBtYXJnaW5Ub3ApICogMTAwMCAvKiBWUC5NYXJnaW4gKi8sIFF1ZXJ5VHlwZS5CeUhlaWdodCwgb3JhY2xlLCAwLCAwKS50byk7XG4gICAgICAgIC8vIElmIHNjcm9sbFRhcmdldCBpcyBnaXZlbiwgbWFrZSBzdXJlIHRoZSB2aWV3cG9ydCBpbmNsdWRlcyB0aGF0IHBvc2l0aW9uXG4gICAgICAgIGlmIChzY3JvbGxUYXJnZXQpIHtcbiAgICAgICAgICAgIGxldCB7IGhlYWQgfSA9IHNjcm9sbFRhcmdldC5yYW5nZTtcbiAgICAgICAgICAgIGlmIChoZWFkIDwgdmlld3BvcnQuZnJvbSB8fCBoZWFkID4gdmlld3BvcnQudG8pIHtcbiAgICAgICAgICAgICAgICBsZXQgdmlld0hlaWdodCA9IE1hdGgubWluKHRoaXMuZWRpdG9ySGVpZ2h0LCB0aGlzLnBpeGVsVmlld3BvcnQuYm90dG9tIC0gdGhpcy5waXhlbFZpZXdwb3J0LnRvcCk7XG4gICAgICAgICAgICAgICAgbGV0IGJsb2NrID0gbWFwLmxpbmVBdChoZWFkLCBRdWVyeVR5cGUuQnlQb3MsIG9yYWNsZSwgMCwgMCksIHRvcFBvcztcbiAgICAgICAgICAgICAgICBpZiAoc2Nyb2xsVGFyZ2V0LnkgPT0gXCJjZW50ZXJcIilcbiAgICAgICAgICAgICAgICAgICAgdG9wUG9zID0gKGJsb2NrLnRvcCArIGJsb2NrLmJvdHRvbSkgLyAyIC0gdmlld0hlaWdodCAvIDI7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2Nyb2xsVGFyZ2V0LnkgPT0gXCJzdGFydFwiIHx8IHNjcm9sbFRhcmdldC55ID09IFwibmVhcmVzdFwiICYmIGhlYWQgPCB2aWV3cG9ydC5mcm9tKVxuICAgICAgICAgICAgICAgICAgICB0b3BQb3MgPSBibG9jay50b3A7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0b3BQb3MgPSBibG9jay5ib3R0b20gLSB2aWV3SGVpZ2h0O1xuICAgICAgICAgICAgICAgIHZpZXdwb3J0ID0gbmV3IFZpZXdwb3J0KG1hcC5saW5lQXQodG9wUG9zIC0gMTAwMCAvKiBWUC5NYXJnaW4gKi8gLyAyLCBRdWVyeVR5cGUuQnlIZWlnaHQsIG9yYWNsZSwgMCwgMCkuZnJvbSwgbWFwLmxpbmVBdCh0b3BQb3MgKyB2aWV3SGVpZ2h0ICsgMTAwMCAvKiBWUC5NYXJnaW4gKi8gLyAyLCBRdWVyeVR5cGUuQnlIZWlnaHQsIG9yYWNsZSwgMCwgMCkudG8pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2aWV3cG9ydDtcbiAgICB9XG4gICAgbWFwVmlld3BvcnQodmlld3BvcnQsIGNoYW5nZXMpIHtcbiAgICAgICAgbGV0IGZyb20gPSBjaGFuZ2VzLm1hcFBvcyh2aWV3cG9ydC5mcm9tLCAtMSksIHRvID0gY2hhbmdlcy5tYXBQb3Modmlld3BvcnQudG8sIDEpO1xuICAgICAgICByZXR1cm4gbmV3IFZpZXdwb3J0KHRoaXMuaGVpZ2h0TWFwLmxpbmVBdChmcm9tLCBRdWVyeVR5cGUuQnlQb3MsIHRoaXMuaGVpZ2h0T3JhY2xlLCAwLCAwKS5mcm9tLCB0aGlzLmhlaWdodE1hcC5saW5lQXQodG8sIFF1ZXJ5VHlwZS5CeVBvcywgdGhpcy5oZWlnaHRPcmFjbGUsIDAsIDApLnRvKTtcbiAgICB9XG4gICAgLy8gQ2hlY2tzIGlmIGEgZ2l2ZW4gdmlld3BvcnQgY292ZXJzIHRoZSB2aXNpYmxlIHBhcnQgb2YgdGhlXG4gICAgLy8gZG9jdW1lbnQgYW5kIG5vdCB0b28gbXVjaCBiZXlvbmQgdGhhdC5cbiAgICB2aWV3cG9ydElzQXBwcm9wcmlhdGUoeyBmcm9tLCB0byB9LCBiaWFzID0gMCkge1xuICAgICAgICBpZiAoIXRoaXMuaW5WaWV3KVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGxldCB7IHRvcCB9ID0gdGhpcy5oZWlnaHRNYXAubGluZUF0KGZyb20sIFF1ZXJ5VHlwZS5CeVBvcywgdGhpcy5oZWlnaHRPcmFjbGUsIDAsIDApO1xuICAgICAgICBsZXQgeyBib3R0b20gfSA9IHRoaXMuaGVpZ2h0TWFwLmxpbmVBdCh0bywgUXVlcnlUeXBlLkJ5UG9zLCB0aGlzLmhlaWdodE9yYWNsZSwgMCwgMCk7XG4gICAgICAgIGxldCB7IHZpc2libGVUb3AsIHZpc2libGVCb3R0b20gfSA9IHRoaXM7XG4gICAgICAgIHJldHVybiAoZnJvbSA9PSAwIHx8IHRvcCA8PSB2aXNpYmxlVG9wIC0gTWF0aC5tYXgoMTAgLyogVlAuTWluQ292ZXJNYXJnaW4gKi8sIE1hdGgubWluKC1iaWFzLCAyNTAgLyogVlAuTWF4Q292ZXJNYXJnaW4gKi8pKSkgJiZcbiAgICAgICAgICAgICh0byA9PSB0aGlzLnN0YXRlLmRvYy5sZW5ndGggfHxcbiAgICAgICAgICAgICAgICBib3R0b20gPj0gdmlzaWJsZUJvdHRvbSArIE1hdGgubWF4KDEwIC8qIFZQLk1pbkNvdmVyTWFyZ2luICovLCBNYXRoLm1pbihiaWFzLCAyNTAgLyogVlAuTWF4Q292ZXJNYXJnaW4gKi8pKSkgJiZcbiAgICAgICAgICAgICh0b3AgPiB2aXNpYmxlVG9wIC0gMiAqIDEwMDAgLyogVlAuTWFyZ2luICovICYmIGJvdHRvbSA8IHZpc2libGVCb3R0b20gKyAyICogMTAwMCAvKiBWUC5NYXJnaW4gKi8pO1xuICAgIH1cbiAgICBtYXBMaW5lR2FwcyhnYXBzLCBjaGFuZ2VzKSB7XG4gICAgICAgIGlmICghZ2Fwcy5sZW5ndGggfHwgY2hhbmdlcy5lbXB0eSlcbiAgICAgICAgICAgIHJldHVybiBnYXBzO1xuICAgICAgICBsZXQgbWFwcGVkID0gW107XG4gICAgICAgIGZvciAobGV0IGdhcCBvZiBnYXBzKVxuICAgICAgICAgICAgaWYgKCFjaGFuZ2VzLnRvdWNoZXNSYW5nZShnYXAuZnJvbSwgZ2FwLnRvKSlcbiAgICAgICAgICAgICAgICBtYXBwZWQucHVzaChuZXcgTGluZUdhcChjaGFuZ2VzLm1hcFBvcyhnYXAuZnJvbSksIGNoYW5nZXMubWFwUG9zKGdhcC50byksIGdhcC5zaXplKSk7XG4gICAgICAgIHJldHVybiBtYXBwZWQ7XG4gICAgfVxuICAgIC8vIENvbXB1dGVzIHBvc2l0aW9ucyBpbiB0aGUgdmlld3BvcnQgd2hlcmUgdGhlIHN0YXJ0IG9yIGVuZCBvZiBhXG4gICAgLy8gbGluZSBzaG91bGQgYmUgaGlkZGVuLCB0cnlpbmcgdG8gcmV1c2UgZXhpc3RpbmcgbGluZSBnYXBzIHdoZW5cbiAgICAvLyBhcHByb3ByaWF0ZSB0byBhdm9pZCB1bm5lY2Nlc2FyeSByZWRyYXdzLlxuICAgIC8vIFVzZXMgY3J1ZGUgY2hhcmFjdGVyLWNvdW50aW5nIGZvciB0aGUgcG9zaXRpb25pbmcgYW5kIHNpemluZyxcbiAgICAvLyBzaW5jZSBhY3R1YWwgRE9NIGNvb3JkaW5hdGVzIGFyZW4ndCBhbHdheXMgYXZhaWxhYmxlIGFuZFxuICAgIC8vIHByZWRpY3RhYmxlLiBSZWxpZXMgb24gZ2VuZXJvdXMgbWFyZ2lucyAoc2VlIExHLk1hcmdpbikgdG8gaGlkZVxuICAgIC8vIHRoZSBhcnRpZmFjdHMgdGhpcyBtaWdodCBwcm9kdWNlIGZyb20gdGhlIHVzZXIuXG4gICAgZW5zdXJlTGluZUdhcHMoY3VycmVudCwgbWF5TWVhc3VyZSkge1xuICAgICAgICBsZXQgd3JhcHBpbmcgPSB0aGlzLmhlaWdodE9yYWNsZS5saW5lV3JhcHBpbmc7XG4gICAgICAgIGxldCBtYXJnaW4gPSB3cmFwcGluZyA/IDEwMDAwIC8qIExHLk1hcmdpbldyYXAgKi8gOiAyMDAwIC8qIExHLk1hcmdpbiAqLywgaGFsZk1hcmdpbiA9IG1hcmdpbiA+PiAxLCBkb3VibGVNYXJnaW4gPSBtYXJnaW4gPDwgMTtcbiAgICAgICAgLy8gVGhlIG5vbi13cmFwcGluZyBsb2dpYyB3b24ndCB3b3JrIGF0IGFsbCBpbiBwcmVkb21pbmFudGx5IHJpZ2h0LXRvLWxlZnQgdGV4dC5cbiAgICAgICAgaWYgKHRoaXMuZGVmYXVsdFRleHREaXJlY3Rpb24gIT0gZXhwb3J0cy5EaXJlY3Rpb24uTFRSICYmICF3cmFwcGluZylcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgbGV0IGdhcHMgPSBbXTtcbiAgICAgICAgbGV0IGFkZEdhcCA9IChmcm9tLCB0bywgbGluZSwgc3RydWN0dXJlKSA9PiB7XG4gICAgICAgICAgICBpZiAodG8gLSBmcm9tIDwgaGFsZk1hcmdpbilcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBsZXQgc2VsID0gdGhpcy5zdGF0ZS5zZWxlY3Rpb24ubWFpbiwgYXZvaWQgPSBbc2VsLmZyb21dO1xuICAgICAgICAgICAgaWYgKCFzZWwuZW1wdHkpXG4gICAgICAgICAgICAgICAgYXZvaWQucHVzaChzZWwudG8pO1xuICAgICAgICAgICAgZm9yIChsZXQgcG9zIG9mIGF2b2lkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBvcyA+IGZyb20gJiYgcG9zIDwgdG8pIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkR2FwKGZyb20sIHBvcyAtIDEwIC8qIExHLlNlbGVjdGlvbk1hcmdpbiAqLywgbGluZSwgc3RydWN0dXJlKTtcbiAgICAgICAgICAgICAgICAgICAgYWRkR2FwKHBvcyArIDEwIC8qIExHLlNlbGVjdGlvbk1hcmdpbiAqLywgdG8sIGxpbmUsIHN0cnVjdHVyZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZ2FwID0gZmluZChjdXJyZW50LCBnYXAgPT4gZ2FwLmZyb20gPj0gbGluZS5mcm9tICYmIGdhcC50byA8PSBsaW5lLnRvICYmXG4gICAgICAgICAgICAgICAgTWF0aC5hYnMoZ2FwLmZyb20gLSBmcm9tKSA8IGhhbGZNYXJnaW4gJiYgTWF0aC5hYnMoZ2FwLnRvIC0gdG8pIDwgaGFsZk1hcmdpbiAmJlxuICAgICAgICAgICAgICAgICFhdm9pZC5zb21lKHBvcyA9PiBnYXAuZnJvbSA8IHBvcyAmJiBnYXAudG8gPiBwb3MpKTtcbiAgICAgICAgICAgIGlmICghZ2FwKSB7XG4gICAgICAgICAgICAgICAgLy8gV2hlbiBzY3JvbGxpbmcgZG93biwgc25hcCBnYXAgZW5kcyB0byBsaW5lIHN0YXJ0cyB0byBhdm9pZCBzaGlmdHMgaW4gd3JhcHBpbmdcbiAgICAgICAgICAgICAgICBpZiAodG8gPCBsaW5lLnRvICYmIG1heU1lYXN1cmUgJiYgd3JhcHBpbmcgJiZcbiAgICAgICAgICAgICAgICAgICAgbWF5TWVhc3VyZS52aXNpYmxlUmFuZ2VzLnNvbWUociA9PiByLmZyb20gPD0gdG8gJiYgci50byA+PSB0bykpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxpbmVTdGFydCA9IG1heU1lYXN1cmUubW92ZVRvTGluZUJvdW5kYXJ5KHN0YXRlLkVkaXRvclNlbGVjdGlvbi5jdXJzb3IodG8pLCBmYWxzZSwgdHJ1ZSkuaGVhZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmVTdGFydCA+IGZyb20pXG4gICAgICAgICAgICAgICAgICAgICAgICB0byA9IGxpbmVTdGFydDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZ2FwID0gbmV3IExpbmVHYXAoZnJvbSwgdG8sIHRoaXMuZ2FwU2l6ZShsaW5lLCBmcm9tLCB0bywgc3RydWN0dXJlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnYXBzLnB1c2goZ2FwKTtcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IGNoZWNrTGluZSA9IChsaW5lKSA9PiB7XG4gICAgICAgICAgICBpZiAobGluZS5sZW5ndGggPCBkb3VibGVNYXJnaW4gfHwgbGluZS50eXBlICE9IGV4cG9ydHMuQmxvY2tUeXBlLlRleHQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgbGV0IHN0cnVjdHVyZSA9IGxpbmVTdHJ1Y3R1cmUobGluZS5mcm9tLCBsaW5lLnRvLCB0aGlzLnN0YXRlRGVjbyk7XG4gICAgICAgICAgICBpZiAoc3RydWN0dXJlLnRvdGFsIDwgZG91YmxlTWFyZ2luKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGxldCB0YXJnZXQgPSB0aGlzLnNjcm9sbFRhcmdldCA/IHRoaXMuc2Nyb2xsVGFyZ2V0LnJhbmdlLmhlYWQgOiBudWxsO1xuICAgICAgICAgICAgbGV0IHZpZXdGcm9tLCB2aWV3VG87XG4gICAgICAgICAgICBpZiAod3JhcHBpbmcpIHtcbiAgICAgICAgICAgICAgICBsZXQgbWFyZ2luSGVpZ2h0ID0gKG1hcmdpbiAvIHRoaXMuaGVpZ2h0T3JhY2xlLmxpbmVMZW5ndGgpICogdGhpcy5oZWlnaHRPcmFjbGUubGluZUhlaWdodDtcbiAgICAgICAgICAgICAgICBsZXQgdG9wLCBib3Q7XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0YXJnZXRGcmFjID0gZmluZEZyYWN0aW9uKHN0cnVjdHVyZSwgdGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNwYWNlRnJhYyA9ICgodGhpcy52aXNpYmxlQm90dG9tIC0gdGhpcy52aXNpYmxlVG9wKSAvIDIgKyBtYXJnaW5IZWlnaHQpIC8gbGluZS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIHRvcCA9IHRhcmdldEZyYWMgLSBzcGFjZUZyYWM7XG4gICAgICAgICAgICAgICAgICAgIGJvdCA9IHRhcmdldEZyYWMgKyBzcGFjZUZyYWM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0b3AgPSAodGhpcy52aXNpYmxlVG9wIC0gbGluZS50b3AgLSBtYXJnaW5IZWlnaHQpIC8gbGluZS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIGJvdCA9ICh0aGlzLnZpc2libGVCb3R0b20gLSBsaW5lLnRvcCArIG1hcmdpbkhlaWdodCkgLyBsaW5lLmhlaWdodDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmlld0Zyb20gPSBmaW5kUG9zaXRpb24oc3RydWN0dXJlLCB0b3ApO1xuICAgICAgICAgICAgICAgIHZpZXdUbyA9IGZpbmRQb3NpdGlvbihzdHJ1Y3R1cmUsIGJvdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgdG90YWxXaWR0aCA9IHN0cnVjdHVyZS50b3RhbCAqIHRoaXMuaGVpZ2h0T3JhY2xlLmNoYXJXaWR0aDtcbiAgICAgICAgICAgICAgICBsZXQgbWFyZ2luV2lkdGggPSBtYXJnaW4gKiB0aGlzLmhlaWdodE9yYWNsZS5jaGFyV2lkdGg7XG4gICAgICAgICAgICAgICAgbGV0IGxlZnQsIHJpZ2h0O1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0RnJhYyA9IGZpbmRGcmFjdGlvbihzdHJ1Y3R1cmUsIHRhcmdldCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzcGFjZUZyYWMgPSAoKHRoaXMucGl4ZWxWaWV3cG9ydC5yaWdodCAtIHRoaXMucGl4ZWxWaWV3cG9ydC5sZWZ0KSAvIDIgKyBtYXJnaW5XaWR0aCkgLyB0b3RhbFdpZHRoO1xuICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gdGFyZ2V0RnJhYyAtIHNwYWNlRnJhYztcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQgPSB0YXJnZXRGcmFjICsgc3BhY2VGcmFjO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdCA9ICh0aGlzLnBpeGVsVmlld3BvcnQubGVmdCAtIG1hcmdpbldpZHRoKSAvIHRvdGFsV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0ID0gKHRoaXMucGl4ZWxWaWV3cG9ydC5yaWdodCArIG1hcmdpbldpZHRoKSAvIHRvdGFsV2lkdGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZpZXdGcm9tID0gZmluZFBvc2l0aW9uKHN0cnVjdHVyZSwgbGVmdCk7XG4gICAgICAgICAgICAgICAgdmlld1RvID0gZmluZFBvc2l0aW9uKHN0cnVjdHVyZSwgcmlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZpZXdGcm9tID4gbGluZS5mcm9tKVxuICAgICAgICAgICAgICAgIGFkZEdhcChsaW5lLmZyb20sIHZpZXdGcm9tLCBsaW5lLCBzdHJ1Y3R1cmUpO1xuICAgICAgICAgICAgaWYgKHZpZXdUbyA8IGxpbmUudG8pXG4gICAgICAgICAgICAgICAgYWRkR2FwKHZpZXdUbywgbGluZS50bywgbGluZSwgc3RydWN0dXJlKTtcbiAgICAgICAgfTtcbiAgICAgICAgZm9yIChsZXQgbGluZSBvZiB0aGlzLnZpZXdwb3J0TGluZXMpIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGxpbmUudHlwZSkpXG4gICAgICAgICAgICAgICAgbGluZS50eXBlLmZvckVhY2goY2hlY2tMaW5lKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBjaGVja0xpbmUobGluZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdhcHM7XG4gICAgfVxuICAgIGdhcFNpemUobGluZSwgZnJvbSwgdG8sIHN0cnVjdHVyZSkge1xuICAgICAgICBsZXQgZnJhY3Rpb24gPSBmaW5kRnJhY3Rpb24oc3RydWN0dXJlLCB0bykgLSBmaW5kRnJhY3Rpb24oc3RydWN0dXJlLCBmcm9tKTtcbiAgICAgICAgaWYgKHRoaXMuaGVpZ2h0T3JhY2xlLmxpbmVXcmFwcGluZykge1xuICAgICAgICAgICAgcmV0dXJuIGxpbmUuaGVpZ2h0ICogZnJhY3Rpb247XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc3RydWN0dXJlLnRvdGFsICogdGhpcy5oZWlnaHRPcmFjbGUuY2hhcldpZHRoICogZnJhY3Rpb247XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlTGluZUdhcHMoZ2Fwcykge1xuICAgICAgICBpZiAoIUxpbmVHYXAuc2FtZShnYXBzLCB0aGlzLmxpbmVHYXBzKSkge1xuICAgICAgICAgICAgdGhpcy5saW5lR2FwcyA9IGdhcHM7XG4gICAgICAgICAgICB0aGlzLmxpbmVHYXBEZWNvID0gRGVjb3JhdGlvbi5zZXQoZ2Fwcy5tYXAoZ2FwID0+IGdhcC5kcmF3KHRoaXMsIHRoaXMuaGVpZ2h0T3JhY2xlLmxpbmVXcmFwcGluZykpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb21wdXRlVmlzaWJsZVJhbmdlcygpIHtcbiAgICAgICAgbGV0IGRlY28gPSB0aGlzLnN0YXRlRGVjbztcbiAgICAgICAgaWYgKHRoaXMubGluZUdhcHMubGVuZ3RoKVxuICAgICAgICAgICAgZGVjbyA9IGRlY28uY29uY2F0KHRoaXMubGluZUdhcERlY28pO1xuICAgICAgICBsZXQgcmFuZ2VzID0gW107XG4gICAgICAgIHN0YXRlLlJhbmdlU2V0LnNwYW5zKGRlY28sIHRoaXMudmlld3BvcnQuZnJvbSwgdGhpcy52aWV3cG9ydC50bywge1xuICAgICAgICAgICAgc3Bhbihmcm9tLCB0bykgeyByYW5nZXMucHVzaCh7IGZyb20sIHRvIH0pOyB9LFxuICAgICAgICAgICAgcG9pbnQoKSB7IH1cbiAgICAgICAgfSwgMjApO1xuICAgICAgICBsZXQgY2hhbmdlZCA9IHJhbmdlcy5sZW5ndGggIT0gdGhpcy52aXNpYmxlUmFuZ2VzLmxlbmd0aCB8fFxuICAgICAgICAgICAgdGhpcy52aXNpYmxlUmFuZ2VzLnNvbWUoKHIsIGkpID0+IHIuZnJvbSAhPSByYW5nZXNbaV0uZnJvbSB8fCByLnRvICE9IHJhbmdlc1tpXS50byk7XG4gICAgICAgIHRoaXMudmlzaWJsZVJhbmdlcyA9IHJhbmdlcztcbiAgICAgICAgcmV0dXJuIGNoYW5nZWQgPyA0IC8qIFVwZGF0ZUZsYWcuVmlld3BvcnQgKi8gOiAwO1xuICAgIH1cbiAgICBsaW5lQmxvY2tBdChwb3MpIHtcbiAgICAgICAgcmV0dXJuIChwb3MgPj0gdGhpcy52aWV3cG9ydC5mcm9tICYmIHBvcyA8PSB0aGlzLnZpZXdwb3J0LnRvICYmXG4gICAgICAgICAgICB0aGlzLnZpZXdwb3J0TGluZXMuZmluZChiID0+IGIuZnJvbSA8PSBwb3MgJiYgYi50byA+PSBwb3MpKSB8fFxuICAgICAgICAgICAgc2NhbGVCbG9jayh0aGlzLmhlaWdodE1hcC5saW5lQXQocG9zLCBRdWVyeVR5cGUuQnlQb3MsIHRoaXMuaGVpZ2h0T3JhY2xlLCAwLCAwKSwgdGhpcy5zY2FsZXIpO1xuICAgIH1cbiAgICBsaW5lQmxvY2tBdEhlaWdodChoZWlnaHQpIHtcbiAgICAgICAgcmV0dXJuIChoZWlnaHQgPj0gdGhpcy52aWV3cG9ydExpbmVzWzBdLnRvcCAmJiBoZWlnaHQgPD0gdGhpcy52aWV3cG9ydExpbmVzW3RoaXMudmlld3BvcnRMaW5lcy5sZW5ndGggLSAxXS5ib3R0b20gJiZcbiAgICAgICAgICAgIHRoaXMudmlld3BvcnRMaW5lcy5maW5kKGwgPT4gbC50b3AgPD0gaGVpZ2h0ICYmIGwuYm90dG9tID49IGhlaWdodCkpIHx8XG4gICAgICAgICAgICBzY2FsZUJsb2NrKHRoaXMuaGVpZ2h0TWFwLmxpbmVBdCh0aGlzLnNjYWxlci5mcm9tRE9NKGhlaWdodCksIFF1ZXJ5VHlwZS5CeUhlaWdodCwgdGhpcy5oZWlnaHRPcmFjbGUsIDAsIDApLCB0aGlzLnNjYWxlcik7XG4gICAgfVxuICAgIHNjcm9sbEFuY2hvckF0KHNjcm9sbFRvcCkge1xuICAgICAgICBsZXQgYmxvY2sgPSB0aGlzLmxpbmVCbG9ja0F0SGVpZ2h0KHNjcm9sbFRvcCArIDgpO1xuICAgICAgICByZXR1cm4gYmxvY2suZnJvbSA+PSB0aGlzLnZpZXdwb3J0LmZyb20gfHwgdGhpcy52aWV3cG9ydExpbmVzWzBdLnRvcCAtIHNjcm9sbFRvcCA+IDIwMCA/IGJsb2NrIDogdGhpcy52aWV3cG9ydExpbmVzWzBdO1xuICAgIH1cbiAgICBlbGVtZW50QXRIZWlnaHQoaGVpZ2h0KSB7XG4gICAgICAgIHJldHVybiBzY2FsZUJsb2NrKHRoaXMuaGVpZ2h0TWFwLmJsb2NrQXQodGhpcy5zY2FsZXIuZnJvbURPTShoZWlnaHQpLCB0aGlzLmhlaWdodE9yYWNsZSwgMCwgMCksIHRoaXMuc2NhbGVyKTtcbiAgICB9XG4gICAgZ2V0IGRvY0hlaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2NhbGVyLnRvRE9NKHRoaXMuaGVpZ2h0TWFwLmhlaWdodCk7XG4gICAgfVxuICAgIGdldCBjb250ZW50SGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kb2NIZWlnaHQgKyB0aGlzLnBhZGRpbmdUb3AgKyB0aGlzLnBhZGRpbmdCb3R0b207XG4gICAgfVxufVxuY2xhc3MgVmlld3BvcnQge1xuICAgIGNvbnN0cnVjdG9yKGZyb20sIHRvKSB7XG4gICAgICAgIHRoaXMuZnJvbSA9IGZyb207XG4gICAgICAgIHRoaXMudG8gPSB0bztcbiAgICB9XG59XG5mdW5jdGlvbiBsaW5lU3RydWN0dXJlKGZyb20sIHRvLCBzdGF0ZURlY28pIHtcbiAgICBsZXQgcmFuZ2VzID0gW10sIHBvcyA9IGZyb20sIHRvdGFsID0gMDtcbiAgICBzdGF0ZS5SYW5nZVNldC5zcGFucyhzdGF0ZURlY28sIGZyb20sIHRvLCB7XG4gICAgICAgIHNwYW4oKSB7IH0sXG4gICAgICAgIHBvaW50KGZyb20sIHRvKSB7XG4gICAgICAgICAgICBpZiAoZnJvbSA+IHBvcykge1xuICAgICAgICAgICAgICAgIHJhbmdlcy5wdXNoKHsgZnJvbTogcG9zLCB0bzogZnJvbSB9KTtcbiAgICAgICAgICAgICAgICB0b3RhbCArPSBmcm9tIC0gcG9zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcG9zID0gdG87XG4gICAgICAgIH1cbiAgICB9LCAyMCk7IC8vIFdlJ3JlIG9ubHkgaW50ZXJlc3RlZCBpbiBjb2xsYXBzZWQgcmFuZ2VzIG9mIGEgc2lnbmlmaWNhbnQgc2l6ZVxuICAgIGlmIChwb3MgPCB0bykge1xuICAgICAgICByYW5nZXMucHVzaCh7IGZyb206IHBvcywgdG8gfSk7XG4gICAgICAgIHRvdGFsICs9IHRvIC0gcG9zO1xuICAgIH1cbiAgICByZXR1cm4geyB0b3RhbCwgcmFuZ2VzIH07XG59XG5mdW5jdGlvbiBmaW5kUG9zaXRpb24oeyB0b3RhbCwgcmFuZ2VzIH0sIHJhdGlvKSB7XG4gICAgaWYgKHJhdGlvIDw9IDApXG4gICAgICAgIHJldHVybiByYW5nZXNbMF0uZnJvbTtcbiAgICBpZiAocmF0aW8gPj0gMSlcbiAgICAgICAgcmV0dXJuIHJhbmdlc1tyYW5nZXMubGVuZ3RoIC0gMV0udG87XG4gICAgbGV0IGRpc3QgPSBNYXRoLmZsb29yKHRvdGFsICogcmF0aW8pO1xuICAgIGZvciAobGV0IGkgPSAwOzsgaSsrKSB7XG4gICAgICAgIGxldCB7IGZyb20sIHRvIH0gPSByYW5nZXNbaV0sIHNpemUgPSB0byAtIGZyb207XG4gICAgICAgIGlmIChkaXN0IDw9IHNpemUpXG4gICAgICAgICAgICByZXR1cm4gZnJvbSArIGRpc3Q7XG4gICAgICAgIGRpc3QgLT0gc2l6ZTtcbiAgICB9XG59XG5mdW5jdGlvbiBmaW5kRnJhY3Rpb24oc3RydWN0dXJlLCBwb3MpIHtcbiAgICBsZXQgY291bnRlZCA9IDA7XG4gICAgZm9yIChsZXQgeyBmcm9tLCB0byB9IG9mIHN0cnVjdHVyZS5yYW5nZXMpIHtcbiAgICAgICAgaWYgKHBvcyA8PSB0bykge1xuICAgICAgICAgICAgY291bnRlZCArPSBwb3MgLSBmcm9tO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY291bnRlZCArPSB0byAtIGZyb207XG4gICAgfVxuICAgIHJldHVybiBjb3VudGVkIC8gc3RydWN0dXJlLnRvdGFsO1xufVxuZnVuY3Rpb24gZmluZChhcnJheSwgZikge1xuICAgIGZvciAobGV0IHZhbCBvZiBhcnJheSlcbiAgICAgICAgaWYgKGYodmFsKSlcbiAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbi8vIERvbid0IHNjYWxlIHdoZW4gdGhlIGRvY3VtZW50IGhlaWdodCBpcyB3aXRoaW4gdGhlIHJhbmdlIG9mIHdoYXRcbi8vIHRoZSBET00gY2FuIGhhbmRsZS5cbmNvbnN0IElkU2NhbGVyID0ge1xuICAgIHRvRE9NKG4pIHsgcmV0dXJuIG47IH0sXG4gICAgZnJvbURPTShuKSB7IHJldHVybiBuOyB9LFxuICAgIHNjYWxlOiAxLFxuICAgIGVxKG90aGVyKSB7IHJldHVybiBvdGhlciA9PSB0aGlzOyB9XG59O1xuLy8gV2hlbiB0aGUgaGVpZ2h0IGlzIHRvbyBiaWcgKD4gVlAuTWF4RE9NSGVpZ2h0KSwgc2NhbGUgZG93biB0aGVcbi8vIHJlZ2lvbnMgb3V0c2lkZSB0aGUgdmlld3BvcnRzIHNvIHRoYXQgdGhlIHRvdGFsIGhlaWdodCBpc1xuLy8gVlAuTWF4RE9NSGVpZ2h0LlxuY2xhc3MgQmlnU2NhbGVyIHtcbiAgICBjb25zdHJ1Y3RvcihvcmFjbGUsIGhlaWdodE1hcCwgdmlld3BvcnRzKSB7XG4gICAgICAgIGxldCB2cEhlaWdodCA9IDAsIGJhc2UgPSAwLCBkb21CYXNlID0gMDtcbiAgICAgICAgdGhpcy52aWV3cG9ydHMgPSB2aWV3cG9ydHMubWFwKCh7IGZyb20sIHRvIH0pID0+IHtcbiAgICAgICAgICAgIGxldCB0b3AgPSBoZWlnaHRNYXAubGluZUF0KGZyb20sIFF1ZXJ5VHlwZS5CeVBvcywgb3JhY2xlLCAwLCAwKS50b3A7XG4gICAgICAgICAgICBsZXQgYm90dG9tID0gaGVpZ2h0TWFwLmxpbmVBdCh0bywgUXVlcnlUeXBlLkJ5UG9zLCBvcmFjbGUsIDAsIDApLmJvdHRvbTtcbiAgICAgICAgICAgIHZwSGVpZ2h0ICs9IGJvdHRvbSAtIHRvcDtcbiAgICAgICAgICAgIHJldHVybiB7IGZyb20sIHRvLCB0b3AsIGJvdHRvbSwgZG9tVG9wOiAwLCBkb21Cb3R0b206IDAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc2NhbGUgPSAoNzAwMDAwMCAvKiBWUC5NYXhET01IZWlnaHQgKi8gLSB2cEhlaWdodCkgLyAoaGVpZ2h0TWFwLmhlaWdodCAtIHZwSGVpZ2h0KTtcbiAgICAgICAgZm9yIChsZXQgb2JqIG9mIHRoaXMudmlld3BvcnRzKSB7XG4gICAgICAgICAgICBvYmouZG9tVG9wID0gZG9tQmFzZSArIChvYmoudG9wIC0gYmFzZSkgKiB0aGlzLnNjYWxlO1xuICAgICAgICAgICAgZG9tQmFzZSA9IG9iai5kb21Cb3R0b20gPSBvYmouZG9tVG9wICsgKG9iai5ib3R0b20gLSBvYmoudG9wKTtcbiAgICAgICAgICAgIGJhc2UgPSBvYmouYm90dG9tO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvRE9NKG4pIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGJhc2UgPSAwLCBkb21CYXNlID0gMDs7IGkrKykge1xuICAgICAgICAgICAgbGV0IHZwID0gaSA8IHRoaXMudmlld3BvcnRzLmxlbmd0aCA/IHRoaXMudmlld3BvcnRzW2ldIDogbnVsbDtcbiAgICAgICAgICAgIGlmICghdnAgfHwgbiA8IHZwLnRvcClcbiAgICAgICAgICAgICAgICByZXR1cm4gZG9tQmFzZSArIChuIC0gYmFzZSkgKiB0aGlzLnNjYWxlO1xuICAgICAgICAgICAgaWYgKG4gPD0gdnAuYm90dG9tKVxuICAgICAgICAgICAgICAgIHJldHVybiB2cC5kb21Ub3AgKyAobiAtIHZwLnRvcCk7XG4gICAgICAgICAgICBiYXNlID0gdnAuYm90dG9tO1xuICAgICAgICAgICAgZG9tQmFzZSA9IHZwLmRvbUJvdHRvbTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmcm9tRE9NKG4pIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGJhc2UgPSAwLCBkb21CYXNlID0gMDs7IGkrKykge1xuICAgICAgICAgICAgbGV0IHZwID0gaSA8IHRoaXMudmlld3BvcnRzLmxlbmd0aCA/IHRoaXMudmlld3BvcnRzW2ldIDogbnVsbDtcbiAgICAgICAgICAgIGlmICghdnAgfHwgbiA8IHZwLmRvbVRvcClcbiAgICAgICAgICAgICAgICByZXR1cm4gYmFzZSArIChuIC0gZG9tQmFzZSkgLyB0aGlzLnNjYWxlO1xuICAgICAgICAgICAgaWYgKG4gPD0gdnAuZG9tQm90dG9tKVxuICAgICAgICAgICAgICAgIHJldHVybiB2cC50b3AgKyAobiAtIHZwLmRvbVRvcCk7XG4gICAgICAgICAgICBiYXNlID0gdnAuYm90dG9tO1xuICAgICAgICAgICAgZG9tQmFzZSA9IHZwLmRvbUJvdHRvbTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlcShvdGhlcikge1xuICAgICAgICBpZiAoIShvdGhlciBpbnN0YW5jZW9mIEJpZ1NjYWxlcikpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzLnNjYWxlID09IG90aGVyLnNjYWxlICYmIHRoaXMudmlld3BvcnRzLmxlbmd0aCA9PSBvdGhlci52aWV3cG9ydHMubGVuZ3RoICYmXG4gICAgICAgICAgICB0aGlzLnZpZXdwb3J0cy5ldmVyeSgodnAsIGkpID0+IHZwLmZyb20gPT0gb3RoZXIudmlld3BvcnRzW2ldLmZyb20gJiYgdnAudG8gPT0gb3RoZXIudmlld3BvcnRzW2ldLnRvKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzY2FsZUJsb2NrKGJsb2NrLCBzY2FsZXIpIHtcbiAgICBpZiAoc2NhbGVyLnNjYWxlID09IDEpXG4gICAgICAgIHJldHVybiBibG9jaztcbiAgICBsZXQgYlRvcCA9IHNjYWxlci50b0RPTShibG9jay50b3ApLCBiQm90dG9tID0gc2NhbGVyLnRvRE9NKGJsb2NrLmJvdHRvbSk7XG4gICAgcmV0dXJuIG5ldyBCbG9ja0luZm8oYmxvY2suZnJvbSwgYmxvY2subGVuZ3RoLCBiVG9wLCBiQm90dG9tIC0gYlRvcCwgQXJyYXkuaXNBcnJheShibG9jay5fY29udGVudCkgPyBibG9jay5fY29udGVudC5tYXAoYiA9PiBzY2FsZUJsb2NrKGIsIHNjYWxlcikpIDogYmxvY2suX2NvbnRlbnQpO1xufVxuXG5jb25zdCB0aGVtZSA9IHN0YXRlLkZhY2V0LmRlZmluZSh7IGNvbWJpbmU6IHN0cnMgPT4gc3Rycy5qb2luKFwiIFwiKSB9KTtcbmNvbnN0IGRhcmtUaGVtZSA9IHN0YXRlLkZhY2V0LmRlZmluZSh7IGNvbWJpbmU6IHZhbHVlcyA9PiB2YWx1ZXMuaW5kZXhPZih0cnVlKSA+IC0xIH0pO1xuY29uc3QgYmFzZVRoZW1lSUQgPSBzdHlsZU1vZC5TdHlsZU1vZHVsZS5uZXdOYW1lKCksIGJhc2VMaWdodElEID0gc3R5bGVNb2QuU3R5bGVNb2R1bGUubmV3TmFtZSgpLCBiYXNlRGFya0lEID0gc3R5bGVNb2QuU3R5bGVNb2R1bGUubmV3TmFtZSgpO1xuY29uc3QgbGlnaHREYXJrSURzID0geyBcIiZsaWdodFwiOiBcIi5cIiArIGJhc2VMaWdodElELCBcIiZkYXJrXCI6IFwiLlwiICsgYmFzZURhcmtJRCB9O1xuZnVuY3Rpb24gYnVpbGRUaGVtZShtYWluLCBzcGVjLCBzY29wZXMpIHtcbiAgICByZXR1cm4gbmV3IHN0eWxlTW9kLlN0eWxlTW9kdWxlKHNwZWMsIHtcbiAgICAgICAgZmluaXNoKHNlbCkge1xuICAgICAgICAgICAgcmV0dXJuIC8mLy50ZXN0KHNlbCkgPyBzZWwucmVwbGFjZSgvJlxcdyovLCBtID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobSA9PSBcIiZcIilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1haW47XG4gICAgICAgICAgICAgICAgaWYgKCFzY29wZXMgfHwgIXNjb3Blc1ttXSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYFVuc3VwcG9ydGVkIHNlbGVjdG9yOiAke219YCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjb3Blc1ttXTtcbiAgICAgICAgICAgIH0pIDogbWFpbiArIFwiIFwiICsgc2VsO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5jb25zdCBiYXNlVGhlbWUkMSA9IGJ1aWxkVGhlbWUoXCIuXCIgKyBiYXNlVGhlbWVJRCwge1xuICAgIFwiJlwiOiB7XG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlICFpbXBvcnRhbnRcIixcbiAgICAgICAgYm94U2l6aW5nOiBcImJvcmRlci1ib3hcIixcbiAgICAgICAgXCImLmNtLWZvY3VzZWRcIjoge1xuICAgICAgICAgICAgLy8gUHJvdmlkZSBhIHNpbXBsZSBkZWZhdWx0IG91dGxpbmUgdG8gbWFrZSBzdXJlIGEgZm9jdXNlZFxuICAgICAgICAgICAgLy8gZWRpdG9yIGlzIHZpc3VhbGx5IGRpc3RpbmN0LiBDYW4ndCBsZWF2ZSB0aGUgZGVmYXVsdCBiZWhhdmlvclxuICAgICAgICAgICAgLy8gYmVjYXVzZSB0aGF0IHdpbGwgYXBwbHkgdG8gdGhlIGNvbnRlbnQgZWxlbWVudCwgd2hpY2ggaXNcbiAgICAgICAgICAgIC8vIGluc2lkZSB0aGUgc2Nyb2xsYWJsZSBjb250YWluZXIgYW5kIGRvZXNuJ3QgaW5jbHVkZSB0aGVcbiAgICAgICAgICAgIC8vIGd1dHRlcnMuIFdlIGFsc28gY2FuJ3QgdXNlIGFuICdhdXRvJyBvdXRsaW5lLCBzaW5jZSB0aG9zZVxuICAgICAgICAgICAgLy8gYXJlLCBmb3Igc29tZSByZWFzb24sIGRyYXduIGJlaGluZCB0aGUgZWxlbWVudCBjb250ZW50LCB3aGljaFxuICAgICAgICAgICAgLy8gd2lsbCBjYXVzZSB0aGluZ3MgbGlrZSB0aGUgYWN0aXZlIGxpbmUgYmFja2dyb3VuZCB0byBjb3ZlclxuICAgICAgICAgICAgLy8gdGhlIG91dGxpbmUgKCMyOTcpLlxuICAgICAgICAgICAgb3V0bGluZTogXCIxcHggZG90dGVkICMyMTIxMjFcIlxuICAgICAgICB9LFxuICAgICAgICBkaXNwbGF5OiBcImZsZXggIWltcG9ydGFudFwiLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiXG4gICAgfSxcbiAgICBcIi5jbS1zY3JvbGxlclwiOiB7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleCAhaW1wb3J0YW50XCIsXG4gICAgICAgIGFsaWduSXRlbXM6IFwiZmxleC1zdGFydCAhaW1wb3J0YW50XCIsXG4gICAgICAgIGZvbnRGYW1pbHk6IFwibW9ub3NwYWNlXCIsXG4gICAgICAgIGxpbmVIZWlnaHQ6IDEuNCxcbiAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgb3ZlcmZsb3dYOiBcImF1dG9cIixcbiAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgekluZGV4OiAwXG4gICAgfSxcbiAgICBcIi5jbS1jb250ZW50XCI6IHtcbiAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICBmbGV4R3JvdzogMixcbiAgICAgICAgZmxleFNocmluazogMCxcbiAgICAgICAgZGlzcGxheTogXCJibG9ja1wiLFxuICAgICAgICB3aGl0ZVNwYWNlOiBcInByZVwiLFxuICAgICAgICB3b3JkV3JhcDogXCJub3JtYWxcIiwgLy8gaHR0cHM6Ly9naXRodWIuY29tL2NvZGVtaXJyb3IvZGV2L2lzc3Vlcy80NTZcbiAgICAgICAgYm94U2l6aW5nOiBcImJvcmRlci1ib3hcIixcbiAgICAgICAgbWluSGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgcGFkZGluZzogXCI0cHggMFwiLFxuICAgICAgICBvdXRsaW5lOiBcIm5vbmVcIixcbiAgICAgICAgXCImW2NvbnRlbnRlZGl0YWJsZT10cnVlXVwiOiB7XG4gICAgICAgICAgICBXZWJraXRVc2VyTW9kaWZ5OiBcInJlYWQtd3JpdGUtcGxhaW50ZXh0LW9ubHlcIixcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCIuY20tbGluZVdyYXBwaW5nXCI6IHtcbiAgICAgICAgd2hpdGVTcGFjZV9mYWxsYmFjazogXCJwcmUtd3JhcFwiLCAvLyBGb3IgSUVcbiAgICAgICAgd2hpdGVTcGFjZTogXCJicmVhay1zcGFjZXNcIixcbiAgICAgICAgd29yZEJyZWFrOiBcImJyZWFrLXdvcmRcIiwgLy8gRm9yIFNhZmFyaSwgd2hpY2ggZG9lc24ndCBzdXBwb3J0IG92ZXJmbG93LXdyYXA6IGFueXdoZXJlXG4gICAgICAgIG92ZXJmbG93V3JhcDogXCJhbnl3aGVyZVwiLFxuICAgICAgICBmbGV4U2hyaW5rOiAxXG4gICAgfSxcbiAgICBcIiZsaWdodCAuY20tY29udGVudFwiOiB7IGNhcmV0Q29sb3I6IFwiYmxhY2tcIiB9LFxuICAgIFwiJmRhcmsgLmNtLWNvbnRlbnRcIjogeyBjYXJldENvbG9yOiBcIndoaXRlXCIgfSxcbiAgICBcIi5jbS1saW5lXCI6IHtcbiAgICAgICAgZGlzcGxheTogXCJibG9ja1wiLFxuICAgICAgICBwYWRkaW5nOiBcIjAgMnB4IDAgNnB4XCJcbiAgICB9LFxuICAgIFwiLmNtLWxheWVyXCI6IHtcbiAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBjb250YWluOiBcInNpemUgc3R5bGVcIixcbiAgICAgICAgXCImID4gKlwiOiB7XG4gICAgICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiJmxpZ2h0IC5jbS1zZWxlY3Rpb25CYWNrZ3JvdW5kXCI6IHtcbiAgICAgICAgYmFja2dyb3VuZDogXCIjZDlkOWQ5XCJcbiAgICB9LFxuICAgIFwiJmRhcmsgLmNtLXNlbGVjdGlvbkJhY2tncm91bmRcIjoge1xuICAgICAgICBiYWNrZ3JvdW5kOiBcIiMyMjJcIlxuICAgIH0sXG4gICAgXCImbGlnaHQuY20tZm9jdXNlZCA+IC5jbS1zY3JvbGxlciA+IC5jbS1zZWxlY3Rpb25MYXllciAuY20tc2VsZWN0aW9uQmFja2dyb3VuZFwiOiB7XG4gICAgICAgIGJhY2tncm91bmQ6IFwiI2Q3ZDRmMFwiXG4gICAgfSxcbiAgICBcIiZkYXJrLmNtLWZvY3VzZWQgPiAuY20tc2Nyb2xsZXIgPiAuY20tc2VsZWN0aW9uTGF5ZXIgLmNtLXNlbGVjdGlvbkJhY2tncm91bmRcIjoge1xuICAgICAgICBiYWNrZ3JvdW5kOiBcIiMyMzNcIlxuICAgIH0sXG4gICAgXCIuY20tY3Vyc29yTGF5ZXJcIjoge1xuICAgICAgICBwb2ludGVyRXZlbnRzOiBcIm5vbmVcIlxuICAgIH0sXG4gICAgXCImLmNtLWZvY3VzZWQgPiAuY20tc2Nyb2xsZXIgPiAuY20tY3Vyc29yTGF5ZXJcIjoge1xuICAgICAgICBhbmltYXRpb246IFwic3RlcHMoMSkgY20tYmxpbmsgMS4ycyBpbmZpbml0ZVwiXG4gICAgfSxcbiAgICAvLyBUd28gYW5pbWF0aW9ucyBkZWZpbmVkIHNvIHRoYXQgd2UgY2FuIHN3aXRjaCBiZXR3ZWVuIHRoZW0gdG9cbiAgICAvLyByZXN0YXJ0IHRoZSBhbmltYXRpb24gd2l0aG91dCBmb3JjaW5nIGFub3RoZXIgc3R5bGVcbiAgICAvLyByZWNvbXB1dGF0aW9uLlxuICAgIFwiQGtleWZyYW1lcyBjbS1ibGlua1wiOiB7IFwiMCVcIjoge30sIFwiNTAlXCI6IHsgb3BhY2l0eTogMCB9LCBcIjEwMCVcIjoge30gfSxcbiAgICBcIkBrZXlmcmFtZXMgY20tYmxpbmsyXCI6IHsgXCIwJVwiOiB7fSwgXCI1MCVcIjogeyBvcGFjaXR5OiAwIH0sIFwiMTAwJVwiOiB7fSB9LFxuICAgIFwiLmNtLWN1cnNvciwgLmNtLWRyb3BDdXJzb3JcIjoge1xuICAgICAgICBib3JkZXJMZWZ0OiBcIjEuMnB4IHNvbGlkIGJsYWNrXCIsXG4gICAgICAgIG1hcmdpbkxlZnQ6IFwiLTAuNnB4XCIsXG4gICAgICAgIHBvaW50ZXJFdmVudHM6IFwibm9uZVwiLFxuICAgIH0sXG4gICAgXCIuY20tY3Vyc29yXCI6IHtcbiAgICAgICAgZGlzcGxheTogXCJub25lXCJcbiAgICB9LFxuICAgIFwiJmRhcmsgLmNtLWN1cnNvclwiOiB7XG4gICAgICAgIGJvcmRlckxlZnRDb2xvcjogXCIjNDQ0XCJcbiAgICB9LFxuICAgIFwiLmNtLWRyb3BDdXJzb3JcIjoge1xuICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiXG4gICAgfSxcbiAgICBcIiYuY20tZm9jdXNlZCA+IC5jbS1zY3JvbGxlciA+IC5jbS1jdXJzb3JMYXllciAuY20tY3Vyc29yXCI6IHtcbiAgICAgICAgZGlzcGxheTogXCJibG9ja1wiXG4gICAgfSxcbiAgICBcIi5jbS1pc29cIjoge1xuICAgICAgICB1bmljb2RlQmlkaTogXCJpc29sYXRlXCJcbiAgICB9LFxuICAgIFwiLmNtLWFubm91bmNlZFwiOiB7XG4gICAgICAgIHBvc2l0aW9uOiBcImZpeGVkXCIsXG4gICAgICAgIHRvcDogXCItMTAwMDBweFwiXG4gICAgfSxcbiAgICBcIkBtZWRpYSBwcmludFwiOiB7XG4gICAgICAgIFwiLmNtLWFubm91bmNlZFwiOiB7IGRpc3BsYXk6IFwibm9uZVwiIH1cbiAgICB9LFxuICAgIFwiJmxpZ2h0IC5jbS1hY3RpdmVMaW5lXCI6IHsgYmFja2dyb3VuZENvbG9yOiBcIiNjY2VlZmY0NFwiIH0sXG4gICAgXCImZGFyayAuY20tYWN0aXZlTGluZVwiOiB7IGJhY2tncm91bmRDb2xvcjogXCIjOTllZWZmMzNcIiB9LFxuICAgIFwiJmxpZ2h0IC5jbS1zcGVjaWFsQ2hhclwiOiB7IGNvbG9yOiBcInJlZFwiIH0sXG4gICAgXCImZGFyayAuY20tc3BlY2lhbENoYXJcIjogeyBjb2xvcjogXCIjZjc4XCIgfSxcbiAgICBcIi5jbS1ndXR0ZXJzXCI6IHtcbiAgICAgICAgZmxleFNocmluazogMCxcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICAgIGJveFNpemluZzogXCJib3JkZXItYm94XCIsXG4gICAgICAgIGluc2V0SW5saW5lU3RhcnQ6IDAsXG4gICAgICAgIHpJbmRleDogMjAwXG4gICAgfSxcbiAgICBcIiZsaWdodCAuY20tZ3V0dGVyc1wiOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogXCIjZjVmNWY1XCIsXG4gICAgICAgIGNvbG9yOiBcIiM2YzZjNmNcIixcbiAgICAgICAgYm9yZGVyUmlnaHQ6IFwiMXB4IHNvbGlkICNkZGRcIlxuICAgIH0sXG4gICAgXCImZGFyayAuY20tZ3V0dGVyc1wiOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogXCIjMzMzMzM4XCIsXG4gICAgICAgIGNvbG9yOiBcIiNjY2NcIlxuICAgIH0sXG4gICAgXCIuY20tZ3V0dGVyXCI6IHtcbiAgICAgICAgZGlzcGxheTogXCJmbGV4ICFpbXBvcnRhbnRcIiwgLy8gTmVjZXNzYXJ5IC0tIHByZXZlbnRzIG1hcmdpbiBjb2xsYXBzaW5nXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIGZsZXhTaHJpbms6IDAsXG4gICAgICAgIGJveFNpemluZzogXCJib3JkZXItYm94XCIsXG4gICAgICAgIG1pbkhlaWdodDogXCIxMDAlXCIsXG4gICAgICAgIG92ZXJmbG93OiBcImhpZGRlblwiXG4gICAgfSxcbiAgICBcIi5jbS1ndXR0ZXJFbGVtZW50XCI6IHtcbiAgICAgICAgYm94U2l6aW5nOiBcImJvcmRlci1ib3hcIlxuICAgIH0sXG4gICAgXCIuY20tbGluZU51bWJlcnMgLmNtLWd1dHRlckVsZW1lbnRcIjoge1xuICAgICAgICBwYWRkaW5nOiBcIjAgM3B4IDAgNXB4XCIsXG4gICAgICAgIG1pbldpZHRoOiBcIjIwcHhcIixcbiAgICAgICAgdGV4dEFsaWduOiBcInJpZ2h0XCIsXG4gICAgICAgIHdoaXRlU3BhY2U6IFwibm93cmFwXCJcbiAgICB9LFxuICAgIFwiJmxpZ2h0IC5jbS1hY3RpdmVMaW5lR3V0dGVyXCI6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcIiNlMmYyZmZcIlxuICAgIH0sXG4gICAgXCImZGFyayAuY20tYWN0aXZlTGluZUd1dHRlclwiOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogXCIjMjIyMjI3XCJcbiAgICB9LFxuICAgIFwiLmNtLXBhbmVsc1wiOiB7XG4gICAgICAgIGJveFNpemluZzogXCJib3JkZXItYm94XCIsXG4gICAgICAgIHBvc2l0aW9uOiBcInN0aWNreVwiLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICByaWdodDogMFxuICAgIH0sXG4gICAgXCImbGlnaHQgLmNtLXBhbmVsc1wiOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogXCIjZjVmNWY1XCIsXG4gICAgICAgIGNvbG9yOiBcImJsYWNrXCJcbiAgICB9LFxuICAgIFwiJmxpZ2h0IC5jbS1wYW5lbHMtdG9wXCI6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tOiBcIjFweCBzb2xpZCAjZGRkXCJcbiAgICB9LFxuICAgIFwiJmxpZ2h0IC5jbS1wYW5lbHMtYm90dG9tXCI6IHtcbiAgICAgICAgYm9yZGVyVG9wOiBcIjFweCBzb2xpZCAjZGRkXCJcbiAgICB9LFxuICAgIFwiJmRhcmsgLmNtLXBhbmVsc1wiOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogXCIjMzMzMzM4XCIsXG4gICAgICAgIGNvbG9yOiBcIndoaXRlXCJcbiAgICB9LFxuICAgIFwiLmNtLXRhYlwiOiB7XG4gICAgICAgIGRpc3BsYXk6IFwiaW5saW5lLWJsb2NrXCIsXG4gICAgICAgIG92ZXJmbG93OiBcImhpZGRlblwiLFxuICAgICAgICB2ZXJ0aWNhbEFsaWduOiBcImJvdHRvbVwiXG4gICAgfSxcbiAgICBcIi5jbS13aWRnZXRCdWZmZXJcIjoge1xuICAgICAgICB2ZXJ0aWNhbEFsaWduOiBcInRleHQtdG9wXCIsXG4gICAgICAgIGhlaWdodDogXCIxZW1cIixcbiAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgIGRpc3BsYXk6IFwiaW5saW5lXCJcbiAgICB9LFxuICAgIFwiLmNtLXBsYWNlaG9sZGVyXCI6IHtcbiAgICAgICAgY29sb3I6IFwiIzg4OFwiLFxuICAgICAgICBkaXNwbGF5OiBcImlubGluZS1ibG9ja1wiLFxuICAgICAgICB2ZXJ0aWNhbEFsaWduOiBcInRvcFwiLFxuICAgIH0sXG4gICAgXCIuY20taGlnaGxpZ2h0U3BhY2U6YmVmb3JlXCI6IHtcbiAgICAgICAgY29udGVudDogXCJhdHRyKGRhdGEtZGlzcGxheSlcIixcbiAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgcG9pbnRlckV2ZW50czogXCJub25lXCIsXG4gICAgICAgIGNvbG9yOiBcIiM4ODhcIlxuICAgIH0sXG4gICAgXCIuY20taGlnaGxpZ2h0VGFiXCI6IHtcbiAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCdkYXRhOmltYWdlL3N2Zyt4bWwsPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyMDBcIiBoZWlnaHQ9XCIyMFwiPjxwYXRoIHN0cm9rZT1cIiUyMzg4OFwiIHN0cm9rZS13aWR0aD1cIjFcIiBmaWxsPVwibm9uZVwiIGQ9XCJNMSAxMEgxOTZMMTkwIDVNMTkwIDE1TDE5NiAxME0xOTcgNEwxOTcgMTZcIi8+PC9zdmc+JylgLFxuICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogXCJhdXRvIDEwMCVcIixcbiAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiBcInJpZ2h0IDkwJVwiLFxuICAgICAgICBiYWNrZ3JvdW5kUmVwZWF0OiBcIm5vLXJlcGVhdFwiXG4gICAgfSxcbiAgICBcIi5jbS10cmFpbGluZ1NwYWNlXCI6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcIiNmZjMzMjI1NVwiXG4gICAgfSxcbiAgICBcIi5jbS1idXR0b25cIjoge1xuICAgICAgICB2ZXJ0aWNhbEFsaWduOiBcIm1pZGRsZVwiLFxuICAgICAgICBjb2xvcjogXCJpbmhlcml0XCIsXG4gICAgICAgIGZvbnRTaXplOiBcIjcwJVwiLFxuICAgICAgICBwYWRkaW5nOiBcIi4yZW0gMWVtXCIsXG4gICAgICAgIGJvcmRlclJhZGl1czogXCIxcHhcIlxuICAgIH0sXG4gICAgXCImbGlnaHQgLmNtLWJ1dHRvblwiOiB7XG4gICAgICAgIGJhY2tncm91bmRJbWFnZTogXCJsaW5lYXItZ3JhZGllbnQoI2VmZjFmNSwgI2Q5ZDlkZilcIixcbiAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCAjODg4XCIsXG4gICAgICAgIFwiJjphY3RpdmVcIjoge1xuICAgICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBcImxpbmVhci1ncmFkaWVudCgjYjRiNGI0LCAjZDBkM2Q2KVwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiJmRhcmsgLmNtLWJ1dHRvblwiOiB7XG4gICAgICAgIGJhY2tncm91bmRJbWFnZTogXCJsaW5lYXItZ3JhZGllbnQoIzM5MzkzOSwgIzExMSlcIixcbiAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCAjODg4XCIsXG4gICAgICAgIFwiJjphY3RpdmVcIjoge1xuICAgICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBcImxpbmVhci1ncmFkaWVudCgjMTExLCAjMzMzKVwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiLmNtLXRleHRmaWVsZFwiOiB7XG4gICAgICAgIHZlcnRpY2FsQWxpZ246IFwibWlkZGxlXCIsXG4gICAgICAgIGNvbG9yOiBcImluaGVyaXRcIixcbiAgICAgICAgZm9udFNpemU6IFwiNzAlXCIsXG4gICAgICAgIGJvcmRlcjogXCIxcHggc29saWQgc2lsdmVyXCIsXG4gICAgICAgIHBhZGRpbmc6IFwiLjJlbSAuNWVtXCJcbiAgICB9LFxuICAgIFwiJmxpZ2h0IC5jbS10ZXh0ZmllbGRcIjoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwid2hpdGVcIlxuICAgIH0sXG4gICAgXCImZGFyayAuY20tdGV4dGZpZWxkXCI6IHtcbiAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCAjNTU1XCIsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJpbmhlcml0XCJcbiAgICB9XG59LCBsaWdodERhcmtJRHMpO1xuXG5jb25zdCBMaW5lQnJlYWtQbGFjZWhvbGRlciA9IFwiXFx1ZmZmZlwiO1xuY2xhc3MgRE9NUmVhZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihwb2ludHMsIHN0YXRlJDEpIHtcbiAgICAgICAgdGhpcy5wb2ludHMgPSBwb2ludHM7XG4gICAgICAgIHRoaXMudGV4dCA9IFwiXCI7XG4gICAgICAgIHRoaXMubGluZVNlcGFyYXRvciA9IHN0YXRlJDEuZmFjZXQoc3RhdGUuRWRpdG9yU3RhdGUubGluZVNlcGFyYXRvcik7XG4gICAgfVxuICAgIGFwcGVuZCh0ZXh0KSB7XG4gICAgICAgIHRoaXMudGV4dCArPSB0ZXh0O1xuICAgIH1cbiAgICBsaW5lQnJlYWsoKSB7XG4gICAgICAgIHRoaXMudGV4dCArPSBMaW5lQnJlYWtQbGFjZWhvbGRlcjtcbiAgICB9XG4gICAgcmVhZFJhbmdlKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgaWYgKCFzdGFydClcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICBsZXQgcGFyZW50ID0gc3RhcnQucGFyZW50Tm9kZTtcbiAgICAgICAgZm9yIChsZXQgY3VyID0gc3RhcnQ7Oykge1xuICAgICAgICAgICAgdGhpcy5maW5kUG9pbnRCZWZvcmUocGFyZW50LCBjdXIpO1xuICAgICAgICAgICAgbGV0IG9sZExlbiA9IHRoaXMudGV4dC5sZW5ndGg7XG4gICAgICAgICAgICB0aGlzLnJlYWROb2RlKGN1cik7XG4gICAgICAgICAgICBsZXQgbmV4dCA9IGN1ci5uZXh0U2libGluZztcbiAgICAgICAgICAgIGlmIChuZXh0ID09IGVuZClcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGxldCB2aWV3ID0gQ29udGVudFZpZXcuZ2V0KGN1ciksIG5leHRWaWV3ID0gQ29udGVudFZpZXcuZ2V0KG5leHQpO1xuICAgICAgICAgICAgaWYgKHZpZXcgJiYgbmV4dFZpZXcgPyB2aWV3LmJyZWFrQWZ0ZXIgOlxuICAgICAgICAgICAgICAgICh2aWV3ID8gdmlldy5icmVha0FmdGVyIDogaXNCbG9ja0VsZW1lbnQoY3VyKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgKGlzQmxvY2tFbGVtZW50KG5leHQpICYmIChjdXIubm9kZU5hbWUgIT0gXCJCUlwiIHx8IGN1ci5jbUlnbm9yZSkgJiYgdGhpcy50ZXh0Lmxlbmd0aCA+IG9sZExlbikpXG4gICAgICAgICAgICAgICAgdGhpcy5saW5lQnJlYWsoKTtcbiAgICAgICAgICAgIGN1ciA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5maW5kUG9pbnRCZWZvcmUocGFyZW50LCBlbmQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmVhZFRleHROb2RlKG5vZGUpIHtcbiAgICAgICAgbGV0IHRleHQgPSBub2RlLm5vZGVWYWx1ZTtcbiAgICAgICAgZm9yIChsZXQgcG9pbnQgb2YgdGhpcy5wb2ludHMpXG4gICAgICAgICAgICBpZiAocG9pbnQubm9kZSA9PSBub2RlKVxuICAgICAgICAgICAgICAgIHBvaW50LnBvcyA9IHRoaXMudGV4dC5sZW5ndGggKyBNYXRoLm1pbihwb2ludC5vZmZzZXQsIHRleHQubGVuZ3RoKTtcbiAgICAgICAgZm9yIChsZXQgb2ZmID0gMCwgcmUgPSB0aGlzLmxpbmVTZXBhcmF0b3IgPyBudWxsIDogL1xcclxcbj98XFxuL2c7Oykge1xuICAgICAgICAgICAgbGV0IG5leHRCcmVhayA9IC0xLCBicmVha1NpemUgPSAxLCBtO1xuICAgICAgICAgICAgaWYgKHRoaXMubGluZVNlcGFyYXRvcikge1xuICAgICAgICAgICAgICAgIG5leHRCcmVhayA9IHRleHQuaW5kZXhPZih0aGlzLmxpbmVTZXBhcmF0b3IsIG9mZik7XG4gICAgICAgICAgICAgICAgYnJlYWtTaXplID0gdGhpcy5saW5lU2VwYXJhdG9yLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG0gPSByZS5leGVjKHRleHQpKSB7XG4gICAgICAgICAgICAgICAgbmV4dEJyZWFrID0gbS5pbmRleDtcbiAgICAgICAgICAgICAgICBicmVha1NpemUgPSBtWzBdLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYXBwZW5kKHRleHQuc2xpY2Uob2ZmLCBuZXh0QnJlYWsgPCAwID8gdGV4dC5sZW5ndGggOiBuZXh0QnJlYWspKTtcbiAgICAgICAgICAgIGlmIChuZXh0QnJlYWsgPCAwKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgdGhpcy5saW5lQnJlYWsoKTtcbiAgICAgICAgICAgIGlmIChicmVha1NpemUgPiAxKVxuICAgICAgICAgICAgICAgIGZvciAobGV0IHBvaW50IG9mIHRoaXMucG9pbnRzKVxuICAgICAgICAgICAgICAgICAgICBpZiAocG9pbnQubm9kZSA9PSBub2RlICYmIHBvaW50LnBvcyA+IHRoaXMudGV4dC5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludC5wb3MgLT0gYnJlYWtTaXplIC0gMTtcbiAgICAgICAgICAgIG9mZiA9IG5leHRCcmVhayArIGJyZWFrU2l6ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZWFkTm9kZShub2RlKSB7XG4gICAgICAgIGlmIChub2RlLmNtSWdub3JlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBsZXQgdmlldyA9IENvbnRlbnRWaWV3LmdldChub2RlKTtcbiAgICAgICAgbGV0IGZyb21WaWV3ID0gdmlldyAmJiB2aWV3Lm92ZXJyaWRlRE9NVGV4dDtcbiAgICAgICAgaWYgKGZyb21WaWV3ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZmluZFBvaW50SW5zaWRlKG5vZGUsIGZyb21WaWV3Lmxlbmd0aCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gZnJvbVZpZXcuaXRlcigpOyAhaS5uZXh0KCkuZG9uZTspIHtcbiAgICAgICAgICAgICAgICBpZiAoaS5saW5lQnJlYWspXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGluZUJyZWFrKCk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZChpLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChub2RlLm5vZGVUeXBlID09IDMpIHtcbiAgICAgICAgICAgIHRoaXMucmVhZFRleHROb2RlKG5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5vZGUubm9kZU5hbWUgPT0gXCJCUlwiKSB7XG4gICAgICAgICAgICBpZiAobm9kZS5uZXh0U2libGluZylcbiAgICAgICAgICAgICAgICB0aGlzLmxpbmVCcmVhaygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5vZGUubm9kZVR5cGUgPT0gMSkge1xuICAgICAgICAgICAgdGhpcy5yZWFkUmFuZ2Uobm9kZS5maXJzdENoaWxkLCBudWxsKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmaW5kUG9pbnRCZWZvcmUobm9kZSwgbmV4dCkge1xuICAgICAgICBmb3IgKGxldCBwb2ludCBvZiB0aGlzLnBvaW50cylcbiAgICAgICAgICAgIGlmIChwb2ludC5ub2RlID09IG5vZGUgJiYgbm9kZS5jaGlsZE5vZGVzW3BvaW50Lm9mZnNldF0gPT0gbmV4dClcbiAgICAgICAgICAgICAgICBwb2ludC5wb3MgPSB0aGlzLnRleHQubGVuZ3RoO1xuICAgIH1cbiAgICBmaW5kUG9pbnRJbnNpZGUobm9kZSwgbGVuZ3RoKSB7XG4gICAgICAgIGZvciAobGV0IHBvaW50IG9mIHRoaXMucG9pbnRzKVxuICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMyA/IHBvaW50Lm5vZGUgPT0gbm9kZSA6IG5vZGUuY29udGFpbnMocG9pbnQubm9kZSkpXG4gICAgICAgICAgICAgICAgcG9pbnQucG9zID0gdGhpcy50ZXh0Lmxlbmd0aCArIChpc0F0RW5kKG5vZGUsIHBvaW50Lm5vZGUsIHBvaW50Lm9mZnNldCkgPyBsZW5ndGggOiAwKTtcbiAgICB9XG59XG5mdW5jdGlvbiBpc0F0RW5kKHBhcmVudCwgbm9kZSwgb2Zmc2V0KSB7XG4gICAgZm9yICg7Oykge1xuICAgICAgICBpZiAoIW5vZGUgfHwgb2Zmc2V0IDwgbWF4T2Zmc2V0KG5vZGUpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAobm9kZSA9PSBwYXJlbnQpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgb2Zmc2V0ID0gZG9tSW5kZXgobm9kZSkgKyAxO1xuICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgIH1cbn1cbmNsYXNzIERPTVBvaW50IHtcbiAgICBjb25zdHJ1Y3Rvcihub2RlLCBvZmZzZXQpIHtcbiAgICAgICAgdGhpcy5ub2RlID0gbm9kZTtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgIHRoaXMucG9zID0gLTE7XG4gICAgfVxufVxuXG5jbGFzcyBET01DaGFuZ2Uge1xuICAgIGNvbnN0cnVjdG9yKHZpZXcsIHN0YXJ0LCBlbmQsIHR5cGVPdmVyKSB7XG4gICAgICAgIHRoaXMudHlwZU92ZXIgPSB0eXBlT3ZlcjtcbiAgICAgICAgdGhpcy5ib3VuZHMgPSBudWxsO1xuICAgICAgICB0aGlzLnRleHQgPSBcIlwiO1xuICAgICAgICB0aGlzLmRvbUNoYW5nZWQgPSBzdGFydCA+IC0xO1xuICAgICAgICBsZXQgeyBpbXByZWNpc2VIZWFkOiBpSGVhZCwgaW1wcmVjaXNlQW5jaG9yOiBpQW5jaG9yIH0gPSB2aWV3LmRvY1ZpZXc7XG4gICAgICAgIGlmICh2aWV3LnN0YXRlLnJlYWRPbmx5ICYmIHN0YXJ0ID4gLTEpIHtcbiAgICAgICAgICAgIC8vIElnbm9yZSBjaGFuZ2VzIHdoZW4gdGhlIGVkaXRvciBpcyByZWFkLW9ubHlcbiAgICAgICAgICAgIHRoaXMubmV3U2VsID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzdGFydCA+IC0xICYmICh0aGlzLmJvdW5kcyA9IHZpZXcuZG9jVmlldy5kb21Cb3VuZHNBcm91bmQoc3RhcnQsIGVuZCwgMCkpKSB7XG4gICAgICAgICAgICBsZXQgc2VsUG9pbnRzID0gaUhlYWQgfHwgaUFuY2hvciA/IFtdIDogc2VsZWN0aW9uUG9pbnRzKHZpZXcpO1xuICAgICAgICAgICAgbGV0IHJlYWRlciA9IG5ldyBET01SZWFkZXIoc2VsUG9pbnRzLCB2aWV3LnN0YXRlKTtcbiAgICAgICAgICAgIHJlYWRlci5yZWFkUmFuZ2UodGhpcy5ib3VuZHMuc3RhcnRET00sIHRoaXMuYm91bmRzLmVuZERPTSk7XG4gICAgICAgICAgICB0aGlzLnRleHQgPSByZWFkZXIudGV4dDtcbiAgICAgICAgICAgIHRoaXMubmV3U2VsID0gc2VsZWN0aW9uRnJvbVBvaW50cyhzZWxQb2ludHMsIHRoaXMuYm91bmRzLmZyb20pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGV0IGRvbVNlbCA9IHZpZXcub2JzZXJ2ZXIuc2VsZWN0aW9uUmFuZ2U7XG4gICAgICAgICAgICBsZXQgaGVhZCA9IGlIZWFkICYmIGlIZWFkLm5vZGUgPT0gZG9tU2VsLmZvY3VzTm9kZSAmJiBpSGVhZC5vZmZzZXQgPT0gZG9tU2VsLmZvY3VzT2Zmc2V0IHx8XG4gICAgICAgICAgICAgICAgIWNvbnRhaW5zKHZpZXcuY29udGVudERPTSwgZG9tU2VsLmZvY3VzTm9kZSlcbiAgICAgICAgICAgICAgICA/IHZpZXcuc3RhdGUuc2VsZWN0aW9uLm1haW4uaGVhZFxuICAgICAgICAgICAgICAgIDogdmlldy5kb2NWaWV3LnBvc0Zyb21ET00oZG9tU2VsLmZvY3VzTm9kZSwgZG9tU2VsLmZvY3VzT2Zmc2V0KTtcbiAgICAgICAgICAgIGxldCBhbmNob3IgPSBpQW5jaG9yICYmIGlBbmNob3Iubm9kZSA9PSBkb21TZWwuYW5jaG9yTm9kZSAmJiBpQW5jaG9yLm9mZnNldCA9PSBkb21TZWwuYW5jaG9yT2Zmc2V0IHx8XG4gICAgICAgICAgICAgICAgIWNvbnRhaW5zKHZpZXcuY29udGVudERPTSwgZG9tU2VsLmFuY2hvck5vZGUpXG4gICAgICAgICAgICAgICAgPyB2aWV3LnN0YXRlLnNlbGVjdGlvbi5tYWluLmFuY2hvclxuICAgICAgICAgICAgICAgIDogdmlldy5kb2NWaWV3LnBvc0Zyb21ET00oZG9tU2VsLmFuY2hvck5vZGUsIGRvbVNlbC5hbmNob3JPZmZzZXQpO1xuICAgICAgICAgICAgLy8gaU9TIHdpbGwgcmVmdXNlIHRvIHNlbGVjdCB0aGUgYmxvY2sgZ2FwcyB3aGVuIGRvaW5nXG4gICAgICAgICAgICAvLyBzZWxlY3QtYWxsLlxuICAgICAgICAgICAgLy8gQ2hyb21lIHdpbGwgcHV0IHRoZSBzZWxlY3Rpb24gKmluc2lkZSogdGhlbSwgY29uZnVzaW5nXG4gICAgICAgICAgICAvLyBwb3NGcm9tRE9NXG4gICAgICAgICAgICBsZXQgdnAgPSB2aWV3LnZpZXdwb3J0O1xuICAgICAgICAgICAgaWYgKChicm93c2VyLmlvcyB8fCBicm93c2VyLmNocm9tZSkgJiYgdmlldy5zdGF0ZS5zZWxlY3Rpb24ubWFpbi5lbXB0eSAmJiBoZWFkICE9IGFuY2hvciAmJlxuICAgICAgICAgICAgICAgICh2cC5mcm9tID4gMCB8fCB2cC50byA8IHZpZXcuc3RhdGUuZG9jLmxlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICBsZXQgZnJvbSA9IE1hdGgubWluKGhlYWQsIGFuY2hvciksIHRvID0gTWF0aC5tYXgoaGVhZCwgYW5jaG9yKTtcbiAgICAgICAgICAgICAgICBsZXQgb2ZmRnJvbSA9IHZwLmZyb20gLSBmcm9tLCBvZmZUbyA9IHZwLnRvIC0gdG87XG4gICAgICAgICAgICAgICAgaWYgKChvZmZGcm9tID09IDAgfHwgb2ZmRnJvbSA9PSAxIHx8IGZyb20gPT0gMCkgJiYgKG9mZlRvID09IDAgfHwgb2ZmVG8gPT0gLTEgfHwgdG8gPT0gdmlldy5zdGF0ZS5kb2MubGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgICAgICBoZWFkID0gMDtcbiAgICAgICAgICAgICAgICAgICAgYW5jaG9yID0gdmlldy5zdGF0ZS5kb2MubGVuZ3RoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubmV3U2VsID0gc3RhdGUuRWRpdG9yU2VsZWN0aW9uLnNpbmdsZShhbmNob3IsIGhlYWQpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gYXBwbHlET01DaGFuZ2UodmlldywgZG9tQ2hhbmdlKSB7XG4gICAgbGV0IGNoYW5nZTtcbiAgICBsZXQgeyBuZXdTZWwgfSA9IGRvbUNoYW5nZSwgc2VsID0gdmlldy5zdGF0ZS5zZWxlY3Rpb24ubWFpbjtcbiAgICBsZXQgbGFzdEtleSA9IHZpZXcuaW5wdXRTdGF0ZS5sYXN0S2V5VGltZSA+IERhdGUubm93KCkgLSAxMDAgPyB2aWV3LmlucHV0U3RhdGUubGFzdEtleUNvZGUgOiAtMTtcbiAgICBpZiAoZG9tQ2hhbmdlLmJvdW5kcykge1xuICAgICAgICBsZXQgeyBmcm9tLCB0byB9ID0gZG9tQ2hhbmdlLmJvdW5kcztcbiAgICAgICAgbGV0IHByZWZlcnJlZFBvcyA9IHNlbC5mcm9tLCBwcmVmZXJyZWRTaWRlID0gbnVsbDtcbiAgICAgICAgLy8gUHJlZmVyIGFuY2hvcmluZyB0byBlbmQgd2hlbiBCYWNrc3BhY2UgaXMgcHJlc3NlZCAob3IsIG9uXG4gICAgICAgIC8vIEFuZHJvaWQsIHdoZW4gc29tZXRoaW5nIHdhcyBkZWxldGVkKVxuICAgICAgICBpZiAobGFzdEtleSA9PT0gOCB8fCBicm93c2VyLmFuZHJvaWQgJiYgZG9tQ2hhbmdlLnRleHQubGVuZ3RoIDwgdG8gLSBmcm9tKSB7XG4gICAgICAgICAgICBwcmVmZXJyZWRQb3MgPSBzZWwudG87XG4gICAgICAgICAgICBwcmVmZXJyZWRTaWRlID0gXCJlbmRcIjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZGlmZiA9IGZpbmREaWZmKHZpZXcuc3RhdGUuZG9jLnNsaWNlU3RyaW5nKGZyb20sIHRvLCBMaW5lQnJlYWtQbGFjZWhvbGRlciksIGRvbUNoYW5nZS50ZXh0LCBwcmVmZXJyZWRQb3MgLSBmcm9tLCBwcmVmZXJyZWRTaWRlKTtcbiAgICAgICAgaWYgKGRpZmYpIHtcbiAgICAgICAgICAgIC8vIENocm9tZSBpbnNlcnRzIHR3byBuZXdsaW5lcyB3aGVuIHByZXNzaW5nIHNoaWZ0LWVudGVyIGF0IHRoZVxuICAgICAgICAgICAgLy8gZW5kIG9mIGEgbGluZS4gRG9tQ2hhbmdlIGRyb3BzIG9uZSBvZiB0aG9zZS5cbiAgICAgICAgICAgIGlmIChicm93c2VyLmNocm9tZSAmJiBsYXN0S2V5ID09IDEzICYmXG4gICAgICAgICAgICAgICAgZGlmZi50b0IgPT0gZGlmZi5mcm9tICsgMiAmJiBkb21DaGFuZ2UudGV4dC5zbGljZShkaWZmLmZyb20sIGRpZmYudG9CKSA9PSBMaW5lQnJlYWtQbGFjZWhvbGRlciArIExpbmVCcmVha1BsYWNlaG9sZGVyKVxuICAgICAgICAgICAgICAgIGRpZmYudG9CLS07XG4gICAgICAgICAgICBjaGFuZ2UgPSB7IGZyb206IGZyb20gKyBkaWZmLmZyb20sIHRvOiBmcm9tICsgZGlmZi50b0EsXG4gICAgICAgICAgICAgICAgaW5zZXJ0OiBzdGF0ZS5UZXh0Lm9mKGRvbUNoYW5nZS50ZXh0LnNsaWNlKGRpZmYuZnJvbSwgZGlmZi50b0IpLnNwbGl0KExpbmVCcmVha1BsYWNlaG9sZGVyKSkgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChuZXdTZWwgJiYgKCF2aWV3Lmhhc0ZvY3VzICYmIHZpZXcuc3RhdGUuZmFjZXQoZWRpdGFibGUpIHx8IG5ld1NlbC5tYWluLmVxKHNlbCkpKSB7XG4gICAgICAgIG5ld1NlbCA9IG51bGw7XG4gICAgfVxuICAgIGlmICghY2hhbmdlICYmICFuZXdTZWwpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoIWNoYW5nZSAmJiBkb21DaGFuZ2UudHlwZU92ZXIgJiYgIXNlbC5lbXB0eSAmJiBuZXdTZWwgJiYgbmV3U2VsLm1haW4uZW1wdHkpIHtcbiAgICAgICAgLy8gSGV1cmlzdGljIHRvIG5vdGljZSB0eXBpbmcgb3ZlciBhIHNlbGVjdGVkIGNoYXJhY3RlclxuICAgICAgICBjaGFuZ2UgPSB7IGZyb206IHNlbC5mcm9tLCB0bzogc2VsLnRvLCBpbnNlcnQ6IHZpZXcuc3RhdGUuZG9jLnNsaWNlKHNlbC5mcm9tLCBzZWwudG8pIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGNoYW5nZSAmJiBjaGFuZ2UuZnJvbSA+PSBzZWwuZnJvbSAmJiBjaGFuZ2UudG8gPD0gc2VsLnRvICYmXG4gICAgICAgIChjaGFuZ2UuZnJvbSAhPSBzZWwuZnJvbSB8fCBjaGFuZ2UudG8gIT0gc2VsLnRvKSAmJlxuICAgICAgICAoc2VsLnRvIC0gc2VsLmZyb20pIC0gKGNoYW5nZS50byAtIGNoYW5nZS5mcm9tKSA8PSA0KSB7XG4gICAgICAgIC8vIElmIHRoZSBjaGFuZ2UgaXMgaW5zaWRlIHRoZSBzZWxlY3Rpb24gYW5kIGNvdmVycyBtb3N0IG9mIGl0LFxuICAgICAgICAvLyBhc3N1bWUgaXQgaXMgYSBzZWxlY3Rpb24gcmVwbGFjZSAod2l0aCBpZGVudGljYWwgY2hhcmFjdGVycyBhdFxuICAgICAgICAvLyB0aGUgc3RhcnQvZW5kIG5vdCBpbmNsdWRlZCBpbiB0aGUgZGlmZilcbiAgICAgICAgY2hhbmdlID0ge1xuICAgICAgICAgICAgZnJvbTogc2VsLmZyb20sIHRvOiBzZWwudG8sXG4gICAgICAgICAgICBpbnNlcnQ6IHZpZXcuc3RhdGUuZG9jLnNsaWNlKHNlbC5mcm9tLCBjaGFuZ2UuZnJvbSkuYXBwZW5kKGNoYW5nZS5pbnNlcnQpLmFwcGVuZCh2aWV3LnN0YXRlLmRvYy5zbGljZShjaGFuZ2UudG8sIHNlbC50bykpXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKChicm93c2VyLm1hYyB8fCBicm93c2VyLmFuZHJvaWQpICYmIGNoYW5nZSAmJiBjaGFuZ2UuZnJvbSA9PSBjaGFuZ2UudG8gJiYgY2hhbmdlLmZyb20gPT0gc2VsLmhlYWQgLSAxICYmXG4gICAgICAgIC9eXFwuID8kLy50ZXN0KGNoYW5nZS5pbnNlcnQudG9TdHJpbmcoKSkgJiYgdmlldy5jb250ZW50RE9NLmdldEF0dHJpYnV0ZShcImF1dG9jb3JyZWN0XCIpID09IFwib2ZmXCIpIHtcbiAgICAgICAgLy8gRGV0ZWN0IGluc2VydC1wZXJpb2Qtb24tZG91YmxlLXNwYWNlIE1hYyBhbmQgQW5kcm9pZCBiZWhhdmlvcixcbiAgICAgICAgLy8gYW5kIHRyYW5zZm9ybSBpdCBpbnRvIGEgcmVndWxhciBzcGFjZSBpbnNlcnQuXG4gICAgICAgIGlmIChuZXdTZWwgJiYgY2hhbmdlLmluc2VydC5sZW5ndGggPT0gMilcbiAgICAgICAgICAgIG5ld1NlbCA9IHN0YXRlLkVkaXRvclNlbGVjdGlvbi5zaW5nbGUobmV3U2VsLm1haW4uYW5jaG9yIC0gMSwgbmV3U2VsLm1haW4uaGVhZCAtIDEpO1xuICAgICAgICBjaGFuZ2UgPSB7IGZyb206IHNlbC5mcm9tLCB0bzogc2VsLnRvLCBpbnNlcnQ6IHN0YXRlLlRleHQub2YoW1wiIFwiXSkgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYnJvd3Nlci5jaHJvbWUgJiYgY2hhbmdlICYmIGNoYW5nZS5mcm9tID09IGNoYW5nZS50byAmJiBjaGFuZ2UuZnJvbSA9PSBzZWwuaGVhZCAmJlxuICAgICAgICBjaGFuZ2UuaW5zZXJ0LnRvU3RyaW5nKCkgPT0gXCJcXG4gXCIgJiYgdmlldy5saW5lV3JhcHBpbmcpIHtcbiAgICAgICAgLy8gSW4gQ2hyb21lLCBpZiB5b3UgaW5zZXJ0IGEgc3BhY2UgYXQgdGhlIHN0YXJ0IG9mIGEgd3JhcHBlZFxuICAgICAgICAvLyBsaW5lLCBpdCB3aWxsIGFjdHVhbGx5IGluc2VydCBhIG5ld2xpbmUgYW5kIGEgc3BhY2UsIGNhdXNpbmcgYVxuICAgICAgICAvLyBib2d1cyBuZXcgbGluZSB0byBiZSBjcmVhdGVkIGluIENvZGVNaXJyb3IgKCM5NjgpXG4gICAgICAgIGlmIChuZXdTZWwpXG4gICAgICAgICAgICBuZXdTZWwgPSBzdGF0ZS5FZGl0b3JTZWxlY3Rpb24uc2luZ2xlKG5ld1NlbC5tYWluLmFuY2hvciAtIDEsIG5ld1NlbC5tYWluLmhlYWQgLSAxKTtcbiAgICAgICAgY2hhbmdlID0geyBmcm9tOiBzZWwuZnJvbSwgdG86IHNlbC50bywgaW5zZXJ0OiBzdGF0ZS5UZXh0Lm9mKFtcIiBcIl0pIH07XG4gICAgfVxuICAgIGlmIChjaGFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIGFwcGx5RE9NQ2hhbmdlSW5uZXIodmlldywgY2hhbmdlLCBuZXdTZWwsIGxhc3RLZXkpO1xuICAgIH1cbiAgICBlbHNlIGlmIChuZXdTZWwgJiYgIW5ld1NlbC5tYWluLmVxKHNlbCkpIHtcbiAgICAgICAgbGV0IHNjcm9sbEludG9WaWV3ID0gZmFsc2UsIHVzZXJFdmVudCA9IFwic2VsZWN0XCI7XG4gICAgICAgIGlmICh2aWV3LmlucHV0U3RhdGUubGFzdFNlbGVjdGlvblRpbWUgPiBEYXRlLm5vdygpIC0gNTApIHtcbiAgICAgICAgICAgIGlmICh2aWV3LmlucHV0U3RhdGUubGFzdFNlbGVjdGlvbk9yaWdpbiA9PSBcInNlbGVjdFwiKVxuICAgICAgICAgICAgICAgIHNjcm9sbEludG9WaWV3ID0gdHJ1ZTtcbiAgICAgICAgICAgIHVzZXJFdmVudCA9IHZpZXcuaW5wdXRTdGF0ZS5sYXN0U2VsZWN0aW9uT3JpZ2luO1xuICAgICAgICB9XG4gICAgICAgIHZpZXcuZGlzcGF0Y2goeyBzZWxlY3Rpb246IG5ld1NlbCwgc2Nyb2xsSW50b1ZpZXcsIHVzZXJFdmVudCB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuZnVuY3Rpb24gYXBwbHlET01DaGFuZ2VJbm5lcih2aWV3LCBjaGFuZ2UsIG5ld1NlbCwgbGFzdEtleSA9IC0xKSB7XG4gICAgaWYgKGJyb3dzZXIuaW9zICYmIHZpZXcuaW5wdXRTdGF0ZS5mbHVzaElPU0tleShjaGFuZ2UpKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICBsZXQgc2VsID0gdmlldy5zdGF0ZS5zZWxlY3Rpb24ubWFpbjtcbiAgICAvLyBBbmRyb2lkIGJyb3dzZXJzIGRvbid0IGZpcmUgcmVhc29uYWJsZSBrZXkgZXZlbnRzIGZvciBlbnRlcixcbiAgICAvLyBiYWNrc3BhY2UsIG9yIGRlbGV0ZS4gU28gdGhpcyBkZXRlY3RzIGNoYW5nZXMgdGhhdCBsb29rIGxpa2VcbiAgICAvLyB0aGV5J3JlIGNhdXNlZCBieSB0aG9zZSBrZXlzLCBhbmQgcmVpbnRlcnByZXRzIHRoZW0gYXMga2V5XG4gICAgLy8gZXZlbnRzLiAoU29tZSBvZiB0aGVzZSBrZXlzIGFyZSBhbHNvIGhhbmRsZWQgYnkgYmVmb3JlaW5wdXRcbiAgICAvLyBldmVudHMgYW5kIHRoZSBwZW5kaW5nQW5kcm9pZEtleSBtZWNoYW5pc20sIGJ1dCB0aGF0J3Mgbm90XG4gICAgLy8gcmVsaWFibGUgaW4gYWxsIHNpdHVhdGlvbnMuKVxuICAgIGlmIChicm93c2VyLmFuZHJvaWQgJiZcbiAgICAgICAgKChjaGFuZ2UudG8gPT0gc2VsLnRvICYmXG4gICAgICAgICAgICAvLyBHQm9hcmQgd2lsbCBzb21ldGltZXMgcmVtb3ZlIGEgc3BhY2UgaXQganVzdCBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gYWZ0ZXIgYSBjb21wbGV0aW9uIHdoZW4geW91IHByZXNzIGVudGVyXG4gICAgICAgICAgICAoY2hhbmdlLmZyb20gPT0gc2VsLmZyb20gfHwgY2hhbmdlLmZyb20gPT0gc2VsLmZyb20gLSAxICYmIHZpZXcuc3RhdGUuc2xpY2VEb2MoY2hhbmdlLmZyb20sIHNlbC5mcm9tKSA9PSBcIiBcIikgJiZcbiAgICAgICAgICAgIGNoYW5nZS5pbnNlcnQubGVuZ3RoID09IDEgJiYgY2hhbmdlLmluc2VydC5saW5lcyA9PSAyICYmXG4gICAgICAgICAgICBkaXNwYXRjaEtleSh2aWV3LmNvbnRlbnRET00sIFwiRW50ZXJcIiwgMTMpKSB8fFxuICAgICAgICAgICAgKChjaGFuZ2UuZnJvbSA9PSBzZWwuZnJvbSAtIDEgJiYgY2hhbmdlLnRvID09IHNlbC50byAmJiBjaGFuZ2UuaW5zZXJ0Lmxlbmd0aCA9PSAwIHx8XG4gICAgICAgICAgICAgICAgbGFzdEtleSA9PSA4ICYmIGNoYW5nZS5pbnNlcnQubGVuZ3RoIDwgY2hhbmdlLnRvIC0gY2hhbmdlLmZyb20gJiYgY2hhbmdlLnRvID4gc2VsLmhlYWQpICYmXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2hLZXkodmlldy5jb250ZW50RE9NLCBcIkJhY2tzcGFjZVwiLCA4KSkgfHxcbiAgICAgICAgICAgIChjaGFuZ2UuZnJvbSA9PSBzZWwuZnJvbSAmJiBjaGFuZ2UudG8gPT0gc2VsLnRvICsgMSAmJiBjaGFuZ2UuaW5zZXJ0Lmxlbmd0aCA9PSAwICYmXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2hLZXkodmlldy5jb250ZW50RE9NLCBcIkRlbGV0ZVwiLCA0NikpKSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgbGV0IHRleHQgPSBjaGFuZ2UuaW5zZXJ0LnRvU3RyaW5nKCk7XG4gICAgaWYgKHZpZXcuaW5wdXRTdGF0ZS5jb21wb3NpbmcgPj0gMClcbiAgICAgICAgdmlldy5pbnB1dFN0YXRlLmNvbXBvc2luZysrO1xuICAgIGxldCBkZWZhdWx0VHI7XG4gICAgbGV0IGRlZmF1bHRJbnNlcnQgPSAoKSA9PiBkZWZhdWx0VHIgfHwgKGRlZmF1bHRUciA9IGFwcGx5RGVmYXVsdEluc2VydCh2aWV3LCBjaGFuZ2UsIG5ld1NlbCkpO1xuICAgIGlmICghdmlldy5zdGF0ZS5mYWNldChpbnB1dEhhbmRsZXIpLnNvbWUoaCA9PiBoKHZpZXcsIGNoYW5nZS5mcm9tLCBjaGFuZ2UudG8sIHRleHQsIGRlZmF1bHRJbnNlcnQpKSlcbiAgICAgICAgdmlldy5kaXNwYXRjaChkZWZhdWx0SW5zZXJ0KCkpO1xuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gYXBwbHlEZWZhdWx0SW5zZXJ0KHZpZXcsIGNoYW5nZSwgbmV3U2VsKSB7XG4gICAgbGV0IHRyLCBzdGFydFN0YXRlID0gdmlldy5zdGF0ZSwgc2VsID0gc3RhcnRTdGF0ZS5zZWxlY3Rpb24ubWFpbjtcbiAgICBpZiAoY2hhbmdlLmZyb20gPj0gc2VsLmZyb20gJiYgY2hhbmdlLnRvIDw9IHNlbC50byAmJiBjaGFuZ2UudG8gLSBjaGFuZ2UuZnJvbSA+PSAoc2VsLnRvIC0gc2VsLmZyb20pIC8gMyAmJlxuICAgICAgICAoIW5ld1NlbCB8fCBuZXdTZWwubWFpbi5lbXB0eSAmJiBuZXdTZWwubWFpbi5mcm9tID09IGNoYW5nZS5mcm9tICsgY2hhbmdlLmluc2VydC5sZW5ndGgpICYmXG4gICAgICAgIHZpZXcuaW5wdXRTdGF0ZS5jb21wb3NpbmcgPCAwKSB7XG4gICAgICAgIGxldCBiZWZvcmUgPSBzZWwuZnJvbSA8IGNoYW5nZS5mcm9tID8gc3RhcnRTdGF0ZS5zbGljZURvYyhzZWwuZnJvbSwgY2hhbmdlLmZyb20pIDogXCJcIjtcbiAgICAgICAgbGV0IGFmdGVyID0gc2VsLnRvID4gY2hhbmdlLnRvID8gc3RhcnRTdGF0ZS5zbGljZURvYyhjaGFuZ2UudG8sIHNlbC50bykgOiBcIlwiO1xuICAgICAgICB0ciA9IHN0YXJ0U3RhdGUucmVwbGFjZVNlbGVjdGlvbih2aWV3LnN0YXRlLnRvVGV4dChiZWZvcmUgKyBjaGFuZ2UuaW5zZXJ0LnNsaWNlU3RyaW5nKDAsIHVuZGVmaW5lZCwgdmlldy5zdGF0ZS5saW5lQnJlYWspICsgYWZ0ZXIpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGxldCBjaGFuZ2VzID0gc3RhcnRTdGF0ZS5jaGFuZ2VzKGNoYW5nZSk7XG4gICAgICAgIGxldCBtYWluU2VsID0gbmV3U2VsICYmIG5ld1NlbC5tYWluLnRvIDw9IGNoYW5nZXMubmV3TGVuZ3RoID8gbmV3U2VsLm1haW4gOiB1bmRlZmluZWQ7XG4gICAgICAgIC8vIFRyeSB0byBhcHBseSBhIGNvbXBvc2l0aW9uIGNoYW5nZSB0byBhbGwgY3Vyc29yc1xuICAgICAgICBpZiAoc3RhcnRTdGF0ZS5zZWxlY3Rpb24ucmFuZ2VzLmxlbmd0aCA+IDEgJiYgdmlldy5pbnB1dFN0YXRlLmNvbXBvc2luZyA+PSAwICYmXG4gICAgICAgICAgICBjaGFuZ2UudG8gPD0gc2VsLnRvICYmIGNoYW5nZS50byA+PSBzZWwudG8gLSAxMCkge1xuICAgICAgICAgICAgbGV0IHJlcGxhY2VkID0gdmlldy5zdGF0ZS5zbGljZURvYyhjaGFuZ2UuZnJvbSwgY2hhbmdlLnRvKTtcbiAgICAgICAgICAgIGxldCBjb21wb3NpdGlvblJhbmdlLCBjb21wb3NpdGlvbiA9IG5ld1NlbCAmJiBmaW5kQ29tcG9zaXRpb25Ob2RlKHZpZXcsIG5ld1NlbC5tYWluLmhlYWQpO1xuICAgICAgICAgICAgaWYgKGNvbXBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgbGV0IGRMZW4gPSBjaGFuZ2UuaW5zZXJ0Lmxlbmd0aCAtIChjaGFuZ2UudG8gLSBjaGFuZ2UuZnJvbSk7XG4gICAgICAgICAgICAgICAgY29tcG9zaXRpb25SYW5nZSA9IHsgZnJvbTogY29tcG9zaXRpb24uZnJvbSwgdG86IGNvbXBvc2l0aW9uLnRvIC0gZExlbiB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29tcG9zaXRpb25SYW5nZSA9IHZpZXcuc3RhdGUuZG9jLmxpbmVBdChzZWwuaGVhZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgb2Zmc2V0ID0gc2VsLnRvIC0gY2hhbmdlLnRvLCBzaXplID0gc2VsLnRvIC0gc2VsLmZyb207XG4gICAgICAgICAgICB0ciA9IHN0YXJ0U3RhdGUuY2hhbmdlQnlSYW5nZShyYW5nZSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJhbmdlLmZyb20gPT0gc2VsLmZyb20gJiYgcmFuZ2UudG8gPT0gc2VsLnRvKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBjaGFuZ2VzLCByYW5nZTogbWFpblNlbCB8fCByYW5nZS5tYXAoY2hhbmdlcykgfTtcbiAgICAgICAgICAgICAgICBsZXQgdG8gPSByYW5nZS50byAtIG9mZnNldCwgZnJvbSA9IHRvIC0gcmVwbGFjZWQubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChyYW5nZS50byAtIHJhbmdlLmZyb20gIT0gc2l6ZSB8fCB2aWV3LnN0YXRlLnNsaWNlRG9jKGZyb20sIHRvKSAhPSByZXBsYWNlZCB8fFxuICAgICAgICAgICAgICAgICAgICAvLyBVbmZvcnR1bmF0ZWx5LCB0aGVyZSdzIG5vIHdheSB0byBtYWtlIG11bHRpcGxlXG4gICAgICAgICAgICAgICAgICAgIC8vIGNoYW5nZXMgaW4gdGhlIHNhbWUgbm9kZSB3b3JrIHdpdGhvdXQgYWJvcnRpbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gY29tcG9zaXRpb24sIHNvIGN1cnNvcnMgaW4gdGhlIGNvbXBvc2l0aW9uIHJhbmdlIGFyZVxuICAgICAgICAgICAgICAgICAgICAvLyBpZ25vcmVkLlxuICAgICAgICAgICAgICAgICAgICByYW5nZS50byA+PSBjb21wb3NpdGlvblJhbmdlLmZyb20gJiYgcmFuZ2UuZnJvbSA8PSBjb21wb3NpdGlvblJhbmdlLnRvKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyByYW5nZSB9O1xuICAgICAgICAgICAgICAgIGxldCByYW5nZUNoYW5nZXMgPSBzdGFydFN0YXRlLmNoYW5nZXMoeyBmcm9tLCB0bywgaW5zZXJ0OiBjaGFuZ2UuaW5zZXJ0IH0pLCBzZWxPZmYgPSByYW5nZS50byAtIHNlbC50bztcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VzOiByYW5nZUNoYW5nZXMsXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlOiAhbWFpblNlbCA/IHJhbmdlLm1hcChyYW5nZUNoYW5nZXMpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLkVkaXRvclNlbGVjdGlvbi5yYW5nZShNYXRoLm1heCgwLCBtYWluU2VsLmFuY2hvciArIHNlbE9mZiksIE1hdGgubWF4KDAsIG1haW5TZWwuaGVhZCArIHNlbE9mZikpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdHIgPSB7XG4gICAgICAgICAgICAgICAgY2hhbmdlcyxcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb246IG1haW5TZWwgJiYgc3RhcnRTdGF0ZS5zZWxlY3Rpb24ucmVwbGFjZVJhbmdlKG1haW5TZWwpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCB1c2VyRXZlbnQgPSBcImlucHV0LnR5cGVcIjtcbiAgICBpZiAodmlldy5jb21wb3NpbmcgfHxcbiAgICAgICAgdmlldy5pbnB1dFN0YXRlLmNvbXBvc2l0aW9uUGVuZGluZ0NoYW5nZSAmJiB2aWV3LmlucHV0U3RhdGUuY29tcG9zaXRpb25FbmRlZEF0ID4gRGF0ZS5ub3coKSAtIDUwKSB7XG4gICAgICAgIHZpZXcuaW5wdXRTdGF0ZS5jb21wb3NpdGlvblBlbmRpbmdDaGFuZ2UgPSBmYWxzZTtcbiAgICAgICAgdXNlckV2ZW50ICs9IFwiLmNvbXBvc2VcIjtcbiAgICAgICAgaWYgKHZpZXcuaW5wdXRTdGF0ZS5jb21wb3NpdGlvbkZpcnN0Q2hhbmdlKSB7XG4gICAgICAgICAgICB1c2VyRXZlbnQgKz0gXCIuc3RhcnRcIjtcbiAgICAgICAgICAgIHZpZXcuaW5wdXRTdGF0ZS5jb21wb3NpdGlvbkZpcnN0Q2hhbmdlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0YXJ0U3RhdGUudXBkYXRlKHRyLCB7IHVzZXJFdmVudCwgc2Nyb2xsSW50b1ZpZXc6IHRydWUgfSk7XG59XG5mdW5jdGlvbiBmaW5kRGlmZihhLCBiLCBwcmVmZXJyZWRQb3MsIHByZWZlcnJlZFNpZGUpIHtcbiAgICBsZXQgbWluTGVuID0gTWF0aC5taW4oYS5sZW5ndGgsIGIubGVuZ3RoKTtcbiAgICBsZXQgZnJvbSA9IDA7XG4gICAgd2hpbGUgKGZyb20gPCBtaW5MZW4gJiYgYS5jaGFyQ29kZUF0KGZyb20pID09IGIuY2hhckNvZGVBdChmcm9tKSlcbiAgICAgICAgZnJvbSsrO1xuICAgIGlmIChmcm9tID09IG1pbkxlbiAmJiBhLmxlbmd0aCA9PSBiLmxlbmd0aClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgbGV0IHRvQSA9IGEubGVuZ3RoLCB0b0IgPSBiLmxlbmd0aDtcbiAgICB3aGlsZSAodG9BID4gMCAmJiB0b0IgPiAwICYmIGEuY2hhckNvZGVBdCh0b0EgLSAxKSA9PSBiLmNoYXJDb2RlQXQodG9CIC0gMSkpIHtcbiAgICAgICAgdG9BLS07XG4gICAgICAgIHRvQi0tO1xuICAgIH1cbiAgICBpZiAocHJlZmVycmVkU2lkZSA9PSBcImVuZFwiKSB7XG4gICAgICAgIGxldCBhZGp1c3QgPSBNYXRoLm1heCgwLCBmcm9tIC0gTWF0aC5taW4odG9BLCB0b0IpKTtcbiAgICAgICAgcHJlZmVycmVkUG9zIC09IHRvQSArIGFkanVzdCAtIGZyb207XG4gICAgfVxuICAgIGlmICh0b0EgPCBmcm9tICYmIGEubGVuZ3RoIDwgYi5sZW5ndGgpIHtcbiAgICAgICAgbGV0IG1vdmUgPSBwcmVmZXJyZWRQb3MgPD0gZnJvbSAmJiBwcmVmZXJyZWRQb3MgPj0gdG9BID8gZnJvbSAtIHByZWZlcnJlZFBvcyA6IDA7XG4gICAgICAgIGZyb20gLT0gbW92ZTtcbiAgICAgICAgdG9CID0gZnJvbSArICh0b0IgLSB0b0EpO1xuICAgICAgICB0b0EgPSBmcm9tO1xuICAgIH1cbiAgICBlbHNlIGlmICh0b0IgPCBmcm9tKSB7XG4gICAgICAgIGxldCBtb3ZlID0gcHJlZmVycmVkUG9zIDw9IGZyb20gJiYgcHJlZmVycmVkUG9zID49IHRvQiA/IGZyb20gLSBwcmVmZXJyZWRQb3MgOiAwO1xuICAgICAgICBmcm9tIC09IG1vdmU7XG4gICAgICAgIHRvQSA9IGZyb20gKyAodG9BIC0gdG9CKTtcbiAgICAgICAgdG9CID0gZnJvbTtcbiAgICB9XG4gICAgcmV0dXJuIHsgZnJvbSwgdG9BLCB0b0IgfTtcbn1cbmZ1bmN0aW9uIHNlbGVjdGlvblBvaW50cyh2aWV3KSB7XG4gICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgIGlmICh2aWV3LnJvb3QuYWN0aXZlRWxlbWVudCAhPSB2aWV3LmNvbnRlbnRET00pXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgbGV0IHsgYW5jaG9yTm9kZSwgYW5jaG9yT2Zmc2V0LCBmb2N1c05vZGUsIGZvY3VzT2Zmc2V0IH0gPSB2aWV3Lm9ic2VydmVyLnNlbGVjdGlvblJhbmdlO1xuICAgIGlmIChhbmNob3JOb2RlKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKG5ldyBET01Qb2ludChhbmNob3JOb2RlLCBhbmNob3JPZmZzZXQpKTtcbiAgICAgICAgaWYgKGZvY3VzTm9kZSAhPSBhbmNob3JOb2RlIHx8IGZvY3VzT2Zmc2V0ICE9IGFuY2hvck9mZnNldClcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5ldyBET01Qb2ludChmb2N1c05vZGUsIGZvY3VzT2Zmc2V0KSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBzZWxlY3Rpb25Gcm9tUG9pbnRzKHBvaW50cywgYmFzZSkge1xuICAgIGlmIChwb2ludHMubGVuZ3RoID09IDApXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIGxldCBhbmNob3IgPSBwb2ludHNbMF0ucG9zLCBoZWFkID0gcG9pbnRzLmxlbmd0aCA9PSAyID8gcG9pbnRzWzFdLnBvcyA6IGFuY2hvcjtcbiAgICByZXR1cm4gYW5jaG9yID4gLTEgJiYgaGVhZCA+IC0xID8gc3RhdGUuRWRpdG9yU2VsZWN0aW9uLnNpbmdsZShhbmNob3IgKyBiYXNlLCBoZWFkICsgYmFzZSkgOiBudWxsO1xufVxuXG5jb25zdCBvYnNlcnZlT3B0aW9ucyA9IHtcbiAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgY2hhcmFjdGVyRGF0YTogdHJ1ZSxcbiAgICBzdWJ0cmVlOiB0cnVlLFxuICAgIGF0dHJpYnV0ZXM6IHRydWUsXG4gICAgY2hhcmFjdGVyRGF0YU9sZFZhbHVlOiB0cnVlXG59O1xuLy8gSUUxMSBoYXMgdmVyeSBicm9rZW4gbXV0YXRpb24gb2JzZXJ2ZXJzLCBzbyB3ZSBhbHNvIGxpc3RlbiB0b1xuLy8gRE9NQ2hhcmFjdGVyRGF0YU1vZGlmaWVkIHRoZXJlXG5jb25zdCB1c2VDaGFyRGF0YSA9IGJyb3dzZXIuaWUgJiYgYnJvd3Nlci5pZV92ZXJzaW9uIDw9IDExO1xuY2xhc3MgRE9NT2JzZXJ2ZXIge1xuICAgIGNvbnN0cnVjdG9yKHZpZXcpIHtcbiAgICAgICAgdGhpcy52aWV3ID0gdmlldztcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5lZGl0Q29udGV4dCA9IG51bGw7XG4gICAgICAgIC8vIFRoZSBrbm93biBzZWxlY3Rpb24uIEtlcHQgaW4gb3VyIG93biBvYmplY3QsIGFzIG9wcG9zZWQgdG8ganVzdFxuICAgICAgICAvLyBkaXJlY3RseSBhY2Nlc3NpbmcgdGhlIHNlbGVjdGlvbiBiZWNhdXNlOlxuICAgICAgICAvLyAgLSBTYWZhcmkgZG9lc24ndCByZXBvcnQgdGhlIHJpZ2h0IHNlbGVjdGlvbiBpbiBzaGFkb3cgRE9NXG4gICAgICAgIC8vICAtIFJlYWRpbmcgZnJvbSB0aGUgc2VsZWN0aW9uIGZvcmNlcyBhIERPTSBsYXlvdXRcbiAgICAgICAgLy8gIC0gVGhpcyB3YXksIHdlIGNhbiBpZ25vcmUgc2VsZWN0aW9uY2hhbmdlIGV2ZW50cyBpZiB3ZSBoYXZlXG4gICAgICAgIC8vICAgIGFscmVhZHkgc2VlbiB0aGUgJ25ldycgc2VsZWN0aW9uXG4gICAgICAgIHRoaXMuc2VsZWN0aW9uUmFuZ2UgPSBuZXcgRE9NU2VsZWN0aW9uU3RhdGU7XG4gICAgICAgIC8vIFNldCB3aGVuIGEgc2VsZWN0aW9uIGNoYW5nZSBpcyBkZXRlY3RlZCwgY2xlYXJlZCBvbiBmbHVzaFxuICAgICAgICB0aGlzLnNlbGVjdGlvbkNoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kZWxheWVkRmx1c2ggPSAtMTtcbiAgICAgICAgdGhpcy5yZXNpemVUaW1lb3V0ID0gLTE7XG4gICAgICAgIHRoaXMucXVldWUgPSBbXTtcbiAgICAgICAgdGhpcy5kZWxheWVkQW5kcm9pZEtleSA9IG51bGw7XG4gICAgICAgIHRoaXMuZmx1c2hpbmdBbmRyb2lkS2V5ID0gLTE7XG4gICAgICAgIHRoaXMubGFzdENoYW5nZSA9IDA7XG4gICAgICAgIHRoaXMuc2Nyb2xsVGFyZ2V0cyA9IFtdO1xuICAgICAgICB0aGlzLmludGVyc2VjdGlvbiA9IG51bGw7XG4gICAgICAgIHRoaXMucmVzaXplU2Nyb2xsID0gbnVsbDtcbiAgICAgICAgdGhpcy5pbnRlcnNlY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5nYXBJbnRlcnNlY3Rpb24gPSBudWxsO1xuICAgICAgICB0aGlzLmdhcHMgPSBbXTtcbiAgICAgICAgdGhpcy5wcmludFF1ZXJ5ID0gbnVsbDtcbiAgICAgICAgLy8gVGltZW91dCBmb3Igc2NoZWR1bGluZyBjaGVjayBvZiB0aGUgcGFyZW50cyB0aGF0IG5lZWQgc2Nyb2xsIGhhbmRsZXJzXG4gICAgICAgIHRoaXMucGFyZW50Q2hlY2sgPSAtMTtcbiAgICAgICAgdGhpcy5kb20gPSB2aWV3LmNvbnRlbnRET007XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihtdXRhdGlvbnMgPT4ge1xuICAgICAgICAgICAgZm9yIChsZXQgbXV0IG9mIG11dGF0aW9ucylcbiAgICAgICAgICAgICAgICB0aGlzLnF1ZXVlLnB1c2gobXV0KTtcbiAgICAgICAgICAgIC8vIElFMTEgd2lsbCBzb21ldGltZXMgKG9uIHR5cGluZyBvdmVyIGEgc2VsZWN0aW9uIG9yXG4gICAgICAgICAgICAvLyBiYWNrc3BhY2luZyBvdXQgYSBzaW5nbGUgY2hhcmFjdGVyIHRleHQgbm9kZSkgY2FsbCB0aGVcbiAgICAgICAgICAgIC8vIG9ic2VydmVyIGNhbGxiYWNrIGJlZm9yZSBhY3R1YWxseSB1cGRhdGluZyB0aGUgRE9NLlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIFVucmVsYXRlZGx5LCBpT1MgU2FmYXJpIHdpbGwsIHdoZW4gZW5kaW5nIGEgY29tcG9zaXRpb24sXG4gICAgICAgICAgICAvLyBzb21ldGltZXMgZmlyc3QgY2xlYXIgaXQsIGRlbGl2ZXIgdGhlIG11dGF0aW9ucywgYW5kIHRoZW5cbiAgICAgICAgICAgIC8vIHJlaW5zZXJ0IHRoZSBmaW5pc2hlZCB0ZXh0LiBDb2RlTWlycm9yJ3MgaGFuZGxpbmcgb2YgdGhlXG4gICAgICAgICAgICAvLyBkZWxldGlvbiB3aWxsIHByZXZlbnQgdGhlIHJlaW5zZXJ0aW9uIGZyb20gaGFwcGVuaW5nLFxuICAgICAgICAgICAgLy8gYnJlYWtpbmcgY29tcG9zaXRpb24uXG4gICAgICAgICAgICBpZiAoKGJyb3dzZXIuaWUgJiYgYnJvd3Nlci5pZV92ZXJzaW9uIDw9IDExIHx8IGJyb3dzZXIuaW9zICYmIHZpZXcuY29tcG9zaW5nKSAmJlxuICAgICAgICAgICAgICAgIG11dGF0aW9ucy5zb21lKG0gPT4gbS50eXBlID09IFwiY2hpbGRMaXN0XCIgJiYgbS5yZW1vdmVkTm9kZXMubGVuZ3RoIHx8XG4gICAgICAgICAgICAgICAgICAgIG0udHlwZSA9PSBcImNoYXJhY3RlckRhdGFcIiAmJiBtLm9sZFZhbHVlLmxlbmd0aCA+IG0udGFyZ2V0Lm5vZGVWYWx1ZS5sZW5ndGgpKVxuICAgICAgICAgICAgICAgIHRoaXMuZmx1c2hTb29uKCk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhpcy5mbHVzaCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHdpbmRvdy5FZGl0Q29udGV4dCAmJiB2aWV3LmNvbnN0cnVjdG9yLkVESVRfQ09OVEVYVCAhPT0gZmFsc2UgJiZcbiAgICAgICAgICAgIC8vIENocm9tZSA8MTI2IGRvZXNuJ3Qgc3VwcG9ydCBpbnZlcnRlZCBzZWxlY3Rpb25zIGluIGVkaXQgY29udGV4dCAoIzEzOTIpXG4gICAgICAgICAgICAhKGJyb3dzZXIuY2hyb21lICYmIGJyb3dzZXIuY2hyb21lX3ZlcnNpb24gPCAxMjYpKSB7XG4gICAgICAgICAgICB0aGlzLmVkaXRDb250ZXh0ID0gbmV3IEVkaXRDb250ZXh0TWFuYWdlcih2aWV3KTtcbiAgICAgICAgICAgIGlmICh2aWV3LnN0YXRlLmZhY2V0KGVkaXRhYmxlKSlcbiAgICAgICAgICAgICAgICB2aWV3LmNvbnRlbnRET00uZWRpdENvbnRleHQgPSB0aGlzLmVkaXRDb250ZXh0LmVkaXRDb250ZXh0O1xuICAgICAgICB9XG4gICAgICAgIGlmICh1c2VDaGFyRGF0YSlcbiAgICAgICAgICAgIHRoaXMub25DaGFyRGF0YSA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucXVldWUucHVzaCh7IHRhcmdldDogZXZlbnQudGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImNoYXJhY3RlckRhdGFcIixcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWU6IGV2ZW50LnByZXZWYWx1ZSB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLmZsdXNoU29vbigpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vblNlbGVjdGlvbkNoYW5nZSA9IHRoaXMub25TZWxlY3Rpb25DaGFuZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5vblJlc2l6ZSA9IHRoaXMub25SZXNpemUuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5vblByaW50ID0gdGhpcy5vblByaW50LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub25TY3JvbGwgPSB0aGlzLm9uU2Nyb2xsLmJpbmQodGhpcyk7XG4gICAgICAgIGlmICh3aW5kb3cubWF0Y2hNZWRpYSlcbiAgICAgICAgICAgIHRoaXMucHJpbnRRdWVyeSA9IHdpbmRvdy5tYXRjaE1lZGlhKFwicHJpbnRcIik7XG4gICAgICAgIGlmICh0eXBlb2YgUmVzaXplT2JzZXJ2ZXIgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aGlzLnJlc2l6ZVNjcm9sbCA9IG5ldyBSZXNpemVPYnNlcnZlcigoKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIGlmICgoKF9hID0gdGhpcy52aWV3LmRvY1ZpZXcpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sYXN0VXBkYXRlKSA8IERhdGUubm93KCkgLSA3NSlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vblJlc2l6ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnJlc2l6ZVNjcm9sbC5vYnNlcnZlKHZpZXcuc2Nyb2xsRE9NKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFkZFdpbmRvd0xpc3RlbmVycyh0aGlzLndpbiA9IHZpZXcud2luKTtcbiAgICAgICAgdGhpcy5zdGFydCgpO1xuICAgICAgICBpZiAodHlwZW9mIEludGVyc2VjdGlvbk9ic2VydmVyID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgdGhpcy5pbnRlcnNlY3Rpb24gPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoZW50cmllcyA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucGFyZW50Q2hlY2sgPCAwKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudENoZWNrID0gc2V0VGltZW91dCh0aGlzLmxpc3RlbkZvclNjcm9sbC5iaW5kKHRoaXMpLCAxMDAwKTtcbiAgICAgICAgICAgICAgICBpZiAoZW50cmllcy5sZW5ndGggPiAwICYmIChlbnRyaWVzW2VudHJpZXMubGVuZ3RoIC0gMV0uaW50ZXJzZWN0aW9uUmF0aW8gPiAwKSAhPSB0aGlzLmludGVyc2VjdGluZykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmludGVyc2VjdGluZyA9ICF0aGlzLmludGVyc2VjdGluZztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaW50ZXJzZWN0aW5nICE9IHRoaXMudmlldy5pblZpZXcpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uU2Nyb2xsQ2hhbmdlZChkb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7IHRocmVzaG9sZDogWzAsIC4wMDFdIH0pO1xuICAgICAgICAgICAgdGhpcy5pbnRlcnNlY3Rpb24ub2JzZXJ2ZSh0aGlzLmRvbSk7XG4gICAgICAgICAgICB0aGlzLmdhcEludGVyc2VjdGlvbiA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihlbnRyaWVzID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZW50cmllcy5sZW5ndGggPiAwICYmIGVudHJpZXNbZW50cmllcy5sZW5ndGggLSAxXS5pbnRlcnNlY3Rpb25SYXRpbyA+IDApXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25TY3JvbGxDaGFuZ2VkKGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIikpO1xuICAgICAgICAgICAgfSwge30pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGlzdGVuRm9yU2Nyb2xsKCk7XG4gICAgICAgIHRoaXMucmVhZFNlbGVjdGlvblJhbmdlKCk7XG4gICAgfVxuICAgIG9uU2Nyb2xsQ2hhbmdlZChlKSB7XG4gICAgICAgIHRoaXMudmlldy5pbnB1dFN0YXRlLnJ1bkhhbmRsZXJzKFwic2Nyb2xsXCIsIGUpO1xuICAgICAgICBpZiAodGhpcy5pbnRlcnNlY3RpbmcpXG4gICAgICAgICAgICB0aGlzLnZpZXcubWVhc3VyZSgpO1xuICAgIH1cbiAgICBvblNjcm9sbChlKSB7XG4gICAgICAgIGlmICh0aGlzLmludGVyc2VjdGluZylcbiAgICAgICAgICAgIHRoaXMuZmx1c2goZmFsc2UpO1xuICAgICAgICBpZiAodGhpcy5lZGl0Q29udGV4dClcbiAgICAgICAgICAgIHRoaXMudmlldy5yZXF1ZXN0TWVhc3VyZSh0aGlzLmVkaXRDb250ZXh0Lm1lYXN1cmVSZXEpO1xuICAgICAgICB0aGlzLm9uU2Nyb2xsQ2hhbmdlZChlKTtcbiAgICB9XG4gICAgb25SZXNpemUoKSB7XG4gICAgICAgIGlmICh0aGlzLnJlc2l6ZVRpbWVvdXQgPCAwKVxuICAgICAgICAgICAgdGhpcy5yZXNpemVUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNpemVUaW1lb3V0ID0gLTE7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LnJlcXVlc3RNZWFzdXJlKCk7XG4gICAgICAgICAgICB9LCA1MCk7XG4gICAgfVxuICAgIG9uUHJpbnQoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT0gXCJjaGFuZ2VcIiAmJiAhZXZlbnQubWF0Y2hlcylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy52aWV3LnZpZXdTdGF0ZS5wcmludGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMudmlldy5tZWFzdXJlKCk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy52aWV3LnZpZXdTdGF0ZS5wcmludGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy52aWV3LnJlcXVlc3RNZWFzdXJlKCk7XG4gICAgICAgIH0sIDUwMCk7XG4gICAgfVxuICAgIHVwZGF0ZUdhcHMoZ2Fwcykge1xuICAgICAgICBpZiAodGhpcy5nYXBJbnRlcnNlY3Rpb24gJiYgKGdhcHMubGVuZ3RoICE9IHRoaXMuZ2Fwcy5sZW5ndGggfHwgdGhpcy5nYXBzLnNvbWUoKGcsIGkpID0+IGcgIT0gZ2Fwc1tpXSkpKSB7XG4gICAgICAgICAgICB0aGlzLmdhcEludGVyc2VjdGlvbi5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICBmb3IgKGxldCBnYXAgb2YgZ2FwcylcbiAgICAgICAgICAgICAgICB0aGlzLmdhcEludGVyc2VjdGlvbi5vYnNlcnZlKGdhcCk7XG4gICAgICAgICAgICB0aGlzLmdhcHMgPSBnYXBzO1xuICAgICAgICB9XG4gICAgfVxuICAgIG9uU2VsZWN0aW9uQ2hhbmdlKGV2ZW50KSB7XG4gICAgICAgIGxldCB3YXNDaGFuZ2VkID0gdGhpcy5zZWxlY3Rpb25DaGFuZ2VkO1xuICAgICAgICBpZiAoIXRoaXMucmVhZFNlbGVjdGlvblJhbmdlKCkgfHwgdGhpcy5kZWxheWVkQW5kcm9pZEtleSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbGV0IHsgdmlldyB9ID0gdGhpcywgc2VsID0gdGhpcy5zZWxlY3Rpb25SYW5nZTtcbiAgICAgICAgaWYgKHZpZXcuc3RhdGUuZmFjZXQoZWRpdGFibGUpID8gdmlldy5yb290LmFjdGl2ZUVsZW1lbnQgIT0gdGhpcy5kb20gOiAhaGFzU2VsZWN0aW9uKHZpZXcuZG9tLCBzZWwpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBsZXQgY29udGV4dCA9IHNlbC5hbmNob3JOb2RlICYmIHZpZXcuZG9jVmlldy5uZWFyZXN0KHNlbC5hbmNob3JOb2RlKTtcbiAgICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5pZ25vcmVFdmVudChldmVudCkpIHtcbiAgICAgICAgICAgIGlmICghd2FzQ2hhbmdlZClcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGlvbkNoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBEZWxldGlvbnMgb24gSUUxMSBmaXJlIHRoZWlyIGV2ZW50cyBpbiB0aGUgd3Jvbmcgb3JkZXIsIGdpdmluZ1xuICAgICAgICAvLyB1cyBhIHNlbGVjdGlvbiBjaGFuZ2UgZXZlbnQgYmVmb3JlIHRoZSBET00gY2hhbmdlcyBhcmVcbiAgICAgICAgLy8gcmVwb3J0ZWQuXG4gICAgICAgIC8vIENocm9tZSBBbmRyb2lkIGhhcyBhIHNpbWlsYXIgaXNzdWUgd2hlbiBiYWNrc3BhY2luZyBvdXQgYVxuICAgICAgICAvLyBzZWxlY3Rpb24gKCM2NDUpLlxuICAgICAgICBpZiAoKGJyb3dzZXIuaWUgJiYgYnJvd3Nlci5pZV92ZXJzaW9uIDw9IDExIHx8IGJyb3dzZXIuYW5kcm9pZCAmJiBicm93c2VyLmNocm9tZSkgJiYgIXZpZXcuc3RhdGUuc2VsZWN0aW9uLm1haW4uZW1wdHkgJiZcbiAgICAgICAgICAgIC8vIChTZWxlY3Rpb24uaXNDb2xsYXBzZWQgaXNuJ3QgcmVsaWFibGUgb24gSUUpXG4gICAgICAgICAgICBzZWwuZm9jdXNOb2RlICYmIGlzRXF1aXZhbGVudFBvc2l0aW9uKHNlbC5mb2N1c05vZGUsIHNlbC5mb2N1c09mZnNldCwgc2VsLmFuY2hvck5vZGUsIHNlbC5hbmNob3JPZmZzZXQpKVxuICAgICAgICAgICAgdGhpcy5mbHVzaFNvb24oKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy5mbHVzaChmYWxzZSk7XG4gICAgfVxuICAgIHJlYWRTZWxlY3Rpb25SYW5nZSgpIHtcbiAgICAgICAgbGV0IHsgdmlldyB9ID0gdGhpcztcbiAgICAgICAgLy8gVGhlIFNlbGVjdGlvbiBvYmplY3QgaXMgYnJva2VuIGluIHNoYWRvdyByb290cyBpbiBTYWZhcmkuIFNlZVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vY29kZW1pcnJvci9kZXYvaXNzdWVzLzQxNFxuICAgICAgICBsZXQgc2VsZWN0aW9uID0gZ2V0U2VsZWN0aW9uKHZpZXcucm9vdCk7XG4gICAgICAgIGlmICghc2VsZWN0aW9uKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBsZXQgcmFuZ2UgPSBicm93c2VyLnNhZmFyaSAmJiB2aWV3LnJvb3Qubm9kZVR5cGUgPT0gMTEgJiZcbiAgICAgICAgICAgIGRlZXBBY3RpdmVFbGVtZW50KHRoaXMuZG9tLm93bmVyRG9jdW1lbnQpID09IHRoaXMuZG9tICYmXG4gICAgICAgICAgICBzYWZhcmlTZWxlY3Rpb25SYW5nZUhhY2sodGhpcy52aWV3LCBzZWxlY3Rpb24pIHx8IHNlbGVjdGlvbjtcbiAgICAgICAgaWYgKCFyYW5nZSB8fCB0aGlzLnNlbGVjdGlvblJhbmdlLmVxKHJhbmdlKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgbGV0IGxvY2FsID0gaGFzU2VsZWN0aW9uKHRoaXMuZG9tLCByYW5nZSk7XG4gICAgICAgIC8vIERldGVjdCB0aGUgc2l0dWF0aW9uIHdoZXJlIHRoZSBicm93c2VyIGhhcywgb24gZm9jdXMsIG1vdmVkIHRoZVxuICAgICAgICAvLyBzZWxlY3Rpb24gdG8gdGhlIHN0YXJ0IG9mIHRoZSBjb250ZW50IGVsZW1lbnQuIFJlc2V0IGl0IHRvIHRoZVxuICAgICAgICAvLyBwb3NpdGlvbiBmcm9tIHRoZSBlZGl0b3Igc3RhdGUuXG4gICAgICAgIGlmIChsb2NhbCAmJiAhdGhpcy5zZWxlY3Rpb25DaGFuZ2VkICYmXG4gICAgICAgICAgICB2aWV3LmlucHV0U3RhdGUubGFzdEZvY3VzVGltZSA+IERhdGUubm93KCkgLSAyMDAgJiZcbiAgICAgICAgICAgIHZpZXcuaW5wdXRTdGF0ZS5sYXN0VG91Y2hUaW1lIDwgRGF0ZS5ub3coKSAtIDMwMCAmJlxuICAgICAgICAgICAgYXRFbGVtZW50U3RhcnQodGhpcy5kb20sIHJhbmdlKSkge1xuICAgICAgICAgICAgdGhpcy52aWV3LmlucHV0U3RhdGUubGFzdEZvY3VzVGltZSA9IDA7XG4gICAgICAgICAgICB2aWV3LmRvY1ZpZXcudXBkYXRlU2VsZWN0aW9uKCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZWxlY3Rpb25SYW5nZS5zZXRSYW5nZShyYW5nZSk7XG4gICAgICAgIGlmIChsb2NhbClcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBzZXRTZWxlY3Rpb25SYW5nZShhbmNob3IsIGhlYWQpIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25SYW5nZS5zZXQoYW5jaG9yLm5vZGUsIGFuY2hvci5vZmZzZXQsIGhlYWQubm9kZSwgaGVhZC5vZmZzZXQpO1xuICAgICAgICB0aGlzLnNlbGVjdGlvbkNoYW5nZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgY2xlYXJTZWxlY3Rpb25SYW5nZSgpIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25SYW5nZS5zZXQobnVsbCwgMCwgbnVsbCwgMCk7XG4gICAgfVxuICAgIGxpc3RlbkZvclNjcm9sbCgpIHtcbiAgICAgICAgdGhpcy5wYXJlbnRDaGVjayA9IC0xO1xuICAgICAgICBsZXQgaSA9IDAsIGNoYW5nZWQgPSBudWxsO1xuICAgICAgICBmb3IgKGxldCBkb20gPSB0aGlzLmRvbTsgZG9tOykge1xuICAgICAgICAgICAgaWYgKGRvbS5ub2RlVHlwZSA9PSAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjaGFuZ2VkICYmIGkgPCB0aGlzLnNjcm9sbFRhcmdldHMubGVuZ3RoICYmIHRoaXMuc2Nyb2xsVGFyZ2V0c1tpXSA9PSBkb20pXG4gICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICBlbHNlIGlmICghY2hhbmdlZClcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlZCA9IHRoaXMuc2Nyb2xsVGFyZ2V0cy5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgICAgICBpZiAoY2hhbmdlZClcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlZC5wdXNoKGRvbSk7XG4gICAgICAgICAgICAgICAgZG9tID0gZG9tLmFzc2lnbmVkU2xvdCB8fCBkb20ucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGRvbS5ub2RlVHlwZSA9PSAxMSkgeyAvLyBTaGFkb3cgcm9vdFxuICAgICAgICAgICAgICAgIGRvbSA9IGRvbS5ob3N0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPCB0aGlzLnNjcm9sbFRhcmdldHMubGVuZ3RoICYmICFjaGFuZ2VkKVxuICAgICAgICAgICAgY2hhbmdlZCA9IHRoaXMuc2Nyb2xsVGFyZ2V0cy5zbGljZSgwLCBpKTtcbiAgICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGRvbSBvZiB0aGlzLnNjcm9sbFRhcmdldHMpXG4gICAgICAgICAgICAgICAgZG9tLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgdGhpcy5vblNjcm9sbCk7XG4gICAgICAgICAgICBmb3IgKGxldCBkb20gb2YgdGhpcy5zY3JvbGxUYXJnZXRzID0gY2hhbmdlZClcbiAgICAgICAgICAgICAgICBkb20uYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCB0aGlzLm9uU2Nyb2xsKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZ25vcmUoZikge1xuICAgICAgICBpZiAoIXRoaXMuYWN0aXZlKVxuICAgICAgICAgICAgcmV0dXJuIGYoKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICAgICAgcmV0dXJuIGYoKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnQoKTtcbiAgICAgICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLm9ic2VydmVyLm9ic2VydmUodGhpcy5kb20sIG9ic2VydmVPcHRpb25zKTtcbiAgICAgICAgaWYgKHVzZUNoYXJEYXRhKVxuICAgICAgICAgICAgdGhpcy5kb20uYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNoYXJhY3RlckRhdGFNb2RpZmllZFwiLCB0aGlzLm9uQ2hhckRhdGEpO1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgfVxuICAgIHN0b3AoKSB7XG4gICAgICAgIGlmICghdGhpcy5hY3RpdmUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICBpZiAodXNlQ2hhckRhdGEpXG4gICAgICAgICAgICB0aGlzLmRvbS5yZW1vdmVFdmVudExpc3RlbmVyKFwiRE9NQ2hhcmFjdGVyRGF0YU1vZGlmaWVkXCIsIHRoaXMub25DaGFyRGF0YSk7XG4gICAgfVxuICAgIC8vIFRocm93IGF3YXkgYW55IHBlbmRpbmcgY2hhbmdlc1xuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLnByb2Nlc3NSZWNvcmRzKCk7XG4gICAgICAgIHRoaXMucXVldWUubGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25DaGFuZ2VkID0gZmFsc2U7XG4gICAgfVxuICAgIC8vIENocm9tZSBBbmRyb2lkLCBlc3BlY2lhbGx5IGluIGNvbWJpbmF0aW9uIHdpdGggR0JvYXJkLCBub3Qgb25seVxuICAgIC8vIGRvZXNuJ3QgcmVsaWFibHkgZmlyZSByZWd1bGFyIGtleSBldmVudHMsIGJ1dCBhbHNvIG9mdGVuXG4gICAgLy8gc3Vycm91bmRzIHRoZSBlZmZlY3Qgb2YgZW50ZXIgb3IgYmFja3NwYWNlIHdpdGggYSBidW5jaCBvZlxuICAgIC8vIGNvbXBvc2l0aW9uIGV2ZW50cyB0aGF0LCB3aGVuIGludGVycnVwdGVkLCBjYXVzZSB0ZXh0IGR1cGxpY2F0aW9uXG4gICAgLy8gb3Igb3RoZXIga2luZHMgb2YgY29ycnVwdGlvbi4gVGhpcyBoYWNrIG1ha2VzIHRoZSBlZGl0b3IgYmFjayBvZmZcbiAgICAvLyBmcm9tIGhhbmRsaW5nIERPTSBjaGFuZ2VzIGZvciBhIG1vbWVudCB3aGVuIHN1Y2ggYSBrZXkgaXNcbiAgICAvLyBkZXRlY3RlZCAodmlhIGJlZm9yZWlucHV0IG9yIGtleWRvd24pLCBhbmQgdGhlbiB0cmllcyB0byBmbHVzaFxuICAgIC8vIHRoZW0gb3IsIGlmIHRoYXQgaGFzIG5vIGVmZmVjdCwgZGlzcGF0Y2hlcyB0aGUgZ2l2ZW4ga2V5LlxuICAgIGRlbGF5QW5kcm9pZEtleShrZXksIGtleUNvZGUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoIXRoaXMuZGVsYXllZEFuZHJvaWRLZXkpIHtcbiAgICAgICAgICAgIGxldCBmbHVzaCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQga2V5ID0gdGhpcy5kZWxheWVkQW5kcm9pZEtleTtcbiAgICAgICAgICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJEZWxheWVkQW5kcm9pZEtleSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXcuaW5wdXRTdGF0ZS5sYXN0S2V5Q29kZSA9IGtleS5rZXlDb2RlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXcuaW5wdXRTdGF0ZS5sYXN0S2V5VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBmbHVzaGVkID0gdGhpcy5mbHVzaCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWZsdXNoZWQgJiYga2V5LmZvcmNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2hLZXkodGhpcy5kb20sIGtleS5rZXksIGtleS5rZXlDb2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5mbHVzaGluZ0FuZHJvaWRLZXkgPSB0aGlzLnZpZXcud2luLnJlcXVlc3RBbmltYXRpb25GcmFtZShmbHVzaCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2luY2UgYmFja3NwYWNlIGJlZm9yZWlucHV0IGlzIHNvbWV0aW1lcyBzaWduYWxsZWQgc3B1cmlvdXNseSxcbiAgICAgICAgLy8gRW50ZXIgYWx3YXlzIHRha2VzIHByZWNlZGVuY2UuXG4gICAgICAgIGlmICghdGhpcy5kZWxheWVkQW5kcm9pZEtleSB8fCBrZXkgPT0gXCJFbnRlclwiKVxuICAgICAgICAgICAgdGhpcy5kZWxheWVkQW5kcm9pZEtleSA9IHtcbiAgICAgICAgICAgICAgICBrZXksIGtleUNvZGUsXG4gICAgICAgICAgICAgICAgLy8gT25seSBydW4gdGhlIGtleSBoYW5kbGVyIHdoZW4gbm8gY2hhbmdlcyBhcmUgZGV0ZWN0ZWQgaWZcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGlzbid0IGNvbWluZyByaWdodCBhZnRlciBhbm90aGVyIGNoYW5nZSwgaW4gd2hpY2ggY2FzZVxuICAgICAgICAgICAgICAgIC8vIGl0IGlzIHByb2JhYmx5IHBhcnQgb2YgYSB3ZWlyZCBjaGFpbiBvZiB1cGRhdGVzLCBhbmQgc2hvdWxkXG4gICAgICAgICAgICAgICAgLy8gYmUgaWdub3JlZCBpZiBpdCByZXR1cm5zIHRoZSBET00gdG8gaXRzIHByZXZpb3VzIHN0YXRlLlxuICAgICAgICAgICAgICAgIGZvcmNlOiB0aGlzLmxhc3RDaGFuZ2UgPCBEYXRlLm5vdygpIC0gNTAgfHwgISEoKF9hID0gdGhpcy5kZWxheWVkQW5kcm9pZEtleSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZvcmNlKVxuICAgICAgICAgICAgfTtcbiAgICB9XG4gICAgY2xlYXJEZWxheWVkQW5kcm9pZEtleSgpIHtcbiAgICAgICAgdGhpcy53aW4uY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5mbHVzaGluZ0FuZHJvaWRLZXkpO1xuICAgICAgICB0aGlzLmRlbGF5ZWRBbmRyb2lkS2V5ID0gbnVsbDtcbiAgICAgICAgdGhpcy5mbHVzaGluZ0FuZHJvaWRLZXkgPSAtMTtcbiAgICB9XG4gICAgZmx1c2hTb29uKCkge1xuICAgICAgICBpZiAodGhpcy5kZWxheWVkRmx1c2ggPCAwKVxuICAgICAgICAgICAgdGhpcy5kZWxheWVkRmx1c2ggPSB0aGlzLnZpZXcud2luLnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7IHRoaXMuZGVsYXllZEZsdXNoID0gLTE7IHRoaXMuZmx1c2goKTsgfSk7XG4gICAgfVxuICAgIGZvcmNlRmx1c2goKSB7XG4gICAgICAgIGlmICh0aGlzLmRlbGF5ZWRGbHVzaCA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnZpZXcud2luLmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuZGVsYXllZEZsdXNoKTtcbiAgICAgICAgICAgIHRoaXMuZGVsYXllZEZsdXNoID0gLTE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5mbHVzaCgpO1xuICAgIH1cbiAgICBwZW5kaW5nUmVjb3JkcygpIHtcbiAgICAgICAgZm9yIChsZXQgbXV0IG9mIHRoaXMub2JzZXJ2ZXIudGFrZVJlY29yZHMoKSlcbiAgICAgICAgICAgIHRoaXMucXVldWUucHVzaChtdXQpO1xuICAgICAgICByZXR1cm4gdGhpcy5xdWV1ZTtcbiAgICB9XG4gICAgcHJvY2Vzc1JlY29yZHMoKSB7XG4gICAgICAgIGxldCByZWNvcmRzID0gdGhpcy5wZW5kaW5nUmVjb3JkcygpO1xuICAgICAgICBpZiAocmVjb3Jkcy5sZW5ndGgpXG4gICAgICAgICAgICB0aGlzLnF1ZXVlID0gW107XG4gICAgICAgIGxldCBmcm9tID0gLTEsIHRvID0gLTEsIHR5cGVPdmVyID0gZmFsc2U7XG4gICAgICAgIGZvciAobGV0IHJlY29yZCBvZiByZWNvcmRzKSB7XG4gICAgICAgICAgICBsZXQgcmFuZ2UgPSB0aGlzLnJlYWRNdXRhdGlvbihyZWNvcmQpO1xuICAgICAgICAgICAgaWYgKCFyYW5nZSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGlmIChyYW5nZS50eXBlT3ZlcilcbiAgICAgICAgICAgICAgICB0eXBlT3ZlciA9IHRydWU7XG4gICAgICAgICAgICBpZiAoZnJvbSA9PSAtMSkge1xuICAgICAgICAgICAgICAgICh7IGZyb20sIHRvIH0gPSByYW5nZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBmcm9tID0gTWF0aC5taW4ocmFuZ2UuZnJvbSwgZnJvbSk7XG4gICAgICAgICAgICAgICAgdG8gPSBNYXRoLm1heChyYW5nZS50bywgdG8pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGZyb20sIHRvLCB0eXBlT3ZlciB9O1xuICAgIH1cbiAgICByZWFkQ2hhbmdlKCkge1xuICAgICAgICBsZXQgeyBmcm9tLCB0bywgdHlwZU92ZXIgfSA9IHRoaXMucHJvY2Vzc1JlY29yZHMoKTtcbiAgICAgICAgbGV0IG5ld1NlbCA9IHRoaXMuc2VsZWN0aW9uQ2hhbmdlZCAmJiBoYXNTZWxlY3Rpb24odGhpcy5kb20sIHRoaXMuc2VsZWN0aW9uUmFuZ2UpO1xuICAgICAgICBpZiAoZnJvbSA8IDAgJiYgIW5ld1NlbClcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBpZiAoZnJvbSA+IC0xKVxuICAgICAgICAgICAgdGhpcy5sYXN0Q2hhbmdlID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdGhpcy52aWV3LmlucHV0U3RhdGUubGFzdEZvY3VzVGltZSA9IDA7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uQ2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICBsZXQgY2hhbmdlID0gbmV3IERPTUNoYW5nZSh0aGlzLnZpZXcsIGZyb20sIHRvLCB0eXBlT3Zlcik7XG4gICAgICAgIHRoaXMudmlldy5kb2NWaWV3LmRvbUNoYW5nZWQgPSB7IG5ld1NlbDogY2hhbmdlLm5ld1NlbCA/IGNoYW5nZS5uZXdTZWwubWFpbiA6IG51bGwgfTtcbiAgICAgICAgcmV0dXJuIGNoYW5nZTtcbiAgICB9XG4gICAgLy8gQXBwbHkgcGVuZGluZyBjaGFuZ2VzLCBpZiBhbnlcbiAgICBmbHVzaChyZWFkU2VsZWN0aW9uID0gdHJ1ZSkge1xuICAgICAgICAvLyBDb21wbGV0ZWx5IGhvbGQgb2ZmIGZsdXNoaW5nIHdoZW4gcGVuZGluZyBrZXlzIGFyZSBzZXTigJR0aGUgY29kZVxuICAgICAgICAvLyBtYW5hZ2luZyB0aG9zZSB3aWxsIG1ha2Ugc3VyZSBwcm9jZXNzUmVjb3JkcyBpcyBjYWxsZWQgYW5kIHRoZVxuICAgICAgICAvLyB2aWV3IGlzIHJlc3luY2hyb25pemVkIGFmdGVyXG4gICAgICAgIGlmICh0aGlzLmRlbGF5ZWRGbHVzaCA+PSAwIHx8IHRoaXMuZGVsYXllZEFuZHJvaWRLZXkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChyZWFkU2VsZWN0aW9uKVxuICAgICAgICAgICAgdGhpcy5yZWFkU2VsZWN0aW9uUmFuZ2UoKTtcbiAgICAgICAgbGV0IGRvbUNoYW5nZSA9IHRoaXMucmVhZENoYW5nZSgpO1xuICAgICAgICBpZiAoIWRvbUNoYW5nZSkge1xuICAgICAgICAgICAgdGhpcy52aWV3LnJlcXVlc3RNZWFzdXJlKCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHN0YXJ0U3RhdGUgPSB0aGlzLnZpZXcuc3RhdGU7XG4gICAgICAgIGxldCBoYW5kbGVkID0gYXBwbHlET01DaGFuZ2UodGhpcy52aWV3LCBkb21DaGFuZ2UpO1xuICAgICAgICAvLyBUaGUgdmlldyB3YXNuJ3QgdXBkYXRlZCBidXQgRE9NL3NlbGVjdGlvbiBjaGFuZ2VzIHdlcmUgc2Vlbi4gUmVzZXQgdGhlIHZpZXcuXG4gICAgICAgIGlmICh0aGlzLnZpZXcuc3RhdGUgPT0gc3RhcnRTdGF0ZSAmJlxuICAgICAgICAgICAgKGRvbUNoYW5nZS5kb21DaGFuZ2VkIHx8IGRvbUNoYW5nZS5uZXdTZWwgJiYgIWRvbUNoYW5nZS5uZXdTZWwubWFpbi5lcSh0aGlzLnZpZXcuc3RhdGUuc2VsZWN0aW9uLm1haW4pKSlcbiAgICAgICAgICAgIHRoaXMudmlldy51cGRhdGUoW10pO1xuICAgICAgICByZXR1cm4gaGFuZGxlZDtcbiAgICB9XG4gICAgcmVhZE11dGF0aW9uKHJlYykge1xuICAgICAgICBsZXQgY1ZpZXcgPSB0aGlzLnZpZXcuZG9jVmlldy5uZWFyZXN0KHJlYy50YXJnZXQpO1xuICAgICAgICBpZiAoIWNWaWV3IHx8IGNWaWV3Lmlnbm9yZU11dGF0aW9uKHJlYykpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgY1ZpZXcubWFya0RpcnR5KHJlYy50eXBlID09IFwiYXR0cmlidXRlc1wiKTtcbiAgICAgICAgaWYgKHJlYy50eXBlID09IFwiYXR0cmlidXRlc1wiKVxuICAgICAgICAgICAgY1ZpZXcuZmxhZ3MgfD0gNCAvKiBWaWV3RmxhZy5BdHRyc0RpcnR5ICovO1xuICAgICAgICBpZiAocmVjLnR5cGUgPT0gXCJjaGlsZExpc3RcIikge1xuICAgICAgICAgICAgbGV0IGNoaWxkQmVmb3JlID0gZmluZENoaWxkKGNWaWV3LCByZWMucHJldmlvdXNTaWJsaW5nIHx8IHJlYy50YXJnZXQucHJldmlvdXNTaWJsaW5nLCAtMSk7XG4gICAgICAgICAgICBsZXQgY2hpbGRBZnRlciA9IGZpbmRDaGlsZChjVmlldywgcmVjLm5leHRTaWJsaW5nIHx8IHJlYy50YXJnZXQubmV4dFNpYmxpbmcsIDEpO1xuICAgICAgICAgICAgcmV0dXJuIHsgZnJvbTogY2hpbGRCZWZvcmUgPyBjVmlldy5wb3NBZnRlcihjaGlsZEJlZm9yZSkgOiBjVmlldy5wb3NBdFN0YXJ0LFxuICAgICAgICAgICAgICAgIHRvOiBjaGlsZEFmdGVyID8gY1ZpZXcucG9zQmVmb3JlKGNoaWxkQWZ0ZXIpIDogY1ZpZXcucG9zQXRFbmQsIHR5cGVPdmVyOiBmYWxzZSB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHJlYy50eXBlID09IFwiY2hhcmFjdGVyRGF0YVwiKSB7XG4gICAgICAgICAgICByZXR1cm4geyBmcm9tOiBjVmlldy5wb3NBdFN0YXJ0LCB0bzogY1ZpZXcucG9zQXRFbmQsIHR5cGVPdmVyOiByZWMudGFyZ2V0Lm5vZGVWYWx1ZSA9PSByZWMub2xkVmFsdWUgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldFdpbmRvdyh3aW4pIHtcbiAgICAgICAgaWYgKHdpbiAhPSB0aGlzLndpbikge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVXaW5kb3dMaXN0ZW5lcnModGhpcy53aW4pO1xuICAgICAgICAgICAgdGhpcy53aW4gPSB3aW47XG4gICAgICAgICAgICB0aGlzLmFkZFdpbmRvd0xpc3RlbmVycyh0aGlzLndpbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWRkV2luZG93TGlzdGVuZXJzKHdpbikge1xuICAgICAgICB3aW4uYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLm9uUmVzaXplKTtcbiAgICAgICAgaWYgKHRoaXMucHJpbnRRdWVyeSlcbiAgICAgICAgICAgIHRoaXMucHJpbnRRdWVyeS5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIHRoaXMub25QcmludCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHdpbi5hZGRFdmVudExpc3RlbmVyKFwiYmVmb3JlcHJpbnRcIiwgdGhpcy5vblByaW50KTtcbiAgICAgICAgd2luLmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgdGhpcy5vblNjcm9sbCk7XG4gICAgICAgIHdpbi5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwic2VsZWN0aW9uY2hhbmdlXCIsIHRoaXMub25TZWxlY3Rpb25DaGFuZ2UpO1xuICAgIH1cbiAgICByZW1vdmVXaW5kb3dMaXN0ZW5lcnMod2luKSB7XG4gICAgICAgIHdpbi5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHRoaXMub25TY3JvbGwpO1xuICAgICAgICB3aW4ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLm9uUmVzaXplKTtcbiAgICAgICAgaWYgKHRoaXMucHJpbnRRdWVyeSlcbiAgICAgICAgICAgIHRoaXMucHJpbnRRdWVyeS5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIHRoaXMub25QcmludCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHdpbi5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmVmb3JlcHJpbnRcIiwgdGhpcy5vblByaW50KTtcbiAgICAgICAgd2luLmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzZWxlY3Rpb25jaGFuZ2VcIiwgdGhpcy5vblNlbGVjdGlvbkNoYW5nZSk7XG4gICAgfVxuICAgIHVwZGF0ZSh1cGRhdGUpIHtcbiAgICAgICAgaWYgKHRoaXMuZWRpdENvbnRleHQpIHtcbiAgICAgICAgICAgIHRoaXMuZWRpdENvbnRleHQudXBkYXRlKHVwZGF0ZSk7XG4gICAgICAgICAgICBpZiAodXBkYXRlLnN0YXJ0U3RhdGUuZmFjZXQoZWRpdGFibGUpICE9IHVwZGF0ZS5zdGF0ZS5mYWNldChlZGl0YWJsZSkpXG4gICAgICAgICAgICAgICAgdXBkYXRlLnZpZXcuY29udGVudERPTS5lZGl0Q29udGV4dCA9IHVwZGF0ZS5zdGF0ZS5mYWNldChlZGl0YWJsZSkgPyB0aGlzLmVkaXRDb250ZXh0LmVkaXRDb250ZXh0IDogbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgIChfYSA9IHRoaXMuaW50ZXJzZWN0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGlzY29ubmVjdCgpO1xuICAgICAgICAoX2IgPSB0aGlzLmdhcEludGVyc2VjdGlvbikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgKF9jID0gdGhpcy5yZXNpemVTY3JvbGwpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5kaXNjb25uZWN0KCk7XG4gICAgICAgIGZvciAobGV0IGRvbSBvZiB0aGlzLnNjcm9sbFRhcmdldHMpXG4gICAgICAgICAgICBkb20ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCB0aGlzLm9uU2Nyb2xsKTtcbiAgICAgICAgdGhpcy5yZW1vdmVXaW5kb3dMaXN0ZW5lcnModGhpcy53aW4pO1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5wYXJlbnRDaGVjayk7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnJlc2l6ZVRpbWVvdXQpO1xuICAgICAgICB0aGlzLndpbi5jYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLmRlbGF5ZWRGbHVzaCk7XG4gICAgICAgIHRoaXMud2luLmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuZmx1c2hpbmdBbmRyb2lkS2V5KTtcbiAgICB9XG59XG5mdW5jdGlvbiBmaW5kQ2hpbGQoY1ZpZXcsIGRvbSwgZGlyKSB7XG4gICAgd2hpbGUgKGRvbSkge1xuICAgICAgICBsZXQgY3VyVmlldyA9IENvbnRlbnRWaWV3LmdldChkb20pO1xuICAgICAgICBpZiAoY3VyVmlldyAmJiBjdXJWaWV3LnBhcmVudCA9PSBjVmlldylcbiAgICAgICAgICAgIHJldHVybiBjdXJWaWV3O1xuICAgICAgICBsZXQgcGFyZW50ID0gZG9tLnBhcmVudE5vZGU7XG4gICAgICAgIGRvbSA9IHBhcmVudCAhPSBjVmlldy5kb20gPyBwYXJlbnQgOiBkaXIgPiAwID8gZG9tLm5leHRTaWJsaW5nIDogZG9tLnByZXZpb3VzU2libGluZztcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBidWlsZFNlbGVjdGlvblJhbmdlRnJvbVJhbmdlKHZpZXcsIHJhbmdlKSB7XG4gICAgbGV0IGFuY2hvck5vZGUgPSByYW5nZS5zdGFydENvbnRhaW5lciwgYW5jaG9yT2Zmc2V0ID0gcmFuZ2Uuc3RhcnRPZmZzZXQ7XG4gICAgbGV0IGZvY3VzTm9kZSA9IHJhbmdlLmVuZENvbnRhaW5lciwgZm9jdXNPZmZzZXQgPSByYW5nZS5lbmRPZmZzZXQ7XG4gICAgbGV0IGN1ckFuY2hvciA9IHZpZXcuZG9jVmlldy5kb21BdFBvcyh2aWV3LnN0YXRlLnNlbGVjdGlvbi5tYWluLmFuY2hvcik7XG4gICAgLy8gU2luY2Ugc3VjaCBhIHJhbmdlIGRvZXNuJ3QgZGlzdGluZ3Vpc2ggYmV0d2VlbiBhbmNob3IgYW5kIGhlYWQsXG4gICAgLy8gdXNlIGEgaGV1cmlzdGljIHRoYXQgZmxpcHMgaXQgYXJvdW5kIGlmIGl0cyBlbmQgbWF0Y2hlcyB0aGVcbiAgICAvLyBjdXJyZW50IGFuY2hvci5cbiAgICBpZiAoaXNFcXVpdmFsZW50UG9zaXRpb24oY3VyQW5jaG9yLm5vZGUsIGN1ckFuY2hvci5vZmZzZXQsIGZvY3VzTm9kZSwgZm9jdXNPZmZzZXQpKVxuICAgICAgICBbYW5jaG9yTm9kZSwgYW5jaG9yT2Zmc2V0LCBmb2N1c05vZGUsIGZvY3VzT2Zmc2V0XSA9IFtmb2N1c05vZGUsIGZvY3VzT2Zmc2V0LCBhbmNob3JOb2RlLCBhbmNob3JPZmZzZXRdO1xuICAgIHJldHVybiB7IGFuY2hvck5vZGUsIGFuY2hvck9mZnNldCwgZm9jdXNOb2RlLCBmb2N1c09mZnNldCB9O1xufVxuLy8gVXNlZCB0byB3b3JrIGFyb3VuZCBhIFNhZmFyaSBTZWxlY3Rpb24vc2hhZG93IERPTSBidWcgKCM0MTQpXG5mdW5jdGlvbiBzYWZhcmlTZWxlY3Rpb25SYW5nZUhhY2sodmlldywgc2VsZWN0aW9uKSB7XG4gICAgaWYgKHNlbGVjdGlvbi5nZXRDb21wb3NlZFJhbmdlcykge1xuICAgICAgICBsZXQgcmFuZ2UgPSBzZWxlY3Rpb24uZ2V0Q29tcG9zZWRSYW5nZXModmlldy5yb290KVswXTtcbiAgICAgICAgaWYgKHJhbmdlKVxuICAgICAgICAgICAgcmV0dXJuIGJ1aWxkU2VsZWN0aW9uUmFuZ2VGcm9tUmFuZ2UodmlldywgcmFuZ2UpO1xuICAgIH1cbiAgICBsZXQgZm91bmQgPSBudWxsO1xuICAgIC8vIEJlY2F1c2UgU2FmYXJpIChhdCBsZWFzdCBpbiAyMDE4LTIwMjEpIGRvZXNuJ3QgcHJvdmlkZSByZWd1bGFyXG4gICAgLy8gYWNjZXNzIHRvIHRoZSBzZWxlY3Rpb24gaW5zaWRlIGEgc2hhZG93cm9vdCwgd2UgaGF2ZSB0byBwZXJmb3JtIGFcbiAgICAvLyByaWRpY3Vsb3VzIGhhY2sgdG8gZ2V0IGF0IGl04oCUdXNpbmcgYGV4ZWNDb21tYW5kYCB0byB0cmlnZ2VyIGFcbiAgICAvLyBgYmVmb3JlSW5wdXRgIGV2ZW50IHNvIHRoYXQgd2UgY2FuIHJlYWQgdGhlIHRhcmdldCByYW5nZSBmcm9tIHRoZVxuICAgIC8vIGV2ZW50LlxuICAgIGZ1bmN0aW9uIHJlYWQoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGZvdW5kID0gZXZlbnQuZ2V0VGFyZ2V0UmFuZ2VzKClbMF07XG4gICAgfVxuICAgIHZpZXcuY29udGVudERPTS5hZGRFdmVudExpc3RlbmVyKFwiYmVmb3JlaW5wdXRcIiwgcmVhZCwgdHJ1ZSk7XG4gICAgdmlldy5kb20ub3duZXJEb2N1bWVudC5leGVjQ29tbWFuZChcImluZGVudFwiKTtcbiAgICB2aWV3LmNvbnRlbnRET00ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImJlZm9yZWlucHV0XCIsIHJlYWQsIHRydWUpO1xuICAgIHJldHVybiBmb3VuZCA/IGJ1aWxkU2VsZWN0aW9uUmFuZ2VGcm9tUmFuZ2UodmlldywgZm91bmQpIDogbnVsbDtcbn1cbmNsYXNzIEVkaXRDb250ZXh0TWFuYWdlciB7XG4gICAgY29uc3RydWN0b3Iodmlldykge1xuICAgICAgICAvLyBUaGUgZG9jdW1lbnQgd2luZG93IGZvciB3aGljaCB0aGUgdGV4dCBpbiB0aGUgY29udGV4dCBpc1xuICAgICAgICAvLyBtYWludGFpbmVkLiBGb3IgbGFyZ2UgZG9jdW1lbnRzLCB0aGlzIG1heSBiZSBzbWFsbGVyIHRoYW4gdGhlXG4gICAgICAgIC8vIGVkaXRvciBkb2N1bWVudC4gVGhpcyB3aW5kb3cgYWx3YXlzIGluY2x1ZGVzIHRoZSBzZWxlY3Rpb24gaGVhZC5cbiAgICAgICAgdGhpcy5mcm9tID0gMDtcbiAgICAgICAgdGhpcy50byA9IDA7XG4gICAgICAgIC8vIFdoZW4gYXBwbHlpbmcgYSB0cmFuc2FjdGlvbiwgdGhpcyBpcyB1c2VkIHRvIGNvbXBhcmUgdGhlIGNoYW5nZVxuICAgICAgICAvLyBtYWRlIHRvIHRoZSBjb250ZXh0IGNvbnRlbnQgdG8gdGhlIGNoYW5nZSBpbiB0aGUgdHJhbnNhY3Rpb24gaW5cbiAgICAgICAgLy8gb3JkZXIgdG8gbWFrZSB0aGUgbWluaW1hbCBjaGFuZ2VzIHRvIHRoZSBjb250ZXh0IChzaW5jZSB0b3VjaGluZ1xuICAgICAgICAvLyB0aGF0IHNvbWV0aW1lcyBicmVha3Mgc2VyaWVzIG9mIG11bHRpcGxlIGVkaXRzIG1hZGUgZm9yIGEgc2luZ2xlXG4gICAgICAgIC8vIHVzZXIgYWN0aW9uIG9uIHNvbWUgQW5kcm9pZCBrZXlib2FyZHMpXG4gICAgICAgIHRoaXMucGVuZGluZ0NvbnRleHRDaGFuZ2UgPSBudWxsO1xuICAgICAgICB0aGlzLnJlc2V0UmFuZ2Uodmlldy5zdGF0ZSk7XG4gICAgICAgIGxldCBjb250ZXh0ID0gdGhpcy5lZGl0Q29udGV4dCA9IG5ldyB3aW5kb3cuRWRpdENvbnRleHQoe1xuICAgICAgICAgICAgdGV4dDogdmlldy5zdGF0ZS5kb2Muc2xpY2VTdHJpbmcodGhpcy5mcm9tLCB0aGlzLnRvKSxcbiAgICAgICAgICAgIHNlbGVjdGlvblN0YXJ0OiB0aGlzLnRvQ29udGV4dFBvcyhNYXRoLm1heCh0aGlzLmZyb20sIE1hdGgubWluKHRoaXMudG8sIHZpZXcuc3RhdGUuc2VsZWN0aW9uLm1haW4uYW5jaG9yKSkpLFxuICAgICAgICAgICAgc2VsZWN0aW9uRW5kOiB0aGlzLnRvQ29udGV4dFBvcyh2aWV3LnN0YXRlLnNlbGVjdGlvbi5tYWluLmhlYWQpXG4gICAgICAgIH0pO1xuICAgICAgICBjb250ZXh0LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXh0dXBkYXRlXCIsIGUgPT4ge1xuICAgICAgICAgICAgbGV0IHsgYW5jaG9yIH0gPSB2aWV3LnN0YXRlLnNlbGVjdGlvbi5tYWluO1xuICAgICAgICAgICAgbGV0IGNoYW5nZSA9IHsgZnJvbTogdGhpcy50b0VkaXRvclBvcyhlLnVwZGF0ZVJhbmdlU3RhcnQpLFxuICAgICAgICAgICAgICAgIHRvOiB0aGlzLnRvRWRpdG9yUG9zKGUudXBkYXRlUmFuZ2VFbmQpLFxuICAgICAgICAgICAgICAgIGluc2VydDogc3RhdGUuVGV4dC5vZihlLnRleHQuc3BsaXQoXCJcXG5cIikpIH07XG4gICAgICAgICAgICAvLyBJZiB0aGUgd2luZG93IGRvZXNuJ3QgaW5jbHVkZSB0aGUgYW5jaG9yLCBhc3N1bWUgY2hhbmdlc1xuICAgICAgICAgICAgLy8gYWRqYWNlbnQgdG8gYSBzaWRlIGdvIHVwIHRvIHRoZSBhbmNob3IuXG4gICAgICAgICAgICBpZiAoY2hhbmdlLmZyb20gPT0gdGhpcy5mcm9tICYmIGFuY2hvciA8IHRoaXMuZnJvbSlcbiAgICAgICAgICAgICAgICBjaGFuZ2UuZnJvbSA9IGFuY2hvcjtcbiAgICAgICAgICAgIGVsc2UgaWYgKGNoYW5nZS50byA9PSB0aGlzLnRvICYmIGFuY2hvciA+IHRoaXMudG8pXG4gICAgICAgICAgICAgICAgY2hhbmdlLnRvID0gYW5jaG9yO1xuICAgICAgICAgICAgLy8gRWRpdCBjb250ZXh0IHNvbWV0aW1lcyBmaXJlIGVtcHR5IGNoYW5nZXNcbiAgICAgICAgICAgIGlmIChjaGFuZ2UuZnJvbSA9PSBjaGFuZ2UudG8gJiYgIWNoYW5nZS5pbnNlcnQubGVuZ3RoKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMucGVuZGluZ0NvbnRleHRDaGFuZ2UgPSBjaGFuZ2U7XG4gICAgICAgICAgICBhcHBseURPTUNoYW5nZUlubmVyKHZpZXcsIGNoYW5nZSwgc3RhdGUuRWRpdG9yU2VsZWN0aW9uLnNpbmdsZSh0aGlzLnRvRWRpdG9yUG9zKGUuc2VsZWN0aW9uU3RhcnQpLCB0aGlzLnRvRWRpdG9yUG9zKGUuc2VsZWN0aW9uRW5kKSkpO1xuICAgICAgICAgICAgLy8gSWYgdGhlIHRyYW5zYWN0aW9uIGRpZG4ndCBmbHVzaCBvdXIgY2hhbmdlLCByZXZlcnQgaXQgc29cbiAgICAgICAgICAgIC8vIHRoYXQgdGhlIGNvbnRleHQgaXMgaW4gc3luYyB3aXRoIHRoZSBlZGl0b3Igc3RhdGUgYWdhaW4uXG4gICAgICAgICAgICBpZiAodGhpcy5wZW5kaW5nQ29udGV4dENoYW5nZSlcbiAgICAgICAgICAgICAgICB0aGlzLnJldmVydFBlbmRpbmcodmlldy5zdGF0ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb250ZXh0LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFyYWN0ZXJib3VuZHN1cGRhdGVcIiwgZSA9PiB7XG4gICAgICAgICAgICBsZXQgcmVjdHMgPSBbXSwgcHJldiA9IG51bGw7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gdGhpcy50b0VkaXRvclBvcyhlLnJhbmdlU3RhcnQpLCBlbmQgPSB0aGlzLnRvRWRpdG9yUG9zKGUucmFuZ2VFbmQpOyBpIDwgZW5kOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVjdCA9IHZpZXcuY29vcmRzRm9yQ2hhcihpKTtcbiAgICAgICAgICAgICAgICBwcmV2ID0gKHJlY3QgJiYgbmV3IERPTVJlY3QocmVjdC5sZWZ0LCByZWN0LnRvcCwgcmVjdC5yaWdodCAtIHJlY3QubGVmdCwgcmVjdC5ib3R0b20gLSByZWN0LnRvcCkpXG4gICAgICAgICAgICAgICAgICAgIHx8IHByZXYgfHwgbmV3IERPTVJlY3Q7XG4gICAgICAgICAgICAgICAgcmVjdHMucHVzaChwcmV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRleHQudXBkYXRlQ2hhcmFjdGVyQm91bmRzKGUucmFuZ2VTdGFydCwgcmVjdHMpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29udGV4dC5hZGRFdmVudExpc3RlbmVyKFwidGV4dGZvcm1hdHVwZGF0ZVwiLCBlID0+IHtcbiAgICAgICAgICAgIGxldCBkZWNvID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBmb3JtYXQgb2YgZS5nZXRUZXh0Rm9ybWF0cygpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGxpbmVTdHlsZSA9IGZvcm1hdC51bmRlcmxpbmVTdHlsZSwgdGhpY2tuZXNzID0gZm9ybWF0LnVuZGVybGluZVRoaWNrbmVzcztcbiAgICAgICAgICAgICAgICBpZiAobGluZVN0eWxlICE9IFwiTm9uZVwiICYmIHRoaWNrbmVzcyAhPSBcIk5vbmVcIikge1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3R5bGUgPSBgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmUgJHtsaW5lU3R5bGUgPT0gXCJEYXNoZWRcIiA/IFwiZGFzaGVkIFwiIDogbGluZVN0eWxlID09IFwiU3F1aWdnbGVcIiA/IFwid2F2eSBcIiA6IFwiXCJ9JHt0aGlja25lc3MgPT0gXCJUaGluXCIgPyAxIDogMn1weGA7XG4gICAgICAgICAgICAgICAgICAgIGRlY28ucHVzaChEZWNvcmF0aW9uLm1hcmsoeyBhdHRyaWJ1dGVzOiB7IHN0eWxlIH0gfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yYW5nZSh0aGlzLnRvRWRpdG9yUG9zKGZvcm1hdC5yYW5nZVN0YXJ0KSwgdGhpcy50b0VkaXRvclBvcyhmb3JtYXQucmFuZ2VFbmQpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmlldy5kaXNwYXRjaCh7IGVmZmVjdHM6IHNldEVkaXRDb250ZXh0Rm9ybWF0dGluZy5vZihEZWNvcmF0aW9uLnNldChkZWNvKSkgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb250ZXh0LmFkZEV2ZW50TGlzdGVuZXIoXCJjb21wb3NpdGlvbnN0YXJ0XCIsICgpID0+IHtcbiAgICAgICAgICAgIGlmICh2aWV3LmlucHV0U3RhdGUuY29tcG9zaW5nIDwgMCkge1xuICAgICAgICAgICAgICAgIHZpZXcuaW5wdXRTdGF0ZS5jb21wb3NpbmcgPSAwO1xuICAgICAgICAgICAgICAgIHZpZXcuaW5wdXRTdGF0ZS5jb21wb3NpdGlvbkZpcnN0Q2hhbmdlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnRleHQuYWRkRXZlbnRMaXN0ZW5lcihcImNvbXBvc2l0aW9uZW5kXCIsICgpID0+IHtcbiAgICAgICAgICAgIHZpZXcuaW5wdXRTdGF0ZS5jb21wb3NpbmcgPSAtMTtcbiAgICAgICAgICAgIHZpZXcuaW5wdXRTdGF0ZS5jb21wb3NpdGlvbkZpcnN0Q2hhbmdlID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubWVhc3VyZVJlcSA9IHsgcmVhZDogdmlldyA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0Q29udGV4dC51cGRhdGVDb250cm9sQm91bmRzKHZpZXcuY29udGVudERPTS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSk7XG4gICAgICAgICAgICAgICAgbGV0IHNlbCA9IGdldFNlbGVjdGlvbih2aWV3LnJvb3QpO1xuICAgICAgICAgICAgICAgIGlmIChzZWwgJiYgc2VsLnJhbmdlQ291bnQpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWRpdENvbnRleHQudXBkYXRlU2VsZWN0aW9uQm91bmRzKHNlbC5nZXRSYW5nZUF0KDApLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKTtcbiAgICAgICAgICAgIH0gfTtcbiAgICB9XG4gICAgYXBwbHlFZGl0cyh1cGRhdGUpIHtcbiAgICAgICAgbGV0IG9mZiA9IDAsIGFib3J0ID0gZmFsc2UsIHBlbmRpbmcgPSB0aGlzLnBlbmRpbmdDb250ZXh0Q2hhbmdlO1xuICAgICAgICB1cGRhdGUuY2hhbmdlcy5pdGVyQ2hhbmdlcygoZnJvbUEsIHRvQSwgX2Zyb21CLCBfdG9CLCBpbnNlcnQpID0+IHtcbiAgICAgICAgICAgIGlmIChhYm9ydClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBsZXQgZExlbiA9IGluc2VydC5sZW5ndGggLSAodG9BIC0gZnJvbUEpO1xuICAgICAgICAgICAgaWYgKHBlbmRpbmcgJiYgdG9BID49IHBlbmRpbmcudG8pIHtcbiAgICAgICAgICAgICAgICBpZiAocGVuZGluZy5mcm9tID09IGZyb21BICYmIHBlbmRpbmcudG8gPT0gdG9BICYmIHBlbmRpbmcuaW5zZXJ0LmVxKGluc2VydCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZyA9IHRoaXMucGVuZGluZ0NvbnRleHRDaGFuZ2UgPSBudWxsOyAvLyBNYXRjaFxuICAgICAgICAgICAgICAgICAgICBvZmYgKz0gZExlbjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHsgLy8gTWlzbWF0Y2gsIHJldmVydFxuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXZlcnRQZW5kaW5nKHVwZGF0ZS5zdGF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnJvbUEgKz0gb2ZmO1xuICAgICAgICAgICAgdG9BICs9IG9mZjtcbiAgICAgICAgICAgIGlmICh0b0EgPD0gdGhpcy5mcm9tKSB7IC8vIEJlZm9yZSB0aGUgd2luZG93XG4gICAgICAgICAgICAgICAgdGhpcy5mcm9tICs9IGRMZW47XG4gICAgICAgICAgICAgICAgdGhpcy50byArPSBkTGVuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZnJvbUEgPCB0aGlzLnRvKSB7IC8vIE92ZXJsYXBzIHdpdGggd2luZG93XG4gICAgICAgICAgICAgICAgaWYgKGZyb21BIDwgdGhpcy5mcm9tIHx8IHRvQSA+IHRoaXMudG8gfHwgKHRoaXMudG8gLSB0aGlzLmZyb20pICsgaW5zZXJ0Lmxlbmd0aCA+IDMwMDAwIC8qIEN4VnAuTWF4U2l6ZSAqLykge1xuICAgICAgICAgICAgICAgICAgICBhYm9ydCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0Q29udGV4dC51cGRhdGVUZXh0KHRoaXMudG9Db250ZXh0UG9zKGZyb21BKSwgdGhpcy50b0NvbnRleHRQb3ModG9BKSwgaW5zZXJ0LnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgIHRoaXMudG8gKz0gZExlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9mZiArPSBkTGVuO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHBlbmRpbmcgJiYgIWFib3J0KVxuICAgICAgICAgICAgdGhpcy5yZXZlcnRQZW5kaW5nKHVwZGF0ZS5zdGF0ZSk7XG4gICAgICAgIHJldHVybiAhYWJvcnQ7XG4gICAgfVxuICAgIHVwZGF0ZSh1cGRhdGUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmFwcGx5RWRpdHModXBkYXRlKSB8fCAhdGhpcy5yYW5nZUlzVmFsaWQodXBkYXRlLnN0YXRlKSkge1xuICAgICAgICAgICAgdGhpcy5wZW5kaW5nQ29udGV4dENoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnJlc2V0UmFuZ2UodXBkYXRlLnN0YXRlKTtcbiAgICAgICAgICAgIHRoaXMuZWRpdENvbnRleHQudXBkYXRlVGV4dCgwLCB0aGlzLmVkaXRDb250ZXh0LnRleHQubGVuZ3RoLCB1cGRhdGUuc3RhdGUuZG9jLnNsaWNlU3RyaW5nKHRoaXMuZnJvbSwgdGhpcy50bykpO1xuICAgICAgICAgICAgdGhpcy5zZXRTZWxlY3Rpb24odXBkYXRlLnN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh1cGRhdGUuZG9jQ2hhbmdlZCB8fCB1cGRhdGUuc2VsZWN0aW9uU2V0KSB7XG4gICAgICAgICAgICB0aGlzLnNldFNlbGVjdGlvbih1cGRhdGUuc3RhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh1cGRhdGUuZ2VvbWV0cnlDaGFuZ2VkIHx8IHVwZGF0ZS5kb2NDaGFuZ2VkIHx8IHVwZGF0ZS5zZWxlY3Rpb25TZXQpXG4gICAgICAgICAgICB1cGRhdGUudmlldy5yZXF1ZXN0TWVhc3VyZSh0aGlzLm1lYXN1cmVSZXEpO1xuICAgIH1cbiAgICByZXNldFJhbmdlKHN0YXRlKSB7XG4gICAgICAgIGxldCB7IGhlYWQgfSA9IHN0YXRlLnNlbGVjdGlvbi5tYWluO1xuICAgICAgICB0aGlzLmZyb20gPSBNYXRoLm1heCgwLCBoZWFkIC0gMTAwMDAgLyogQ3hWcC5NYXJnaW4gKi8pO1xuICAgICAgICB0aGlzLnRvID0gTWF0aC5taW4oc3RhdGUuZG9jLmxlbmd0aCwgaGVhZCArIDEwMDAwIC8qIEN4VnAuTWFyZ2luICovKTtcbiAgICB9XG4gICAgcmV2ZXJ0UGVuZGluZyhzdGF0ZSkge1xuICAgICAgICBsZXQgcGVuZGluZyA9IHRoaXMucGVuZGluZ0NvbnRleHRDaGFuZ2U7XG4gICAgICAgIHRoaXMucGVuZGluZ0NvbnRleHRDaGFuZ2UgPSBudWxsO1xuICAgICAgICB0aGlzLmVkaXRDb250ZXh0LnVwZGF0ZVRleHQodGhpcy50b0NvbnRleHRQb3MocGVuZGluZy5mcm9tKSwgdGhpcy50b0NvbnRleHRQb3MocGVuZGluZy50byArIHBlbmRpbmcuaW5zZXJ0Lmxlbmd0aCksIHN0YXRlLmRvYy5zbGljZVN0cmluZyhwZW5kaW5nLmZyb20sIHBlbmRpbmcudG8pKTtcbiAgICB9XG4gICAgc2V0U2VsZWN0aW9uKHN0YXRlKSB7XG4gICAgICAgIGxldCB7IG1haW4gfSA9IHN0YXRlLnNlbGVjdGlvbjtcbiAgICAgICAgbGV0IHN0YXJ0ID0gdGhpcy50b0NvbnRleHRQb3MoTWF0aC5tYXgodGhpcy5mcm9tLCBNYXRoLm1pbih0aGlzLnRvLCBtYWluLmFuY2hvcikpKTtcbiAgICAgICAgbGV0IGVuZCA9IHRoaXMudG9Db250ZXh0UG9zKG1haW4uaGVhZCk7XG4gICAgICAgIGlmICh0aGlzLmVkaXRDb250ZXh0LnNlbGVjdGlvblN0YXJ0ICE9IHN0YXJ0IHx8IHRoaXMuZWRpdENvbnRleHQuc2VsZWN0aW9uRW5kICE9IGVuZClcbiAgICAgICAgICAgIHRoaXMuZWRpdENvbnRleHQudXBkYXRlU2VsZWN0aW9uKHN0YXJ0LCBlbmQpO1xuICAgIH1cbiAgICByYW5nZUlzVmFsaWQoc3RhdGUpIHtcbiAgICAgICAgbGV0IHsgaGVhZCB9ID0gc3RhdGUuc2VsZWN0aW9uLm1haW47XG4gICAgICAgIHJldHVybiAhKHRoaXMuZnJvbSA+IDAgJiYgaGVhZCAtIHRoaXMuZnJvbSA8IDUwMCAvKiBDeFZwLk1pbk1hcmdpbiAqLyB8fFxuICAgICAgICAgICAgdGhpcy50byA8IHN0YXRlLmRvYy5sZW5ndGggJiYgdGhpcy50byAtIGhlYWQgPCA1MDAgLyogQ3hWcC5NaW5NYXJnaW4gKi8gfHxcbiAgICAgICAgICAgIHRoaXMudG8gLSB0aGlzLmZyb20gPiAxMDAwMCAvKiBDeFZwLk1hcmdpbiAqLyAqIDMpO1xuICAgIH1cbiAgICB0b0VkaXRvclBvcyhjb250ZXh0UG9zKSB7IHJldHVybiBjb250ZXh0UG9zICsgdGhpcy5mcm9tOyB9XG4gICAgdG9Db250ZXh0UG9zKGVkaXRvclBvcykgeyByZXR1cm4gZWRpdG9yUG9zIC0gdGhpcy5mcm9tOyB9XG59XG5cbi8vIFRoZSBlZGl0b3IncyB1cGRhdGUgc3RhdGUgbWFjaGluZSBsb29rcyBzb21ldGhpbmcgbGlrZSB0aGlzOlxuLy9cbi8vICAgICBJZGxlIOKGkiBVcGRhdGluZyDih4YgSWRsZSAodW5jaGVja2VkKSDihpIgTWVhc3VyaW5nIOKGkiBJZGxlXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg4oaRICAgICAg4oaTXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRpbmcgKG1lYXN1cmUpXG4vL1xuLy8gVGhlIGRpZmZlcmVuY2UgYmV0d2VlbiAnSWRsZScgYW5kICdJZGxlICh1bmNoZWNrZWQpJyBsaWVzIGluXG4vLyB3aGV0aGVyIGEgbGF5b3V0IGNoZWNrIGhhcyBiZWVuIHNjaGVkdWxlZC4gQSByZWd1bGFyIHVwZGF0ZSB0aHJvdWdoXG4vLyB0aGUgYHVwZGF0ZWAgbWV0aG9kIHVwZGF0ZXMgdGhlIERPTSBpbiBhIHdyaXRlLW9ubHkgZmFzaGlvbiwgYW5kXG4vLyByZWxpZXMgb24gYSBjaGVjayAoc2NoZWR1bGVkIHdpdGggYHJlcXVlc3RBbmltYXRpb25GcmFtZWApIHRvIG1ha2Vcbi8vIHN1cmUgZXZlcnl0aGluZyBpcyB3aGVyZSBpdCBzaG91bGQgYmUgYW5kIHRoZSB2aWV3cG9ydCBjb3ZlcnMgdGhlXG4vLyB2aXNpYmxlIGNvZGUuIFRoYXQgY2hlY2sgY29udGludWVzIHRvIG1lYXN1cmUgYW5kIHRoZW4gb3B0aW9uYWxseVxuLy8gdXBkYXRlIHVudGlsIGl0IHJlYWNoZXMgYSBjb2hlcmVudCBzdGF0ZS5cbi8qKlxuQW4gZWRpdG9yIHZpZXcgcmVwcmVzZW50cyB0aGUgZWRpdG9yJ3MgdXNlciBpbnRlcmZhY2UuIEl0IGhvbGRzXG50aGUgZWRpdGFibGUgRE9NIHN1cmZhY2UsIGFuZCBwb3NzaWJseSBvdGhlciBlbGVtZW50cyBzdWNoIGFzIHRoZVxubGluZSBudW1iZXIgZ3V0dGVyLiBJdCBoYW5kbGVzIGV2ZW50cyBhbmQgZGlzcGF0Y2hlcyBzdGF0ZVxudHJhbnNhY3Rpb25zIGZvciBlZGl0aW5nIGFjdGlvbnMuXG4qL1xuY2xhc3MgRWRpdG9yVmlldyB7XG4gICAgLyoqXG4gICAgVGhlIGN1cnJlbnQgZWRpdG9yIHN0YXRlLlxuICAgICovXG4gICAgZ2V0IHN0YXRlKCkgeyByZXR1cm4gdGhpcy52aWV3U3RhdGUuc3RhdGU7IH1cbiAgICAvKipcbiAgICBUbyBiZSBhYmxlIHRvIGRpc3BsYXkgbGFyZ2UgZG9jdW1lbnRzIHdpdGhvdXQgY29uc3VtaW5nIHRvbyBtdWNoXG4gICAgbWVtb3J5IG9yIG92ZXJsb2FkaW5nIHRoZSBicm93c2VyLCBDb2RlTWlycm9yIG9ubHkgZHJhd3MgdGhlXG4gICAgY29kZSB0aGF0IGlzIHZpc2libGUgKHBsdXMgYSBtYXJnaW4gYXJvdW5kIGl0KSB0byB0aGUgRE9NLiBUaGlzXG4gICAgcHJvcGVydHkgdGVsbHMgeW91IHRoZSBleHRlbnQgb2YgdGhlIGN1cnJlbnQgZHJhd24gdmlld3BvcnQsIGluXG4gICAgZG9jdW1lbnQgcG9zaXRpb25zLlxuICAgICovXG4gICAgZ2V0IHZpZXdwb3J0KCkgeyByZXR1cm4gdGhpcy52aWV3U3RhdGUudmlld3BvcnQ7IH1cbiAgICAvKipcbiAgICBXaGVuIHRoZXJlIGFyZSwgZm9yIGV4YW1wbGUsIGxhcmdlIGNvbGxhcHNlZCByYW5nZXMgaW4gdGhlXG4gICAgdmlld3BvcnQsIGl0cyBzaXplIGNhbiBiZSBhIGxvdCBiaWdnZXIgdGhhbiB0aGUgYWN0dWFsIHZpc2libGVcbiAgICBjb250ZW50LiBUaHVzLCBpZiB5b3UgYXJlIGRvaW5nIHNvbWV0aGluZyBsaWtlIHN0eWxpbmcgdGhlXG4gICAgY29udGVudCBpbiB0aGUgdmlld3BvcnQsIGl0IGlzIHByZWZlcmFibGUgdG8gb25seSBkbyBzbyBmb3JcbiAgICB0aGVzZSByYW5nZXMsIHdoaWNoIGFyZSB0aGUgc3Vic2V0IG9mIHRoZSB2aWV3cG9ydCB0aGF0IGlzXG4gICAgYWN0dWFsbHkgZHJhd24uXG4gICAgKi9cbiAgICBnZXQgdmlzaWJsZVJhbmdlcygpIHsgcmV0dXJuIHRoaXMudmlld1N0YXRlLnZpc2libGVSYW5nZXM7IH1cbiAgICAvKipcbiAgICBSZXR1cm5zIGZhbHNlIHdoZW4gdGhlIGVkaXRvciBpcyBlbnRpcmVseSBzY3JvbGxlZCBvdXQgb2Ygdmlld1xuICAgIG9yIG90aGVyd2lzZSBoaWRkZW4uXG4gICAgKi9cbiAgICBnZXQgaW5WaWV3KCkgeyByZXR1cm4gdGhpcy52aWV3U3RhdGUuaW5WaWV3OyB9XG4gICAgLyoqXG4gICAgSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHVzZXIgaXMgY3VycmVudGx5IGNvbXBvc2luZyB0ZXh0IHZpYVxuICAgIFtJTUVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lucHV0X21ldGhvZCksIGFuZCBhdCBsZWFzdFxuICAgIG9uZSBjaGFuZ2UgaGFzIGJlZW4gbWFkZSBpbiB0aGUgY3VycmVudCBjb21wb3NpdGlvbi5cbiAgICAqL1xuICAgIGdldCBjb21wb3NpbmcoKSB7IHJldHVybiB0aGlzLmlucHV0U3RhdGUuY29tcG9zaW5nID4gMDsgfVxuICAgIC8qKlxuICAgIEluZGljYXRlcyB3aGV0aGVyIHRoZSB1c2VyIGlzIGN1cnJlbnRseSBpbiBjb21wb3Npbmcgc3RhdGUuIE5vdGVcbiAgICB0aGF0IG9uIHNvbWUgcGxhdGZvcm1zLCBsaWtlIEFuZHJvaWQsIHRoaXMgd2lsbCBiZSB0aGUgY2FzZSBhXG4gICAgbG90LCBzaW5jZSBqdXN0IHB1dHRpbmcgdGhlIGN1cnNvciBvbiBhIHdvcmQgc3RhcnRzIGFcbiAgICBjb21wb3NpdGlvbiB0aGVyZS5cbiAgICAqL1xuICAgIGdldCBjb21wb3NpdGlvblN0YXJ0ZWQoKSB7IHJldHVybiB0aGlzLmlucHV0U3RhdGUuY29tcG9zaW5nID49IDA7IH1cbiAgICAvKipcbiAgICBUaGUgZG9jdW1lbnQgb3Igc2hhZG93IHJvb3QgdGhhdCB0aGUgdmlldyBsaXZlcyBpbi5cbiAgICAqL1xuICAgIGdldCByb290KCkgeyByZXR1cm4gdGhpcy5fcm9vdDsgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgZ2V0IHdpbigpIHsgcmV0dXJuIHRoaXMuZG9tLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgfHwgd2luZG93OyB9XG4gICAgLyoqXG4gICAgQ29uc3RydWN0IGEgbmV3IHZpZXcuIFlvdSdsbCB3YW50IHRvIGVpdGhlciBwcm92aWRlIGEgYHBhcmVudGBcbiAgICBvcHRpb24sIG9yIHB1dCBgdmlldy5kb21gIGludG8geW91ciBkb2N1bWVudCBhZnRlciBjcmVhdGluZyBhXG4gICAgdmlldywgc28gdGhhdCB0aGUgdXNlciBjYW4gc2VlIHRoZSBlZGl0b3IuXG4gICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSkge1xuICAgICAgICB0aGlzLnBsdWdpbnMgPSBbXTtcbiAgICAgICAgdGhpcy5wbHVnaW5NYXAgPSBuZXcgTWFwO1xuICAgICAgICB0aGlzLmVkaXRvckF0dHJzID0ge307XG4gICAgICAgIHRoaXMuY29udGVudEF0dHJzID0ge307XG4gICAgICAgIHRoaXMuYmlkaUNhY2hlID0gW107XG4gICAgICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICBAaW50ZXJuYWxcbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy51cGRhdGVTdGF0ZSA9IDIgLyogVXBkYXRlU3RhdGUuVXBkYXRpbmcgKi87XG4gICAgICAgIC8qKlxuICAgICAgICBAaW50ZXJuYWxcbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tZWFzdXJlU2NoZWR1bGVkID0gLTE7XG4gICAgICAgIC8qKlxuICAgICAgICBAaW50ZXJuYWxcbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tZWFzdXJlUmVxdWVzdHMgPSBbXTtcbiAgICAgICAgdGhpcy5jb250ZW50RE9NID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdGhpcy5zY3JvbGxET00gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB0aGlzLnNjcm9sbERPTS50YWJJbmRleCA9IC0xO1xuICAgICAgICB0aGlzLnNjcm9sbERPTS5jbGFzc05hbWUgPSBcImNtLXNjcm9sbGVyXCI7XG4gICAgICAgIHRoaXMuc2Nyb2xsRE9NLmFwcGVuZENoaWxkKHRoaXMuY29udGVudERPTSk7XG4gICAgICAgIHRoaXMuYW5ub3VuY2VET00gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB0aGlzLmFubm91bmNlRE9NLmNsYXNzTmFtZSA9IFwiY20tYW5ub3VuY2VkXCI7XG4gICAgICAgIHRoaXMuYW5ub3VuY2VET00uc2V0QXR0cmlidXRlKFwiYXJpYS1saXZlXCIsIFwicG9saXRlXCIpO1xuICAgICAgICB0aGlzLmRvbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHRoaXMuZG9tLmFwcGVuZENoaWxkKHRoaXMuYW5ub3VuY2VET00pO1xuICAgICAgICB0aGlzLmRvbS5hcHBlbmRDaGlsZCh0aGlzLnNjcm9sbERPTSk7XG4gICAgICAgIGlmIChjb25maWcucGFyZW50KVxuICAgICAgICAgICAgY29uZmlnLnBhcmVudC5hcHBlbmRDaGlsZCh0aGlzLmRvbSk7XG4gICAgICAgIGxldCB7IGRpc3BhdGNoIH0gPSBjb25maWc7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hUcmFuc2FjdGlvbnMgPSBjb25maWcuZGlzcGF0Y2hUcmFuc2FjdGlvbnMgfHxcbiAgICAgICAgICAgIChkaXNwYXRjaCAmJiAoKHRycykgPT4gdHJzLmZvckVhY2godHIgPT4gZGlzcGF0Y2godHIsIHRoaXMpKSkpIHx8XG4gICAgICAgICAgICAoKHRycykgPT4gdGhpcy51cGRhdGUodHJzKSk7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2ggPSB0aGlzLmRpc3BhdGNoLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuX3Jvb3QgPSAoY29uZmlnLnJvb3QgfHwgZ2V0Um9vdChjb25maWcucGFyZW50KSB8fCBkb2N1bWVudCk7XG4gICAgICAgIHRoaXMudmlld1N0YXRlID0gbmV3IFZpZXdTdGF0ZShjb25maWcuc3RhdGUgfHwgc3RhdGUuRWRpdG9yU3RhdGUuY3JlYXRlKGNvbmZpZykpO1xuICAgICAgICBpZiAoY29uZmlnLnNjcm9sbFRvICYmIGNvbmZpZy5zY3JvbGxUby5pcyhzY3JvbGxJbnRvVmlldykpXG4gICAgICAgICAgICB0aGlzLnZpZXdTdGF0ZS5zY3JvbGxUYXJnZXQgPSBjb25maWcuc2Nyb2xsVG8udmFsdWUuY2xpcCh0aGlzLnZpZXdTdGF0ZS5zdGF0ZSk7XG4gICAgICAgIHRoaXMucGx1Z2lucyA9IHRoaXMuc3RhdGUuZmFjZXQodmlld1BsdWdpbikubWFwKHNwZWMgPT4gbmV3IFBsdWdpbkluc3RhbmNlKHNwZWMpKTtcbiAgICAgICAgZm9yIChsZXQgcGx1Z2luIG9mIHRoaXMucGx1Z2lucylcbiAgICAgICAgICAgIHBsdWdpbi51cGRhdGUodGhpcyk7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIgPSBuZXcgRE9NT2JzZXJ2ZXIodGhpcyk7XG4gICAgICAgIHRoaXMuaW5wdXRTdGF0ZSA9IG5ldyBJbnB1dFN0YXRlKHRoaXMpO1xuICAgICAgICB0aGlzLmlucHV0U3RhdGUuZW5zdXJlSGFuZGxlcnModGhpcy5wbHVnaW5zKTtcbiAgICAgICAgdGhpcy5kb2NWaWV3ID0gbmV3IERvY1ZpZXcodGhpcyk7XG4gICAgICAgIHRoaXMubW91bnRTdHlsZXMoKTtcbiAgICAgICAgdGhpcy51cGRhdGVBdHRycygpO1xuICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlID0gMCAvKiBVcGRhdGVTdGF0ZS5JZGxlICovO1xuICAgICAgICB0aGlzLnJlcXVlc3RNZWFzdXJlKCk7XG4gICAgfVxuICAgIGRpc3BhdGNoKC4uLmlucHV0KSB7XG4gICAgICAgIGxldCB0cnMgPSBpbnB1dC5sZW5ndGggPT0gMSAmJiBpbnB1dFswXSBpbnN0YW5jZW9mIHN0YXRlLlRyYW5zYWN0aW9uID8gaW5wdXRcbiAgICAgICAgICAgIDogaW5wdXQubGVuZ3RoID09IDEgJiYgQXJyYXkuaXNBcnJheShpbnB1dFswXSkgPyBpbnB1dFswXVxuICAgICAgICAgICAgICAgIDogW3RoaXMuc3RhdGUudXBkYXRlKC4uLmlucHV0KV07XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hUcmFuc2FjdGlvbnModHJzLCB0aGlzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgVXBkYXRlIHRoZSB2aWV3IGZvciB0aGUgZ2l2ZW4gYXJyYXkgb2YgdHJhbnNhY3Rpb25zLiBUaGlzIHdpbGxcbiAgICB1cGRhdGUgdGhlIHZpc2libGUgZG9jdW1lbnQgYW5kIHNlbGVjdGlvbiB0byBtYXRjaCB0aGUgc3RhdGVcbiAgICBwcm9kdWNlZCBieSB0aGUgdHJhbnNhY3Rpb25zLCBhbmQgbm90aWZ5IHZpZXcgcGx1Z2lucyBvZiB0aGVcbiAgICBjaGFuZ2UuIFlvdSBzaG91bGQgdXN1YWxseSBjYWxsXG4gICAgW2BkaXNwYXRjaGBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jdmlldy5FZGl0b3JWaWV3LmRpc3BhdGNoKSBpbnN0ZWFkLCB3aGljaCB1c2VzIHRoaXNcbiAgICBhcyBhIHByaW1pdGl2ZS5cbiAgICAqL1xuICAgIHVwZGF0ZSh0cmFuc2FjdGlvbnMpIHtcbiAgICAgICAgaWYgKHRoaXMudXBkYXRlU3RhdGUgIT0gMCAvKiBVcGRhdGVTdGF0ZS5JZGxlICovKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FsbHMgdG8gRWRpdG9yVmlldy51cGRhdGUgYXJlIG5vdCBhbGxvd2VkIHdoaWxlIGFuIHVwZGF0ZSBpcyBpbiBwcm9ncmVzc1wiKTtcbiAgICAgICAgbGV0IHJlZHJhd24gPSBmYWxzZSwgYXR0cnNDaGFuZ2VkID0gZmFsc2UsIHVwZGF0ZTtcbiAgICAgICAgbGV0IHN0YXRlJDEgPSB0aGlzLnN0YXRlO1xuICAgICAgICBmb3IgKGxldCB0ciBvZiB0cmFuc2FjdGlvbnMpIHtcbiAgICAgICAgICAgIGlmICh0ci5zdGFydFN0YXRlICE9IHN0YXRlJDEpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJUcnlpbmcgdG8gdXBkYXRlIHN0YXRlIHdpdGggYSB0cmFuc2FjdGlvbiB0aGF0IGRvZXNuJ3Qgc3RhcnQgZnJvbSB0aGUgcHJldmlvdXMgc3RhdGUuXCIpO1xuICAgICAgICAgICAgc3RhdGUkMSA9IHRyLnN0YXRlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgdGhpcy52aWV3U3RhdGUuc3RhdGUgPSBzdGF0ZSQxO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxldCBmb2N1cyA9IHRoaXMuaGFzRm9jdXMsIGZvY3VzRmxhZyA9IDAsIGRpc3BhdGNoRm9jdXMgPSBudWxsO1xuICAgICAgICBpZiAodHJhbnNhY3Rpb25zLnNvbWUodHIgPT4gdHIuYW5ub3RhdGlvbihpc0ZvY3VzQ2hhbmdlKSkpIHtcbiAgICAgICAgICAgIHRoaXMuaW5wdXRTdGF0ZS5ub3RpZmllZEZvY3VzZWQgPSBmb2N1cztcbiAgICAgICAgICAgIC8vIElmIGEgZm9jdXMtY2hhbmdlIHRyYW5zYWN0aW9uIGlzIGJlaW5nIGRpc3BhdGNoZWQsIHNldCB0aGlzIHVwZGF0ZSBmbGFnLlxuICAgICAgICAgICAgZm9jdXNGbGFnID0gMSAvKiBVcGRhdGVGbGFnLkZvY3VzICovO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGZvY3VzICE9IHRoaXMuaW5wdXRTdGF0ZS5ub3RpZmllZEZvY3VzZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaW5wdXRTdGF0ZS5ub3RpZmllZEZvY3VzZWQgPSBmb2N1cztcbiAgICAgICAgICAgIC8vIFNjaGVkdWxlIGEgc2VwYXJhdGUgZm9jdXMgdHJhbnNhY3Rpb24gaWYgbmVjZXNzYXJ5LCBvdGhlcndpc2VcbiAgICAgICAgICAgIC8vIGFkZCBhIGZsYWcgdG8gdGhpcyB1cGRhdGVcbiAgICAgICAgICAgIGRpc3BhdGNoRm9jdXMgPSBmb2N1c0NoYW5nZVRyYW5zYWN0aW9uKHN0YXRlJDEsIGZvY3VzKTtcbiAgICAgICAgICAgIGlmICghZGlzcGF0Y2hGb2N1cylcbiAgICAgICAgICAgICAgICBmb2N1c0ZsYWcgPSAxIC8qIFVwZGF0ZUZsYWcuRm9jdXMgKi87XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhlcmUgd2FzIGEgcGVuZGluZyBET00gY2hhbmdlLCBlYWdlcmx5IHJlYWQgaXQgYW5kIHRyeSB0b1xuICAgICAgICAvLyBhcHBseSBpdCBhZnRlciB0aGUgZ2l2ZW4gdHJhbnNhY3Rpb25zLlxuICAgICAgICBsZXQgcGVuZGluZ0tleSA9IHRoaXMub2JzZXJ2ZXIuZGVsYXllZEFuZHJvaWRLZXksIGRvbUNoYW5nZSA9IG51bGw7XG4gICAgICAgIGlmIChwZW5kaW5nS2V5KSB7XG4gICAgICAgICAgICB0aGlzLm9ic2VydmVyLmNsZWFyRGVsYXllZEFuZHJvaWRLZXkoKTtcbiAgICAgICAgICAgIGRvbUNoYW5nZSA9IHRoaXMub2JzZXJ2ZXIucmVhZENoYW5nZSgpO1xuICAgICAgICAgICAgLy8gT25seSB0cnkgdG8gYXBwbHkgRE9NIGNoYW5nZXMgaWYgdGhlIHRyYW5zYWN0aW9ucyBkaWRuJ3RcbiAgICAgICAgICAgIC8vIGNoYW5nZSB0aGUgZG9jIG9yIHNlbGVjdGlvbi5cbiAgICAgICAgICAgIGlmIChkb21DaGFuZ2UgJiYgIXRoaXMuc3RhdGUuZG9jLmVxKHN0YXRlJDEuZG9jKSB8fCAhdGhpcy5zdGF0ZS5zZWxlY3Rpb24uZXEoc3RhdGUkMS5zZWxlY3Rpb24pKVxuICAgICAgICAgICAgICAgIGRvbUNoYW5nZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm9ic2VydmVyLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2hlbiB0aGUgcGhyYXNlcyBjaGFuZ2UsIHJlZHJhdyB0aGUgZWRpdG9yXG4gICAgICAgIGlmIChzdGF0ZSQxLmZhY2V0KHN0YXRlLkVkaXRvclN0YXRlLnBocmFzZXMpICE9IHRoaXMuc3RhdGUuZmFjZXQoc3RhdGUuRWRpdG9yU3RhdGUucGhyYXNlcykpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRTdGF0ZShzdGF0ZSQxKTtcbiAgICAgICAgdXBkYXRlID0gVmlld1VwZGF0ZS5jcmVhdGUodGhpcywgc3RhdGUkMSwgdHJhbnNhY3Rpb25zKTtcbiAgICAgICAgdXBkYXRlLmZsYWdzIHw9IGZvY3VzRmxhZztcbiAgICAgICAgbGV0IHNjcm9sbFRhcmdldCA9IHRoaXMudmlld1N0YXRlLnNjcm9sbFRhcmdldDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdGUgPSAyIC8qIFVwZGF0ZVN0YXRlLlVwZGF0aW5nICovO1xuICAgICAgICAgICAgZm9yIChsZXQgdHIgb2YgdHJhbnNhY3Rpb25zKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNjcm9sbFRhcmdldClcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVGFyZ2V0ID0gc2Nyb2xsVGFyZ2V0Lm1hcCh0ci5jaGFuZ2VzKTtcbiAgICAgICAgICAgICAgICBpZiAodHIuc2Nyb2xsSW50b1ZpZXcpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHsgbWFpbiB9ID0gdHIuc3RhdGUuc2VsZWN0aW9uO1xuICAgICAgICAgICAgICAgICAgICBzY3JvbGxUYXJnZXQgPSBuZXcgU2Nyb2xsVGFyZ2V0KG1haW4uZW1wdHkgPyBtYWluIDogc3RhdGUuRWRpdG9yU2VsZWN0aW9uLmN1cnNvcihtYWluLmhlYWQsIG1haW4uaGVhZCA+IG1haW4uYW5jaG9yID8gLTEgOiAxKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAobGV0IGUgb2YgdHIuZWZmZWN0cylcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuaXMoc2Nyb2xsSW50b1ZpZXcpKVxuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVGFyZ2V0ID0gZS52YWx1ZS5jbGlwKHRoaXMuc3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy52aWV3U3RhdGUudXBkYXRlKHVwZGF0ZSwgc2Nyb2xsVGFyZ2V0KTtcbiAgICAgICAgICAgIHRoaXMuYmlkaUNhY2hlID0gQ2FjaGVkT3JkZXIudXBkYXRlKHRoaXMuYmlkaUNhY2hlLCB1cGRhdGUuY2hhbmdlcyk7XG4gICAgICAgICAgICBpZiAoIXVwZGF0ZS5lbXB0eSkge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUGx1Z2lucyh1cGRhdGUpO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRTdGF0ZS51cGRhdGUodXBkYXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlZHJhd24gPSB0aGlzLmRvY1ZpZXcudXBkYXRlKHVwZGF0ZSk7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5mYWNldChzdHlsZU1vZHVsZSkgIT0gdGhpcy5zdHlsZU1vZHVsZXMpXG4gICAgICAgICAgICAgICAgdGhpcy5tb3VudFN0eWxlcygpO1xuICAgICAgICAgICAgYXR0cnNDaGFuZ2VkID0gdGhpcy51cGRhdGVBdHRycygpO1xuICAgICAgICAgICAgdGhpcy5zaG93QW5ub3VuY2VtZW50cyh0cmFuc2FjdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5kb2NWaWV3LnVwZGF0ZVNlbGVjdGlvbihyZWRyYXduLCB0cmFuc2FjdGlvbnMuc29tZSh0ciA9PiB0ci5pc1VzZXJFdmVudChcInNlbGVjdC5wb2ludGVyXCIpKSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlID0gMCAvKiBVcGRhdGVTdGF0ZS5JZGxlICovO1xuICAgICAgICB9XG4gICAgICAgIGlmICh1cGRhdGUuc3RhcnRTdGF0ZS5mYWNldCh0aGVtZSkgIT0gdXBkYXRlLnN0YXRlLmZhY2V0KHRoZW1lKSlcbiAgICAgICAgICAgIHRoaXMudmlld1N0YXRlLm11c3RNZWFzdXJlQ29udGVudCA9IHRydWU7XG4gICAgICAgIGlmIChyZWRyYXduIHx8IGF0dHJzQ2hhbmdlZCB8fCBzY3JvbGxUYXJnZXQgfHwgdGhpcy52aWV3U3RhdGUubXVzdEVuZm9yY2VDdXJzb3JBc3NvYyB8fCB0aGlzLnZpZXdTdGF0ZS5tdXN0TWVhc3VyZUNvbnRlbnQpXG4gICAgICAgICAgICB0aGlzLnJlcXVlc3RNZWFzdXJlKCk7XG4gICAgICAgIGlmIChyZWRyYXduKVxuICAgICAgICAgICAgdGhpcy5kb2NWaWV3VXBkYXRlKCk7XG4gICAgICAgIGlmICghdXBkYXRlLmVtcHR5KVxuICAgICAgICAgICAgZm9yIChsZXQgbGlzdGVuZXIgb2YgdGhpcy5zdGF0ZS5mYWNldCh1cGRhdGVMaXN0ZW5lcikpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcih1cGRhdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBsb2dFeGNlcHRpb24odGhpcy5zdGF0ZSwgZSwgXCJ1cGRhdGUgbGlzdGVuZXJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBpZiAoZGlzcGF0Y2hGb2N1cyB8fCBkb21DaGFuZ2UpXG4gICAgICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZGlzcGF0Y2hGb2N1cyAmJiB0aGlzLnN0YXRlID09IGRpc3BhdGNoRm9jdXMuc3RhcnRTdGF0ZSlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaChkaXNwYXRjaEZvY3VzKTtcbiAgICAgICAgICAgICAgICBpZiAoZG9tQ2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghYXBwbHlET01DaGFuZ2UodGhpcywgZG9tQ2hhbmdlKSAmJiBwZW5kaW5nS2V5LmZvcmNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2hLZXkodGhpcy5jb250ZW50RE9NLCBwZW5kaW5nS2V5LmtleSwgcGVuZGluZ0tleS5rZXlDb2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgUmVzZXQgdGhlIHZpZXcgdG8gdGhlIGdpdmVuIHN0YXRlLiAoVGhpcyB3aWxsIGNhdXNlIHRoZSBlbnRpcmVcbiAgICBkb2N1bWVudCB0byBiZSByZWRyYXduIGFuZCBhbGwgdmlldyBwbHVnaW5zIHRvIGJlIHJlaW5pdGlhbGl6ZWQsXG4gICAgc28geW91IHNob3VsZCBwcm9iYWJseSBvbmx5IHVzZSBpdCB3aGVuIHRoZSBuZXcgc3RhdGUgaXNuJ3RcbiAgICBkZXJpdmVkIGZyb20gdGhlIG9sZCBzdGF0ZS4gT3RoZXJ3aXNlLCB1c2VcbiAgICBbYGRpc3BhdGNoYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyN2aWV3LkVkaXRvclZpZXcuZGlzcGF0Y2gpIGluc3RlYWQuKVxuICAgICovXG4gICAgc2V0U3RhdGUobmV3U3RhdGUpIHtcbiAgICAgICAgaWYgKHRoaXMudXBkYXRlU3RhdGUgIT0gMCAvKiBVcGRhdGVTdGF0ZS5JZGxlICovKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FsbHMgdG8gRWRpdG9yVmlldy5zZXRTdGF0ZSBhcmUgbm90IGFsbG93ZWQgd2hpbGUgYW4gdXBkYXRlIGlzIGluIHByb2dyZXNzXCIpO1xuICAgICAgICBpZiAodGhpcy5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgIHRoaXMudmlld1N0YXRlLnN0YXRlID0gbmV3U3RhdGU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVTdGF0ZSA9IDIgLyogVXBkYXRlU3RhdGUuVXBkYXRpbmcgKi87XG4gICAgICAgIGxldCBoYWRGb2N1cyA9IHRoaXMuaGFzRm9jdXM7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmb3IgKGxldCBwbHVnaW4gb2YgdGhpcy5wbHVnaW5zKVxuICAgICAgICAgICAgICAgIHBsdWdpbi5kZXN0cm95KHRoaXMpO1xuICAgICAgICAgICAgdGhpcy52aWV3U3RhdGUgPSBuZXcgVmlld1N0YXRlKG5ld1N0YXRlKTtcbiAgICAgICAgICAgIHRoaXMucGx1Z2lucyA9IG5ld1N0YXRlLmZhY2V0KHZpZXdQbHVnaW4pLm1hcChzcGVjID0+IG5ldyBQbHVnaW5JbnN0YW5jZShzcGVjKSk7XG4gICAgICAgICAgICB0aGlzLnBsdWdpbk1hcC5jbGVhcigpO1xuICAgICAgICAgICAgZm9yIChsZXQgcGx1Z2luIG9mIHRoaXMucGx1Z2lucylcbiAgICAgICAgICAgICAgICBwbHVnaW4udXBkYXRlKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5kb2NWaWV3LmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHRoaXMuZG9jVmlldyA9IG5ldyBEb2NWaWV3KHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5pbnB1dFN0YXRlLmVuc3VyZUhhbmRsZXJzKHRoaXMucGx1Z2lucyk7XG4gICAgICAgICAgICB0aGlzLm1vdW50U3R5bGVzKCk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUF0dHJzKCk7XG4gICAgICAgICAgICB0aGlzLmJpZGlDYWNoZSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVTdGF0ZSA9IDAgLyogVXBkYXRlU3RhdGUuSWRsZSAqLztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFkRm9jdXMpXG4gICAgICAgICAgICB0aGlzLmZvY3VzKCk7XG4gICAgICAgIHRoaXMucmVxdWVzdE1lYXN1cmUoKTtcbiAgICB9XG4gICAgdXBkYXRlUGx1Z2lucyh1cGRhdGUpIHtcbiAgICAgICAgbGV0IHByZXZTcGVjcyA9IHVwZGF0ZS5zdGFydFN0YXRlLmZhY2V0KHZpZXdQbHVnaW4pLCBzcGVjcyA9IHVwZGF0ZS5zdGF0ZS5mYWNldCh2aWV3UGx1Z2luKTtcbiAgICAgICAgaWYgKHByZXZTcGVjcyAhPSBzcGVjcykge1xuICAgICAgICAgICAgbGV0IG5ld1BsdWdpbnMgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IHNwZWMgb2Ygc3BlY3MpIHtcbiAgICAgICAgICAgICAgICBsZXQgZm91bmQgPSBwcmV2U3BlY3MuaW5kZXhPZihzcGVjKTtcbiAgICAgICAgICAgICAgICBpZiAoZm91bmQgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld1BsdWdpbnMucHVzaChuZXcgUGx1Z2luSW5zdGFuY2Uoc3BlYykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBsdWdpbiA9IHRoaXMucGx1Z2luc1tmb3VuZF07XG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbi5tdXN0VXBkYXRlID0gdXBkYXRlO1xuICAgICAgICAgICAgICAgICAgICBuZXdQbHVnaW5zLnB1c2gocGx1Z2luKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCBwbHVnaW4gb2YgdGhpcy5wbHVnaW5zKVxuICAgICAgICAgICAgICAgIGlmIChwbHVnaW4ubXVzdFVwZGF0ZSAhPSB1cGRhdGUpXG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbi5kZXN0cm95KHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5wbHVnaW5zID0gbmV3UGx1Z2lucztcbiAgICAgICAgICAgIHRoaXMucGx1Z2luTWFwLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGxldCBwIG9mIHRoaXMucGx1Z2lucylcbiAgICAgICAgICAgICAgICBwLm11c3RVcGRhdGUgPSB1cGRhdGU7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBsdWdpbnMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICB0aGlzLnBsdWdpbnNbaV0udXBkYXRlKHRoaXMpO1xuICAgICAgICBpZiAocHJldlNwZWNzICE9IHNwZWNzKVxuICAgICAgICAgICAgdGhpcy5pbnB1dFN0YXRlLmVuc3VyZUhhbmRsZXJzKHRoaXMucGx1Z2lucyk7XG4gICAgfVxuICAgIGRvY1ZpZXdVcGRhdGUoKSB7XG4gICAgICAgIGZvciAobGV0IHBsdWdpbiBvZiB0aGlzLnBsdWdpbnMpIHtcbiAgICAgICAgICAgIGxldCB2YWwgPSBwbHVnaW4udmFsdWU7XG4gICAgICAgICAgICBpZiAodmFsICYmIHZhbC5kb2NWaWV3VXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsLmRvY1ZpZXdVcGRhdGUodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ0V4Y2VwdGlvbih0aGlzLnN0YXRlLCBlLCBcImRvYyB2aWV3IHVwZGF0ZSBsaXN0ZW5lclwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBtZWFzdXJlKGZsdXNoID0gdHJ1ZSkge1xuICAgICAgICBpZiAodGhpcy5kZXN0cm95ZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICh0aGlzLm1lYXN1cmVTY2hlZHVsZWQgPiAtMSlcbiAgICAgICAgICAgIHRoaXMud2luLmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMubWVhc3VyZVNjaGVkdWxlZCk7XG4gICAgICAgIGlmICh0aGlzLm9ic2VydmVyLmRlbGF5ZWRBbmRyb2lkS2V5KSB7XG4gICAgICAgICAgICB0aGlzLm1lYXN1cmVTY2hlZHVsZWQgPSAtMTtcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdE1lYXN1cmUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1lYXN1cmVTY2hlZHVsZWQgPSAwOyAvLyBQcmV2ZW50IHJlcXVlc3RNZWFzdXJlIGNhbGxzIGZyb20gc2NoZWR1bGluZyBhbm90aGVyIGFuaW1hdGlvbiBmcmFtZVxuICAgICAgICBpZiAoZmx1c2gpXG4gICAgICAgICAgICB0aGlzLm9ic2VydmVyLmZvcmNlRmx1c2goKTtcbiAgICAgICAgbGV0IHVwZGF0ZWQgPSBudWxsO1xuICAgICAgICBsZXQgc0RPTSA9IHRoaXMuc2Nyb2xsRE9NLCBzY3JvbGxUb3AgPSBzRE9NLnNjcm9sbFRvcCAqIHRoaXMuc2NhbGVZO1xuICAgICAgICBsZXQgeyBzY3JvbGxBbmNob3JQb3MsIHNjcm9sbEFuY2hvckhlaWdodCB9ID0gdGhpcy52aWV3U3RhdGU7XG4gICAgICAgIGlmIChNYXRoLmFicyhzY3JvbGxUb3AgLSB0aGlzLnZpZXdTdGF0ZS5zY3JvbGxUb3ApID4gMSlcbiAgICAgICAgICAgIHNjcm9sbEFuY2hvckhlaWdodCA9IC0xO1xuICAgICAgICB0aGlzLnZpZXdTdGF0ZS5zY3JvbGxBbmNob3JIZWlnaHQgPSAtMTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOzsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNjcm9sbEFuY2hvckhlaWdodCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzU2Nyb2xsZWRUb0JvdHRvbShzRE9NKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsQW5jaG9yUG9zID0gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxBbmNob3JIZWlnaHQgPSB0aGlzLnZpZXdTdGF0ZS5oZWlnaHRNYXAuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGJsb2NrID0gdGhpcy52aWV3U3RhdGUuc2Nyb2xsQW5jaG9yQXQoc2Nyb2xsVG9wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbEFuY2hvclBvcyA9IGJsb2NrLmZyb207XG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxBbmNob3JIZWlnaHQgPSBibG9jay50b3A7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTdGF0ZSA9IDEgLyogVXBkYXRlU3RhdGUuTWVhc3VyaW5nICovO1xuICAgICAgICAgICAgICAgIGxldCBjaGFuZ2VkID0gdGhpcy52aWV3U3RhdGUubWVhc3VyZSh0aGlzKTtcbiAgICAgICAgICAgICAgICBpZiAoIWNoYW5nZWQgJiYgIXRoaXMubWVhc3VyZVJlcXVlc3RzLmxlbmd0aCAmJiB0aGlzLnZpZXdTdGF0ZS5zY3JvbGxUYXJnZXQgPT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgaWYgKGkgPiA1KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybih0aGlzLm1lYXN1cmVSZXF1ZXN0cy5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgID8gXCJNZWFzdXJlIGxvb3AgcmVzdGFydGVkIG1vcmUgdGhhbiA1IHRpbWVzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogXCJWaWV3cG9ydCBmYWlsZWQgdG8gc3RhYmlsaXplXCIpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IG1lYXN1cmluZyA9IFtdO1xuICAgICAgICAgICAgICAgIC8vIE9ubHkgcnVuIG1lYXN1cmUgcmVxdWVzdHMgaW4gdGhpcyBjeWNsZSB3aGVuIHRoZSB2aWV3cG9ydCBkaWRuJ3QgY2hhbmdlXG4gICAgICAgICAgICAgICAgaWYgKCEoY2hhbmdlZCAmIDQgLyogVXBkYXRlRmxhZy5WaWV3cG9ydCAqLykpXG4gICAgICAgICAgICAgICAgICAgIFt0aGlzLm1lYXN1cmVSZXF1ZXN0cywgbWVhc3VyaW5nXSA9IFttZWFzdXJpbmcsIHRoaXMubWVhc3VyZVJlcXVlc3RzXTtcbiAgICAgICAgICAgICAgICBsZXQgbWVhc3VyZWQgPSBtZWFzdXJpbmcubWFwKG0gPT4ge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0ucmVhZCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nRXhjZXB0aW9uKHRoaXMuc3RhdGUsIGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEJhZE1lYXN1cmU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBsZXQgdXBkYXRlID0gVmlld1VwZGF0ZS5jcmVhdGUodGhpcywgdGhpcy5zdGF0ZSwgW10pLCByZWRyYXduID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdXBkYXRlLmZsYWdzIHw9IGNoYW5nZWQ7XG4gICAgICAgICAgICAgICAgaWYgKCF1cGRhdGVkKVxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVkID0gdXBkYXRlO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlZC5mbGFncyB8PSBjaGFuZ2VkO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdGUgPSAyIC8qIFVwZGF0ZVN0YXRlLlVwZGF0aW5nICovO1xuICAgICAgICAgICAgICAgIGlmICghdXBkYXRlLmVtcHR5KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUGx1Z2lucyh1cGRhdGUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0U3RhdGUudXBkYXRlKHVwZGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQXR0cnMoKTtcbiAgICAgICAgICAgICAgICAgICAgcmVkcmF3biA9IHRoaXMuZG9jVmlldy51cGRhdGUodXBkYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlZHJhd24pXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvY1ZpZXdVcGRhdGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZWFzdXJpbmcubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgICAgIGlmIChtZWFzdXJlZFtpXSAhPSBCYWRNZWFzdXJlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtID0gbWVhc3VyaW5nW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLndyaXRlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLndyaXRlKG1lYXN1cmVkW2ldLCB0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nRXhjZXB0aW9uKHRoaXMuc3RhdGUsIGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJlZHJhd24pXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9jVmlldy51cGRhdGVTZWxlY3Rpb24odHJ1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKCF1cGRhdGUudmlld3BvcnRDaGFuZ2VkICYmIHRoaXMubWVhc3VyZVJlcXVlc3RzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnZpZXdTdGF0ZS5lZGl0b3JIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnZpZXdTdGF0ZS5zY3JvbGxUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvY1ZpZXcuc2Nyb2xsSW50b1ZpZXcodGhpcy52aWV3U3RhdGUuc2Nyb2xsVGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdTdGF0ZS5zY3JvbGxUYXJnZXQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbEFuY2hvckhlaWdodCA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5ld0FuY2hvckhlaWdodCA9IHNjcm9sbEFuY2hvclBvcyA8IDAgPyB0aGlzLnZpZXdTdGF0ZS5oZWlnaHRNYXAuaGVpZ2h0IDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3U3RhdGUubGluZUJsb2NrQXQoc2Nyb2xsQW5jaG9yUG9zKS50b3A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRpZmYgPSBuZXdBbmNob3JIZWlnaHQgLSBzY3JvbGxBbmNob3JIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpZmYgPiAxIHx8IGRpZmYgPCAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxUb3AgPSBzY3JvbGxUb3AgKyBkaWZmO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzRE9NLnNjcm9sbFRvcCA9IHNjcm9sbFRvcCAvIHRoaXMuc2NhbGVZO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxBbmNob3JIZWlnaHQgPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdGUgPSAwIC8qIFVwZGF0ZVN0YXRlLklkbGUgKi87XG4gICAgICAgICAgICB0aGlzLm1lYXN1cmVTY2hlZHVsZWQgPSAtMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodXBkYXRlZCAmJiAhdXBkYXRlZC5lbXB0eSlcbiAgICAgICAgICAgIGZvciAobGV0IGxpc3RlbmVyIG9mIHRoaXMuc3RhdGUuZmFjZXQodXBkYXRlTGlzdGVuZXIpKVxuICAgICAgICAgICAgICAgIGxpc3RlbmVyKHVwZGF0ZWQpO1xuICAgIH1cbiAgICAvKipcbiAgICBHZXQgdGhlIENTUyBjbGFzc2VzIGZvciB0aGUgY3VycmVudGx5IGFjdGl2ZSBlZGl0b3IgdGhlbWVzLlxuICAgICovXG4gICAgZ2V0IHRoZW1lQ2xhc3NlcygpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VUaGVtZUlEICsgXCIgXCIgK1xuICAgICAgICAgICAgKHRoaXMuc3RhdGUuZmFjZXQoZGFya1RoZW1lKSA/IGJhc2VEYXJrSUQgOiBiYXNlTGlnaHRJRCkgKyBcIiBcIiArXG4gICAgICAgICAgICB0aGlzLnN0YXRlLmZhY2V0KHRoZW1lKTtcbiAgICB9XG4gICAgdXBkYXRlQXR0cnMoKSB7XG4gICAgICAgIGxldCBlZGl0b3JBdHRycyA9IGF0dHJzRnJvbUZhY2V0KHRoaXMsIGVkaXRvckF0dHJpYnV0ZXMsIHtcbiAgICAgICAgICAgIGNsYXNzOiBcImNtLWVkaXRvclwiICsgKHRoaXMuaGFzRm9jdXMgPyBcIiBjbS1mb2N1c2VkIFwiIDogXCIgXCIpICsgdGhpcy50aGVtZUNsYXNzZXNcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBjb250ZW50QXR0cnMgPSB7XG4gICAgICAgICAgICBzcGVsbGNoZWNrOiBcImZhbHNlXCIsXG4gICAgICAgICAgICBhdXRvY29ycmVjdDogXCJvZmZcIixcbiAgICAgICAgICAgIGF1dG9jYXBpdGFsaXplOiBcIm9mZlwiLFxuICAgICAgICAgICAgdHJhbnNsYXRlOiBcIm5vXCIsXG4gICAgICAgICAgICBjb250ZW50ZWRpdGFibGU6ICF0aGlzLnN0YXRlLmZhY2V0KGVkaXRhYmxlKSA/IFwiZmFsc2VcIiA6IFwidHJ1ZVwiLFxuICAgICAgICAgICAgY2xhc3M6IFwiY20tY29udGVudFwiLFxuICAgICAgICAgICAgc3R5bGU6IGAke2Jyb3dzZXIudGFiU2l6ZX06ICR7dGhpcy5zdGF0ZS50YWJTaXplfWAsXG4gICAgICAgICAgICByb2xlOiBcInRleHRib3hcIixcbiAgICAgICAgICAgIFwiYXJpYS1tdWx0aWxpbmVcIjogXCJ0cnVlXCJcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUucmVhZE9ubHkpXG4gICAgICAgICAgICBjb250ZW50QXR0cnNbXCJhcmlhLXJlYWRvbmx5XCJdID0gXCJ0cnVlXCI7XG4gICAgICAgIGF0dHJzRnJvbUZhY2V0KHRoaXMsIGNvbnRlbnRBdHRyaWJ1dGVzLCBjb250ZW50QXR0cnMpO1xuICAgICAgICBsZXQgY2hhbmdlZCA9IHRoaXMub2JzZXJ2ZXIuaWdub3JlKCgpID0+IHtcbiAgICAgICAgICAgIGxldCBjaGFuZ2VkQ29udGVudCA9IHVwZGF0ZUF0dHJzKHRoaXMuY29udGVudERPTSwgdGhpcy5jb250ZW50QXR0cnMsIGNvbnRlbnRBdHRycyk7XG4gICAgICAgICAgICBsZXQgY2hhbmdlZEVkaXRvciA9IHVwZGF0ZUF0dHJzKHRoaXMuZG9tLCB0aGlzLmVkaXRvckF0dHJzLCBlZGl0b3JBdHRycyk7XG4gICAgICAgICAgICByZXR1cm4gY2hhbmdlZENvbnRlbnQgfHwgY2hhbmdlZEVkaXRvcjtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZWRpdG9yQXR0cnMgPSBlZGl0b3JBdHRycztcbiAgICAgICAgdGhpcy5jb250ZW50QXR0cnMgPSBjb250ZW50QXR0cnM7XG4gICAgICAgIHJldHVybiBjaGFuZ2VkO1xuICAgIH1cbiAgICBzaG93QW5ub3VuY2VtZW50cyh0cnMpIHtcbiAgICAgICAgbGV0IGZpcnN0ID0gdHJ1ZTtcbiAgICAgICAgZm9yIChsZXQgdHIgb2YgdHJzKVxuICAgICAgICAgICAgZm9yIChsZXQgZWZmZWN0IG9mIHRyLmVmZmVjdHMpXG4gICAgICAgICAgICAgICAgaWYgKGVmZmVjdC5pcyhFZGl0b3JWaWV3LmFubm91bmNlKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmlyc3QpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFubm91bmNlRE9NLnRleHRDb250ZW50ID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRpdiA9IHRoaXMuYW5ub3VuY2VET00uYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSk7XG4gICAgICAgICAgICAgICAgICAgIGRpdi50ZXh0Q29udGVudCA9IGVmZmVjdC52YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgfVxuICAgIG1vdW50U3R5bGVzKCkge1xuICAgICAgICB0aGlzLnN0eWxlTW9kdWxlcyA9IHRoaXMuc3RhdGUuZmFjZXQoc3R5bGVNb2R1bGUpO1xuICAgICAgICBsZXQgbm9uY2UgPSB0aGlzLnN0YXRlLmZhY2V0KEVkaXRvclZpZXcuY3NwTm9uY2UpO1xuICAgICAgICBzdHlsZU1vZC5TdHlsZU1vZHVsZS5tb3VudCh0aGlzLnJvb3QsIHRoaXMuc3R5bGVNb2R1bGVzLmNvbmNhdChiYXNlVGhlbWUkMSkucmV2ZXJzZSgpLCBub25jZSA/IHsgbm9uY2UgfSA6IHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIHJlYWRNZWFzdXJlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMudXBkYXRlU3RhdGUgPT0gMiAvKiBVcGRhdGVTdGF0ZS5VcGRhdGluZyAqLylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlYWRpbmcgdGhlIGVkaXRvciBsYXlvdXQgaXNuJ3QgYWxsb3dlZCBkdXJpbmcgYW4gdXBkYXRlXCIpO1xuICAgICAgICBpZiAodGhpcy51cGRhdGVTdGF0ZSA9PSAwIC8qIFVwZGF0ZVN0YXRlLklkbGUgKi8gJiYgdGhpcy5tZWFzdXJlU2NoZWR1bGVkID4gLTEpXG4gICAgICAgICAgICB0aGlzLm1lYXN1cmUoZmFsc2UpO1xuICAgIH1cbiAgICAvKipcbiAgICBTY2hlZHVsZSBhIGxheW91dCBtZWFzdXJlbWVudCwgb3B0aW9uYWxseSBwcm92aWRpbmcgY2FsbGJhY2tzIHRvXG4gICAgZG8gY3VzdG9tIERPTSBtZWFzdXJpbmcgZm9sbG93ZWQgYnkgYSBET00gd3JpdGUgcGhhc2UuIFVzaW5nXG4gICAgdGhpcyBpcyBwcmVmZXJhYmxlIHJlYWRpbmcgRE9NIGxheW91dCBkaXJlY3RseSBmcm9tLCBmb3JcbiAgICBleGFtcGxlLCBhbiBldmVudCBoYW5kbGVyLCBiZWNhdXNlIGl0J2xsIG1ha2Ugc3VyZSBtZWFzdXJpbmcgYW5kXG4gICAgZHJhd2luZyBkb25lIGJ5IG90aGVyIGNvbXBvbmVudHMgaXMgc3luY2hyb25pemVkLCBhdm9pZGluZ1xuICAgIHVubmVjZXNzYXJ5IERPTSBsYXlvdXQgY29tcHV0YXRpb25zLlxuICAgICovXG4gICAgcmVxdWVzdE1lYXN1cmUocmVxdWVzdCkge1xuICAgICAgICBpZiAodGhpcy5tZWFzdXJlU2NoZWR1bGVkIDwgMClcbiAgICAgICAgICAgIHRoaXMubWVhc3VyZVNjaGVkdWxlZCA9IHRoaXMud2luLnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLm1lYXN1cmUoKSk7XG4gICAgICAgIGlmIChyZXF1ZXN0KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5tZWFzdXJlUmVxdWVzdHMuaW5kZXhPZihyZXF1ZXN0KSA+IC0xKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGlmIChyZXF1ZXN0LmtleSAhPSBudWxsKVxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5tZWFzdXJlUmVxdWVzdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWVhc3VyZVJlcXVlc3RzW2ldLmtleSA9PT0gcmVxdWVzdC5rZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVhc3VyZVJlcXVlc3RzW2ldID0gcmVxdWVzdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubWVhc3VyZVJlcXVlc3RzLnB1c2gocmVxdWVzdCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgR2V0IHRoZSB2YWx1ZSBvZiBhIHNwZWNpZmljIHBsdWdpbiwgaWYgcHJlc2VudC4gTm90ZSB0aGF0XG4gICAgcGx1Z2lucyB0aGF0IGNyYXNoIGNhbiBiZSBkcm9wcGVkIGZyb20gYSB2aWV3LCBzbyBldmVuIHdoZW4geW91XG4gICAga25vdyB5b3UgcmVnaXN0ZXJlZCBhIGdpdmVuIHBsdWdpbiwgaXQgaXMgcmVjb21tZW5kZWQgdG8gY2hlY2tcbiAgICB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoaXMgbWV0aG9kLlxuICAgICovXG4gICAgcGx1Z2luKHBsdWdpbikge1xuICAgICAgICBsZXQga25vd24gPSB0aGlzLnBsdWdpbk1hcC5nZXQocGx1Z2luKTtcbiAgICAgICAgaWYgKGtub3duID09PSB1bmRlZmluZWQgfHwga25vd24gJiYga25vd24uc3BlYyAhPSBwbHVnaW4pXG4gICAgICAgICAgICB0aGlzLnBsdWdpbk1hcC5zZXQocGx1Z2luLCBrbm93biA9IHRoaXMucGx1Z2lucy5maW5kKHAgPT4gcC5zcGVjID09IHBsdWdpbikgfHwgbnVsbCk7XG4gICAgICAgIHJldHVybiBrbm93biAmJiBrbm93bi51cGRhdGUodGhpcykudmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgIFRoZSB0b3AgcG9zaXRpb24gb2YgdGhlIGRvY3VtZW50LCBpbiBzY3JlZW4gY29vcmRpbmF0ZXMuIFRoaXNcbiAgICBtYXkgYmUgbmVnYXRpdmUgd2hlbiB0aGUgZWRpdG9yIGlzIHNjcm9sbGVkIGRvd24uIFBvaW50c1xuICAgIGRpcmVjdGx5IHRvIHRoZSB0b3Agb2YgdGhlIGZpcnN0IGxpbmUsIG5vdCBhYm92ZSB0aGUgcGFkZGluZy5cbiAgICAqL1xuICAgIGdldCBkb2N1bWVudFRvcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudERPTS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgKyB0aGlzLnZpZXdTdGF0ZS5wYWRkaW5nVG9wO1xuICAgIH1cbiAgICAvKipcbiAgICBSZXBvcnRzIHRoZSBwYWRkaW5nIGFib3ZlIGFuZCBiZWxvdyB0aGUgZG9jdW1lbnQuXG4gICAgKi9cbiAgICBnZXQgZG9jdW1lbnRQYWRkaW5nKCkge1xuICAgICAgICByZXR1cm4geyB0b3A6IHRoaXMudmlld1N0YXRlLnBhZGRpbmdUb3AsIGJvdHRvbTogdGhpcy52aWV3U3RhdGUucGFkZGluZ0JvdHRvbSB9O1xuICAgIH1cbiAgICAvKipcbiAgICBJZiB0aGUgZWRpdG9yIGlzIHRyYW5zZm9ybWVkIHdpdGggQ1NTLCB0aGlzIHByb3ZpZGVzIHRoZSBzY2FsZVxuICAgIGFsb25nIHRoZSBYIGF4aXMuIE90aGVyd2lzZSwgaXQgd2lsbCBqdXN0IGJlIDEuIE5vdGUgdGhhdFxuICAgIHRyYW5zZm9ybXMgb3RoZXIgdGhhbiB0cmFuc2xhdGlvbiBhbmQgc2NhbGluZyBhcmUgbm90IHN1cHBvcnRlZC5cbiAgICAqL1xuICAgIGdldCBzY2FsZVgoKSB7IHJldHVybiB0aGlzLnZpZXdTdGF0ZS5zY2FsZVg7IH1cbiAgICAvKipcbiAgICBQcm92aWRlIHRoZSBDU1MgdHJhbnNmb3JtZWQgc2NhbGUgYWxvbmcgdGhlIFkgYXhpcy5cbiAgICAqL1xuICAgIGdldCBzY2FsZVkoKSB7IHJldHVybiB0aGlzLnZpZXdTdGF0ZS5zY2FsZVk7IH1cbiAgICAvKipcbiAgICBGaW5kIHRoZSB0ZXh0IGxpbmUgb3IgYmxvY2sgd2lkZ2V0IGF0IHRoZSBnaXZlbiB2ZXJ0aWNhbFxuICAgIHBvc2l0aW9uICh3aGljaCBpcyBpbnRlcnByZXRlZCBhcyByZWxhdGl2ZSB0byB0aGUgW3RvcCBvZiB0aGVcbiAgICBkb2N1bWVudF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyN2aWV3LkVkaXRvclZpZXcuZG9jdW1lbnRUb3ApKS5cbiAgICAqL1xuICAgIGVsZW1lbnRBdEhlaWdodChoZWlnaHQpIHtcbiAgICAgICAgdGhpcy5yZWFkTWVhc3VyZWQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlld1N0YXRlLmVsZW1lbnRBdEhlaWdodChoZWlnaHQpO1xuICAgIH1cbiAgICAvKipcbiAgICBGaW5kIHRoZSBsaW5lIGJsb2NrIChzZWVcbiAgICBbYGxpbmVCbG9ja0F0YF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyN2aWV3LkVkaXRvclZpZXcubGluZUJsb2NrQXQpIGF0IHRoZSBnaXZlblxuICAgIGhlaWdodCwgYWdhaW4gaW50ZXJwcmV0ZWQgcmVsYXRpdmUgdG8gdGhlIFt0b3Agb2YgdGhlXG4gICAgZG9jdW1lbnRdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jdmlldy5FZGl0b3JWaWV3LmRvY3VtZW50VG9wKS5cbiAgICAqL1xuICAgIGxpbmVCbG9ja0F0SGVpZ2h0KGhlaWdodCkge1xuICAgICAgICB0aGlzLnJlYWRNZWFzdXJlZCgpO1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3U3RhdGUubGluZUJsb2NrQXRIZWlnaHQoaGVpZ2h0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgR2V0IHRoZSBleHRlbnQgYW5kIHZlcnRpY2FsIHBvc2l0aW9uIG9mIGFsbCBbbGluZVxuICAgIGJsb2Nrc10oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyN2aWV3LkVkaXRvclZpZXcubGluZUJsb2NrQXQpIGluIHRoZSB2aWV3cG9ydC4gUG9zaXRpb25zXG4gICAgYXJlIHJlbGF0aXZlIHRvIHRoZSBbdG9wIG9mIHRoZVxuICAgIGRvY3VtZW50XShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3ZpZXcuRWRpdG9yVmlldy5kb2N1bWVudFRvcCk7XG4gICAgKi9cbiAgICBnZXQgdmlld3BvcnRMaW5lQmxvY2tzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3U3RhdGUudmlld3BvcnRMaW5lcztcbiAgICB9XG4gICAgLyoqXG4gICAgRmluZCB0aGUgbGluZSBibG9jayBhcm91bmQgdGhlIGdpdmVuIGRvY3VtZW50IHBvc2l0aW9uLiBBIGxpbmVcbiAgICBibG9jayBpcyBhIHJhbmdlIGRlbGltaXRlZCBvbiBib3RoIHNpZGVzIGJ5IGVpdGhlciBhXG4gICAgbm9uLVtoaWRkZW5dKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jdmlldy5EZWNvcmF0aW9uXnJlcGxhY2UpIGxpbmUgYnJlYWtzLCBvciB0aGVcbiAgICBzdGFydC9lbmQgb2YgdGhlIGRvY3VtZW50LiBJdCB3aWxsIHVzdWFsbHkganVzdCBob2xkIGEgbGluZSBvZlxuICAgIHRleHQsIGJ1dCBtYXkgYmUgYnJva2VuIGludG8gbXVsdGlwbGUgdGV4dGJsb2NrcyBieSBibG9ja1xuICAgIHdpZGdldHMuXG4gICAgKi9cbiAgICBsaW5lQmxvY2tBdChwb3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlld1N0YXRlLmxpbmVCbG9ja0F0KHBvcyk7XG4gICAgfVxuICAgIC8qKlxuICAgIFRoZSBlZGl0b3IncyB0b3RhbCBjb250ZW50IGhlaWdodC5cbiAgICAqL1xuICAgIGdldCBjb250ZW50SGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3U3RhdGUuY29udGVudEhlaWdodDtcbiAgICB9XG4gICAgLyoqXG4gICAgTW92ZSBhIGN1cnNvciBwb3NpdGlvbiBieSBbZ3JhcGhlbWVcbiAgICBjbHVzdGVyXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLmZpbmRDbHVzdGVyQnJlYWspLiBgZm9yd2FyZGAgZGV0ZXJtaW5lcyB3aGV0aGVyXG4gICAgdGhlIG1vdGlvbiBpcyBhd2F5IGZyb20gdGhlIGxpbmUgc3RhcnQsIG9yIHRvd2FyZHMgaXQuIEluXG4gICAgYmlkaXJlY3Rpb25hbCB0ZXh0LCB0aGUgbGluZSBpcyB0cmF2ZXJzZWQgaW4gdmlzdWFsIG9yZGVyLCB1c2luZ1xuICAgIHRoZSBlZGl0b3IncyBbdGV4dCBkaXJlY3Rpb25dKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jdmlldy5FZGl0b3JWaWV3LnRleHREaXJlY3Rpb24pLlxuICAgIFdoZW4gdGhlIHN0YXJ0IHBvc2l0aW9uIHdhcyB0aGUgbGFzdCBvbmUgb24gdGhlIGxpbmUsIHRoZVxuICAgIHJldHVybmVkIHBvc2l0aW9uIHdpbGwgYmUgYWNyb3NzIHRoZSBsaW5lIGJyZWFrLiBJZiB0aGVyZSBpcyBub1xuICAgIGZ1cnRoZXIgbGluZSwgdGhlIG9yaWdpbmFsIHBvc2l0aW9uIGlzIHJldHVybmVkLlxuICAgIFxuICAgIEJ5IGRlZmF1bHQsIHRoaXMgbWV0aG9kIG1vdmVzIG92ZXIgYSBzaW5nbGUgY2x1c3Rlci4gVGhlXG4gICAgb3B0aW9uYWwgYGJ5YCBhcmd1bWVudCBjYW4gYmUgdXNlZCB0byBtb3ZlIGFjcm9zcyBtb3JlLiBJdCB3aWxsXG4gICAgYmUgY2FsbGVkIHdpdGggdGhlIGZpcnN0IGNsdXN0ZXIgYXMgYXJndW1lbnQsIGFuZCBzaG91bGQgcmV0dXJuXG4gICAgYSBwcmVkaWNhdGUgdGhhdCBkZXRlcm1pbmVzLCBmb3IgZWFjaCBzdWJzZXF1ZW50IGNsdXN0ZXIsXG4gICAgd2hldGhlciBpdCBzaG91bGQgYWxzbyBiZSBtb3ZlZCBvdmVyLlxuICAgICovXG4gICAgbW92ZUJ5Q2hhcihzdGFydCwgZm9yd2FyZCwgYnkpIHtcbiAgICAgICAgcmV0dXJuIHNraXBBdG9tcyh0aGlzLCBzdGFydCwgbW92ZUJ5Q2hhcih0aGlzLCBzdGFydCwgZm9yd2FyZCwgYnkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgTW92ZSBhIGN1cnNvciBwb3NpdGlvbiBhY3Jvc3MgdGhlIG5leHQgZ3JvdXAgb2YgZWl0aGVyXG4gICAgW2xldHRlcnNdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jc3RhdGUuRWRpdG9yU3RhdGUuY2hhckNhdGVnb3JpemVyKSBvciBub24tbGV0dGVyXG4gICAgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycy5cbiAgICAqL1xuICAgIG1vdmVCeUdyb3VwKHN0YXJ0LCBmb3J3YXJkKSB7XG4gICAgICAgIHJldHVybiBza2lwQXRvbXModGhpcywgc3RhcnQsIG1vdmVCeUNoYXIodGhpcywgc3RhcnQsIGZvcndhcmQsIGluaXRpYWwgPT4gYnlHcm91cCh0aGlzLCBzdGFydC5oZWFkLCBpbml0aWFsKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICBHZXQgdGhlIGN1cnNvciBwb3NpdGlvbiB2aXN1YWxseSBhdCB0aGUgc3RhcnQgb3IgZW5kIG9mIGEgbGluZS5cbiAgICBOb3RlIHRoYXQgdGhpcyBtYXkgZGlmZmVyIGZyb20gdGhlIF9sb2dpY2FsXyBwb3NpdGlvbiBhdCBpdHNcbiAgICBzdGFydCBvciBlbmQgKHdoaWNoIGlzIHNpbXBseSBhdCBgbGluZS5mcm9tYC9gbGluZS50b2ApIGlmIHRleHRcbiAgICBhdCB0aGUgc3RhcnQgb3IgZW5kIGdvZXMgYWdhaW5zdCB0aGUgbGluZSdzIGJhc2UgdGV4dCBkaXJlY3Rpb24uXG4gICAgKi9cbiAgICB2aXN1YWxMaW5lU2lkZShsaW5lLCBlbmQpIHtcbiAgICAgICAgbGV0IG9yZGVyID0gdGhpcy5iaWRpU3BhbnMobGluZSksIGRpciA9IHRoaXMudGV4dERpcmVjdGlvbkF0KGxpbmUuZnJvbSk7XG4gICAgICAgIGxldCBzcGFuID0gb3JkZXJbZW5kID8gb3JkZXIubGVuZ3RoIC0gMSA6IDBdO1xuICAgICAgICByZXR1cm4gc3RhdGUuRWRpdG9yU2VsZWN0aW9uLmN1cnNvcihzcGFuLnNpZGUoZW5kLCBkaXIpICsgbGluZS5mcm9tLCBzcGFuLmZvcndhcmQoIWVuZCwgZGlyKSA/IDEgOiAtMSk7XG4gICAgfVxuICAgIC8qKlxuICAgIE1vdmUgdG8gdGhlIG5leHQgbGluZSBib3VuZGFyeSBpbiB0aGUgZ2l2ZW4gZGlyZWN0aW9uLiBJZlxuICAgIGBpbmNsdWRlV3JhcGAgaXMgdHJ1ZSwgbGluZSB3cmFwcGluZyBpcyBvbiwgYW5kIHRoZXJlIGlzIGFcbiAgICBmdXJ0aGVyIHdyYXAgcG9pbnQgb24gdGhlIGN1cnJlbnQgbGluZSwgdGhlIHdyYXAgcG9pbnQgd2lsbCBiZVxuICAgIHJldHVybmVkLiBPdGhlcndpc2UgdGhpcyBmdW5jdGlvbiB3aWxsIHJldHVybiB0aGUgc3RhcnQgb3IgZW5kXG4gICAgb2YgdGhlIGxpbmUuXG4gICAgKi9cbiAgICBtb3ZlVG9MaW5lQm91bmRhcnkoc3RhcnQsIGZvcndhcmQsIGluY2x1ZGVXcmFwID0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gbW92ZVRvTGluZUJvdW5kYXJ5KHRoaXMsIHN0YXJ0LCBmb3J3YXJkLCBpbmNsdWRlV3JhcCk7XG4gICAgfVxuICAgIC8qKlxuICAgIE1vdmUgYSBjdXJzb3IgcG9zaXRpb24gdmVydGljYWxseS4gV2hlbiBgZGlzdGFuY2VgIGlzbid0IGdpdmVuLFxuICAgIGl0IGRlZmF1bHRzIHRvIG1vdmluZyB0byB0aGUgbmV4dCBsaW5lIChpbmNsdWRpbmcgd3JhcHBlZFxuICAgIGxpbmVzKS4gT3RoZXJ3aXNlLCBgZGlzdGFuY2VgIHNob3VsZCBwcm92aWRlIGEgcG9zaXRpdmUgZGlzdGFuY2VcbiAgICBpbiBwaXhlbHMuXG4gICAgXG4gICAgV2hlbiBgc3RhcnRgIGhhcyBhXG4gICAgW2Bnb2FsQ29sdW1uYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5TZWxlY3Rpb25SYW5nZS5nb2FsQ29sdW1uKSwgdGhlIHZlcnRpY2FsXG4gICAgbW90aW9uIHdpbGwgdXNlIHRoYXQgYXMgYSB0YXJnZXQgaG9yaXpvbnRhbCBwb3NpdGlvbi4gT3RoZXJ3aXNlLFxuICAgIHRoZSBjdXJzb3IncyBvd24gaG9yaXpvbnRhbCBwb3NpdGlvbiBpcyB1c2VkLiBUaGUgcmV0dXJuZWRcbiAgICBjdXJzb3Igd2lsbCBoYXZlIGl0cyBnb2FsIGNvbHVtbiBzZXQgdG8gd2hpY2hldmVyIGNvbHVtbiB3YXNcbiAgICB1c2VkLlxuICAgICovXG4gICAgbW92ZVZlcnRpY2FsbHkoc3RhcnQsIGZvcndhcmQsIGRpc3RhbmNlKSB7XG4gICAgICAgIHJldHVybiBza2lwQXRvbXModGhpcywgc3RhcnQsIG1vdmVWZXJ0aWNhbGx5KHRoaXMsIHN0YXJ0LCBmb3J3YXJkLCBkaXN0YW5jZSkpO1xuICAgIH1cbiAgICAvKipcbiAgICBGaW5kIHRoZSBET00gcGFyZW50IG5vZGUgYW5kIG9mZnNldCAoY2hpbGQgb2Zmc2V0IGlmIGBub2RlYCBpc1xuICAgIGFuIGVsZW1lbnQsIGNoYXJhY3RlciBvZmZzZXQgd2hlbiBpdCBpcyBhIHRleHQgbm9kZSkgYXQgdGhlXG4gICAgZ2l2ZW4gZG9jdW1lbnQgcG9zaXRpb24uXG4gICAgXG4gICAgTm90ZSB0aGF0IGZvciBwb3NpdGlvbnMgdGhhdCBhcmVuJ3QgY3VycmVudGx5IGluXG4gICAgYHZpc2libGVSYW5nZXNgLCB0aGUgcmVzdWx0aW5nIERPTSBwb3NpdGlvbiBpc24ndCBuZWNlc3NhcmlseVxuICAgIG1lYW5pbmdmdWwgKGl0IG1heSBqdXN0IHBvaW50IGJlZm9yZSBvciBhZnRlciBhIHBsYWNlaG9sZGVyXG4gICAgZWxlbWVudCkuXG4gICAgKi9cbiAgICBkb21BdFBvcyhwb3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9jVmlldy5kb21BdFBvcyhwb3MpO1xuICAgIH1cbiAgICAvKipcbiAgICBGaW5kIHRoZSBkb2N1bWVudCBwb3NpdGlvbiBhdCB0aGUgZ2l2ZW4gRE9NIG5vZGUuIENhbiBiZSB1c2VmdWxcbiAgICBmb3IgYXNzb2NpYXRpbmcgcG9zaXRpb25zIHdpdGggRE9NIGV2ZW50cy4gV2lsbCByYWlzZSBhbiBlcnJvclxuICAgIHdoZW4gYG5vZGVgIGlzbid0IHBhcnQgb2YgdGhlIGVkaXRvciBjb250ZW50LlxuICAgICovXG4gICAgcG9zQXRET00obm9kZSwgb2Zmc2V0ID0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kb2NWaWV3LnBvc0Zyb21ET00obm9kZSwgb2Zmc2V0KTtcbiAgICB9XG4gICAgcG9zQXRDb29yZHMoY29vcmRzLCBwcmVjaXNlID0gdHJ1ZSkge1xuICAgICAgICB0aGlzLnJlYWRNZWFzdXJlZCgpO1xuICAgICAgICByZXR1cm4gcG9zQXRDb29yZHModGhpcywgY29vcmRzLCBwcmVjaXNlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgR2V0IHRoZSBzY3JlZW4gY29vcmRpbmF0ZXMgYXQgdGhlIGdpdmVuIGRvY3VtZW50IHBvc2l0aW9uLlxuICAgIGBzaWRlYCBkZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGNvb3JkaW5hdGVzIGFyZSBiYXNlZCBvbiB0aGVcbiAgICBlbGVtZW50IGJlZm9yZSAoLTEpIG9yIGFmdGVyICgxKSB0aGUgcG9zaXRpb24gKGlmIG5vIGVsZW1lbnQgaXNcbiAgICBhdmFpbGFibGUgb24gdGhlIGdpdmVuIHNpZGUsIHRoZSBtZXRob2Qgd2lsbCB0cmFuc3BhcmVudGx5IHVzZVxuICAgIGFub3RoZXIgc3RyYXRlZ3kgdG8gZ2V0IHJlYXNvbmFibGUgY29vcmRpbmF0ZXMpLlxuICAgICovXG4gICAgY29vcmRzQXRQb3MocG9zLCBzaWRlID0gMSkge1xuICAgICAgICB0aGlzLnJlYWRNZWFzdXJlZCgpO1xuICAgICAgICBsZXQgcmVjdCA9IHRoaXMuZG9jVmlldy5jb29yZHNBdChwb3MsIHNpZGUpO1xuICAgICAgICBpZiAoIXJlY3QgfHwgcmVjdC5sZWZ0ID09IHJlY3QucmlnaHQpXG4gICAgICAgICAgICByZXR1cm4gcmVjdDtcbiAgICAgICAgbGV0IGxpbmUgPSB0aGlzLnN0YXRlLmRvYy5saW5lQXQocG9zKSwgb3JkZXIgPSB0aGlzLmJpZGlTcGFucyhsaW5lKTtcbiAgICAgICAgbGV0IHNwYW4gPSBvcmRlcltCaWRpU3Bhbi5maW5kKG9yZGVyLCBwb3MgLSBsaW5lLmZyb20sIC0xLCBzaWRlKV07XG4gICAgICAgIHJldHVybiBmbGF0dGVuUmVjdChyZWN0LCAoc3Bhbi5kaXIgPT0gZXhwb3J0cy5EaXJlY3Rpb24uTFRSKSA9PSAoc2lkZSA+IDApKTtcbiAgICB9XG4gICAgLyoqXG4gICAgUmV0dXJuIHRoZSByZWN0YW5nbGUgYXJvdW5kIGEgZ2l2ZW4gY2hhcmFjdGVyLiBJZiBgcG9zYCBkb2VzIG5vdFxuICAgIHBvaW50IGluIGZyb250IG9mIGEgY2hhcmFjdGVyIHRoYXQgaXMgaW4gdGhlIHZpZXdwb3J0IGFuZFxuICAgIHJlbmRlcmVkIChpLmUuIG5vdCByZXBsYWNlZCwgbm90IGEgbGluZSBicmVhayksIHRoaXMgd2lsbCByZXR1cm5cbiAgICBudWxsLiBGb3Igc3BhY2UgY2hhcmFjdGVycyB0aGF0IGFyZSBhIGxpbmUgd3JhcCBwb2ludCwgdGhpcyB3aWxsXG4gICAgcmV0dXJuIHRoZSBwb3NpdGlvbiBiZWZvcmUgdGhlIGxpbmUgYnJlYWsuXG4gICAgKi9cbiAgICBjb29yZHNGb3JDaGFyKHBvcykge1xuICAgICAgICB0aGlzLnJlYWRNZWFzdXJlZCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5kb2NWaWV3LmNvb3Jkc0ZvckNoYXIocG9zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgVGhlIGRlZmF1bHQgd2lkdGggb2YgYSBjaGFyYWN0ZXIgaW4gdGhlIGVkaXRvci4gTWF5IG5vdFxuICAgIGFjY3VyYXRlbHkgcmVmbGVjdCB0aGUgd2lkdGggb2YgYWxsIGNoYXJhY3RlcnMgKGdpdmVuIHZhcmlhYmxlXG4gICAgd2lkdGggZm9udHMgb3Igc3R5bGluZyBvZiBpbnZpZGlkdWFsIHJhbmdlcykuXG4gICAgKi9cbiAgICBnZXQgZGVmYXVsdENoYXJhY3RlcldpZHRoKCkgeyByZXR1cm4gdGhpcy52aWV3U3RhdGUuaGVpZ2h0T3JhY2xlLmNoYXJXaWR0aDsgfVxuICAgIC8qKlxuICAgIFRoZSBkZWZhdWx0IGhlaWdodCBvZiBhIGxpbmUgaW4gdGhlIGVkaXRvci4gTWF5IG5vdCBiZSBhY2N1cmF0ZVxuICAgIGZvciBhbGwgbGluZXMuXG4gICAgKi9cbiAgICBnZXQgZGVmYXVsdExpbmVIZWlnaHQoKSB7IHJldHVybiB0aGlzLnZpZXdTdGF0ZS5oZWlnaHRPcmFjbGUubGluZUhlaWdodDsgfVxuICAgIC8qKlxuICAgIFRoZSB0ZXh0IGRpcmVjdGlvblxuICAgIChbYGRpcmVjdGlvbmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9kaXJlY3Rpb24pXG4gICAgQ1NTIHByb3BlcnR5KSBvZiB0aGUgZWRpdG9yJ3MgY29udGVudCBlbGVtZW50LlxuICAgICovXG4gICAgZ2V0IHRleHREaXJlY3Rpb24oKSB7IHJldHVybiB0aGlzLnZpZXdTdGF0ZS5kZWZhdWx0VGV4dERpcmVjdGlvbjsgfVxuICAgIC8qKlxuICAgIEZpbmQgdGhlIHRleHQgZGlyZWN0aW9uIG9mIHRoZSBibG9jayBhdCB0aGUgZ2l2ZW4gcG9zaXRpb24sIGFzXG4gICAgYXNzaWduZWQgYnkgQ1NTLiBJZlxuICAgIFtgcGVyTGluZVRleHREaXJlY3Rpb25gXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3ZpZXcuRWRpdG9yVmlld15wZXJMaW5lVGV4dERpcmVjdGlvbilcbiAgICBpc24ndCBlbmFibGVkLCBvciB0aGUgZ2l2ZW4gcG9zaXRpb24gaXMgb3V0c2lkZSBvZiB0aGUgdmlld3BvcnQsXG4gICAgdGhpcyB3aWxsIGFsd2F5cyByZXR1cm4gdGhlIHNhbWUgYXNcbiAgICBbYHRleHREaXJlY3Rpb25gXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3ZpZXcuRWRpdG9yVmlldy50ZXh0RGlyZWN0aW9uKS4gTm90ZSB0aGF0XG4gICAgdGhpcyBtYXkgdHJpZ2dlciBhIERPTSBsYXlvdXQuXG4gICAgKi9cbiAgICB0ZXh0RGlyZWN0aW9uQXQocG9zKSB7XG4gICAgICAgIGxldCBwZXJMaW5lID0gdGhpcy5zdGF0ZS5mYWNldChwZXJMaW5lVGV4dERpcmVjdGlvbik7XG4gICAgICAgIGlmICghcGVyTGluZSB8fCBwb3MgPCB0aGlzLnZpZXdwb3J0LmZyb20gfHwgcG9zID4gdGhpcy52aWV3cG9ydC50bylcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRleHREaXJlY3Rpb247XG4gICAgICAgIHRoaXMucmVhZE1lYXN1cmVkKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmRvY1ZpZXcudGV4dERpcmVjdGlvbkF0KHBvcyk7XG4gICAgfVxuICAgIC8qKlxuICAgIFdoZXRoZXIgdGhpcyBlZGl0b3IgW3dyYXBzIGxpbmVzXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3ZpZXcuRWRpdG9yVmlldy5saW5lV3JhcHBpbmcpXG4gICAgKGFzIGRldGVybWluZWQgYnkgdGhlXG4gICAgW2B3aGl0ZS1zcGFjZWBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy93aGl0ZS1zcGFjZSlcbiAgICBDU1MgcHJvcGVydHkgb2YgaXRzIGNvbnRlbnQgZWxlbWVudCkuXG4gICAgKi9cbiAgICBnZXQgbGluZVdyYXBwaW5nKCkgeyByZXR1cm4gdGhpcy52aWV3U3RhdGUuaGVpZ2h0T3JhY2xlLmxpbmVXcmFwcGluZzsgfVxuICAgIC8qKlxuICAgIFJldHVybnMgdGhlIGJpZGlyZWN0aW9uYWwgdGV4dCBzdHJ1Y3R1cmUgb2YgdGhlIGdpdmVuIGxpbmVcbiAgICAod2hpY2ggc2hvdWxkIGJlIGluIHRoZSBjdXJyZW50IGRvY3VtZW50KSBhcyBhbiBhcnJheSBvZiBzcGFuXG4gICAgb2JqZWN0cy4gVGhlIG9yZGVyIG9mIHRoZXNlIHNwYW5zIG1hdGNoZXMgdGhlIFt0ZXh0XG4gICAgZGlyZWN0aW9uXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3ZpZXcuRWRpdG9yVmlldy50ZXh0RGlyZWN0aW9uKeKAlGlmIHRoYXQgaXNcbiAgICBsZWZ0LXRvLXJpZ2h0LCB0aGUgbGVmdG1vc3Qgc3BhbnMgY29tZSBmaXJzdCwgb3RoZXJ3aXNlIHRoZVxuICAgIHJpZ2h0bW9zdCBzcGFucyBjb21lIGZpcnN0LlxuICAgICovXG4gICAgYmlkaVNwYW5zKGxpbmUpIHtcbiAgICAgICAgaWYgKGxpbmUubGVuZ3RoID4gTWF4QmlkaUxpbmUpXG4gICAgICAgICAgICByZXR1cm4gdHJpdmlhbE9yZGVyKGxpbmUubGVuZ3RoKTtcbiAgICAgICAgbGV0IGRpciA9IHRoaXMudGV4dERpcmVjdGlvbkF0KGxpbmUuZnJvbSksIGlzb2xhdGVzO1xuICAgICAgICBmb3IgKGxldCBlbnRyeSBvZiB0aGlzLmJpZGlDYWNoZSkge1xuICAgICAgICAgICAgaWYgKGVudHJ5LmZyb20gPT0gbGluZS5mcm9tICYmIGVudHJ5LmRpciA9PSBkaXIgJiZcbiAgICAgICAgICAgICAgICAoZW50cnkuZnJlc2ggfHwgaXNvbGF0ZXNFcShlbnRyeS5pc29sYXRlcywgaXNvbGF0ZXMgPSBnZXRJc29sYXRlZFJhbmdlcyh0aGlzLCBsaW5lKSkpKVxuICAgICAgICAgICAgICAgIHJldHVybiBlbnRyeS5vcmRlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzb2xhdGVzKVxuICAgICAgICAgICAgaXNvbGF0ZXMgPSBnZXRJc29sYXRlZFJhbmdlcyh0aGlzLCBsaW5lKTtcbiAgICAgICAgbGV0IG9yZGVyID0gY29tcHV0ZU9yZGVyKGxpbmUudGV4dCwgZGlyLCBpc29sYXRlcyk7XG4gICAgICAgIHRoaXMuYmlkaUNhY2hlLnB1c2gobmV3IENhY2hlZE9yZGVyKGxpbmUuZnJvbSwgbGluZS50bywgZGlyLCBpc29sYXRlcywgdHJ1ZSwgb3JkZXIpKTtcbiAgICAgICAgcmV0dXJuIG9yZGVyO1xuICAgIH1cbiAgICAvKipcbiAgICBDaGVjayB3aGV0aGVyIHRoZSBlZGl0b3IgaGFzIGZvY3VzLlxuICAgICovXG4gICAgZ2V0IGhhc0ZvY3VzKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIC8vIFNhZmFyaSByZXR1cm4gZmFsc2UgZm9yIGhhc0ZvY3VzIHdoZW4gdGhlIGNvbnRleHQgbWVudSBpcyBvcGVuXG4gICAgICAgIC8vIG9yIGNsb3NpbmcsIHdoaWNoIGxlYWRzIHVzIHRvIGlnbm9yZSBzZWxlY3Rpb24gY2hhbmdlcyBmcm9tIHRoZVxuICAgICAgICAvLyBjb250ZXh0IG1lbnUgYmVjYXVzZSBpdCBsb29rcyBsaWtlIHRoZSBlZGl0b3IgaXNuJ3QgZm9jdXNlZC5cbiAgICAgICAgLy8gVGhpcyBrbHVkZ2VzIGFyb3VuZCB0aGF0LlxuICAgICAgICByZXR1cm4gKHRoaXMuZG9tLm93bmVyRG9jdW1lbnQuaGFzRm9jdXMoKSB8fCBicm93c2VyLnNhZmFyaSAmJiAoKF9hID0gdGhpcy5pbnB1dFN0YXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGFzdENvbnRleHRNZW51KSA+IERhdGUubm93KCkgLSAzZTQpICYmXG4gICAgICAgICAgICB0aGlzLnJvb3QuYWN0aXZlRWxlbWVudCA9PSB0aGlzLmNvbnRlbnRET007XG4gICAgfVxuICAgIC8qKlxuICAgIFB1dCBmb2N1cyBvbiB0aGUgZWRpdG9yLlxuICAgICovXG4gICAgZm9jdXMoKSB7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIuaWdub3JlKCgpID0+IHtcbiAgICAgICAgICAgIGZvY3VzUHJldmVudFNjcm9sbCh0aGlzLmNvbnRlbnRET00pO1xuICAgICAgICAgICAgdGhpcy5kb2NWaWV3LnVwZGF0ZVNlbGVjdGlvbigpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgVXBkYXRlIHRoZSBbcm9vdF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyMjdmlldy5FZGl0b3JWaWV3Q29uZmlnLnJvb3QpIGluIHdoaWNoIHRoZSBlZGl0b3IgbGl2ZXMuIFRoaXMgaXMgb25seVxuICAgIG5lY2Vzc2FyeSB3aGVuIG1vdmluZyB0aGUgZWRpdG9yJ3MgZXhpc3RpbmcgRE9NIHRvIGEgbmV3IHdpbmRvdyBvciBzaGFkb3cgcm9vdC5cbiAgICAqL1xuICAgIHNldFJvb3Qocm9vdCkge1xuICAgICAgICBpZiAodGhpcy5fcm9vdCAhPSByb290KSB7XG4gICAgICAgICAgICB0aGlzLl9yb290ID0gcm9vdDtcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXIuc2V0V2luZG93KChyb290Lm5vZGVUeXBlID09IDkgPyByb290IDogcm9vdC5vd25lckRvY3VtZW50KS5kZWZhdWx0VmlldyB8fCB3aW5kb3cpO1xuICAgICAgICAgICAgdGhpcy5tb3VudFN0eWxlcygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgIENsZWFuIHVwIHRoaXMgZWRpdG9yIHZpZXcsIHJlbW92aW5nIGl0cyBlbGVtZW50IGZyb20gdGhlXG4gICAgZG9jdW1lbnQsIHVucmVnaXN0ZXJpbmcgZXZlbnQgaGFuZGxlcnMsIGFuZCBub3RpZnlpbmdcbiAgICBwbHVnaW5zLiBUaGUgdmlldyBpbnN0YW5jZSBjYW4gbm8gbG9uZ2VyIGJlIHVzZWQgYWZ0ZXJcbiAgICBjYWxsaW5nIHRoaXMuXG4gICAgKi9cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5yb290LmFjdGl2ZUVsZW1lbnQgPT0gdGhpcy5jb250ZW50RE9NKVxuICAgICAgICAgICAgdGhpcy5jb250ZW50RE9NLmJsdXIoKTtcbiAgICAgICAgZm9yIChsZXQgcGx1Z2luIG9mIHRoaXMucGx1Z2lucylcbiAgICAgICAgICAgIHBsdWdpbi5kZXN0cm95KHRoaXMpO1xuICAgICAgICB0aGlzLnBsdWdpbnMgPSBbXTtcbiAgICAgICAgdGhpcy5pbnB1dFN0YXRlLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5kb2NWaWV3LmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5kb20ucmVtb3ZlKCk7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIuZGVzdHJveSgpO1xuICAgICAgICBpZiAodGhpcy5tZWFzdXJlU2NoZWR1bGVkID4gLTEpXG4gICAgICAgICAgICB0aGlzLndpbi5jYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLm1lYXN1cmVTY2hlZHVsZWQpO1xuICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgIFJldHVybnMgYW4gZWZmZWN0IHRoYXQgY2FuIGJlXG4gICAgW2FkZGVkXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLlRyYW5zYWN0aW9uU3BlYy5lZmZlY3RzKSB0byBhIHRyYW5zYWN0aW9uIHRvXG4gICAgY2F1c2UgaXQgdG8gc2Nyb2xsIHRoZSBnaXZlbiBwb3NpdGlvbiBvciByYW5nZSBpbnRvIHZpZXcuXG4gICAgKi9cbiAgICBzdGF0aWMgc2Nyb2xsSW50b1ZpZXcocG9zLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgcmV0dXJuIHNjcm9sbEludG9WaWV3Lm9mKG5ldyBTY3JvbGxUYXJnZXQodHlwZW9mIHBvcyA9PSBcIm51bWJlclwiID8gc3RhdGUuRWRpdG9yU2VsZWN0aW9uLmN1cnNvcihwb3MpIDogcG9zLCBvcHRpb25zLnksIG9wdGlvbnMueCwgb3B0aW9ucy55TWFyZ2luLCBvcHRpb25zLnhNYXJnaW4pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgUmV0dXJuIGFuIGVmZmVjdCB0aGF0IHJlc2V0cyB0aGUgZWRpdG9yIHRvIGl0cyBjdXJyZW50IChhdCB0aGVcbiAgICB0aW1lIHRoaXMgbWV0aG9kIHdhcyBjYWxsZWQpIHNjcm9sbCBwb3NpdGlvbi4gTm90ZSB0aGF0IHRoaXNcbiAgICBvbmx5IGFmZmVjdHMgdGhlIGVkaXRvcidzIG93biBzY3JvbGxhYmxlIGVsZW1lbnQsIG5vdCBwYXJlbnRzLlxuICAgIFNlZSBhbHNvXG4gICAgW2BFZGl0b3JWaWV3Q29uZmlnLnNjcm9sbFRvYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyN2aWV3LkVkaXRvclZpZXdDb25maWcuc2Nyb2xsVG8pLlxuICAgIFxuICAgIFRoZSBlZmZlY3Qgc2hvdWxkIGJlIHVzZWQgd2l0aCBhIGRvY3VtZW50IGlkZW50aWNhbCB0byB0aGUgb25lXG4gICAgaXQgd2FzIGNyZWF0ZWQgZm9yLiBGYWlsaW5nIHRvIGRvIHNvIGlzIG5vdCBhbiBlcnJvciwgYnV0IG1heVxuICAgIG5vdCBzY3JvbGwgdG8gdGhlIGV4cGVjdGVkIHBvc2l0aW9uLiBZb3UgY2FuXG4gICAgW21hcF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5TdGF0ZUVmZmVjdC5tYXApIHRoZSBlZmZlY3QgdG8gYWNjb3VudCBmb3IgY2hhbmdlcy5cbiAgICAqL1xuICAgIHNjcm9sbFNuYXBzaG90KCkge1xuICAgICAgICBsZXQgeyBzY3JvbGxUb3AsIHNjcm9sbExlZnQgfSA9IHRoaXMuc2Nyb2xsRE9NO1xuICAgICAgICBsZXQgcmVmID0gdGhpcy52aWV3U3RhdGUuc2Nyb2xsQW5jaG9yQXQoc2Nyb2xsVG9wKTtcbiAgICAgICAgcmV0dXJuIHNjcm9sbEludG9WaWV3Lm9mKG5ldyBTY3JvbGxUYXJnZXQoc3RhdGUuRWRpdG9yU2VsZWN0aW9uLmN1cnNvcihyZWYuZnJvbSksIFwic3RhcnRcIiwgXCJzdGFydFwiLCByZWYudG9wIC0gc2Nyb2xsVG9wLCBzY3JvbGxMZWZ0LCB0cnVlKSk7XG4gICAgfVxuICAgIC8qKlxuICAgIEVuYWJsZSBvciBkaXNhYmxlIHRhYi1mb2N1cyBtb2RlLCB3aGljaCBkaXNhYmxlcyBrZXkgYmluZGluZ3NcbiAgICBmb3IgVGFiIGFuZCBTaGlmdC1UYWIsIGxldHRpbmcgdGhlIGJyb3dzZXIncyBkZWZhdWx0XG4gICAgZm9jdXMtY2hhbmdpbmcgYmVoYXZpb3IgZ28gdGhyb3VnaCBpbnN0ZWFkLiBUaGlzIGlzIHVzZWZ1bCB0b1xuICAgIHByZXZlbnQgdHJhcHBpbmcga2V5Ym9hcmQgdXNlcnMgaW4geW91ciBlZGl0b3IuXG4gICAgXG4gICAgV2l0aG91dCBhcmd1bWVudCwgdGhpcyB0b2dnbGVzIHRoZSBtb2RlLiBXaXRoIGEgYm9vbGVhbiwgaXRcbiAgICBlbmFibGVzICh0cnVlKSBvciBkaXNhYmxlcyBpdCAoZmFsc2UpLiBHaXZlbiBhIG51bWJlciwgaXRcbiAgICB0ZW1wb3JhcmlseSBlbmFibGVzIHRoZSBtb2RlIHVudGlsIHRoYXQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kc1xuICAgIGhhdmUgcGFzc2VkIG9yIGFub3RoZXIgbm9uLVRhYiBrZXkgaXMgcHJlc3NlZC5cbiAgICAqL1xuICAgIHNldFRhYkZvY3VzTW9kZSh0bykge1xuICAgICAgICBpZiAodG8gPT0gbnVsbClcbiAgICAgICAgICAgIHRoaXMuaW5wdXRTdGF0ZS50YWJGb2N1c01vZGUgPSB0aGlzLmlucHV0U3RhdGUudGFiRm9jdXNNb2RlIDwgMCA/IDAgOiAtMTtcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHRvID09IFwiYm9vbGVhblwiKVxuICAgICAgICAgICAgdGhpcy5pbnB1dFN0YXRlLnRhYkZvY3VzTW9kZSA9IHRvID8gMCA6IC0xO1xuICAgICAgICBlbHNlIGlmICh0aGlzLmlucHV0U3RhdGUudGFiRm9jdXNNb2RlICE9IDApXG4gICAgICAgICAgICB0aGlzLmlucHV0U3RhdGUudGFiRm9jdXNNb2RlID0gRGF0ZS5ub3coKSArIHRvO1xuICAgIH1cbiAgICAvKipcbiAgICBSZXR1cm5zIGFuIGV4dGVuc2lvbiB0aGF0IGNhbiBiZSB1c2VkIHRvIGFkZCBET00gZXZlbnQgaGFuZGxlcnMuXG4gICAgVGhlIHZhbHVlIHNob3VsZCBiZSBhbiBvYmplY3QgbWFwcGluZyBldmVudCBuYW1lcyB0byBoYW5kbGVyXG4gICAgZnVuY3Rpb25zLiBGb3IgYW55IGdpdmVuIGV2ZW50LCBzdWNoIGZ1bmN0aW9ucyBhcmUgb3JkZXJlZCBieVxuICAgIGV4dGVuc2lvbiBwcmVjZWRlbmNlLCBhbmQgdGhlIGZpcnN0IGhhbmRsZXIgdG8gcmV0dXJuIHRydWUgd2lsbFxuICAgIGJlIGFzc3VtZWQgdG8gaGF2ZSBoYW5kbGVkIHRoYXQgZXZlbnQsIGFuZCBubyBvdGhlciBoYW5kbGVycyBvclxuICAgIGJ1aWx0LWluIGJlaGF2aW9yIHdpbGwgYmUgYWN0aXZhdGVkIGZvciBpdC4gVGhlc2UgYXJlIHJlZ2lzdGVyZWRcbiAgICBvbiB0aGUgW2NvbnRlbnQgZWxlbWVudF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyN2aWV3LkVkaXRvclZpZXcuY29udGVudERPTSksIGV4Y2VwdFxuICAgIGZvciBgc2Nyb2xsYCBoYW5kbGVycywgd2hpY2ggd2lsbCBiZSBjYWxsZWQgYW55IHRpbWUgdGhlXG4gICAgZWRpdG9yJ3MgW3Njcm9sbCBlbGVtZW50XShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3ZpZXcuRWRpdG9yVmlldy5zY3JvbGxET00pIG9yIG9uZSBvZlxuICAgIGl0cyBwYXJlbnQgbm9kZXMgaXMgc2Nyb2xsZWQuXG4gICAgKi9cbiAgICBzdGF0aWMgZG9tRXZlbnRIYW5kbGVycyhoYW5kbGVycykge1xuICAgICAgICByZXR1cm4gVmlld1BsdWdpbi5kZWZpbmUoKCkgPT4gKHt9KSwgeyBldmVudEhhbmRsZXJzOiBoYW5kbGVycyB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ3JlYXRlIGFuIGV4dGVuc2lvbiB0aGF0IHJlZ2lzdGVycyBET00gZXZlbnQgb2JzZXJ2ZXJzLiBDb250cmFyeVxuICAgIHRvIGV2ZW50IFtoYW5kbGVyc10oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyN2aWV3LkVkaXRvclZpZXdeZG9tRXZlbnRIYW5kbGVycyksXG4gICAgb2JzZXJ2ZXJzIGNhbid0IGJlIHByZXZlbnRlZCBmcm9tIHJ1bm5pbmcgYnkgYSBoaWdoZXItcHJlY2VkZW5jZVxuICAgIGhhbmRsZXIgcmV0dXJuaW5nIHRydWUuIFRoZXkgYWxzbyBkb24ndCBwcmV2ZW50IG90aGVyIGhhbmRsZXJzXG4gICAgYW5kIG9ic2VydmVycyBmcm9tIHJ1bm5pbmcgd2hlbiB0aGV5IHJldHVybiB0cnVlLCBhbmQgc2hvdWxkIG5vdFxuICAgIGNhbGwgYHByZXZlbnREZWZhdWx0YC5cbiAgICAqL1xuICAgIHN0YXRpYyBkb21FdmVudE9ic2VydmVycyhvYnNlcnZlcnMpIHtcbiAgICAgICAgcmV0dXJuIFZpZXdQbHVnaW4uZGVmaW5lKCgpID0+ICh7fSksIHsgZXZlbnRPYnNlcnZlcnM6IG9ic2VydmVycyB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgdGhlbWUgZXh0ZW5zaW9uLiBUaGUgZmlyc3QgYXJndW1lbnQgY2FuIGJlIGFcbiAgICBbYHN0eWxlLW1vZGBdKGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJpam5oL3N0eWxlLW1vZCNkb2N1bWVudGF0aW9uKVxuICAgIHN0eWxlIHNwZWMgcHJvdmlkaW5nIHRoZSBzdHlsZXMgZm9yIHRoZSB0aGVtZS4gVGhlc2Ugd2lsbCBiZVxuICAgIHByZWZpeGVkIHdpdGggYSBnZW5lcmF0ZWQgY2xhc3MgZm9yIHRoZSBzdHlsZS5cbiAgICBcbiAgICBCZWNhdXNlIHRoZSBzZWxlY3RvcnMgd2lsbCBiZSBwcmVmaXhlZCB3aXRoIGEgc2NvcGUgY2xhc3MsIHJ1bGVcbiAgICB0aGF0IGRpcmVjdGx5IG1hdGNoIHRoZSBlZGl0b3IncyBbd3JhcHBlclxuICAgIGVsZW1lbnRdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jdmlldy5FZGl0b3JWaWV3LmRvbSnigJR0byB3aGljaCB0aGUgc2NvcGUgY2xhc3Mgd2lsbCBiZVxuICAgIGFkZGVk4oCUbmVlZCB0byBiZSBleHBsaWNpdGx5IGRpZmZlcmVudGlhdGVkIGJ5IGFkZGluZyBhbiBgJmAgdG9cbiAgICB0aGUgc2VsZWN0b3IgZm9yIHRoYXQgZWxlbWVudOKAlGZvciBleGFtcGxlXG4gICAgYCYuY20tZm9jdXNlZGAuXG4gICAgXG4gICAgV2hlbiBgZGFya2AgaXMgc2V0IHRvIHRydWUsIHRoZSB0aGVtZSB3aWxsIGJlIG1hcmtlZCBhcyBkYXJrLFxuICAgIHdoaWNoIHdpbGwgY2F1c2UgdGhlIGAmZGFya2AgcnVsZXMgZnJvbSBbYmFzZVxuICAgIHRoZW1lc10oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyN2aWV3LkVkaXRvclZpZXdeYmFzZVRoZW1lKSB0byBiZSB1c2VkIChhcyBvcHBvc2VkIHRvXG4gICAgYCZsaWdodGAgd2hlbiBhIGxpZ2h0IHRoZW1lIGlzIGFjdGl2ZSkuXG4gICAgKi9cbiAgICBzdGF0aWMgdGhlbWUoc3BlYywgb3B0aW9ucykge1xuICAgICAgICBsZXQgcHJlZml4ID0gc3R5bGVNb2QuU3R5bGVNb2R1bGUubmV3TmFtZSgpO1xuICAgICAgICBsZXQgcmVzdWx0ID0gW3RoZW1lLm9mKHByZWZpeCksIHN0eWxlTW9kdWxlLm9mKGJ1aWxkVGhlbWUoYC4ke3ByZWZpeH1gLCBzcGVjKSldO1xuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmRhcmspXG4gICAgICAgICAgICByZXN1bHQucHVzaChkYXJrVGhlbWUub2YodHJ1ZSkpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICBDcmVhdGUgYW4gZXh0ZW5zaW9uIHRoYXQgYWRkcyBzdHlsZXMgdG8gdGhlIGJhc2UgdGhlbWUuIExpa2VcbiAgICB3aXRoIFtgdGhlbWVgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3ZpZXcuRWRpdG9yVmlld150aGVtZSksIHVzZSBgJmAgdG8gaW5kaWNhdGUgdGhlXG4gICAgcGxhY2Ugb2YgdGhlIGVkaXRvciB3cmFwcGVyIGVsZW1lbnQgd2hlbiBkaXJlY3RseSB0YXJnZXRpbmdcbiAgICB0aGF0LiBZb3UgY2FuIGFsc28gdXNlIGAmZGFya2Agb3IgYCZsaWdodGAgaW5zdGVhZCB0byBvbmx5XG4gICAgdGFyZ2V0IGVkaXRvcnMgd2l0aCBhIGRhcmsgb3IgbGlnaHQgdGhlbWUuXG4gICAgKi9cbiAgICBzdGF0aWMgYmFzZVRoZW1lKHNwZWMpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlLlByZWMubG93ZXN0KHN0eWxlTW9kdWxlLm9mKGJ1aWxkVGhlbWUoXCIuXCIgKyBiYXNlVGhlbWVJRCwgc3BlYywgbGlnaHREYXJrSURzKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICBSZXRyaWV2ZSBhbiBlZGl0b3IgdmlldyBpbnN0YW5jZSBmcm9tIHRoZSB2aWV3J3MgRE9NXG4gICAgcmVwcmVzZW50YXRpb24uXG4gICAgKi9cbiAgICBzdGF0aWMgZmluZEZyb21ET00oZG9tKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgbGV0IGNvbnRlbnQgPSBkb20ucXVlcnlTZWxlY3RvcihcIi5jbS1jb250ZW50XCIpO1xuICAgICAgICBsZXQgY1ZpZXcgPSBjb250ZW50ICYmIENvbnRlbnRWaWV3LmdldChjb250ZW50KSB8fCBDb250ZW50Vmlldy5nZXQoZG9tKTtcbiAgICAgICAgcmV0dXJuICgoX2EgPSBjVmlldyA9PT0gbnVsbCB8fCBjVmlldyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY1ZpZXcucm9vdFZpZXcpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS52aWV3KSB8fCBudWxsO1xuICAgIH1cbn1cbi8qKlxuRmFjZXQgdG8gYWRkIGEgW3N0eWxlXG5tb2R1bGVdKGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJpam5oL3N0eWxlLW1vZCNkb2N1bWVudGF0aW9uKSB0b1xuYW4gZWRpdG9yIHZpZXcuIFRoZSB2aWV3IHdpbGwgZW5zdXJlIHRoYXQgdGhlIG1vZHVsZSBpc1xubW91bnRlZCBpbiBpdHMgW2RvY3VtZW50XG5yb290XShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3ZpZXcuRWRpdG9yVmlldy5jb25zdHJ1Y3Rvcl5jb25maWcucm9vdCkuXG4qL1xuRWRpdG9yVmlldy5zdHlsZU1vZHVsZSA9IHN0eWxlTW9kdWxlO1xuLyoqXG5BbiBpbnB1dCBoYW5kbGVyIGNhbiBvdmVycmlkZSB0aGUgd2F5IGNoYW5nZXMgdG8gdGhlIGVkaXRhYmxlXG5ET00gY29udGVudCBhcmUgaGFuZGxlZC4gSGFuZGxlcnMgYXJlIHBhc3NlZCB0aGUgZG9jdW1lbnRcbnBvc2l0aW9ucyBiZXR3ZWVuIHdoaWNoIHRoZSBjaGFuZ2Ugd2FzIGZvdW5kLCBhbmQgdGhlIG5ld1xuY29udGVudC4gV2hlbiBvbmUgcmV0dXJucyB0cnVlLCBubyBmdXJ0aGVyIGlucHV0IGhhbmRsZXJzIGFyZVxuY2FsbGVkIGFuZCB0aGUgZGVmYXVsdCBiZWhhdmlvciBpcyBwcmV2ZW50ZWQuXG5cblRoZSBgaW5zZXJ0YCBhcmd1bWVudCBjYW4gYmUgdXNlZCB0byBnZXQgdGhlIGRlZmF1bHQgdHJhbnNhY3Rpb25cbnRoYXQgd291bGQgYmUgYXBwbGllZCBmb3IgdGhpcyBpbnB1dC4gVGhpcyBjYW4gYmUgdXNlZnVsIHdoZW5cbmRpc3BhdGNoaW5nIHRoZSBjdXN0b20gYmVoYXZpb3IgYXMgYSBzZXBhcmF0ZSB0cmFuc2FjdGlvbi5cbiovXG5FZGl0b3JWaWV3LmlucHV0SGFuZGxlciA9IGlucHV0SGFuZGxlcjtcbi8qKlxuU2Nyb2xsIGhhbmRsZXJzIGNhbiBvdmVycmlkZSBob3cgdGhpbmdzIGFyZSBzY3JvbGxlZCBpbnRvIHZpZXcuXG5JZiB0aGV5IHJldHVybiBgdHJ1ZWAsIG5vIGZ1cnRoZXIgaGFuZGxpbmcgaGFwcGVucyBmb3IgdGhlXG5zY3JvbGxpbmcuIElmIHRoZXkgcmV0dXJuIGZhbHNlLCB0aGUgZGVmYXVsdCBzY3JvbGwgYmVoYXZpb3IgaXNcbmFwcGxpZWQuIFNjcm9sbCBoYW5kbGVycyBzaG91bGQgbmV2ZXIgaW5pdGlhdGUgZWRpdG9yIHVwZGF0ZXMuXG4qL1xuRWRpdG9yVmlldy5zY3JvbGxIYW5kbGVyID0gc2Nyb2xsSGFuZGxlcjtcbi8qKlxuVGhpcyBmYWNldCBjYW4gYmUgdXNlZCB0byBwcm92aWRlIGZ1bmN0aW9ucyB0aGF0IGNyZWF0ZSBlZmZlY3RzXG50byBiZSBkaXNwYXRjaGVkIHdoZW4gdGhlIGVkaXRvcidzIGZvY3VzIHN0YXRlIGNoYW5nZXMuXG4qL1xuRWRpdG9yVmlldy5mb2N1c0NoYW5nZUVmZmVjdCA9IGZvY3VzQ2hhbmdlRWZmZWN0O1xuLyoqXG5CeSBkZWZhdWx0LCB0aGUgZWRpdG9yIGFzc3VtZXMgYWxsIGl0cyBjb250ZW50IGhhcyB0aGUgc2FtZVxuW3RleHQgZGlyZWN0aW9uXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3ZpZXcuRGlyZWN0aW9uKS4gQ29uZmlndXJlIHRoaXMgd2l0aCBhIGB0cnVlYFxudmFsdWUgdG8gbWFrZSBpdCByZWFkIHRoZSB0ZXh0IGRpcmVjdGlvbiBvZiBldmVyeSAocmVuZGVyZWQpXG5saW5lIHNlcGFyYXRlbHkuXG4qL1xuRWRpdG9yVmlldy5wZXJMaW5lVGV4dERpcmVjdGlvbiA9IHBlckxpbmVUZXh0RGlyZWN0aW9uO1xuLyoqXG5BbGxvd3MgeW91IHRvIHByb3ZpZGUgYSBmdW5jdGlvbiB0aGF0IHNob3VsZCBiZSBjYWxsZWQgd2hlbiB0aGVcbmxpYnJhcnkgY2F0Y2hlcyBhbiBleGNlcHRpb24gZnJvbSBhbiBleHRlbnNpb24gKG1vc3RseSBmcm9tIHZpZXdcbnBsdWdpbnMsIGJ1dCBtYXkgYmUgdXNlZCBieSBvdGhlciBleHRlbnNpb25zIHRvIHJvdXRlIGV4Y2VwdGlvbnNcbmZyb20gdXNlci1jb2RlLXByb3ZpZGVkIGNhbGxiYWNrcykuIFRoaXMgaXMgbW9zdGx5IHVzZWZ1bCBmb3JcbmRlYnVnZ2luZyBhbmQgbG9nZ2luZy4gU2VlIFtgbG9nRXhjZXB0aW9uYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyN2aWV3LmxvZ0V4Y2VwdGlvbikuXG4qL1xuRWRpdG9yVmlldy5leGNlcHRpb25TaW5rID0gZXhjZXB0aW9uU2luaztcbi8qKlxuQSBmYWNldCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlZ2lzdGVyIGEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkXG5ldmVyeSB0aW1lIHRoZSB2aWV3IHVwZGF0ZXMuXG4qL1xuRWRpdG9yVmlldy51cGRhdGVMaXN0ZW5lciA9IHVwZGF0ZUxpc3RlbmVyO1xuLyoqXG5GYWNldCB0aGF0IGNvbnRyb2xzIHdoZXRoZXIgdGhlIGVkaXRvciBjb250ZW50IERPTSBpcyBlZGl0YWJsZS5cbldoZW4gaXRzIGhpZ2hlc3QtcHJlY2VkZW5jZSB2YWx1ZSBpcyBgZmFsc2VgLCB0aGUgZWxlbWVudCB3aWxsXG5ub3QgaGF2ZSBpdHMgYGNvbnRlbnRlZGl0YWJsZWAgYXR0cmlidXRlIHNldC4gKE5vdGUgdGhhdCB0aGlzXG5kb2Vzbid0IGFmZmVjdCBBUEkgY2FsbHMgdGhhdCBjaGFuZ2UgdGhlIGVkaXRvciBjb250ZW50LCBldmVuXG53aGVuIHRob3NlIGFyZSBib3VuZCB0byBrZXlzIG9yIGJ1dHRvbnMuIFNlZSB0aGVcbltgcmVhZE9ubHlgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLkVkaXRvclN0YXRlLnJlYWRPbmx5KSBmYWNldCBmb3IgdGhhdC4pXG4qL1xuRWRpdG9yVmlldy5lZGl0YWJsZSA9IGVkaXRhYmxlO1xuLyoqXG5BbGxvd3MgeW91IHRvIGluZmx1ZW5jZSB0aGUgd2F5IG1vdXNlIHNlbGVjdGlvbiBoYXBwZW5zLiBUaGVcbmZ1bmN0aW9ucyBpbiB0aGlzIGZhY2V0IHdpbGwgYmUgY2FsbGVkIGZvciBhIGBtb3VzZWRvd25gIGV2ZW50XG5vbiB0aGUgZWRpdG9yLCBhbmQgY2FuIHJldHVybiBhbiBvYmplY3QgdGhhdCBvdmVycmlkZXMgdGhlIHdheSBhXG5zZWxlY3Rpb24gaXMgY29tcHV0ZWQgZnJvbSB0aGF0IG1vdXNlIGNsaWNrIG9yIGRyYWcuXG4qL1xuRWRpdG9yVmlldy5tb3VzZVNlbGVjdGlvblN0eWxlID0gbW91c2VTZWxlY3Rpb25TdHlsZTtcbi8qKlxuRmFjZXQgdXNlZCB0byBjb25maWd1cmUgd2hldGhlciBhIGdpdmVuIHNlbGVjdGlvbiBkcmFnIGV2ZW50XG5zaG91bGQgbW92ZSBvciBjb3B5IHRoZSBzZWxlY3Rpb24uIFRoZSBnaXZlbiBwcmVkaWNhdGUgd2lsbCBiZVxuY2FsbGVkIHdpdGggdGhlIGBtb3VzZWRvd25gIGV2ZW50LCBhbmQgY2FuIHJldHVybiBgdHJ1ZWAgd2hlblxudGhlIGRyYWcgc2hvdWxkIG1vdmUgdGhlIGNvbnRlbnQuXG4qL1xuRWRpdG9yVmlldy5kcmFnTW92ZXNTZWxlY3Rpb24gPSBkcmFnTW92ZXNTZWxlY3Rpb24kMTtcbi8qKlxuRmFjZXQgdXNlZCB0byBjb25maWd1cmUgd2hldGhlciBhIGdpdmVuIHNlbGVjdGluZyBjbGljayBhZGRzIGFcbm5ldyByYW5nZSB0byB0aGUgZXhpc3Rpbmcgc2VsZWN0aW9uIG9yIHJlcGxhY2VzIGl0IGVudGlyZWx5LiBUaGVcbmRlZmF1bHQgYmVoYXZpb3IgaXMgdG8gY2hlY2sgYGV2ZW50Lm1ldGFLZXlgIG9uIG1hY09TLCBhbmRcbmBldmVudC5jdHJsS2V5YCBlbHNld2hlcmUuXG4qL1xuRWRpdG9yVmlldy5jbGlja0FkZHNTZWxlY3Rpb25SYW5nZSA9IGNsaWNrQWRkc1NlbGVjdGlvblJhbmdlO1xuLyoqXG5BIGZhY2V0IHRoYXQgZGV0ZXJtaW5lcyB3aGljaCBbZGVjb3JhdGlvbnNdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jdmlldy5EZWNvcmF0aW9uKVxuYXJlIHNob3duIGluIHRoZSB2aWV3LiBEZWNvcmF0aW9ucyBjYW4gYmUgcHJvdmlkZWQgaW4gdHdvXG53YXlz4oCUZGlyZWN0bHksIG9yIHZpYSBhIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYW4gZWRpdG9yIHZpZXcuXG5cbk9ubHkgZGVjb3JhdGlvbiBzZXRzIHByb3ZpZGVkIGRpcmVjdGx5IGFyZSBhbGxvd2VkIHRvIGluZmx1ZW5jZVxudGhlIGVkaXRvcidzIHZlcnRpY2FsIGxheW91dCBzdHJ1Y3R1cmUuIFRoZSBvbmVzIHByb3ZpZGVkIGFzXG5mdW5jdGlvbnMgYXJlIGNhbGxlZCBfYWZ0ZXJfIHRoZSBuZXcgdmlld3BvcnQgaGFzIGJlZW4gY29tcHV0ZWQsXG5hbmQgdGh1cyAqKm11c3Qgbm90KiogaW50cm9kdWNlIGJsb2NrIHdpZGdldHMgb3IgcmVwbGFjaW5nXG5kZWNvcmF0aW9ucyB0aGF0IGNvdmVyIGxpbmUgYnJlYWtzLlxuXG5JZiB5b3Ugd2FudCBkZWNvcmF0ZWQgcmFuZ2VzIHRvIGJlaGF2ZSBsaWtlIGF0b21pYyB1bml0cyBmb3JcbmN1cnNvciBtb3Rpb24gYW5kIGRlbGV0aW9uIHB1cnBvc2VzLCBhbHNvIHByb3ZpZGUgdGhlIHJhbmdlIHNldFxuY29udGFpbmluZyB0aGUgZGVjb3JhdGlvbnMgdG9cbltgRWRpdG9yVmlldy5hdG9taWNSYW5nZXNgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3ZpZXcuRWRpdG9yVmlld15hdG9taWNSYW5nZXMpLlxuKi9cbkVkaXRvclZpZXcuZGVjb3JhdGlvbnMgPSBkZWNvcmF0aW9ucztcbi8qKlxuRmFjZXQgdGhhdCB3b3JrcyBtdWNoIGxpa2VcbltgZGVjb3JhdGlvbnNgXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3ZpZXcuRWRpdG9yVmlld15kZWNvcmF0aW9ucyksIGJ1dCBwdXRzIGl0c1xuaW5wdXRzIGF0IHRoZSB2ZXJ5IGJvdHRvbSBvZiB0aGUgcHJlY2VkZW5jZSBzdGFjaywgbWVhbmluZyBtYXJrXG5kZWNvcmF0aW9ucyBwcm92aWRlZCBoZXJlIHdpbGwgb25seSBiZSBzcGxpdCBieSBvdGhlciwgcGFydGlhbGx5XG5vdmVybGFwcGluZyBcXGBvdXRlckRlY29yYXRpb25zXFxgIHJhbmdlcywgYW5kIHdyYXAgYXJvdW5kIGFsbFxucmVndWxhciBkZWNvcmF0aW9ucy4gVXNlIHRoaXMgZm9yIG1hcmsgZWxlbWVudHMgdGhhdCBzaG91bGQsIGFzXG5tdWNoIGFzIHBvc3NpYmxlLCByZW1haW4gaW4gb25lIHBpZWNlLlxuKi9cbkVkaXRvclZpZXcub3V0ZXJEZWNvcmF0aW9ucyA9IG91dGVyRGVjb3JhdGlvbnM7XG4vKipcblVzZWQgdG8gcHJvdmlkZSByYW5nZXMgdGhhdCBzaG91bGQgYmUgdHJlYXRlZCBhcyBhdG9tcyBhcyBmYXIgYXNcbmN1cnNvciBtb3Rpb24gaXMgY29uY2VybmVkLiBUaGlzIGNhdXNlcyBtZXRob2RzIGxpa2VcbltgbW92ZUJ5Q2hhcmBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jdmlldy5FZGl0b3JWaWV3Lm1vdmVCeUNoYXIpIGFuZFxuW2Btb3ZlVmVydGljYWxseWBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jdmlldy5FZGl0b3JWaWV3Lm1vdmVWZXJ0aWNhbGx5KSAoYW5kIHRoZVxuY29tbWFuZHMgYnVpbHQgb24gdG9wIG9mIHRoZW0pIHRvIHNraXAgYWNyb3NzIHN1Y2ggcmVnaW9ucyB3aGVuXG5hIHNlbGVjdGlvbiBlbmRwb2ludCB3b3VsZCBlbnRlciB0aGVtLiBUaGlzIGRvZXMgX25vdF8gcHJldmVudFxuZGlyZWN0IHByb2dyYW1tYXRpYyBbc2VsZWN0aW9uXG51cGRhdGVzXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3N0YXRlLlRyYW5zYWN0aW9uU3BlYy5zZWxlY3Rpb24pIGZyb20gbW92aW5nIGludG8gc3VjaFxucmVnaW9ucy5cbiovXG5FZGl0b3JWaWV3LmF0b21pY1JhbmdlcyA9IGF0b21pY1Jhbmdlcztcbi8qKlxuV2hlbiByYW5nZSBkZWNvcmF0aW9ucyBhZGQgYSBgdW5pY29kZS1iaWRpOiBpc29sYXRlYCBzdHlsZSwgdGhleVxuc2hvdWxkIGFsc28gaW5jbHVkZSBhXG5bYGJpZGlJc29sYXRlYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyN2aWV3Lk1hcmtEZWNvcmF0aW9uU3BlYy5iaWRpSXNvbGF0ZSkgcHJvcGVydHlcbmluIHRoZWlyIGRlY29yYXRpb24gc3BlYywgYW5kIGJlIGV4cG9zZWQgdGhyb3VnaCB0aGlzIGZhY2V0LCBzb1xudGhhdCB0aGUgZWRpdG9yIGNhbiBjb21wdXRlIHRoZSBwcm9wZXIgdGV4dCBvcmRlci4gKE90aGVyIHZhbHVlc1xuZm9yIGB1bmljb2RlLWJpZGlgLCBleGNlcHQgb2YgY291cnNlIGBub3JtYWxgLCBhcmUgbm90XG5zdXBwb3J0ZWQuKVxuKi9cbkVkaXRvclZpZXcuYmlkaUlzb2xhdGVkUmFuZ2VzID0gYmlkaUlzb2xhdGVkUmFuZ2VzO1xuLyoqXG5GYWNldCB0aGF0IGFsbG93cyBleHRlbnNpb25zIHRvIHByb3ZpZGUgYWRkaXRpb25hbCBzY3JvbGxcbm1hcmdpbnMgKHNwYWNlIGFyb3VuZCB0aGUgc2lkZXMgb2YgdGhlIHNjcm9sbGluZyBlbGVtZW50IHRoYXRcbnNob3VsZCBiZSBjb25zaWRlcmVkIGludmlzaWJsZSkuIFRoaXMgY2FuIGJlIHVzZWZ1bCB3aGVuIHRoZVxucGx1Z2luIGludHJvZHVjZXMgZWxlbWVudHMgdGhhdCBjb3ZlciBwYXJ0IG9mIHRoYXQgZWxlbWVudCAoZm9yXG5leGFtcGxlIGEgaG9yaXpvbnRhbGx5IGZpeGVkIGd1dHRlcikuXG4qL1xuRWRpdG9yVmlldy5zY3JvbGxNYXJnaW5zID0gc2Nyb2xsTWFyZ2lucztcbi8qKlxuVGhpcyBmYWNldCByZWNvcmRzIHdoZXRoZXIgYSBkYXJrIHRoZW1lIGlzIGFjdGl2ZS4gVGhlIGV4dGVuc2lvblxucmV0dXJuZWQgYnkgW2B0aGVtZWBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jdmlldy5FZGl0b3JWaWV3XnRoZW1lKSBhdXRvbWF0aWNhbGx5XG5pbmNsdWRlcyBhbiBpbnN0YW5jZSBvZiB0aGlzIHdoZW4gdGhlIGBkYXJrYCBvcHRpb24gaXMgc2V0IHRvXG50cnVlLlxuKi9cbkVkaXRvclZpZXcuZGFya1RoZW1lID0gZGFya1RoZW1lO1xuLyoqXG5Qcm92aWRlcyBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IG5vbmNlIHRvIHVzZSB3aGVuIGNyZWF0aW5nXG50aGUgc3R5bGUgc2hlZXRzIGZvciB0aGUgZWRpdG9yLiBIb2xkcyB0aGUgZW1wdHkgc3RyaW5nIHdoZW4gbm9cbm5vbmNlIGhhcyBiZWVuIHByb3ZpZGVkLlxuKi9cbkVkaXRvclZpZXcuY3NwTm9uY2UgPSBzdGF0ZS5GYWNldC5kZWZpbmUoeyBjb21iaW5lOiB2YWx1ZXMgPT4gdmFsdWVzLmxlbmd0aCA/IHZhbHVlc1swXSA6IFwiXCIgfSk7XG4vKipcbkZhY2V0IHRoYXQgcHJvdmlkZXMgYWRkaXRpb25hbCBET00gYXR0cmlidXRlcyBmb3IgdGhlIGVkaXRvcidzXG5lZGl0YWJsZSBET00gZWxlbWVudC5cbiovXG5FZGl0b3JWaWV3LmNvbnRlbnRBdHRyaWJ1dGVzID0gY29udGVudEF0dHJpYnV0ZXM7XG4vKipcbkZhY2V0IHRoYXQgcHJvdmlkZXMgRE9NIGF0dHJpYnV0ZXMgZm9yIHRoZSBlZGl0b3IncyBvdXRlclxuZWxlbWVudC5cbiovXG5FZGl0b3JWaWV3LmVkaXRvckF0dHJpYnV0ZXMgPSBlZGl0b3JBdHRyaWJ1dGVzO1xuLyoqXG5BbiBleHRlbnNpb24gdGhhdCBlbmFibGVzIGxpbmUgd3JhcHBpbmcgaW4gdGhlIGVkaXRvciAoYnlcbnNldHRpbmcgQ1NTIGB3aGl0ZS1zcGFjZWAgdG8gYHByZS13cmFwYCBpbiB0aGUgY29udGVudCkuXG4qL1xuRWRpdG9yVmlldy5saW5lV3JhcHBpbmcgPSBFZGl0b3JWaWV3LmNvbnRlbnRBdHRyaWJ1dGVzLm9mKHsgXCJjbGFzc1wiOiBcImNtLWxpbmVXcmFwcGluZ1wiIH0pO1xuLyoqXG5TdGF0ZSBlZmZlY3QgdXNlZCB0byBpbmNsdWRlIHNjcmVlbiByZWFkZXIgYW5ub3VuY2VtZW50cyBpbiBhXG50cmFuc2FjdGlvbi4gVGhlc2Ugd2lsbCBiZSBhZGRlZCB0byB0aGUgRE9NIGluIGEgdmlzdWFsbHkgaGlkZGVuXG5lbGVtZW50IHdpdGggYGFyaWEtbGl2ZT1cInBvbGl0ZVwiYCBzZXQsIGFuZCBzaG91bGQgYmUgdXNlZCB0b1xuZGVzY3JpYmUgZWZmZWN0cyB0aGF0IGFyZSB2aXN1YWxseSBvYnZpb3VzIGJ1dCBtYXkgbm90IGJlXG5ub3RpY2VkIGJ5IHNjcmVlbiByZWFkZXIgdXNlcnMgKHN1Y2ggYXMgbW92aW5nIHRvIHRoZSBuZXh0XG5zZWFyY2ggbWF0Y2gpLlxuKi9cbkVkaXRvclZpZXcuYW5ub3VuY2UgPSBzdGF0ZS5TdGF0ZUVmZmVjdC5kZWZpbmUoKTtcbi8vIE1heGltdW0gbGluZSBsZW5ndGggZm9yIHdoaWNoIHdlIGNvbXB1dGUgYWNjdXJhdGUgYmlkaSBpbmZvXG5jb25zdCBNYXhCaWRpTGluZSA9IDQwOTY7XG5jb25zdCBCYWRNZWFzdXJlID0ge307XG5jbGFzcyBDYWNoZWRPcmRlciB7XG4gICAgY29uc3RydWN0b3IoZnJvbSwgdG8sIGRpciwgaXNvbGF0ZXMsIGZyZXNoLCBvcmRlcikge1xuICAgICAgICB0aGlzLmZyb20gPSBmcm9tO1xuICAgICAgICB0aGlzLnRvID0gdG87XG4gICAgICAgIHRoaXMuZGlyID0gZGlyO1xuICAgICAgICB0aGlzLmlzb2xhdGVzID0gaXNvbGF0ZXM7XG4gICAgICAgIHRoaXMuZnJlc2ggPSBmcmVzaDtcbiAgICAgICAgdGhpcy5vcmRlciA9IG9yZGVyO1xuICAgIH1cbiAgICBzdGF0aWMgdXBkYXRlKGNhY2hlLCBjaGFuZ2VzKSB7XG4gICAgICAgIGlmIChjaGFuZ2VzLmVtcHR5ICYmICFjYWNoZS5zb21lKGMgPT4gYy5mcmVzaCkpXG4gICAgICAgICAgICByZXR1cm4gY2FjaGU7XG4gICAgICAgIGxldCByZXN1bHQgPSBbXSwgbGFzdERpciA9IGNhY2hlLmxlbmd0aCA/IGNhY2hlW2NhY2hlLmxlbmd0aCAtIDFdLmRpciA6IGV4cG9ydHMuRGlyZWN0aW9uLkxUUjtcbiAgICAgICAgZm9yIChsZXQgaSA9IE1hdGgubWF4KDAsIGNhY2hlLmxlbmd0aCAtIDEwKTsgaSA8IGNhY2hlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgZW50cnkgPSBjYWNoZVtpXTtcbiAgICAgICAgICAgIGlmIChlbnRyeS5kaXIgPT0gbGFzdERpciAmJiAhY2hhbmdlcy50b3VjaGVzUmFuZ2UoZW50cnkuZnJvbSwgZW50cnkudG8pKVxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5ldyBDYWNoZWRPcmRlcihjaGFuZ2VzLm1hcFBvcyhlbnRyeS5mcm9tLCAxKSwgY2hhbmdlcy5tYXBQb3MoZW50cnkudG8sIC0xKSwgZW50cnkuZGlyLCBlbnRyeS5pc29sYXRlcywgZmFsc2UsIGVudHJ5Lm9yZGVyKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5mdW5jdGlvbiBhdHRyc0Zyb21GYWNldCh2aWV3LCBmYWNldCwgYmFzZSkge1xuICAgIGZvciAobGV0IHNvdXJjZXMgPSB2aWV3LnN0YXRlLmZhY2V0KGZhY2V0KSwgaSA9IHNvdXJjZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgbGV0IHNvdXJjZSA9IHNvdXJjZXNbaV0sIHZhbHVlID0gdHlwZW9mIHNvdXJjZSA9PSBcImZ1bmN0aW9uXCIgPyBzb3VyY2UodmlldykgOiBzb3VyY2U7XG4gICAgICAgIGlmICh2YWx1ZSlcbiAgICAgICAgICAgIGNvbWJpbmVBdHRycyh2YWx1ZSwgYmFzZSk7XG4gICAgfVxuICAgIHJldHVybiBiYXNlO1xufVxuXG5jb25zdCBjdXJyZW50UGxhdGZvcm0gPSBicm93c2VyLm1hYyA/IFwibWFjXCIgOiBicm93c2VyLndpbmRvd3MgPyBcIndpblwiIDogYnJvd3Nlci5saW51eCA/IFwibGludXhcIiA6IFwia2V5XCI7XG5mdW5jdGlvbiBub3JtYWxpemVLZXlOYW1lKG5hbWUsIHBsYXRmb3JtKSB7XG4gICAgY29uc3QgcGFydHMgPSBuYW1lLnNwbGl0KC8tKD8hJCkvKTtcbiAgICBsZXQgcmVzdWx0ID0gcGFydHNbcGFydHMubGVuZ3RoIC0gMV07XG4gICAgaWYgKHJlc3VsdCA9PSBcIlNwYWNlXCIpXG4gICAgICAgIHJlc3VsdCA9IFwiIFwiO1xuICAgIGxldCBhbHQsIGN0cmwsIHNoaWZ0LCBtZXRhO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoIC0gMTsgKytpKSB7XG4gICAgICAgIGNvbnN0IG1vZCA9IHBhcnRzW2ldO1xuICAgICAgICBpZiAoL14oY21kfG1ldGF8bSkkL2kudGVzdChtb2QpKVxuICAgICAgICAgICAgbWV0YSA9IHRydWU7XG4gICAgICAgIGVsc2UgaWYgKC9eYShsdCk/JC9pLnRlc3QobW9kKSlcbiAgICAgICAgICAgIGFsdCA9IHRydWU7XG4gICAgICAgIGVsc2UgaWYgKC9eKGN8Y3RybHxjb250cm9sKSQvaS50ZXN0KG1vZCkpXG4gICAgICAgICAgICBjdHJsID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoL15zKGhpZnQpPyQvaS50ZXN0KG1vZCkpXG4gICAgICAgICAgICBzaGlmdCA9IHRydWU7XG4gICAgICAgIGVsc2UgaWYgKC9ebW9kJC9pLnRlc3QobW9kKSkge1xuICAgICAgICAgICAgaWYgKHBsYXRmb3JtID09IFwibWFjXCIpXG4gICAgICAgICAgICAgICAgbWV0YSA9IHRydWU7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgY3RybCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5yZWNvZ25pemVkIG1vZGlmaWVyIG5hbWU6IFwiICsgbW9kKTtcbiAgICB9XG4gICAgaWYgKGFsdClcbiAgICAgICAgcmVzdWx0ID0gXCJBbHQtXCIgKyByZXN1bHQ7XG4gICAgaWYgKGN0cmwpXG4gICAgICAgIHJlc3VsdCA9IFwiQ3RybC1cIiArIHJlc3VsdDtcbiAgICBpZiAobWV0YSlcbiAgICAgICAgcmVzdWx0ID0gXCJNZXRhLVwiICsgcmVzdWx0O1xuICAgIGlmIChzaGlmdClcbiAgICAgICAgcmVzdWx0ID0gXCJTaGlmdC1cIiArIHJlc3VsdDtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kaWZpZXJzKG5hbWUsIGV2ZW50LCBzaGlmdCkge1xuICAgIGlmIChldmVudC5hbHRLZXkpXG4gICAgICAgIG5hbWUgPSBcIkFsdC1cIiArIG5hbWU7XG4gICAgaWYgKGV2ZW50LmN0cmxLZXkpXG4gICAgICAgIG5hbWUgPSBcIkN0cmwtXCIgKyBuYW1lO1xuICAgIGlmIChldmVudC5tZXRhS2V5KVxuICAgICAgICBuYW1lID0gXCJNZXRhLVwiICsgbmFtZTtcbiAgICBpZiAoc2hpZnQgIT09IGZhbHNlICYmIGV2ZW50LnNoaWZ0S2V5KVxuICAgICAgICBuYW1lID0gXCJTaGlmdC1cIiArIG5hbWU7XG4gICAgcmV0dXJuIG5hbWU7XG59XG5jb25zdCBoYW5kbGVLZXlFdmVudHMgPSBzdGF0ZS5QcmVjLmRlZmF1bHQoRWRpdG9yVmlldy5kb21FdmVudEhhbmRsZXJzKHtcbiAgICBrZXlkb3duKGV2ZW50LCB2aWV3KSB7XG4gICAgICAgIHJldHVybiBydW5IYW5kbGVycyhnZXRLZXltYXAodmlldy5zdGF0ZSksIGV2ZW50LCB2aWV3LCBcImVkaXRvclwiKTtcbiAgICB9XG59KSk7XG4vKipcbkZhY2V0IHVzZWQgZm9yIHJlZ2lzdGVyaW5nIGtleW1hcHMuXG5cbllvdSBjYW4gYWRkIG11bHRpcGxlIGtleW1hcHMgdG8gYW4gZWRpdG9yLiBUaGVpciBwcmlvcml0aWVzXG5kZXRlcm1pbmUgdGhlaXIgcHJlY2VkZW5jZSAodGhlIG9uZXMgc3BlY2lmaWVkIGVhcmx5IG9yIHdpdGggaGlnaFxucHJpb3JpdHkgZ2V0IGNoZWNrZWQgZmlyc3QpLiBXaGVuIGEgaGFuZGxlciBoYXMgcmV0dXJuZWQgYHRydWVgXG5mb3IgYSBnaXZlbiBrZXksIG5vIGZ1cnRoZXIgaGFuZGxlcnMgYXJlIGNhbGxlZC5cbiovXG5jb25zdCBrZXltYXAgPSBzdGF0ZS5GYWNldC5kZWZpbmUoeyBlbmFibGVzOiBoYW5kbGVLZXlFdmVudHMgfSk7XG5jb25zdCBLZXltYXBzID0gbmV3IFdlYWtNYXAoKTtcbi8vIFRoaXMgaXMgaGlkZGVuIGJlaGluZCBhbiBpbmRpcmVjdGlvbiwgcmF0aGVyIHRoYW4gZGlyZWN0bHkgY29tcHV0ZWRcbi8vIGJ5IHRoZSBmYWNldCwgdG8ga2VlcCBpbnRlcm5hbCB0eXBlcyBvdXQgb2YgdGhlIGZhY2V0J3MgdHlwZS5cbmZ1bmN0aW9uIGdldEtleW1hcChzdGF0ZSkge1xuICAgIGxldCBiaW5kaW5ncyA9IHN0YXRlLmZhY2V0KGtleW1hcCk7XG4gICAgbGV0IG1hcCA9IEtleW1hcHMuZ2V0KGJpbmRpbmdzKTtcbiAgICBpZiAoIW1hcClcbiAgICAgICAgS2V5bWFwcy5zZXQoYmluZGluZ3MsIG1hcCA9IGJ1aWxkS2V5bWFwKGJpbmRpbmdzLnJlZHVjZSgoYSwgYikgPT4gYS5jb25jYXQoYiksIFtdKSkpO1xuICAgIHJldHVybiBtYXA7XG59XG4vKipcblJ1biB0aGUga2V5IGhhbmRsZXJzIHJlZ2lzdGVyZWQgZm9yIGEgZ2l2ZW4gc2NvcGUuIFRoZSBldmVudFxub2JqZWN0IHNob3VsZCBiZSBhIGBcImtleWRvd25cImAgZXZlbnQuIFJldHVybnMgdHJ1ZSBpZiBhbnkgb2YgdGhlXG5oYW5kbGVycyBoYW5kbGVkIGl0LlxuKi9cbmZ1bmN0aW9uIHJ1blNjb3BlSGFuZGxlcnModmlldywgZXZlbnQsIHNjb3BlKSB7XG4gICAgcmV0dXJuIHJ1bkhhbmRsZXJzKGdldEtleW1hcCh2aWV3LnN0YXRlKSwgZXZlbnQsIHZpZXcsIHNjb3BlKTtcbn1cbmxldCBzdG9yZWRQcmVmaXggPSBudWxsO1xuY29uc3QgUHJlZml4VGltZW91dCA9IDQwMDA7XG5mdW5jdGlvbiBidWlsZEtleW1hcChiaW5kaW5ncywgcGxhdGZvcm0gPSBjdXJyZW50UGxhdGZvcm0pIHtcbiAgICBsZXQgYm91bmQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGxldCBpc1ByZWZpeCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgbGV0IGNoZWNrUHJlZml4ID0gKG5hbWUsIGlzKSA9PiB7XG4gICAgICAgIGxldCBjdXJyZW50ID0gaXNQcmVmaXhbbmFtZV07XG4gICAgICAgIGlmIChjdXJyZW50ID09IG51bGwpXG4gICAgICAgICAgICBpc1ByZWZpeFtuYW1lXSA9IGlzO1xuICAgICAgICBlbHNlIGlmIChjdXJyZW50ICE9IGlzKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiS2V5IGJpbmRpbmcgXCIgKyBuYW1lICsgXCIgaXMgdXNlZCBib3RoIGFzIGEgcmVndWxhciBiaW5kaW5nIGFuZCBhcyBhIG11bHRpLXN0cm9rZSBwcmVmaXhcIik7XG4gICAgfTtcbiAgICBsZXQgYWRkID0gKHNjb3BlLCBrZXksIGNvbW1hbmQsIHByZXZlbnREZWZhdWx0LCBzdG9wUHJvcGFnYXRpb24pID0+IHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgbGV0IHNjb3BlT2JqID0gYm91bmRbc2NvcGVdIHx8IChib3VuZFtzY29wZV0gPSBPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgICAgICAgbGV0IHBhcnRzID0ga2V5LnNwbGl0KC8gKD8hJCkvKS5tYXAoayA9PiBub3JtYWxpemVLZXlOYW1lKGssIHBsYXRmb3JtKSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBwcmVmaXggPSBwYXJ0cy5zbGljZSgwLCBpKS5qb2luKFwiIFwiKTtcbiAgICAgICAgICAgIGNoZWNrUHJlZml4KHByZWZpeCwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAoIXNjb3BlT2JqW3ByZWZpeF0pXG4gICAgICAgICAgICAgICAgc2NvcGVPYmpbcHJlZml4XSA9IHtcbiAgICAgICAgICAgICAgICAgICAgcHJldmVudERlZmF1bHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHN0b3BQcm9wYWdhdGlvbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHJ1bjogWyh2aWV3KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG91ck9iaiA9IHN0b3JlZFByZWZpeCA9IHsgdmlldywgcHJlZml4LCBzY29wZSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4geyBpZiAoc3RvcmVkUHJlZml4ID09IG91ck9iailcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmVkUHJlZml4ID0gbnVsbDsgfSwgUHJlZml4VGltZW91dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGZ1bGwgPSBwYXJ0cy5qb2luKFwiIFwiKTtcbiAgICAgICAgY2hlY2tQcmVmaXgoZnVsbCwgZmFsc2UpO1xuICAgICAgICBsZXQgYmluZGluZyA9IHNjb3BlT2JqW2Z1bGxdIHx8IChzY29wZU9ialtmdWxsXSA9IHtcbiAgICAgICAgICAgIHByZXZlbnREZWZhdWx0OiBmYWxzZSxcbiAgICAgICAgICAgIHN0b3BQcm9wYWdhdGlvbjogZmFsc2UsXG4gICAgICAgICAgICBydW46ICgoX2IgPSAoX2EgPSBzY29wZU9iai5fYW55KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucnVuKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iuc2xpY2UoKSkgfHwgW11cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChjb21tYW5kKVxuICAgICAgICAgICAgYmluZGluZy5ydW4ucHVzaChjb21tYW5kKTtcbiAgICAgICAgaWYgKHByZXZlbnREZWZhdWx0KVxuICAgICAgICAgICAgYmluZGluZy5wcmV2ZW50RGVmYXVsdCA9IHRydWU7XG4gICAgICAgIGlmIChzdG9wUHJvcGFnYXRpb24pXG4gICAgICAgICAgICBiaW5kaW5nLnN0b3BQcm9wYWdhdGlvbiA9IHRydWU7XG4gICAgfTtcbiAgICBmb3IgKGxldCBiIG9mIGJpbmRpbmdzKSB7XG4gICAgICAgIGxldCBzY29wZXMgPSBiLnNjb3BlID8gYi5zY29wZS5zcGxpdChcIiBcIikgOiBbXCJlZGl0b3JcIl07XG4gICAgICAgIGlmIChiLmFueSlcbiAgICAgICAgICAgIGZvciAobGV0IHNjb3BlIG9mIHNjb3Blcykge1xuICAgICAgICAgICAgICAgIGxldCBzY29wZU9iaiA9IGJvdW5kW3Njb3BlXSB8fCAoYm91bmRbc2NvcGVdID0gT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gICAgICAgICAgICAgICAgaWYgKCFzY29wZU9iai5fYW55KVxuICAgICAgICAgICAgICAgICAgICBzY29wZU9iai5fYW55ID0geyBwcmV2ZW50RGVmYXVsdDogZmFsc2UsIHN0b3BQcm9wYWdhdGlvbjogZmFsc2UsIHJ1bjogW10gfTtcbiAgICAgICAgICAgICAgICBsZXQgeyBhbnkgfSA9IGI7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIHNjb3BlT2JqKVxuICAgICAgICAgICAgICAgICAgICBzY29wZU9ialtrZXldLnJ1bi5wdXNoKHZpZXcgPT4gYW55KHZpZXcsIGN1cnJlbnRLZXlFdmVudCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICBsZXQgbmFtZSA9IGJbcGxhdGZvcm1dIHx8IGIua2V5O1xuICAgICAgICBpZiAoIW5hbWUpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgZm9yIChsZXQgc2NvcGUgb2Ygc2NvcGVzKSB7XG4gICAgICAgICAgICBhZGQoc2NvcGUsIG5hbWUsIGIucnVuLCBiLnByZXZlbnREZWZhdWx0LCBiLnN0b3BQcm9wYWdhdGlvbik7XG4gICAgICAgICAgICBpZiAoYi5zaGlmdClcbiAgICAgICAgICAgICAgICBhZGQoc2NvcGUsIFwiU2hpZnQtXCIgKyBuYW1lLCBiLnNoaWZ0LCBiLnByZXZlbnREZWZhdWx0LCBiLnN0b3BQcm9wYWdhdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJvdW5kO1xufVxubGV0IGN1cnJlbnRLZXlFdmVudCA9IG51bGw7XG5mdW5jdGlvbiBydW5IYW5kbGVycyhtYXAsIGV2ZW50LCB2aWV3LCBzY29wZSkge1xuICAgIGN1cnJlbnRLZXlFdmVudCA9IGV2ZW50O1xuICAgIGxldCBuYW1lID0gdzNjS2V5bmFtZS5rZXlOYW1lKGV2ZW50KTtcbiAgICBsZXQgY2hhckNvZGUgPSBzdGF0ZS5jb2RlUG9pbnRBdChuYW1lLCAwKSwgaXNDaGFyID0gc3RhdGUuY29kZVBvaW50U2l6ZShjaGFyQ29kZSkgPT0gbmFtZS5sZW5ndGggJiYgbmFtZSAhPSBcIiBcIjtcbiAgICBsZXQgcHJlZml4ID0gXCJcIiwgaGFuZGxlZCA9IGZhbHNlLCBwcmV2ZW50ZWQgPSBmYWxzZSwgc3RvcFByb3BhZ2F0aW9uID0gZmFsc2U7XG4gICAgaWYgKHN0b3JlZFByZWZpeCAmJiBzdG9yZWRQcmVmaXgudmlldyA9PSB2aWV3ICYmIHN0b3JlZFByZWZpeC5zY29wZSA9PSBzY29wZSkge1xuICAgICAgICBwcmVmaXggPSBzdG9yZWRQcmVmaXgucHJlZml4ICsgXCIgXCI7XG4gICAgICAgIGlmIChtb2RpZmllckNvZGVzLmluZGV4T2YoZXZlbnQua2V5Q29kZSkgPCAwKSB7XG4gICAgICAgICAgICBwcmV2ZW50ZWQgPSB0cnVlO1xuICAgICAgICAgICAgc3RvcmVkUHJlZml4ID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgcmFuID0gbmV3IFNldDtcbiAgICBsZXQgcnVuRm9yID0gKGJpbmRpbmcpID0+IHtcbiAgICAgICAgaWYgKGJpbmRpbmcpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGNtZCBvZiBiaW5kaW5nLnJ1bilcbiAgICAgICAgICAgICAgICBpZiAoIXJhbi5oYXMoY21kKSkge1xuICAgICAgICAgICAgICAgICAgICByYW4uYWRkKGNtZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjbWQodmlldykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiaW5kaW5nLnN0b3BQcm9wYWdhdGlvbilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9wUHJvcGFnYXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYmluZGluZy5wcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICAgICAgICAgIGlmIChiaW5kaW5nLnN0b3BQcm9wYWdhdGlvbilcbiAgICAgICAgICAgICAgICAgICAgc3RvcFByb3BhZ2F0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBwcmV2ZW50ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIGxldCBzY29wZU9iaiA9IG1hcFtzY29wZV0sIGJhc2VOYW1lLCBzaGlmdE5hbWU7XG4gICAgaWYgKHNjb3BlT2JqKSB7XG4gICAgICAgIGlmIChydW5Gb3Ioc2NvcGVPYmpbcHJlZml4ICsgbW9kaWZpZXJzKG5hbWUsIGV2ZW50LCAhaXNDaGFyKV0pKSB7XG4gICAgICAgICAgICBoYW5kbGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc0NoYXIgJiYgKGV2ZW50LmFsdEtleSB8fCBldmVudC5tZXRhS2V5IHx8IGV2ZW50LmN0cmxLZXkpICYmXG4gICAgICAgICAgICAvLyBDdHJsLUFsdCBtYXkgYmUgdXNlZCBmb3IgQWx0R3Igb24gV2luZG93c1xuICAgICAgICAgICAgIShicm93c2VyLndpbmRvd3MgJiYgZXZlbnQuY3RybEtleSAmJiBldmVudC5hbHRLZXkpICYmXG4gICAgICAgICAgICAoYmFzZU5hbWUgPSB3M2NLZXluYW1lLmJhc2VbZXZlbnQua2V5Q29kZV0pICYmIGJhc2VOYW1lICE9IG5hbWUpIHtcbiAgICAgICAgICAgIGlmIChydW5Gb3Ioc2NvcGVPYmpbcHJlZml4ICsgbW9kaWZpZXJzKGJhc2VOYW1lLCBldmVudCwgdHJ1ZSldKSkge1xuICAgICAgICAgICAgICAgIGhhbmRsZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZXZlbnQuc2hpZnRLZXkgJiYgKHNoaWZ0TmFtZSA9IHczY0tleW5hbWUuc2hpZnRbZXZlbnQua2V5Q29kZV0pICE9IG5hbWUgJiYgc2hpZnROYW1lICE9IGJhc2VOYW1lICYmXG4gICAgICAgICAgICAgICAgcnVuRm9yKHNjb3BlT2JqW3ByZWZpeCArIG1vZGlmaWVycyhzaGlmdE5hbWUsIGV2ZW50LCBmYWxzZSldKSkge1xuICAgICAgICAgICAgICAgIGhhbmRsZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzQ2hhciAmJiBldmVudC5zaGlmdEtleSAmJlxuICAgICAgICAgICAgcnVuRm9yKHNjb3BlT2JqW3ByZWZpeCArIG1vZGlmaWVycyhuYW1lLCBldmVudCwgdHJ1ZSldKSkge1xuICAgICAgICAgICAgaGFuZGxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFoYW5kbGVkICYmIHJ1bkZvcihzY29wZU9iai5fYW55KSlcbiAgICAgICAgICAgIGhhbmRsZWQgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAocHJldmVudGVkKVxuICAgICAgICBoYW5kbGVkID0gdHJ1ZTtcbiAgICBpZiAoaGFuZGxlZCAmJiBzdG9wUHJvcGFnYXRpb24pXG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGN1cnJlbnRLZXlFdmVudCA9IG51bGw7XG4gICAgcmV0dXJuIGhhbmRsZWQ7XG59XG5cbi8qKlxuSW1wbGVtZW50YXRpb24gb2YgW2BMYXllck1hcmtlcmBdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jdmlldy5MYXllck1hcmtlcikgdGhhdCBjcmVhdGVzXG5hIHJlY3RhbmdsZSBhdCBhIGdpdmVuIHNldCBvZiBjb29yZGluYXRlcy5cbiovXG5jbGFzcyBSZWN0YW5nbGVNYXJrZXIge1xuICAgIC8qKlxuICAgIENyZWF0ZSBhIG1hcmtlciB3aXRoIHRoZSBnaXZlbiBjbGFzcyBhbmQgZGltZW5zaW9ucy4gSWYgYHdpZHRoYFxuICAgIGlzIG51bGwsIHRoZSBET00gZWxlbWVudCB3aWxsIGdldCBubyB3aWR0aCBzdHlsZS5cbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNsYXNzTmFtZSwgXG4gICAgLyoqXG4gICAgVGhlIGxlZnQgcG9zaXRpb24gb2YgdGhlIG1hcmtlciAoaW4gcGl4ZWxzLCBkb2N1bWVudC1yZWxhdGl2ZSkuXG4gICAgKi9cbiAgICBsZWZ0LCBcbiAgICAvKipcbiAgICBUaGUgdG9wIHBvc2l0aW9uIG9mIHRoZSBtYXJrZXIuXG4gICAgKi9cbiAgICB0b3AsIFxuICAgIC8qKlxuICAgIFRoZSB3aWR0aCBvZiB0aGUgbWFya2VyLCBvciBudWxsIGlmIGl0IHNob3VsZG4ndCBnZXQgYSB3aWR0aCBhc3NpZ25lZC5cbiAgICAqL1xuICAgIHdpZHRoLCBcbiAgICAvKipcbiAgICBUaGUgaGVpZ2h0IG9mIHRoZSBtYXJrZXIuXG4gICAgKi9cbiAgICBoZWlnaHQpIHtcbiAgICAgICAgdGhpcy5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG4gICAgICAgIHRoaXMubGVmdCA9IGxlZnQ7XG4gICAgICAgIHRoaXMudG9wID0gdG9wO1xuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIH1cbiAgICBkcmF3KCkge1xuICAgICAgICBsZXQgZWx0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgZWx0LmNsYXNzTmFtZSA9IHRoaXMuY2xhc3NOYW1lO1xuICAgICAgICB0aGlzLmFkanVzdChlbHQpO1xuICAgICAgICByZXR1cm4gZWx0O1xuICAgIH1cbiAgICB1cGRhdGUoZWx0LCBwcmV2KSB7XG4gICAgICAgIGlmIChwcmV2LmNsYXNzTmFtZSAhPSB0aGlzLmNsYXNzTmFtZSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgdGhpcy5hZGp1c3QoZWx0KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGFkanVzdChlbHQpIHtcbiAgICAgICAgZWx0LnN0eWxlLmxlZnQgPSB0aGlzLmxlZnQgKyBcInB4XCI7XG4gICAgICAgIGVsdC5zdHlsZS50b3AgPSB0aGlzLnRvcCArIFwicHhcIjtcbiAgICAgICAgaWYgKHRoaXMud2lkdGggIT0gbnVsbClcbiAgICAgICAgICAgIGVsdC5zdHlsZS53aWR0aCA9IHRoaXMud2lkdGggKyBcInB4XCI7XG4gICAgICAgIGVsdC5zdHlsZS5oZWlnaHQgPSB0aGlzLmhlaWdodCArIFwicHhcIjtcbiAgICB9XG4gICAgZXEocCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sZWZ0ID09IHAubGVmdCAmJiB0aGlzLnRvcCA9PSBwLnRvcCAmJiB0aGlzLndpZHRoID09IHAud2lkdGggJiYgdGhpcy5oZWlnaHQgPT0gcC5oZWlnaHQgJiZcbiAgICAgICAgICAgIHRoaXMuY2xhc3NOYW1lID09IHAuY2xhc3NOYW1lO1xuICAgIH1cbiAgICAvKipcbiAgICBDcmVhdGUgYSBzZXQgb2YgcmVjdGFuZ2xlcyBmb3IgdGhlIGdpdmVuIHNlbGVjdGlvbiByYW5nZSxcbiAgICBhc3NpZ25pbmcgdGhlbSB0aGVjbGFzc2BjbGFzc05hbWVgLiBXaWxsIGNyZWF0ZSBhIHNpbmdsZVxuICAgIHJlY3RhbmdsZSBmb3IgZW1wdHkgcmFuZ2VzLCBhbmQgYSBzZXQgb2Ygc2VsZWN0aW9uLXN0eWxlXG4gICAgcmVjdGFuZ2xlcyBjb3ZlcmluZyB0aGUgcmFuZ2UncyBjb250ZW50IChpbiBhIGJpZGktYXdhcmVcbiAgICB3YXkpIGZvciBub24tZW1wdHkgb25lcy5cbiAgICAqL1xuICAgIHN0YXRpYyBmb3JSYW5nZSh2aWV3LCBjbGFzc05hbWUsIHJhbmdlKSB7XG4gICAgICAgIGlmIChyYW5nZS5lbXB0eSkge1xuICAgICAgICAgICAgbGV0IHBvcyA9IHZpZXcuY29vcmRzQXRQb3MocmFuZ2UuaGVhZCwgcmFuZ2UuYXNzb2MgfHwgMSk7XG4gICAgICAgICAgICBpZiAoIXBvcylcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICBsZXQgYmFzZSA9IGdldEJhc2Uodmlldyk7XG4gICAgICAgICAgICByZXR1cm4gW25ldyBSZWN0YW5nbGVNYXJrZXIoY2xhc3NOYW1lLCBwb3MubGVmdCAtIGJhc2UubGVmdCwgcG9zLnRvcCAtIGJhc2UudG9wLCBudWxsLCBwb3MuYm90dG9tIC0gcG9zLnRvcCldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHJlY3RhbmdsZXNGb3JSYW5nZSh2aWV3LCBjbGFzc05hbWUsIHJhbmdlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGdldEJhc2Uodmlldykge1xuICAgIGxldCByZWN0ID0gdmlldy5zY3JvbGxET00uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgbGV0IGxlZnQgPSB2aWV3LnRleHREaXJlY3Rpb24gPT0gZXhwb3J0cy5EaXJlY3Rpb24uTFRSID8gcmVjdC5sZWZ0IDogcmVjdC5yaWdodCAtIHZpZXcuc2Nyb2xsRE9NLmNsaWVudFdpZHRoICogdmlldy5zY2FsZVg7XG4gICAgcmV0dXJuIHsgbGVmdDogbGVmdCAtIHZpZXcuc2Nyb2xsRE9NLnNjcm9sbExlZnQgKiB2aWV3LnNjYWxlWCwgdG9wOiByZWN0LnRvcCAtIHZpZXcuc2Nyb2xsRE9NLnNjcm9sbFRvcCAqIHZpZXcuc2NhbGVZIH07XG59XG5mdW5jdGlvbiB3cmFwcGVkTGluZSh2aWV3LCBwb3MsIHNpZGUsIGluc2lkZSkge1xuICAgIGxldCBjb29yZHMgPSB2aWV3LmNvb3Jkc0F0UG9zKHBvcywgc2lkZSAqIDIpO1xuICAgIGlmICghY29vcmRzKVxuICAgICAgICByZXR1cm4gaW5zaWRlO1xuICAgIGxldCBlZGl0b3JSZWN0ID0gdmlldy5kb20uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgbGV0IHkgPSAoY29vcmRzLnRvcCArIGNvb3Jkcy5ib3R0b20pIC8gMjtcbiAgICBsZXQgbGVmdCA9IHZpZXcucG9zQXRDb29yZHMoeyB4OiBlZGl0b3JSZWN0LmxlZnQgKyAxLCB5IH0pO1xuICAgIGxldCByaWdodCA9IHZpZXcucG9zQXRDb29yZHMoeyB4OiBlZGl0b3JSZWN0LnJpZ2h0IC0gMSwgeSB9KTtcbiAgICBpZiAobGVmdCA9PSBudWxsIHx8IHJpZ2h0ID09IG51bGwpXG4gICAgICAgIHJldHVybiBpbnNpZGU7XG4gICAgcmV0dXJuIHsgZnJvbTogTWF0aC5tYXgoaW5zaWRlLmZyb20sIE1hdGgubWluKGxlZnQsIHJpZ2h0KSksIHRvOiBNYXRoLm1pbihpbnNpZGUudG8sIE1hdGgubWF4KGxlZnQsIHJpZ2h0KSkgfTtcbn1cbmZ1bmN0aW9uIHJlY3RhbmdsZXNGb3JSYW5nZSh2aWV3LCBjbGFzc05hbWUsIHJhbmdlKSB7XG4gICAgaWYgKHJhbmdlLnRvIDw9IHZpZXcudmlld3BvcnQuZnJvbSB8fCByYW5nZS5mcm9tID49IHZpZXcudmlld3BvcnQudG8pXG4gICAgICAgIHJldHVybiBbXTtcbiAgICBsZXQgZnJvbSA9IE1hdGgubWF4KHJhbmdlLmZyb20sIHZpZXcudmlld3BvcnQuZnJvbSksIHRvID0gTWF0aC5taW4ocmFuZ2UudG8sIHZpZXcudmlld3BvcnQudG8pO1xuICAgIGxldCBsdHIgPSB2aWV3LnRleHREaXJlY3Rpb24gPT0gZXhwb3J0cy5EaXJlY3Rpb24uTFRSO1xuICAgIGxldCBjb250ZW50ID0gdmlldy5jb250ZW50RE9NLCBjb250ZW50UmVjdCA9IGNvbnRlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIGJhc2UgPSBnZXRCYXNlKHZpZXcpO1xuICAgIGxldCBsaW5lRWx0ID0gY29udGVudC5xdWVyeVNlbGVjdG9yKFwiLmNtLWxpbmVcIiksIGxpbmVTdHlsZSA9IGxpbmVFbHQgJiYgd2luZG93LmdldENvbXB1dGVkU3R5bGUobGluZUVsdCk7XG4gICAgbGV0IGxlZnRTaWRlID0gY29udGVudFJlY3QubGVmdCArXG4gICAgICAgIChsaW5lU3R5bGUgPyBwYXJzZUludChsaW5lU3R5bGUucGFkZGluZ0xlZnQpICsgTWF0aC5taW4oMCwgcGFyc2VJbnQobGluZVN0eWxlLnRleHRJbmRlbnQpKSA6IDApO1xuICAgIGxldCByaWdodFNpZGUgPSBjb250ZW50UmVjdC5yaWdodCAtIChsaW5lU3R5bGUgPyBwYXJzZUludChsaW5lU3R5bGUucGFkZGluZ1JpZ2h0KSA6IDApO1xuICAgIGxldCBzdGFydEJsb2NrID0gYmxvY2tBdCh2aWV3LCBmcm9tKSwgZW5kQmxvY2sgPSBibG9ja0F0KHZpZXcsIHRvKTtcbiAgICBsZXQgdmlzdWFsU3RhcnQgPSBzdGFydEJsb2NrLnR5cGUgPT0gZXhwb3J0cy5CbG9ja1R5cGUuVGV4dCA/IHN0YXJ0QmxvY2sgOiBudWxsO1xuICAgIGxldCB2aXN1YWxFbmQgPSBlbmRCbG9jay50eXBlID09IGV4cG9ydHMuQmxvY2tUeXBlLlRleHQgPyBlbmRCbG9jayA6IG51bGw7XG4gICAgaWYgKHZpc3VhbFN0YXJ0ICYmICh2aWV3LmxpbmVXcmFwcGluZyB8fCBzdGFydEJsb2NrLndpZGdldExpbmVCcmVha3MpKVxuICAgICAgICB2aXN1YWxTdGFydCA9IHdyYXBwZWRMaW5lKHZpZXcsIGZyb20sIDEsIHZpc3VhbFN0YXJ0KTtcbiAgICBpZiAodmlzdWFsRW5kICYmICh2aWV3LmxpbmVXcmFwcGluZyB8fCBlbmRCbG9jay53aWRnZXRMaW5lQnJlYWtzKSlcbiAgICAgICAgdmlzdWFsRW5kID0gd3JhcHBlZExpbmUodmlldywgdG8sIC0xLCB2aXN1YWxFbmQpO1xuICAgIGlmICh2aXN1YWxTdGFydCAmJiB2aXN1YWxFbmQgJiYgdmlzdWFsU3RhcnQuZnJvbSA9PSB2aXN1YWxFbmQuZnJvbSAmJiB2aXN1YWxTdGFydC50byA9PSB2aXN1YWxFbmQudG8pIHtcbiAgICAgICAgcmV0dXJuIHBpZWNlcyhkcmF3Rm9yTGluZShyYW5nZS5mcm9tLCByYW5nZS50bywgdmlzdWFsU3RhcnQpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGxldCB0b3AgPSB2aXN1YWxTdGFydCA/IGRyYXdGb3JMaW5lKHJhbmdlLmZyb20sIG51bGwsIHZpc3VhbFN0YXJ0KSA6IGRyYXdGb3JXaWRnZXQoc3RhcnRCbG9jaywgZmFsc2UpO1xuICAgICAgICBsZXQgYm90dG9tID0gdmlzdWFsRW5kID8gZHJhd0ZvckxpbmUobnVsbCwgcmFuZ2UudG8sIHZpc3VhbEVuZCkgOiBkcmF3Rm9yV2lkZ2V0KGVuZEJsb2NrLCB0cnVlKTtcbiAgICAgICAgbGV0IGJldHdlZW4gPSBbXTtcbiAgICAgICAgaWYgKCh2aXN1YWxTdGFydCB8fCBzdGFydEJsb2NrKS50byA8ICh2aXN1YWxFbmQgfHwgZW5kQmxvY2spLmZyb20gLSAodmlzdWFsU3RhcnQgJiYgdmlzdWFsRW5kID8gMSA6IDApIHx8XG4gICAgICAgICAgICBzdGFydEJsb2NrLndpZGdldExpbmVCcmVha3MgPiAxICYmIHRvcC5ib3R0b20gKyB2aWV3LmRlZmF1bHRMaW5lSGVpZ2h0IC8gMiA8IGJvdHRvbS50b3ApXG4gICAgICAgICAgICBiZXR3ZWVuLnB1c2gocGllY2UobGVmdFNpZGUsIHRvcC5ib3R0b20sIHJpZ2h0U2lkZSwgYm90dG9tLnRvcCkpO1xuICAgICAgICBlbHNlIGlmICh0b3AuYm90dG9tIDwgYm90dG9tLnRvcCAmJiB2aWV3LmVsZW1lbnRBdEhlaWdodCgodG9wLmJvdHRvbSArIGJvdHRvbS50b3ApIC8gMikudHlwZSA9PSBleHBvcnRzLkJsb2NrVHlwZS5UZXh0KVxuICAgICAgICAgICAgdG9wLmJvdHRvbSA9IGJvdHRvbS50b3AgPSAodG9wLmJvdHRvbSArIGJvdHRvbS50b3ApIC8gMjtcbiAgICAgICAgcmV0dXJuIHBpZWNlcyh0b3ApLmNvbmNhdChiZXR3ZWVuKS5jb25jYXQocGllY2VzKGJvdHRvbSkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwaWVjZShsZWZ0LCB0b3AsIHJpZ2h0LCBib3R0b20pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWN0YW5nbGVNYXJrZXIoY2xhc3NOYW1lLCBsZWZ0IC0gYmFzZS5sZWZ0LCB0b3AgLSBiYXNlLnRvcCAtIDAuMDEgLyogQy5FcHNpbG9uICovLCByaWdodCAtIGxlZnQsIGJvdHRvbSAtIHRvcCArIDAuMDEgLyogQy5FcHNpbG9uICovKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGllY2VzKHsgdG9wLCBib3R0b20sIGhvcml6b250YWwgfSkge1xuICAgICAgICBsZXQgcGllY2VzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaG9yaXpvbnRhbC5sZW5ndGg7IGkgKz0gMilcbiAgICAgICAgICAgIHBpZWNlcy5wdXNoKHBpZWNlKGhvcml6b250YWxbaV0sIHRvcCwgaG9yaXpvbnRhbFtpICsgMV0sIGJvdHRvbSkpO1xuICAgICAgICByZXR1cm4gcGllY2VzO1xuICAgIH1cbiAgICAvLyBHZXRzIHBhc3NlZCBmcm9tL3RvIGluIGxpbmUtbG9jYWwgcG9zaXRpb25zXG4gICAgZnVuY3Rpb24gZHJhd0ZvckxpbmUoZnJvbSwgdG8sIGxpbmUpIHtcbiAgICAgICAgbGV0IHRvcCA9IDFlOSwgYm90dG9tID0gLTFlOSwgaG9yaXpvbnRhbCA9IFtdO1xuICAgICAgICBmdW5jdGlvbiBhZGRTcGFuKGZyb20sIGZyb21PcGVuLCB0bywgdG9PcGVuLCBkaXIpIHtcbiAgICAgICAgICAgIC8vIFBhc3NpbmcgMi8tMiBpcyBhIGtsdWRnZSB0byBmb3JjZSB0aGUgdmlldyB0byByZXR1cm5cbiAgICAgICAgICAgIC8vIGNvb3JkaW5hdGVzIG9uIHRoZSBwcm9wZXIgc2lkZSBvZiBibG9jayB3aWRnZXRzLCBzaW5jZVxuICAgICAgICAgICAgLy8gbm9ybWFsaXppbmcgdGhlIHNpZGUgdGhlcmUsIHRob3VnaCBhcHByb3ByaWF0ZSBmb3IgbW9zdFxuICAgICAgICAgICAgLy8gY29vcmRzQXRQb3MgcXVlcmllcywgd291bGQgYnJlYWsgc2VsZWN0aW9uIGRyYXdpbmcuXG4gICAgICAgICAgICBsZXQgZnJvbUNvb3JkcyA9IHZpZXcuY29vcmRzQXRQb3MoZnJvbSwgKGZyb20gPT0gbGluZS50byA/IC0yIDogMikpO1xuICAgICAgICAgICAgbGV0IHRvQ29vcmRzID0gdmlldy5jb29yZHNBdFBvcyh0bywgKHRvID09IGxpbmUuZnJvbSA/IDIgOiAtMikpO1xuICAgICAgICAgICAgaWYgKCFmcm9tQ29vcmRzIHx8ICF0b0Nvb3JkcylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0b3AgPSBNYXRoLm1pbihmcm9tQ29vcmRzLnRvcCwgdG9Db29yZHMudG9wLCB0b3ApO1xuICAgICAgICAgICAgYm90dG9tID0gTWF0aC5tYXgoZnJvbUNvb3Jkcy5ib3R0b20sIHRvQ29vcmRzLmJvdHRvbSwgYm90dG9tKTtcbiAgICAgICAgICAgIGlmIChkaXIgPT0gZXhwb3J0cy5EaXJlY3Rpb24uTFRSKVxuICAgICAgICAgICAgICAgIGhvcml6b250YWwucHVzaChsdHIgJiYgZnJvbU9wZW4gPyBsZWZ0U2lkZSA6IGZyb21Db29yZHMubGVmdCwgbHRyICYmIHRvT3BlbiA/IHJpZ2h0U2lkZSA6IHRvQ29vcmRzLnJpZ2h0KTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBob3Jpem9udGFsLnB1c2goIWx0ciAmJiB0b09wZW4gPyBsZWZ0U2lkZSA6IHRvQ29vcmRzLmxlZnQsICFsdHIgJiYgZnJvbU9wZW4gPyByaWdodFNpZGUgOiBmcm9tQ29vcmRzLnJpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgc3RhcnQgPSBmcm9tICE9PSBudWxsICYmIGZyb20gIT09IHZvaWQgMCA/IGZyb20gOiBsaW5lLmZyb20sIGVuZCA9IHRvICE9PSBudWxsICYmIHRvICE9PSB2b2lkIDAgPyB0byA6IGxpbmUudG87XG4gICAgICAgIC8vIFNwbGl0IHRoZSByYW5nZSBieSB2aXNpYmxlIHJhbmdlIGFuZCBkb2N1bWVudCBsaW5lXG4gICAgICAgIGZvciAobGV0IHIgb2Ygdmlldy52aXNpYmxlUmFuZ2VzKVxuICAgICAgICAgICAgaWYgKHIudG8gPiBzdGFydCAmJiByLmZyb20gPCBlbmQpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBwb3MgPSBNYXRoLm1heChyLmZyb20sIHN0YXJ0KSwgZW5kUG9zID0gTWF0aC5taW4oci50bywgZW5kKTs7KSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkb2NMaW5lID0gdmlldy5zdGF0ZS5kb2MubGluZUF0KHBvcyk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHNwYW4gb2Ygdmlldy5iaWRpU3BhbnMoZG9jTGluZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzcGFuRnJvbSA9IHNwYW4uZnJvbSArIGRvY0xpbmUuZnJvbSwgc3BhblRvID0gc3Bhbi50byArIGRvY0xpbmUuZnJvbTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcGFuRnJvbSA+PSBlbmRQb3MpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3BhblRvID4gcG9zKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZFNwYW4oTWF0aC5tYXgoc3BhbkZyb20sIHBvcyksIGZyb20gPT0gbnVsbCAmJiBzcGFuRnJvbSA8PSBzdGFydCwgTWF0aC5taW4oc3BhblRvLCBlbmRQb3MpLCB0byA9PSBudWxsICYmIHNwYW5UbyA+PSBlbmQsIHNwYW4uZGlyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwb3MgPSBkb2NMaW5lLnRvICsgMTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvcyA+PSBlbmRQb3MpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIGlmIChob3Jpem9udGFsLmxlbmd0aCA9PSAwKVxuICAgICAgICAgICAgYWRkU3BhbihzdGFydCwgZnJvbSA9PSBudWxsLCBlbmQsIHRvID09IG51bGwsIHZpZXcudGV4dERpcmVjdGlvbik7XG4gICAgICAgIHJldHVybiB7IHRvcCwgYm90dG9tLCBob3Jpem9udGFsIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRyYXdGb3JXaWRnZXQoYmxvY2ssIHRvcCkge1xuICAgICAgICBsZXQgeSA9IGNvbnRlbnRSZWN0LnRvcCArICh0b3AgPyBibG9jay50b3AgOiBibG9jay5ib3R0b20pO1xuICAgICAgICByZXR1cm4geyB0b3A6IHksIGJvdHRvbTogeSwgaG9yaXpvbnRhbDogW10gfTtcbiAgICB9XG59XG5mdW5jdGlvbiBzYW1lTWFya2VyKGEsIGIpIHtcbiAgICByZXR1cm4gYS5jb25zdHJ1Y3RvciA9PSBiLmNvbnN0cnVjdG9yICYmIGEuZXEoYik7XG59XG5jbGFzcyBMYXllclZpZXcge1xuICAgIGNvbnN0cnVjdG9yKHZpZXcsIGxheWVyKSB7XG4gICAgICAgIHRoaXMudmlldyA9IHZpZXc7XG4gICAgICAgIHRoaXMubGF5ZXIgPSBsYXllcjtcbiAgICAgICAgdGhpcy5kcmF3biA9IFtdO1xuICAgICAgICB0aGlzLnNjYWxlWCA9IDE7XG4gICAgICAgIHRoaXMuc2NhbGVZID0gMTtcbiAgICAgICAgdGhpcy5tZWFzdXJlUmVxID0geyByZWFkOiB0aGlzLm1lYXN1cmUuYmluZCh0aGlzKSwgd3JpdGU6IHRoaXMuZHJhdy5iaW5kKHRoaXMpIH07XG4gICAgICAgIHRoaXMuZG9tID0gdmlldy5zY3JvbGxET00uYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSk7XG4gICAgICAgIHRoaXMuZG9tLmNsYXNzTGlzdC5hZGQoXCJjbS1sYXllclwiKTtcbiAgICAgICAgaWYgKGxheWVyLmFib3ZlKVxuICAgICAgICAgICAgdGhpcy5kb20uY2xhc3NMaXN0LmFkZChcImNtLWxheWVyLWFib3ZlXCIpO1xuICAgICAgICBpZiAobGF5ZXIuY2xhc3MpXG4gICAgICAgICAgICB0aGlzLmRvbS5jbGFzc0xpc3QuYWRkKGxheWVyLmNsYXNzKTtcbiAgICAgICAgdGhpcy5zY2FsZSgpO1xuICAgICAgICB0aGlzLmRvbS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLCBcInRydWVcIik7XG4gICAgICAgIHRoaXMuc2V0T3JkZXIodmlldy5zdGF0ZSk7XG4gICAgICAgIHZpZXcucmVxdWVzdE1lYXN1cmUodGhpcy5tZWFzdXJlUmVxKTtcbiAgICAgICAgaWYgKGxheWVyLm1vdW50KVxuICAgICAgICAgICAgbGF5ZXIubW91bnQodGhpcy5kb20sIHZpZXcpO1xuICAgIH1cbiAgICB1cGRhdGUodXBkYXRlKSB7XG4gICAgICAgIGlmICh1cGRhdGUuc3RhcnRTdGF0ZS5mYWNldChsYXllck9yZGVyKSAhPSB1cGRhdGUuc3RhdGUuZmFjZXQobGF5ZXJPcmRlcikpXG4gICAgICAgICAgICB0aGlzLnNldE9yZGVyKHVwZGF0ZS5zdGF0ZSk7XG4gICAgICAgIGlmICh0aGlzLmxheWVyLnVwZGF0ZSh1cGRhdGUsIHRoaXMuZG9tKSB8fCB1cGRhdGUuZ2VvbWV0cnlDaGFuZ2VkKSB7XG4gICAgICAgICAgICB0aGlzLnNjYWxlKCk7XG4gICAgICAgICAgICB1cGRhdGUudmlldy5yZXF1ZXN0TWVhc3VyZSh0aGlzLm1lYXN1cmVSZXEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRvY1ZpZXdVcGRhdGUodmlldykge1xuICAgICAgICBpZiAodGhpcy5sYXllci51cGRhdGVPbkRvY1ZpZXdVcGRhdGUgIT09IGZhbHNlKVxuICAgICAgICAgICAgdmlldy5yZXF1ZXN0TWVhc3VyZSh0aGlzLm1lYXN1cmVSZXEpO1xuICAgIH1cbiAgICBzZXRPcmRlcihzdGF0ZSkge1xuICAgICAgICBsZXQgcG9zID0gMCwgb3JkZXIgPSBzdGF0ZS5mYWNldChsYXllck9yZGVyKTtcbiAgICAgICAgd2hpbGUgKHBvcyA8IG9yZGVyLmxlbmd0aCAmJiBvcmRlcltwb3NdICE9IHRoaXMubGF5ZXIpXG4gICAgICAgICAgICBwb3MrKztcbiAgICAgICAgdGhpcy5kb20uc3R5bGUuekluZGV4ID0gU3RyaW5nKCh0aGlzLmxheWVyLmFib3ZlID8gMTUwIDogLTEpIC0gcG9zKTtcbiAgICB9XG4gICAgbWVhc3VyZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGF5ZXIubWFya2Vycyh0aGlzLnZpZXcpO1xuICAgIH1cbiAgICBzY2FsZSgpIHtcbiAgICAgICAgbGV0IHsgc2NhbGVYLCBzY2FsZVkgfSA9IHRoaXMudmlldztcbiAgICAgICAgaWYgKHNjYWxlWCAhPSB0aGlzLnNjYWxlWCB8fCBzY2FsZVkgIT0gdGhpcy5zY2FsZVkpIHtcbiAgICAgICAgICAgIHRoaXMuc2NhbGVYID0gc2NhbGVYO1xuICAgICAgICAgICAgdGhpcy5zY2FsZVkgPSBzY2FsZVk7XG4gICAgICAgICAgICB0aGlzLmRvbS5zdHlsZS50cmFuc2Zvcm0gPSBgc2NhbGUoJHsxIC8gc2NhbGVYfSwgJHsxIC8gc2NhbGVZfSlgO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRyYXcobWFya2Vycykge1xuICAgICAgICBpZiAobWFya2Vycy5sZW5ndGggIT0gdGhpcy5kcmF3bi5sZW5ndGggfHwgbWFya2Vycy5zb21lKChwLCBpKSA9PiAhc2FtZU1hcmtlcihwLCB0aGlzLmRyYXduW2ldKSkpIHtcbiAgICAgICAgICAgIGxldCBvbGQgPSB0aGlzLmRvbS5maXJzdENoaWxkLCBvbGRJID0gMDtcbiAgICAgICAgICAgIGZvciAobGV0IG1hcmtlciBvZiBtYXJrZXJzKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1hcmtlci51cGRhdGUgJiYgb2xkICYmIG1hcmtlci5jb25zdHJ1Y3RvciAmJiB0aGlzLmRyYXduW29sZEldLmNvbnN0cnVjdG9yICYmXG4gICAgICAgICAgICAgICAgICAgIG1hcmtlci51cGRhdGUob2xkLCB0aGlzLmRyYXduW29sZEldKSkge1xuICAgICAgICAgICAgICAgICAgICBvbGQgPSBvbGQubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgIG9sZEkrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9tLmluc2VydEJlZm9yZShtYXJrZXIuZHJhdygpLCBvbGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlIChvbGQpIHtcbiAgICAgICAgICAgICAgICBsZXQgbmV4dCA9IG9sZC5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgICBvbGQucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgb2xkID0gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZHJhd24gPSBtYXJrZXJzO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLmxheWVyLmRlc3Ryb3kpXG4gICAgICAgICAgICB0aGlzLmxheWVyLmRlc3Ryb3kodGhpcy5kb20sIHRoaXMudmlldyk7XG4gICAgICAgIHRoaXMuZG9tLnJlbW92ZSgpO1xuICAgIH1cbn1cbmNvbnN0IGxheWVyT3JkZXIgPSBzdGF0ZS5GYWNldC5kZWZpbmUoKTtcbi8qKlxuRGVmaW5lIGEgbGF5ZXIuXG4qL1xuZnVuY3Rpb24gbGF5ZXIoY29uZmlnKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgVmlld1BsdWdpbi5kZWZpbmUodiA9PiBuZXcgTGF5ZXJWaWV3KHYsIGNvbmZpZykpLFxuICAgICAgICBsYXllck9yZGVyLm9mKGNvbmZpZylcbiAgICBdO1xufVxuXG5jb25zdCBDYW5IaWRlUHJpbWFyeSA9ICFicm93c2VyLmlvczsgLy8gRklYTUUgdGVzdCBJRVxuY29uc3Qgc2VsZWN0aW9uQ29uZmlnID0gc3RhdGUuRmFjZXQuZGVmaW5lKHtcbiAgICBjb21iaW5lKGNvbmZpZ3MpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlLmNvbWJpbmVDb25maWcoY29uZmlncywge1xuICAgICAgICAgICAgY3Vyc29yQmxpbmtSYXRlOiAxMjAwLFxuICAgICAgICAgICAgZHJhd1JhbmdlQ3Vyc29yOiB0cnVlXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGN1cnNvckJsaW5rUmF0ZTogKGEsIGIpID0+IE1hdGgubWluKGEsIGIpLFxuICAgICAgICAgICAgZHJhd1JhbmdlQ3Vyc29yOiAoYSwgYikgPT4gYSB8fCBiXG4gICAgICAgIH0pO1xuICAgIH1cbn0pO1xuLyoqXG5SZXR1cm5zIGFuIGV4dGVuc2lvbiB0aGF0IGhpZGVzIHRoZSBicm93c2VyJ3MgbmF0aXZlIHNlbGVjdGlvbiBhbmRcbmN1cnNvciwgcmVwbGFjaW5nIHRoZSBzZWxlY3Rpb24gd2l0aCBhIGJhY2tncm91bmQgYmVoaW5kIHRoZSB0ZXh0XG4od2l0aCB0aGUgYGNtLXNlbGVjdGlvbkJhY2tncm91bmRgIGNsYXNzKSwgYW5kIHRoZVxuY3Vyc29ycyB3aXRoIGVsZW1lbnRzIG92ZXJsYWlkIG92ZXIgdGhlIGNvZGUgKHVzaW5nXG5gY20tY3Vyc29yLXByaW1hcnlgIGFuZCBgY20tY3Vyc29yLXNlY29uZGFyeWApLlxuXG5UaGlzIGFsbG93cyB0aGUgZWRpdG9yIHRvIGRpc3BsYXkgc2Vjb25kYXJ5IHNlbGVjdGlvbiByYW5nZXMsIGFuZFxudGVuZHMgdG8gcHJvZHVjZSBhIHR5cGUgb2Ygc2VsZWN0aW9uIG1vcmUgaW4gbGluZSB3aXRoIHRoYXQgdXNlcnNcbmV4cGVjdCBpbiBhIHRleHQgZWRpdG9yICh0aGUgbmF0aXZlIHNlbGVjdGlvbiBzdHlsaW5nIHdpbGwgb2Z0ZW5cbmxlYXZlIGdhcHMgYmV0d2VlbiBsaW5lcyBhbmQgd29uJ3QgZmlsbCB0aGUgaG9yaXpvbnRhbCBzcGFjZSBhZnRlclxuYSBsaW5lIHdoZW4gdGhlIHNlbGVjdGlvbiBjb250aW51ZXMgcGFzdCBpdCkuXG5cbkl0IGRvZXMgaGF2ZSBhIHBlcmZvcm1hbmNlIGNvc3QsIGluIHRoYXQgaXQgcmVxdWlyZXMgYW4gZXh0cmEgRE9NXG5sYXlvdXQgY3ljbGUgZm9yIG1hbnkgdXBkYXRlcyAodGhlIHNlbGVjdGlvbiBpcyBkcmF3biBiYXNlZCBvbiBET01cbmxheW91dCBpbmZvcm1hdGlvbiB0aGF0J3Mgb25seSBhdmFpbGFibGUgYWZ0ZXIgbGF5aW5nIG91dCB0aGVcbmNvbnRlbnQpLlxuKi9cbmZ1bmN0aW9uIGRyYXdTZWxlY3Rpb24oY29uZmlnID0ge30pIHtcbiAgICByZXR1cm4gW1xuICAgICAgICBzZWxlY3Rpb25Db25maWcub2YoY29uZmlnKSxcbiAgICAgICAgY3Vyc29yTGF5ZXIsXG4gICAgICAgIHNlbGVjdGlvbkxheWVyLFxuICAgICAgICBoaWRlTmF0aXZlU2VsZWN0aW9uLFxuICAgICAgICBuYXRpdmVTZWxlY3Rpb25IaWRkZW4ub2YodHJ1ZSlcbiAgICBdO1xufVxuLyoqXG5SZXRyaWV2ZSB0aGUgW2BkcmF3U2VsZWN0aW9uYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyN2aWV3LmRyYXdTZWxlY3Rpb24pIGNvbmZpZ3VyYXRpb25cbmZvciB0aGlzIHN0YXRlLiAoTm90ZSB0aGF0IHRoaXMgd2lsbCByZXR1cm4gYSBzZXQgb2YgZGVmYXVsdHMgZXZlblxuaWYgYGRyYXdTZWxlY3Rpb25gIGlzbid0IGVuYWJsZWQuKVxuKi9cbmZ1bmN0aW9uIGdldERyYXdTZWxlY3Rpb25Db25maWcoc3RhdGUpIHtcbiAgICByZXR1cm4gc3RhdGUuZmFjZXQoc2VsZWN0aW9uQ29uZmlnKTtcbn1cbmZ1bmN0aW9uIGNvbmZpZ0NoYW5nZWQodXBkYXRlKSB7XG4gICAgcmV0dXJuIHVwZGF0ZS5zdGFydFN0YXRlLmZhY2V0KHNlbGVjdGlvbkNvbmZpZykgIT0gdXBkYXRlLnN0YXRlLmZhY2V0KHNlbGVjdGlvbkNvbmZpZyk7XG59XG5jb25zdCBjdXJzb3JMYXllciA9IGxheWVyKHtcbiAgICBhYm92ZTogdHJ1ZSxcbiAgICBtYXJrZXJzKHZpZXcpIHtcbiAgICAgICAgbGV0IHsgc3RhdGU6IHN0YXRlJDEgfSA9IHZpZXcsIGNvbmYgPSBzdGF0ZSQxLmZhY2V0KHNlbGVjdGlvbkNvbmZpZyk7XG4gICAgICAgIGxldCBjdXJzb3JzID0gW107XG4gICAgICAgIGZvciAobGV0IHIgb2Ygc3RhdGUkMS5zZWxlY3Rpb24ucmFuZ2VzKSB7XG4gICAgICAgICAgICBsZXQgcHJpbSA9IHIgPT0gc3RhdGUkMS5zZWxlY3Rpb24ubWFpbjtcbiAgICAgICAgICAgIGlmIChyLmVtcHR5ID8gIXByaW0gfHwgQ2FuSGlkZVByaW1hcnkgOiBjb25mLmRyYXdSYW5nZUN1cnNvcikge1xuICAgICAgICAgICAgICAgIGxldCBjbGFzc05hbWUgPSBwcmltID8gXCJjbS1jdXJzb3IgY20tY3Vyc29yLXByaW1hcnlcIiA6IFwiY20tY3Vyc29yIGNtLWN1cnNvci1zZWNvbmRhcnlcIjtcbiAgICAgICAgICAgICAgICBsZXQgY3Vyc29yID0gci5lbXB0eSA/IHIgOiBzdGF0ZS5FZGl0b3JTZWxlY3Rpb24uY3Vyc29yKHIuaGVhZCwgci5oZWFkID4gci5hbmNob3IgPyAtMSA6IDEpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IHBpZWNlIG9mIFJlY3RhbmdsZU1hcmtlci5mb3JSYW5nZSh2aWV3LCBjbGFzc05hbWUsIGN1cnNvcikpXG4gICAgICAgICAgICAgICAgICAgIGN1cnNvcnMucHVzaChwaWVjZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGN1cnNvcnM7XG4gICAgfSxcbiAgICB1cGRhdGUodXBkYXRlLCBkb20pIHtcbiAgICAgICAgaWYgKHVwZGF0ZS50cmFuc2FjdGlvbnMuc29tZSh0ciA9PiB0ci5zZWxlY3Rpb24pKVxuICAgICAgICAgICAgZG9tLnN0eWxlLmFuaW1hdGlvbk5hbWUgPSBkb20uc3R5bGUuYW5pbWF0aW9uTmFtZSA9PSBcImNtLWJsaW5rXCIgPyBcImNtLWJsaW5rMlwiIDogXCJjbS1ibGlua1wiO1xuICAgICAgICBsZXQgY29uZkNoYW5nZSA9IGNvbmZpZ0NoYW5nZWQodXBkYXRlKTtcbiAgICAgICAgaWYgKGNvbmZDaGFuZ2UpXG4gICAgICAgICAgICBzZXRCbGlua1JhdGUodXBkYXRlLnN0YXRlLCBkb20pO1xuICAgICAgICByZXR1cm4gdXBkYXRlLmRvY0NoYW5nZWQgfHwgdXBkYXRlLnNlbGVjdGlvblNldCB8fCBjb25mQ2hhbmdlO1xuICAgIH0sXG4gICAgbW91bnQoZG9tLCB2aWV3KSB7XG4gICAgICAgIHNldEJsaW5rUmF0ZSh2aWV3LnN0YXRlLCBkb20pO1xuICAgIH0sXG4gICAgY2xhc3M6IFwiY20tY3Vyc29yTGF5ZXJcIlxufSk7XG5mdW5jdGlvbiBzZXRCbGlua1JhdGUoc3RhdGUsIGRvbSkge1xuICAgIGRvbS5zdHlsZS5hbmltYXRpb25EdXJhdGlvbiA9IHN0YXRlLmZhY2V0KHNlbGVjdGlvbkNvbmZpZykuY3Vyc29yQmxpbmtSYXRlICsgXCJtc1wiO1xufVxuY29uc3Qgc2VsZWN0aW9uTGF5ZXIgPSBsYXllcih7XG4gICAgYWJvdmU6IGZhbHNlLFxuICAgIG1hcmtlcnModmlldykge1xuICAgICAgICByZXR1cm4gdmlldy5zdGF0ZS5zZWxlY3Rpb24ucmFuZ2VzLm1hcChyID0+IHIuZW1wdHkgPyBbXSA6IFJlY3RhbmdsZU1hcmtlci5mb3JSYW5nZSh2aWV3LCBcImNtLXNlbGVjdGlvbkJhY2tncm91bmRcIiwgcikpXG4gICAgICAgICAgICAucmVkdWNlKChhLCBiKSA9PiBhLmNvbmNhdChiKSk7XG4gICAgfSxcbiAgICB1cGRhdGUodXBkYXRlLCBkb20pIHtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZS5kb2NDaGFuZ2VkIHx8IHVwZGF0ZS5zZWxlY3Rpb25TZXQgfHwgdXBkYXRlLnZpZXdwb3J0Q2hhbmdlZCB8fCBjb25maWdDaGFuZ2VkKHVwZGF0ZSk7XG4gICAgfSxcbiAgICBjbGFzczogXCJjbS1zZWxlY3Rpb25MYXllclwiXG59KTtcbmNvbnN0IHRoZW1lU3BlYyA9IHtcbiAgICBcIi5jbS1saW5lXCI6IHtcbiAgICAgICAgXCImIDo6c2VsZWN0aW9uLCAmOjpzZWxlY3Rpb25cIjogeyBiYWNrZ3JvdW5kQ29sb3I6IFwidHJhbnNwYXJlbnQgIWltcG9ydGFudFwiIH0sXG4gICAgfSxcbiAgICBcIi5jbS1jb250ZW50XCI6IHtcbiAgICAgICAgXCImIDpmb2N1c1wiOiB7XG4gICAgICAgICAgICBjYXJldENvbG9yOiBcImluaXRpYWwgIWltcG9ydGFudFwiLFxuICAgICAgICAgICAgXCImOjpzZWxlY3Rpb24sICYgOjpzZWxlY3Rpb25cIjoge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJIaWdobGlnaHQgIWltcG9ydGFudFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuaWYgKENhbkhpZGVQcmltYXJ5KVxuICAgIHRoZW1lU3BlY1tcIi5jbS1saW5lXCJdLmNhcmV0Q29sb3IgPSB0aGVtZVNwZWNbXCIuY20tY29udGVudFwiXS5jYXJldENvbG9yID0gXCJ0cmFuc3BhcmVudCAhaW1wb3J0YW50XCI7XG5jb25zdCBoaWRlTmF0aXZlU2VsZWN0aW9uID0gc3RhdGUuUHJlYy5oaWdoZXN0KEVkaXRvclZpZXcudGhlbWUodGhlbWVTcGVjKSk7XG5cbmNvbnN0IHNldERyb3BDdXJzb3JQb3MgPSBzdGF0ZS5TdGF0ZUVmZmVjdC5kZWZpbmUoe1xuICAgIG1hcChwb3MsIG1hcHBpbmcpIHsgcmV0dXJuIHBvcyA9PSBudWxsID8gbnVsbCA6IG1hcHBpbmcubWFwUG9zKHBvcyk7IH1cbn0pO1xuY29uc3QgZHJvcEN1cnNvclBvcyA9IHN0YXRlLlN0YXRlRmllbGQuZGVmaW5lKHtcbiAgICBjcmVhdGUoKSB7IHJldHVybiBudWxsOyB9LFxuICAgIHVwZGF0ZShwb3MsIHRyKSB7XG4gICAgICAgIGlmIChwb3MgIT0gbnVsbClcbiAgICAgICAgICAgIHBvcyA9IHRyLmNoYW5nZXMubWFwUG9zKHBvcyk7XG4gICAgICAgIHJldHVybiB0ci5lZmZlY3RzLnJlZHVjZSgocG9zLCBlKSA9PiBlLmlzKHNldERyb3BDdXJzb3JQb3MpID8gZS52YWx1ZSA6IHBvcywgcG9zKTtcbiAgICB9XG59KTtcbmNvbnN0IGRyYXdEcm9wQ3Vyc29yID0gVmlld1BsdWdpbi5mcm9tQ2xhc3MoY2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKHZpZXcpIHtcbiAgICAgICAgdGhpcy52aWV3ID0gdmlldztcbiAgICAgICAgdGhpcy5jdXJzb3IgPSBudWxsO1xuICAgICAgICB0aGlzLm1lYXN1cmVSZXEgPSB7IHJlYWQ6IHRoaXMucmVhZFBvcy5iaW5kKHRoaXMpLCB3cml0ZTogdGhpcy5kcmF3Q3Vyc29yLmJpbmQodGhpcykgfTtcbiAgICB9XG4gICAgdXBkYXRlKHVwZGF0ZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGxldCBjdXJzb3JQb3MgPSB1cGRhdGUuc3RhdGUuZmllbGQoZHJvcEN1cnNvclBvcyk7XG4gICAgICAgIGlmIChjdXJzb3JQb3MgPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY3Vyc29yICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAoX2EgPSB0aGlzLmN1cnNvcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuY3Vyc29yID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5jdXJzb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnNvciA9IHRoaXMudmlldy5zY3JvbGxET00uYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJzb3IuY2xhc3NOYW1lID0gXCJjbS1kcm9wQ3Vyc29yXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodXBkYXRlLnN0YXJ0U3RhdGUuZmllbGQoZHJvcEN1cnNvclBvcykgIT0gY3Vyc29yUG9zIHx8IHVwZGF0ZS5kb2NDaGFuZ2VkIHx8IHVwZGF0ZS5nZW9tZXRyeUNoYW5nZWQpXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LnJlcXVlc3RNZWFzdXJlKHRoaXMubWVhc3VyZVJlcSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVhZFBvcygpIHtcbiAgICAgICAgbGV0IHsgdmlldyB9ID0gdGhpcztcbiAgICAgICAgbGV0IHBvcyA9IHZpZXcuc3RhdGUuZmllbGQoZHJvcEN1cnNvclBvcyk7XG4gICAgICAgIGxldCByZWN0ID0gcG9zICE9IG51bGwgJiYgdmlldy5jb29yZHNBdFBvcyhwb3MpO1xuICAgICAgICBpZiAoIXJlY3QpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgbGV0IG91dGVyID0gdmlldy5zY3JvbGxET00uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsZWZ0OiByZWN0LmxlZnQgLSBvdXRlci5sZWZ0ICsgdmlldy5zY3JvbGxET00uc2Nyb2xsTGVmdCAqIHZpZXcuc2NhbGVYLFxuICAgICAgICAgICAgdG9wOiByZWN0LnRvcCAtIG91dGVyLnRvcCArIHZpZXcuc2Nyb2xsRE9NLnNjcm9sbFRvcCAqIHZpZXcuc2NhbGVZLFxuICAgICAgICAgICAgaGVpZ2h0OiByZWN0LmJvdHRvbSAtIHJlY3QudG9wXG4gICAgICAgIH07XG4gICAgfVxuICAgIGRyYXdDdXJzb3IocG9zKSB7XG4gICAgICAgIGlmICh0aGlzLmN1cnNvcikge1xuICAgICAgICAgICAgbGV0IHsgc2NhbGVYLCBzY2FsZVkgfSA9IHRoaXMudmlldztcbiAgICAgICAgICAgIGlmIChwb3MpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnNvci5zdHlsZS5sZWZ0ID0gcG9zLmxlZnQgLyBzY2FsZVggKyBcInB4XCI7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJzb3Iuc3R5bGUudG9wID0gcG9zLnRvcCAvIHNjYWxlWSArIFwicHhcIjtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnNvci5zdHlsZS5oZWlnaHQgPSBwb3MuaGVpZ2h0IC8gc2NhbGVZICsgXCJweFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJzb3Iuc3R5bGUubGVmdCA9IFwiLTEwMDAwMHB4XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgaWYgKHRoaXMuY3Vyc29yKVxuICAgICAgICAgICAgdGhpcy5jdXJzb3IucmVtb3ZlKCk7XG4gICAgfVxuICAgIHNldERyb3BQb3MocG9zKSB7XG4gICAgICAgIGlmICh0aGlzLnZpZXcuc3RhdGUuZmllbGQoZHJvcEN1cnNvclBvcykgIT0gcG9zKVxuICAgICAgICAgICAgdGhpcy52aWV3LmRpc3BhdGNoKHsgZWZmZWN0czogc2V0RHJvcEN1cnNvclBvcy5vZihwb3MpIH0pO1xuICAgIH1cbn0sIHtcbiAgICBldmVudE9ic2VydmVyczoge1xuICAgICAgICBkcmFnb3ZlcihldmVudCkge1xuICAgICAgICAgICAgdGhpcy5zZXREcm9wUG9zKHRoaXMudmlldy5wb3NBdENvb3Jkcyh7IHg6IGV2ZW50LmNsaWVudFgsIHk6IGV2ZW50LmNsaWVudFkgfSkpO1xuICAgICAgICB9LFxuICAgICAgICBkcmFnbGVhdmUoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQgPT0gdGhpcy52aWV3LmNvbnRlbnRET00gfHwgIXRoaXMudmlldy5jb250ZW50RE9NLmNvbnRhaW5zKGV2ZW50LnJlbGF0ZWRUYXJnZXQpKVxuICAgICAgICAgICAgICAgIHRoaXMuc2V0RHJvcFBvcyhudWxsKTtcbiAgICAgICAgfSxcbiAgICAgICAgZHJhZ2VuZCgpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0RHJvcFBvcyhudWxsKTtcbiAgICAgICAgfSxcbiAgICAgICAgZHJvcCgpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0RHJvcFBvcyhudWxsKTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuLyoqXG5EcmF3cyBhIGN1cnNvciBhdCB0aGUgY3VycmVudCBkcm9wIHBvc2l0aW9uIHdoZW4gc29tZXRoaW5nIGlzXG5kcmFnZ2VkIG92ZXIgdGhlIGVkaXRvci5cbiovXG5mdW5jdGlvbiBkcm9wQ3Vyc29yKCkge1xuICAgIHJldHVybiBbZHJvcEN1cnNvclBvcywgZHJhd0Ryb3BDdXJzb3JdO1xufVxuXG5mdW5jdGlvbiBpdGVyTWF0Y2hlcyhkb2MsIHJlLCBmcm9tLCB0bywgZikge1xuICAgIHJlLmxhc3RJbmRleCA9IDA7XG4gICAgZm9yIChsZXQgY3Vyc29yID0gZG9jLml0ZXJSYW5nZShmcm9tLCB0byksIHBvcyA9IGZyb20sIG07ICFjdXJzb3IubmV4dCgpLmRvbmU7IHBvcyArPSBjdXJzb3IudmFsdWUubGVuZ3RoKSB7XG4gICAgICAgIGlmICghY3Vyc29yLmxpbmVCcmVhaylcbiAgICAgICAgICAgIHdoaWxlIChtID0gcmUuZXhlYyhjdXJzb3IudmFsdWUpKVxuICAgICAgICAgICAgICAgIGYocG9zICsgbS5pbmRleCwgbSk7XG4gICAgfVxufVxuZnVuY3Rpb24gbWF0Y2hSYW5nZXModmlldywgbWF4TGVuZ3RoKSB7XG4gICAgbGV0IHZpc2libGUgPSB2aWV3LnZpc2libGVSYW5nZXM7XG4gICAgaWYgKHZpc2libGUubGVuZ3RoID09IDEgJiYgdmlzaWJsZVswXS5mcm9tID09IHZpZXcudmlld3BvcnQuZnJvbSAmJlxuICAgICAgICB2aXNpYmxlWzBdLnRvID09IHZpZXcudmlld3BvcnQudG8pXG4gICAgICAgIHJldHVybiB2aXNpYmxlO1xuICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICBmb3IgKGxldCB7IGZyb20sIHRvIH0gb2YgdmlzaWJsZSkge1xuICAgICAgICBmcm9tID0gTWF0aC5tYXgodmlldy5zdGF0ZS5kb2MubGluZUF0KGZyb20pLmZyb20sIGZyb20gLSBtYXhMZW5ndGgpO1xuICAgICAgICB0byA9IE1hdGgubWluKHZpZXcuc3RhdGUuZG9jLmxpbmVBdCh0bykudG8sIHRvICsgbWF4TGVuZ3RoKTtcbiAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGggJiYgcmVzdWx0W3Jlc3VsdC5sZW5ndGggLSAxXS50byA+PSBmcm9tKVxuICAgICAgICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGggLSAxXS50byA9IHRvO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXN1bHQucHVzaCh7IGZyb20sIHRvIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG5IZWxwZXIgY2xhc3MgdXNlZCB0byBtYWtlIGl0IGVhc2llciB0byBtYWludGFpbiBkZWNvcmF0aW9ucyBvblxudmlzaWJsZSBjb2RlIHRoYXQgbWF0Y2hlcyBhIGdpdmVuIHJlZ3VsYXIgZXhwcmVzc2lvbi4gVG8gYmUgdXNlZFxuaW4gYSBbdmlldyBwbHVnaW5dKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jdmlldy5WaWV3UGx1Z2luKS4gSW5zdGFuY2VzIG9mIHRoaXMgb2JqZWN0XG5yZXByZXNlbnQgYSBtYXRjaGluZyBjb25maWd1cmF0aW9uLlxuKi9cbmNsYXNzIE1hdGNoRGVjb3JhdG9yIHtcbiAgICAvKipcbiAgICBDcmVhdGUgYSBkZWNvcmF0b3IuXG4gICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICAgICAgY29uc3QgeyByZWdleHAsIGRlY29yYXRpb24sIGRlY29yYXRlLCBib3VuZGFyeSwgbWF4TGVuZ3RoID0gMTAwMCB9ID0gY29uZmlnO1xuICAgICAgICBpZiAoIXJlZ2V4cC5nbG9iYWwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlRoZSByZWd1bGFyIGV4cHJlc3Npb24gZ2l2ZW4gdG8gTWF0Y2hEZWNvcmF0b3Igc2hvdWxkIGhhdmUgaXRzICdnJyBmbGFnIHNldFwiKTtcbiAgICAgICAgdGhpcy5yZWdleHAgPSByZWdleHA7XG4gICAgICAgIGlmIChkZWNvcmF0ZSkge1xuICAgICAgICAgICAgdGhpcy5hZGRNYXRjaCA9IChtYXRjaCwgdmlldywgZnJvbSwgYWRkKSA9PiBkZWNvcmF0ZShhZGQsIGZyb20sIGZyb20gKyBtYXRjaFswXS5sZW5ndGgsIG1hdGNoLCB2aWV3KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgZGVjb3JhdGlvbiA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkTWF0Y2ggPSAobWF0Y2gsIHZpZXcsIGZyb20sIGFkZCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBkZWNvID0gZGVjb3JhdGlvbihtYXRjaCwgdmlldywgZnJvbSk7XG4gICAgICAgICAgICAgICAgaWYgKGRlY28pXG4gICAgICAgICAgICAgICAgICAgIGFkZChmcm9tLCBmcm9tICsgbWF0Y2hbMF0ubGVuZ3RoLCBkZWNvKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGVjb3JhdGlvbikge1xuICAgICAgICAgICAgdGhpcy5hZGRNYXRjaCA9IChtYXRjaCwgX3ZpZXcsIGZyb20sIGFkZCkgPT4gYWRkKGZyb20sIGZyb20gKyBtYXRjaFswXS5sZW5ndGgsIGRlY29yYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJFaXRoZXIgJ2RlY29yYXRlJyBvciAnZGVjb3JhdGlvbicgc2hvdWxkIGJlIHByb3ZpZGVkIHRvIE1hdGNoRGVjb3JhdG9yXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYm91bmRhcnkgPSBib3VuZGFyeTtcbiAgICAgICAgdGhpcy5tYXhMZW5ndGggPSBtYXhMZW5ndGg7XG4gICAgfVxuICAgIC8qKlxuICAgIENvbXB1dGUgdGhlIGZ1bGwgc2V0IG9mIGRlY29yYXRpb25zIGZvciBtYXRjaGVzIGluIHRoZSBnaXZlblxuICAgIHZpZXcncyB2aWV3cG9ydC4gWW91J2xsIHdhbnQgdG8gY2FsbCB0aGlzIHdoZW4gaW5pdGlhbGl6aW5nIHlvdXJcbiAgICBwbHVnaW4uXG4gICAgKi9cbiAgICBjcmVhdGVEZWNvKHZpZXcpIHtcbiAgICAgICAgbGV0IGJ1aWxkID0gbmV3IHN0YXRlLlJhbmdlU2V0QnVpbGRlcigpLCBhZGQgPSBidWlsZC5hZGQuYmluZChidWlsZCk7XG4gICAgICAgIGZvciAobGV0IHsgZnJvbSwgdG8gfSBvZiBtYXRjaFJhbmdlcyh2aWV3LCB0aGlzLm1heExlbmd0aCkpXG4gICAgICAgICAgICBpdGVyTWF0Y2hlcyh2aWV3LnN0YXRlLmRvYywgdGhpcy5yZWdleHAsIGZyb20sIHRvLCAoZnJvbSwgbSkgPT4gdGhpcy5hZGRNYXRjaChtLCB2aWV3LCBmcm9tLCBhZGQpKTtcbiAgICAgICAgcmV0dXJuIGJ1aWxkLmZpbmlzaCgpO1xuICAgIH1cbiAgICAvKipcbiAgICBVcGRhdGUgYSBzZXQgb2YgZGVjb3JhdGlvbnMgZm9yIGEgdmlldyB1cGRhdGUuIGBkZWNvYCBfbXVzdF8gYmVcbiAgICB0aGUgc2V0IG9mIGRlY29yYXRpb25zIHByb2R1Y2VkIGJ5IF90aGlzXyBgTWF0Y2hEZWNvcmF0b3JgIGZvclxuICAgIHRoZSB2aWV3IHN0YXRlIGJlZm9yZSB0aGUgdXBkYXRlLlxuICAgICovXG4gICAgdXBkYXRlRGVjbyh1cGRhdGUsIGRlY28pIHtcbiAgICAgICAgbGV0IGNoYW5nZUZyb20gPSAxZTksIGNoYW5nZVRvID0gLTE7XG4gICAgICAgIGlmICh1cGRhdGUuZG9jQ2hhbmdlZClcbiAgICAgICAgICAgIHVwZGF0ZS5jaGFuZ2VzLml0ZXJDaGFuZ2VzKChfZiwgX3QsIGZyb20sIHRvKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRvID4gdXBkYXRlLnZpZXcudmlld3BvcnQuZnJvbSAmJiBmcm9tIDwgdXBkYXRlLnZpZXcudmlld3BvcnQudG8pIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlRnJvbSA9IE1hdGgubWluKGZyb20sIGNoYW5nZUZyb20pO1xuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VUbyA9IE1hdGgubWF4KHRvLCBjaGFuZ2VUbyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIGlmICh1cGRhdGUudmlld3BvcnRDaGFuZ2VkIHx8IGNoYW5nZVRvIC0gY2hhbmdlRnJvbSA+IDEwMDApXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVEZWNvKHVwZGF0ZS52aWV3KTtcbiAgICAgICAgaWYgKGNoYW5nZVRvID4gLTEpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy51cGRhdGVSYW5nZSh1cGRhdGUudmlldywgZGVjby5tYXAodXBkYXRlLmNoYW5nZXMpLCBjaGFuZ2VGcm9tLCBjaGFuZ2VUbyk7XG4gICAgICAgIHJldHVybiBkZWNvO1xuICAgIH1cbiAgICB1cGRhdGVSYW5nZSh2aWV3LCBkZWNvLCB1cGRhdGVGcm9tLCB1cGRhdGVUbykge1xuICAgICAgICBmb3IgKGxldCByIG9mIHZpZXcudmlzaWJsZVJhbmdlcykge1xuICAgICAgICAgICAgbGV0IGZyb20gPSBNYXRoLm1heChyLmZyb20sIHVwZGF0ZUZyb20pLCB0byA9IE1hdGgubWluKHIudG8sIHVwZGF0ZVRvKTtcbiAgICAgICAgICAgIGlmICh0byA+IGZyb20pIHtcbiAgICAgICAgICAgICAgICBsZXQgZnJvbUxpbmUgPSB2aWV3LnN0YXRlLmRvYy5saW5lQXQoZnJvbSksIHRvTGluZSA9IGZyb21MaW5lLnRvIDwgdG8gPyB2aWV3LnN0YXRlLmRvYy5saW5lQXQodG8pIDogZnJvbUxpbmU7XG4gICAgICAgICAgICAgICAgbGV0IHN0YXJ0ID0gTWF0aC5tYXgoci5mcm9tLCBmcm9tTGluZS5mcm9tKSwgZW5kID0gTWF0aC5taW4oci50bywgdG9MaW5lLnRvKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ib3VuZGFyeSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKDsgZnJvbSA+IGZyb21MaW5lLmZyb207IGZyb20tLSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmJvdW5kYXJ5LnRlc3QoZnJvbUxpbmUudGV4dFtmcm9tIC0gMSAtIGZyb21MaW5lLmZyb21dKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gZnJvbTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZm9yICg7IHRvIDwgdG9MaW5lLnRvOyB0bysrKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYm91bmRhcnkudGVzdCh0b0xpbmUudGV4dFt0byAtIHRvTGluZS5mcm9tXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSB0bztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IHJhbmdlcyA9IFtdLCBtO1xuICAgICAgICAgICAgICAgIGxldCBhZGQgPSAoZnJvbSwgdG8sIGRlY28pID0+IHJhbmdlcy5wdXNoKGRlY28ucmFuZ2UoZnJvbSwgdG8pKTtcbiAgICAgICAgICAgICAgICBpZiAoZnJvbUxpbmUgPT0gdG9MaW5lKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVnZXhwLmxhc3RJbmRleCA9IHN0YXJ0IC0gZnJvbUxpbmUuZnJvbTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChtID0gdGhpcy5yZWdleHAuZXhlYyhmcm9tTGluZS50ZXh0KSkgJiYgbS5pbmRleCA8IGVuZCAtIGZyb21MaW5lLmZyb20pXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZE1hdGNoKG0sIHZpZXcsIG0uaW5kZXggKyBmcm9tTGluZS5mcm9tLCBhZGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlck1hdGNoZXModmlldy5zdGF0ZS5kb2MsIHRoaXMucmVnZXhwLCBzdGFydCwgZW5kLCAoZnJvbSwgbSkgPT4gdGhpcy5hZGRNYXRjaChtLCB2aWV3LCBmcm9tLCBhZGQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVjbyA9IGRlY28udXBkYXRlKHsgZmlsdGVyRnJvbTogc3RhcnQsIGZpbHRlclRvOiBlbmQsIGZpbHRlcjogKGZyb20sIHRvKSA9PiBmcm9tIDwgc3RhcnQgfHwgdG8gPiBlbmQsIGFkZDogcmFuZ2VzIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWNvO1xuICAgIH1cbn1cblxuY29uc3QgVW5pY29kZVJlZ2V4cFN1cHBvcnQgPSAveC8udW5pY29kZSAhPSBudWxsID8gXCJndVwiIDogXCJnXCI7XG5jb25zdCBTcGVjaWFscyA9IG5ldyBSZWdFeHAoXCJbXFx1MDAwMC1cXHUwMDA4XFx1MDAwYS1cXHUwMDFmXFx1MDA3Zi1cXHUwMDlmXFx1MDBhZFxcdTA2MWNcXHUyMDBiXFx1MjAwZVxcdTIwMGZcXHUyMDI4XFx1MjAyOVxcdTIwMmRcXHUyMDJlXFx1MjA2NlxcdTIwNjdcXHUyMDY5XFx1ZmVmZlxcdWZmZjktXFx1ZmZmY11cIiwgVW5pY29kZVJlZ2V4cFN1cHBvcnQpO1xuY29uc3QgTmFtZXMgPSB7XG4gICAgMDogXCJudWxsXCIsXG4gICAgNzogXCJiZWxsXCIsXG4gICAgODogXCJiYWNrc3BhY2VcIixcbiAgICAxMDogXCJuZXdsaW5lXCIsXG4gICAgMTE6IFwidmVydGljYWwgdGFiXCIsXG4gICAgMTM6IFwiY2FycmlhZ2UgcmV0dXJuXCIsXG4gICAgMjc6IFwiZXNjYXBlXCIsXG4gICAgODIwMzogXCJ6ZXJvIHdpZHRoIHNwYWNlXCIsXG4gICAgODIwNDogXCJ6ZXJvIHdpZHRoIG5vbi1qb2luZXJcIixcbiAgICA4MjA1OiBcInplcm8gd2lkdGggam9pbmVyXCIsXG4gICAgODIwNjogXCJsZWZ0LXRvLXJpZ2h0IG1hcmtcIixcbiAgICA4MjA3OiBcInJpZ2h0LXRvLWxlZnQgbWFya1wiLFxuICAgIDgyMzI6IFwibGluZSBzZXBhcmF0b3JcIixcbiAgICA4MjM3OiBcImxlZnQtdG8tcmlnaHQgb3ZlcnJpZGVcIixcbiAgICA4MjM4OiBcInJpZ2h0LXRvLWxlZnQgb3ZlcnJpZGVcIixcbiAgICA4Mjk0OiBcImxlZnQtdG8tcmlnaHQgaXNvbGF0ZVwiLFxuICAgIDgyOTU6IFwicmlnaHQtdG8tbGVmdCBpc29sYXRlXCIsXG4gICAgODI5NzogXCJwb3AgZGlyZWN0aW9uYWwgaXNvbGF0ZVwiLFxuICAgIDgyMzM6IFwicGFyYWdyYXBoIHNlcGFyYXRvclwiLFxuICAgIDY1Mjc5OiBcInplcm8gd2lkdGggbm8tYnJlYWsgc3BhY2VcIixcbiAgICA2NTUzMjogXCJvYmplY3QgcmVwbGFjZW1lbnRcIlxufTtcbmxldCBfc3VwcG9ydHNUYWJTaXplID0gbnVsbDtcbmZ1bmN0aW9uIHN1cHBvcnRzVGFiU2l6ZSgpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKF9zdXBwb3J0c1RhYlNpemUgPT0gbnVsbCAmJiB0eXBlb2YgZG9jdW1lbnQgIT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudC5ib2R5KSB7XG4gICAgICAgIGxldCBzdHlsZXMgPSBkb2N1bWVudC5ib2R5LnN0eWxlO1xuICAgICAgICBfc3VwcG9ydHNUYWJTaXplID0gKChfYSA9IHN0eWxlcy50YWJTaXplKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBzdHlsZXMuTW96VGFiU2l6ZSkgIT0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIF9zdXBwb3J0c1RhYlNpemUgfHwgZmFsc2U7XG59XG5jb25zdCBzcGVjaWFsQ2hhckNvbmZpZyA9IHN0YXRlLkZhY2V0LmRlZmluZSh7XG4gICAgY29tYmluZShjb25maWdzKSB7XG4gICAgICAgIGxldCBjb25maWcgPSBzdGF0ZS5jb21iaW5lQ29uZmlnKGNvbmZpZ3MsIHtcbiAgICAgICAgICAgIHJlbmRlcjogbnVsbCxcbiAgICAgICAgICAgIHNwZWNpYWxDaGFyczogU3BlY2lhbHMsXG4gICAgICAgICAgICBhZGRTcGVjaWFsQ2hhcnM6IG51bGxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChjb25maWcucmVwbGFjZVRhYnMgPSAhc3VwcG9ydHNUYWJTaXplKCkpXG4gICAgICAgICAgICBjb25maWcuc3BlY2lhbENoYXJzID0gbmV3IFJlZ0V4cChcIlxcdHxcIiArIGNvbmZpZy5zcGVjaWFsQ2hhcnMuc291cmNlLCBVbmljb2RlUmVnZXhwU3VwcG9ydCk7XG4gICAgICAgIGlmIChjb25maWcuYWRkU3BlY2lhbENoYXJzKVxuICAgICAgICAgICAgY29uZmlnLnNwZWNpYWxDaGFycyA9IG5ldyBSZWdFeHAoY29uZmlnLnNwZWNpYWxDaGFycy5zb3VyY2UgKyBcInxcIiArIGNvbmZpZy5hZGRTcGVjaWFsQ2hhcnMuc291cmNlLCBVbmljb2RlUmVnZXhwU3VwcG9ydCk7XG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgfVxufSk7XG4vKipcblJldHVybnMgYW4gZXh0ZW5zaW9uIHRoYXQgaW5zdGFsbHMgaGlnaGxpZ2h0aW5nIG9mIHNwZWNpYWxcbmNoYXJhY3RlcnMuXG4qL1xuZnVuY3Rpb24gaGlnaGxpZ2h0U3BlY2lhbENoYXJzKFxuLyoqXG5Db25maWd1cmF0aW9uIG9wdGlvbnMuXG4qL1xuY29uZmlnID0ge30pIHtcbiAgICByZXR1cm4gW3NwZWNpYWxDaGFyQ29uZmlnLm9mKGNvbmZpZyksIHNwZWNpYWxDaGFyUGx1Z2luKCldO1xufVxubGV0IF9wbHVnaW4gPSBudWxsO1xuZnVuY3Rpb24gc3BlY2lhbENoYXJQbHVnaW4oKSB7XG4gICAgcmV0dXJuIF9wbHVnaW4gfHwgKF9wbHVnaW4gPSBWaWV3UGx1Z2luLmZyb21DbGFzcyhjbGFzcyB7XG4gICAgICAgIGNvbnN0cnVjdG9yKHZpZXcpIHtcbiAgICAgICAgICAgIHRoaXMudmlldyA9IHZpZXc7XG4gICAgICAgICAgICB0aGlzLmRlY29yYXRpb25zID0gRGVjb3JhdGlvbi5ub25lO1xuICAgICAgICAgICAgdGhpcy5kZWNvcmF0aW9uQ2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgICAgdGhpcy5kZWNvcmF0b3IgPSB0aGlzLm1ha2VEZWNvcmF0b3Iodmlldy5zdGF0ZS5mYWNldChzcGVjaWFsQ2hhckNvbmZpZykpO1xuICAgICAgICAgICAgdGhpcy5kZWNvcmF0aW9ucyA9IHRoaXMuZGVjb3JhdG9yLmNyZWF0ZURlY28odmlldyk7XG4gICAgICAgIH1cbiAgICAgICAgbWFrZURlY29yYXRvcihjb25mKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IE1hdGNoRGVjb3JhdG9yKHtcbiAgICAgICAgICAgICAgICByZWdleHA6IGNvbmYuc3BlY2lhbENoYXJzLFxuICAgICAgICAgICAgICAgIGRlY29yYXRpb246IChtLCB2aWV3LCBwb3MpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHsgZG9jIH0gPSB2aWV3LnN0YXRlO1xuICAgICAgICAgICAgICAgICAgICBsZXQgY29kZSA9IHN0YXRlLmNvZGVQb2ludEF0KG1bMF0sIDApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29kZSA9PSA5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGluZSA9IGRvYy5saW5lQXQocG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzaXplID0gdmlldy5zdGF0ZS50YWJTaXplLCBjb2wgPSBzdGF0ZS5jb3VudENvbHVtbihsaW5lLnRleHQsIHNpemUsIHBvcyAtIGxpbmUuZnJvbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRGVjb3JhdGlvbi5yZXBsYWNlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWRnZXQ6IG5ldyBUYWJXaWRnZXQoKHNpemUgLSAoY29sICUgc2l6ZSkpICogdGhpcy52aWV3LmRlZmF1bHRDaGFyYWN0ZXJXaWR0aCAvIHRoaXMudmlldy5zY2FsZVgpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kZWNvcmF0aW9uQ2FjaGVbY29kZV0gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmRlY29yYXRpb25DYWNoZVtjb2RlXSA9IERlY29yYXRpb24ucmVwbGFjZSh7IHdpZGdldDogbmV3IFNwZWNpYWxDaGFyV2lkZ2V0KGNvbmYsIGNvZGUpIH0pKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJvdW5kYXJ5OiBjb25mLnJlcGxhY2VUYWJzID8gdW5kZWZpbmVkIDogL1teXS9cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZSh1cGRhdGUpIHtcbiAgICAgICAgICAgIGxldCBjb25mID0gdXBkYXRlLnN0YXRlLmZhY2V0KHNwZWNpYWxDaGFyQ29uZmlnKTtcbiAgICAgICAgICAgIGlmICh1cGRhdGUuc3RhcnRTdGF0ZS5mYWNldChzcGVjaWFsQ2hhckNvbmZpZykgIT0gY29uZikge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVjb3JhdG9yID0gdGhpcy5tYWtlRGVjb3JhdG9yKGNvbmYpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGVjb3JhdGlvbnMgPSB0aGlzLmRlY29yYXRvci5jcmVhdGVEZWNvKHVwZGF0ZS52aWV3KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVjb3JhdGlvbnMgPSB0aGlzLmRlY29yYXRvci51cGRhdGVEZWNvKHVwZGF0ZSwgdGhpcy5kZWNvcmF0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGRlY29yYXRpb25zOiB2ID0+IHYuZGVjb3JhdGlvbnNcbiAgICB9KSk7XG59XG5jb25zdCBEZWZhdWx0UGxhY2Vob2xkZXIgPSBcIlxcdTIwMjJcIjtcbi8vIEFzc2lnbnMgcGxhY2Vob2xkZXIgY2hhcmFjdGVycyBmcm9tIHRoZSBDb250cm9sIFBpY3R1cmVzIGJsb2NrIHRvXG4vLyBBU0NJSSBjb250cm9sIGNoYXJhY3RlcnNcbmZ1bmN0aW9uIHBsYWNlaG9sZGVyJDEoY29kZSkge1xuICAgIGlmIChjb2RlID49IDMyKVxuICAgICAgICByZXR1cm4gRGVmYXVsdFBsYWNlaG9sZGVyO1xuICAgIGlmIChjb2RlID09IDEwKVxuICAgICAgICByZXR1cm4gXCJcXHUyNDI0XCI7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoOTIxNiArIGNvZGUpO1xufVxuY2xhc3MgU3BlY2lhbENoYXJXaWRnZXQgZXh0ZW5kcyBXaWRnZXRUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zLCBjb2RlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgfVxuICAgIGVxKG90aGVyKSB7IHJldHVybiBvdGhlci5jb2RlID09IHRoaXMuY29kZTsgfVxuICAgIHRvRE9NKHZpZXcpIHtcbiAgICAgICAgbGV0IHBoID0gcGxhY2Vob2xkZXIkMSh0aGlzLmNvZGUpO1xuICAgICAgICBsZXQgZGVzYyA9IHZpZXcuc3RhdGUucGhyYXNlKFwiQ29udHJvbCBjaGFyYWN0ZXJcIikgKyBcIiBcIiArIChOYW1lc1t0aGlzLmNvZGVdIHx8IFwiMHhcIiArIHRoaXMuY29kZS50b1N0cmluZygxNikpO1xuICAgICAgICBsZXQgY3VzdG9tID0gdGhpcy5vcHRpb25zLnJlbmRlciAmJiB0aGlzLm9wdGlvbnMucmVuZGVyKHRoaXMuY29kZSwgZGVzYywgcGgpO1xuICAgICAgICBpZiAoY3VzdG9tKVxuICAgICAgICAgICAgcmV0dXJuIGN1c3RvbTtcbiAgICAgICAgbGV0IHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgc3Bhbi50ZXh0Q29udGVudCA9IHBoO1xuICAgICAgICBzcGFuLnRpdGxlID0gZGVzYztcbiAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIGRlc2MpO1xuICAgICAgICBzcGFuLmNsYXNzTmFtZSA9IFwiY20tc3BlY2lhbENoYXJcIjtcbiAgICAgICAgcmV0dXJuIHNwYW47XG4gICAgfVxuICAgIGlnbm9yZUV2ZW50KCkgeyByZXR1cm4gZmFsc2U7IH1cbn1cbmNsYXNzIFRhYldpZGdldCBleHRlbmRzIFdpZGdldFR5cGUge1xuICAgIGNvbnN0cnVjdG9yKHdpZHRoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICB9XG4gICAgZXEob3RoZXIpIHsgcmV0dXJuIG90aGVyLndpZHRoID09IHRoaXMud2lkdGg7IH1cbiAgICB0b0RPTSgpIHtcbiAgICAgICAgbGV0IHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgc3Bhbi50ZXh0Q29udGVudCA9IFwiXFx0XCI7XG4gICAgICAgIHNwYW4uY2xhc3NOYW1lID0gXCJjbS10YWJcIjtcbiAgICAgICAgc3Bhbi5zdHlsZS53aWR0aCA9IHRoaXMud2lkdGggKyBcInB4XCI7XG4gICAgICAgIHJldHVybiBzcGFuO1xuICAgIH1cbiAgICBpZ25vcmVFdmVudCgpIHsgcmV0dXJuIGZhbHNlOyB9XG59XG5cbmNvbnN0IHBsdWdpbiA9IFZpZXdQbHVnaW4uZnJvbUNsYXNzKGNsYXNzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSAxMDAwO1xuICAgICAgICB0aGlzLmF0dHJzID0geyBzdHlsZTogXCJwYWRkaW5nLWJvdHRvbTogMTAwMHB4XCIgfTtcbiAgICB9XG4gICAgdXBkYXRlKHVwZGF0ZSkge1xuICAgICAgICBsZXQgeyB2aWV3IH0gPSB1cGRhdGU7XG4gICAgICAgIGxldCBoZWlnaHQgPSB2aWV3LnZpZXdTdGF0ZS5lZGl0b3JIZWlnaHQgLVxuICAgICAgICAgICAgdmlldy5kZWZhdWx0TGluZUhlaWdodCAtIHZpZXcuZG9jdW1lbnRQYWRkaW5nLnRvcCAtIDAuNTtcbiAgICAgICAgaWYgKGhlaWdodCA+PSAwICYmIGhlaWdodCAhPSB0aGlzLmhlaWdodCkge1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgICAgICB0aGlzLmF0dHJzID0geyBzdHlsZTogYHBhZGRpbmctYm90dG9tOiAke2hlaWdodH1weGAgfTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuLyoqXG5SZXR1cm5zIGFuIGV4dGVuc2lvbiB0aGF0IG1ha2VzIHN1cmUgdGhlIGNvbnRlbnQgaGFzIGEgYm90dG9tXG5tYXJnaW4gZXF1aXZhbGVudCB0byB0aGUgaGVpZ2h0IG9mIHRoZSBlZGl0b3IsIG1pbnVzIG9uZSBsaW5lXG5oZWlnaHQsIHNvIHRoYXQgZXZlcnkgbGluZSBpbiB0aGUgZG9jdW1lbnQgY2FuIGJlIHNjcm9sbGVkIHRvIHRoZVxudG9wIG9mIHRoZSBlZGl0b3IuXG5cblRoaXMgaXMgb25seSBtZWFuaW5nZnVsIHdoZW4gdGhlIGVkaXRvciBpcyBzY3JvbGxhYmxlLCBhbmQgc2hvdWxkXG5ub3QgYmUgZW5hYmxlZCBpbiBlZGl0b3JzIHRoYXQgdGFrZSB0aGUgc2l6ZSBvZiB0aGVpciBjb250ZW50LlxuKi9cbmZ1bmN0aW9uIHNjcm9sbFBhc3RFbmQoKSB7XG4gICAgcmV0dXJuIFtwbHVnaW4sIGNvbnRlbnRBdHRyaWJ1dGVzLm9mKHZpZXcgPT4geyB2YXIgX2E7IHJldHVybiAoKF9hID0gdmlldy5wbHVnaW4ocGx1Z2luKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmF0dHJzKSB8fCBudWxsOyB9KV07XG59XG5cbi8qKlxuTWFyayBsaW5lcyB0aGF0IGhhdmUgYSBjdXJzb3Igb24gdGhlbSB3aXRoIHRoZSBgXCJjbS1hY3RpdmVMaW5lXCJgXG5ET00gY2xhc3MuXG4qL1xuZnVuY3Rpb24gaGlnaGxpZ2h0QWN0aXZlTGluZSgpIHtcbiAgICByZXR1cm4gYWN0aXZlTGluZUhpZ2hsaWdodGVyO1xufVxuY29uc3QgbGluZURlY28gPSBEZWNvcmF0aW9uLmxpbmUoeyBjbGFzczogXCJjbS1hY3RpdmVMaW5lXCIgfSk7XG5jb25zdCBhY3RpdmVMaW5lSGlnaGxpZ2h0ZXIgPSBWaWV3UGx1Z2luLmZyb21DbGFzcyhjbGFzcyB7XG4gICAgY29uc3RydWN0b3Iodmlldykge1xuICAgICAgICB0aGlzLmRlY29yYXRpb25zID0gdGhpcy5nZXREZWNvKHZpZXcpO1xuICAgIH1cbiAgICB1cGRhdGUodXBkYXRlKSB7XG4gICAgICAgIGlmICh1cGRhdGUuZG9jQ2hhbmdlZCB8fCB1cGRhdGUuc2VsZWN0aW9uU2V0KVxuICAgICAgICAgICAgdGhpcy5kZWNvcmF0aW9ucyA9IHRoaXMuZ2V0RGVjbyh1cGRhdGUudmlldyk7XG4gICAgfVxuICAgIGdldERlY28odmlldykge1xuICAgICAgICBsZXQgbGFzdExpbmVTdGFydCA9IC0xLCBkZWNvID0gW107XG4gICAgICAgIGZvciAobGV0IHIgb2Ygdmlldy5zdGF0ZS5zZWxlY3Rpb24ucmFuZ2VzKSB7XG4gICAgICAgICAgICBsZXQgbGluZSA9IHZpZXcubGluZUJsb2NrQXQoci5oZWFkKTtcbiAgICAgICAgICAgIGlmIChsaW5lLmZyb20gPiBsYXN0TGluZVN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgZGVjby5wdXNoKGxpbmVEZWNvLnJhbmdlKGxpbmUuZnJvbSkpO1xuICAgICAgICAgICAgICAgIGxhc3RMaW5lU3RhcnQgPSBsaW5lLmZyb207XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIERlY29yYXRpb24uc2V0KGRlY28pO1xuICAgIH1cbn0sIHtcbiAgICBkZWNvcmF0aW9uczogdiA9PiB2LmRlY29yYXRpb25zXG59KTtcblxuY2xhc3MgUGxhY2Vob2xkZXIgZXh0ZW5kcyBXaWRnZXRUeXBlIHtcbiAgICBjb25zdHJ1Y3Rvcihjb250ZW50KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuY29udGVudCA9IGNvbnRlbnQ7XG4gICAgfVxuICAgIHRvRE9NKCkge1xuICAgICAgICBsZXQgd3JhcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgICB3cmFwLmNsYXNzTmFtZSA9IFwiY20tcGxhY2Vob2xkZXJcIjtcbiAgICAgICAgd3JhcC5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJub25lXCI7XG4gICAgICAgIHdyYXAuYXBwZW5kQ2hpbGQodHlwZW9mIHRoaXMuY29udGVudCA9PSBcInN0cmluZ1wiID8gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGhpcy5jb250ZW50KSA6IHRoaXMuY29udGVudCk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5jb250ZW50ID09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICB3cmFwLnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgXCJwbGFjZWhvbGRlciBcIiArIHRoaXMuY29udGVudCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHdyYXAuc2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIiwgXCJ0cnVlXCIpO1xuICAgICAgICByZXR1cm4gd3JhcDtcbiAgICB9XG4gICAgY29vcmRzQXQoZG9tKSB7XG4gICAgICAgIGxldCByZWN0cyA9IGRvbS5maXJzdENoaWxkID8gY2xpZW50UmVjdHNGb3IoZG9tLmZpcnN0Q2hpbGQpIDogW107XG4gICAgICAgIGlmICghcmVjdHMubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGxldCBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvbS5wYXJlbnROb2RlKTtcbiAgICAgICAgbGV0IHJlY3QgPSBmbGF0dGVuUmVjdChyZWN0c1swXSwgc3R5bGUuZGlyZWN0aW9uICE9IFwicnRsXCIpO1xuICAgICAgICBsZXQgbGluZUhlaWdodCA9IHBhcnNlSW50KHN0eWxlLmxpbmVIZWlnaHQpO1xuICAgICAgICBpZiAocmVjdC5ib3R0b20gLSByZWN0LnRvcCA+IGxpbmVIZWlnaHQgKiAxLjUpXG4gICAgICAgICAgICByZXR1cm4geyBsZWZ0OiByZWN0LmxlZnQsIHJpZ2h0OiByZWN0LnJpZ2h0LCB0b3A6IHJlY3QudG9wLCBib3R0b206IHJlY3QudG9wICsgbGluZUhlaWdodCB9O1xuICAgICAgICByZXR1cm4gcmVjdDtcbiAgICB9XG4gICAgaWdub3JlRXZlbnQoKSB7IHJldHVybiBmYWxzZTsgfVxufVxuLyoqXG5FeHRlbnNpb24gdGhhdCBlbmFibGVzIGEgcGxhY2Vob2xkZXLigJRhIHBpZWNlIG9mIGV4YW1wbGUgY29udGVudFxudG8gc2hvdyB3aGVuIHRoZSBlZGl0b3IgaXMgZW1wdHkuXG4qL1xuZnVuY3Rpb24gcGxhY2Vob2xkZXIoY29udGVudCkge1xuICAgIHJldHVybiBWaWV3UGx1Z2luLmZyb21DbGFzcyhjbGFzcyB7XG4gICAgICAgIGNvbnN0cnVjdG9yKHZpZXcpIHtcbiAgICAgICAgICAgIHRoaXMudmlldyA9IHZpZXc7XG4gICAgICAgICAgICB0aGlzLnBsYWNlaG9sZGVyID0gY29udGVudFxuICAgICAgICAgICAgICAgID8gRGVjb3JhdGlvbi5zZXQoW0RlY29yYXRpb24ud2lkZ2V0KHsgd2lkZ2V0OiBuZXcgUGxhY2Vob2xkZXIoY29udGVudCksIHNpZGU6IDEgfSkucmFuZ2UoMCldKVxuICAgICAgICAgICAgICAgIDogRGVjb3JhdGlvbi5ub25lO1xuICAgICAgICB9XG4gICAgICAgIGdldCBkZWNvcmF0aW9ucygpIHsgcmV0dXJuIHRoaXMudmlldy5zdGF0ZS5kb2MubGVuZ3RoID8gRGVjb3JhdGlvbi5ub25lIDogdGhpcy5wbGFjZWhvbGRlcjsgfVxuICAgIH0sIHsgZGVjb3JhdGlvbnM6IHYgPT4gdi5kZWNvcmF0aW9ucyB9KTtcbn1cblxuLy8gRG9uJ3QgY29tcHV0ZSBwcmVjaXNlIGNvbHVtbiBwb3NpdGlvbnMgZm9yIGxpbmUgb2Zmc2V0cyBhYm92ZSB0aGlzXG4vLyAoc2luY2UgaXQgY291bGQgZ2V0IGV4cGVuc2l2ZSkuIEFzc3VtZSBvZmZzZXQ9PWNvbHVtbiBmb3IgdGhlbS5cbmNvbnN0IE1heE9mZiA9IDIwMDA7XG5mdW5jdGlvbiByZWN0YW5nbGVGb3Ioc3RhdGUkMSwgYSwgYikge1xuICAgIGxldCBzdGFydExpbmUgPSBNYXRoLm1pbihhLmxpbmUsIGIubGluZSksIGVuZExpbmUgPSBNYXRoLm1heChhLmxpbmUsIGIubGluZSk7XG4gICAgbGV0IHJhbmdlcyA9IFtdO1xuICAgIGlmIChhLm9mZiA+IE1heE9mZiB8fCBiLm9mZiA+IE1heE9mZiB8fCBhLmNvbCA8IDAgfHwgYi5jb2wgPCAwKSB7XG4gICAgICAgIGxldCBzdGFydE9mZiA9IE1hdGgubWluKGEub2ZmLCBiLm9mZiksIGVuZE9mZiA9IE1hdGgubWF4KGEub2ZmLCBiLm9mZik7XG4gICAgICAgIGZvciAobGV0IGkgPSBzdGFydExpbmU7IGkgPD0gZW5kTGluZTsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgbGluZSA9IHN0YXRlJDEuZG9jLmxpbmUoaSk7XG4gICAgICAgICAgICBpZiAobGluZS5sZW5ndGggPD0gZW5kT2ZmKVxuICAgICAgICAgICAgICAgIHJhbmdlcy5wdXNoKHN0YXRlLkVkaXRvclNlbGVjdGlvbi5yYW5nZShsaW5lLmZyb20gKyBzdGFydE9mZiwgbGluZS50byArIGVuZE9mZikpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsZXQgc3RhcnRDb2wgPSBNYXRoLm1pbihhLmNvbCwgYi5jb2wpLCBlbmRDb2wgPSBNYXRoLm1heChhLmNvbCwgYi5jb2wpO1xuICAgICAgICBmb3IgKGxldCBpID0gc3RhcnRMaW5lOyBpIDw9IGVuZExpbmU7IGkrKykge1xuICAgICAgICAgICAgbGV0IGxpbmUgPSBzdGF0ZSQxLmRvYy5saW5lKGkpO1xuICAgICAgICAgICAgbGV0IHN0YXJ0ID0gc3RhdGUuZmluZENvbHVtbihsaW5lLnRleHQsIHN0YXJ0Q29sLCBzdGF0ZSQxLnRhYlNpemUsIHRydWUpO1xuICAgICAgICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICAgICAgICAgIHJhbmdlcy5wdXNoKHN0YXRlLkVkaXRvclNlbGVjdGlvbi5jdXJzb3IobGluZS50bykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IGVuZCA9IHN0YXRlLmZpbmRDb2x1bW4obGluZS50ZXh0LCBlbmRDb2wsIHN0YXRlJDEudGFiU2l6ZSk7XG4gICAgICAgICAgICAgICAgcmFuZ2VzLnB1c2goc3RhdGUuRWRpdG9yU2VsZWN0aW9uLnJhbmdlKGxpbmUuZnJvbSArIHN0YXJ0LCBsaW5lLmZyb20gKyBlbmQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmFuZ2VzO1xufVxuZnVuY3Rpb24gYWJzb2x1dGVDb2x1bW4odmlldywgeCkge1xuICAgIGxldCByZWYgPSB2aWV3LmNvb3Jkc0F0UG9zKHZpZXcudmlld3BvcnQuZnJvbSk7XG4gICAgcmV0dXJuIHJlZiA/IE1hdGgucm91bmQoTWF0aC5hYnMoKHJlZi5sZWZ0IC0geCkgLyB2aWV3LmRlZmF1bHRDaGFyYWN0ZXJXaWR0aCkpIDogLTE7XG59XG5mdW5jdGlvbiBnZXRQb3ModmlldywgZXZlbnQpIHtcbiAgICBsZXQgb2Zmc2V0ID0gdmlldy5wb3NBdENvb3Jkcyh7IHg6IGV2ZW50LmNsaWVudFgsIHk6IGV2ZW50LmNsaWVudFkgfSwgZmFsc2UpO1xuICAgIGxldCBsaW5lID0gdmlldy5zdGF0ZS5kb2MubGluZUF0KG9mZnNldCksIG9mZiA9IG9mZnNldCAtIGxpbmUuZnJvbTtcbiAgICBsZXQgY29sID0gb2ZmID4gTWF4T2ZmID8gLTFcbiAgICAgICAgOiBvZmYgPT0gbGluZS5sZW5ndGggPyBhYnNvbHV0ZUNvbHVtbih2aWV3LCBldmVudC5jbGllbnRYKVxuICAgICAgICAgICAgOiBzdGF0ZS5jb3VudENvbHVtbihsaW5lLnRleHQsIHZpZXcuc3RhdGUudGFiU2l6ZSwgb2Zmc2V0IC0gbGluZS5mcm9tKTtcbiAgICByZXR1cm4geyBsaW5lOiBsaW5lLm51bWJlciwgY29sLCBvZmYgfTtcbn1cbmZ1bmN0aW9uIHJlY3RhbmdsZVNlbGVjdGlvblN0eWxlKHZpZXcsIGV2ZW50KSB7XG4gICAgbGV0IHN0YXJ0ID0gZ2V0UG9zKHZpZXcsIGV2ZW50KSwgc3RhcnRTZWwgPSB2aWV3LnN0YXRlLnNlbGVjdGlvbjtcbiAgICBpZiAoIXN0YXJ0KVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4ge1xuICAgICAgICB1cGRhdGUodXBkYXRlKSB7XG4gICAgICAgICAgICBpZiAodXBkYXRlLmRvY0NoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICBsZXQgbmV3U3RhcnQgPSB1cGRhdGUuY2hhbmdlcy5tYXBQb3ModXBkYXRlLnN0YXJ0U3RhdGUuZG9jLmxpbmUoc3RhcnQubGluZSkuZnJvbSk7XG4gICAgICAgICAgICAgICAgbGV0IG5ld0xpbmUgPSB1cGRhdGUuc3RhdGUuZG9jLmxpbmVBdChuZXdTdGFydCk7XG4gICAgICAgICAgICAgICAgc3RhcnQgPSB7IGxpbmU6IG5ld0xpbmUubnVtYmVyLCBjb2w6IHN0YXJ0LmNvbCwgb2ZmOiBNYXRoLm1pbihzdGFydC5vZmYsIG5ld0xpbmUubGVuZ3RoKSB9O1xuICAgICAgICAgICAgICAgIHN0YXJ0U2VsID0gc3RhcnRTZWwubWFwKHVwZGF0ZS5jaGFuZ2VzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZ2V0KGV2ZW50LCBfZXh0ZW5kLCBtdWx0aXBsZSkge1xuICAgICAgICAgICAgbGV0IGN1ciA9IGdldFBvcyh2aWV3LCBldmVudCk7XG4gICAgICAgICAgICBpZiAoIWN1cilcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhcnRTZWw7XG4gICAgICAgICAgICBsZXQgcmFuZ2VzID0gcmVjdGFuZ2xlRm9yKHZpZXcuc3RhdGUsIHN0YXJ0LCBjdXIpO1xuICAgICAgICAgICAgaWYgKCFyYW5nZXMubGVuZ3RoKVxuICAgICAgICAgICAgICAgIHJldHVybiBzdGFydFNlbDtcbiAgICAgICAgICAgIGlmIChtdWx0aXBsZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGUuRWRpdG9yU2VsZWN0aW9uLmNyZWF0ZShyYW5nZXMuY29uY2F0KHN0YXJ0U2VsLnJhbmdlcykpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZS5FZGl0b3JTZWxlY3Rpb24uY3JlYXRlKHJhbmdlcyk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuLyoqXG5DcmVhdGUgYW4gZXh0ZW5zaW9uIHRoYXQgZW5hYmxlcyByZWN0YW5ndWxhciBzZWxlY3Rpb25zLiBCeVxuZGVmYXVsdCwgaXQgd2lsbCByZWFjdCB0byBsZWZ0IG1vdXNlIGRyYWcgd2l0aCB0aGUgQWx0IGtleSBoZWxkXG5kb3duLiBXaGVuIHN1Y2ggYSBzZWxlY3Rpb24gb2NjdXJzLCB0aGUgdGV4dCB3aXRoaW4gdGhlIHJlY3RhbmdsZVxudGhhdCB3YXMgZHJhZ2dlZCBvdmVyIHdpbGwgYmUgc2VsZWN0ZWQsIGFzIG9uZSBzZWxlY3Rpb25cbltyYW5nZV0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyNzdGF0ZS5TZWxlY3Rpb25SYW5nZSkgcGVyIGxpbmUuXG4qL1xuZnVuY3Rpb24gcmVjdGFuZ3VsYXJTZWxlY3Rpb24ob3B0aW9ucykge1xuICAgIGxldCBmaWx0ZXIgPSAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmV2ZW50RmlsdGVyKSB8fCAoZSA9PiBlLmFsdEtleSAmJiBlLmJ1dHRvbiA9PSAwKTtcbiAgICByZXR1cm4gRWRpdG9yVmlldy5tb3VzZVNlbGVjdGlvblN0eWxlLm9mKCh2aWV3LCBldmVudCkgPT4gZmlsdGVyKGV2ZW50KSA/IHJlY3RhbmdsZVNlbGVjdGlvblN0eWxlKHZpZXcsIGV2ZW50KSA6IG51bGwpO1xufVxuY29uc3Qga2V5cyA9IHtcbiAgICBBbHQ6IFsxOCwgZSA9PiAhIWUuYWx0S2V5XSxcbiAgICBDb250cm9sOiBbMTcsIGUgPT4gISFlLmN0cmxLZXldLFxuICAgIFNoaWZ0OiBbMTYsIGUgPT4gISFlLnNoaWZ0S2V5XSxcbiAgICBNZXRhOiBbOTEsIGUgPT4gISFlLm1ldGFLZXldXG59O1xuY29uc3Qgc2hvd0Nyb3NzaGFpciA9IHsgc3R5bGU6IFwiY3Vyc29yOiBjcm9zc2hhaXJcIiB9O1xuLyoqXG5SZXR1cm5zIGFuIGV4dGVuc2lvbiB0aGF0IHR1cm5zIHRoZSBwb2ludGVyIGN1cnNvciBpbnRvIGFcbmNyb3NzaGFpciB3aGVuIGEgZ2l2ZW4gbW9kaWZpZXIga2V5LCBkZWZhdWx0aW5nIHRvIEFsdCwgaXMgaGVsZFxuZG93bi4gQ2FuIHNlcnZlIGFzIGEgdmlzdWFsIGhpbnQgdGhhdCByZWN0YW5ndWxhciBzZWxlY3Rpb24gaXNcbmdvaW5nIHRvIGhhcHBlbiB3aGVuIHBhaXJlZCB3aXRoXG5bYHJlY3Rhbmd1bGFyU2VsZWN0aW9uYF0oaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC82L2RvY3MvcmVmLyN2aWV3LnJlY3Rhbmd1bGFyU2VsZWN0aW9uKS5cbiovXG5mdW5jdGlvbiBjcm9zc2hhaXJDdXJzb3Iob3B0aW9ucyA9IHt9KSB7XG4gICAgbGV0IFtjb2RlLCBnZXR0ZXJdID0ga2V5c1tvcHRpb25zLmtleSB8fCBcIkFsdFwiXTtcbiAgICBsZXQgcGx1Z2luID0gVmlld1BsdWdpbi5mcm9tQ2xhc3MoY2xhc3Mge1xuICAgICAgICBjb25zdHJ1Y3Rvcih2aWV3KSB7XG4gICAgICAgICAgICB0aGlzLnZpZXcgPSB2aWV3O1xuICAgICAgICAgICAgdGhpcy5pc0Rvd24gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBzZXQoaXNEb3duKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc0Rvd24gIT0gaXNEb3duKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0Rvd24gPSBpc0Rvd247XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LnVwZGF0ZShbXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGV2ZW50T2JzZXJ2ZXJzOiB7XG4gICAgICAgICAgICBrZXlkb3duKGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldChlLmtleUNvZGUgPT0gY29kZSB8fCBnZXR0ZXIoZSkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGtleXVwKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS5rZXlDb2RlID09IGNvZGUgfHwgIWdldHRlcihlKSlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXQoZmFsc2UpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1vdXNlbW92ZShlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoZ2V0dGVyKGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBbXG4gICAgICAgIHBsdWdpbixcbiAgICAgICAgRWRpdG9yVmlldy5jb250ZW50QXR0cmlidXRlcy5vZih2aWV3ID0+IHsgdmFyIF9hOyByZXR1cm4gKChfYSA9IHZpZXcucGx1Z2luKHBsdWdpbikpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pc0Rvd24pID8gc2hvd0Nyb3NzaGFpciA6IG51bGw7IH0pXG4gICAgXTtcbn1cblxuY29uc3QgT3V0c2lkZSA9IFwiLTEwMDAwcHhcIjtcbmNsYXNzIFRvb2x0aXBWaWV3TWFuYWdlciB7XG4gICAgY29uc3RydWN0b3IodmlldywgZmFjZXQsIGNyZWF0ZVRvb2x0aXBWaWV3LCByZW1vdmVUb29sdGlwVmlldykge1xuICAgICAgICB0aGlzLmZhY2V0ID0gZmFjZXQ7XG4gICAgICAgIHRoaXMuY3JlYXRlVG9vbHRpcFZpZXcgPSBjcmVhdGVUb29sdGlwVmlldztcbiAgICAgICAgdGhpcy5yZW1vdmVUb29sdGlwVmlldyA9IHJlbW92ZVRvb2x0aXBWaWV3O1xuICAgICAgICB0aGlzLmlucHV0ID0gdmlldy5zdGF0ZS5mYWNldChmYWNldCk7XG4gICAgICAgIHRoaXMudG9vbHRpcHMgPSB0aGlzLmlucHV0LmZpbHRlcih0ID0+IHQpO1xuICAgICAgICBsZXQgcHJldiA9IG51bGw7XG4gICAgICAgIHRoaXMudG9vbHRpcFZpZXdzID0gdGhpcy50b29sdGlwcy5tYXAodCA9PiBwcmV2ID0gY3JlYXRlVG9vbHRpcFZpZXcodCwgcHJldikpO1xuICAgIH1cbiAgICB1cGRhdGUodXBkYXRlLCBhYm92ZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGxldCBpbnB1dCA9IHVwZGF0ZS5zdGF0ZS5mYWNldCh0aGlzLmZhY2V0KTtcbiAgICAgICAgbGV0IHRvb2x0aXBzID0gaW5wdXQuZmlsdGVyKHggPT4geCk7XG4gICAgICAgIGlmIChpbnB1dCA9PT0gdGhpcy5pbnB1dCkge1xuICAgICAgICAgICAgZm9yIChsZXQgdCBvZiB0aGlzLnRvb2x0aXBWaWV3cylcbiAgICAgICAgICAgICAgICBpZiAodC51cGRhdGUpXG4gICAgICAgICAgICAgICAgICAgIHQudXBkYXRlKHVwZGF0ZSk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRvb2x0aXBWaWV3cyA9IFtdLCBuZXdBYm92ZSA9IGFib3ZlID8gW10gOiBudWxsO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRvb2x0aXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgdGlwID0gdG9vbHRpcHNbaV0sIGtub3duID0gLTE7XG4gICAgICAgICAgICBpZiAoIXRpcClcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy50b29sdGlwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBvdGhlciA9IHRoaXMudG9vbHRpcHNbaV07XG4gICAgICAgICAgICAgICAgaWYgKG90aGVyICYmIG90aGVyLmNyZWF0ZSA9PSB0aXAuY3JlYXRlKVxuICAgICAgICAgICAgICAgICAgICBrbm93biA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoa25vd24gPCAwKSB7XG4gICAgICAgICAgICAgICAgdG9vbHRpcFZpZXdzW2ldID0gdGhpcy5jcmVhdGVUb29sdGlwVmlldyh0aXAsIGkgPyB0b29sdGlwVmlld3NbaSAtIDFdIDogbnVsbCk7XG4gICAgICAgICAgICAgICAgaWYgKG5ld0Fib3ZlKVxuICAgICAgICAgICAgICAgICAgICBuZXdBYm92ZVtpXSA9ICEhdGlwLmFib3ZlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IHRvb2x0aXBWaWV3ID0gdG9vbHRpcFZpZXdzW2ldID0gdGhpcy50b29sdGlwVmlld3Nba25vd25dO1xuICAgICAgICAgICAgICAgIGlmIChuZXdBYm92ZSlcbiAgICAgICAgICAgICAgICAgICAgbmV3QWJvdmVbaV0gPSBhYm92ZVtrbm93bl07XG4gICAgICAgICAgICAgICAgaWYgKHRvb2x0aXBWaWV3LnVwZGF0ZSlcbiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcFZpZXcudXBkYXRlKHVwZGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgdCBvZiB0aGlzLnRvb2x0aXBWaWV3cylcbiAgICAgICAgICAgIGlmICh0b29sdGlwVmlld3MuaW5kZXhPZih0KSA8IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVRvb2x0aXBWaWV3KHQpO1xuICAgICAgICAgICAgICAgIChfYSA9IHQuZGVzdHJveSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIGlmIChhYm92ZSkge1xuICAgICAgICAgICAgbmV3QWJvdmUuZm9yRWFjaCgodmFsLCBpKSA9PiBhYm92ZVtpXSA9IHZhbCk7XG4gICAgICAgICAgICBhYm92ZS5sZW5ndGggPSBuZXdBYm92ZS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbnB1dCA9IGlucHV0O1xuICAgICAgICB0aGlzLnRvb2x0aXBzID0gdG9vbHRpcHM7XG4gICAgICAgIHRoaXMudG9vbHRpcFZpZXdzID0gdG9vbHRpcFZpZXdzO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG4vKipcbkNyZWF0ZXMgYW4gZXh0ZW5zaW9uIHRoYXQgY29uZmlndXJlcyB0b29sdGlwIGJlaGF2aW9yLlxuKi9cbmZ1bmN0aW9uIHRvb2x0aXBzKGNvbmZpZyA9IHt9KSB7XG4gICAgcmV0dXJuIHRvb2x0aXBDb25maWcub2YoY29uZmlnKTtcbn1cbmZ1bmN0aW9uIHdpbmRvd1NwYWNlKHZpZXcpIHtcbiAgICBsZXQgeyB3aW4gfSA9IHZpZXc7XG4gICAgcmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwLCBib3R0b206IHdpbi5pbm5lckhlaWdodCwgcmlnaHQ6IHdpbi5pbm5lcldpZHRoIH07XG59XG5jb25zdCB0b29sdGlwQ29uZmlnID0gc3RhdGUuRmFjZXQuZGVmaW5lKHtcbiAgICBjb21iaW5lOiB2YWx1ZXMgPT4ge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgcmV0dXJuICh7XG4gICAgICAgICAgICBwb3NpdGlvbjogYnJvd3Nlci5pb3MgPyBcImFic29sdXRlXCIgOiAoKF9hID0gdmFsdWVzLmZpbmQoY29uZiA9PiBjb25mLnBvc2l0aW9uKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnBvc2l0aW9uKSB8fCBcImZpeGVkXCIsXG4gICAgICAgICAgICBwYXJlbnQ6ICgoX2IgPSB2YWx1ZXMuZmluZChjb25mID0+IGNvbmYucGFyZW50KSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnBhcmVudCkgfHwgbnVsbCxcbiAgICAgICAgICAgIHRvb2x0aXBTcGFjZTogKChfYyA9IHZhbHVlcy5maW5kKGNvbmYgPT4gY29uZi50b29sdGlwU3BhY2UpKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MudG9vbHRpcFNwYWNlKSB8fCB3aW5kb3dTcGFjZSxcbiAgICAgICAgfSk7XG4gICAgfVxufSk7XG5jb25zdCBrbm93bkhlaWdodCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCB0b29sdGlwUGx1Z2luID0gVmlld1BsdWdpbi5mcm9tQ2xhc3MoY2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKHZpZXcpIHtcbiAgICAgICAgdGhpcy52aWV3ID0gdmlldztcbiAgICAgICAgdGhpcy5hYm92ZSA9IFtdO1xuICAgICAgICB0aGlzLmluVmlldyA9IHRydWU7XG4gICAgICAgIHRoaXMubWFkZUFic29sdXRlID0gZmFsc2U7XG4gICAgICAgIHRoaXMubGFzdFRyYW5zYWN0aW9uID0gMDtcbiAgICAgICAgdGhpcy5tZWFzdXJlVGltZW91dCA9IC0xO1xuICAgICAgICBsZXQgY29uZmlnID0gdmlldy5zdGF0ZS5mYWNldCh0b29sdGlwQ29uZmlnKTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IGNvbmZpZy5wb3NpdGlvbjtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBjb25maWcucGFyZW50O1xuICAgICAgICB0aGlzLmNsYXNzZXMgPSB2aWV3LnRoZW1lQ2xhc3NlcztcbiAgICAgICAgdGhpcy5jcmVhdGVDb250YWluZXIoKTtcbiAgICAgICAgdGhpcy5tZWFzdXJlUmVxID0geyByZWFkOiB0aGlzLnJlYWRNZWFzdXJlLmJpbmQodGhpcyksIHdyaXRlOiB0aGlzLndyaXRlTWVhc3VyZS5iaW5kKHRoaXMpLCBrZXk6IHRoaXMgfTtcbiAgICAgICAgdGhpcy5yZXNpemVPYnNlcnZlciA9IHR5cGVvZiBSZXNpemVPYnNlcnZlciA9PSBcImZ1bmN0aW9uXCIgPyBuZXcgUmVzaXplT2JzZXJ2ZXIoKCkgPT4gdGhpcy5tZWFzdXJlU29vbigpKSA6IG51bGw7XG4gICAgICAgIHRoaXMubWFuYWdlciA9IG5ldyBUb29sdGlwVmlld01hbmFnZXIodmlldywgc2hvd1Rvb2x0aXAsICh0LCBwKSA9PiB0aGlzLmNyZWF0ZVRvb2x0aXAodCwgcCksIHQgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMucmVzaXplT2JzZXJ2ZXIpXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNpemVPYnNlcnZlci51bm9ic2VydmUodC5kb20pO1xuICAgICAgICAgICAgdC5kb20ucmVtb3ZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmFib3ZlID0gdGhpcy5tYW5hZ2VyLnRvb2x0aXBzLm1hcCh0ID0+ICEhdC5hYm92ZSk7XG4gICAgICAgIHRoaXMuaW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPSB0eXBlb2YgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPT0gXCJmdW5jdGlvblwiID8gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGVudHJpZXMgPT4ge1xuICAgICAgICAgICAgaWYgKERhdGUubm93KCkgPiB0aGlzLmxhc3RUcmFuc2FjdGlvbiAtIDUwICYmXG4gICAgICAgICAgICAgICAgZW50cmllcy5sZW5ndGggPiAwICYmIGVudHJpZXNbZW50cmllcy5sZW5ndGggLSAxXS5pbnRlcnNlY3Rpb25SYXRpbyA8IDEpXG4gICAgICAgICAgICAgICAgdGhpcy5tZWFzdXJlU29vbigpO1xuICAgICAgICB9LCB7IHRocmVzaG9sZDogWzFdIH0pIDogbnVsbDtcbiAgICAgICAgdGhpcy5vYnNlcnZlSW50ZXJzZWN0aW9uKCk7XG4gICAgICAgIHZpZXcud2luLmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5tZWFzdXJlU29vbiA9IHRoaXMubWVhc3VyZVNvb24uYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMubWF5YmVNZWFzdXJlKCk7XG4gICAgfVxuICAgIGNyZWF0ZUNvbnRhaW5lcigpIHtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50KSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTmFtZSA9IHRoaXMudmlldy50aGVtZUNsYXNzZXM7XG4gICAgICAgICAgICB0aGlzLnBhcmVudC5hcHBlbmRDaGlsZCh0aGlzLmNvbnRhaW5lcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lciA9IHRoaXMudmlldy5kb207XG4gICAgICAgIH1cbiAgICB9XG4gICAgb2JzZXJ2ZUludGVyc2VjdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuaW50ZXJzZWN0aW9uT2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJzZWN0aW9uT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgZm9yIChsZXQgdG9vbHRpcCBvZiB0aGlzLm1hbmFnZXIudG9vbHRpcFZpZXdzKVxuICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJzZWN0aW9uT2JzZXJ2ZXIub2JzZXJ2ZSh0b29sdGlwLmRvbSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbWVhc3VyZVNvb24oKSB7XG4gICAgICAgIGlmICh0aGlzLm1lYXN1cmVUaW1lb3V0IDwgMClcbiAgICAgICAgICAgIHRoaXMubWVhc3VyZVRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm1lYXN1cmVUaW1lb3V0ID0gLTE7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXliZU1lYXN1cmUoKTtcbiAgICAgICAgICAgIH0sIDUwKTtcbiAgICB9XG4gICAgdXBkYXRlKHVwZGF0ZSkge1xuICAgICAgICBpZiAodXBkYXRlLnRyYW5zYWN0aW9ucy5sZW5ndGgpXG4gICAgICAgICAgICB0aGlzLmxhc3RUcmFuc2FjdGlvbiA9IERhdGUubm93KCk7XG4gICAgICAgIGxldCB1cGRhdGVkID0gdGhpcy5tYW5hZ2VyLnVwZGF0ZSh1cGRhdGUsIHRoaXMuYWJvdmUpO1xuICAgICAgICBpZiAodXBkYXRlZClcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZUludGVyc2VjdGlvbigpO1xuICAgICAgICBsZXQgc2hvdWxkTWVhc3VyZSA9IHVwZGF0ZWQgfHwgdXBkYXRlLmdlb21ldHJ5Q2hhbmdlZDtcbiAgICAgICAgbGV0IG5ld0NvbmZpZyA9IHVwZGF0ZS5zdGF0ZS5mYWNldCh0b29sdGlwQ29uZmlnKTtcbiAgICAgICAgaWYgKG5ld0NvbmZpZy5wb3NpdGlvbiAhPSB0aGlzLnBvc2l0aW9uICYmICF0aGlzLm1hZGVBYnNvbHV0ZSkge1xuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IG5ld0NvbmZpZy5wb3NpdGlvbjtcbiAgICAgICAgICAgIGZvciAobGV0IHQgb2YgdGhpcy5tYW5hZ2VyLnRvb2x0aXBWaWV3cylcbiAgICAgICAgICAgICAgICB0LmRvbS5zdHlsZS5wb3NpdGlvbiA9IHRoaXMucG9zaXRpb247XG4gICAgICAgICAgICBzaG91bGRNZWFzdXJlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV3Q29uZmlnLnBhcmVudCAhPSB0aGlzLnBhcmVudCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucGFyZW50KVxuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLnJlbW92ZSgpO1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSBuZXdDb25maWcucGFyZW50O1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb250YWluZXIoKTtcbiAgICAgICAgICAgIGZvciAobGV0IHQgb2YgdGhpcy5tYW5hZ2VyLnRvb2x0aXBWaWV3cylcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0LmRvbSk7XG4gICAgICAgICAgICBzaG91bGRNZWFzdXJlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnBhcmVudCAmJiB0aGlzLnZpZXcudGhlbWVDbGFzc2VzICE9IHRoaXMuY2xhc3Nlcykge1xuICAgICAgICAgICAgdGhpcy5jbGFzc2VzID0gdGhpcy5jb250YWluZXIuY2xhc3NOYW1lID0gdGhpcy52aWV3LnRoZW1lQ2xhc3NlcztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hvdWxkTWVhc3VyZSlcbiAgICAgICAgICAgIHRoaXMubWF5YmVNZWFzdXJlKCk7XG4gICAgfVxuICAgIGNyZWF0ZVRvb2x0aXAodG9vbHRpcCwgcHJldikge1xuICAgICAgICBsZXQgdG9vbHRpcFZpZXcgPSB0b29sdGlwLmNyZWF0ZSh0aGlzLnZpZXcpO1xuICAgICAgICBsZXQgYmVmb3JlID0gcHJldiA/IHByZXYuZG9tIDogbnVsbDtcbiAgICAgICAgdG9vbHRpcFZpZXcuZG9tLmNsYXNzTGlzdC5hZGQoXCJjbS10b29sdGlwXCIpO1xuICAgICAgICBpZiAodG9vbHRpcC5hcnJvdyAmJiAhdG9vbHRpcFZpZXcuZG9tLnF1ZXJ5U2VsZWN0b3IoXCIuY20tdG9vbHRpcCA+IC5jbS10b29sdGlwLWFycm93XCIpKSB7XG4gICAgICAgICAgICBsZXQgYXJyb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgYXJyb3cuY2xhc3NOYW1lID0gXCJjbS10b29sdGlwLWFycm93XCI7XG4gICAgICAgICAgICB0b29sdGlwVmlldy5kb20uYXBwZW5kQ2hpbGQoYXJyb3cpO1xuICAgICAgICB9XG4gICAgICAgIHRvb2x0aXBWaWV3LmRvbS5zdHlsZS5wb3NpdGlvbiA9IHRoaXMucG9zaXRpb247XG4gICAgICAgIHRvb2x0aXBWaWV3LmRvbS5zdHlsZS50b3AgPSBPdXRzaWRlO1xuICAgICAgICB0b29sdGlwVmlldy5kb20uc3R5bGUubGVmdCA9IFwiMHB4XCI7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmluc2VydEJlZm9yZSh0b29sdGlwVmlldy5kb20sIGJlZm9yZSk7XG4gICAgICAgIGlmICh0b29sdGlwVmlldy5tb3VudClcbiAgICAgICAgICAgIHRvb2x0aXBWaWV3Lm1vdW50KHRoaXMudmlldyk7XG4gICAgICAgIGlmICh0aGlzLnJlc2l6ZU9ic2VydmVyKVxuICAgICAgICAgICAgdGhpcy5yZXNpemVPYnNlcnZlci5vYnNlcnZlKHRvb2x0aXBWaWV3LmRvbSk7XG4gICAgICAgIHJldHVybiB0b29sdGlwVmlldztcbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIHRoaXMudmlldy53aW4ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLm1lYXN1cmVTb29uKTtcbiAgICAgICAgZm9yIChsZXQgdG9vbHRpcFZpZXcgb2YgdGhpcy5tYW5hZ2VyLnRvb2x0aXBWaWV3cykge1xuICAgICAgICAgICAgdG9vbHRpcFZpZXcuZG9tLnJlbW92ZSgpO1xuICAgICAgICAgICAgKF9hID0gdG9vbHRpcFZpZXcuZGVzdHJveSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodG9vbHRpcFZpZXcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnBhcmVudClcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLnJlbW92ZSgpO1xuICAgICAgICAoX2IgPSB0aGlzLnJlc2l6ZU9ic2VydmVyKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuZGlzY29ubmVjdCgpO1xuICAgICAgICAoX2MgPSB0aGlzLmludGVyc2VjdGlvbk9ic2VydmVyKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuZGlzY29ubmVjdCgpO1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5tZWFzdXJlVGltZW91dCk7XG4gICAgfVxuICAgIHJlYWRNZWFzdXJlKCkge1xuICAgICAgICBsZXQgZWRpdG9yID0gdGhpcy52aWV3LmRvbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgbGV0IHNjYWxlWCA9IDEsIHNjYWxlWSA9IDEsIG1ha2VBYnNvbHV0ZSA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5wb3NpdGlvbiA9PSBcImZpeGVkXCIgJiYgdGhpcy5tYW5hZ2VyLnRvb2x0aXBWaWV3cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxldCB7IGRvbSB9ID0gdGhpcy5tYW5hZ2VyLnRvb2x0aXBWaWV3c1swXTtcbiAgICAgICAgICAgIGlmIChicm93c2VyLmdlY2tvKSB7XG4gICAgICAgICAgICAgICAgLy8gRmlyZWZveCBzZXRzIHRoZSBlbGVtZW50J3MgYG9mZnNldFBhcmVudGAgdG8gdGhlXG4gICAgICAgICAgICAgICAgLy8gdHJhbnNmb3JtZWQgZWxlbWVudCB3aGVuIGEgdHJhbnNmb3JtIGludGVyZmVyZXMgd2l0aCBmaXhlZFxuICAgICAgICAgICAgICAgIC8vIHBvc2l0aW9uaW5nLlxuICAgICAgICAgICAgICAgIG1ha2VBYnNvbHV0ZSA9IGRvbS5vZmZzZXRQYXJlbnQgIT0gdGhpcy5jb250YWluZXIub3duZXJEb2N1bWVudC5ib2R5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZG9tLnN0eWxlLnRvcCA9PSBPdXRzaWRlICYmIGRvbS5zdHlsZS5sZWZ0ID09IFwiMHB4XCIpIHtcbiAgICAgICAgICAgICAgICAvLyBPbiBvdGhlciBicm93c2Vycywgd2UgaGF2ZSB0byBhd2t3YXJkbHkgdHJ5IGFuZCB1c2Ugb3RoZXJcbiAgICAgICAgICAgICAgICAvLyBpbmZvcm1hdGlvbiB0byBkZXRlY3QgYSB0cmFuc2Zvcm0uXG4gICAgICAgICAgICAgICAgbGV0IHJlY3QgPSBkb20uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgbWFrZUFic29sdXRlID0gTWF0aC5hYnMocmVjdC50b3AgKyAxMDAwMCkgPiAxIHx8IE1hdGguYWJzKHJlY3QubGVmdCkgPiAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtYWtlQWJzb2x1dGUgfHwgdGhpcy5wb3NpdGlvbiA9PSBcImFic29sdXRlXCIpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnBhcmVudCkge1xuICAgICAgICAgICAgICAgIGxldCByZWN0ID0gdGhpcy5wYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgaWYgKHJlY3Qud2lkdGggJiYgcmVjdC5oZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2NhbGVYID0gcmVjdC53aWR0aCAvIHRoaXMucGFyZW50Lm9mZnNldFdpZHRoO1xuICAgICAgICAgICAgICAgICAgICBzY2FsZVkgPSByZWN0LmhlaWdodCAvIHRoaXMucGFyZW50Lm9mZnNldEhlaWdodDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAoeyBzY2FsZVgsIHNjYWxlWSB9ID0gdGhpcy52aWV3LnZpZXdTdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVkaXRvcixcbiAgICAgICAgICAgIHBhcmVudDogdGhpcy5wYXJlbnQgPyB0aGlzLmNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA6IGVkaXRvcixcbiAgICAgICAgICAgIHBvczogdGhpcy5tYW5hZ2VyLnRvb2x0aXBzLm1hcCgodCwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCB0diA9IHRoaXMubWFuYWdlci50b29sdGlwVmlld3NbaV07XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR2LmdldENvb3JkcyA/IHR2LmdldENvb3Jkcyh0LnBvcykgOiB0aGlzLnZpZXcuY29vcmRzQXRQb3ModC5wb3MpO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBzaXplOiB0aGlzLm1hbmFnZXIudG9vbHRpcFZpZXdzLm1hcCgoeyBkb20gfSkgPT4gZG9tLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKSxcbiAgICAgICAgICAgIHNwYWNlOiB0aGlzLnZpZXcuc3RhdGUuZmFjZXQodG9vbHRpcENvbmZpZykudG9vbHRpcFNwYWNlKHRoaXMudmlldyksXG4gICAgICAgICAgICBzY2FsZVgsIHNjYWxlWSwgbWFrZUFic29sdXRlXG4gICAgICAgIH07XG4gICAgfVxuICAgIHdyaXRlTWVhc3VyZShtZWFzdXJlZCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmIChtZWFzdXJlZC5tYWtlQWJzb2x1dGUpIHtcbiAgICAgICAgICAgIHRoaXMubWFkZUFic29sdXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICAgICAgICBmb3IgKGxldCB0IG9mIHRoaXMubWFuYWdlci50b29sdGlwVmlld3MpXG4gICAgICAgICAgICAgICAgdC5kb20uc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHsgZWRpdG9yLCBzcGFjZSwgc2NhbGVYLCBzY2FsZVkgfSA9IG1lYXN1cmVkO1xuICAgICAgICBsZXQgb3RoZXJzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5tYW5hZ2VyLnRvb2x0aXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgdG9vbHRpcCA9IHRoaXMubWFuYWdlci50b29sdGlwc1tpXSwgdFZpZXcgPSB0aGlzLm1hbmFnZXIudG9vbHRpcFZpZXdzW2ldLCB7IGRvbSB9ID0gdFZpZXc7XG4gICAgICAgICAgICBsZXQgcG9zID0gbWVhc3VyZWQucG9zW2ldLCBzaXplID0gbWVhc3VyZWQuc2l6ZVtpXTtcbiAgICAgICAgICAgIC8vIEhpZGUgdG9vbHRpcHMgdGhhdCBhcmUgb3V0c2lkZSBvZiB0aGUgZWRpdG9yLlxuICAgICAgICAgICAgaWYgKCFwb3MgfHwgcG9zLmJvdHRvbSA8PSBNYXRoLm1heChlZGl0b3IudG9wLCBzcGFjZS50b3ApIHx8XG4gICAgICAgICAgICAgICAgcG9zLnRvcCA+PSBNYXRoLm1pbihlZGl0b3IuYm90dG9tLCBzcGFjZS5ib3R0b20pIHx8XG4gICAgICAgICAgICAgICAgcG9zLnJpZ2h0IDwgTWF0aC5tYXgoZWRpdG9yLmxlZnQsIHNwYWNlLmxlZnQpIC0gLjEgfHxcbiAgICAgICAgICAgICAgICBwb3MubGVmdCA+IE1hdGgubWluKGVkaXRvci5yaWdodCwgc3BhY2UucmlnaHQpICsgLjEpIHtcbiAgICAgICAgICAgICAgICBkb20uc3R5bGUudG9wID0gT3V0c2lkZTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBhcnJvdyA9IHRvb2x0aXAuYXJyb3cgPyB0Vmlldy5kb20ucXVlcnlTZWxlY3RvcihcIi5jbS10b29sdGlwLWFycm93XCIpIDogbnVsbDtcbiAgICAgICAgICAgIGxldCBhcnJvd0hlaWdodCA9IGFycm93ID8gNyAvKiBBcnJvdy5TaXplICovIDogMDtcbiAgICAgICAgICAgIGxldCB3aWR0aCA9IHNpemUucmlnaHQgLSBzaXplLmxlZnQsIGhlaWdodCA9IChfYSA9IGtub3duSGVpZ2h0LmdldCh0VmlldykpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHNpemUuYm90dG9tIC0gc2l6ZS50b3A7XG4gICAgICAgICAgICBsZXQgb2Zmc2V0ID0gdFZpZXcub2Zmc2V0IHx8IG5vT2Zmc2V0LCBsdHIgPSB0aGlzLnZpZXcudGV4dERpcmVjdGlvbiA9PSBleHBvcnRzLkRpcmVjdGlvbi5MVFI7XG4gICAgICAgICAgICBsZXQgbGVmdCA9IHNpemUud2lkdGggPiBzcGFjZS5yaWdodCAtIHNwYWNlLmxlZnQgPyAobHRyID8gc3BhY2UubGVmdCA6IHNwYWNlLnJpZ2h0IC0gc2l6ZS53aWR0aClcbiAgICAgICAgICAgICAgICA6IGx0ciA/IE1hdGgubWluKHBvcy5sZWZ0IC0gKGFycm93ID8gMTQgLyogQXJyb3cuT2Zmc2V0ICovIDogMCkgKyBvZmZzZXQueCwgc3BhY2UucmlnaHQgLSB3aWR0aClcbiAgICAgICAgICAgICAgICAgICAgOiBNYXRoLm1heChzcGFjZS5sZWZ0LCBwb3MubGVmdCAtIHdpZHRoICsgKGFycm93ID8gMTQgLyogQXJyb3cuT2Zmc2V0ICovIDogMCkgLSBvZmZzZXQueCk7XG4gICAgICAgICAgICBsZXQgYWJvdmUgPSB0aGlzLmFib3ZlW2ldO1xuICAgICAgICAgICAgaWYgKCF0b29sdGlwLnN0cmljdFNpZGUgJiYgKGFib3ZlXG4gICAgICAgICAgICAgICAgPyBwb3MudG9wIC0gKHNpemUuYm90dG9tIC0gc2l6ZS50b3ApIC0gb2Zmc2V0LnkgPCBzcGFjZS50b3BcbiAgICAgICAgICAgICAgICA6IHBvcy5ib3R0b20gKyAoc2l6ZS5ib3R0b20gLSBzaXplLnRvcCkgKyBvZmZzZXQueSA+IHNwYWNlLmJvdHRvbSkgJiZcbiAgICAgICAgICAgICAgICBhYm92ZSA9PSAoc3BhY2UuYm90dG9tIC0gcG9zLmJvdHRvbSA+IHBvcy50b3AgLSBzcGFjZS50b3ApKVxuICAgICAgICAgICAgICAgIGFib3ZlID0gdGhpcy5hYm92ZVtpXSA9ICFhYm92ZTtcbiAgICAgICAgICAgIGxldCBzcGFjZVZlcnQgPSAoYWJvdmUgPyBwb3MudG9wIC0gc3BhY2UudG9wIDogc3BhY2UuYm90dG9tIC0gcG9zLmJvdHRvbSkgLSBhcnJvd0hlaWdodDtcbiAgICAgICAgICAgIGlmIChzcGFjZVZlcnQgPCBoZWlnaHQgJiYgdFZpZXcucmVzaXplICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGlmIChzcGFjZVZlcnQgPCB0aGlzLnZpZXcuZGVmYXVsdExpbmVIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgZG9tLnN0eWxlLnRvcCA9IE91dHNpZGU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBrbm93bkhlaWdodC5zZXQodFZpZXcsIGhlaWdodCk7XG4gICAgICAgICAgICAgICAgZG9tLnN0eWxlLmhlaWdodCA9IChoZWlnaHQgPSBzcGFjZVZlcnQpIC8gc2NhbGVZICsgXCJweFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZG9tLnN0eWxlLmhlaWdodCkge1xuICAgICAgICAgICAgICAgIGRvbS5zdHlsZS5oZWlnaHQgPSBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHRvcCA9IGFib3ZlID8gcG9zLnRvcCAtIGhlaWdodCAtIGFycm93SGVpZ2h0IC0gb2Zmc2V0LnkgOiBwb3MuYm90dG9tICsgYXJyb3dIZWlnaHQgKyBvZmZzZXQueTtcbiAgICAgICAgICAgIGxldCByaWdodCA9IGxlZnQgKyB3aWR0aDtcbiAgICAgICAgICAgIGlmICh0Vmlldy5vdmVybGFwICE9PSB0cnVlKVxuICAgICAgICAgICAgICAgIGZvciAobGV0IHIgb2Ygb3RoZXJzKVxuICAgICAgICAgICAgICAgICAgICBpZiAoci5sZWZ0IDwgcmlnaHQgJiYgci5yaWdodCA+IGxlZnQgJiYgci50b3AgPCB0b3AgKyBoZWlnaHQgJiYgci5ib3R0b20gPiB0b3ApXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3AgPSBhYm92ZSA/IHIudG9wIC0gaGVpZ2h0IC0gMiAtIGFycm93SGVpZ2h0IDogci5ib3R0b20gKyBhcnJvd0hlaWdodCArIDI7XG4gICAgICAgICAgICBpZiAodGhpcy5wb3NpdGlvbiA9PSBcImFic29sdXRlXCIpIHtcbiAgICAgICAgICAgICAgICBkb20uc3R5bGUudG9wID0gKHRvcCAtIG1lYXN1cmVkLnBhcmVudC50b3ApIC8gc2NhbGVZICsgXCJweFwiO1xuICAgICAgICAgICAgICAgIGRvbS5zdHlsZS5sZWZ0ID0gKGxlZnQgLSBtZWFzdXJlZC5wYXJlbnQubGVmdCkgLyBzY2FsZVggKyBcInB4XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkb20uc3R5bGUudG9wID0gdG9wIC8gc2NhbGVZICsgXCJweFwiO1xuICAgICAgICAgICAgICAgIGRvbS5zdHlsZS5sZWZ0ID0gbGVmdCAvIHNjYWxlWCArIFwicHhcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhcnJvdykge1xuICAgICAgICAgICAgICAgIGxldCBhcnJvd0xlZnQgPSBwb3MubGVmdCArIChsdHIgPyBvZmZzZXQueCA6IC1vZmZzZXQueCkgLSAobGVmdCArIDE0IC8qIEFycm93Lk9mZnNldCAqLyAtIDcgLyogQXJyb3cuU2l6ZSAqLyk7XG4gICAgICAgICAgICAgICAgYXJyb3cuc3R5bGUubGVmdCA9IGFycm93TGVmdCAvIHNjYWxlWCArIFwicHhcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0Vmlldy5vdmVybGFwICE9PSB0cnVlKVxuICAgICAgICAgICAgICAgIG90aGVycy5wdXNoKHsgbGVmdCwgdG9wLCByaWdodCwgYm90dG9tOiB0b3AgKyBoZWlnaHQgfSk7XG4gICAgICAgICAgICBkb20uY2xhc3NMaXN0LnRvZ2dsZShcImNtLXRvb2x0aXAtYWJvdmVcIiwgYWJvdmUpO1xuICAgICAgICAgICAgZG9tLmNsYXNzTGlzdC50b2dnbGUoXCJjbS10b29sdGlwLWJlbG93XCIsICFhYm92ZSk7XG4gICAgICAgICAgICBpZiAodFZpZXcucG9zaXRpb25lZClcbiAgICAgICAgICAgICAgICB0Vmlldy5wb3NpdGlvbmVkKG1lYXN1cmVkLnNwYWNlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBtYXliZU1lYXN1cmUoKSB7XG4gICAgICAgIGlmICh0aGlzLm1hbmFnZXIudG9vbHRpcHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy52aWV3LmluVmlldylcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcucmVxdWVzdE1lYXN1cmUodGhpcy5tZWFzdXJlUmVxKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmluVmlldyAhPSB0aGlzLnZpZXcuaW5WaWV3KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pblZpZXcgPSB0aGlzLnZpZXcuaW5WaWV3O1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pblZpZXcpXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHR2IG9mIHRoaXMubWFuYWdlci50b29sdGlwVmlld3MpXG4gICAgICAgICAgICAgICAgICAgICAgICB0di5kb20uc3R5bGUudG9wID0gT3V0c2lkZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0sIHtcbiAgICBldmVudE9ic2VydmVyczoge1xuICAgICAgICBzY3JvbGwoKSB7IHRoaXMubWF5YmVNZWFzdXJlKCk7IH1cbiAgICB9XG59KTtcbmNvbnN0IGJhc2VUaGVtZSA9IEVkaXRvclZpZXcuYmFzZVRoZW1lKHtcbiAgICBcIi5jbS10b29sdGlwXCI6IHtcbiAgICAgICAgekluZGV4OiAxMDAsXG4gICAgICAgIGJveFNpemluZzogXCJib3JkZXItYm94XCJcbiAgICB9LFxuICAgIFwiJmxpZ2h0IC5jbS10b29sdGlwXCI6IHtcbiAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCAjYmJiXCIsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogXCIjZjVmNWY1XCJcbiAgICB9LFxuICAgIFwiJmxpZ2h0IC5jbS10b29sdGlwLXNlY3Rpb246bm90KDpmaXJzdC1jaGlsZClcIjoge1xuICAgICAgICBib3JkZXJUb3A6IFwiMXB4IHNvbGlkICNiYmJcIixcbiAgICB9LFxuICAgIFwiJmRhcmsgLmNtLXRvb2x0aXBcIjoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiIzMzMzMzOFwiLFxuICAgICAgICBjb2xvcjogXCJ3aGl0ZVwiXG4gICAgfSxcbiAgICBcIi5jbS10b29sdGlwLWFycm93XCI6IHtcbiAgICAgICAgaGVpZ2h0OiBgJHs3IC8qIEFycm93LlNpemUgKi99cHhgLFxuICAgICAgICB3aWR0aDogYCR7NyAvKiBBcnJvdy5TaXplICovICogMn1weGAsXG4gICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICAgIHpJbmRleDogLTEsXG4gICAgICAgIG92ZXJmbG93OiBcImhpZGRlblwiLFxuICAgICAgICBcIiY6YmVmb3JlLCAmOmFmdGVyXCI6IHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IFwiJydcIixcbiAgICAgICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgICAgIGhlaWdodDogMCxcbiAgICAgICAgICAgIGJvcmRlckxlZnQ6IGAkezcgLyogQXJyb3cuU2l6ZSAqL31weCBzb2xpZCB0cmFuc3BhcmVudGAsXG4gICAgICAgICAgICBib3JkZXJSaWdodDogYCR7NyAvKiBBcnJvdy5TaXplICovfXB4IHNvbGlkIHRyYW5zcGFyZW50YCxcbiAgICAgICAgfSxcbiAgICAgICAgXCIuY20tdG9vbHRpcC1hYm92ZSAmXCI6IHtcbiAgICAgICAgICAgIGJvdHRvbTogYC0kezcgLyogQXJyb3cuU2l6ZSAqL31weGAsXG4gICAgICAgICAgICBcIiY6YmVmb3JlXCI6IHtcbiAgICAgICAgICAgICAgICBib3JkZXJUb3A6IGAkezcgLyogQXJyb3cuU2l6ZSAqL31weCBzb2xpZCAjYmJiYCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIiY6YWZ0ZXJcIjoge1xuICAgICAgICAgICAgICAgIGJvcmRlclRvcDogYCR7NyAvKiBBcnJvdy5TaXplICovfXB4IHNvbGlkICNmNWY1ZjVgLFxuICAgICAgICAgICAgICAgIGJvdHRvbTogXCIxcHhcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcIi5jbS10b29sdGlwLWJlbG93ICZcIjoge1xuICAgICAgICAgICAgdG9wOiBgLSR7NyAvKiBBcnJvdy5TaXplICovfXB4YCxcbiAgICAgICAgICAgIFwiJjpiZWZvcmVcIjoge1xuICAgICAgICAgICAgICAgIGJvcmRlckJvdHRvbTogYCR7NyAvKiBBcnJvdy5TaXplICovfXB4IHNvbGlkICNiYmJgLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiJjphZnRlclwiOiB7XG4gICAgICAgICAgICAgICAgYm9yZGVyQm90dG9tOiBgJHs3IC8qIEFycm93LlNpemUgKi99cHggc29saWQgI2Y1ZjVmNWAsXG4gICAgICAgICAgICAgICAgdG9wOiBcIjFweFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBcIiZkYXJrIC5jbS10b29sdGlwIC5jbS10b29sdGlwLWFycm93XCI6IHtcbiAgICAgICAgXCImOmJlZm9yZVwiOiB7XG4gICAgICAgICAgICBib3JkZXJUb3BDb2xvcjogXCIjMzMzMzM4XCIsXG4gICAgICAgICAgICBib3JkZXJCb3R0b21Db2xvcjogXCIjMzMzMzM4XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCImOmFmdGVyXCI6IHtcbiAgICAgICAgICAgIGJvcmRlclRvcENvbG9yOiBcInRyYW5zcGFyZW50XCIsXG4gICAgICAgICAgICBib3JkZXJCb3R0b21Db2xvcjogXCJ0cmFuc3BhcmVudFwiXG4gICAgICAgIH1cbiAgICB9XG59KTtcbmNvbnN0IG5vT2Zmc2V0ID0geyB4OiAwLCB5OiAwIH07XG4vKipcbkZhY2V0IHRvIHdoaWNoIGFuIGV4dGVuc2lvbiBjYW4gYWRkIGEgdmFsdWUgdG8gc2hvdyBhIHRvb2x0aXAuXG4qL1xuY29uc3Qgc2hvd1Rvb2x0aXAgPSBzdGF0ZS5GYWNldC5kZWZpbmUoe1xuICAgIGVuYWJsZXM6IFt0b29sdGlwUGx1Z2luLCBiYXNlVGhlbWVdXG59KTtcbmNvbnN0IHNob3dIb3ZlclRvb2x0aXAgPSBzdGF0ZS5GYWNldC5kZWZpbmUoe1xuICAgIGNvbWJpbmU6IGlucHV0cyA9PiBpbnB1dHMucmVkdWNlKChhLCBpKSA9PiBhLmNvbmNhdChpKSwgW10pXG59KTtcbmNsYXNzIEhvdmVyVG9vbHRpcEhvc3Qge1xuICAgIC8vIE5lZWRzIHRvIGJlIHN0YXRpYyBzbyB0aGF0IGhvc3QgdG9vbHRpcCBpbnN0YW5jZXMgYWx3YXlzIG1hdGNoXG4gICAgc3RhdGljIGNyZWF0ZSh2aWV3KSB7XG4gICAgICAgIHJldHVybiBuZXcgSG92ZXJUb29sdGlwSG9zdCh2aWV3KTtcbiAgICB9XG4gICAgY29uc3RydWN0b3Iodmlldykge1xuICAgICAgICB0aGlzLnZpZXcgPSB2aWV3O1xuICAgICAgICB0aGlzLm1vdW50ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kb20gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB0aGlzLmRvbS5jbGFzc0xpc3QuYWRkKFwiY20tdG9vbHRpcC1ob3ZlclwiKTtcbiAgICAgICAgdGhpcy5tYW5hZ2VyID0gbmV3IFRvb2x0aXBWaWV3TWFuYWdlcih2aWV3LCBzaG93SG92ZXJUb29sdGlwLCAodCwgcCkgPT4gdGhpcy5jcmVhdGVIb3N0ZWRWaWV3KHQsIHApLCB0ID0+IHQuZG9tLnJlbW92ZSgpKTtcbiAgICB9XG4gICAgY3JlYXRlSG9zdGVkVmlldyh0b29sdGlwLCBwcmV2KSB7XG4gICAgICAgIGxldCBob3N0ZWRWaWV3ID0gdG9vbHRpcC5jcmVhdGUodGhpcy52aWV3KTtcbiAgICAgICAgaG9zdGVkVmlldy5kb20uY2xhc3NMaXN0LmFkZChcImNtLXRvb2x0aXAtc2VjdGlvblwiKTtcbiAgICAgICAgdGhpcy5kb20uaW5zZXJ0QmVmb3JlKGhvc3RlZFZpZXcuZG9tLCBwcmV2ID8gcHJldi5kb20ubmV4dFNpYmxpbmcgOiB0aGlzLmRvbS5maXJzdENoaWxkKTtcbiAgICAgICAgaWYgKHRoaXMubW91bnRlZCAmJiBob3N0ZWRWaWV3Lm1vdW50KVxuICAgICAgICAgICAgaG9zdGVkVmlldy5tb3VudCh0aGlzLnZpZXcpO1xuICAgICAgICByZXR1cm4gaG9zdGVkVmlldztcbiAgICB9XG4gICAgbW91bnQodmlldykge1xuICAgICAgICBmb3IgKGxldCBob3N0ZWRWaWV3IG9mIHRoaXMubWFuYWdlci50b29sdGlwVmlld3MpIHtcbiAgICAgICAgICAgIGlmIChob3N0ZWRWaWV3Lm1vdW50KVxuICAgICAgICAgICAgICAgIGhvc3RlZFZpZXcubW91bnQodmlldyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tb3VudGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcG9zaXRpb25lZChzcGFjZSkge1xuICAgICAgICBmb3IgKGxldCBob3N0ZWRWaWV3IG9mIHRoaXMubWFuYWdlci50b29sdGlwVmlld3MpIHtcbiAgICAgICAgICAgIGlmIChob3N0ZWRWaWV3LnBvc2l0aW9uZWQpXG4gICAgICAgICAgICAgICAgaG9zdGVkVmlldy5wb3NpdGlvbmVkKHNwYWNlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB1cGRhdGUodXBkYXRlKSB7XG4gICAgICAgIHRoaXMubWFuYWdlci51cGRhdGUodXBkYXRlKTtcbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBmb3IgKGxldCB0IG9mIHRoaXMubWFuYWdlci50b29sdGlwVmlld3MpXG4gICAgICAgICAgICAoX2EgPSB0LmRlc3Ryb3kpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHQpO1xuICAgIH1cbiAgICBwYXNzUHJvcChuYW1lKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgZm9yIChsZXQgdmlldyBvZiB0aGlzLm1hbmFnZXIudG9vbHRpcFZpZXdzKSB7XG4gICAgICAgICAgICBsZXQgZ2l2ZW4gPSB2aWV3W25hbWVdO1xuICAgICAgICAgICAgaWYgKGdpdmVuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBnaXZlbjtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh2YWx1ZSAhPT0gZ2l2ZW4pXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBnZXQgb2Zmc2V0KCkgeyByZXR1cm4gdGhpcy5wYXNzUHJvcChcIm9mZnNldFwiKTsgfVxuICAgIGdldCBnZXRDb29yZHMoKSB7IHJldHVybiB0aGlzLnBhc3NQcm9wKFwiZ2V0Q29vcmRzXCIpOyB9XG4gICAgZ2V0IG92ZXJsYXAoKSB7IHJldHVybiB0aGlzLnBhc3NQcm9wKFwib3ZlcmxhcFwiKTsgfVxuICAgIGdldCByZXNpemUoKSB7IHJldHVybiB0aGlzLnBhc3NQcm9wKFwicmVzaXplXCIpOyB9XG59XG5jb25zdCBzaG93SG92ZXJUb29sdGlwSG9zdCA9IHNob3dUb29sdGlwLmNvbXB1dGUoW3Nob3dIb3ZlclRvb2x0aXBdLCBzdGF0ZSA9PiB7XG4gICAgbGV0IHRvb2x0aXBzID0gc3RhdGUuZmFjZXQoc2hvd0hvdmVyVG9vbHRpcCk7XG4gICAgaWYgKHRvb2x0aXBzLmxlbmd0aCA9PT0gMClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcG9zOiBNYXRoLm1pbiguLi50b29sdGlwcy5tYXAodCA9PiB0LnBvcykpLFxuICAgICAgICBlbmQ6IE1hdGgubWF4KC4uLnRvb2x0aXBzLm1hcCh0ID0+IHsgdmFyIF9hOyByZXR1cm4gKF9hID0gdC5lbmQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHQucG9zOyB9KSksXG4gICAgICAgIGNyZWF0ZTogSG92ZXJUb29sdGlwSG9zdC5jcmVhdGUsXG4gICAgICAgIGFib3ZlOiB0b29sdGlwc1swXS5hYm92ZSxcbiAgICAgICAgYXJyb3c6IHRvb2x0aXBzLnNvbWUodCA9PiB0LmFycm93KSxcbiAgICB9O1xufSk7XG5jbGFzcyBIb3ZlclBsdWdpbiB7XG4gICAgY29uc3RydWN0b3Iodmlldywgc291cmNlLCBmaWVsZCwgc2V0SG92ZXIsIGhvdmVyVGltZSkge1xuICAgICAgICB0aGlzLnZpZXcgPSB2aWV3O1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgdGhpcy5maWVsZCA9IGZpZWxkO1xuICAgICAgICB0aGlzLnNldEhvdmVyID0gc2V0SG92ZXI7XG4gICAgICAgIHRoaXMuaG92ZXJUaW1lID0gaG92ZXJUaW1lO1xuICAgICAgICB0aGlzLmhvdmVyVGltZW91dCA9IC0xO1xuICAgICAgICB0aGlzLnJlc3RhcnRUaW1lb3V0ID0gLTE7XG4gICAgICAgIHRoaXMucGVuZGluZyA9IG51bGw7XG4gICAgICAgIHRoaXMubGFzdE1vdmUgPSB7IHg6IDAsIHk6IDAsIHRhcmdldDogdmlldy5kb20sIHRpbWU6IDAgfTtcbiAgICAgICAgdGhpcy5jaGVja0hvdmVyID0gdGhpcy5jaGVja0hvdmVyLmJpbmQodGhpcyk7XG4gICAgICAgIHZpZXcuZG9tLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsIHRoaXMubW91c2VsZWF2ZSA9IHRoaXMubW91c2VsZWF2ZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgdmlldy5kb20uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLm1vdXNlbW92ZSA9IHRoaXMubW91c2Vtb3ZlLmJpbmQodGhpcykpO1xuICAgIH1cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIGlmICh0aGlzLnBlbmRpbmcpIHtcbiAgICAgICAgICAgIHRoaXMucGVuZGluZyA9IG51bGw7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5yZXN0YXJ0VGltZW91dCk7XG4gICAgICAgICAgICB0aGlzLnJlc3RhcnRUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLnN0YXJ0SG92ZXIoKSwgMjApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBhY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcuc3RhdGUuZmllbGQodGhpcy5maWVsZCk7XG4gICAgfVxuICAgIGNoZWNrSG92ZXIoKSB7XG4gICAgICAgIHRoaXMuaG92ZXJUaW1lb3V0ID0gLTE7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZS5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGxldCBob3ZlcmVkID0gRGF0ZS5ub3coKSAtIHRoaXMubGFzdE1vdmUudGltZTtcbiAgICAgICAgaWYgKGhvdmVyZWQgPCB0aGlzLmhvdmVyVGltZSlcbiAgICAgICAgICAgIHRoaXMuaG92ZXJUaW1lb3V0ID0gc2V0VGltZW91dCh0aGlzLmNoZWNrSG92ZXIsIHRoaXMuaG92ZXJUaW1lIC0gaG92ZXJlZCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRoaXMuc3RhcnRIb3ZlcigpO1xuICAgIH1cbiAgICBzdGFydEhvdmVyKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5yZXN0YXJ0VGltZW91dCk7XG4gICAgICAgIGxldCB7IHZpZXcsIGxhc3RNb3ZlIH0gPSB0aGlzO1xuICAgICAgICBsZXQgZGVzYyA9IHZpZXcuZG9jVmlldy5uZWFyZXN0KGxhc3RNb3ZlLnRhcmdldCk7XG4gICAgICAgIGlmICghZGVzYylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbGV0IHBvcywgc2lkZSA9IDE7XG4gICAgICAgIGlmIChkZXNjIGluc3RhbmNlb2YgV2lkZ2V0Vmlldykge1xuICAgICAgICAgICAgcG9zID0gZGVzYy5wb3NBdFN0YXJ0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcG9zID0gdmlldy5wb3NBdENvb3JkcyhsYXN0TW92ZSk7XG4gICAgICAgICAgICBpZiAocG9zID09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgbGV0IHBvc0Nvb3JkcyA9IHZpZXcuY29vcmRzQXRQb3MocG9zKTtcbiAgICAgICAgICAgIGlmICghcG9zQ29vcmRzIHx8XG4gICAgICAgICAgICAgICAgbGFzdE1vdmUueSA8IHBvc0Nvb3Jkcy50b3AgfHwgbGFzdE1vdmUueSA+IHBvc0Nvb3Jkcy5ib3R0b20gfHxcbiAgICAgICAgICAgICAgICBsYXN0TW92ZS54IDwgcG9zQ29vcmRzLmxlZnQgLSB2aWV3LmRlZmF1bHRDaGFyYWN0ZXJXaWR0aCB8fFxuICAgICAgICAgICAgICAgIGxhc3RNb3ZlLnggPiBwb3NDb29yZHMucmlnaHQgKyB2aWV3LmRlZmF1bHRDaGFyYWN0ZXJXaWR0aClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBsZXQgYmlkaSA9IHZpZXcuYmlkaVNwYW5zKHZpZXcuc3RhdGUuZG9jLmxpbmVBdChwb3MpKS5maW5kKHMgPT4gcy5mcm9tIDw9IHBvcyAmJiBzLnRvID49IHBvcyk7XG4gICAgICAgICAgICBsZXQgcnRsID0gYmlkaSAmJiBiaWRpLmRpciA9PSBleHBvcnRzLkRpcmVjdGlvbi5SVEwgPyAtMSA6IDE7XG4gICAgICAgICAgICBzaWRlID0gKGxhc3RNb3ZlLnggPCBwb3NDb29yZHMubGVmdCA/IC1ydGwgOiBydGwpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBvcGVuID0gdGhpcy5zb3VyY2UodmlldywgcG9zLCBzaWRlKTtcbiAgICAgICAgaWYgKG9wZW4gPT09IG51bGwgfHwgb3BlbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3Blbi50aGVuKSB7XG4gICAgICAgICAgICBsZXQgcGVuZGluZyA9IHRoaXMucGVuZGluZyA9IHsgcG9zIH07XG4gICAgICAgICAgICBvcGVuLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wZW5kaW5nID09IHBlbmRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5nID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCAmJiAhKEFycmF5LmlzQXJyYXkocmVzdWx0KSAmJiAhcmVzdWx0Lmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3LmRpc3BhdGNoKHsgZWZmZWN0czogdGhpcy5zZXRIb3Zlci5vZihBcnJheS5pc0FycmF5KHJlc3VsdCkgPyByZXN1bHQgOiBbcmVzdWx0XSkgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZSA9PiBsb2dFeGNlcHRpb24odmlldy5zdGF0ZSwgZSwgXCJob3ZlciB0b29sdGlwXCIpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvcGVuICYmICEoQXJyYXkuaXNBcnJheShvcGVuKSAmJiAhb3Blbi5sZW5ndGgpKSB7XG4gICAgICAgICAgICB2aWV3LmRpc3BhdGNoKHsgZWZmZWN0czogdGhpcy5zZXRIb3Zlci5vZihBcnJheS5pc0FycmF5KG9wZW4pID8gb3BlbiA6IFtvcGVuXSkgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IHRvb2x0aXAoKSB7XG4gICAgICAgIGxldCBwbHVnaW4gPSB0aGlzLnZpZXcucGx1Z2luKHRvb2x0aXBQbHVnaW4pO1xuICAgICAgICBsZXQgaW5kZXggPSBwbHVnaW4gPyBwbHVnaW4ubWFuYWdlci50b29sdGlwcy5maW5kSW5kZXgodCA9PiB0LmNyZWF0ZSA9PSBIb3ZlclRvb2x0aXBIb3N0LmNyZWF0ZSkgOiAtMTtcbiAgICAgICAgcmV0dXJuIGluZGV4ID4gLTEgPyBwbHVnaW4ubWFuYWdlci50b29sdGlwVmlld3NbaW5kZXhdIDogbnVsbDtcbiAgICB9XG4gICAgbW91c2Vtb3ZlKGV2ZW50KSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHRoaXMubGFzdE1vdmUgPSB7IHg6IGV2ZW50LmNsaWVudFgsIHk6IGV2ZW50LmNsaWVudFksIHRhcmdldDogZXZlbnQudGFyZ2V0LCB0aW1lOiBEYXRlLm5vdygpIH07XG4gICAgICAgIGlmICh0aGlzLmhvdmVyVGltZW91dCA8IDApXG4gICAgICAgICAgICB0aGlzLmhvdmVyVGltZW91dCA9IHNldFRpbWVvdXQodGhpcy5jaGVja0hvdmVyLCB0aGlzLmhvdmVyVGltZSk7XG4gICAgICAgIGxldCB7IGFjdGl2ZSwgdG9vbHRpcCB9ID0gdGhpcztcbiAgICAgICAgaWYgKGFjdGl2ZS5sZW5ndGggJiYgdG9vbHRpcCAmJiAhaXNJblRvb2x0aXAodG9vbHRpcC5kb20sIGV2ZW50KSB8fCB0aGlzLnBlbmRpbmcpIHtcbiAgICAgICAgICAgIGxldCB7IHBvcyB9ID0gYWN0aXZlWzBdIHx8IHRoaXMucGVuZGluZywgZW5kID0gKF9iID0gKF9hID0gYWN0aXZlWzBdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZW5kKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBwb3M7XG4gICAgICAgICAgICBpZiAoKHBvcyA9PSBlbmQgPyB0aGlzLnZpZXcucG9zQXRDb29yZHModGhpcy5sYXN0TW92ZSkgIT0gcG9zXG4gICAgICAgICAgICAgICAgOiAhaXNPdmVyUmFuZ2UodGhpcy52aWV3LCBwb3MsIGVuZCwgZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSkpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LmRpc3BhdGNoKHsgZWZmZWN0czogdGhpcy5zZXRIb3Zlci5vZihbXSkgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5nID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBtb3VzZWxlYXZlKGV2ZW50KSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmhvdmVyVGltZW91dCk7XG4gICAgICAgIHRoaXMuaG92ZXJUaW1lb3V0ID0gLTE7XG4gICAgICAgIGxldCB7IGFjdGl2ZSB9ID0gdGhpcztcbiAgICAgICAgaWYgKGFjdGl2ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxldCB7IHRvb2x0aXAgfSA9IHRoaXM7XG4gICAgICAgICAgICBsZXQgaW5Ub29sdGlwID0gdG9vbHRpcCAmJiB0b29sdGlwLmRvbS5jb250YWlucyhldmVudC5yZWxhdGVkVGFyZ2V0KTtcbiAgICAgICAgICAgIGlmICghaW5Ub29sdGlwKVxuICAgICAgICAgICAgICAgIHRoaXMudmlldy5kaXNwYXRjaCh7IGVmZmVjdHM6IHRoaXMuc2V0SG92ZXIub2YoW10pIH0pO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRoaXMud2F0Y2hUb29sdGlwTGVhdmUodG9vbHRpcC5kb20pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHdhdGNoVG9vbHRpcExlYXZlKHRvb2x0aXApIHtcbiAgICAgICAgbGV0IHdhdGNoID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0b29sdGlwLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsIHdhdGNoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZS5sZW5ndGggJiYgIXRoaXMudmlldy5kb20uY29udGFpbnMoZXZlbnQucmVsYXRlZFRhcmdldCkpXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LmRpc3BhdGNoKHsgZWZmZWN0czogdGhpcy5zZXRIb3Zlci5vZihbXSkgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRvb2x0aXAuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgd2F0Y2gpO1xuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5ob3ZlclRpbWVvdXQpO1xuICAgICAgICB0aGlzLnZpZXcuZG9tLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsIHRoaXMubW91c2VsZWF2ZSk7XG4gICAgICAgIHRoaXMudmlldy5kb20ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLm1vdXNlbW92ZSk7XG4gICAgfVxufVxuY29uc3QgdG9vbHRpcE1hcmdpbiA9IDQ7XG5mdW5jdGlvbiBpc0luVG9vbHRpcCh0b29sdGlwLCBldmVudCkge1xuICAgIGxldCByZWN0ID0gdG9vbHRpcC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICByZXR1cm4gZXZlbnQuY2xpZW50WCA+PSByZWN0LmxlZnQgLSB0b29sdGlwTWFyZ2luICYmIGV2ZW50LmNsaWVudFggPD0gcmVjdC5yaWdodCArIHRvb2x0aXBNYXJnaW4gJiZcbiAgICAgICAgZXZlbnQuY2xpZW50WSA+PSByZWN0LnRvcCAtIHRvb2x0aXBNYXJnaW4gJiYgZXZlbnQuY2xpZW50WSA8PSByZWN0LmJvdHRvbSArIHRvb2x0aXBNYXJnaW47XG59XG5mdW5jdGlvbiBpc092ZXJSYW5nZSh2aWV3LCBmcm9tLCB0bywgeCwgeSwgbWFyZ2luKSB7XG4gICAgbGV0IHJlY3QgPSB2aWV3LnNjcm9sbERPTS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBsZXQgZG9jQm90dG9tID0gdmlldy5kb2N1bWVudFRvcCArIHZpZXcuZG9jdW1lbnRQYWRkaW5nLnRvcCArIHZpZXcuY29udGVudEhlaWdodDtcbiAgICBpZiAocmVjdC5sZWZ0ID4geCB8fCByZWN0LnJpZ2h0IDwgeCB8fCByZWN0LnRvcCA+IHkgfHwgTWF0aC5taW4ocmVjdC5ib3R0b20sIGRvY0JvdHRvbSkgPCB5KVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0IHBvcyA9IHZpZXcucG9zQXRDb29yZHMoeyB4LCB5IH0sIGZhbHNlKTtcbiAgICByZXR1cm4gcG9zID49IGZyb20gJiYgcG9zIDw9IHRvO1xufVxuLyoqXG5TZXQgdXAgYSBob3ZlciB0b29sdGlwLCB3aGljaCBzaG93cyB1cCB3aGVuIHRoZSBwb2ludGVyIGhvdmVyc1xub3ZlciByYW5nZXMgb2YgdGV4dC4gVGhlIGNhbGxiYWNrIGlzIGNhbGxlZCB3aGVuIHRoZSBtb3VzZSBob3ZlcnNcbm92ZXIgdGhlIGRvY3VtZW50IHRleHQuIEl0IHNob3VsZCwgaWYgdGhlcmUgaXMgYSB0b29sdGlwXG5hc3NvY2lhdGVkIHdpdGggcG9zaXRpb24gYHBvc2AsIHJldHVybiB0aGUgdG9vbHRpcCBkZXNjcmlwdGlvblxuKGVpdGhlciBkaXJlY3RseSBvciBpbiBhIHByb21pc2UpLiBUaGUgYHNpZGVgIGFyZ3VtZW50IGluZGljYXRlc1xub24gd2hpY2ggc2lkZSBvZiB0aGUgcG9zaXRpb24gdGhlIHBvaW50ZXIgaXPigJRpdCB3aWxsIGJlIC0xIGlmIHRoZVxucG9pbnRlciBpcyBiZWZvcmUgdGhlIHBvc2l0aW9uLCAxIGlmIGFmdGVyIHRoZSBwb3NpdGlvbi5cblxuTm90ZSB0aGF0IGFsbCBob3ZlciB0b29sdGlwcyBhcmUgaG9zdGVkIHdpdGhpbiBhIHNpbmdsZSB0b29sdGlwXG5jb250YWluZXIgZWxlbWVudC4gVGhpcyBhbGxvd3MgbXVsdGlwbGUgdG9vbHRpcHMgb3ZlciB0aGUgc2FtZVxucmFuZ2UgdG8gYmUgXCJtZXJnZWRcIiB0b2dldGhlciB3aXRob3V0IG92ZXJsYXBwaW5nLlxuKi9cbmZ1bmN0aW9uIGhvdmVyVG9vbHRpcChzb3VyY2UsIG9wdGlvbnMgPSB7fSkge1xuICAgIGxldCBzZXRIb3ZlciA9IHN0YXRlLlN0YXRlRWZmZWN0LmRlZmluZSgpO1xuICAgIGxldCBob3ZlclN0YXRlID0gc3RhdGUuU3RhdGVGaWVsZC5kZWZpbmUoe1xuICAgICAgICBjcmVhdGUoKSB7IHJldHVybiBbXTsgfSxcbiAgICAgICAgdXBkYXRlKHZhbHVlLCB0cikge1xuICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmhpZGVPbkNoYW5nZSAmJiAodHIuZG9jQ2hhbmdlZCB8fCB0ci5zZWxlY3Rpb24pKVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IFtdO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG9wdGlvbnMuaGlkZU9uKVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLmZpbHRlcih2ID0+ICFvcHRpb25zLmhpZGVPbih0ciwgdikpO1xuICAgICAgICAgICAgICAgIGlmICh0ci5kb2NDaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtYXBwZWQgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgdG9vbHRpcCBvZiB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5ld1BvcyA9IHRyLmNoYW5nZXMubWFwUG9zKHRvb2x0aXAucG9zLCAtMSwgc3RhdGUuTWFwTW9kZS5UcmFja0RlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3UG9zICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29weSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShudWxsKSwgdG9vbHRpcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29weS5wb3MgPSBuZXdQb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvcHkuZW5kICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcHkuZW5kID0gdHIuY2hhbmdlcy5tYXBQb3MoY29weS5lbmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcHBlZC5wdXNoKGNvcHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbWFwcGVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAobGV0IGVmZmVjdCBvZiB0ci5lZmZlY3RzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVmZmVjdC5pcyhzZXRIb3ZlcikpXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gZWZmZWN0LnZhbHVlO1xuICAgICAgICAgICAgICAgIGlmIChlZmZlY3QuaXMoY2xvc2VIb3ZlclRvb2x0aXBFZmZlY3QpKVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBwcm92aWRlOiBmID0+IHNob3dIb3ZlclRvb2x0aXAuZnJvbShmKVxuICAgIH0pO1xuICAgIHJldHVybiBbXG4gICAgICAgIGhvdmVyU3RhdGUsXG4gICAgICAgIFZpZXdQbHVnaW4uZGVmaW5lKHZpZXcgPT4gbmV3IEhvdmVyUGx1Z2luKHZpZXcsIHNvdXJjZSwgaG92ZXJTdGF0ZSwgc2V0SG92ZXIsIG9wdGlvbnMuaG92ZXJUaW1lIHx8IDMwMCAvKiBIb3Zlci5UaW1lICovKSksXG4gICAgICAgIHNob3dIb3ZlclRvb2x0aXBIb3N0XG4gICAgXTtcbn1cbi8qKlxuR2V0IHRoZSBhY3RpdmUgdG9vbHRpcCB2aWV3IGZvciBhIGdpdmVuIHRvb2x0aXAsIGlmIGF2YWlsYWJsZS5cbiovXG5mdW5jdGlvbiBnZXRUb29sdGlwKHZpZXcsIHRvb2x0aXApIHtcbiAgICBsZXQgcGx1Z2luID0gdmlldy5wbHVnaW4odG9vbHRpcFBsdWdpbik7XG4gICAgaWYgKCFwbHVnaW4pXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIGxldCBmb3VuZCA9IHBsdWdpbi5tYW5hZ2VyLnRvb2x0aXBzLmluZGV4T2YodG9vbHRpcCk7XG4gICAgcmV0dXJuIGZvdW5kIDwgMCA/IG51bGwgOiBwbHVnaW4ubWFuYWdlci50b29sdGlwVmlld3NbZm91bmRdO1xufVxuLyoqXG5SZXR1cm5zIHRydWUgaWYgYW55IGhvdmVyIHRvb2x0aXBzIGFyZSBjdXJyZW50bHkgYWN0aXZlLlxuKi9cbmZ1bmN0aW9uIGhhc0hvdmVyVG9vbHRpcHMoc3RhdGUpIHtcbiAgICByZXR1cm4gc3RhdGUuZmFjZXQoc2hvd0hvdmVyVG9vbHRpcCkuc29tZSh4ID0+IHgpO1xufVxuY29uc3QgY2xvc2VIb3ZlclRvb2x0aXBFZmZlY3QgPSBzdGF0ZS5TdGF0ZUVmZmVjdC5kZWZpbmUoKTtcbi8qKlxuVHJhbnNhY3Rpb24gZWZmZWN0IHRoYXQgY2xvc2VzIGFsbCBob3ZlciB0b29sdGlwcy5cbiovXG5jb25zdCBjbG9zZUhvdmVyVG9vbHRpcHMgPSBjbG9zZUhvdmVyVG9vbHRpcEVmZmVjdC5vZihudWxsKTtcbi8qKlxuVGVsbCB0aGUgdG9vbHRpcCBleHRlbnNpb24gdG8gcmVjb21wdXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgYWN0aXZlXG50b29sdGlwcy4gVGhpcyBjYW4gYmUgdXNlZnVsIHdoZW4gc29tZXRoaW5nIGhhcHBlbnMgKHN1Y2ggYXMgYVxucmUtcG9zaXRpb25pbmcgb3IgQ1NTIGNoYW5nZSBhZmZlY3RpbmcgdGhlIGVkaXRvcikgdGhhdCBjb3VsZFxuaW52YWxpZGF0ZSB0aGUgZXhpc3RpbmcgdG9vbHRpcCBwb3NpdGlvbnMuXG4qL1xuZnVuY3Rpb24gcmVwb3NpdGlvblRvb2x0aXBzKHZpZXcpIHtcbiAgICBsZXQgcGx1Z2luID0gdmlldy5wbHVnaW4odG9vbHRpcFBsdWdpbik7XG4gICAgaWYgKHBsdWdpbilcbiAgICAgICAgcGx1Z2luLm1heWJlTWVhc3VyZSgpO1xufVxuXG5jb25zdCBwYW5lbENvbmZpZyA9IHN0YXRlLkZhY2V0LmRlZmluZSh7XG4gICAgY29tYmluZShjb25maWdzKSB7XG4gICAgICAgIGxldCB0b3BDb250YWluZXIsIGJvdHRvbUNvbnRhaW5lcjtcbiAgICAgICAgZm9yIChsZXQgYyBvZiBjb25maWdzKSB7XG4gICAgICAgICAgICB0b3BDb250YWluZXIgPSB0b3BDb250YWluZXIgfHwgYy50b3BDb250YWluZXI7XG4gICAgICAgICAgICBib3R0b21Db250YWluZXIgPSBib3R0b21Db250YWluZXIgfHwgYy5ib3R0b21Db250YWluZXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgdG9wQ29udGFpbmVyLCBib3R0b21Db250YWluZXIgfTtcbiAgICB9XG59KTtcbi8qKlxuQ29uZmlndXJlcyB0aGUgcGFuZWwtbWFuYWdpbmcgZXh0ZW5zaW9uLlxuKi9cbmZ1bmN0aW9uIHBhbmVscyhjb25maWcpIHtcbiAgICByZXR1cm4gY29uZmlnID8gW3BhbmVsQ29uZmlnLm9mKGNvbmZpZyldIDogW107XG59XG4vKipcbkdldCB0aGUgYWN0aXZlIHBhbmVsIGNyZWF0ZWQgYnkgdGhlIGdpdmVuIGNvbnN0cnVjdG9yLCBpZiBhbnkuXG5UaGlzIGNhbiBiZSB1c2VmdWwgd2hlbiB5b3UgbmVlZCBhY2Nlc3MgdG8geW91ciBwYW5lbHMnIERPTVxuc3RydWN0dXJlLlxuKi9cbmZ1bmN0aW9uIGdldFBhbmVsKHZpZXcsIHBhbmVsKSB7XG4gICAgbGV0IHBsdWdpbiA9IHZpZXcucGx1Z2luKHBhbmVsUGx1Z2luKTtcbiAgICBsZXQgaW5kZXggPSBwbHVnaW4gPyBwbHVnaW4uc3BlY3MuaW5kZXhPZihwYW5lbCkgOiAtMTtcbiAgICByZXR1cm4gaW5kZXggPiAtMSA/IHBsdWdpbi5wYW5lbHNbaW5kZXhdIDogbnVsbDtcbn1cbmNvbnN0IHBhbmVsUGx1Z2luID0gVmlld1BsdWdpbi5mcm9tQ2xhc3MoY2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKHZpZXcpIHtcbiAgICAgICAgdGhpcy5pbnB1dCA9IHZpZXcuc3RhdGUuZmFjZXQoc2hvd1BhbmVsKTtcbiAgICAgICAgdGhpcy5zcGVjcyA9IHRoaXMuaW5wdXQuZmlsdGVyKHMgPT4gcyk7XG4gICAgICAgIHRoaXMucGFuZWxzID0gdGhpcy5zcGVjcy5tYXAoc3BlYyA9PiBzcGVjKHZpZXcpKTtcbiAgICAgICAgbGV0IGNvbmYgPSB2aWV3LnN0YXRlLmZhY2V0KHBhbmVsQ29uZmlnKTtcbiAgICAgICAgdGhpcy50b3AgPSBuZXcgUGFuZWxHcm91cCh2aWV3LCB0cnVlLCBjb25mLnRvcENvbnRhaW5lcik7XG4gICAgICAgIHRoaXMuYm90dG9tID0gbmV3IFBhbmVsR3JvdXAodmlldywgZmFsc2UsIGNvbmYuYm90dG9tQ29udGFpbmVyKTtcbiAgICAgICAgdGhpcy50b3Auc3luYyh0aGlzLnBhbmVscy5maWx0ZXIocCA9PiBwLnRvcCkpO1xuICAgICAgICB0aGlzLmJvdHRvbS5zeW5jKHRoaXMucGFuZWxzLmZpbHRlcihwID0+ICFwLnRvcCkpO1xuICAgICAgICBmb3IgKGxldCBwIG9mIHRoaXMucGFuZWxzKSB7XG4gICAgICAgICAgICBwLmRvbS5jbGFzc0xpc3QuYWRkKFwiY20tcGFuZWxcIik7XG4gICAgICAgICAgICBpZiAocC5tb3VudClcbiAgICAgICAgICAgICAgICBwLm1vdW50KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlKHVwZGF0ZSkge1xuICAgICAgICBsZXQgY29uZiA9IHVwZGF0ZS5zdGF0ZS5mYWNldChwYW5lbENvbmZpZyk7XG4gICAgICAgIGlmICh0aGlzLnRvcC5jb250YWluZXIgIT0gY29uZi50b3BDb250YWluZXIpIHtcbiAgICAgICAgICAgIHRoaXMudG9wLnN5bmMoW10pO1xuICAgICAgICAgICAgdGhpcy50b3AgPSBuZXcgUGFuZWxHcm91cCh1cGRhdGUudmlldywgdHJ1ZSwgY29uZi50b3BDb250YWluZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmJvdHRvbS5jb250YWluZXIgIT0gY29uZi5ib3R0b21Db250YWluZXIpIHtcbiAgICAgICAgICAgIHRoaXMuYm90dG9tLnN5bmMoW10pO1xuICAgICAgICAgICAgdGhpcy5ib3R0b20gPSBuZXcgUGFuZWxHcm91cCh1cGRhdGUudmlldywgZmFsc2UsIGNvbmYuYm90dG9tQ29udGFpbmVyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRvcC5zeW5jQ2xhc3NlcygpO1xuICAgICAgICB0aGlzLmJvdHRvbS5zeW5jQ2xhc3NlcygpO1xuICAgICAgICBsZXQgaW5wdXQgPSB1cGRhdGUuc3RhdGUuZmFjZXQoc2hvd1BhbmVsKTtcbiAgICAgICAgaWYgKGlucHV0ICE9IHRoaXMuaW5wdXQpIHtcbiAgICAgICAgICAgIGxldCBzcGVjcyA9IGlucHV0LmZpbHRlcih4ID0+IHgpO1xuICAgICAgICAgICAgbGV0IHBhbmVscyA9IFtdLCB0b3AgPSBbXSwgYm90dG9tID0gW10sIG1vdW50ID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBzcGVjIG9mIHNwZWNzKSB7XG4gICAgICAgICAgICAgICAgbGV0IGtub3duID0gdGhpcy5zcGVjcy5pbmRleE9mKHNwZWMpLCBwYW5lbDtcbiAgICAgICAgICAgICAgICBpZiAoa25vd24gPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhbmVsID0gc3BlYyh1cGRhdGUudmlldyk7XG4gICAgICAgICAgICAgICAgICAgIG1vdW50LnB1c2gocGFuZWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGFuZWwgPSB0aGlzLnBhbmVsc1trbm93bl07XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYW5lbC51cGRhdGUpXG4gICAgICAgICAgICAgICAgICAgICAgICBwYW5lbC51cGRhdGUodXBkYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcGFuZWxzLnB1c2gocGFuZWwpO1xuICAgICAgICAgICAgICAgIChwYW5lbC50b3AgPyB0b3AgOiBib3R0b20pLnB1c2gocGFuZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zcGVjcyA9IHNwZWNzO1xuICAgICAgICAgICAgdGhpcy5wYW5lbHMgPSBwYW5lbHM7XG4gICAgICAgICAgICB0aGlzLnRvcC5zeW5jKHRvcCk7XG4gICAgICAgICAgICB0aGlzLmJvdHRvbS5zeW5jKGJvdHRvbSk7XG4gICAgICAgICAgICBmb3IgKGxldCBwIG9mIG1vdW50KSB7XG4gICAgICAgICAgICAgICAgcC5kb20uY2xhc3NMaXN0LmFkZChcImNtLXBhbmVsXCIpO1xuICAgICAgICAgICAgICAgIGlmIChwLm1vdW50KVxuICAgICAgICAgICAgICAgICAgICBwLm1vdW50KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGxldCBwIG9mIHRoaXMucGFuZWxzKVxuICAgICAgICAgICAgICAgIGlmIChwLnVwZGF0ZSlcbiAgICAgICAgICAgICAgICAgICAgcC51cGRhdGUodXBkYXRlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLnRvcC5zeW5jKFtdKTtcbiAgICAgICAgdGhpcy5ib3R0b20uc3luYyhbXSk7XG4gICAgfVxufSwge1xuICAgIHByb3ZpZGU6IHBsdWdpbiA9PiBFZGl0b3JWaWV3LnNjcm9sbE1hcmdpbnMub2YodmlldyA9PiB7XG4gICAgICAgIGxldCB2YWx1ZSA9IHZpZXcucGx1Z2luKHBsdWdpbik7XG4gICAgICAgIHJldHVybiB2YWx1ZSAmJiB7IHRvcDogdmFsdWUudG9wLnNjcm9sbE1hcmdpbigpLCBib3R0b206IHZhbHVlLmJvdHRvbS5zY3JvbGxNYXJnaW4oKSB9O1xuICAgIH0pXG59KTtcbmNsYXNzIFBhbmVsR3JvdXAge1xuICAgIGNvbnN0cnVjdG9yKHZpZXcsIHRvcCwgY29udGFpbmVyKSB7XG4gICAgICAgIHRoaXMudmlldyA9IHZpZXc7XG4gICAgICAgIHRoaXMudG9wID0gdG9wO1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgICAgdGhpcy5kb20gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuY2xhc3NlcyA9IFwiXCI7XG4gICAgICAgIHRoaXMucGFuZWxzID0gW107XG4gICAgICAgIHRoaXMuc3luY0NsYXNzZXMoKTtcbiAgICB9XG4gICAgc3luYyhwYW5lbHMpIHtcbiAgICAgICAgZm9yIChsZXQgcCBvZiB0aGlzLnBhbmVscylcbiAgICAgICAgICAgIGlmIChwLmRlc3Ryb3kgJiYgcGFuZWxzLmluZGV4T2YocCkgPCAwKVxuICAgICAgICAgICAgICAgIHAuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLnBhbmVscyA9IHBhbmVscztcbiAgICAgICAgdGhpcy5zeW5jRE9NKCk7XG4gICAgfVxuICAgIHN5bmNET00oKSB7XG4gICAgICAgIGlmICh0aGlzLnBhbmVscy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZG9tKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kb20ucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5kb20gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmRvbSkge1xuICAgICAgICAgICAgdGhpcy5kb20gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgdGhpcy5kb20uY2xhc3NOYW1lID0gdGhpcy50b3AgPyBcImNtLXBhbmVscyBjbS1wYW5lbHMtdG9wXCIgOiBcImNtLXBhbmVscyBjbS1wYW5lbHMtYm90dG9tXCI7XG4gICAgICAgICAgICB0aGlzLmRvbS5zdHlsZVt0aGlzLnRvcCA/IFwidG9wXCIgOiBcImJvdHRvbVwiXSA9IFwiMFwiO1xuICAgICAgICAgICAgbGV0IHBhcmVudCA9IHRoaXMuY29udGFpbmVyIHx8IHRoaXMudmlldy5kb207XG4gICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKHRoaXMuZG9tLCB0aGlzLnRvcCA/IHBhcmVudC5maXJzdENoaWxkIDogbnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGN1ckRPTSA9IHRoaXMuZG9tLmZpcnN0Q2hpbGQ7XG4gICAgICAgIGZvciAobGV0IHBhbmVsIG9mIHRoaXMucGFuZWxzKSB7XG4gICAgICAgICAgICBpZiAocGFuZWwuZG9tLnBhcmVudE5vZGUgPT0gdGhpcy5kb20pIHtcbiAgICAgICAgICAgICAgICB3aGlsZSAoY3VyRE9NICE9IHBhbmVsLmRvbSlcbiAgICAgICAgICAgICAgICAgICAgY3VyRE9NID0gcm0oY3VyRE9NKTtcbiAgICAgICAgICAgICAgICBjdXJET00gPSBjdXJET00ubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRvbS5pbnNlcnRCZWZvcmUocGFuZWwuZG9tLCBjdXJET00pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChjdXJET00pXG4gICAgICAgICAgICBjdXJET00gPSBybShjdXJET00pO1xuICAgIH1cbiAgICBzY3JvbGxNYXJnaW4oKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5kb20gfHwgdGhpcy5jb250YWluZXIgPyAwXG4gICAgICAgICAgICA6IE1hdGgubWF4KDAsIHRoaXMudG9wID9cbiAgICAgICAgICAgICAgICB0aGlzLmRvbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b20gLSBNYXRoLm1heCgwLCB0aGlzLnZpZXcuc2Nyb2xsRE9NLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCkgOlxuICAgICAgICAgICAgICAgIE1hdGgubWluKGlubmVySGVpZ2h0LCB0aGlzLnZpZXcuc2Nyb2xsRE9NLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbSkgLSB0aGlzLmRvbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3ApO1xuICAgIH1cbiAgICBzeW5jQ2xhc3NlcygpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbnRhaW5lciB8fCB0aGlzLmNsYXNzZXMgPT0gdGhpcy52aWV3LnRoZW1lQ2xhc3NlcylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgZm9yIChsZXQgY2xzIG9mIHRoaXMuY2xhc3Nlcy5zcGxpdChcIiBcIikpXG4gICAgICAgICAgICBpZiAoY2xzKVxuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoY2xzKTtcbiAgICAgICAgZm9yIChsZXQgY2xzIG9mICh0aGlzLmNsYXNzZXMgPSB0aGlzLnZpZXcudGhlbWVDbGFzc2VzKS5zcGxpdChcIiBcIikpXG4gICAgICAgICAgICBpZiAoY2xzKVxuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoY2xzKTtcbiAgICB9XG59XG5mdW5jdGlvbiBybShub2RlKSB7XG4gICAgbGV0IG5leHQgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgIG5vZGUucmVtb3ZlKCk7XG4gICAgcmV0dXJuIG5leHQ7XG59XG4vKipcbk9wZW5pbmcgYSBwYW5lbCBpcyBkb25lIGJ5IHByb3ZpZGluZyBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIGZvclxudGhlIHBhbmVsIHRocm91Z2ggdGhpcyBmYWNldC4gKFRoZSBwYW5lbCBpcyBjbG9zZWQgYWdhaW4gd2hlbiBpdHNcbmNvbnN0cnVjdG9yIGlzIG5vIGxvbmdlciBwcm92aWRlZC4pIFZhbHVlcyBvZiBgbnVsbGAgYXJlIGlnbm9yZWQuXG4qL1xuY29uc3Qgc2hvd1BhbmVsID0gc3RhdGUuRmFjZXQuZGVmaW5lKHtcbiAgICBlbmFibGVzOiBwYW5lbFBsdWdpblxufSk7XG5cbi8qKlxuQSBndXR0ZXIgbWFya2VyIHJlcHJlc2VudHMgYSBiaXQgb2YgaW5mb3JtYXRpb24gYXR0YWNoZWQgdG8gYSBsaW5lXG5pbiBhIHNwZWNpZmljIGd1dHRlci4gWW91ciBvd24gY3VzdG9tIG1hcmtlcnMgaGF2ZSB0byBleHRlbmQgdGhpc1xuY2xhc3MuXG4qL1xuY2xhc3MgR3V0dGVyTWFya2VyIGV4dGVuZHMgc3RhdGUuUmFuZ2VWYWx1ZSB7XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBjb21wYXJlKG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzID09IG90aGVyIHx8IHRoaXMuY29uc3RydWN0b3IgPT0gb3RoZXIuY29uc3RydWN0b3IgJiYgdGhpcy5lcShvdGhlcik7XG4gICAgfVxuICAgIC8qKlxuICAgIENvbXBhcmUgdGhpcyBtYXJrZXIgdG8gYW5vdGhlciBtYXJrZXIgb2YgdGhlIHNhbWUgdHlwZS5cbiAgICAqL1xuICAgIGVxKG90aGVyKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIC8qKlxuICAgIENhbGxlZCBpZiB0aGUgbWFya2VyIGhhcyBhIGB0b0RPTWAgbWV0aG9kIGFuZCBpdHMgcmVwcmVzZW50YXRpb25cbiAgICB3YXMgcmVtb3ZlZCBmcm9tIGEgZ3V0dGVyLlxuICAgICovXG4gICAgZGVzdHJveShkb20pIHsgfVxufVxuR3V0dGVyTWFya2VyLnByb3RvdHlwZS5lbGVtZW50Q2xhc3MgPSBcIlwiO1xuR3V0dGVyTWFya2VyLnByb3RvdHlwZS50b0RPTSA9IHVuZGVmaW5lZDtcbkd1dHRlck1hcmtlci5wcm90b3R5cGUubWFwTW9kZSA9IHN0YXRlLk1hcE1vZGUuVHJhY2tCZWZvcmU7XG5HdXR0ZXJNYXJrZXIucHJvdG90eXBlLnN0YXJ0U2lkZSA9IEd1dHRlck1hcmtlci5wcm90b3R5cGUuZW5kU2lkZSA9IC0xO1xuR3V0dGVyTWFya2VyLnByb3RvdHlwZS5wb2ludCA9IHRydWU7XG4vKipcbkZhY2V0IHVzZWQgdG8gYWRkIGEgY2xhc3MgdG8gYWxsIGd1dHRlciBlbGVtZW50cyBmb3IgYSBnaXZlbiBsaW5lLlxuTWFya2VycyBnaXZlbiB0byB0aGlzIGZhY2V0IHNob3VsZCBfb25seV8gZGVmaW5lIGFuXG5bYGVsZW1lbnRjbGFzc2BdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvNi9kb2NzL3JlZi8jdmlldy5HdXR0ZXJNYXJrZXIuZWxlbWVudENsYXNzKSwgbm90IGFcbltgdG9ET01gXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3ZpZXcuR3V0dGVyTWFya2VyLnRvRE9NKSAob3IgdGhlIG1hcmtlciB3aWxsIGFwcGVhclxuaW4gYWxsIGd1dHRlcnMgZm9yIHRoZSBsaW5lKS5cbiovXG5jb25zdCBndXR0ZXJMaW5lQ2xhc3MgPSBzdGF0ZS5GYWNldC5kZWZpbmUoKTtcbmNvbnN0IGRlZmF1bHRzID0ge1xuICAgIGNsYXNzOiBcIlwiLFxuICAgIHJlbmRlckVtcHR5RWxlbWVudHM6IGZhbHNlLFxuICAgIGVsZW1lbnRTdHlsZTogXCJcIixcbiAgICBtYXJrZXJzOiAoKSA9PiBzdGF0ZS5SYW5nZVNldC5lbXB0eSxcbiAgICBsaW5lTWFya2VyOiAoKSA9PiBudWxsLFxuICAgIHdpZGdldE1hcmtlcjogKCkgPT4gbnVsbCxcbiAgICBsaW5lTWFya2VyQ2hhbmdlOiBudWxsLFxuICAgIGluaXRpYWxTcGFjZXI6IG51bGwsXG4gICAgdXBkYXRlU3BhY2VyOiBudWxsLFxuICAgIGRvbUV2ZW50SGFuZGxlcnM6IHt9XG59O1xuY29uc3QgYWN0aXZlR3V0dGVycyA9IHN0YXRlLkZhY2V0LmRlZmluZSgpO1xuLyoqXG5EZWZpbmUgYW4gZWRpdG9yIGd1dHRlci4gVGhlIG9yZGVyIGluIHdoaWNoIHRoZSBndXR0ZXJzIGFwcGVhciBpc1xuZGV0ZXJtaW5lZCBieSB0aGVpciBleHRlbnNpb24gcHJpb3JpdHkuXG4qL1xuZnVuY3Rpb24gZ3V0dGVyKGNvbmZpZykge1xuICAgIHJldHVybiBbZ3V0dGVycygpLCBhY3RpdmVHdXR0ZXJzLm9mKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdHMpLCBjb25maWcpKV07XG59XG5jb25zdCB1bmZpeEd1dHRlcnMgPSBzdGF0ZS5GYWNldC5kZWZpbmUoe1xuICAgIGNvbWJpbmU6IHZhbHVlcyA9PiB2YWx1ZXMuc29tZSh4ID0+IHgpXG59KTtcbi8qKlxuVGhlIGd1dHRlci1kcmF3aW5nIHBsdWdpbiBpcyBhdXRvbWF0aWNhbGx5IGVuYWJsZWQgd2hlbiB5b3UgYWRkIGFcbmd1dHRlciwgYnV0IHlvdSBjYW4gdXNlIHRoaXMgZnVuY3Rpb24gdG8gZXhwbGljaXRseSBjb25maWd1cmUgaXQuXG5cblVubGVzcyBgZml4ZWRgIGlzIGV4cGxpY2l0bHkgc2V0IHRvIGBmYWxzZWAsIHRoZSBndXR0ZXJzIGFyZVxuZml4ZWQsIG1lYW5pbmcgdGhleSBkb24ndCBzY3JvbGwgYWxvbmcgd2l0aCB0aGUgY29udGVudFxuaG9yaXpvbnRhbGx5IChleGNlcHQgb24gSW50ZXJuZXQgRXhwbG9yZXIsIHdoaWNoIGRvZXNuJ3Qgc3VwcG9ydFxuQ1NTIFtgcG9zaXRpb246XG5zdGlja3lgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvcG9zaXRpb24jc3RpY2t5KSkuXG4qL1xuZnVuY3Rpb24gZ3V0dGVycyhjb25maWcpIHtcbiAgICBsZXQgcmVzdWx0ID0gW1xuICAgICAgICBndXR0ZXJWaWV3LFxuICAgIF07XG4gICAgaWYgKGNvbmZpZyAmJiBjb25maWcuZml4ZWQgPT09IGZhbHNlKVxuICAgICAgICByZXN1bHQucHVzaCh1bmZpeEd1dHRlcnMub2YodHJ1ZSkpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5jb25zdCBndXR0ZXJWaWV3ID0gVmlld1BsdWdpbi5mcm9tQ2xhc3MoY2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKHZpZXcpIHtcbiAgICAgICAgdGhpcy52aWV3ID0gdmlldztcbiAgICAgICAgdGhpcy5wcmV2Vmlld3BvcnQgPSB2aWV3LnZpZXdwb3J0O1xuICAgICAgICB0aGlzLmRvbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHRoaXMuZG9tLmNsYXNzTmFtZSA9IFwiY20tZ3V0dGVyc1wiO1xuICAgICAgICB0aGlzLmRvbS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLCBcInRydWVcIik7XG4gICAgICAgIHRoaXMuZG9tLnN0eWxlLm1pbkhlaWdodCA9ICh0aGlzLnZpZXcuY29udGVudEhlaWdodCAvIHRoaXMudmlldy5zY2FsZVkpICsgXCJweFwiO1xuICAgICAgICB0aGlzLmd1dHRlcnMgPSB2aWV3LnN0YXRlLmZhY2V0KGFjdGl2ZUd1dHRlcnMpLm1hcChjb25mID0+IG5ldyBTaW5nbGVHdXR0ZXJWaWV3KHZpZXcsIGNvbmYpKTtcbiAgICAgICAgZm9yIChsZXQgZ3V0dGVyIG9mIHRoaXMuZ3V0dGVycylcbiAgICAgICAgICAgIHRoaXMuZG9tLmFwcGVuZENoaWxkKGd1dHRlci5kb20pO1xuICAgICAgICB0aGlzLmZpeGVkID0gIXZpZXcuc3RhdGUuZmFjZXQodW5maXhHdXR0ZXJzKTtcbiAgICAgICAgaWYgKHRoaXMuZml4ZWQpIHtcbiAgICAgICAgICAgIC8vIEZJWE1FIElFMTEgZmFsbGJhY2ssIHdoaWNoIGRvZXNuJ3Qgc3VwcG9ydCBwb3NpdGlvbjogc3RpY2t5LFxuICAgICAgICAgICAgLy8gYnkgdXNpbmcgcG9zaXRpb246IHJlbGF0aXZlICsgZXZlbnQgaGFuZGxlcnMgdGhhdCByZWFsaWduIHRoZVxuICAgICAgICAgICAgLy8gZ3V0dGVyIChvciBqdXN0IGZvcmNlIGZpeGVkPWZhbHNlIG9uIElFMTE/KVxuICAgICAgICAgICAgdGhpcy5kb20uc3R5bGUucG9zaXRpb24gPSBcInN0aWNreVwiO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3luY0d1dHRlcnMoZmFsc2UpO1xuICAgICAgICB2aWV3LnNjcm9sbERPTS5pbnNlcnRCZWZvcmUodGhpcy5kb20sIHZpZXcuY29udGVudERPTSk7XG4gICAgfVxuICAgIHVwZGF0ZSh1cGRhdGUpIHtcbiAgICAgICAgaWYgKHRoaXMudXBkYXRlR3V0dGVycyh1cGRhdGUpKSB7XG4gICAgICAgICAgICAvLyBEZXRhY2ggZHVyaW5nIHN5bmMgd2hlbiB0aGUgdmlld3BvcnQgY2hhbmdlZCBzaWduaWZpY2FudGx5XG4gICAgICAgICAgICAvLyAoc3VjaCBhcyBkdXJpbmcgc2Nyb2xsaW5nKSwgc2luY2UgZm9yIGxhcmdlIHVwZGF0ZXMgdGhhdCBpc1xuICAgICAgICAgICAgLy8gZmFzdGVyLlxuICAgICAgICAgICAgbGV0IHZwQSA9IHRoaXMucHJldlZpZXdwb3J0LCB2cEIgPSB1cGRhdGUudmlldy52aWV3cG9ydDtcbiAgICAgICAgICAgIGxldCB2cE92ZXJsYXAgPSBNYXRoLm1pbih2cEEudG8sIHZwQi50bykgLSBNYXRoLm1heCh2cEEuZnJvbSwgdnBCLmZyb20pO1xuICAgICAgICAgICAgdGhpcy5zeW5jR3V0dGVycyh2cE92ZXJsYXAgPCAodnBCLnRvIC0gdnBCLmZyb20pICogMC44KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodXBkYXRlLmdlb21ldHJ5Q2hhbmdlZCkge1xuICAgICAgICAgICAgdGhpcy5kb20uc3R5bGUubWluSGVpZ2h0ID0gKHRoaXMudmlldy5jb250ZW50SGVpZ2h0IC8gdGhpcy52aWV3LnNjYWxlWSkgKyBcInB4XCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudmlldy5zdGF0ZS5mYWNldCh1bmZpeEd1dHRlcnMpICE9ICF0aGlzLmZpeGVkKSB7XG4gICAgICAgICAgICB0aGlzLmZpeGVkID0gIXRoaXMuZml4ZWQ7XG4gICAgICAgICAgICB0aGlzLmRvbS5zdHlsZS5wb3NpdGlvbiA9IHRoaXMuZml4ZWQgPyBcInN0aWNreVwiIDogXCJcIjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByZXZWaWV3cG9ydCA9IHVwZGF0ZS52aWV3LnZpZXdwb3J0O1xuICAgIH1cbiAgICBzeW5jR3V0dGVycyhkZXRhY2gpIHtcbiAgICAgICAgbGV0IGFmdGVyID0gdGhpcy5kb20ubmV4dFNpYmxpbmc7XG4gICAgICAgIGlmIChkZXRhY2gpXG4gICAgICAgICAgICB0aGlzLmRvbS5yZW1vdmUoKTtcbiAgICAgICAgbGV0IGxpbmVDbGFzc2VzID0gc3RhdGUuUmFuZ2VTZXQuaXRlcih0aGlzLnZpZXcuc3RhdGUuZmFjZXQoZ3V0dGVyTGluZUNsYXNzKSwgdGhpcy52aWV3LnZpZXdwb3J0LmZyb20pO1xuICAgICAgICBsZXQgY2xhc3NTZXQgPSBbXTtcbiAgICAgICAgbGV0IGNvbnRleHRzID0gdGhpcy5ndXR0ZXJzLm1hcChndXR0ZXIgPT4gbmV3IFVwZGF0ZUNvbnRleHQoZ3V0dGVyLCB0aGlzLnZpZXcudmlld3BvcnQsIC10aGlzLnZpZXcuZG9jdW1lbnRQYWRkaW5nLnRvcCkpO1xuICAgICAgICBmb3IgKGxldCBsaW5lIG9mIHRoaXMudmlldy52aWV3cG9ydExpbmVCbG9ja3MpIHtcbiAgICAgICAgICAgIGlmIChjbGFzc1NldC5sZW5ndGgpXG4gICAgICAgICAgICAgICAgY2xhc3NTZXQgPSBbXTtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGxpbmUudHlwZSkpIHtcbiAgICAgICAgICAgICAgICBsZXQgZmlyc3QgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGIgb2YgbGluZS50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChiLnR5cGUgPT0gZXhwb3J0cy5CbG9ja1R5cGUuVGV4dCAmJiBmaXJzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWR2YW5jZUN1cnNvcihsaW5lQ2xhc3NlcywgY2xhc3NTZXQsIGIuZnJvbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBjeCBvZiBjb250ZXh0cylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjeC5saW5lKHRoaXMudmlldywgYiwgY2xhc3NTZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChiLndpZGdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgY3ggb2YgY29udGV4dHMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3gud2lkZ2V0KHRoaXMudmlldywgYik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChsaW5lLnR5cGUgPT0gZXhwb3J0cy5CbG9ja1R5cGUuVGV4dCkge1xuICAgICAgICAgICAgICAgIGFkdmFuY2VDdXJzb3IobGluZUNsYXNzZXMsIGNsYXNzU2V0LCBsaW5lLmZyb20pO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGN4IG9mIGNvbnRleHRzKVxuICAgICAgICAgICAgICAgICAgICBjeC5saW5lKHRoaXMudmlldywgbGluZSwgY2xhc3NTZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobGluZS53aWRnZXQpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjeCBvZiBjb250ZXh0cylcbiAgICAgICAgICAgICAgICAgICAgY3gud2lkZ2V0KHRoaXMudmlldywgbGluZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgY3ggb2YgY29udGV4dHMpXG4gICAgICAgICAgICBjeC5maW5pc2goKTtcbiAgICAgICAgaWYgKGRldGFjaClcbiAgICAgICAgICAgIHRoaXMudmlldy5zY3JvbGxET00uaW5zZXJ0QmVmb3JlKHRoaXMuZG9tLCBhZnRlcik7XG4gICAgfVxuICAgIHVwZGF0ZUd1dHRlcnModXBkYXRlKSB7XG4gICAgICAgIGxldCBwcmV2ID0gdXBkYXRlLnN0YXJ0U3RhdGUuZmFjZXQoYWN0aXZlR3V0dGVycyksIGN1ciA9IHVwZGF0ZS5zdGF0ZS5mYWNldChhY3RpdmVHdXR0ZXJzKTtcbiAgICAgICAgbGV0IGNoYW5nZSA9IHVwZGF0ZS5kb2NDaGFuZ2VkIHx8IHVwZGF0ZS5oZWlnaHRDaGFuZ2VkIHx8IHVwZGF0ZS52aWV3cG9ydENoYW5nZWQgfHxcbiAgICAgICAgICAgICFzdGF0ZS5SYW5nZVNldC5lcSh1cGRhdGUuc3RhcnRTdGF0ZS5mYWNldChndXR0ZXJMaW5lQ2xhc3MpLCB1cGRhdGUuc3RhdGUuZmFjZXQoZ3V0dGVyTGluZUNsYXNzKSwgdXBkYXRlLnZpZXcudmlld3BvcnQuZnJvbSwgdXBkYXRlLnZpZXcudmlld3BvcnQudG8pO1xuICAgICAgICBpZiAocHJldiA9PSBjdXIpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGd1dHRlciBvZiB0aGlzLmd1dHRlcnMpXG4gICAgICAgICAgICAgICAgaWYgKGd1dHRlci51cGRhdGUodXBkYXRlKSlcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNoYW5nZSA9IHRydWU7XG4gICAgICAgICAgICBsZXQgZ3V0dGVycyA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgY29uZiBvZiBjdXIpIHtcbiAgICAgICAgICAgICAgICBsZXQga25vd24gPSBwcmV2LmluZGV4T2YoY29uZik7XG4gICAgICAgICAgICAgICAgaWYgKGtub3duIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICBndXR0ZXJzLnB1c2gobmV3IFNpbmdsZUd1dHRlclZpZXcodGhpcy52aWV3LCBjb25mKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmd1dHRlcnNba25vd25dLnVwZGF0ZSh1cGRhdGUpO1xuICAgICAgICAgICAgICAgICAgICBndXR0ZXJzLnB1c2godGhpcy5ndXR0ZXJzW2tub3duXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgZyBvZiB0aGlzLmd1dHRlcnMpIHtcbiAgICAgICAgICAgICAgICBnLmRvbS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICBpZiAoZ3V0dGVycy5pbmRleE9mKGcpIDwgMClcbiAgICAgICAgICAgICAgICAgICAgZy5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCBnIG9mIGd1dHRlcnMpXG4gICAgICAgICAgICAgICAgdGhpcy5kb20uYXBwZW5kQ2hpbGQoZy5kb20pO1xuICAgICAgICAgICAgdGhpcy5ndXR0ZXJzID0gZ3V0dGVycztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hhbmdlO1xuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBmb3IgKGxldCB2aWV3IG9mIHRoaXMuZ3V0dGVycylcbiAgICAgICAgICAgIHZpZXcuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmRvbS5yZW1vdmUoKTtcbiAgICB9XG59LCB7XG4gICAgcHJvdmlkZTogcGx1Z2luID0+IEVkaXRvclZpZXcuc2Nyb2xsTWFyZ2lucy5vZih2aWV3ID0+IHtcbiAgICAgICAgbGV0IHZhbHVlID0gdmlldy5wbHVnaW4ocGx1Z2luKTtcbiAgICAgICAgaWYgKCF2YWx1ZSB8fCB2YWx1ZS5ndXR0ZXJzLmxlbmd0aCA9PSAwIHx8ICF2YWx1ZS5maXhlZClcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4gdmlldy50ZXh0RGlyZWN0aW9uID09IGV4cG9ydHMuRGlyZWN0aW9uLkxUUlxuICAgICAgICAgICAgPyB7IGxlZnQ6IHZhbHVlLmRvbS5vZmZzZXRXaWR0aCAqIHZpZXcuc2NhbGVYIH1cbiAgICAgICAgICAgIDogeyByaWdodDogdmFsdWUuZG9tLm9mZnNldFdpZHRoICogdmlldy5zY2FsZVggfTtcbiAgICB9KVxufSk7XG5mdW5jdGlvbiBhc0FycmF5KHZhbCkgeyByZXR1cm4gKEFycmF5LmlzQXJyYXkodmFsKSA/IHZhbCA6IFt2YWxdKTsgfVxuZnVuY3Rpb24gYWR2YW5jZUN1cnNvcihjdXJzb3IsIGNvbGxlY3QsIHBvcykge1xuICAgIHdoaWxlIChjdXJzb3IudmFsdWUgJiYgY3Vyc29yLmZyb20gPD0gcG9zKSB7XG4gICAgICAgIGlmIChjdXJzb3IuZnJvbSA9PSBwb3MpXG4gICAgICAgICAgICBjb2xsZWN0LnB1c2goY3Vyc29yLnZhbHVlKTtcbiAgICAgICAgY3Vyc29yLm5leHQoKTtcbiAgICB9XG59XG5jbGFzcyBVcGRhdGVDb250ZXh0IHtcbiAgICBjb25zdHJ1Y3RvcihndXR0ZXIsIHZpZXdwb3J0LCBoZWlnaHQpIHtcbiAgICAgICAgdGhpcy5ndXR0ZXIgPSBndXR0ZXI7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICB0aGlzLmkgPSAwO1xuICAgICAgICB0aGlzLmN1cnNvciA9IHN0YXRlLlJhbmdlU2V0Lml0ZXIoZ3V0dGVyLm1hcmtlcnMsIHZpZXdwb3J0LmZyb20pO1xuICAgIH1cbiAgICBhZGRFbGVtZW50KHZpZXcsIGJsb2NrLCBtYXJrZXJzKSB7XG4gICAgICAgIGxldCB7IGd1dHRlciB9ID0gdGhpcywgYWJvdmUgPSAoYmxvY2sudG9wIC0gdGhpcy5oZWlnaHQpIC8gdmlldy5zY2FsZVksIGhlaWdodCA9IGJsb2NrLmhlaWdodCAvIHZpZXcuc2NhbGVZO1xuICAgICAgICBpZiAodGhpcy5pID09IGd1dHRlci5lbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxldCBuZXdFbHQgPSBuZXcgR3V0dGVyRWxlbWVudCh2aWV3LCBoZWlnaHQsIGFib3ZlLCBtYXJrZXJzKTtcbiAgICAgICAgICAgIGd1dHRlci5lbGVtZW50cy5wdXNoKG5ld0VsdCk7XG4gICAgICAgICAgICBndXR0ZXIuZG9tLmFwcGVuZENoaWxkKG5ld0VsdC5kb20pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZ3V0dGVyLmVsZW1lbnRzW3RoaXMuaV0udXBkYXRlKHZpZXcsIGhlaWdodCwgYWJvdmUsIG1hcmtlcnMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gYmxvY2suYm90dG9tO1xuICAgICAgICB0aGlzLmkrKztcbiAgICB9XG4gICAgbGluZSh2aWV3LCBsaW5lLCBleHRyYU1hcmtlcnMpIHtcbiAgICAgICAgbGV0IGxvY2FsTWFya2VycyA9IFtdO1xuICAgICAgICBhZHZhbmNlQ3Vyc29yKHRoaXMuY3Vyc29yLCBsb2NhbE1hcmtlcnMsIGxpbmUuZnJvbSk7XG4gICAgICAgIGlmIChleHRyYU1hcmtlcnMubGVuZ3RoKVxuICAgICAgICAgICAgbG9jYWxNYXJrZXJzID0gbG9jYWxNYXJrZXJzLmNvbmNhdChleHRyYU1hcmtlcnMpO1xuICAgICAgICBsZXQgZm9yTGluZSA9IHRoaXMuZ3V0dGVyLmNvbmZpZy5saW5lTWFya2VyKHZpZXcsIGxpbmUsIGxvY2FsTWFya2Vycyk7XG4gICAgICAgIGlmIChmb3JMaW5lKVxuICAgICAgICAgICAgbG9jYWxNYXJrZXJzLnVuc2hpZnQoZm9yTGluZSk7XG4gICAgICAgIGxldCBndXR0ZXIgPSB0aGlzLmd1dHRlcjtcbiAgICAgICAgaWYgKGxvY2FsTWFya2Vycy5sZW5ndGggPT0gMCAmJiAhZ3V0dGVyLmNvbmZpZy5yZW5kZXJFbXB0eUVsZW1lbnRzKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmFkZEVsZW1lbnQodmlldywgbGluZSwgbG9jYWxNYXJrZXJzKTtcbiAgICB9XG4gICAgd2lkZ2V0KHZpZXcsIGJsb2NrKSB7XG4gICAgICAgIGxldCBtYXJrZXIgPSB0aGlzLmd1dHRlci5jb25maWcud2lkZ2V0TWFya2VyKHZpZXcsIGJsb2NrLndpZGdldCwgYmxvY2spO1xuICAgICAgICBpZiAobWFya2VyKVxuICAgICAgICAgICAgdGhpcy5hZGRFbGVtZW50KHZpZXcsIGJsb2NrLCBbbWFya2VyXSk7XG4gICAgfVxuICAgIGZpbmlzaCgpIHtcbiAgICAgICAgbGV0IGd1dHRlciA9IHRoaXMuZ3V0dGVyO1xuICAgICAgICB3aGlsZSAoZ3V0dGVyLmVsZW1lbnRzLmxlbmd0aCA+IHRoaXMuaSkge1xuICAgICAgICAgICAgbGV0IGxhc3QgPSBndXR0ZXIuZWxlbWVudHMucG9wKCk7XG4gICAgICAgICAgICBndXR0ZXIuZG9tLnJlbW92ZUNoaWxkKGxhc3QuZG9tKTtcbiAgICAgICAgICAgIGxhc3QuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuY2xhc3MgU2luZ2xlR3V0dGVyVmlldyB7XG4gICAgY29uc3RydWN0b3IodmlldywgY29uZmlnKSB7XG4gICAgICAgIHRoaXMudmlldyA9IHZpZXc7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgICAgICB0aGlzLmVsZW1lbnRzID0gW107XG4gICAgICAgIHRoaXMuc3BhY2VyID0gbnVsbDtcbiAgICAgICAgdGhpcy5kb20gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB0aGlzLmRvbS5jbGFzc05hbWUgPSBcImNtLWd1dHRlclwiICsgKHRoaXMuY29uZmlnLmNsYXNzID8gXCIgXCIgKyB0aGlzLmNvbmZpZy5jbGFzcyA6IFwiXCIpO1xuICAgICAgICBmb3IgKGxldCBwcm9wIGluIGNvbmZpZy5kb21FdmVudEhhbmRsZXJzKSB7XG4gICAgICAgICAgICB0aGlzLmRvbS5hZGRFdmVudExpc3RlbmVyKHByb3AsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCB0YXJnZXQgPSBldmVudC50YXJnZXQsIHk7XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldCAhPSB0aGlzLmRvbSAmJiB0aGlzLmRvbS5jb250YWlucyh0YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICh0YXJnZXQucGFyZW50Tm9kZSAhPSB0aGlzLmRvbSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVjdCA9IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgeSA9IChyZWN0LnRvcCArIHJlY3QuYm90dG9tKSAvIDI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB5ID0gZXZlbnQuY2xpZW50WTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IGxpbmUgPSB2aWV3LmxpbmVCbG9ja0F0SGVpZ2h0KHkgLSB2aWV3LmRvY3VtZW50VG9wKTtcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnLmRvbUV2ZW50SGFuZGxlcnNbcHJvcF0odmlldywgbGluZSwgZXZlbnQpKVxuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tYXJrZXJzID0gYXNBcnJheShjb25maWcubWFya2Vycyh2aWV3KSk7XG4gICAgICAgIGlmIChjb25maWcuaW5pdGlhbFNwYWNlcikge1xuICAgICAgICAgICAgdGhpcy5zcGFjZXIgPSBuZXcgR3V0dGVyRWxlbWVudCh2aWV3LCAwLCAwLCBbY29uZmlnLmluaXRpYWxTcGFjZXIodmlldyldKTtcbiAgICAgICAgICAgIHRoaXMuZG9tLmFwcGVuZENoaWxkKHRoaXMuc3BhY2VyLmRvbSk7XG4gICAgICAgICAgICB0aGlzLnNwYWNlci5kb20uc3R5bGUuY3NzVGV4dCArPSBcInZpc2liaWxpdHk6IGhpZGRlbjsgcG9pbnRlci1ldmVudHM6IG5vbmVcIjtcbiAgICAgICAgfVxuICAgIH1cbiAgICB1cGRhdGUodXBkYXRlKSB7XG4gICAgICAgIGxldCBwcmV2TWFya2VycyA9IHRoaXMubWFya2VycztcbiAgICAgICAgdGhpcy5tYXJrZXJzID0gYXNBcnJheSh0aGlzLmNvbmZpZy5tYXJrZXJzKHVwZGF0ZS52aWV3KSk7XG4gICAgICAgIGlmICh0aGlzLnNwYWNlciAmJiB0aGlzLmNvbmZpZy51cGRhdGVTcGFjZXIpIHtcbiAgICAgICAgICAgIGxldCB1cGRhdGVkID0gdGhpcy5jb25maWcudXBkYXRlU3BhY2VyKHRoaXMuc3BhY2VyLm1hcmtlcnNbMF0sIHVwZGF0ZSk7XG4gICAgICAgICAgICBpZiAodXBkYXRlZCAhPSB0aGlzLnNwYWNlci5tYXJrZXJzWzBdKVxuICAgICAgICAgICAgICAgIHRoaXMuc3BhY2VyLnVwZGF0ZSh1cGRhdGUudmlldywgMCwgMCwgW3VwZGF0ZWRdKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdnAgPSB1cGRhdGUudmlldy52aWV3cG9ydDtcbiAgICAgICAgcmV0dXJuICFzdGF0ZS5SYW5nZVNldC5lcSh0aGlzLm1hcmtlcnMsIHByZXZNYXJrZXJzLCB2cC5mcm9tLCB2cC50bykgfHxcbiAgICAgICAgICAgICh0aGlzLmNvbmZpZy5saW5lTWFya2VyQ2hhbmdlID8gdGhpcy5jb25maWcubGluZU1hcmtlckNoYW5nZSh1cGRhdGUpIDogZmFsc2UpO1xuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBmb3IgKGxldCBlbHQgb2YgdGhpcy5lbGVtZW50cylcbiAgICAgICAgICAgIGVsdC5kZXN0cm95KCk7XG4gICAgfVxufVxuY2xhc3MgR3V0dGVyRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IodmlldywgaGVpZ2h0LCBhYm92ZSwgbWFya2Vycykge1xuICAgICAgICB0aGlzLmhlaWdodCA9IC0xO1xuICAgICAgICB0aGlzLmFib3ZlID0gMDtcbiAgICAgICAgdGhpcy5tYXJrZXJzID0gW107XG4gICAgICAgIHRoaXMuZG9tID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdGhpcy5kb20uY2xhc3NOYW1lID0gXCJjbS1ndXR0ZXJFbGVtZW50XCI7XG4gICAgICAgIHRoaXMudXBkYXRlKHZpZXcsIGhlaWdodCwgYWJvdmUsIG1hcmtlcnMpO1xuICAgIH1cbiAgICB1cGRhdGUodmlldywgaGVpZ2h0LCBhYm92ZSwgbWFya2Vycykge1xuICAgICAgICBpZiAodGhpcy5oZWlnaHQgIT0gaGVpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgICAgIHRoaXMuZG9tLnN0eWxlLmhlaWdodCA9IGhlaWdodCArIFwicHhcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5hYm92ZSAhPSBhYm92ZSlcbiAgICAgICAgICAgIHRoaXMuZG9tLnN0eWxlLm1hcmdpblRvcCA9ICh0aGlzLmFib3ZlID0gYWJvdmUpID8gYWJvdmUgKyBcInB4XCIgOiBcIlwiO1xuICAgICAgICBpZiAoIXNhbWVNYXJrZXJzKHRoaXMubWFya2VycywgbWFya2VycykpXG4gICAgICAgICAgICB0aGlzLnNldE1hcmtlcnModmlldywgbWFya2Vycyk7XG4gICAgfVxuICAgIHNldE1hcmtlcnModmlldywgbWFya2Vycykge1xuICAgICAgICBsZXQgY2xzID0gXCJjbS1ndXR0ZXJFbGVtZW50XCIsIGRvbVBvcyA9IHRoaXMuZG9tLmZpcnN0Q2hpbGQ7XG4gICAgICAgIGZvciAobGV0IGlOZXcgPSAwLCBpT2xkID0gMDs7KSB7XG4gICAgICAgICAgICBsZXQgc2tpcFRvID0gaU9sZCwgbWFya2VyID0gaU5ldyA8IG1hcmtlcnMubGVuZ3RoID8gbWFya2Vyc1tpTmV3KytdIDogbnVsbCwgbWF0Y2hlZCA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKG1hcmtlcikge1xuICAgICAgICAgICAgICAgIGxldCBjID0gbWFya2VyLmVsZW1lbnRDbGFzcztcbiAgICAgICAgICAgICAgICBpZiAoYylcbiAgICAgICAgICAgICAgICAgICAgY2xzICs9IFwiIFwiICsgYztcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gaU9sZDsgaSA8IHRoaXMubWFya2Vycy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWFya2Vyc1tpXS5jb21wYXJlKG1hcmtlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNraXBUbyA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBza2lwVG8gPSB0aGlzLm1hcmtlcnMubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKGlPbGQgPCBza2lwVG8pIHtcbiAgICAgICAgICAgICAgICBsZXQgbmV4dCA9IHRoaXMubWFya2Vyc1tpT2xkKytdO1xuICAgICAgICAgICAgICAgIGlmIChuZXh0LnRvRE9NKSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHQuZGVzdHJveShkb21Qb3MpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgYWZ0ZXIgPSBkb21Qb3MubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgIGRvbVBvcy5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgZG9tUG9zID0gYWZ0ZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFtYXJrZXIpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBpZiAobWFya2VyLnRvRE9NKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoZWQpXG4gICAgICAgICAgICAgICAgICAgIGRvbVBvcyA9IGRvbVBvcy5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9tLmluc2VydEJlZm9yZShtYXJrZXIudG9ET00odmlldyksIGRvbVBvcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0Y2hlZClcbiAgICAgICAgICAgICAgICBpT2xkKys7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kb20uY2xhc3NOYW1lID0gY2xzO1xuICAgICAgICB0aGlzLm1hcmtlcnMgPSBtYXJrZXJzO1xuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLnNldE1hcmtlcnMobnVsbCwgW10pOyAvLyBGaXJzdCBhcmd1bWVudCBub3QgdXNlZCB1bmxlc3MgY3JlYXRpbmcgbWFya2Vyc1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNhbWVNYXJrZXJzKGEsIGIpIHtcbiAgICBpZiAoYS5sZW5ndGggIT0gYi5sZW5ndGgpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspXG4gICAgICAgIGlmICghYVtpXS5jb21wYXJlKGJbaV0pKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xufVxuLyoqXG5GYWNldCB1c2VkIHRvIHByb3ZpZGUgbWFya2VycyB0byB0aGUgbGluZSBudW1iZXIgZ3V0dGVyLlxuKi9cbmNvbnN0IGxpbmVOdW1iZXJNYXJrZXJzID0gc3RhdGUuRmFjZXQuZGVmaW5lKCk7XG5jb25zdCBsaW5lTnVtYmVyQ29uZmlnID0gc3RhdGUuRmFjZXQuZGVmaW5lKHtcbiAgICBjb21iaW5lKHZhbHVlcykge1xuICAgICAgICByZXR1cm4gc3RhdGUuY29tYmluZUNvbmZpZyh2YWx1ZXMsIHsgZm9ybWF0TnVtYmVyOiBTdHJpbmcsIGRvbUV2ZW50SGFuZGxlcnM6IHt9IH0sIHtcbiAgICAgICAgICAgIGRvbUV2ZW50SGFuZGxlcnMoYSwgYikge1xuICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSBPYmplY3QuYXNzaWduKHt9LCBhKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBldmVudCBpbiBiKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBleGlzdHMgPSByZXN1bHRbZXZlbnRdLCBhZGQgPSBiW2V2ZW50XTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2V2ZW50XSA9IGV4aXN0cyA/ICh2aWV3LCBsaW5lLCBldmVudCkgPT4gZXhpc3RzKHZpZXcsIGxpbmUsIGV2ZW50KSB8fCBhZGQodmlldywgbGluZSwgZXZlbnQpIDogYWRkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59KTtcbmNsYXNzIE51bWJlck1hcmtlciBleHRlbmRzIEd1dHRlck1hcmtlciB7XG4gICAgY29uc3RydWN0b3IobnVtYmVyKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMubnVtYmVyID0gbnVtYmVyO1xuICAgIH1cbiAgICBlcShvdGhlcikgeyByZXR1cm4gdGhpcy5udW1iZXIgPT0gb3RoZXIubnVtYmVyOyB9XG4gICAgdG9ET00oKSB7IHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0aGlzLm51bWJlcik7IH1cbn1cbmZ1bmN0aW9uIGZvcm1hdE51bWJlcih2aWV3LCBudW1iZXIpIHtcbiAgICByZXR1cm4gdmlldy5zdGF0ZS5mYWNldChsaW5lTnVtYmVyQ29uZmlnKS5mb3JtYXROdW1iZXIobnVtYmVyLCB2aWV3LnN0YXRlKTtcbn1cbmNvbnN0IGxpbmVOdW1iZXJHdXR0ZXIgPSBhY3RpdmVHdXR0ZXJzLmNvbXB1dGUoW2xpbmVOdW1iZXJDb25maWddLCBzdGF0ZSA9PiAoe1xuICAgIGNsYXNzOiBcImNtLWxpbmVOdW1iZXJzXCIsXG4gICAgcmVuZGVyRW1wdHlFbGVtZW50czogZmFsc2UsXG4gICAgbWFya2Vycyh2aWV3KSB7IHJldHVybiB2aWV3LnN0YXRlLmZhY2V0KGxpbmVOdW1iZXJNYXJrZXJzKTsgfSxcbiAgICBsaW5lTWFya2VyKHZpZXcsIGxpbmUsIG90aGVycykge1xuICAgICAgICBpZiAob3RoZXJzLnNvbWUobSA9PiBtLnRvRE9NKSlcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4gbmV3IE51bWJlck1hcmtlcihmb3JtYXROdW1iZXIodmlldywgdmlldy5zdGF0ZS5kb2MubGluZUF0KGxpbmUuZnJvbSkubnVtYmVyKSk7XG4gICAgfSxcbiAgICB3aWRnZXRNYXJrZXI6ICgpID0+IG51bGwsXG4gICAgbGluZU1hcmtlckNoYW5nZTogdXBkYXRlID0+IHVwZGF0ZS5zdGFydFN0YXRlLmZhY2V0KGxpbmVOdW1iZXJDb25maWcpICE9IHVwZGF0ZS5zdGF0ZS5mYWNldChsaW5lTnVtYmVyQ29uZmlnKSxcbiAgICBpbml0aWFsU3BhY2VyKHZpZXcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBOdW1iZXJNYXJrZXIoZm9ybWF0TnVtYmVyKHZpZXcsIG1heExpbmVOdW1iZXIodmlldy5zdGF0ZS5kb2MubGluZXMpKSk7XG4gICAgfSxcbiAgICB1cGRhdGVTcGFjZXIoc3BhY2VyLCB1cGRhdGUpIHtcbiAgICAgICAgbGV0IG1heCA9IGZvcm1hdE51bWJlcih1cGRhdGUudmlldywgbWF4TGluZU51bWJlcih1cGRhdGUudmlldy5zdGF0ZS5kb2MubGluZXMpKTtcbiAgICAgICAgcmV0dXJuIG1heCA9PSBzcGFjZXIubnVtYmVyID8gc3BhY2VyIDogbmV3IE51bWJlck1hcmtlcihtYXgpO1xuICAgIH0sXG4gICAgZG9tRXZlbnRIYW5kbGVyczogc3RhdGUuZmFjZXQobGluZU51bWJlckNvbmZpZykuZG9tRXZlbnRIYW5kbGVyc1xufSkpO1xuLyoqXG5DcmVhdGUgYSBsaW5lIG51bWJlciBndXR0ZXIgZXh0ZW5zaW9uLlxuKi9cbmZ1bmN0aW9uIGxpbmVOdW1iZXJzKGNvbmZpZyA9IHt9KSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgbGluZU51bWJlckNvbmZpZy5vZihjb25maWcpLFxuICAgICAgICBndXR0ZXJzKCksXG4gICAgICAgIGxpbmVOdW1iZXJHdXR0ZXJcbiAgICBdO1xufVxuZnVuY3Rpb24gbWF4TGluZU51bWJlcihsaW5lcykge1xuICAgIGxldCBsYXN0ID0gOTtcbiAgICB3aGlsZSAobGFzdCA8IGxpbmVzKVxuICAgICAgICBsYXN0ID0gbGFzdCAqIDEwICsgOTtcbiAgICByZXR1cm4gbGFzdDtcbn1cbmNvbnN0IGFjdGl2ZUxpbmVHdXR0ZXJNYXJrZXIgPSBuZXcgY2xhc3MgZXh0ZW5kcyBHdXR0ZXJNYXJrZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmVsZW1lbnRDbGFzcyA9IFwiY20tYWN0aXZlTGluZUd1dHRlclwiO1xuICAgIH1cbn07XG5jb25zdCBhY3RpdmVMaW5lR3V0dGVySGlnaGxpZ2h0ZXIgPSBndXR0ZXJMaW5lQ2xhc3MuY29tcHV0ZShbXCJzZWxlY3Rpb25cIl0sIHN0YXRlJDEgPT4ge1xuICAgIGxldCBtYXJrcyA9IFtdLCBsYXN0ID0gLTE7XG4gICAgZm9yIChsZXQgcmFuZ2Ugb2Ygc3RhdGUkMS5zZWxlY3Rpb24ucmFuZ2VzKSB7XG4gICAgICAgIGxldCBsaW5lUG9zID0gc3RhdGUkMS5kb2MubGluZUF0KHJhbmdlLmhlYWQpLmZyb207XG4gICAgICAgIGlmIChsaW5lUG9zID4gbGFzdCkge1xuICAgICAgICAgICAgbGFzdCA9IGxpbmVQb3M7XG4gICAgICAgICAgICBtYXJrcy5wdXNoKGFjdGl2ZUxpbmVHdXR0ZXJNYXJrZXIucmFuZ2UobGluZVBvcykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdGF0ZS5SYW5nZVNldC5vZihtYXJrcyk7XG59KTtcbi8qKlxuUmV0dXJucyBhbiBleHRlbnNpb24gdGhhdCBhZGRzIGEgYGNtLWFjdGl2ZUxpbmVHdXR0ZXJgIGNsYXNzIHRvXG5hbGwgZ3V0dGVyIGVsZW1lbnRzIG9uIHRoZSBbYWN0aXZlXG5saW5lXShodHRwczovL2NvZGVtaXJyb3IubmV0LzYvZG9jcy9yZWYvI3ZpZXcuaGlnaGxpZ2h0QWN0aXZlTGluZSkuXG4qL1xuZnVuY3Rpb24gaGlnaGxpZ2h0QWN0aXZlTGluZUd1dHRlcigpIHtcbiAgICByZXR1cm4gYWN0aXZlTGluZUd1dHRlckhpZ2hsaWdodGVyO1xufVxuXG5jb25zdCBXaGl0ZXNwYWNlRGVjbyA9IG5ldyBNYXAoKTtcbmZ1bmN0aW9uIGdldFdoaXRlc3BhY2VEZWNvKHNwYWNlKSB7XG4gICAgbGV0IGRlY28gPSBXaGl0ZXNwYWNlRGVjby5nZXQoc3BhY2UpO1xuICAgIGlmICghZGVjbylcbiAgICAgICAgV2hpdGVzcGFjZURlY28uc2V0KHNwYWNlLCBkZWNvID0gRGVjb3JhdGlvbi5tYXJrKHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHNwYWNlID09PSBcIlxcdFwiID8ge1xuICAgICAgICAgICAgICAgIGNsYXNzOiBcImNtLWhpZ2hsaWdodFRhYlwiLFxuICAgICAgICAgICAgfSA6IHtcbiAgICAgICAgICAgICAgICBjbGFzczogXCJjbS1oaWdobGlnaHRTcGFjZVwiLFxuICAgICAgICAgICAgICAgIFwiZGF0YS1kaXNwbGF5XCI6IHNwYWNlLnJlcGxhY2UoLyAvZywgXCLCt1wiKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgcmV0dXJuIGRlY287XG59XG5mdW5jdGlvbiBtYXRjaGVyKGRlY29yYXRvcikge1xuICAgIHJldHVybiBWaWV3UGx1Z2luLmRlZmluZSh2aWV3ID0+ICh7XG4gICAgICAgIGRlY29yYXRpb25zOiBkZWNvcmF0b3IuY3JlYXRlRGVjbyh2aWV3KSxcbiAgICAgICAgdXBkYXRlKHUpIHtcbiAgICAgICAgICAgIHRoaXMuZGVjb3JhdGlvbnMgPSBkZWNvcmF0b3IudXBkYXRlRGVjbyh1LCB0aGlzLmRlY29yYXRpb25zKTtcbiAgICAgICAgfSxcbiAgICB9KSwge1xuICAgICAgICBkZWNvcmF0aW9uczogdiA9PiB2LmRlY29yYXRpb25zXG4gICAgfSk7XG59XG5jb25zdCB3aGl0ZXNwYWNlSGlnaGxpZ2h0ZXIgPSBtYXRjaGVyKG5ldyBNYXRjaERlY29yYXRvcih7XG4gICAgcmVnZXhwOiAvXFx0fCArL2csXG4gICAgZGVjb3JhdGlvbjogbWF0Y2ggPT4gZ2V0V2hpdGVzcGFjZURlY28obWF0Y2hbMF0pLFxuICAgIGJvdW5kYXJ5OiAvXFxTLyxcbn0pKTtcbi8qKlxuUmV0dXJucyBhbiBleHRlbnNpb24gdGhhdCBoaWdobGlnaHRzIHdoaXRlc3BhY2UsIGFkZGluZyBhXG5gY20taGlnaGxpZ2h0U3BhY2VgIGNsYXNzIHRvIHN0cmV0Y2hlcyBvZiBzcGFjZXMsIGFuZCBhXG5gY20taGlnaGxpZ2h0VGFiYCBjbGFzcyB0byBpbmRpdmlkdWFsIHRhYiBjaGFyYWN0ZXJzLiBCeSBkZWZhdWx0LFxudGhlIGZvcm1lciBhcmUgc2hvd24gYXMgZmFpbnQgZG90cywgYW5kIHRoZSBsYXR0ZXIgYXMgYXJyb3dzLlxuKi9cbmZ1bmN0aW9uIGhpZ2hsaWdodFdoaXRlc3BhY2UoKSB7XG4gICAgcmV0dXJuIHdoaXRlc3BhY2VIaWdobGlnaHRlcjtcbn1cbmNvbnN0IHRyYWlsaW5nSGlnaGxpZ2h0ZXIgPSBtYXRjaGVyKG5ldyBNYXRjaERlY29yYXRvcih7XG4gICAgcmVnZXhwOiAvXFxzKyQvZyxcbiAgICBkZWNvcmF0aW9uOiBEZWNvcmF0aW9uLm1hcmsoeyBjbGFzczogXCJjbS10cmFpbGluZ1NwYWNlXCIgfSksXG4gICAgYm91bmRhcnk6IC9cXFMvLFxufSkpO1xuLyoqXG5SZXR1cm5zIGFuIGV4dGVuc2lvbiB0aGF0IGFkZHMgYSBgY20tdHJhaWxpbmdTcGFjZWAgY2xhc3MgdG8gYWxsXG50cmFpbGluZyB3aGl0ZXNwYWNlLlxuKi9cbmZ1bmN0aW9uIGhpZ2hsaWdodFRyYWlsaW5nV2hpdGVzcGFjZSgpIHtcbiAgICByZXR1cm4gdHJhaWxpbmdIaWdobGlnaHRlcjtcbn1cblxuLyoqXG5AaW50ZXJuYWxcbiovXG5jb25zdCBfX3Rlc3QgPSB7IEhlaWdodE1hcCwgSGVpZ2h0T3JhY2xlLCBNZWFzdXJlZEhlaWdodHMsIFF1ZXJ5VHlwZSwgQ2hhbmdlZFJhbmdlLCBjb21wdXRlT3JkZXIsIG1vdmVWaXN1YWxseSB9O1xuXG5leHBvcnRzLkJpZGlTcGFuID0gQmlkaVNwYW47XG5leHBvcnRzLkJsb2NrSW5mbyA9IEJsb2NrSW5mbztcbmV4cG9ydHMuRGVjb3JhdGlvbiA9IERlY29yYXRpb247XG5leHBvcnRzLkVkaXRvclZpZXcgPSBFZGl0b3JWaWV3O1xuZXhwb3J0cy5HdXR0ZXJNYXJrZXIgPSBHdXR0ZXJNYXJrZXI7XG5leHBvcnRzLk1hdGNoRGVjb3JhdG9yID0gTWF0Y2hEZWNvcmF0b3I7XG5leHBvcnRzLlJlY3RhbmdsZU1hcmtlciA9IFJlY3RhbmdsZU1hcmtlcjtcbmV4cG9ydHMuVmlld1BsdWdpbiA9IFZpZXdQbHVnaW47XG5leHBvcnRzLlZpZXdVcGRhdGUgPSBWaWV3VXBkYXRlO1xuZXhwb3J0cy5XaWRnZXRUeXBlID0gV2lkZ2V0VHlwZTtcbmV4cG9ydHMuX190ZXN0ID0gX190ZXN0O1xuZXhwb3J0cy5jbG9zZUhvdmVyVG9vbHRpcHMgPSBjbG9zZUhvdmVyVG9vbHRpcHM7XG5leHBvcnRzLmNyb3NzaGFpckN1cnNvciA9IGNyb3NzaGFpckN1cnNvcjtcbmV4cG9ydHMuZHJhd1NlbGVjdGlvbiA9IGRyYXdTZWxlY3Rpb247XG5leHBvcnRzLmRyb3BDdXJzb3IgPSBkcm9wQ3Vyc29yO1xuZXhwb3J0cy5nZXREcmF3U2VsZWN0aW9uQ29uZmlnID0gZ2V0RHJhd1NlbGVjdGlvbkNvbmZpZztcbmV4cG9ydHMuZ2V0UGFuZWwgPSBnZXRQYW5lbDtcbmV4cG9ydHMuZ2V0VG9vbHRpcCA9IGdldFRvb2x0aXA7XG5leHBvcnRzLmd1dHRlciA9IGd1dHRlcjtcbmV4cG9ydHMuZ3V0dGVyTGluZUNsYXNzID0gZ3V0dGVyTGluZUNsYXNzO1xuZXhwb3J0cy5ndXR0ZXJzID0gZ3V0dGVycztcbmV4cG9ydHMuaGFzSG92ZXJUb29sdGlwcyA9IGhhc0hvdmVyVG9vbHRpcHM7XG5leHBvcnRzLmhpZ2hsaWdodEFjdGl2ZUxpbmUgPSBoaWdobGlnaHRBY3RpdmVMaW5lO1xuZXhwb3J0cy5oaWdobGlnaHRBY3RpdmVMaW5lR3V0dGVyID0gaGlnaGxpZ2h0QWN0aXZlTGluZUd1dHRlcjtcbmV4cG9ydHMuaGlnaGxpZ2h0U3BlY2lhbENoYXJzID0gaGlnaGxpZ2h0U3BlY2lhbENoYXJzO1xuZXhwb3J0cy5oaWdobGlnaHRUcmFpbGluZ1doaXRlc3BhY2UgPSBoaWdobGlnaHRUcmFpbGluZ1doaXRlc3BhY2U7XG5leHBvcnRzLmhpZ2hsaWdodFdoaXRlc3BhY2UgPSBoaWdobGlnaHRXaGl0ZXNwYWNlO1xuZXhwb3J0cy5ob3ZlclRvb2x0aXAgPSBob3ZlclRvb2x0aXA7XG5leHBvcnRzLmtleW1hcCA9IGtleW1hcDtcbmV4cG9ydHMubGF5ZXIgPSBsYXllcjtcbmV4cG9ydHMubGluZU51bWJlck1hcmtlcnMgPSBsaW5lTnVtYmVyTWFya2VycztcbmV4cG9ydHMubGluZU51bWJlcnMgPSBsaW5lTnVtYmVycztcbmV4cG9ydHMubG9nRXhjZXB0aW9uID0gbG9nRXhjZXB0aW9uO1xuZXhwb3J0cy5wYW5lbHMgPSBwYW5lbHM7XG5leHBvcnRzLnBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXI7XG5leHBvcnRzLnJlY3Rhbmd1bGFyU2VsZWN0aW9uID0gcmVjdGFuZ3VsYXJTZWxlY3Rpb247XG5leHBvcnRzLnJlcG9zaXRpb25Ub29sdGlwcyA9IHJlcG9zaXRpb25Ub29sdGlwcztcbmV4cG9ydHMucnVuU2NvcGVIYW5kbGVycyA9IHJ1blNjb3BlSGFuZGxlcnM7XG5leHBvcnRzLnNjcm9sbFBhc3RFbmQgPSBzY3JvbGxQYXN0RW5kO1xuZXhwb3J0cy5zaG93UGFuZWwgPSBzaG93UGFuZWw7XG5leHBvcnRzLnNob3dUb29sdGlwID0gc2hvd1Rvb2x0aXA7XG5leHBvcnRzLnRvb2x0aXBzID0gdG9vbHRpcHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuVGhlIGRlZmF1bHQgbWF4aW11bSBsZW5ndGggb2YgYSBgVHJlZUJ1ZmZlcmAgbm9kZS5cbiovXG5jb25zdCBEZWZhdWx0QnVmZmVyTGVuZ3RoID0gMTAyNDtcbmxldCBuZXh0UHJvcElEID0gMDtcbmNsYXNzIFJhbmdlIHtcbiAgICBjb25zdHJ1Y3Rvcihmcm9tLCB0bykge1xuICAgICAgICB0aGlzLmZyb20gPSBmcm9tO1xuICAgICAgICB0aGlzLnRvID0gdG87XG4gICAgfVxufVxuLyoqXG5FYWNoIFtub2RlIHR5cGVdKCNjb21tb24uTm9kZVR5cGUpIG9yIFtpbmRpdmlkdWFsIHRyZWVdKCNjb21tb24uVHJlZSlcbmNhbiBoYXZlIG1ldGFkYXRhIGFzc29jaWF0ZWQgd2l0aCBpdCBpbiBwcm9wcy4gSW5zdGFuY2VzIG9mIHRoaXNcbmNsYXNzIHJlcHJlc2VudCBwcm9wIG5hbWVzLlxuKi9cbmNsYXNzIE5vZGVQcm9wIHtcbiAgICAvKipcbiAgICBDcmVhdGUgYSBuZXcgbm9kZSBwcm9wIHR5cGUuXG4gICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSkge1xuICAgICAgICB0aGlzLmlkID0gbmV4dFByb3BJRCsrO1xuICAgICAgICB0aGlzLnBlck5vZGUgPSAhIWNvbmZpZy5wZXJOb2RlO1xuICAgICAgICB0aGlzLmRlc2VyaWFsaXplID0gY29uZmlnLmRlc2VyaWFsaXplIHx8ICgoKSA9PiB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIG5vZGUgdHlwZSBkb2Vzbid0IGRlZmluZSBhIGRlc2VyaWFsaXplIGZ1bmN0aW9uXCIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgVGhpcyBpcyBtZWFudCB0byBiZSB1c2VkIHdpdGhcbiAgICBbYE5vZGVTZXQuZXh0ZW5kYF0oI2NvbW1vbi5Ob2RlU2V0LmV4dGVuZCkgb3JcbiAgICBbYExSUGFyc2VyLmNvbmZpZ3VyZWBdKCNsci5QYXJzZXJDb25maWcucHJvcHMpIHRvIGNvbXB1dGVcbiAgICBwcm9wIHZhbHVlcyBmb3IgZWFjaCBub2RlIHR5cGUgaW4gdGhlIHNldC4gVGFrZXMgYSBbbWF0Y2hcbiAgICBvYmplY3RdKCNjb21tb24uTm9kZVR5cGVebWF0Y2gpIG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB1bmRlZmluZWRcbiAgICBpZiB0aGUgbm9kZSB0eXBlIGRvZXNuJ3QgZ2V0IHRoaXMgcHJvcCwgYW5kIHRoZSBwcm9wJ3MgdmFsdWUgaWZcbiAgICBpdCBkb2VzLlxuICAgICovXG4gICAgYWRkKG1hdGNoKSB7XG4gICAgICAgIGlmICh0aGlzLnBlck5vZGUpXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkNhbid0IGFkZCBwZXItbm9kZSBwcm9wcyB0byBub2RlIHR5cGVzXCIpO1xuICAgICAgICBpZiAodHlwZW9mIG1hdGNoICE9IFwiZnVuY3Rpb25cIilcbiAgICAgICAgICAgIG1hdGNoID0gTm9kZVR5cGUubWF0Y2gobWF0Y2gpO1xuICAgICAgICByZXR1cm4gKHR5cGUpID0+IHtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBtYXRjaCh0eXBlKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBbdGhpcywgcmVzdWx0XTtcbiAgICAgICAgfTtcbiAgICB9XG59XG4vKipcblByb3AgdGhhdCBpcyB1c2VkIHRvIGRlc2NyaWJlIG1hdGNoaW5nIGRlbGltaXRlcnMuIEZvciBvcGVuaW5nXG5kZWxpbWl0ZXJzLCB0aGlzIGhvbGRzIGFuIGFycmF5IG9mIG5vZGUgbmFtZXMgKHdyaXR0ZW4gYXMgYVxuc3BhY2Utc2VwYXJhdGVkIHN0cmluZyB3aGVuIGRlY2xhcmluZyB0aGlzIHByb3AgaW4gYSBncmFtbWFyKVxuZm9yIHRoZSBub2RlIHR5cGVzIG9mIGNsb3NpbmcgZGVsaW1pdGVycyB0aGF0IG1hdGNoIGl0LlxuKi9cbk5vZGVQcm9wLmNsb3NlZEJ5ID0gbmV3IE5vZGVQcm9wKHsgZGVzZXJpYWxpemU6IHN0ciA9PiBzdHIuc3BsaXQoXCIgXCIpIH0pO1xuLyoqXG5UaGUgaW52ZXJzZSBvZiBbYGNsb3NlZEJ5YF0oI2NvbW1vbi5Ob2RlUHJvcF5jbG9zZWRCeSkuIFRoaXMgaXNcbmF0dGFjaGVkIHRvIGNsb3NpbmcgZGVsaW1pdGVycywgaG9sZGluZyBhbiBhcnJheSBvZiBub2RlIG5hbWVzXG5vZiB0eXBlcyBvZiBtYXRjaGluZyBvcGVuaW5nIGRlbGltaXRlcnMuXG4qL1xuTm9kZVByb3Aub3BlbmVkQnkgPSBuZXcgTm9kZVByb3AoeyBkZXNlcmlhbGl6ZTogc3RyID0+IHN0ci5zcGxpdChcIiBcIikgfSk7XG4vKipcblVzZWQgdG8gYXNzaWduIG5vZGUgdHlwZXMgdG8gZ3JvdXBzIChmb3IgZXhhbXBsZSwgYWxsIG5vZGVcbnR5cGVzIHRoYXQgcmVwcmVzZW50IGFuIGV4cHJlc3Npb24gY291bGQgYmUgdGFnZ2VkIHdpdGggYW5cbmBcIkV4cHJlc3Npb25cImAgZ3JvdXApLlxuKi9cbk5vZGVQcm9wLmdyb3VwID0gbmV3IE5vZGVQcm9wKHsgZGVzZXJpYWxpemU6IHN0ciA9PiBzdHIuc3BsaXQoXCIgXCIpIH0pO1xuLyoqXG5BdHRhY2hlZCB0byBub2RlcyB0byBpbmRpY2F0ZSB0aGVzZSBzaG91bGQgYmVcbltkaXNwbGF5ZWRdKGh0dHBzOi8vY29kZW1pcnJvci5uZXQvZG9jcy9yZWYvI2xhbmd1YWdlLnN5bnRheFRyZWUpXG5pbiBhIGJpZGlyZWN0aW9uYWwgdGV4dCBpc29sYXRlLCBzbyB0aGF0IGRpcmVjdGlvbi1uZXV0cmFsXG5jaGFyYWN0ZXJzIG9uIHRoZWlyIHNpZGVzIGRvbid0IGluY29ycmVjdGx5IGdldCBhc3NvY2lhdGVkIHdpdGhcbnN1cnJvdW5kaW5nIHRleHQuIFlvdSdsbCBnZW5lcmFsbHkgd2FudCB0byBzZXQgdGhpcyBmb3Igbm9kZXNcbnRoYXQgY29udGFpbiBhcmJpdHJhcnkgdGV4dCwgbGlrZSBzdHJpbmdzIGFuZCBjb21tZW50cywgYW5kIGZvclxubm9kZXMgdGhhdCBhcHBlYXIgX2luc2lkZV8gYXJiaXRyYXJ5IHRleHQsIGxpa2UgSFRNTCB0YWdzLiBXaGVuXG5ub3QgZ2l2ZW4gYSB2YWx1ZSwgaW4gYSBncmFtbWFyIGRlY2xhcmF0aW9uLCBkZWZhdWx0cyB0b1xuYFwiYXV0b1wiYC5cbiovXG5Ob2RlUHJvcC5pc29sYXRlID0gbmV3IE5vZGVQcm9wKHsgZGVzZXJpYWxpemU6IHZhbHVlID0+IHtcbiAgICAgICAgaWYgKHZhbHVlICYmIHZhbHVlICE9IFwicnRsXCIgJiYgdmFsdWUgIT0gXCJsdHJcIiAmJiB2YWx1ZSAhPSBcImF1dG9cIilcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCB2YWx1ZSBmb3IgaXNvbGF0ZTogXCIgKyB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB2YWx1ZSB8fCBcImF1dG9cIjtcbiAgICB9IH0pO1xuLyoqXG5UaGUgaGFzaCBvZiB0aGUgW2NvbnRleHRdKCNsci5Db250ZXh0VHJhY2tlci5jb25zdHJ1Y3RvcilcbnRoYXQgdGhlIG5vZGUgd2FzIHBhcnNlZCBpbiwgaWYgYW55LiBVc2VkIHRvIGxpbWl0IHJldXNlIG9mXG5jb250ZXh0dWFsIG5vZGVzLlxuKi9cbk5vZGVQcm9wLmNvbnRleHRIYXNoID0gbmV3IE5vZGVQcm9wKHsgcGVyTm9kZTogdHJ1ZSB9KTtcbi8qKlxuVGhlIGRpc3RhbmNlIGJleW9uZCB0aGUgZW5kIG9mIHRoZSBub2RlIHRoYXQgdGhlIHRva2VuaXplclxubG9va2VkIGFoZWFkIGZvciBhbnkgb2YgdGhlIHRva2VucyBpbnNpZGUgdGhlIG5vZGUuIChUaGUgTFJcbnBhcnNlciBvbmx5IHN0b3JlcyB0aGlzIHdoZW4gaXQgaXMgbGFyZ2VyIHRoYW4gMjUsIGZvclxuZWZmaWNpZW5jeSByZWFzb25zLilcbiovXG5Ob2RlUHJvcC5sb29rQWhlYWQgPSBuZXcgTm9kZVByb3AoeyBwZXJOb2RlOiB0cnVlIH0pO1xuLyoqXG5UaGlzIHBlci1ub2RlIHByb3AgaXMgdXNlZCB0byByZXBsYWNlIGEgZ2l2ZW4gbm9kZSwgb3IgcGFydCBvZiBhXG5ub2RlLCB3aXRoIGFub3RoZXIgdHJlZS4gVGhpcyBpcyB1c2VmdWwgdG8gaW5jbHVkZSB0cmVlcyBmcm9tXG5kaWZmZXJlbnQgbGFuZ3VhZ2VzIGluIG1peGVkLWxhbmd1YWdlIHBhcnNlcnMuXG4qL1xuTm9kZVByb3AubW91bnRlZCA9IG5ldyBOb2RlUHJvcCh7IHBlck5vZGU6IHRydWUgfSk7XG4vKipcbkEgbW91bnRlZCB0cmVlLCB3aGljaCBjYW4gYmUgW3N0b3JlZF0oI2NvbW1vbi5Ob2RlUHJvcF5tb3VudGVkKSBvblxuYSB0cmVlIG5vZGUgdG8gaW5kaWNhdGUgdGhhdCBwYXJ0cyBvZiBpdHMgY29udGVudCBhcmVcbnJlcHJlc2VudGVkIGJ5IGFub3RoZXIgdHJlZS5cbiovXG5jbGFzcyBNb3VudGVkVHJlZSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgVGhlIGlubmVyIHRyZWUuXG4gICAgKi9cbiAgICB0cmVlLCBcbiAgICAvKipcbiAgICBJZiB0aGlzIGlzIG51bGwsIHRoaXMgdHJlZSByZXBsYWNlcyB0aGUgZW50aXJlIG5vZGUgKGl0IHdpbGxcbiAgICBiZSBpbmNsdWRlZCBpbiB0aGUgcmVndWxhciBpdGVyYXRpb24gaW5zdGVhZCBvZiBpdHMgaG9zdFxuICAgIG5vZGUpLiBJZiBub3QsIG9ubHkgdGhlIGdpdmVuIHJhbmdlcyBhcmUgY29uc2lkZXJlZCB0byBiZVxuICAgIGNvdmVyZWQgYnkgdGhpcyB0cmVlLiBUaGlzIGlzIHVzZWQgZm9yIHRyZWVzIHRoYXQgYXJlIG1peGVkIGluXG4gICAgYSB3YXkgdGhhdCBpc24ndCBzdHJpY3RseSBoaWVyYXJjaGljYWwuIFN1Y2ggbW91bnRlZCB0cmVlcyBhcmVcbiAgICBvbmx5IGVudGVyZWQgYnkgW2ByZXNvbHZlSW5uZXJgXSgjY29tbW9uLlRyZWUucmVzb2x2ZUlubmVyKVxuICAgIGFuZCBbYGVudGVyYF0oI2NvbW1vbi5TeW50YXhOb2RlLmVudGVyKS5cbiAgICAqL1xuICAgIG92ZXJsYXksIFxuICAgIC8qKlxuICAgIFRoZSBwYXJzZXIgdXNlZCB0byBjcmVhdGUgdGhpcyBzdWJ0cmVlLlxuICAgICovXG4gICAgcGFyc2VyKSB7XG4gICAgICAgIHRoaXMudHJlZSA9IHRyZWU7XG4gICAgICAgIHRoaXMub3ZlcmxheSA9IG92ZXJsYXk7XG4gICAgICAgIHRoaXMucGFyc2VyID0gcGFyc2VyO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHN0YXRpYyBnZXQodHJlZSkge1xuICAgICAgICByZXR1cm4gdHJlZSAmJiB0cmVlLnByb3BzICYmIHRyZWUucHJvcHNbTm9kZVByb3AubW91bnRlZC5pZF07XG4gICAgfVxufVxuY29uc3Qgbm9Qcm9wcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4vKipcbkVhY2ggbm9kZSBpbiBhIHN5bnRheCB0cmVlIGhhcyBhIG5vZGUgdHlwZSBhc3NvY2lhdGVkIHdpdGggaXQuXG4qL1xuY2xhc3MgTm9kZVR5cGUge1xuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgVGhlIG5hbWUgb2YgdGhlIG5vZGUgdHlwZS4gTm90IG5lY2Vzc2FyaWx5IHVuaXF1ZSwgYnV0IGlmIHRoZVxuICAgIGdyYW1tYXIgd2FzIHdyaXR0ZW4gcHJvcGVybHksIGRpZmZlcmVudCBub2RlIHR5cGVzIHdpdGggdGhlXG4gICAgc2FtZSBuYW1lIHdpdGhpbiBhIG5vZGUgc2V0IHNob3VsZCBwbGF5IHRoZSBzYW1lIHNlbWFudGljXG4gICAgcm9sZS5cbiAgICAqL1xuICAgIG5hbWUsIFxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgcHJvcHMsIFxuICAgIC8qKlxuICAgIFRoZSBpZCBvZiB0aGlzIG5vZGUgaW4gaXRzIHNldC4gQ29ycmVzcG9uZHMgdG8gdGhlIHRlcm0gaWRzXG4gICAgdXNlZCBpbiB0aGUgcGFyc2VyLlxuICAgICovXG4gICAgaWQsIFxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgZmxhZ3MgPSAwKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLmZsYWdzID0gZmxhZ3M7XG4gICAgfVxuICAgIC8qKlxuICAgIERlZmluZSBhIG5vZGUgdHlwZS5cbiAgICAqL1xuICAgIHN0YXRpYyBkZWZpbmUoc3BlYykge1xuICAgICAgICBsZXQgcHJvcHMgPSBzcGVjLnByb3BzICYmIHNwZWMucHJvcHMubGVuZ3RoID8gT2JqZWN0LmNyZWF0ZShudWxsKSA6IG5vUHJvcHM7XG4gICAgICAgIGxldCBmbGFncyA9IChzcGVjLnRvcCA/IDEgLyogTm9kZUZsYWcuVG9wICovIDogMCkgfCAoc3BlYy5za2lwcGVkID8gMiAvKiBOb2RlRmxhZy5Ta2lwcGVkICovIDogMCkgfFxuICAgICAgICAgICAgKHNwZWMuZXJyb3IgPyA0IC8qIE5vZGVGbGFnLkVycm9yICovIDogMCkgfCAoc3BlYy5uYW1lID09IG51bGwgPyA4IC8qIE5vZGVGbGFnLkFub255bW91cyAqLyA6IDApO1xuICAgICAgICBsZXQgdHlwZSA9IG5ldyBOb2RlVHlwZShzcGVjLm5hbWUgfHwgXCJcIiwgcHJvcHMsIHNwZWMuaWQsIGZsYWdzKTtcbiAgICAgICAgaWYgKHNwZWMucHJvcHMpXG4gICAgICAgICAgICBmb3IgKGxldCBzcmMgb2Ygc3BlYy5wcm9wcykge1xuICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShzcmMpKVxuICAgICAgICAgICAgICAgICAgICBzcmMgPSBzcmModHlwZSk7XG4gICAgICAgICAgICAgICAgaWYgKHNyYykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3JjWzBdLnBlck5vZGUpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkNhbid0IHN0b3JlIGEgcGVyLW5vZGUgcHJvcCBvbiBhIG5vZGUgdHlwZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgcHJvcHNbc3JjWzBdLmlkXSA9IHNyY1sxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIHJldHVybiB0eXBlO1xuICAgIH1cbiAgICAvKipcbiAgICBSZXRyaWV2ZXMgYSBub2RlIHByb3AgZm9yIHRoaXMgdHlwZS4gV2lsbCByZXR1cm4gYHVuZGVmaW5lZGAgaWZcbiAgICB0aGUgcHJvcCBpc24ndCBwcmVzZW50IG9uIHRoaXMgbm9kZS5cbiAgICAqL1xuICAgIHByb3AocHJvcCkgeyByZXR1cm4gdGhpcy5wcm9wc1twcm9wLmlkXTsgfVxuICAgIC8qKlxuICAgIFRydWUgd2hlbiB0aGlzIGlzIHRoZSB0b3Agbm9kZSBvZiBhIGdyYW1tYXIuXG4gICAgKi9cbiAgICBnZXQgaXNUb3AoKSB7IHJldHVybiAodGhpcy5mbGFncyAmIDEgLyogTm9kZUZsYWcuVG9wICovKSA+IDA7IH1cbiAgICAvKipcbiAgICBUcnVlIHdoZW4gdGhpcyBub2RlIGlzIHByb2R1Y2VkIGJ5IGEgc2tpcCBydWxlLlxuICAgICovXG4gICAgZ2V0IGlzU2tpcHBlZCgpIHsgcmV0dXJuICh0aGlzLmZsYWdzICYgMiAvKiBOb2RlRmxhZy5Ta2lwcGVkICovKSA+IDA7IH1cbiAgICAvKipcbiAgICBJbmRpY2F0ZXMgd2hldGhlciB0aGlzIGlzIGFuIGVycm9yIG5vZGUuXG4gICAgKi9cbiAgICBnZXQgaXNFcnJvcigpIHsgcmV0dXJuICh0aGlzLmZsYWdzICYgNCAvKiBOb2RlRmxhZy5FcnJvciAqLykgPiAwOyB9XG4gICAgLyoqXG4gICAgV2hlbiB0cnVlLCB0aGlzIG5vZGUgdHlwZSBkb2Vzbid0IGNvcnJlc3BvbmQgdG8gYSB1c2VyLWRlY2xhcmVkXG4gICAgbmFtZWQgbm9kZSwgZm9yIGV4YW1wbGUgYmVjYXVzZSBpdCBpcyB1c2VkIHRvIGNhY2hlIHJlcGV0aXRpb24uXG4gICAgKi9cbiAgICBnZXQgaXNBbm9ueW1vdXMoKSB7IHJldHVybiAodGhpcy5mbGFncyAmIDggLyogTm9kZUZsYWcuQW5vbnltb3VzICovKSA+IDA7IH1cbiAgICAvKipcbiAgICBSZXR1cm5zIHRydWUgd2hlbiB0aGlzIG5vZGUncyBuYW1lIG9yIG9uZSBvZiBpdHNcbiAgICBbZ3JvdXBzXSgjY29tbW9uLk5vZGVQcm9wXmdyb3VwKSBtYXRjaGVzIHRoZSBnaXZlbiBzdHJpbmcuXG4gICAgKi9cbiAgICBpcyhuYW1lKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbmFtZSA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKHRoaXMubmFtZSA9PSBuYW1lKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgbGV0IGdyb3VwID0gdGhpcy5wcm9wKE5vZGVQcm9wLmdyb3VwKTtcbiAgICAgICAgICAgIHJldHVybiBncm91cCA/IGdyb3VwLmluZGV4T2YobmFtZSkgPiAtMSA6IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmlkID09IG5hbWU7XG4gICAgfVxuICAgIC8qKlxuICAgIENyZWF0ZSBhIGZ1bmN0aW9uIGZyb20gbm9kZSB0eXBlcyB0byBhcmJpdHJhcnkgdmFsdWVzIGJ5XG4gICAgc3BlY2lmeWluZyBhbiBvYmplY3Qgd2hvc2UgcHJvcGVydHkgbmFtZXMgYXJlIG5vZGUgb3JcbiAgICBbZ3JvdXBdKCNjb21tb24uTm9kZVByb3BeZ3JvdXApIG5hbWVzLiBPZnRlbiB1c2VmdWwgd2l0aFxuICAgIFtgTm9kZVByb3AuYWRkYF0oI2NvbW1vbi5Ob2RlUHJvcC5hZGQpLiBZb3UgY2FuIHB1dCBtdWx0aXBsZVxuICAgIG5hbWVzLCBzZXBhcmF0ZWQgYnkgc3BhY2VzLCBpbiBhIHNpbmdsZSBwcm9wZXJ0eSBuYW1lIHRvIG1hcFxuICAgIG11bHRpcGxlIG5vZGUgbmFtZXMgdG8gYSBzaW5nbGUgdmFsdWUuXG4gICAgKi9cbiAgICBzdGF0aWMgbWF0Y2gobWFwKSB7XG4gICAgICAgIGxldCBkaXJlY3QgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBmb3IgKGxldCBwcm9wIGluIG1hcClcbiAgICAgICAgICAgIGZvciAobGV0IG5hbWUgb2YgcHJvcC5zcGxpdChcIiBcIikpXG4gICAgICAgICAgICAgICAgZGlyZWN0W25hbWVdID0gbWFwW3Byb3BdO1xuICAgICAgICByZXR1cm4gKG5vZGUpID0+IHtcbiAgICAgICAgICAgIGZvciAobGV0IGdyb3VwcyA9IG5vZGUucHJvcChOb2RlUHJvcC5ncm91cCksIGkgPSAtMTsgaSA8IChncm91cHMgPyBncm91cHMubGVuZ3RoIDogMCk7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBmb3VuZCA9IGRpcmVjdFtpIDwgMCA/IG5vZGUubmFtZSA6IGdyb3Vwc1tpXV07XG4gICAgICAgICAgICAgICAgaWYgKGZvdW5kKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm91bmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxufVxuLyoqXG5BbiBlbXB0eSBkdW1teSBub2RlIHR5cGUgdG8gdXNlIHdoZW4gbm8gYWN0dWFsIHR5cGUgaXMgYXZhaWxhYmxlLlxuKi9cbk5vZGVUeXBlLm5vbmUgPSBuZXcgTm9kZVR5cGUoXCJcIiwgT2JqZWN0LmNyZWF0ZShudWxsKSwgMCwgOCAvKiBOb2RlRmxhZy5Bbm9ueW1vdXMgKi8pO1xuLyoqXG5BIG5vZGUgc2V0IGhvbGRzIGEgY29sbGVjdGlvbiBvZiBub2RlIHR5cGVzLiBJdCBpcyB1c2VkIHRvXG5jb21wYWN0bHkgcmVwcmVzZW50IHRyZWVzIGJ5IHN0b3JpbmcgdGhlaXIgdHlwZSBpZHMsIHJhdGhlciB0aGFuIGFcbmZ1bGwgcG9pbnRlciB0byB0aGUgdHlwZSBvYmplY3QsIGluIGEgbnVtZXJpYyBhcnJheS4gRWFjaCBwYXJzZXJcbltoYXNdKCNsci5MUlBhcnNlci5ub2RlU2V0KSBhIG5vZGUgc2V0LCBhbmQgW3RyZWVcbmJ1ZmZlcnNdKCNjb21tb24uVHJlZUJ1ZmZlcikgY2FuIG9ubHkgc3RvcmUgY29sbGVjdGlvbnMgb2Ygbm9kZXNcbmZyb20gdGhlIHNhbWUgc2V0LiBBIHNldCBjYW4gaGF2ZSBhIG1heGltdW0gb2YgMioqMTYgKDY1NTM2KSBub2RlXG50eXBlcyBpbiBpdCwgc28gdGhhdCB0aGUgaWRzIGZpdCBpbnRvIDE2LWJpdCB0eXBlZCBhcnJheSBzbG90cy5cbiovXG5jbGFzcyBOb2RlU2V0IHtcbiAgICAvKipcbiAgICBDcmVhdGUgYSBzZXQgd2l0aCB0aGUgZ2l2ZW4gdHlwZXMuIFRoZSBgaWRgIHByb3BlcnR5IG9mIGVhY2hcbiAgICB0eXBlIHNob3VsZCBjb3JyZXNwb25kIHRvIGl0cyBwb3NpdGlvbiB3aXRoaW4gdGhlIGFycmF5LlxuICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgVGhlIG5vZGUgdHlwZXMgaW4gdGhpcyBzZXQsIGJ5IGlkLlxuICAgICovXG4gICAgdHlwZXMpIHtcbiAgICAgICAgdGhpcy50eXBlcyA9IHR5cGVzO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHR5cGVzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgaWYgKHR5cGVzW2ldLmlkICE9IGkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJOb2RlIHR5cGUgaWRzIHNob3VsZCBjb3JyZXNwb25kIHRvIGFycmF5IHBvc2l0aW9ucyB3aGVuIGNyZWF0aW5nIGEgbm9kZSBzZXRcIik7XG4gICAgfVxuICAgIC8qKlxuICAgIENyZWF0ZSBhIGNvcHkgb2YgdGhpcyBzZXQgd2l0aCBzb21lIG5vZGUgcHJvcGVydGllcyBhZGRlZC4gVGhlXG4gICAgYXJndW1lbnRzIHRvIHRoaXMgbWV0aG9kIGNhbiBiZSBjcmVhdGVkIHdpdGhcbiAgICBbYE5vZGVQcm9wLmFkZGBdKCNjb21tb24uTm9kZVByb3AuYWRkKS5cbiAgICAqL1xuICAgIGV4dGVuZCguLi5wcm9wcykge1xuICAgICAgICBsZXQgbmV3VHlwZXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgdHlwZSBvZiB0aGlzLnR5cGVzKSB7XG4gICAgICAgICAgICBsZXQgbmV3UHJvcHMgPSBudWxsO1xuICAgICAgICAgICAgZm9yIChsZXQgc291cmNlIG9mIHByb3BzKSB7XG4gICAgICAgICAgICAgICAgbGV0IGFkZCA9IHNvdXJjZSh0eXBlKTtcbiAgICAgICAgICAgICAgICBpZiAoYWRkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghbmV3UHJvcHMpXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdQcm9wcyA9IE9iamVjdC5hc3NpZ24oe30sIHR5cGUucHJvcHMpO1xuICAgICAgICAgICAgICAgICAgICBuZXdQcm9wc1thZGRbMF0uaWRdID0gYWRkWzFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld1R5cGVzLnB1c2gobmV3UHJvcHMgPyBuZXcgTm9kZVR5cGUodHlwZS5uYW1lLCBuZXdQcm9wcywgdHlwZS5pZCwgdHlwZS5mbGFncykgOiB0eXBlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IE5vZGVTZXQobmV3VHlwZXMpO1xuICAgIH1cbn1cbmNvbnN0IENhY2hlZE5vZGUgPSBuZXcgV2Vha01hcCgpLCBDYWNoZWRJbm5lck5vZGUgPSBuZXcgV2Vha01hcCgpO1xuLyoqXG5PcHRpb25zIHRoYXQgY29udHJvbCBpdGVyYXRpb24uIENhbiBiZSBjb21iaW5lZCB3aXRoIHRoZSBgfGBcbm9wZXJhdG9yIHRvIGVuYWJsZSBtdWx0aXBsZSBvbmVzLlxuKi9cbmV4cG9ydHMuSXRlck1vZGUgPSB2b2lkIDA7XG4oZnVuY3Rpb24gKEl0ZXJNb2RlKSB7XG4gICAgLyoqXG4gICAgV2hlbiBlbmFibGVkLCBpdGVyYXRpb24gd2lsbCBvbmx5IHZpc2l0IFtgVHJlZWBdKCNjb21tb24uVHJlZSlcbiAgICBvYmplY3RzLCBub3Qgbm9kZXMgcGFja2VkIGludG9cbiAgICBbYFRyZWVCdWZmZXJgXSgjY29tbW9uLlRyZWVCdWZmZXIpcy5cbiAgICAqL1xuICAgIEl0ZXJNb2RlW0l0ZXJNb2RlW1wiRXhjbHVkZUJ1ZmZlcnNcIl0gPSAxXSA9IFwiRXhjbHVkZUJ1ZmZlcnNcIjtcbiAgICAvKipcbiAgICBFbmFibGUgdGhpcyB0byBtYWtlIGl0ZXJhdGlvbiBpbmNsdWRlIGFub255bW91cyBub2RlcyAoc3VjaCBhc1xuICAgIHRoZSBub2RlcyB0aGF0IHdyYXAgcmVwZWF0ZWQgZ3JhbW1hciBjb25zdHJ1Y3RzIGludG8gYSBiYWxhbmNlZFxuICAgIHRyZWUpLlxuICAgICovXG4gICAgSXRlck1vZGVbSXRlck1vZGVbXCJJbmNsdWRlQW5vbnltb3VzXCJdID0gMl0gPSBcIkluY2x1ZGVBbm9ueW1vdXNcIjtcbiAgICAvKipcbiAgICBCeSBkZWZhdWx0LCByZWd1bGFyIFttb3VudGVkXSgjY29tbW9uLk5vZGVQcm9wXm1vdW50ZWQpIG5vZGVzXG4gICAgcmVwbGFjZSB0aGVpciBiYXNlIG5vZGUgaW4gaXRlcmF0aW9uLiBFbmFibGUgdGhpcyB0byBpZ25vcmUgdGhlbVxuICAgIGluc3RlYWQuXG4gICAgKi9cbiAgICBJdGVyTW9kZVtJdGVyTW9kZVtcIklnbm9yZU1vdW50c1wiXSA9IDRdID0gXCJJZ25vcmVNb3VudHNcIjtcbiAgICAvKipcbiAgICBUaGlzIG9wdGlvbiBvbmx5IGFwcGxpZXMgaW5cbiAgICBbYGVudGVyYF0oI2NvbW1vbi5TeW50YXhOb2RlLmVudGVyKS1zdHlsZSBtZXRob2RzLiBJdCB0ZWxscyB0aGVcbiAgICBsaWJyYXJ5IHRvIG5vdCBlbnRlciBtb3VudGVkIG92ZXJsYXlzIGlmIG9uZSBjb3ZlcnMgdGhlIGdpdmVuXG4gICAgcG9zaXRpb24uXG4gICAgKi9cbiAgICBJdGVyTW9kZVtJdGVyTW9kZVtcIklnbm9yZU92ZXJsYXlzXCJdID0gOF0gPSBcIklnbm9yZU92ZXJsYXlzXCI7XG59KShleHBvcnRzLkl0ZXJNb2RlIHx8IChleHBvcnRzLkl0ZXJNb2RlID0ge30pKTtcbi8qKlxuQSBwaWVjZSBvZiBzeW50YXggdHJlZS4gVGhlcmUgYXJlIHR3byB3YXlzIHRvIGFwcHJvYWNoIHRoZXNlXG50cmVlczogdGhlIHdheSB0aGV5IGFyZSBhY3R1YWxseSBzdG9yZWQgaW4gbWVtb3J5LCBhbmQgdGhlXG5jb252ZW5pZW50IHdheS5cblxuU3ludGF4IHRyZWVzIGFyZSBzdG9yZWQgYXMgYSB0cmVlIG9mIGBUcmVlYCBhbmQgYFRyZWVCdWZmZXJgXG5vYmplY3RzLiBCeSBwYWNraW5nIGRldGFpbCBpbmZvcm1hdGlvbiBpbnRvIGBUcmVlQnVmZmVyYCBsZWFmXG5ub2RlcywgdGhlIHJlcHJlc2VudGF0aW9uIGlzIG1hZGUgYSBsb3QgbW9yZSBtZW1vcnktZWZmaWNpZW50LlxuXG5Ib3dldmVyLCB3aGVuIHlvdSB3YW50IHRvIGFjdHVhbGx5IHdvcmsgd2l0aCB0cmVlIG5vZGVzLCB0aGlzXG5yZXByZXNlbnRhdGlvbiBpcyB2ZXJ5IGF3a3dhcmQsIHNvIG1vc3QgY2xpZW50IGNvZGUgd2lsbCB3YW50IHRvXG51c2UgdGhlIFtgVHJlZUN1cnNvcmBdKCNjb21tb24uVHJlZUN1cnNvcikgb3JcbltgU3ludGF4Tm9kZWBdKCNjb21tb24uU3ludGF4Tm9kZSkgaW50ZXJmYWNlIGluc3RlYWQsIHdoaWNoIHByb3ZpZGVzXG5hIHZpZXcgb24gc29tZSBwYXJ0IG9mIHRoaXMgZGF0YSBzdHJ1Y3R1cmUsIGFuZCBjYW4gYmUgdXNlZCB0b1xubW92ZSBhcm91bmQgdG8gYWRqYWNlbnQgbm9kZXMuXG4qL1xuY2xhc3MgVHJlZSB7XG4gICAgLyoqXG4gICAgQ29uc3RydWN0IGEgbmV3IHRyZWUuIFNlZSBhbHNvIFtgVHJlZS5idWlsZGBdKCNjb21tb24uVHJlZV5idWlsZCkuXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICBUaGUgdHlwZSBvZiB0aGUgdG9wIG5vZGUuXG4gICAgKi9cbiAgICB0eXBlLCBcbiAgICAvKipcbiAgICBUaGlzIG5vZGUncyBjaGlsZCBub2Rlcy5cbiAgICAqL1xuICAgIGNoaWxkcmVuLCBcbiAgICAvKipcbiAgICBUaGUgcG9zaXRpb25zIChvZmZzZXRzIHJlbGF0aXZlIHRvIHRoZSBzdGFydCBvZiB0aGlzIHRyZWUpIG9mXG4gICAgdGhlIGNoaWxkcmVuLlxuICAgICovXG4gICAgcG9zaXRpb25zLCBcbiAgICAvKipcbiAgICBUaGUgdG90YWwgbGVuZ3RoIG9mIHRoaXMgdHJlZVxuICAgICovXG4gICAgbGVuZ3RoLCBcbiAgICAvKipcbiAgICBQZXItbm9kZSBbbm9kZSBwcm9wc10oI2NvbW1vbi5Ob2RlUHJvcCkgdG8gYXNzb2NpYXRlIHdpdGggdGhpcyBub2RlLlxuICAgICovXG4gICAgcHJvcHMpIHtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgICAgICB0aGlzLnBvc2l0aW9ucyA9IHBvc2l0aW9ucztcbiAgICAgICAgdGhpcy5sZW5ndGggPSBsZW5ndGg7XG4gICAgICAgIC8qKlxuICAgICAgICBAaW50ZXJuYWxcbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wcm9wcyA9IG51bGw7XG4gICAgICAgIGlmIChwcm9wcyAmJiBwcm9wcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgICAgZm9yIChsZXQgW3Byb3AsIHZhbHVlXSBvZiBwcm9wcylcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzW3R5cGVvZiBwcm9wID09IFwibnVtYmVyXCIgPyBwcm9wIDogcHJvcC5pZF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICBsZXQgbW91bnRlZCA9IE1vdW50ZWRUcmVlLmdldCh0aGlzKTtcbiAgICAgICAgaWYgKG1vdW50ZWQgJiYgIW1vdW50ZWQub3ZlcmxheSlcbiAgICAgICAgICAgIHJldHVybiBtb3VudGVkLnRyZWUudG9TdHJpbmcoKTtcbiAgICAgICAgbGV0IGNoaWxkcmVuID0gXCJcIjtcbiAgICAgICAgZm9yIChsZXQgY2ggb2YgdGhpcy5jaGlsZHJlbikge1xuICAgICAgICAgICAgbGV0IHN0ciA9IGNoLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBpZiAoc3RyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkcmVuKVxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbiArPSBcIixcIjtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbiArPSBzdHI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICF0aGlzLnR5cGUubmFtZSA/IGNoaWxkcmVuIDpcbiAgICAgICAgICAgICgvXFxXLy50ZXN0KHRoaXMudHlwZS5uYW1lKSAmJiAhdGhpcy50eXBlLmlzRXJyb3IgPyBKU09OLnN0cmluZ2lmeSh0aGlzLnR5cGUubmFtZSkgOiB0aGlzLnR5cGUubmFtZSkgK1xuICAgICAgICAgICAgICAgIChjaGlsZHJlbi5sZW5ndGggPyBcIihcIiArIGNoaWxkcmVuICsgXCIpXCIgOiBcIlwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgR2V0IGEgW3RyZWUgY3Vyc29yXSgjY29tbW9uLlRyZWVDdXJzb3IpIHBvc2l0aW9uZWQgYXQgdGhlIHRvcCBvZlxuICAgIHRoZSB0cmVlLiBNb2RlIGNhbiBiZSB1c2VkIHRvIFtjb250cm9sXSgjY29tbW9uLkl0ZXJNb2RlKSB3aGljaFxuICAgIG5vZGVzIHRoZSBjdXJzb3IgdmlzaXRzLlxuICAgICovXG4gICAgY3Vyc29yKG1vZGUgPSAwKSB7XG4gICAgICAgIHJldHVybiBuZXcgVHJlZUN1cnNvcih0aGlzLnRvcE5vZGUsIG1vZGUpO1xuICAgIH1cbiAgICAvKipcbiAgICBHZXQgYSBbdHJlZSBjdXJzb3JdKCNjb21tb24uVHJlZUN1cnNvcikgcG9pbnRpbmcgaW50byB0aGlzIHRyZWVcbiAgICBhdCB0aGUgZ2l2ZW4gcG9zaXRpb24gYW5kIHNpZGUgKHNlZVxuICAgIFtgbW92ZVRvYF0oI2NvbW1vbi5UcmVlQ3Vyc29yLm1vdmVUbykuXG4gICAgKi9cbiAgICBjdXJzb3JBdChwb3MsIHNpZGUgPSAwLCBtb2RlID0gMCkge1xuICAgICAgICBsZXQgc2NvcGUgPSBDYWNoZWROb2RlLmdldCh0aGlzKSB8fCB0aGlzLnRvcE5vZGU7XG4gICAgICAgIGxldCBjdXJzb3IgPSBuZXcgVHJlZUN1cnNvcihzY29wZSk7XG4gICAgICAgIGN1cnNvci5tb3ZlVG8ocG9zLCBzaWRlKTtcbiAgICAgICAgQ2FjaGVkTm9kZS5zZXQodGhpcywgY3Vyc29yLl90cmVlKTtcbiAgICAgICAgcmV0dXJuIGN1cnNvcjtcbiAgICB9XG4gICAgLyoqXG4gICAgR2V0IGEgW3N5bnRheCBub2RlXSgjY29tbW9uLlN5bnRheE5vZGUpIG9iamVjdCBmb3IgdGhlIHRvcCBvZiB0aGVcbiAgICB0cmVlLlxuICAgICovXG4gICAgZ2V0IHRvcE5vZGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVHJlZU5vZGUodGhpcywgMCwgMCwgbnVsbCk7XG4gICAgfVxuICAgIC8qKlxuICAgIEdldCB0aGUgW3N5bnRheCBub2RlXSgjY29tbW9uLlN5bnRheE5vZGUpIGF0IHRoZSBnaXZlbiBwb3NpdGlvbi5cbiAgICBJZiBgc2lkZWAgaXMgLTEsIHRoaXMgd2lsbCBtb3ZlIGludG8gbm9kZXMgdGhhdCBlbmQgYXQgdGhlXG4gICAgcG9zaXRpb24uIElmIDEsIGl0J2xsIG1vdmUgaW50byBub2RlcyB0aGF0IHN0YXJ0IGF0IHRoZVxuICAgIHBvc2l0aW9uLiBXaXRoIDAsIGl0J2xsIG9ubHkgZW50ZXIgbm9kZXMgdGhhdCBjb3ZlciB0aGUgcG9zaXRpb25cbiAgICBmcm9tIGJvdGggc2lkZXMuXG4gICAgXG4gICAgTm90ZSB0aGF0IHRoaXMgd2lsbCBub3QgZW50ZXJcbiAgICBbb3ZlcmxheXNdKCNjb21tb24uTW91bnRlZFRyZWUub3ZlcmxheSksIGFuZCB5b3Ugb2Z0ZW4gd2FudFxuICAgIFtgcmVzb2x2ZUlubmVyYF0oI2NvbW1vbi5UcmVlLnJlc29sdmVJbm5lcikgaW5zdGVhZC5cbiAgICAqL1xuICAgIHJlc29sdmUocG9zLCBzaWRlID0gMCkge1xuICAgICAgICBsZXQgbm9kZSA9IHJlc29sdmVOb2RlKENhY2hlZE5vZGUuZ2V0KHRoaXMpIHx8IHRoaXMudG9wTm9kZSwgcG9zLCBzaWRlLCBmYWxzZSk7XG4gICAgICAgIENhY2hlZE5vZGUuc2V0KHRoaXMsIG5vZGUpO1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gICAgLyoqXG4gICAgTGlrZSBbYHJlc29sdmVgXSgjY29tbW9uLlRyZWUucmVzb2x2ZSksIGJ1dCB3aWxsIGVudGVyXG4gICAgW292ZXJsYWlkXSgjY29tbW9uLk1vdW50ZWRUcmVlLm92ZXJsYXkpIG5vZGVzLCBwcm9kdWNpbmcgYSBzeW50YXggbm9kZVxuICAgIHBvaW50aW5nIGludG8gdGhlIGlubmVybW9zdCBvdmVybGFpZCB0cmVlIGF0IHRoZSBnaXZlbiBwb3NpdGlvblxuICAgICh3aXRoIHBhcmVudCBsaW5rcyBnb2luZyB0aHJvdWdoIGFsbCBwYXJlbnQgc3RydWN0dXJlLCBpbmNsdWRpbmdcbiAgICB0aGUgaG9zdCB0cmVlcykuXG4gICAgKi9cbiAgICByZXNvbHZlSW5uZXIocG9zLCBzaWRlID0gMCkge1xuICAgICAgICBsZXQgbm9kZSA9IHJlc29sdmVOb2RlKENhY2hlZElubmVyTm9kZS5nZXQodGhpcykgfHwgdGhpcy50b3BOb2RlLCBwb3MsIHNpZGUsIHRydWUpO1xuICAgICAgICBDYWNoZWRJbm5lck5vZGUuc2V0KHRoaXMsIG5vZGUpO1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gICAgLyoqXG4gICAgSW4gc29tZSBzaXR1YXRpb25zLCBpdCBjYW4gYmUgdXNlZnVsIHRvIGl0ZXJhdGUgdGhyb3VnaCBhbGxcbiAgICBub2RlcyBhcm91bmQgYSBwb3NpdGlvbiwgaW5jbHVkaW5nIHRob3NlIGluIG92ZXJsYXlzIHRoYXQgZG9uJ3RcbiAgICBkaXJlY3RseSBjb3ZlciB0aGUgcG9zaXRpb24uIFRoaXMgbWV0aG9kIGdpdmVzIHlvdSBhbiBpdGVyYXRvclxuICAgIHRoYXQgd2lsbCBwcm9kdWNlIGFsbCBub2RlcywgZnJvbSBzbWFsbCB0byBiaWcsIGFyb3VuZCB0aGUgZ2l2ZW5cbiAgICBwb3NpdGlvbi5cbiAgICAqL1xuICAgIHJlc29sdmVTdGFjayhwb3MsIHNpZGUgPSAwKSB7XG4gICAgICAgIHJldHVybiBzdGFja0l0ZXJhdG9yKHRoaXMsIHBvcywgc2lkZSk7XG4gICAgfVxuICAgIC8qKlxuICAgIEl0ZXJhdGUgb3ZlciB0aGUgdHJlZSBhbmQgaXRzIGNoaWxkcmVuLCBjYWxsaW5nIGBlbnRlcmAgZm9yIGFueVxuICAgIG5vZGUgdGhhdCB0b3VjaGVzIHRoZSBgZnJvbWAvYHRvYCByZWdpb24gKGlmIGdpdmVuKSBiZWZvcmVcbiAgICBydW5uaW5nIG92ZXIgc3VjaCBhIG5vZGUncyBjaGlsZHJlbiwgYW5kIGBsZWF2ZWAgKGlmIGdpdmVuKSB3aGVuXG4gICAgbGVhdmluZyB0aGUgbm9kZS4gV2hlbiBgZW50ZXJgIHJldHVybnMgYGZhbHNlYCwgdGhhdCBub2RlIHdpbGxcbiAgICBub3QgaGF2ZSBpdHMgY2hpbGRyZW4gaXRlcmF0ZWQgb3ZlciAob3IgYGxlYXZlYCBjYWxsZWQpLlxuICAgICovXG4gICAgaXRlcmF0ZShzcGVjKSB7XG4gICAgICAgIGxldCB7IGVudGVyLCBsZWF2ZSwgZnJvbSA9IDAsIHRvID0gdGhpcy5sZW5ndGggfSA9IHNwZWM7XG4gICAgICAgIGxldCBtb2RlID0gc3BlYy5tb2RlIHx8IDAsIGFub24gPSAobW9kZSAmIGV4cG9ydHMuSXRlck1vZGUuSW5jbHVkZUFub255bW91cykgPiAwO1xuICAgICAgICBmb3IgKGxldCBjID0gdGhpcy5jdXJzb3IobW9kZSB8IGV4cG9ydHMuSXRlck1vZGUuSW5jbHVkZUFub255bW91cyk7Oykge1xuICAgICAgICAgICAgbGV0IGVudGVyZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChjLmZyb20gPD0gdG8gJiYgYy50byA+PSBmcm9tICYmICghYW5vbiAmJiBjLnR5cGUuaXNBbm9ueW1vdXMgfHwgZW50ZXIoYykgIT09IGZhbHNlKSkge1xuICAgICAgICAgICAgICAgIGlmIChjLmZpcnN0Q2hpbGQoKSlcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgZW50ZXJlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICAgICAgaWYgKGVudGVyZWQgJiYgbGVhdmUgJiYgKGFub24gfHwgIWMudHlwZS5pc0Fub255bW91cykpXG4gICAgICAgICAgICAgICAgICAgIGxlYXZlKGMpO1xuICAgICAgICAgICAgICAgIGlmIChjLm5leHRTaWJsaW5nKCkpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGlmICghYy5wYXJlbnQoKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGVudGVyZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgIEdldCB0aGUgdmFsdWUgb2YgdGhlIGdpdmVuIFtub2RlIHByb3BdKCNjb21tb24uTm9kZVByb3ApIGZvciB0aGlzXG4gICAgbm9kZS4gV29ya3Mgd2l0aCBib3RoIHBlci1ub2RlIGFuZCBwZXItdHlwZSBwcm9wcy5cbiAgICAqL1xuICAgIHByb3AocHJvcCkge1xuICAgICAgICByZXR1cm4gIXByb3AucGVyTm9kZSA/IHRoaXMudHlwZS5wcm9wKHByb3ApIDogdGhpcy5wcm9wcyA/IHRoaXMucHJvcHNbcHJvcC5pZF0gOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgIFJldHVybnMgdGhlIG5vZGUncyBbcGVyLW5vZGUgcHJvcHNdKCNjb21tb24uTm9kZVByb3AucGVyTm9kZSkgaW4gYVxuICAgIGZvcm1hdCB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gdGhlIFtgVHJlZWBdKCNjb21tb24uVHJlZSlcbiAgICBjb25zdHJ1Y3Rvci5cbiAgICAqL1xuICAgIGdldCBwcm9wVmFsdWVzKCkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgICAgIGlmICh0aGlzLnByb3BzKVxuICAgICAgICAgICAgZm9yIChsZXQgaWQgaW4gdGhpcy5wcm9wcylcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChbK2lkLCB0aGlzLnByb3BzW2lkXV0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICBCYWxhbmNlIHRoZSBkaXJlY3QgY2hpbGRyZW4gb2YgdGhpcyB0cmVlLCBwcm9kdWNpbmcgYSBjb3B5IG9mXG4gICAgd2hpY2ggbWF5IGhhdmUgY2hpbGRyZW4gZ3JvdXBlZCBpbnRvIHN1YnRyZWVzIHdpdGggdHlwZVxuICAgIFtgTm9kZVR5cGUubm9uZWBdKCNjb21tb24uTm9kZVR5cGVebm9uZSkuXG4gICAgKi9cbiAgICBiYWxhbmNlKGNvbmZpZyA9IHt9KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuLmxlbmd0aCA8PSA4IC8qIEJhbGFuY2UuQnJhbmNoRmFjdG9yICovID8gdGhpcyA6XG4gICAgICAgICAgICBiYWxhbmNlUmFuZ2UoTm9kZVR5cGUubm9uZSwgdGhpcy5jaGlsZHJlbiwgdGhpcy5wb3NpdGlvbnMsIDAsIHRoaXMuY2hpbGRyZW4ubGVuZ3RoLCAwLCB0aGlzLmxlbmd0aCwgKGNoaWxkcmVuLCBwb3NpdGlvbnMsIGxlbmd0aCkgPT4gbmV3IFRyZWUodGhpcy50eXBlLCBjaGlsZHJlbiwgcG9zaXRpb25zLCBsZW5ndGgsIHRoaXMucHJvcFZhbHVlcyksIGNvbmZpZy5tYWtlVHJlZSB8fCAoKGNoaWxkcmVuLCBwb3NpdGlvbnMsIGxlbmd0aCkgPT4gbmV3IFRyZWUoTm9kZVR5cGUubm9uZSwgY2hpbGRyZW4sIHBvc2l0aW9ucywgbGVuZ3RoKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICBCdWlsZCBhIHRyZWUgZnJvbSBhIHBvc3RmaXgtb3JkZXJlZCBidWZmZXIgb2Ygbm9kZSBpbmZvcm1hdGlvbixcbiAgICBvciBhIGN1cnNvciBvdmVyIHN1Y2ggYSBidWZmZXIuXG4gICAgKi9cbiAgICBzdGF0aWMgYnVpbGQoZGF0YSkgeyByZXR1cm4gYnVpbGRUcmVlKGRhdGEpOyB9XG59XG4vKipcblRoZSBlbXB0eSB0cmVlXG4qL1xuVHJlZS5lbXB0eSA9IG5ldyBUcmVlKE5vZGVUeXBlLm5vbmUsIFtdLCBbXSwgMCk7XG5jbGFzcyBGbGF0QnVmZmVyQ3Vyc29yIHtcbiAgICBjb25zdHJ1Y3RvcihidWZmZXIsIGluZGV4KSB7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgfVxuICAgIGdldCBpZCgpIHsgcmV0dXJuIHRoaXMuYnVmZmVyW3RoaXMuaW5kZXggLSA0XTsgfVxuICAgIGdldCBzdGFydCgpIHsgcmV0dXJuIHRoaXMuYnVmZmVyW3RoaXMuaW5kZXggLSAzXTsgfVxuICAgIGdldCBlbmQoKSB7IHJldHVybiB0aGlzLmJ1ZmZlclt0aGlzLmluZGV4IC0gMl07IH1cbiAgICBnZXQgc2l6ZSgpIHsgcmV0dXJuIHRoaXMuYnVmZmVyW3RoaXMuaW5kZXggLSAxXTsgfVxuICAgIGdldCBwb3MoKSB7IHJldHVybiB0aGlzLmluZGV4OyB9XG4gICAgbmV4dCgpIHsgdGhpcy5pbmRleCAtPSA0OyB9XG4gICAgZm9yaygpIHsgcmV0dXJuIG5ldyBGbGF0QnVmZmVyQ3Vyc29yKHRoaXMuYnVmZmVyLCB0aGlzLmluZGV4KTsgfVxufVxuLyoqXG5UcmVlIGJ1ZmZlcnMgY29udGFpbiAodHlwZSwgc3RhcnQsIGVuZCwgZW5kSW5kZXgpIHF1YWRzIGZvciBlYWNoXG5ub2RlLiBJbiBzdWNoIGEgYnVmZmVyLCBub2RlcyBhcmUgc3RvcmVkIGluIHByZWZpeCBvcmRlciAocGFyZW50c1xuYmVmb3JlIGNoaWxkcmVuLCB3aXRoIHRoZSBlbmRJbmRleCBvZiB0aGUgcGFyZW50IGluZGljYXRpbmcgd2hpY2hcbmNoaWxkcmVuIGJlbG9uZyB0byBpdCkuXG4qL1xuY2xhc3MgVHJlZUJ1ZmZlciB7XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgdHJlZSBidWZmZXIuXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICBUaGUgYnVmZmVyJ3MgY29udGVudC5cbiAgICAqL1xuICAgIGJ1ZmZlciwgXG4gICAgLyoqXG4gICAgVGhlIHRvdGFsIGxlbmd0aCBvZiB0aGUgZ3JvdXAgb2Ygbm9kZXMgaW4gdGhlIGJ1ZmZlci5cbiAgICAqL1xuICAgIGxlbmd0aCwgXG4gICAgLyoqXG4gICAgVGhlIG5vZGUgc2V0IHVzZWQgaW4gdGhpcyBidWZmZXIuXG4gICAgKi9cbiAgICBzZXQpIHtcbiAgICAgICAgdGhpcy5idWZmZXIgPSBidWZmZXI7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoO1xuICAgICAgICB0aGlzLnNldCA9IHNldDtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBnZXQgdHlwZSgpIHsgcmV0dXJuIE5vZGVUeXBlLm5vbmU7IH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLmJ1ZmZlci5sZW5ndGg7KSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh0aGlzLmNoaWxkU3RyaW5nKGluZGV4KSk7XG4gICAgICAgICAgICBpbmRleCA9IHRoaXMuYnVmZmVyW2luZGV4ICsgM107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdC5qb2luKFwiLFwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBjaGlsZFN0cmluZyhpbmRleCkge1xuICAgICAgICBsZXQgaWQgPSB0aGlzLmJ1ZmZlcltpbmRleF0sIGVuZEluZGV4ID0gdGhpcy5idWZmZXJbaW5kZXggKyAzXTtcbiAgICAgICAgbGV0IHR5cGUgPSB0aGlzLnNldC50eXBlc1tpZF0sIHJlc3VsdCA9IHR5cGUubmFtZTtcbiAgICAgICAgaWYgKC9cXFcvLnRlc3QocmVzdWx0KSAmJiAhdHlwZS5pc0Vycm9yKVxuICAgICAgICAgICAgcmVzdWx0ID0gSlNPTi5zdHJpbmdpZnkocmVzdWx0KTtcbiAgICAgICAgaW5kZXggKz0gNDtcbiAgICAgICAgaWYgKGVuZEluZGV4ID09IGluZGV4KVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgbGV0IGNoaWxkcmVuID0gW107XG4gICAgICAgIHdoaWxlIChpbmRleCA8IGVuZEluZGV4KSB7XG4gICAgICAgICAgICBjaGlsZHJlbi5wdXNoKHRoaXMuY2hpbGRTdHJpbmcoaW5kZXgpKTtcbiAgICAgICAgICAgIGluZGV4ID0gdGhpcy5idWZmZXJbaW5kZXggKyAzXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0ICsgXCIoXCIgKyBjaGlsZHJlbi5qb2luKFwiLFwiKSArIFwiKVwiO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGZpbmRDaGlsZChzdGFydEluZGV4LCBlbmRJbmRleCwgZGlyLCBwb3MsIHNpZGUpIHtcbiAgICAgICAgbGV0IHsgYnVmZmVyIH0gPSB0aGlzLCBwaWNrID0gLTE7XG4gICAgICAgIGZvciAobGV0IGkgPSBzdGFydEluZGV4OyBpICE9IGVuZEluZGV4OyBpID0gYnVmZmVyW2kgKyAzXSkge1xuICAgICAgICAgICAgaWYgKGNoZWNrU2lkZShzaWRlLCBwb3MsIGJ1ZmZlcltpICsgMV0sIGJ1ZmZlcltpICsgMl0pKSB7XG4gICAgICAgICAgICAgICAgcGljayA9IGk7XG4gICAgICAgICAgICAgICAgaWYgKGRpciA+IDApXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwaWNrO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHNsaWNlKHN0YXJ0SSwgZW5kSSwgZnJvbSkge1xuICAgICAgICBsZXQgYiA9IHRoaXMuYnVmZmVyO1xuICAgICAgICBsZXQgY29weSA9IG5ldyBVaW50MTZBcnJheShlbmRJIC0gc3RhcnRJKSwgbGVuID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0SSwgaiA9IDA7IGkgPCBlbmRJOykge1xuICAgICAgICAgICAgY29weVtqKytdID0gYltpKytdO1xuICAgICAgICAgICAgY29weVtqKytdID0gYltpKytdIC0gZnJvbTtcbiAgICAgICAgICAgIGxldCB0byA9IGNvcHlbaisrXSA9IGJbaSsrXSAtIGZyb207XG4gICAgICAgICAgICBjb3B5W2orK10gPSBiW2krK10gLSBzdGFydEk7XG4gICAgICAgICAgICBsZW4gPSBNYXRoLm1heChsZW4sIHRvKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFRyZWVCdWZmZXIoY29weSwgbGVuLCB0aGlzLnNldCk7XG4gICAgfVxufVxuZnVuY3Rpb24gY2hlY2tTaWRlKHNpZGUsIHBvcywgZnJvbSwgdG8pIHtcbiAgICBzd2l0Y2ggKHNpZGUpIHtcbiAgICAgICAgY2FzZSAtMiAvKiBTaWRlLkJlZm9yZSAqLzogcmV0dXJuIGZyb20gPCBwb3M7XG4gICAgICAgIGNhc2UgLTEgLyogU2lkZS5BdE9yQmVmb3JlICovOiByZXR1cm4gdG8gPj0gcG9zICYmIGZyb20gPCBwb3M7XG4gICAgICAgIGNhc2UgMCAvKiBTaWRlLkFyb3VuZCAqLzogcmV0dXJuIGZyb20gPCBwb3MgJiYgdG8gPiBwb3M7XG4gICAgICAgIGNhc2UgMSAvKiBTaWRlLkF0T3JBZnRlciAqLzogcmV0dXJuIGZyb20gPD0gcG9zICYmIHRvID4gcG9zO1xuICAgICAgICBjYXNlIDIgLyogU2lkZS5BZnRlciAqLzogcmV0dXJuIHRvID4gcG9zO1xuICAgICAgICBjYXNlIDQgLyogU2lkZS5Eb250Q2FyZSAqLzogcmV0dXJuIHRydWU7XG4gICAgfVxufVxuZnVuY3Rpb24gcmVzb2x2ZU5vZGUobm9kZSwgcG9zLCBzaWRlLCBvdmVybGF5cykge1xuICAgIHZhciBfYTtcbiAgICAvLyBNb3ZlIHVwIHRvIGEgbm9kZSB0aGF0IGFjdHVhbGx5IGhvbGRzIHRoZSBwb3NpdGlvbiwgaWYgcG9zc2libGVcbiAgICB3aGlsZSAobm9kZS5mcm9tID09IG5vZGUudG8gfHxcbiAgICAgICAgKHNpZGUgPCAxID8gbm9kZS5mcm9tID49IHBvcyA6IG5vZGUuZnJvbSA+IHBvcykgfHxcbiAgICAgICAgKHNpZGUgPiAtMSA/IG5vZGUudG8gPD0gcG9zIDogbm9kZS50byA8IHBvcykpIHtcbiAgICAgICAgbGV0IHBhcmVudCA9ICFvdmVybGF5cyAmJiBub2RlIGluc3RhbmNlb2YgVHJlZU5vZGUgJiYgbm9kZS5pbmRleCA8IDAgPyBudWxsIDogbm9kZS5wYXJlbnQ7XG4gICAgICAgIGlmICghcGFyZW50KVxuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIG5vZGUgPSBwYXJlbnQ7XG4gICAgfVxuICAgIGxldCBtb2RlID0gb3ZlcmxheXMgPyAwIDogZXhwb3J0cy5JdGVyTW9kZS5JZ25vcmVPdmVybGF5cztcbiAgICAvLyBNdXN0IGdvIHVwIG91dCBvZiBvdmVybGF5cyB3aGVuIHRob3NlIGRvIG5vdCBvdmVybGFwIHdpdGggcG9zXG4gICAgaWYgKG92ZXJsYXlzKVxuICAgICAgICBmb3IgKGxldCBzY2FuID0gbm9kZSwgcGFyZW50ID0gc2Nhbi5wYXJlbnQ7IHBhcmVudDsgc2NhbiA9IHBhcmVudCwgcGFyZW50ID0gc2Nhbi5wYXJlbnQpIHtcbiAgICAgICAgICAgIGlmIChzY2FuIGluc3RhbmNlb2YgVHJlZU5vZGUgJiYgc2Nhbi5pbmRleCA8IDAgJiYgKChfYSA9IHBhcmVudC5lbnRlcihwb3MsIHNpZGUsIG1vZGUpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZnJvbSkgIT0gc2Nhbi5mcm9tKVxuICAgICAgICAgICAgICAgIG5vZGUgPSBwYXJlbnQ7XG4gICAgICAgIH1cbiAgICBmb3IgKDs7KSB7XG4gICAgICAgIGxldCBpbm5lciA9IG5vZGUuZW50ZXIocG9zLCBzaWRlLCBtb2RlKTtcbiAgICAgICAgaWYgKCFpbm5lcilcbiAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICBub2RlID0gaW5uZXI7XG4gICAgfVxufVxuY2xhc3MgQmFzZU5vZGUge1xuICAgIGN1cnNvcihtb2RlID0gMCkgeyByZXR1cm4gbmV3IFRyZWVDdXJzb3IodGhpcywgbW9kZSk7IH1cbiAgICBnZXRDaGlsZCh0eXBlLCBiZWZvcmUgPSBudWxsLCBhZnRlciA9IG51bGwpIHtcbiAgICAgICAgbGV0IHIgPSBnZXRDaGlsZHJlbih0aGlzLCB0eXBlLCBiZWZvcmUsIGFmdGVyKTtcbiAgICAgICAgcmV0dXJuIHIubGVuZ3RoID8gclswXSA6IG51bGw7XG4gICAgfVxuICAgIGdldENoaWxkcmVuKHR5cGUsIGJlZm9yZSA9IG51bGwsIGFmdGVyID0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZ2V0Q2hpbGRyZW4odGhpcywgdHlwZSwgYmVmb3JlLCBhZnRlcik7XG4gICAgfVxuICAgIHJlc29sdmUocG9zLCBzaWRlID0gMCkge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZU5vZGUodGhpcywgcG9zLCBzaWRlLCBmYWxzZSk7XG4gICAgfVxuICAgIHJlc29sdmVJbm5lcihwb3MsIHNpZGUgPSAwKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlTm9kZSh0aGlzLCBwb3MsIHNpZGUsIHRydWUpO1xuICAgIH1cbiAgICBtYXRjaENvbnRleHQoY29udGV4dCkge1xuICAgICAgICByZXR1cm4gbWF0Y2hOb2RlQ29udGV4dCh0aGlzLCBjb250ZXh0KTtcbiAgICB9XG4gICAgZW50ZXJVbmZpbmlzaGVkTm9kZXNCZWZvcmUocG9zKSB7XG4gICAgICAgIGxldCBzY2FuID0gdGhpcy5jaGlsZEJlZm9yZShwb3MpLCBub2RlID0gdGhpcztcbiAgICAgICAgd2hpbGUgKHNjYW4pIHtcbiAgICAgICAgICAgIGxldCBsYXN0ID0gc2Nhbi5sYXN0Q2hpbGQ7XG4gICAgICAgICAgICBpZiAoIWxhc3QgfHwgbGFzdC50byAhPSBzY2FuLnRvKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgaWYgKGxhc3QudHlwZS5pc0Vycm9yICYmIGxhc3QuZnJvbSA9PSBsYXN0LnRvKSB7XG4gICAgICAgICAgICAgICAgbm9kZSA9IHNjYW47XG4gICAgICAgICAgICAgICAgc2NhbiA9IGxhc3QucHJldlNpYmxpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzY2FuID0gbGFzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gICAgZ2V0IG5vZGUoKSB7IHJldHVybiB0aGlzOyB9XG4gICAgZ2V0IG5leHQoKSB7IHJldHVybiB0aGlzLnBhcmVudDsgfVxufVxuY2xhc3MgVHJlZU5vZGUgZXh0ZW5kcyBCYXNlTm9kZSB7XG4gICAgY29uc3RydWN0b3IoX3RyZWUsIGZyb20sIFxuICAgIC8vIEluZGV4IGluIHBhcmVudCBub2RlLCBzZXQgdG8gLTEgaWYgdGhlIG5vZGUgaXMgbm90IGEgZGlyZWN0IGNoaWxkIG9mIF9wYXJlbnQubm9kZSAob3ZlcmxheSlcbiAgICBpbmRleCwgX3BhcmVudCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl90cmVlID0gX3RyZWU7XG4gICAgICAgIHRoaXMuZnJvbSA9IGZyb207XG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICAgICAgdGhpcy5fcGFyZW50ID0gX3BhcmVudDtcbiAgICB9XG4gICAgZ2V0IHR5cGUoKSB7IHJldHVybiB0aGlzLl90cmVlLnR5cGU7IH1cbiAgICBnZXQgbmFtZSgpIHsgcmV0dXJuIHRoaXMuX3RyZWUudHlwZS5uYW1lOyB9XG4gICAgZ2V0IHRvKCkgeyByZXR1cm4gdGhpcy5mcm9tICsgdGhpcy5fdHJlZS5sZW5ndGg7IH1cbiAgICBuZXh0Q2hpbGQoaSwgZGlyLCBwb3MsIHNpZGUsIG1vZGUgPSAwKSB7XG4gICAgICAgIGZvciAobGV0IHBhcmVudCA9IHRoaXM7Oykge1xuICAgICAgICAgICAgZm9yIChsZXQgeyBjaGlsZHJlbiwgcG9zaXRpb25zIH0gPSBwYXJlbnQuX3RyZWUsIGUgPSBkaXIgPiAwID8gY2hpbGRyZW4ubGVuZ3RoIDogLTE7IGkgIT0gZTsgaSArPSBkaXIpIHtcbiAgICAgICAgICAgICAgICBsZXQgbmV4dCA9IGNoaWxkcmVuW2ldLCBzdGFydCA9IHBvc2l0aW9uc1tpXSArIHBhcmVudC5mcm9tO1xuICAgICAgICAgICAgICAgIGlmICghY2hlY2tTaWRlKHNpZGUsIHBvcywgc3RhcnQsIHN0YXJ0ICsgbmV4dC5sZW5ndGgpKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBpZiAobmV4dCBpbnN0YW5jZW9mIFRyZWVCdWZmZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1vZGUgJiBleHBvcnRzLkl0ZXJNb2RlLkV4Y2x1ZGVCdWZmZXJzKVxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IG5leHQuZmluZENoaWxkKDAsIG5leHQuYnVmZmVyLmxlbmd0aCwgZGlyLCBwb3MgLSBzdGFydCwgc2lkZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBCdWZmZXJOb2RlKG5ldyBCdWZmZXJDb250ZXh0KHBhcmVudCwgbmV4dCwgaSwgc3RhcnQpLCBudWxsLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChtb2RlICYgZXhwb3J0cy5JdGVyTW9kZS5JbmNsdWRlQW5vbnltb3VzKSB8fCAoIW5leHQudHlwZS5pc0Fub255bW91cyB8fCBoYXNDaGlsZChuZXh0KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1vdW50ZWQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKG1vZGUgJiBleHBvcnRzLkl0ZXJNb2RlLklnbm9yZU1vdW50cykgJiYgKG1vdW50ZWQgPSBNb3VudGVkVHJlZS5nZXQobmV4dCkpICYmICFtb3VudGVkLm92ZXJsYXkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFRyZWVOb2RlKG1vdW50ZWQudHJlZSwgc3RhcnQsIGksIHBhcmVudCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpbm5lciA9IG5ldyBUcmVlTm9kZShuZXh0LCBzdGFydCwgaSwgcGFyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChtb2RlICYgZXhwb3J0cy5JdGVyTW9kZS5JbmNsdWRlQW5vbnltb3VzKSB8fCAhaW5uZXIudHlwZS5pc0Fub255bW91cyA/IGlubmVyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGlubmVyLm5leHRDaGlsZChkaXIgPCAwID8gbmV4dC5jaGlsZHJlbi5sZW5ndGggLSAxIDogMCwgZGlyLCBwb3MsIHNpZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgobW9kZSAmIGV4cG9ydHMuSXRlck1vZGUuSW5jbHVkZUFub255bW91cykgfHwgIXBhcmVudC50eXBlLmlzQW5vbnltb3VzKVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgaWYgKHBhcmVudC5pbmRleCA+PSAwKVxuICAgICAgICAgICAgICAgIGkgPSBwYXJlbnQuaW5kZXggKyBkaXI7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgaSA9IGRpciA8IDAgPyAtMSA6IHBhcmVudC5fcGFyZW50Ll90cmVlLmNoaWxkcmVuLmxlbmd0aDtcbiAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudC5fcGFyZW50O1xuICAgICAgICAgICAgaWYgKCFwYXJlbnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGZpcnN0Q2hpbGQoKSB7IHJldHVybiB0aGlzLm5leHRDaGlsZCgwLCAxLCAwLCA0IC8qIFNpZGUuRG9udENhcmUgKi8pOyB9XG4gICAgZ2V0IGxhc3RDaGlsZCgpIHsgcmV0dXJuIHRoaXMubmV4dENoaWxkKHRoaXMuX3RyZWUuY2hpbGRyZW4ubGVuZ3RoIC0gMSwgLTEsIDAsIDQgLyogU2lkZS5Eb250Q2FyZSAqLyk7IH1cbiAgICBjaGlsZEFmdGVyKHBvcykgeyByZXR1cm4gdGhpcy5uZXh0Q2hpbGQoMCwgMSwgcG9zLCAyIC8qIFNpZGUuQWZ0ZXIgKi8pOyB9XG4gICAgY2hpbGRCZWZvcmUocG9zKSB7IHJldHVybiB0aGlzLm5leHRDaGlsZCh0aGlzLl90cmVlLmNoaWxkcmVuLmxlbmd0aCAtIDEsIC0xLCBwb3MsIC0yIC8qIFNpZGUuQmVmb3JlICovKTsgfVxuICAgIGVudGVyKHBvcywgc2lkZSwgbW9kZSA9IDApIHtcbiAgICAgICAgbGV0IG1vdW50ZWQ7XG4gICAgICAgIGlmICghKG1vZGUgJiBleHBvcnRzLkl0ZXJNb2RlLklnbm9yZU92ZXJsYXlzKSAmJiAobW91bnRlZCA9IE1vdW50ZWRUcmVlLmdldCh0aGlzLl90cmVlKSkgJiYgbW91bnRlZC5vdmVybGF5KSB7XG4gICAgICAgICAgICBsZXQgclBvcyA9IHBvcyAtIHRoaXMuZnJvbTtcbiAgICAgICAgICAgIGZvciAobGV0IHsgZnJvbSwgdG8gfSBvZiBtb3VudGVkLm92ZXJsYXkpIHtcbiAgICAgICAgICAgICAgICBpZiAoKHNpZGUgPiAwID8gZnJvbSA8PSByUG9zIDogZnJvbSA8IHJQb3MpICYmXG4gICAgICAgICAgICAgICAgICAgIChzaWRlIDwgMCA/IHRvID49IHJQb3MgOiB0byA+IHJQb3MpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFRyZWVOb2RlKG1vdW50ZWQudHJlZSwgbW91bnRlZC5vdmVybGF5WzBdLmZyb20gKyB0aGlzLmZyb20sIC0xLCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5uZXh0Q2hpbGQoMCwgMSwgcG9zLCBzaWRlLCBtb2RlKTtcbiAgICB9XG4gICAgbmV4dFNpZ25pZmljYW50UGFyZW50KCkge1xuICAgICAgICBsZXQgdmFsID0gdGhpcztcbiAgICAgICAgd2hpbGUgKHZhbC50eXBlLmlzQW5vbnltb3VzICYmIHZhbC5fcGFyZW50KVxuICAgICAgICAgICAgdmFsID0gdmFsLl9wYXJlbnQ7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICAgIGdldCBwYXJlbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJlbnQgPyB0aGlzLl9wYXJlbnQubmV4dFNpZ25pZmljYW50UGFyZW50KCkgOiBudWxsO1xuICAgIH1cbiAgICBnZXQgbmV4dFNpYmxpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJlbnQgJiYgdGhpcy5pbmRleCA+PSAwID8gdGhpcy5fcGFyZW50Lm5leHRDaGlsZCh0aGlzLmluZGV4ICsgMSwgMSwgMCwgNCAvKiBTaWRlLkRvbnRDYXJlICovKSA6IG51bGw7XG4gICAgfVxuICAgIGdldCBwcmV2U2libGluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcmVudCAmJiB0aGlzLmluZGV4ID49IDAgPyB0aGlzLl9wYXJlbnQubmV4dENoaWxkKHRoaXMuaW5kZXggLSAxLCAtMSwgMCwgNCAvKiBTaWRlLkRvbnRDYXJlICovKSA6IG51bGw7XG4gICAgfVxuICAgIGdldCB0cmVlKCkgeyByZXR1cm4gdGhpcy5fdHJlZTsgfVxuICAgIHRvVHJlZSgpIHsgcmV0dXJuIHRoaXMuX3RyZWU7IH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHRvU3RyaW5nKCkgeyByZXR1cm4gdGhpcy5fdHJlZS50b1N0cmluZygpOyB9XG59XG5mdW5jdGlvbiBnZXRDaGlsZHJlbihub2RlLCB0eXBlLCBiZWZvcmUsIGFmdGVyKSB7XG4gICAgbGV0IGN1ciA9IG5vZGUuY3Vyc29yKCksIHJlc3VsdCA9IFtdO1xuICAgIGlmICghY3VyLmZpcnN0Q2hpbGQoKSlcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICBpZiAoYmVmb3JlICE9IG51bGwpXG4gICAgICAgIGZvciAobGV0IGZvdW5kID0gZmFsc2U7ICFmb3VuZDspIHtcbiAgICAgICAgICAgIGZvdW5kID0gY3VyLnR5cGUuaXMoYmVmb3JlKTtcbiAgICAgICAgICAgIGlmICghY3VyLm5leHRTaWJsaW5nKCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgIGZvciAoOzspIHtcbiAgICAgICAgaWYgKGFmdGVyICE9IG51bGwgJiYgY3VyLnR5cGUuaXMoYWZ0ZXIpKVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgaWYgKGN1ci50eXBlLmlzKHR5cGUpKVxuICAgICAgICAgICAgcmVzdWx0LnB1c2goY3VyLm5vZGUpO1xuICAgICAgICBpZiAoIWN1ci5uZXh0U2libGluZygpKVxuICAgICAgICAgICAgcmV0dXJuIGFmdGVyID09IG51bGwgPyByZXN1bHQgOiBbXTtcbiAgICB9XG59XG5mdW5jdGlvbiBtYXRjaE5vZGVDb250ZXh0KG5vZGUsIGNvbnRleHQsIGkgPSBjb250ZXh0Lmxlbmd0aCAtIDEpIHtcbiAgICBmb3IgKGxldCBwID0gbm9kZS5wYXJlbnQ7IGkgPj0gMDsgcCA9IHAucGFyZW50KSB7XG4gICAgICAgIGlmICghcClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKCFwLnR5cGUuaXNBbm9ueW1vdXMpIHtcbiAgICAgICAgICAgIGlmIChjb250ZXh0W2ldICYmIGNvbnRleHRbaV0gIT0gcC5uYW1lKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGktLTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmNsYXNzIEJ1ZmZlckNvbnRleHQge1xuICAgIGNvbnN0cnVjdG9yKHBhcmVudCwgYnVmZmVyLCBpbmRleCwgc3RhcnQpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICB9XG59XG5jbGFzcyBCdWZmZXJOb2RlIGV4dGVuZHMgQmFzZU5vZGUge1xuICAgIGdldCBuYW1lKCkgeyByZXR1cm4gdGhpcy50eXBlLm5hbWU7IH1cbiAgICBnZXQgZnJvbSgpIHsgcmV0dXJuIHRoaXMuY29udGV4dC5zdGFydCArIHRoaXMuY29udGV4dC5idWZmZXIuYnVmZmVyW3RoaXMuaW5kZXggKyAxXTsgfVxuICAgIGdldCB0bygpIHsgcmV0dXJuIHRoaXMuY29udGV4dC5zdGFydCArIHRoaXMuY29udGV4dC5idWZmZXIuYnVmZmVyW3RoaXMuaW5kZXggKyAyXTsgfVxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQsIF9wYXJlbnQsIGluZGV4KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIHRoaXMuX3BhcmVudCA9IF9wYXJlbnQ7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICAgICAgdGhpcy50eXBlID0gY29udGV4dC5idWZmZXIuc2V0LnR5cGVzW2NvbnRleHQuYnVmZmVyLmJ1ZmZlcltpbmRleF1dO1xuICAgIH1cbiAgICBjaGlsZChkaXIsIHBvcywgc2lkZSkge1xuICAgICAgICBsZXQgeyBidWZmZXIgfSA9IHRoaXMuY29udGV4dDtcbiAgICAgICAgbGV0IGluZGV4ID0gYnVmZmVyLmZpbmRDaGlsZCh0aGlzLmluZGV4ICsgNCwgYnVmZmVyLmJ1ZmZlclt0aGlzLmluZGV4ICsgM10sIGRpciwgcG9zIC0gdGhpcy5jb250ZXh0LnN0YXJ0LCBzaWRlKTtcbiAgICAgICAgcmV0dXJuIGluZGV4IDwgMCA/IG51bGwgOiBuZXcgQnVmZmVyTm9kZSh0aGlzLmNvbnRleHQsIHRoaXMsIGluZGV4KTtcbiAgICB9XG4gICAgZ2V0IGZpcnN0Q2hpbGQoKSB7IHJldHVybiB0aGlzLmNoaWxkKDEsIDAsIDQgLyogU2lkZS5Eb250Q2FyZSAqLyk7IH1cbiAgICBnZXQgbGFzdENoaWxkKCkgeyByZXR1cm4gdGhpcy5jaGlsZCgtMSwgMCwgNCAvKiBTaWRlLkRvbnRDYXJlICovKTsgfVxuICAgIGNoaWxkQWZ0ZXIocG9zKSB7IHJldHVybiB0aGlzLmNoaWxkKDEsIHBvcywgMiAvKiBTaWRlLkFmdGVyICovKTsgfVxuICAgIGNoaWxkQmVmb3JlKHBvcykgeyByZXR1cm4gdGhpcy5jaGlsZCgtMSwgcG9zLCAtMiAvKiBTaWRlLkJlZm9yZSAqLyk7IH1cbiAgICBlbnRlcihwb3MsIHNpZGUsIG1vZGUgPSAwKSB7XG4gICAgICAgIGlmIChtb2RlICYgZXhwb3J0cy5JdGVyTW9kZS5FeGNsdWRlQnVmZmVycylcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBsZXQgeyBidWZmZXIgfSA9IHRoaXMuY29udGV4dDtcbiAgICAgICAgbGV0IGluZGV4ID0gYnVmZmVyLmZpbmRDaGlsZCh0aGlzLmluZGV4ICsgNCwgYnVmZmVyLmJ1ZmZlclt0aGlzLmluZGV4ICsgM10sIHNpZGUgPiAwID8gMSA6IC0xLCBwb3MgLSB0aGlzLmNvbnRleHQuc3RhcnQsIHNpZGUpO1xuICAgICAgICByZXR1cm4gaW5kZXggPCAwID8gbnVsbCA6IG5ldyBCdWZmZXJOb2RlKHRoaXMuY29udGV4dCwgdGhpcywgaW5kZXgpO1xuICAgIH1cbiAgICBnZXQgcGFyZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFyZW50IHx8IHRoaXMuY29udGV4dC5wYXJlbnQubmV4dFNpZ25pZmljYW50UGFyZW50KCk7XG4gICAgfVxuICAgIGV4dGVybmFsU2libGluZyhkaXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcmVudCA/IG51bGwgOiB0aGlzLmNvbnRleHQucGFyZW50Lm5leHRDaGlsZCh0aGlzLmNvbnRleHQuaW5kZXggKyBkaXIsIGRpciwgMCwgNCAvKiBTaWRlLkRvbnRDYXJlICovKTtcbiAgICB9XG4gICAgZ2V0IG5leHRTaWJsaW5nKCkge1xuICAgICAgICBsZXQgeyBidWZmZXIgfSA9IHRoaXMuY29udGV4dDtcbiAgICAgICAgbGV0IGFmdGVyID0gYnVmZmVyLmJ1ZmZlclt0aGlzLmluZGV4ICsgM107XG4gICAgICAgIGlmIChhZnRlciA8ICh0aGlzLl9wYXJlbnQgPyBidWZmZXIuYnVmZmVyW3RoaXMuX3BhcmVudC5pbmRleCArIDNdIDogYnVmZmVyLmJ1ZmZlci5sZW5ndGgpKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBCdWZmZXJOb2RlKHRoaXMuY29udGV4dCwgdGhpcy5fcGFyZW50LCBhZnRlcik7XG4gICAgICAgIHJldHVybiB0aGlzLmV4dGVybmFsU2libGluZygxKTtcbiAgICB9XG4gICAgZ2V0IHByZXZTaWJsaW5nKCkge1xuICAgICAgICBsZXQgeyBidWZmZXIgfSA9IHRoaXMuY29udGV4dDtcbiAgICAgICAgbGV0IHBhcmVudFN0YXJ0ID0gdGhpcy5fcGFyZW50ID8gdGhpcy5fcGFyZW50LmluZGV4ICsgNCA6IDA7XG4gICAgICAgIGlmICh0aGlzLmluZGV4ID09IHBhcmVudFN0YXJ0KVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXh0ZXJuYWxTaWJsaW5nKC0xKTtcbiAgICAgICAgcmV0dXJuIG5ldyBCdWZmZXJOb2RlKHRoaXMuY29udGV4dCwgdGhpcy5fcGFyZW50LCBidWZmZXIuZmluZENoaWxkKHBhcmVudFN0YXJ0LCB0aGlzLmluZGV4LCAtMSwgMCwgNCAvKiBTaWRlLkRvbnRDYXJlICovKSk7XG4gICAgfVxuICAgIGdldCB0cmVlKCkgeyByZXR1cm4gbnVsbDsgfVxuICAgIHRvVHJlZSgpIHtcbiAgICAgICAgbGV0IGNoaWxkcmVuID0gW10sIHBvc2l0aW9ucyA9IFtdO1xuICAgICAgICBsZXQgeyBidWZmZXIgfSA9IHRoaXMuY29udGV4dDtcbiAgICAgICAgbGV0IHN0YXJ0SSA9IHRoaXMuaW5kZXggKyA0LCBlbmRJID0gYnVmZmVyLmJ1ZmZlclt0aGlzLmluZGV4ICsgM107XG4gICAgICAgIGlmIChlbmRJID4gc3RhcnRJKSB7XG4gICAgICAgICAgICBsZXQgZnJvbSA9IGJ1ZmZlci5idWZmZXJbdGhpcy5pbmRleCArIDFdO1xuICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChidWZmZXIuc2xpY2Uoc3RhcnRJLCBlbmRJLCBmcm9tKSk7XG4gICAgICAgICAgICBwb3NpdGlvbnMucHVzaCgwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFRyZWUodGhpcy50eXBlLCBjaGlsZHJlbiwgcG9zaXRpb25zLCB0aGlzLnRvIC0gdGhpcy5mcm9tKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICB0b1N0cmluZygpIHsgcmV0dXJuIHRoaXMuY29udGV4dC5idWZmZXIuY2hpbGRTdHJpbmcodGhpcy5pbmRleCk7IH1cbn1cbmZ1bmN0aW9uIGl0ZXJTdGFjayhoZWFkcykge1xuICAgIGlmICghaGVhZHMubGVuZ3RoKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICBsZXQgcGljayA9IDAsIHBpY2tlZCA9IGhlYWRzWzBdO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgaGVhZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IG5vZGUgPSBoZWFkc1tpXTtcbiAgICAgICAgaWYgKG5vZGUuZnJvbSA+IHBpY2tlZC5mcm9tIHx8IG5vZGUudG8gPCBwaWNrZWQudG8pIHtcbiAgICAgICAgICAgIHBpY2tlZCA9IG5vZGU7XG4gICAgICAgICAgICBwaWNrID0gaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgbmV4dCA9IHBpY2tlZCBpbnN0YW5jZW9mIFRyZWVOb2RlICYmIHBpY2tlZC5pbmRleCA8IDAgPyBudWxsIDogcGlja2VkLnBhcmVudDtcbiAgICBsZXQgbmV3SGVhZHMgPSBoZWFkcy5zbGljZSgpO1xuICAgIGlmIChuZXh0KVxuICAgICAgICBuZXdIZWFkc1twaWNrXSA9IG5leHQ7XG4gICAgZWxzZVxuICAgICAgICBuZXdIZWFkcy5zcGxpY2UocGljaywgMSk7XG4gICAgcmV0dXJuIG5ldyBTdGFja0l0ZXJhdG9yKG5ld0hlYWRzLCBwaWNrZWQpO1xufVxuY2xhc3MgU3RhY2tJdGVyYXRvciB7XG4gICAgY29uc3RydWN0b3IoaGVhZHMsIG5vZGUpIHtcbiAgICAgICAgdGhpcy5oZWFkcyA9IGhlYWRzO1xuICAgICAgICB0aGlzLm5vZGUgPSBub2RlO1xuICAgIH1cbiAgICBnZXQgbmV4dCgpIHsgcmV0dXJuIGl0ZXJTdGFjayh0aGlzLmhlYWRzKTsgfVxufVxuZnVuY3Rpb24gc3RhY2tJdGVyYXRvcih0cmVlLCBwb3MsIHNpZGUpIHtcbiAgICBsZXQgaW5uZXIgPSB0cmVlLnJlc29sdmVJbm5lcihwb3MsIHNpZGUpLCBsYXllcnMgPSBudWxsO1xuICAgIGZvciAobGV0IHNjYW4gPSBpbm5lciBpbnN0YW5jZW9mIFRyZWVOb2RlID8gaW5uZXIgOiBpbm5lci5jb250ZXh0LnBhcmVudDsgc2Nhbjsgc2NhbiA9IHNjYW4ucGFyZW50KSB7XG4gICAgICAgIGlmIChzY2FuLmluZGV4IDwgMCkgeyAvLyBUaGlzIGlzIGFuIG92ZXJsYXkgcm9vdFxuICAgICAgICAgICAgbGV0IHBhcmVudCA9IHNjYW4ucGFyZW50O1xuICAgICAgICAgICAgKGxheWVycyB8fCAobGF5ZXJzID0gW2lubmVyXSkpLnB1c2gocGFyZW50LnJlc29sdmUocG9zLCBzaWRlKSk7XG4gICAgICAgICAgICBzY2FuID0gcGFyZW50O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGV0IG1vdW50ID0gTW91bnRlZFRyZWUuZ2V0KHNjYW4udHJlZSk7XG4gICAgICAgICAgICAvLyBSZWxldmFudCBvdmVybGF5IGJyYW5jaGluZyBvZmZcbiAgICAgICAgICAgIGlmIChtb3VudCAmJiBtb3VudC5vdmVybGF5ICYmIG1vdW50Lm92ZXJsYXlbMF0uZnJvbSA8PSBwb3MgJiYgbW91bnQub3ZlcmxheVttb3VudC5vdmVybGF5Lmxlbmd0aCAtIDFdLnRvID49IHBvcykge1xuICAgICAgICAgICAgICAgIGxldCByb290ID0gbmV3IFRyZWVOb2RlKG1vdW50LnRyZWUsIG1vdW50Lm92ZXJsYXlbMF0uZnJvbSArIHNjYW4uZnJvbSwgLTEsIHNjYW4pO1xuICAgICAgICAgICAgICAgIChsYXllcnMgfHwgKGxheWVycyA9IFtpbm5lcl0pKS5wdXNoKHJlc29sdmVOb2RlKHJvb3QsIHBvcywgc2lkZSwgZmFsc2UpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGF5ZXJzID8gaXRlclN0YWNrKGxheWVycykgOiBpbm5lcjtcbn1cbi8qKlxuQSB0cmVlIGN1cnNvciBvYmplY3QgZm9jdXNlcyBvbiBhIGdpdmVuIG5vZGUgaW4gYSBzeW50YXggdHJlZSwgYW5kXG5hbGxvd3MgeW91IHRvIG1vdmUgdG8gYWRqYWNlbnQgbm9kZXMuXG4qL1xuY2xhc3MgVHJlZUN1cnNvciB7XG4gICAgLyoqXG4gICAgU2hvcnRoYW5kIGZvciBgLnR5cGUubmFtZWAuXG4gICAgKi9cbiAgICBnZXQgbmFtZSgpIHsgcmV0dXJuIHRoaXMudHlwZS5uYW1lOyB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihub2RlLCBcbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIG1vZGUgPSAwKSB7XG4gICAgICAgIHRoaXMubW9kZSA9IG1vZGU7XG4gICAgICAgIC8qKlxuICAgICAgICBAaW50ZXJuYWxcbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy5idWZmZXIgPSBudWxsO1xuICAgICAgICB0aGlzLnN0YWNrID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICBAaW50ZXJuYWxcbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pbmRleCA9IDA7XG4gICAgICAgIHRoaXMuYnVmZmVyTm9kZSA9IG51bGw7XG4gICAgICAgIGlmIChub2RlIGluc3RhbmNlb2YgVHJlZU5vZGUpIHtcbiAgICAgICAgICAgIHRoaXMueWllbGROb2RlKG5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fdHJlZSA9IG5vZGUuY29udGV4dC5wYXJlbnQ7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IG5vZGUuY29udGV4dDtcbiAgICAgICAgICAgIGZvciAobGV0IG4gPSBub2RlLl9wYXJlbnQ7IG47IG4gPSBuLl9wYXJlbnQpXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFjay51bnNoaWZ0KG4uaW5kZXgpO1xuICAgICAgICAgICAgdGhpcy5idWZmZXJOb2RlID0gbm9kZTtcbiAgICAgICAgICAgIHRoaXMueWllbGRCdWYobm9kZS5pbmRleCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgeWllbGROb2RlKG5vZGUpIHtcbiAgICAgICAgaWYgKCFub2RlKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB0aGlzLl90cmVlID0gbm9kZTtcbiAgICAgICAgdGhpcy50eXBlID0gbm9kZS50eXBlO1xuICAgICAgICB0aGlzLmZyb20gPSBub2RlLmZyb207XG4gICAgICAgIHRoaXMudG8gPSBub2RlLnRvO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgeWllbGRCdWYoaW5kZXgsIHR5cGUpIHtcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgICAgICBsZXQgeyBzdGFydCwgYnVmZmVyIH0gPSB0aGlzLmJ1ZmZlcjtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZSB8fCBidWZmZXIuc2V0LnR5cGVzW2J1ZmZlci5idWZmZXJbaW5kZXhdXTtcbiAgICAgICAgdGhpcy5mcm9tID0gc3RhcnQgKyBidWZmZXIuYnVmZmVyW2luZGV4ICsgMV07XG4gICAgICAgIHRoaXMudG8gPSBzdGFydCArIGJ1ZmZlci5idWZmZXJbaW5kZXggKyAyXTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgeWllbGQobm9kZSkge1xuICAgICAgICBpZiAoIW5vZGUpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChub2RlIGluc3RhbmNlb2YgVHJlZU5vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnlpZWxkTm9kZShub2RlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJ1ZmZlciA9IG5vZGUuY29udGV4dDtcbiAgICAgICAgcmV0dXJuIHRoaXMueWllbGRCdWYobm9kZS5pbmRleCwgbm9kZS50eXBlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyID8gdGhpcy5idWZmZXIuYnVmZmVyLmNoaWxkU3RyaW5nKHRoaXMuaW5kZXgpIDogdGhpcy5fdHJlZS50b1N0cmluZygpO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGVudGVyQ2hpbGQoZGlyLCBwb3MsIHNpZGUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmJ1ZmZlcilcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnlpZWxkKHRoaXMuX3RyZWUubmV4dENoaWxkKGRpciA8IDAgPyB0aGlzLl90cmVlLl90cmVlLmNoaWxkcmVuLmxlbmd0aCAtIDEgOiAwLCBkaXIsIHBvcywgc2lkZSwgdGhpcy5tb2RlKSk7XG4gICAgICAgIGxldCB7IGJ1ZmZlciB9ID0gdGhpcy5idWZmZXI7XG4gICAgICAgIGxldCBpbmRleCA9IGJ1ZmZlci5maW5kQ2hpbGQodGhpcy5pbmRleCArIDQsIGJ1ZmZlci5idWZmZXJbdGhpcy5pbmRleCArIDNdLCBkaXIsIHBvcyAtIHRoaXMuYnVmZmVyLnN0YXJ0LCBzaWRlKTtcbiAgICAgICAgaWYgKGluZGV4IDwgMClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgdGhpcy5zdGFjay5wdXNoKHRoaXMuaW5kZXgpO1xuICAgICAgICByZXR1cm4gdGhpcy55aWVsZEJ1ZihpbmRleCk7XG4gICAgfVxuICAgIC8qKlxuICAgIE1vdmUgdGhlIGN1cnNvciB0byB0aGlzIG5vZGUncyBmaXJzdCBjaGlsZC4gV2hlbiB0aGlzIHJldHVybnNcbiAgICBmYWxzZSwgdGhlIG5vZGUgaGFzIG5vIGNoaWxkLCBhbmQgdGhlIGN1cnNvciBoYXMgbm90IGJlZW4gbW92ZWQuXG4gICAgKi9cbiAgICBmaXJzdENoaWxkKCkgeyByZXR1cm4gdGhpcy5lbnRlckNoaWxkKDEsIDAsIDQgLyogU2lkZS5Eb250Q2FyZSAqLyk7IH1cbiAgICAvKipcbiAgICBNb3ZlIHRoZSBjdXJzb3IgdG8gdGhpcyBub2RlJ3MgbGFzdCBjaGlsZC5cbiAgICAqL1xuICAgIGxhc3RDaGlsZCgpIHsgcmV0dXJuIHRoaXMuZW50ZXJDaGlsZCgtMSwgMCwgNCAvKiBTaWRlLkRvbnRDYXJlICovKTsgfVxuICAgIC8qKlxuICAgIE1vdmUgdGhlIGN1cnNvciB0byB0aGUgZmlyc3QgY2hpbGQgdGhhdCBlbmRzIGFmdGVyIGBwb3NgLlxuICAgICovXG4gICAgY2hpbGRBZnRlcihwb3MpIHsgcmV0dXJuIHRoaXMuZW50ZXJDaGlsZCgxLCBwb3MsIDIgLyogU2lkZS5BZnRlciAqLyk7IH1cbiAgICAvKipcbiAgICBNb3ZlIHRvIHRoZSBsYXN0IGNoaWxkIHRoYXQgc3RhcnRzIGJlZm9yZSBgcG9zYC5cbiAgICAqL1xuICAgIGNoaWxkQmVmb3JlKHBvcykgeyByZXR1cm4gdGhpcy5lbnRlckNoaWxkKC0xLCBwb3MsIC0yIC8qIFNpZGUuQmVmb3JlICovKTsgfVxuICAgIC8qKlxuICAgIE1vdmUgdGhlIGN1cnNvciB0byB0aGUgY2hpbGQgYXJvdW5kIGBwb3NgLiBJZiBzaWRlIGlzIC0xIHRoZVxuICAgIGNoaWxkIG1heSBlbmQgYXQgdGhhdCBwb3NpdGlvbiwgd2hlbiAxIGl0IG1heSBzdGFydCB0aGVyZS4gVGhpc1xuICAgIHdpbGwgYWxzbyBlbnRlciBbb3ZlcmxhaWRdKCNjb21tb24uTW91bnRlZFRyZWUub3ZlcmxheSlcbiAgICBbbW91bnRlZF0oI2NvbW1vbi5Ob2RlUHJvcF5tb3VudGVkKSB0cmVlcyB1bmxlc3MgYG92ZXJsYXlzYCBpc1xuICAgIHNldCB0byBmYWxzZS5cbiAgICAqL1xuICAgIGVudGVyKHBvcywgc2lkZSwgbW9kZSA9IHRoaXMubW9kZSkge1xuICAgICAgICBpZiAoIXRoaXMuYnVmZmVyKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMueWllbGQodGhpcy5fdHJlZS5lbnRlcihwb3MsIHNpZGUsIG1vZGUpKTtcbiAgICAgICAgcmV0dXJuIG1vZGUgJiBleHBvcnRzLkl0ZXJNb2RlLkV4Y2x1ZGVCdWZmZXJzID8gZmFsc2UgOiB0aGlzLmVudGVyQ2hpbGQoMSwgcG9zLCBzaWRlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgTW92ZSB0byB0aGUgbm9kZSdzIHBhcmVudCBub2RlLCBpZiB0aGlzIGlzbid0IHRoZSB0b3Agbm9kZS5cbiAgICAqL1xuICAgIHBhcmVudCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmJ1ZmZlcilcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnlpZWxkTm9kZSgodGhpcy5tb2RlICYgZXhwb3J0cy5JdGVyTW9kZS5JbmNsdWRlQW5vbnltb3VzKSA/IHRoaXMuX3RyZWUuX3BhcmVudCA6IHRoaXMuX3RyZWUucGFyZW50KTtcbiAgICAgICAgaWYgKHRoaXMuc3RhY2subGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMueWllbGRCdWYodGhpcy5zdGFjay5wb3AoKSk7XG4gICAgICAgIGxldCBwYXJlbnQgPSAodGhpcy5tb2RlICYgZXhwb3J0cy5JdGVyTW9kZS5JbmNsdWRlQW5vbnltb3VzKSA/IHRoaXMuYnVmZmVyLnBhcmVudCA6IHRoaXMuYnVmZmVyLnBhcmVudC5uZXh0U2lnbmlmaWNhbnRQYXJlbnQoKTtcbiAgICAgICAgdGhpcy5idWZmZXIgPSBudWxsO1xuICAgICAgICByZXR1cm4gdGhpcy55aWVsZE5vZGUocGFyZW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBzaWJsaW5nKGRpcikge1xuICAgICAgICBpZiAoIXRoaXMuYnVmZmVyKVxuICAgICAgICAgICAgcmV0dXJuICF0aGlzLl90cmVlLl9wYXJlbnQgPyBmYWxzZVxuICAgICAgICAgICAgICAgIDogdGhpcy55aWVsZCh0aGlzLl90cmVlLmluZGV4IDwgMCA/IG51bGxcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLl90cmVlLl9wYXJlbnQubmV4dENoaWxkKHRoaXMuX3RyZWUuaW5kZXggKyBkaXIsIGRpciwgMCwgNCAvKiBTaWRlLkRvbnRDYXJlICovLCB0aGlzLm1vZGUpKTtcbiAgICAgICAgbGV0IHsgYnVmZmVyIH0gPSB0aGlzLmJ1ZmZlciwgZCA9IHRoaXMuc3RhY2subGVuZ3RoIC0gMTtcbiAgICAgICAgaWYgKGRpciA8IDApIHtcbiAgICAgICAgICAgIGxldCBwYXJlbnRTdGFydCA9IGQgPCAwID8gMCA6IHRoaXMuc3RhY2tbZF0gKyA0O1xuICAgICAgICAgICAgaWYgKHRoaXMuaW5kZXggIT0gcGFyZW50U3RhcnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMueWllbGRCdWYoYnVmZmVyLmZpbmRDaGlsZChwYXJlbnRTdGFydCwgdGhpcy5pbmRleCwgLTEsIDAsIDQgLyogU2lkZS5Eb250Q2FyZSAqLykpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGV0IGFmdGVyID0gYnVmZmVyLmJ1ZmZlclt0aGlzLmluZGV4ICsgM107XG4gICAgICAgICAgICBpZiAoYWZ0ZXIgPCAoZCA8IDAgPyBidWZmZXIuYnVmZmVyLmxlbmd0aCA6IGJ1ZmZlci5idWZmZXJbdGhpcy5zdGFja1tkXSArIDNdKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy55aWVsZEJ1ZihhZnRlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGQgPCAwID8gdGhpcy55aWVsZCh0aGlzLmJ1ZmZlci5wYXJlbnQubmV4dENoaWxkKHRoaXMuYnVmZmVyLmluZGV4ICsgZGlyLCBkaXIsIDAsIDQgLyogU2lkZS5Eb250Q2FyZSAqLywgdGhpcy5tb2RlKSkgOiBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgTW92ZSB0byB0aGlzIG5vZGUncyBuZXh0IHNpYmxpbmcsIGlmIGFueS5cbiAgICAqL1xuICAgIG5leHRTaWJsaW5nKCkgeyByZXR1cm4gdGhpcy5zaWJsaW5nKDEpOyB9XG4gICAgLyoqXG4gICAgTW92ZSB0byB0aGlzIG5vZGUncyBwcmV2aW91cyBzaWJsaW5nLCBpZiBhbnkuXG4gICAgKi9cbiAgICBwcmV2U2libGluZygpIHsgcmV0dXJuIHRoaXMuc2libGluZygtMSk7IH1cbiAgICBhdExhc3ROb2RlKGRpcikge1xuICAgICAgICBsZXQgaW5kZXgsIHBhcmVudCwgeyBidWZmZXIgfSA9IHRoaXM7XG4gICAgICAgIGlmIChidWZmZXIpIHtcbiAgICAgICAgICAgIGlmIChkaXIgPiAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5kZXggPCBidWZmZXIuYnVmZmVyLmJ1ZmZlci5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5pbmRleDsgaSsrKVxuICAgICAgICAgICAgICAgICAgICBpZiAoYnVmZmVyLmJ1ZmZlci5idWZmZXJbaSArIDNdIDwgdGhpcy5pbmRleClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICh7IGluZGV4LCBwYXJlbnQgfSA9IGJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAoeyBpbmRleCwgX3BhcmVudDogcGFyZW50IH0gPSB0aGlzLl90cmVlKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKDsgcGFyZW50OyB7IGluZGV4LCBfcGFyZW50OiBwYXJlbnQgfSA9IHBhcmVudCkge1xuICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IGluZGV4ICsgZGlyLCBlID0gZGlyIDwgMCA/IC0xIDogcGFyZW50Ll90cmVlLmNoaWxkcmVuLmxlbmd0aDsgaSAhPSBlOyBpICs9IGRpcikge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY2hpbGQgPSBwYXJlbnQuX3RyZWUuY2hpbGRyZW5baV07XG4gICAgICAgICAgICAgICAgICAgIGlmICgodGhpcy5tb2RlICYgZXhwb3J0cy5JdGVyTW9kZS5JbmNsdWRlQW5vbnltb3VzKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQgaW5zdGFuY2VvZiBUcmVlQnVmZmVyIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAhY2hpbGQudHlwZS5pc0Fub255bW91cyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzQ2hpbGQoY2hpbGQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgbW92ZShkaXIsIGVudGVyKSB7XG4gICAgICAgIGlmIChlbnRlciAmJiB0aGlzLmVudGVyQ2hpbGQoZGlyLCAwLCA0IC8qIFNpZGUuRG9udENhcmUgKi8pKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnNpYmxpbmcoZGlyKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLmF0TGFzdE5vZGUoZGlyKSB8fCAhdGhpcy5wYXJlbnQoKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgTW92ZSB0byB0aGUgbmV4dCBub2RlIGluIGFcbiAgICBbcHJlLW9yZGVyXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9UcmVlX3RyYXZlcnNhbCNQcmUtb3JkZXIsX05MUilcbiAgICB0cmF2ZXJzYWwsIGdvaW5nIGZyb20gYSBub2RlIHRvIGl0cyBmaXJzdCBjaGlsZCBvciwgaWYgdGhlXG4gICAgY3VycmVudCBub2RlIGlzIGVtcHR5IG9yIGBlbnRlcmAgaXMgZmFsc2UsIGl0cyBuZXh0IHNpYmxpbmcgb3JcbiAgICB0aGUgbmV4dCBzaWJsaW5nIG9mIHRoZSBmaXJzdCBwYXJlbnQgbm9kZSB0aGF0IGhhcyBvbmUuXG4gICAgKi9cbiAgICBuZXh0KGVudGVyID0gdHJ1ZSkgeyByZXR1cm4gdGhpcy5tb3ZlKDEsIGVudGVyKTsgfVxuICAgIC8qKlxuICAgIE1vdmUgdG8gdGhlIG5leHQgbm9kZSBpbiBhIGxhc3QtdG8tZmlyc3QgcHJlLW9yZGVyIHRyYXZlcmFsLiBBXG4gICAgbm9kZSBpcyBmb2xsb3dlZCBieSBpdHMgbGFzdCBjaGlsZCBvciwgaWYgaXQgaGFzIG5vbmUsIGl0c1xuICAgIHByZXZpb3VzIHNpYmxpbmcgb3IgdGhlIHByZXZpb3VzIHNpYmxpbmcgb2YgdGhlIGZpcnN0IHBhcmVudFxuICAgIG5vZGUgdGhhdCBoYXMgb25lLlxuICAgICovXG4gICAgcHJldihlbnRlciA9IHRydWUpIHsgcmV0dXJuIHRoaXMubW92ZSgtMSwgZW50ZXIpOyB9XG4gICAgLyoqXG4gICAgTW92ZSB0aGUgY3Vyc29yIHRvIHRoZSBpbm5lcm1vc3Qgbm9kZSB0aGF0IGNvdmVycyBgcG9zYC4gSWZcbiAgICBgc2lkZWAgaXMgLTEsIGl0IHdpbGwgZW50ZXIgbm9kZXMgdGhhdCBlbmQgYXQgYHBvc2AuIElmIGl0IGlzIDEsXG4gICAgaXQgd2lsbCBlbnRlciBub2RlcyB0aGF0IHN0YXJ0IGF0IGBwb3NgLlxuICAgICovXG4gICAgbW92ZVRvKHBvcywgc2lkZSA9IDApIHtcbiAgICAgICAgLy8gTW92ZSB1cCB0byBhIG5vZGUgdGhhdCBhY3R1YWxseSBob2xkcyB0aGUgcG9zaXRpb24sIGlmIHBvc3NpYmxlXG4gICAgICAgIHdoaWxlICh0aGlzLmZyb20gPT0gdGhpcy50byB8fFxuICAgICAgICAgICAgKHNpZGUgPCAxID8gdGhpcy5mcm9tID49IHBvcyA6IHRoaXMuZnJvbSA+IHBvcykgfHxcbiAgICAgICAgICAgIChzaWRlID4gLTEgPyB0aGlzLnRvIDw9IHBvcyA6IHRoaXMudG8gPCBwb3MpKVxuICAgICAgICAgICAgaWYgKCF0aGlzLnBhcmVudCgpKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAvLyBUaGVuIHNjYW4gZG93biBpbnRvIGNoaWxkIG5vZGVzIGFzIGZhciBhcyBwb3NzaWJsZVxuICAgICAgICB3aGlsZSAodGhpcy5lbnRlckNoaWxkKDEsIHBvcywgc2lkZSkpIHsgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgR2V0IGEgW3N5bnRheCBub2RlXSgjY29tbW9uLlN5bnRheE5vZGUpIGF0IHRoZSBjdXJzb3IncyBjdXJyZW50XG4gICAgcG9zaXRpb24uXG4gICAgKi9cbiAgICBnZXQgbm9kZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmJ1ZmZlcilcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90cmVlO1xuICAgICAgICBsZXQgY2FjaGUgPSB0aGlzLmJ1ZmZlck5vZGUsIHJlc3VsdCA9IG51bGwsIGRlcHRoID0gMDtcbiAgICAgICAgaWYgKGNhY2hlICYmIGNhY2hlLmNvbnRleHQgPT0gdGhpcy5idWZmZXIpIHtcbiAgICAgICAgICAgIHNjYW46IGZvciAobGV0IGluZGV4ID0gdGhpcy5pbmRleCwgZCA9IHRoaXMuc3RhY2subGVuZ3RoOyBkID49IDA7KSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgYyA9IGNhY2hlOyBjOyBjID0gYy5fcGFyZW50KVxuICAgICAgICAgICAgICAgICAgICBpZiAoYy5pbmRleCA9PSBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID09IHRoaXMuaW5kZXgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGM7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBjO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVwdGggPSBkICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIHNjYW47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpbmRleCA9IHRoaXMuc3RhY2tbLS1kXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gZGVwdGg7IGkgPCB0aGlzLnN0YWNrLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgcmVzdWx0ID0gbmV3IEJ1ZmZlck5vZGUodGhpcy5idWZmZXIsIHJlc3VsdCwgdGhpcy5zdGFja1tpXSk7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlck5vZGUgPSBuZXcgQnVmZmVyTm9kZSh0aGlzLmJ1ZmZlciwgcmVzdWx0LCB0aGlzLmluZGV4KTtcbiAgICB9XG4gICAgLyoqXG4gICAgR2V0IHRoZSBbdHJlZV0oI2NvbW1vbi5UcmVlKSB0aGF0IHJlcHJlc2VudHMgdGhlIGN1cnJlbnQgbm9kZSwgaWZcbiAgICBhbnkuIFdpbGwgcmV0dXJuIG51bGwgd2hlbiB0aGUgbm9kZSBpcyBpbiBhIFt0cmVlXG4gICAgYnVmZmVyXSgjY29tbW9uLlRyZWVCdWZmZXIpLlxuICAgICovXG4gICAgZ2V0IHRyZWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlciA/IG51bGwgOiB0aGlzLl90cmVlLl90cmVlO1xuICAgIH1cbiAgICAvKipcbiAgICBJdGVyYXRlIG92ZXIgdGhlIGN1cnJlbnQgbm9kZSBhbmQgYWxsIGl0cyBkZXNjZW5kYW50cywgY2FsbGluZ1xuICAgIGBlbnRlcmAgd2hlbiBlbnRlcmluZyBhIG5vZGUgYW5kIGBsZWF2ZWAsIGlmIGdpdmVuLCB3aGVuIGxlYXZpbmdcbiAgICBvbmUuIFdoZW4gYGVudGVyYCByZXR1cm5zIGBmYWxzZWAsIGFueSBjaGlsZHJlbiBvZiB0aGF0IG5vZGUgYXJlXG4gICAgc2tpcHBlZCwgYW5kIGBsZWF2ZWAgaXNuJ3QgY2FsbGVkIGZvciBpdC5cbiAgICAqL1xuICAgIGl0ZXJhdGUoZW50ZXIsIGxlYXZlKSB7XG4gICAgICAgIGZvciAobGV0IGRlcHRoID0gMDs7KSB7XG4gICAgICAgICAgICBsZXQgbXVzdExlYXZlID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAodGhpcy50eXBlLmlzQW5vbnltb3VzIHx8IGVudGVyKHRoaXMpICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpcnN0Q2hpbGQoKSkge1xuICAgICAgICAgICAgICAgICAgICBkZXB0aCsrO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnR5cGUuaXNBbm9ueW1vdXMpXG4gICAgICAgICAgICAgICAgICAgIG11c3RMZWF2ZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICAgICAgaWYgKG11c3RMZWF2ZSAmJiBsZWF2ZSlcbiAgICAgICAgICAgICAgICAgICAgbGVhdmUodGhpcyk7XG4gICAgICAgICAgICAgICAgbXVzdExlYXZlID0gdGhpcy50eXBlLmlzQW5vbnltb3VzO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm5leHRTaWJsaW5nKCkpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGlmICghZGVwdGgpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudCgpO1xuICAgICAgICAgICAgICAgIGRlcHRoLS07XG4gICAgICAgICAgICAgICAgbXVzdExlYXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICBUZXN0IHdoZXRoZXIgdGhlIGN1cnJlbnQgbm9kZSBtYXRjaGVzIGEgZ2l2ZW4gY29udGV4dOKAlGEgc2VxdWVuY2VcbiAgICBvZiBkaXJlY3QgcGFyZW50IG5vZGUgbmFtZXMuIEVtcHR5IHN0cmluZ3MgaW4gdGhlIGNvbnRleHQgYXJyYXlcbiAgICBhcmUgdHJlYXRlZCBhcyB3aWxkY2FyZHMuXG4gICAgKi9cbiAgICBtYXRjaENvbnRleHQoY29udGV4dCkge1xuICAgICAgICBpZiAoIXRoaXMuYnVmZmVyKVxuICAgICAgICAgICAgcmV0dXJuIG1hdGNoTm9kZUNvbnRleHQodGhpcy5ub2RlLCBjb250ZXh0KTtcbiAgICAgICAgbGV0IHsgYnVmZmVyIH0gPSB0aGlzLmJ1ZmZlciwgeyB0eXBlcyB9ID0gYnVmZmVyLnNldDtcbiAgICAgICAgZm9yIChsZXQgaSA9IGNvbnRleHQubGVuZ3RoIC0gMSwgZCA9IHRoaXMuc3RhY2subGVuZ3RoIC0gMTsgaSA+PSAwOyBkLS0pIHtcbiAgICAgICAgICAgIGlmIChkIDwgMClcbiAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hOb2RlQ29udGV4dCh0aGlzLm5vZGUsIGNvbnRleHQsIGkpO1xuICAgICAgICAgICAgbGV0IHR5cGUgPSB0eXBlc1tidWZmZXIuYnVmZmVyW3RoaXMuc3RhY2tbZF1dXTtcbiAgICAgICAgICAgIGlmICghdHlwZS5pc0Fub255bW91cykge1xuICAgICAgICAgICAgICAgIGlmIChjb250ZXh0W2ldICYmIGNvbnRleHRbaV0gIT0gdHlwZS5uYW1lKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGhhc0NoaWxkKHRyZWUpIHtcbiAgICByZXR1cm4gdHJlZS5jaGlsZHJlbi5zb21lKGNoID0+IGNoIGluc3RhbmNlb2YgVHJlZUJ1ZmZlciB8fCAhY2gudHlwZS5pc0Fub255bW91cyB8fCBoYXNDaGlsZChjaCkpO1xufVxuZnVuY3Rpb24gYnVpbGRUcmVlKGRhdGEpIHtcbiAgICB2YXIgX2E7XG4gICAgbGV0IHsgYnVmZmVyLCBub2RlU2V0LCBtYXhCdWZmZXJMZW5ndGggPSBEZWZhdWx0QnVmZmVyTGVuZ3RoLCByZXVzZWQgPSBbXSwgbWluUmVwZWF0VHlwZSA9IG5vZGVTZXQudHlwZXMubGVuZ3RoIH0gPSBkYXRhO1xuICAgIGxldCBjdXJzb3IgPSBBcnJheS5pc0FycmF5KGJ1ZmZlcikgPyBuZXcgRmxhdEJ1ZmZlckN1cnNvcihidWZmZXIsIGJ1ZmZlci5sZW5ndGgpIDogYnVmZmVyO1xuICAgIGxldCB0eXBlcyA9IG5vZGVTZXQudHlwZXM7XG4gICAgbGV0IGNvbnRleHRIYXNoID0gMCwgbG9va0FoZWFkID0gMDtcbiAgICBmdW5jdGlvbiB0YWtlTm9kZShwYXJlbnRTdGFydCwgbWluUG9zLCBjaGlsZHJlbiwgcG9zaXRpb25zLCBpblJlcGVhdCwgZGVwdGgpIHtcbiAgICAgICAgbGV0IHsgaWQsIHN0YXJ0LCBlbmQsIHNpemUgfSA9IGN1cnNvcjtcbiAgICAgICAgbGV0IGxvb2tBaGVhZEF0U3RhcnQgPSBsb29rQWhlYWQ7XG4gICAgICAgIHdoaWxlIChzaXplIDwgMCkge1xuICAgICAgICAgICAgY3Vyc29yLm5leHQoKTtcbiAgICAgICAgICAgIGlmIChzaXplID09IC0xIC8qIFNwZWNpYWxSZWNvcmQuUmV1c2UgKi8pIHtcbiAgICAgICAgICAgICAgICBsZXQgbm9kZSA9IHJldXNlZFtpZF07XG4gICAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbnMucHVzaChzdGFydCAtIHBhcmVudFN0YXJ0KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzaXplID09IC0zIC8qIFNwZWNpYWxSZWNvcmQuQ29udGV4dENoYW5nZSAqLykgeyAvLyBDb250ZXh0IGNoYW5nZVxuICAgICAgICAgICAgICAgIGNvbnRleHRIYXNoID0gaWQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc2l6ZSA9PSAtNCAvKiBTcGVjaWFsUmVjb3JkLkxvb2tBaGVhZCAqLykge1xuICAgICAgICAgICAgICAgIGxvb2tBaGVhZCA9IGlkO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBVbnJlY29nbml6ZWQgcmVjb3JkIHNpemU6ICR7c2l6ZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgdHlwZSA9IHR5cGVzW2lkXSwgbm9kZSwgYnVmZmVyO1xuICAgICAgICBsZXQgc3RhcnRQb3MgPSBzdGFydCAtIHBhcmVudFN0YXJ0O1xuICAgICAgICBpZiAoZW5kIC0gc3RhcnQgPD0gbWF4QnVmZmVyTGVuZ3RoICYmIChidWZmZXIgPSBmaW5kQnVmZmVyU2l6ZShjdXJzb3IucG9zIC0gbWluUG9zLCBpblJlcGVhdCkpKSB7XG4gICAgICAgICAgICAvLyBTbWFsbCBlbm91Z2ggZm9yIGEgYnVmZmVyLCBhbmQgbm8gcmV1c2VkIG5vZGVzIGluc2lkZVxuICAgICAgICAgICAgbGV0IGRhdGEgPSBuZXcgVWludDE2QXJyYXkoYnVmZmVyLnNpemUgLSBidWZmZXIuc2tpcCk7XG4gICAgICAgICAgICBsZXQgZW5kUG9zID0gY3Vyc29yLnBvcyAtIGJ1ZmZlci5zaXplLCBpbmRleCA9IGRhdGEubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKGN1cnNvci5wb3MgPiBlbmRQb3MpXG4gICAgICAgICAgICAgICAgaW5kZXggPSBjb3B5VG9CdWZmZXIoYnVmZmVyLnN0YXJ0LCBkYXRhLCBpbmRleCk7XG4gICAgICAgICAgICBub2RlID0gbmV3IFRyZWVCdWZmZXIoZGF0YSwgZW5kIC0gYnVmZmVyLnN0YXJ0LCBub2RlU2V0KTtcbiAgICAgICAgICAgIHN0YXJ0UG9zID0gYnVmZmVyLnN0YXJ0IC0gcGFyZW50U3RhcnQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7IC8vIE1ha2UgaXQgYSBub2RlXG4gICAgICAgICAgICBsZXQgZW5kUG9zID0gY3Vyc29yLnBvcyAtIHNpemU7XG4gICAgICAgICAgICBjdXJzb3IubmV4dCgpO1xuICAgICAgICAgICAgbGV0IGxvY2FsQ2hpbGRyZW4gPSBbXSwgbG9jYWxQb3NpdGlvbnMgPSBbXTtcbiAgICAgICAgICAgIGxldCBsb2NhbEluUmVwZWF0ID0gaWQgPj0gbWluUmVwZWF0VHlwZSA/IGlkIDogLTE7XG4gICAgICAgICAgICBsZXQgbGFzdEdyb3VwID0gMCwgbGFzdEVuZCA9IGVuZDtcbiAgICAgICAgICAgIHdoaWxlIChjdXJzb3IucG9zID4gZW5kUG9zKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsSW5SZXBlYXQgPj0gMCAmJiBjdXJzb3IuaWQgPT0gbG9jYWxJblJlcGVhdCAmJiBjdXJzb3Iuc2l6ZSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJzb3IuZW5kIDw9IGxhc3RFbmQgLSBtYXhCdWZmZXJMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ha2VSZXBlYXRMZWFmKGxvY2FsQ2hpbGRyZW4sIGxvY2FsUG9zaXRpb25zLCBzdGFydCwgbGFzdEdyb3VwLCBjdXJzb3IuZW5kLCBsYXN0RW5kLCBsb2NhbEluUmVwZWF0LCBsb29rQWhlYWRBdFN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RHcm91cCA9IGxvY2FsQ2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEVuZCA9IGN1cnNvci5lbmQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yLm5leHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZGVwdGggPiAyNTAwIC8qIEN1dE9mZi5EZXB0aCAqLykge1xuICAgICAgICAgICAgICAgICAgICB0YWtlRmxhdE5vZGUoc3RhcnQsIGVuZFBvcywgbG9jYWxDaGlsZHJlbiwgbG9jYWxQb3NpdGlvbnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFrZU5vZGUoc3RhcnQsIGVuZFBvcywgbG9jYWxDaGlsZHJlbiwgbG9jYWxQb3NpdGlvbnMsIGxvY2FsSW5SZXBlYXQsIGRlcHRoICsgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxvY2FsSW5SZXBlYXQgPj0gMCAmJiBsYXN0R3JvdXAgPiAwICYmIGxhc3RHcm91cCA8IGxvY2FsQ2hpbGRyZW4ubGVuZ3RoKVxuICAgICAgICAgICAgICAgIG1ha2VSZXBlYXRMZWFmKGxvY2FsQ2hpbGRyZW4sIGxvY2FsUG9zaXRpb25zLCBzdGFydCwgbGFzdEdyb3VwLCBzdGFydCwgbGFzdEVuZCwgbG9jYWxJblJlcGVhdCwgbG9va0FoZWFkQXRTdGFydCk7XG4gICAgICAgICAgICBsb2NhbENoaWxkcmVuLnJldmVyc2UoKTtcbiAgICAgICAgICAgIGxvY2FsUG9zaXRpb25zLnJldmVyc2UoKTtcbiAgICAgICAgICAgIGlmIChsb2NhbEluUmVwZWF0ID4gLTEgJiYgbGFzdEdyb3VwID4gMCkge1xuICAgICAgICAgICAgICAgIGxldCBtYWtlID0gbWFrZUJhbGFuY2VkKHR5cGUpO1xuICAgICAgICAgICAgICAgIG5vZGUgPSBiYWxhbmNlUmFuZ2UodHlwZSwgbG9jYWxDaGlsZHJlbiwgbG9jYWxQb3NpdGlvbnMsIDAsIGxvY2FsQ2hpbGRyZW4ubGVuZ3RoLCAwLCBlbmQgLSBzdGFydCwgbWFrZSwgbWFrZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBub2RlID0gbWFrZVRyZWUodHlwZSwgbG9jYWxDaGlsZHJlbiwgbG9jYWxQb3NpdGlvbnMsIGVuZCAtIHN0YXJ0LCBsb29rQWhlYWRBdFN0YXJ0IC0gZW5kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjaGlsZHJlbi5wdXNoKG5vZGUpO1xuICAgICAgICBwb3NpdGlvbnMucHVzaChzdGFydFBvcyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRha2VGbGF0Tm9kZShwYXJlbnRTdGFydCwgbWluUG9zLCBjaGlsZHJlbiwgcG9zaXRpb25zKSB7XG4gICAgICAgIGxldCBub2RlcyA9IFtdOyAvLyBUZW1wb3JhcnksIGludmVydGVkIGFycmF5IG9mIGxlYWYgbm9kZXMgZm91bmQsIHdpdGggYWJzb2x1dGUgcG9zaXRpb25zXG4gICAgICAgIGxldCBub2RlQ291bnQgPSAwLCBzdG9wQXQgPSAtMTtcbiAgICAgICAgd2hpbGUgKGN1cnNvci5wb3MgPiBtaW5Qb3MpIHtcbiAgICAgICAgICAgIGxldCB7IGlkLCBzdGFydCwgZW5kLCBzaXplIH0gPSBjdXJzb3I7XG4gICAgICAgICAgICBpZiAoc2l6ZSA+IDQpIHsgLy8gTm90IGEgbGVhZlxuICAgICAgICAgICAgICAgIGN1cnNvci5uZXh0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzdG9wQXQgPiAtMSAmJiBzdGFydCA8IHN0b3BBdCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0b3BBdCA8IDApXG4gICAgICAgICAgICAgICAgICAgIHN0b3BBdCA9IGVuZCAtIG1heEJ1ZmZlckxlbmd0aDtcbiAgICAgICAgICAgICAgICBub2Rlcy5wdXNoKGlkLCBzdGFydCwgZW5kKTtcbiAgICAgICAgICAgICAgICBub2RlQ291bnQrKztcbiAgICAgICAgICAgICAgICBjdXJzb3IubmV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChub2RlQ291bnQpIHtcbiAgICAgICAgICAgIGxldCBidWZmZXIgPSBuZXcgVWludDE2QXJyYXkobm9kZUNvdW50ICogNCk7XG4gICAgICAgICAgICBsZXQgc3RhcnQgPSBub2Rlc1tub2Rlcy5sZW5ndGggLSAyXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBub2Rlcy5sZW5ndGggLSAzLCBqID0gMDsgaSA+PSAwOyBpIC09IDMpIHtcbiAgICAgICAgICAgICAgICBidWZmZXJbaisrXSA9IG5vZGVzW2ldO1xuICAgICAgICAgICAgICAgIGJ1ZmZlcltqKytdID0gbm9kZXNbaSArIDFdIC0gc3RhcnQ7XG4gICAgICAgICAgICAgICAgYnVmZmVyW2orK10gPSBub2Rlc1tpICsgMl0gLSBzdGFydDtcbiAgICAgICAgICAgICAgICBidWZmZXJbaisrXSA9IGo7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaGlsZHJlbi5wdXNoKG5ldyBUcmVlQnVmZmVyKGJ1ZmZlciwgbm9kZXNbMl0gLSBzdGFydCwgbm9kZVNldCkpO1xuICAgICAgICAgICAgcG9zaXRpb25zLnB1c2goc3RhcnQgLSBwYXJlbnRTdGFydCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gbWFrZUJhbGFuY2VkKHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIChjaGlsZHJlbiwgcG9zaXRpb25zLCBsZW5ndGgpID0+IHtcbiAgICAgICAgICAgIGxldCBsb29rQWhlYWQgPSAwLCBsYXN0SSA9IGNoaWxkcmVuLmxlbmd0aCAtIDEsIGxhc3QsIGxvb2tBaGVhZFByb3A7XG4gICAgICAgICAgICBpZiAobGFzdEkgPj0gMCAmJiAobGFzdCA9IGNoaWxkcmVuW2xhc3RJXSkgaW5zdGFuY2VvZiBUcmVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFsYXN0SSAmJiBsYXN0LnR5cGUgPT0gdHlwZSAmJiBsYXN0Lmxlbmd0aCA9PSBsZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsYXN0O1xuICAgICAgICAgICAgICAgIGlmIChsb29rQWhlYWRQcm9wID0gbGFzdC5wcm9wKE5vZGVQcm9wLmxvb2tBaGVhZCkpXG4gICAgICAgICAgICAgICAgICAgIGxvb2tBaGVhZCA9IHBvc2l0aW9uc1tsYXN0SV0gKyBsYXN0Lmxlbmd0aCArIGxvb2tBaGVhZFByb3A7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWFrZVRyZWUodHlwZSwgY2hpbGRyZW4sIHBvc2l0aW9ucywgbGVuZ3RoLCBsb29rQWhlYWQpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBtYWtlUmVwZWF0TGVhZihjaGlsZHJlbiwgcG9zaXRpb25zLCBiYXNlLCBpLCBmcm9tLCB0bywgdHlwZSwgbG9va0FoZWFkKSB7XG4gICAgICAgIGxldCBsb2NhbENoaWxkcmVuID0gW10sIGxvY2FsUG9zaXRpb25zID0gW107XG4gICAgICAgIHdoaWxlIChjaGlsZHJlbi5sZW5ndGggPiBpKSB7XG4gICAgICAgICAgICBsb2NhbENoaWxkcmVuLnB1c2goY2hpbGRyZW4ucG9wKCkpO1xuICAgICAgICAgICAgbG9jYWxQb3NpdGlvbnMucHVzaChwb3NpdGlvbnMucG9wKCkgKyBiYXNlIC0gZnJvbSk7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGRyZW4ucHVzaChtYWtlVHJlZShub2RlU2V0LnR5cGVzW3R5cGVdLCBsb2NhbENoaWxkcmVuLCBsb2NhbFBvc2l0aW9ucywgdG8gLSBmcm9tLCBsb29rQWhlYWQgLSB0bykpO1xuICAgICAgICBwb3NpdGlvbnMucHVzaChmcm9tIC0gYmFzZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1ha2VUcmVlKHR5cGUsIGNoaWxkcmVuLCBwb3NpdGlvbnMsIGxlbmd0aCwgbG9va0FoZWFkID0gMCwgcHJvcHMpIHtcbiAgICAgICAgaWYgKGNvbnRleHRIYXNoKSB7XG4gICAgICAgICAgICBsZXQgcGFpciA9IFtOb2RlUHJvcC5jb250ZXh0SGFzaCwgY29udGV4dEhhc2hdO1xuICAgICAgICAgICAgcHJvcHMgPSBwcm9wcyA/IFtwYWlyXS5jb25jYXQocHJvcHMpIDogW3BhaXJdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsb29rQWhlYWQgPiAyNSkge1xuICAgICAgICAgICAgbGV0IHBhaXIgPSBbTm9kZVByb3AubG9va0FoZWFkLCBsb29rQWhlYWRdO1xuICAgICAgICAgICAgcHJvcHMgPSBwcm9wcyA/IFtwYWlyXS5jb25jYXQocHJvcHMpIDogW3BhaXJdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgVHJlZSh0eXBlLCBjaGlsZHJlbiwgcG9zaXRpb25zLCBsZW5ndGgsIHByb3BzKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZmluZEJ1ZmZlclNpemUobWF4U2l6ZSwgaW5SZXBlYXQpIHtcbiAgICAgICAgLy8gU2NhbiB0aHJvdWdoIHRoZSBidWZmZXIgdG8gZmluZCBwcmV2aW91cyBzaWJsaW5ncyB0aGF0IGZpdFxuICAgICAgICAvLyB0b2dldGhlciBpbiBhIFRyZWVCdWZmZXIsIGFuZCBkb24ndCBjb250YWluIGFueSByZXVzZWQgbm9kZXNcbiAgICAgICAgLy8gKHdoaWNoIGNhbid0IGJlIHN0b3JlZCBpbiBhIGJ1ZmZlcikuXG4gICAgICAgIC8vIElmIGBpblJlcGVhdGAgaXMgPiAtMSwgaWdub3JlIG5vZGUgYm91bmRhcmllcyBvZiB0aGF0IHR5cGUgZm9yXG4gICAgICAgIC8vIG5lc3RpbmcsIGJ1dCBtYWtlIHN1cmUgdGhlIGVuZCBmYWxscyBlaXRoZXIgYXQgdGhlIHN0YXJ0XG4gICAgICAgIC8vIChgbWF4U2l6ZWApIG9yIGJlZm9yZSBzdWNoIGEgbm9kZS5cbiAgICAgICAgbGV0IGZvcmsgPSBjdXJzb3IuZm9yaygpO1xuICAgICAgICBsZXQgc2l6ZSA9IDAsIHN0YXJ0ID0gMCwgc2tpcCA9IDAsIG1pblN0YXJ0ID0gZm9yay5lbmQgLSBtYXhCdWZmZXJMZW5ndGg7XG4gICAgICAgIGxldCByZXN1bHQgPSB7IHNpemU6IDAsIHN0YXJ0OiAwLCBza2lwOiAwIH07XG4gICAgICAgIHNjYW46IGZvciAobGV0IG1pblBvcyA9IGZvcmsucG9zIC0gbWF4U2l6ZTsgZm9yay5wb3MgPiBtaW5Qb3M7KSB7XG4gICAgICAgICAgICBsZXQgbm9kZVNpemUgPSBmb3JrLnNpemU7XG4gICAgICAgICAgICAvLyBQcmV0ZW5kIG5lc3RlZCByZXBlYXQgbm9kZXMgb2YgdGhlIHNhbWUgdHlwZSBkb24ndCBleGlzdFxuICAgICAgICAgICAgaWYgKGZvcmsuaWQgPT0gaW5SZXBlYXQgJiYgbm9kZVNpemUgPj0gMCkge1xuICAgICAgICAgICAgICAgIC8vIEV4Y2VwdCB0aGF0IHdlIHN0b3JlIHRoZSBjdXJyZW50IHN0YXRlIGFzIGEgdmFsaWQgcmV0dXJuXG4gICAgICAgICAgICAgICAgLy8gdmFsdWUuXG4gICAgICAgICAgICAgICAgcmVzdWx0LnNpemUgPSBzaXplO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5zdGFydCA9IHN0YXJ0O1xuICAgICAgICAgICAgICAgIHJlc3VsdC5za2lwID0gc2tpcDtcbiAgICAgICAgICAgICAgICBza2lwICs9IDQ7XG4gICAgICAgICAgICAgICAgc2l6ZSArPSA0O1xuICAgICAgICAgICAgICAgIGZvcmsubmV4dCgpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHN0YXJ0UG9zID0gZm9yay5wb3MgLSBub2RlU2l6ZTtcbiAgICAgICAgICAgIGlmIChub2RlU2l6ZSA8IDAgfHwgc3RhcnRQb3MgPCBtaW5Qb3MgfHwgZm9yay5zdGFydCA8IG1pblN0YXJ0KVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgbGV0IGxvY2FsU2tpcHBlZCA9IGZvcmsuaWQgPj0gbWluUmVwZWF0VHlwZSA/IDQgOiAwO1xuICAgICAgICAgICAgbGV0IG5vZGVTdGFydCA9IGZvcmsuc3RhcnQ7XG4gICAgICAgICAgICBmb3JrLm5leHQoKTtcbiAgICAgICAgICAgIHdoaWxlIChmb3JrLnBvcyA+IHN0YXJ0UG9zKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZvcmsuc2l6ZSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvcmsuc2l6ZSA9PSAtMyAvKiBTcGVjaWFsUmVjb3JkLkNvbnRleHRDaGFuZ2UgKi8pXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFNraXBwZWQgKz0gNDtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgc2NhbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZm9yay5pZCA+PSBtaW5SZXBlYXRUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsU2tpcHBlZCArPSA0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3JrLm5leHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXJ0ID0gbm9kZVN0YXJ0O1xuICAgICAgICAgICAgc2l6ZSArPSBub2RlU2l6ZTtcbiAgICAgICAgICAgIHNraXAgKz0gbG9jYWxTa2lwcGVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpblJlcGVhdCA8IDAgfHwgc2l6ZSA9PSBtYXhTaXplKSB7XG4gICAgICAgICAgICByZXN1bHQuc2l6ZSA9IHNpemU7XG4gICAgICAgICAgICByZXN1bHQuc3RhcnQgPSBzdGFydDtcbiAgICAgICAgICAgIHJlc3VsdC5za2lwID0gc2tpcDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0LnNpemUgPiA0ID8gcmVzdWx0IDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb3B5VG9CdWZmZXIoYnVmZmVyU3RhcnQsIGJ1ZmZlciwgaW5kZXgpIHtcbiAgICAgICAgbGV0IHsgaWQsIHN0YXJ0LCBlbmQsIHNpemUgfSA9IGN1cnNvcjtcbiAgICAgICAgY3Vyc29yLm5leHQoKTtcbiAgICAgICAgaWYgKHNpemUgPj0gMCAmJiBpZCA8IG1pblJlcGVhdFR5cGUpIHtcbiAgICAgICAgICAgIGxldCBzdGFydEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICBpZiAoc2l6ZSA+IDQpIHtcbiAgICAgICAgICAgICAgICBsZXQgZW5kUG9zID0gY3Vyc29yLnBvcyAtIChzaXplIC0gNCk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGN1cnNvci5wb3MgPiBlbmRQb3MpXG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0gY29weVRvQnVmZmVyKGJ1ZmZlclN0YXJ0LCBidWZmZXIsIGluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ1ZmZlclstLWluZGV4XSA9IHN0YXJ0SW5kZXg7XG4gICAgICAgICAgICBidWZmZXJbLS1pbmRleF0gPSBlbmQgLSBidWZmZXJTdGFydDtcbiAgICAgICAgICAgIGJ1ZmZlclstLWluZGV4XSA9IHN0YXJ0IC0gYnVmZmVyU3RhcnQ7XG4gICAgICAgICAgICBidWZmZXJbLS1pbmRleF0gPSBpZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzaXplID09IC0zIC8qIFNwZWNpYWxSZWNvcmQuQ29udGV4dENoYW5nZSAqLykge1xuICAgICAgICAgICAgY29udGV4dEhhc2ggPSBpZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzaXplID09IC00IC8qIFNwZWNpYWxSZWNvcmQuTG9va0FoZWFkICovKSB7XG4gICAgICAgICAgICBsb29rQWhlYWQgPSBpZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgfVxuICAgIGxldCBjaGlsZHJlbiA9IFtdLCBwb3NpdGlvbnMgPSBbXTtcbiAgICB3aGlsZSAoY3Vyc29yLnBvcyA+IDApXG4gICAgICAgIHRha2VOb2RlKGRhdGEuc3RhcnQgfHwgMCwgZGF0YS5idWZmZXJTdGFydCB8fCAwLCBjaGlsZHJlbiwgcG9zaXRpb25zLCAtMSwgMCk7XG4gICAgbGV0IGxlbmd0aCA9IChfYSA9IGRhdGEubGVuZ3RoKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAoY2hpbGRyZW4ubGVuZ3RoID8gcG9zaXRpb25zWzBdICsgY2hpbGRyZW5bMF0ubGVuZ3RoIDogMCk7XG4gICAgcmV0dXJuIG5ldyBUcmVlKHR5cGVzW2RhdGEudG9wSURdLCBjaGlsZHJlbi5yZXZlcnNlKCksIHBvc2l0aW9ucy5yZXZlcnNlKCksIGxlbmd0aCk7XG59XG5jb25zdCBub2RlU2l6ZUNhY2hlID0gbmV3IFdlYWtNYXA7XG5mdW5jdGlvbiBub2RlU2l6ZShiYWxhbmNlVHlwZSwgbm9kZSkge1xuICAgIGlmICghYmFsYW5jZVR5cGUuaXNBbm9ueW1vdXMgfHwgbm9kZSBpbnN0YW5jZW9mIFRyZWVCdWZmZXIgfHwgbm9kZS50eXBlICE9IGJhbGFuY2VUeXBlKVxuICAgICAgICByZXR1cm4gMTtcbiAgICBsZXQgc2l6ZSA9IG5vZGVTaXplQ2FjaGUuZ2V0KG5vZGUpO1xuICAgIGlmIChzaXplID09IG51bGwpIHtcbiAgICAgICAgc2l6ZSA9IDE7XG4gICAgICAgIGZvciAobGV0IGNoaWxkIG9mIG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGlmIChjaGlsZC50eXBlICE9IGJhbGFuY2VUeXBlIHx8ICEoY2hpbGQgaW5zdGFuY2VvZiBUcmVlKSkge1xuICAgICAgICAgICAgICAgIHNpemUgPSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2l6ZSArPSBub2RlU2l6ZShiYWxhbmNlVHlwZSwgY2hpbGQpO1xuICAgICAgICB9XG4gICAgICAgIG5vZGVTaXplQ2FjaGUuc2V0KG5vZGUsIHNpemUpO1xuICAgIH1cbiAgICByZXR1cm4gc2l6ZTtcbn1cbmZ1bmN0aW9uIGJhbGFuY2VSYW5nZShcbi8vIFRoZSB0eXBlIHRoZSBiYWxhbmNlZCB0cmVlJ3MgaW5uZXIgbm9kZXMuXG5iYWxhbmNlVHlwZSwgXG4vLyBUaGUgZGlyZWN0IGNoaWxkcmVuIGFuZCB0aGVpciBwb3NpdGlvbnNcbmNoaWxkcmVuLCBwb3NpdGlvbnMsIFxuLy8gVGhlIGluZGV4IHJhbmdlIGluIGNoaWxkcmVuL3Bvc2l0aW9ucyB0byB1c2VcbmZyb20sIHRvLCBcbi8vIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgbm9kZXMsIHJlbGF0aXZlIHRvIHRoZWlyIHBhcmVudC5cbnN0YXJ0LCBcbi8vIExlbmd0aCBvZiB0aGUgb3V0ZXIgbm9kZVxubGVuZ3RoLCBcbi8vIEZ1bmN0aW9uIHRvIGJ1aWxkIHRoZSB0b3Agbm9kZSBvZiB0aGUgYmFsYW5jZWQgdHJlZVxubWtUb3AsIFxuLy8gRnVuY3Rpb24gdG8gYnVpbGQgaW50ZXJuYWwgbm9kZXMgZm9yIHRoZSBiYWxhbmNlZCB0cmVlXG5ta1RyZWUpIHtcbiAgICBsZXQgdG90YWwgPSAwO1xuICAgIGZvciAobGV0IGkgPSBmcm9tOyBpIDwgdG87IGkrKylcbiAgICAgICAgdG90YWwgKz0gbm9kZVNpemUoYmFsYW5jZVR5cGUsIGNoaWxkcmVuW2ldKTtcbiAgICBsZXQgbWF4Q2hpbGQgPSBNYXRoLmNlaWwoKHRvdGFsICogMS41KSAvIDggLyogQmFsYW5jZS5CcmFuY2hGYWN0b3IgKi8pO1xuICAgIGxldCBsb2NhbENoaWxkcmVuID0gW10sIGxvY2FsUG9zaXRpb25zID0gW107XG4gICAgZnVuY3Rpb24gZGl2aWRlKGNoaWxkcmVuLCBwb3NpdGlvbnMsIGZyb20sIHRvLCBvZmZzZXQpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IGZyb207IGkgPCB0bzspIHtcbiAgICAgICAgICAgIGxldCBncm91cEZyb20gPSBpLCBncm91cFN0YXJ0ID0gcG9zaXRpb25zW2ldLCBncm91cFNpemUgPSBub2RlU2l6ZShiYWxhbmNlVHlwZSwgY2hpbGRyZW5baV0pO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgZm9yICg7IGkgPCB0bzsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IG5leHRTaXplID0gbm9kZVNpemUoYmFsYW5jZVR5cGUsIGNoaWxkcmVuW2ldKTtcbiAgICAgICAgICAgICAgICBpZiAoZ3JvdXBTaXplICsgbmV4dFNpemUgPj0gbWF4Q2hpbGQpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGdyb3VwU2l6ZSArPSBuZXh0U2l6ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpID09IGdyb3VwRnJvbSArIDEpIHtcbiAgICAgICAgICAgICAgICBpZiAoZ3JvdXBTaXplID4gbWF4Q2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG9ubHkgPSBjaGlsZHJlbltncm91cEZyb21dOyAvLyBPbmx5IHRyZWVzIGNhbiBoYXZlIGEgc2l6ZSA+IDFcbiAgICAgICAgICAgICAgICAgICAgZGl2aWRlKG9ubHkuY2hpbGRyZW4sIG9ubHkucG9zaXRpb25zLCAwLCBvbmx5LmNoaWxkcmVuLmxlbmd0aCwgcG9zaXRpb25zW2dyb3VwRnJvbV0gKyBvZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbG9jYWxDaGlsZHJlbi5wdXNoKGNoaWxkcmVuW2dyb3VwRnJvbV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IGxlbmd0aCA9IHBvc2l0aW9uc1tpIC0gMV0gKyBjaGlsZHJlbltpIC0gMV0ubGVuZ3RoIC0gZ3JvdXBTdGFydDtcbiAgICAgICAgICAgICAgICBsb2NhbENoaWxkcmVuLnB1c2goYmFsYW5jZVJhbmdlKGJhbGFuY2VUeXBlLCBjaGlsZHJlbiwgcG9zaXRpb25zLCBncm91cEZyb20sIGksIGdyb3VwU3RhcnQsIGxlbmd0aCwgbnVsbCwgbWtUcmVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2NhbFBvc2l0aW9ucy5wdXNoKGdyb3VwU3RhcnQgKyBvZmZzZXQgLSBzdGFydCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGl2aWRlKGNoaWxkcmVuLCBwb3NpdGlvbnMsIGZyb20sIHRvLCAwKTtcbiAgICByZXR1cm4gKG1rVG9wIHx8IG1rVHJlZSkobG9jYWxDaGlsZHJlbiwgbG9jYWxQb3NpdGlvbnMsIGxlbmd0aCk7XG59XG4vKipcblByb3ZpZGVzIGEgd2F5IHRvIGFzc29jaWF0ZSB2YWx1ZXMgd2l0aCBwaWVjZXMgb2YgdHJlZXMuIEFzIGxvbmdcbmFzIHRoYXQgcGFydCBvZiB0aGUgdHJlZSBpcyByZXVzZWQsIHRoZSBhc3NvY2lhdGVkIHZhbHVlcyBjYW4gYmVcbnJldHJpZXZlZCBmcm9tIGFuIHVwZGF0ZWQgdHJlZS5cbiovXG5jbGFzcyBOb2RlV2Vha01hcCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMubWFwID0gbmV3IFdlYWtNYXAoKTtcbiAgICB9XG4gICAgc2V0QnVmZmVyKGJ1ZmZlciwgaW5kZXgsIHZhbHVlKSB7XG4gICAgICAgIGxldCBpbm5lciA9IHRoaXMubWFwLmdldChidWZmZXIpO1xuICAgICAgICBpZiAoIWlubmVyKVxuICAgICAgICAgICAgdGhpcy5tYXAuc2V0KGJ1ZmZlciwgaW5uZXIgPSBuZXcgTWFwKTtcbiAgICAgICAgaW5uZXIuc2V0KGluZGV4LCB2YWx1ZSk7XG4gICAgfVxuICAgIGdldEJ1ZmZlcihidWZmZXIsIGluZGV4KSB7XG4gICAgICAgIGxldCBpbm5lciA9IHRoaXMubWFwLmdldChidWZmZXIpO1xuICAgICAgICByZXR1cm4gaW5uZXIgJiYgaW5uZXIuZ2V0KGluZGV4KTtcbiAgICB9XG4gICAgLyoqXG4gICAgU2V0IHRoZSB2YWx1ZSBmb3IgdGhpcyBzeW50YXggbm9kZS5cbiAgICAqL1xuICAgIHNldChub2RlLCB2YWx1ZSkge1xuICAgICAgICBpZiAobm9kZSBpbnN0YW5jZW9mIEJ1ZmZlck5vZGUpXG4gICAgICAgICAgICB0aGlzLnNldEJ1ZmZlcihub2RlLmNvbnRleHQuYnVmZmVyLCBub2RlLmluZGV4LCB2YWx1ZSk7XG4gICAgICAgIGVsc2UgaWYgKG5vZGUgaW5zdGFuY2VvZiBUcmVlTm9kZSlcbiAgICAgICAgICAgIHRoaXMubWFwLnNldChub2RlLnRyZWUsIHZhbHVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgUmV0cmlldmUgdmFsdWUgZm9yIHRoaXMgc3ludGF4IG5vZGUsIGlmIGl0IGV4aXN0cyBpbiB0aGUgbWFwLlxuICAgICovXG4gICAgZ2V0KG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBCdWZmZXJOb2RlID8gdGhpcy5nZXRCdWZmZXIobm9kZS5jb250ZXh0LmJ1ZmZlciwgbm9kZS5pbmRleClcbiAgICAgICAgICAgIDogbm9kZSBpbnN0YW5jZW9mIFRyZWVOb2RlID8gdGhpcy5tYXAuZ2V0KG5vZGUudHJlZSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgIFNldCB0aGUgdmFsdWUgZm9yIHRoZSBub2RlIHRoYXQgYSBjdXJzb3IgY3VycmVudGx5IHBvaW50cyB0by5cbiAgICAqL1xuICAgIGN1cnNvclNldChjdXJzb3IsIHZhbHVlKSB7XG4gICAgICAgIGlmIChjdXJzb3IuYnVmZmVyKVxuICAgICAgICAgICAgdGhpcy5zZXRCdWZmZXIoY3Vyc29yLmJ1ZmZlci5idWZmZXIsIGN1cnNvci5pbmRleCwgdmFsdWUpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLm1hcC5zZXQoY3Vyc29yLnRyZWUsIHZhbHVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgUmV0cmlldmUgdGhlIHZhbHVlIGZvciB0aGUgbm9kZSB0aGF0IGEgY3Vyc29yIGN1cnJlbnRseSBwb2ludHNcbiAgICB0by5cbiAgICAqL1xuICAgIGN1cnNvckdldChjdXJzb3IpIHtcbiAgICAgICAgcmV0dXJuIGN1cnNvci5idWZmZXIgPyB0aGlzLmdldEJ1ZmZlcihjdXJzb3IuYnVmZmVyLmJ1ZmZlciwgY3Vyc29yLmluZGV4KSA6IHRoaXMubWFwLmdldChjdXJzb3IudHJlZSk7XG4gICAgfVxufVxuXG4vKipcblRyZWUgZnJhZ21lbnRzIGFyZSB1c2VkIGR1cmluZyBbaW5jcmVtZW50YWxcbnBhcnNpbmddKCNjb21tb24uUGFyc2VyLnN0YXJ0UGFyc2UpIHRvIHRyYWNrIHBhcnRzIG9mIG9sZCB0cmVlc1xudGhhdCBjYW4gYmUgcmV1c2VkIGluIGEgbmV3IHBhcnNlLiBBbiBhcnJheSBvZiBmcmFnbWVudHMgaXMgdXNlZFxudG8gdHJhY2sgcmVnaW9ucyBvZiBhbiBvbGQgdHJlZSB3aG9zZSBub2RlcyBtaWdodCBiZSByZXVzZWQgaW4gbmV3XG5wYXJzZXMuIFVzZSB0aGUgc3RhdGljXG5bYGFwcGx5Q2hhbmdlc2BdKCNjb21tb24uVHJlZUZyYWdtZW50XmFwcGx5Q2hhbmdlcykgbWV0aG9kIHRvXG51cGRhdGUgZnJhZ21lbnRzIGZvciBkb2N1bWVudCBjaGFuZ2VzLlxuKi9cbmNsYXNzIFRyZWVGcmFnbWVudCB7XG4gICAgLyoqXG4gICAgQ29uc3RydWN0IGEgdHJlZSBmcmFnbWVudC4gWW91J2xsIHVzdWFsbHkgd2FudCB0byB1c2VcbiAgICBbYGFkZFRyZWVgXSgjY29tbW9uLlRyZWVGcmFnbWVudF5hZGRUcmVlKSBhbmRcbiAgICBbYGFwcGx5Q2hhbmdlc2BdKCNjb21tb24uVHJlZUZyYWdtZW50XmFwcGx5Q2hhbmdlcykgaW5zdGVhZCBvZlxuICAgIGNhbGxpbmcgdGhpcyBkaXJlY3RseS5cbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgIFRoZSBzdGFydCBvZiB0aGUgdW5jaGFuZ2VkIHJhbmdlIHBvaW50ZWQgdG8gYnkgdGhpcyBmcmFnbWVudC5cbiAgICBUaGlzIHJlZmVycyB0byBhbiBvZmZzZXQgaW4gdGhlIF91cGRhdGVkXyBkb2N1bWVudCAoYXMgb3Bwb3NlZFxuICAgIHRvIHRoZSBvcmlnaW5hbCB0cmVlKS5cbiAgICAqL1xuICAgIGZyb20sIFxuICAgIC8qKlxuICAgIFRoZSBlbmQgb2YgdGhlIHVuY2hhbmdlZCByYW5nZS5cbiAgICAqL1xuICAgIHRvLCBcbiAgICAvKipcbiAgICBUaGUgdHJlZSB0aGF0IHRoaXMgZnJhZ21lbnQgaXMgYmFzZWQgb24uXG4gICAgKi9cbiAgICB0cmVlLCBcbiAgICAvKipcbiAgICBUaGUgb2Zmc2V0IGJldHdlZW4gdGhlIGZyYWdtZW50J3MgdHJlZSBhbmQgdGhlIGRvY3VtZW50IHRoYXRcbiAgICB0aGlzIGZyYWdtZW50IGNhbiBiZSB1c2VkIGFnYWluc3QuIEFkZCB0aGlzIHdoZW4gZ29pbmcgZnJvbVxuICAgIGRvY3VtZW50IHRvIHRyZWUgcG9zaXRpb25zLCBzdWJ0cmFjdCBpdCB0byBnbyBmcm9tIHRyZWUgdG9cbiAgICBkb2N1bWVudCBwb3NpdGlvbnMuXG4gICAgKi9cbiAgICBvZmZzZXQsIG9wZW5TdGFydCA9IGZhbHNlLCBvcGVuRW5kID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5mcm9tID0gZnJvbTtcbiAgICAgICAgdGhpcy50byA9IHRvO1xuICAgICAgICB0aGlzLnRyZWUgPSB0cmVlO1xuICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcbiAgICAgICAgdGhpcy5vcGVuID0gKG9wZW5TdGFydCA/IDEgLyogT3Blbi5TdGFydCAqLyA6IDApIHwgKG9wZW5FbmQgPyAyIC8qIE9wZW4uRW5kICovIDogMCk7XG4gICAgfVxuICAgIC8qKlxuICAgIFdoZXRoZXIgdGhlIHN0YXJ0IG9mIHRoZSBmcmFnbWVudCByZXByZXNlbnRzIHRoZSBzdGFydCBvZiBhXG4gICAgcGFyc2UsIG9yIHRoZSBlbmQgb2YgYSBjaGFuZ2UuIChJbiB0aGUgc2Vjb25kIGNhc2UsIGl0IG1heSBub3RcbiAgICBiZSBzYWZlIHRvIHJldXNlIHNvbWUgbm9kZXMgYXQgdGhlIHN0YXJ0LCBkZXBlbmRpbmcgb24gdGhlXG4gICAgcGFyc2luZyBhbGdvcml0aG0uKVxuICAgICovXG4gICAgZ2V0IG9wZW5TdGFydCgpIHsgcmV0dXJuICh0aGlzLm9wZW4gJiAxIC8qIE9wZW4uU3RhcnQgKi8pID4gMDsgfVxuICAgIC8qKlxuICAgIFdoZXRoZXIgdGhlIGVuZCBvZiB0aGUgZnJhZ21lbnQgcmVwcmVzZW50cyB0aGUgZW5kIG9mIGFcbiAgICBmdWxsLWRvY3VtZW50IHBhcnNlLCBvciB0aGUgc3RhcnQgb2YgYSBjaGFuZ2UuXG4gICAgKi9cbiAgICBnZXQgb3BlbkVuZCgpIHsgcmV0dXJuICh0aGlzLm9wZW4gJiAyIC8qIE9wZW4uRW5kICovKSA+IDA7IH1cbiAgICAvKipcbiAgICBDcmVhdGUgYSBzZXQgb2YgZnJhZ21lbnRzIGZyb20gYSBmcmVzaGx5IHBhcnNlZCB0cmVlLCBvciB1cGRhdGVcbiAgICBhbiBleGlzdGluZyBzZXQgb2YgZnJhZ21lbnRzIGJ5IHJlcGxhY2luZyB0aGUgb25lcyB0aGF0IG92ZXJsYXBcbiAgICB3aXRoIGEgdHJlZSB3aXRoIGNvbnRlbnQgZnJvbSB0aGUgbmV3IHRyZWUuIFdoZW4gYHBhcnRpYWxgIGlzXG4gICAgdHJ1ZSwgdGhlIHBhcnNlIGlzIHRyZWF0ZWQgYXMgaW5jb21wbGV0ZSwgYW5kIHRoZSByZXN1bHRpbmdcbiAgICBmcmFnbWVudCBoYXMgW2BvcGVuRW5kYF0oI2NvbW1vbi5UcmVlRnJhZ21lbnQub3BlbkVuZCkgc2V0IHRvXG4gICAgdHJ1ZS5cbiAgICAqL1xuICAgIHN0YXRpYyBhZGRUcmVlKHRyZWUsIGZyYWdtZW50cyA9IFtdLCBwYXJ0aWFsID0gZmFsc2UpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtuZXcgVHJlZUZyYWdtZW50KDAsIHRyZWUubGVuZ3RoLCB0cmVlLCAwLCBmYWxzZSwgcGFydGlhbCldO1xuICAgICAgICBmb3IgKGxldCBmIG9mIGZyYWdtZW50cylcbiAgICAgICAgICAgIGlmIChmLnRvID4gdHJlZS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZik7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgIEFwcGx5IGEgc2V0IG9mIGVkaXRzIHRvIGFuIGFycmF5IG9mIGZyYWdtZW50cywgcmVtb3Zpbmcgb3JcbiAgICBzcGxpdHRpbmcgZnJhZ21lbnRzIGFzIG5lY2Vzc2FyeSB0byByZW1vdmUgZWRpdGVkIHJhbmdlcywgYW5kXG4gICAgYWRqdXN0aW5nIG9mZnNldHMgZm9yIGZyYWdtZW50cyB0aGF0IG1vdmVkLlxuICAgICovXG4gICAgc3RhdGljIGFwcGx5Q2hhbmdlcyhmcmFnbWVudHMsIGNoYW5nZXMsIG1pbkdhcCA9IDEyOCkge1xuICAgICAgICBpZiAoIWNoYW5nZXMubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIGZyYWdtZW50cztcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICBsZXQgZkkgPSAxLCBuZXh0RiA9IGZyYWdtZW50cy5sZW5ndGggPyBmcmFnbWVudHNbMF0gOiBudWxsO1xuICAgICAgICBmb3IgKGxldCBjSSA9IDAsIHBvcyA9IDAsIG9mZiA9IDA7OyBjSSsrKSB7XG4gICAgICAgICAgICBsZXQgbmV4dEMgPSBjSSA8IGNoYW5nZXMubGVuZ3RoID8gY2hhbmdlc1tjSV0gOiBudWxsO1xuICAgICAgICAgICAgbGV0IG5leHRQb3MgPSBuZXh0QyA/IG5leHRDLmZyb21BIDogMWU5O1xuICAgICAgICAgICAgaWYgKG5leHRQb3MgLSBwb3MgPj0gbWluR2FwKVxuICAgICAgICAgICAgICAgIHdoaWxlIChuZXh0RiAmJiBuZXh0Ri5mcm9tIDwgbmV4dFBvcykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY3V0ID0gbmV4dEY7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3MgPj0gY3V0LmZyb20gfHwgbmV4dFBvcyA8PSBjdXQudG8gfHwgb2ZmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZkZyb20gPSBNYXRoLm1heChjdXQuZnJvbSwgcG9zKSAtIG9mZiwgZlRvID0gTWF0aC5taW4oY3V0LnRvLCBuZXh0UG9zKSAtIG9mZjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1dCA9IGZGcm9tID49IGZUbyA/IG51bGwgOiBuZXcgVHJlZUZyYWdtZW50KGZGcm9tLCBmVG8sIGN1dC50cmVlLCBjdXQub2Zmc2V0ICsgb2ZmLCBjSSA+IDAsICEhbmV4dEMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXQpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChjdXQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dEYudG8gPiBuZXh0UG9zKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIG5leHRGID0gZkkgPCBmcmFnbWVudHMubGVuZ3RoID8gZnJhZ21lbnRzW2ZJKytdIDogbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIW5leHRDKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgcG9zID0gbmV4dEMudG9BO1xuICAgICAgICAgICAgb2ZmID0gbmV4dEMudG9BIC0gbmV4dEMudG9CO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuLyoqXG5BIHN1cGVyY2xhc3MgdGhhdCBwYXJzZXJzIHNob3VsZCBleHRlbmQuXG4qL1xuY2xhc3MgUGFyc2VyIHtcbiAgICAvKipcbiAgICBTdGFydCBhIHBhcnNlLCByZXR1cm5pbmcgYSBbcGFydGlhbCBwYXJzZV0oI2NvbW1vbi5QYXJ0aWFsUGFyc2UpXG4gICAgb2JqZWN0LiBbYGZyYWdtZW50c2BdKCNjb21tb24uVHJlZUZyYWdtZW50KSBjYW4gYmUgcGFzc2VkIGluIHRvXG4gICAgbWFrZSB0aGUgcGFyc2UgaW5jcmVtZW50YWwuXG4gICAgXG4gICAgQnkgZGVmYXVsdCwgdGhlIGVudGlyZSBpbnB1dCBpcyBwYXJzZWQuIFlvdSBjYW4gcGFzcyBgcmFuZ2VzYCxcbiAgICB3aGljaCBzaG91bGQgYmUgYSBzb3J0ZWQgYXJyYXkgb2Ygbm9uLWVtcHR5LCBub24tb3ZlcmxhcHBpbmdcbiAgICByYW5nZXMsIHRvIHBhcnNlIG9ubHkgdGhvc2UgcmFuZ2VzLiBUaGUgdHJlZSByZXR1cm5lZCBpbiB0aGF0XG4gICAgY2FzZSB3aWxsIHN0YXJ0IGF0IGByYW5nZXNbMF0uZnJvbWAuXG4gICAgKi9cbiAgICBzdGFydFBhcnNlKGlucHV0LCBmcmFnbWVudHMsIHJhbmdlcykge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICBpbnB1dCA9IG5ldyBTdHJpbmdJbnB1dChpbnB1dCk7XG4gICAgICAgIHJhbmdlcyA9ICFyYW5nZXMgPyBbbmV3IFJhbmdlKDAsIGlucHV0Lmxlbmd0aCldIDogcmFuZ2VzLmxlbmd0aCA/IHJhbmdlcy5tYXAociA9PiBuZXcgUmFuZ2Uoci5mcm9tLCByLnRvKSkgOiBbbmV3IFJhbmdlKDAsIDApXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUGFyc2UoaW5wdXQsIGZyYWdtZW50cyB8fCBbXSwgcmFuZ2VzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgUnVuIGEgZnVsbCBwYXJzZSwgcmV0dXJuaW5nIHRoZSByZXN1bHRpbmcgdHJlZS5cbiAgICAqL1xuICAgIHBhcnNlKGlucHV0LCBmcmFnbWVudHMsIHJhbmdlcykge1xuICAgICAgICBsZXQgcGFyc2UgPSB0aGlzLnN0YXJ0UGFyc2UoaW5wdXQsIGZyYWdtZW50cywgcmFuZ2VzKTtcbiAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgbGV0IGRvbmUgPSBwYXJzZS5hZHZhbmNlKCk7XG4gICAgICAgICAgICBpZiAoZG9uZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZG9uZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmNsYXNzIFN0cmluZ0lucHV0IHtcbiAgICBjb25zdHJ1Y3RvcihzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zdHJpbmcgPSBzdHJpbmc7XG4gICAgfVxuICAgIGdldCBsZW5ndGgoKSB7IHJldHVybiB0aGlzLnN0cmluZy5sZW5ndGg7IH1cbiAgICBjaHVuayhmcm9tKSB7IHJldHVybiB0aGlzLnN0cmluZy5zbGljZShmcm9tKTsgfVxuICAgIGdldCBsaW5lQ2h1bmtzKCkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICByZWFkKGZyb20sIHRvKSB7IHJldHVybiB0aGlzLnN0cmluZy5zbGljZShmcm9tLCB0byk7IH1cbn1cblxuLyoqXG5DcmVhdGUgYSBwYXJzZSB3cmFwcGVyIHRoYXQsIGFmdGVyIHRoZSBpbm5lciBwYXJzZSBjb21wbGV0ZXMsXG5zY2FucyBpdHMgdHJlZSBmb3IgbWl4ZWQgbGFuZ3VhZ2UgcmVnaW9ucyB3aXRoIHRoZSBgbmVzdGBcbmZ1bmN0aW9uLCBydW5zIHRoZSByZXN1bHRpbmcgW2lubmVyIHBhcnNlc10oI2NvbW1vbi5OZXN0ZWRQYXJzZSksXG5hbmQgdGhlbiBbbW91bnRzXSgjY29tbW9uLk5vZGVQcm9wXm1vdW50ZWQpIHRoZWlyIHJlc3VsdHMgb250byB0aGVcbnRyZWUuXG4qL1xuZnVuY3Rpb24gcGFyc2VNaXhlZChuZXN0KSB7XG4gICAgcmV0dXJuIChwYXJzZSwgaW5wdXQsIGZyYWdtZW50cywgcmFuZ2VzKSA9PiBuZXcgTWl4ZWRQYXJzZShwYXJzZSwgbmVzdCwgaW5wdXQsIGZyYWdtZW50cywgcmFuZ2VzKTtcbn1cbmNsYXNzIElubmVyUGFyc2Uge1xuICAgIGNvbnN0cnVjdG9yKHBhcnNlciwgcGFyc2UsIG92ZXJsYXksIHRhcmdldCwgZnJvbSkge1xuICAgICAgICB0aGlzLnBhcnNlciA9IHBhcnNlcjtcbiAgICAgICAgdGhpcy5wYXJzZSA9IHBhcnNlO1xuICAgICAgICB0aGlzLm92ZXJsYXkgPSBvdmVybGF5O1xuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgdGhpcy5mcm9tID0gZnJvbTtcbiAgICB9XG59XG5mdW5jdGlvbiBjaGVja1JhbmdlcyhyYW5nZXMpIHtcbiAgICBpZiAoIXJhbmdlcy5sZW5ndGggfHwgcmFuZ2VzLnNvbWUociA9PiByLmZyb20gPj0gci50bykpXG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBpbm5lciBwYXJzZSByYW5nZXMgZ2l2ZW46IFwiICsgSlNPTi5zdHJpbmdpZnkocmFuZ2VzKSk7XG59XG5jbGFzcyBBY3RpdmVPdmVybGF5IHtcbiAgICBjb25zdHJ1Y3RvcihwYXJzZXIsIHByZWRpY2F0ZSwgbW91bnRzLCBpbmRleCwgc3RhcnQsIHRhcmdldCwgcHJldikge1xuICAgICAgICB0aGlzLnBhcnNlciA9IHBhcnNlcjtcbiAgICAgICAgdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gICAgICAgIHRoaXMubW91bnRzID0gbW91bnRzO1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgIHRoaXMucHJldiA9IHByZXY7XG4gICAgICAgIHRoaXMuZGVwdGggPSAwO1xuICAgICAgICB0aGlzLnJhbmdlcyA9IFtdO1xuICAgIH1cbn1cbmNvbnN0IHN0b3BwZWRJbm5lciA9IG5ldyBOb2RlUHJvcCh7IHBlck5vZGU6IHRydWUgfSk7XG5jbGFzcyBNaXhlZFBhcnNlIHtcbiAgICBjb25zdHJ1Y3RvcihiYXNlLCBuZXN0LCBpbnB1dCwgZnJhZ21lbnRzLCByYW5nZXMpIHtcbiAgICAgICAgdGhpcy5uZXN0ID0gbmVzdDtcbiAgICAgICAgdGhpcy5pbnB1dCA9IGlucHV0O1xuICAgICAgICB0aGlzLmZyYWdtZW50cyA9IGZyYWdtZW50cztcbiAgICAgICAgdGhpcy5yYW5nZXMgPSByYW5nZXM7XG4gICAgICAgIHRoaXMuaW5uZXIgPSBbXTtcbiAgICAgICAgdGhpcy5pbm5lckRvbmUgPSAwO1xuICAgICAgICB0aGlzLmJhc2VUcmVlID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdG9wcGVkQXQgPSBudWxsO1xuICAgICAgICB0aGlzLmJhc2VQYXJzZSA9IGJhc2U7XG4gICAgfVxuICAgIGFkdmFuY2UoKSB7XG4gICAgICAgIGlmICh0aGlzLmJhc2VQYXJzZSkge1xuICAgICAgICAgICAgbGV0IGRvbmUgPSB0aGlzLmJhc2VQYXJzZS5hZHZhbmNlKCk7XG4gICAgICAgICAgICBpZiAoIWRvbmUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB0aGlzLmJhc2VQYXJzZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmJhc2VUcmVlID0gZG9uZTtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRJbm5lcigpO1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RvcHBlZEF0ICE9IG51bGwpXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaW5uZXIgb2YgdGhpcy5pbm5lcilcbiAgICAgICAgICAgICAgICAgICAgaW5uZXIucGFyc2Uuc3RvcEF0KHRoaXMuc3RvcHBlZEF0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pbm5lckRvbmUgPT0gdGhpcy5pbm5lci5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSB0aGlzLmJhc2VUcmVlO1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RvcHBlZEF0ICE9IG51bGwpXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbmV3IFRyZWUocmVzdWx0LnR5cGUsIHJlc3VsdC5jaGlsZHJlbiwgcmVzdWx0LnBvc2l0aW9ucywgcmVzdWx0Lmxlbmd0aCwgcmVzdWx0LnByb3BWYWx1ZXMuY29uY2F0KFtbc3RvcHBlZElubmVyLCB0aGlzLnN0b3BwZWRBdF1dKSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGxldCBpbm5lciA9IHRoaXMuaW5uZXJbdGhpcy5pbm5lckRvbmVdLCBkb25lID0gaW5uZXIucGFyc2UuYWR2YW5jZSgpO1xuICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgdGhpcy5pbm5lckRvbmUrKztcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBzb21ld2hhdCBkb2RneSBidXQgc3VwZXIgaGVscGZ1bCBoYWNrIHdoZXJlIHdlXG4gICAgICAgICAgICAvLyBwYXRjaCB1cCBub2RlcyBjcmVhdGVkIGJ5IHRoZSBpbm5lciBwYXJzZSAoYW5kIHRodXNcbiAgICAgICAgICAgIC8vIHByZXN1bWFibHkgbm90IGFsaWFzZWQgYW55d2hlcmUgZWxzZSkgdG8gaG9sZCB0aGUgaW5mb3JtYXRpb25cbiAgICAgICAgICAgIC8vIGFib3V0IHRoZSBpbm5lciBwYXJzZS5cbiAgICAgICAgICAgIGxldCBwcm9wcyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShudWxsKSwgaW5uZXIudGFyZ2V0LnByb3BzKTtcbiAgICAgICAgICAgIHByb3BzW05vZGVQcm9wLm1vdW50ZWQuaWRdID0gbmV3IE1vdW50ZWRUcmVlKGRvbmUsIGlubmVyLm92ZXJsYXksIGlubmVyLnBhcnNlcik7XG4gICAgICAgICAgICBpbm5lci50YXJnZXQucHJvcHMgPSBwcm9wcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZ2V0IHBhcnNlZFBvcygpIHtcbiAgICAgICAgaWYgKHRoaXMuYmFzZVBhcnNlKVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIGxldCBwb3MgPSB0aGlzLmlucHV0Lmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuaW5uZXJEb25lOyBpIDwgdGhpcy5pbm5lci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuaW5uZXJbaV0uZnJvbSA8IHBvcylcbiAgICAgICAgICAgICAgICBwb3MgPSBNYXRoLm1pbihwb3MsIHRoaXMuaW5uZXJbaV0ucGFyc2UucGFyc2VkUG9zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcG9zO1xuICAgIH1cbiAgICBzdG9wQXQocG9zKSB7XG4gICAgICAgIHRoaXMuc3RvcHBlZEF0ID0gcG9zO1xuICAgICAgICBpZiAodGhpcy5iYXNlUGFyc2UpXG4gICAgICAgICAgICB0aGlzLmJhc2VQYXJzZS5zdG9wQXQocG9zKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuaW5uZXJEb25lOyBpIDwgdGhpcy5pbm5lci5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICB0aGlzLmlubmVyW2ldLnBhcnNlLnN0b3BBdChwb3MpO1xuICAgIH1cbiAgICBzdGFydElubmVyKCkge1xuICAgICAgICBsZXQgZnJhZ21lbnRDdXJzb3IgPSBuZXcgRnJhZ21lbnRDdXJzb3IodGhpcy5mcmFnbWVudHMpO1xuICAgICAgICBsZXQgb3ZlcmxheSA9IG51bGw7XG4gICAgICAgIGxldCBjb3ZlcmVkID0gbnVsbDtcbiAgICAgICAgbGV0IGN1cnNvciA9IG5ldyBUcmVlQ3Vyc29yKG5ldyBUcmVlTm9kZSh0aGlzLmJhc2VUcmVlLCB0aGlzLnJhbmdlc1swXS5mcm9tLCAwLCBudWxsKSwgZXhwb3J0cy5JdGVyTW9kZS5JbmNsdWRlQW5vbnltb3VzIHwgZXhwb3J0cy5JdGVyTW9kZS5JZ25vcmVNb3VudHMpO1xuICAgICAgICBzY2FuOiBmb3IgKGxldCBuZXN0LCBpc0NvdmVyZWQ7Oykge1xuICAgICAgICAgICAgbGV0IGVudGVyID0gdHJ1ZSwgcmFuZ2U7XG4gICAgICAgICAgICBpZiAodGhpcy5zdG9wcGVkQXQgIT0gbnVsbCAmJiBjdXJzb3IuZnJvbSA+PSB0aGlzLnN0b3BwZWRBdCkge1xuICAgICAgICAgICAgICAgIGVudGVyID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChmcmFnbWVudEN1cnNvci5oYXNOb2RlKGN1cnNvcikpIHtcbiAgICAgICAgICAgICAgICBpZiAob3ZlcmxheSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbWF0Y2ggPSBvdmVybGF5Lm1vdW50cy5maW5kKG0gPT4gbS5mcmFnLmZyb20gPD0gY3Vyc29yLmZyb20gJiYgbS5mcmFnLnRvID49IGN1cnNvci50byAmJiBtLm1vdW50Lm92ZXJsYXkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2gpXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCByIG9mIG1hdGNoLm1vdW50Lm92ZXJsYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZnJvbSA9IHIuZnJvbSArIG1hdGNoLnBvcywgdG8gPSByLnRvICsgbWF0Y2gucG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmcm9tID49IGN1cnNvci5mcm9tICYmIHRvIDw9IGN1cnNvci50byAmJiAhb3ZlcmxheS5yYW5nZXMuc29tZShyID0+IHIuZnJvbSA8IHRvICYmIHIudG8gPiBmcm9tKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmxheS5yYW5nZXMucHVzaCh7IGZyb20sIHRvIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbnRlciA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY292ZXJlZCAmJiAoaXNDb3ZlcmVkID0gY2hlY2tDb3Zlcihjb3ZlcmVkLnJhbmdlcywgY3Vyc29yLmZyb20sIGN1cnNvci50bykpKSB7XG4gICAgICAgICAgICAgICAgZW50ZXIgPSBpc0NvdmVyZWQgIT0gMiAvKiBDb3Zlci5GdWxsICovO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIWN1cnNvci50eXBlLmlzQW5vbnltb3VzICYmIChuZXN0ID0gdGhpcy5uZXN0KGN1cnNvciwgdGhpcy5pbnB1dCkpICYmXG4gICAgICAgICAgICAgICAgKGN1cnNvci5mcm9tIDwgY3Vyc29yLnRvIHx8ICFuZXN0Lm92ZXJsYXkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjdXJzb3IudHJlZSlcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWxpemUoY3Vyc29yKTtcbiAgICAgICAgICAgICAgICBsZXQgb2xkTW91bnRzID0gZnJhZ21lbnRDdXJzb3IuZmluZE1vdW50cyhjdXJzb3IuZnJvbSwgbmVzdC5wYXJzZXIpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbmVzdC5vdmVybGF5ID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICBvdmVybGF5ID0gbmV3IEFjdGl2ZU92ZXJsYXkobmVzdC5wYXJzZXIsIG5lc3Qub3ZlcmxheSwgb2xkTW91bnRzLCB0aGlzLmlubmVyLmxlbmd0aCwgY3Vyc29yLmZyb20sIGN1cnNvci50cmVlLCBvdmVybGF5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCByYW5nZXMgPSBwdW5jaFJhbmdlcyh0aGlzLnJhbmdlcywgbmVzdC5vdmVybGF5IHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoY3Vyc29yLmZyb20gPCBjdXJzb3IudG8gPyBbbmV3IFJhbmdlKGN1cnNvci5mcm9tLCBjdXJzb3IudG8pXSA6IFtdKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZXMubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tSYW5nZXMocmFuZ2VzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmdlcy5sZW5ndGggfHwgIW5lc3Qub3ZlcmxheSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5uZXIucHVzaChuZXcgSW5uZXJQYXJzZShuZXN0LnBhcnNlciwgcmFuZ2VzLmxlbmd0aCA/IG5lc3QucGFyc2VyLnN0YXJ0UGFyc2UodGhpcy5pbnB1dCwgZW50ZXJGcmFnbWVudHMob2xkTW91bnRzLCByYW5nZXMpLCByYW5nZXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBuZXN0LnBhcnNlci5zdGFydFBhcnNlKFwiXCIpLCBuZXN0Lm92ZXJsYXkgPyBuZXN0Lm92ZXJsYXkubWFwKHIgPT4gbmV3IFJhbmdlKHIuZnJvbSAtIGN1cnNvci5mcm9tLCByLnRvIC0gY3Vyc29yLmZyb20pKSA6IG51bGwsIGN1cnNvci50cmVlLCByYW5nZXMubGVuZ3RoID8gcmFuZ2VzWzBdLmZyb20gOiBjdXJzb3IuZnJvbSkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW5lc3Qub3ZlcmxheSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudGVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJhbmdlcy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3ZlcmVkID0geyByYW5nZXMsIGRlcHRoOiAwLCBwcmV2OiBjb3ZlcmVkIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAob3ZlcmxheSAmJiAocmFuZ2UgPSBvdmVybGF5LnByZWRpY2F0ZShjdXJzb3IpKSkge1xuICAgICAgICAgICAgICAgIGlmIChyYW5nZSA9PT0gdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSBuZXcgUmFuZ2UoY3Vyc29yLmZyb20sIGN1cnNvci50byk7XG4gICAgICAgICAgICAgICAgaWYgKHJhbmdlLmZyb20gPCByYW5nZS50bylcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmxheS5yYW5nZXMucHVzaChyYW5nZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZW50ZXIgJiYgY3Vyc29yLmZpcnN0Q2hpbGQoKSkge1xuICAgICAgICAgICAgICAgIGlmIChvdmVybGF5KVxuICAgICAgICAgICAgICAgICAgICBvdmVybGF5LmRlcHRoKys7XG4gICAgICAgICAgICAgICAgaWYgKGNvdmVyZWQpXG4gICAgICAgICAgICAgICAgICAgIGNvdmVyZWQuZGVwdGgrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnNvci5uZXh0U2libGluZygpKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY3Vyc29yLnBhcmVudCgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgc2NhbjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG92ZXJsYXkgJiYgIS0tb3ZlcmxheS5kZXB0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJhbmdlcyA9IHB1bmNoUmFuZ2VzKHRoaXMucmFuZ2VzLCBvdmVybGF5LnJhbmdlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrUmFuZ2VzKHJhbmdlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbm5lci5zcGxpY2Uob3ZlcmxheS5pbmRleCwgMCwgbmV3IElubmVyUGFyc2Uob3ZlcmxheS5wYXJzZXIsIG92ZXJsYXkucGFyc2VyLnN0YXJ0UGFyc2UodGhpcy5pbnB1dCwgZW50ZXJGcmFnbWVudHMob3ZlcmxheS5tb3VudHMsIHJhbmdlcyksIHJhbmdlcyksIG92ZXJsYXkucmFuZ2VzLm1hcChyID0+IG5ldyBSYW5nZShyLmZyb20gLSBvdmVybGF5LnN0YXJ0LCByLnRvIC0gb3ZlcmxheS5zdGFydCkpLCBvdmVybGF5LnRhcmdldCwgcmFuZ2VzWzBdLmZyb20pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJsYXkgPSBvdmVybGF5LnByZXY7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvdmVyZWQgJiYgIS0tY292ZXJlZC5kZXB0aClcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdmVyZWQgPSBjb3ZlcmVkLnByZXY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gY2hlY2tDb3Zlcihjb3ZlcmVkLCBmcm9tLCB0bykge1xuICAgIGZvciAobGV0IHJhbmdlIG9mIGNvdmVyZWQpIHtcbiAgICAgICAgaWYgKHJhbmdlLmZyb20gPj0gdG8pXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgaWYgKHJhbmdlLnRvID4gZnJvbSlcbiAgICAgICAgICAgIHJldHVybiByYW5nZS5mcm9tIDw9IGZyb20gJiYgcmFuZ2UudG8gPj0gdG8gPyAyIC8qIENvdmVyLkZ1bGwgKi8gOiAxIC8qIENvdmVyLlBhcnRpYWwgKi87XG4gICAgfVxuICAgIHJldHVybiAwIC8qIENvdmVyLk5vbmUgKi87XG59XG4vLyBUYWtlIGEgcGllY2Ugb2YgYnVmZmVyIGFuZCBjb252ZXJ0IGl0IGludG8gYSBzdGFuZC1hbG9uZVxuLy8gVHJlZUJ1ZmZlci5cbmZ1bmN0aW9uIHNsaWNlQnVmKGJ1Ziwgc3RhcnRJLCBlbmRJLCBub2RlcywgcG9zaXRpb25zLCBvZmYpIHtcbiAgICBpZiAoc3RhcnRJIDwgZW5kSSkge1xuICAgICAgICBsZXQgZnJvbSA9IGJ1Zi5idWZmZXJbc3RhcnRJICsgMV07XG4gICAgICAgIG5vZGVzLnB1c2goYnVmLnNsaWNlKHN0YXJ0SSwgZW5kSSwgZnJvbSkpO1xuICAgICAgICBwb3NpdGlvbnMucHVzaChmcm9tIC0gb2ZmKTtcbiAgICB9XG59XG4vLyBUaGlzIGZ1bmN0aW9uIHRha2VzIGEgbm9kZSB0aGF0J3MgaW4gYSBidWZmZXIsIGFuZCBjb252ZXJ0cyBpdCwgYW5kXG4vLyBpdHMgcGFyZW50IGJ1ZmZlciBub2RlcywgaW50byBhIFRyZWUuIFRoaXMgaXMgYWdhaW4gYWN0aW5nIG9uIHRoZVxuLy8gYXNzdW1wdGlvbiB0aGF0IHRoZSB0cmVlcyBhbmQgYnVmZmVycyBoYXZlIGJlZW4gY29uc3RydWN0ZWQgYnkgdGhlXG4vLyBwYXJzZSB0aGF0IHdhcyByYW4gdmlhIHRoZSBtaXggcGFyc2VyLCBhbmQgdGh1cyBhcmVuJ3Qgc2hhcmVkIHdpdGhcbi8vIGFueSBvdGhlciBjb2RlLCBtYWtpbmcgdmlvbGF0aW9ucyBvZiB0aGUgaW1tdXRhYmlsaXR5IHNhZmUuXG5mdW5jdGlvbiBtYXRlcmlhbGl6ZShjdXJzb3IpIHtcbiAgICBsZXQgeyBub2RlIH0gPSBjdXJzb3IsIHN0YWNrID0gW107XG4gICAgbGV0IGJ1ZmZlciA9IG5vZGUuY29udGV4dC5idWZmZXI7XG4gICAgLy8gU2NhbiB1cCB0byB0aGUgbmVhcmVzdCB0cmVlXG4gICAgZG8ge1xuICAgICAgICBzdGFjay5wdXNoKGN1cnNvci5pbmRleCk7XG4gICAgICAgIGN1cnNvci5wYXJlbnQoKTtcbiAgICB9IHdoaWxlICghY3Vyc29yLnRyZWUpO1xuICAgIC8vIEZpbmQgdGhlIGluZGV4IG9mIHRoZSBidWZmZXIgaW4gdGhhdCB0cmVlXG4gICAgbGV0IGJhc2UgPSBjdXJzb3IudHJlZSwgaSA9IGJhc2UuY2hpbGRyZW4uaW5kZXhPZihidWZmZXIpO1xuICAgIGxldCBidWYgPSBiYXNlLmNoaWxkcmVuW2ldLCBiID0gYnVmLmJ1ZmZlciwgbmV3U3RhY2sgPSBbaV07XG4gICAgLy8gU3BsaXQgYSBsZXZlbCBpbiB0aGUgYnVmZmVyLCBwdXR0aW5nIHRoZSBub2RlcyBiZWZvcmUgYW5kIGFmdGVyXG4gICAgLy8gdGhlIGNoaWxkIHRoYXQgY29udGFpbnMgYG5vZGVgIGludG8gbmV3IGJ1ZmZlcnMuXG4gICAgZnVuY3Rpb24gc3BsaXQoc3RhcnRJLCBlbmRJLCB0eXBlLCBpbm5lck9mZnNldCwgbGVuZ3RoLCBzdGFja1Bvcykge1xuICAgICAgICBsZXQgdGFyZ2V0SSA9IHN0YWNrW3N0YWNrUG9zXTtcbiAgICAgICAgbGV0IGNoaWxkcmVuID0gW10sIHBvc2l0aW9ucyA9IFtdO1xuICAgICAgICBzbGljZUJ1ZihidWYsIHN0YXJ0SSwgdGFyZ2V0SSwgY2hpbGRyZW4sIHBvc2l0aW9ucywgaW5uZXJPZmZzZXQpO1xuICAgICAgICBsZXQgZnJvbSA9IGJbdGFyZ2V0SSArIDFdLCB0byA9IGJbdGFyZ2V0SSArIDJdO1xuICAgICAgICBuZXdTdGFjay5wdXNoKGNoaWxkcmVuLmxlbmd0aCk7XG4gICAgICAgIGxldCBjaGlsZCA9IHN0YWNrUG9zXG4gICAgICAgICAgICA/IHNwbGl0KHRhcmdldEkgKyA0LCBiW3RhcmdldEkgKyAzXSwgYnVmLnNldC50eXBlc1tiW3RhcmdldEldXSwgZnJvbSwgdG8gLSBmcm9tLCBzdGFja1BvcyAtIDEpXG4gICAgICAgICAgICA6IG5vZGUudG9UcmVlKCk7XG4gICAgICAgIGNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgICBwb3NpdGlvbnMucHVzaChmcm9tIC0gaW5uZXJPZmZzZXQpO1xuICAgICAgICBzbGljZUJ1ZihidWYsIGJbdGFyZ2V0SSArIDNdLCBlbmRJLCBjaGlsZHJlbiwgcG9zaXRpb25zLCBpbm5lck9mZnNldCk7XG4gICAgICAgIHJldHVybiBuZXcgVHJlZSh0eXBlLCBjaGlsZHJlbiwgcG9zaXRpb25zLCBsZW5ndGgpO1xuICAgIH1cbiAgICBiYXNlLmNoaWxkcmVuW2ldID0gc3BsaXQoMCwgYi5sZW5ndGgsIE5vZGVUeXBlLm5vbmUsIDAsIGJ1Zi5sZW5ndGgsIHN0YWNrLmxlbmd0aCAtIDEpO1xuICAgIC8vIE1vdmUgdGhlIGN1cnNvciBiYWNrIHRvIHRoZSB0YXJnZXQgbm9kZVxuICAgIGZvciAobGV0IGluZGV4IG9mIG5ld1N0YWNrKSB7XG4gICAgICAgIGxldCB0cmVlID0gY3Vyc29yLnRyZWUuY2hpbGRyZW5baW5kZXhdLCBwb3MgPSBjdXJzb3IudHJlZS5wb3NpdGlvbnNbaW5kZXhdO1xuICAgICAgICBjdXJzb3IueWllbGQobmV3IFRyZWVOb2RlKHRyZWUsIHBvcyArIGN1cnNvci5mcm9tLCBpbmRleCwgY3Vyc29yLl90cmVlKSk7XG4gICAgfVxufVxuY2xhc3MgU3RydWN0dXJlQ3Vyc29yIHtcbiAgICBjb25zdHJ1Y3Rvcihyb290LCBvZmZzZXQpIHtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmN1cnNvciA9IHJvb3QuY3Vyc29yKGV4cG9ydHMuSXRlck1vZGUuSW5jbHVkZUFub255bW91cyB8IGV4cG9ydHMuSXRlck1vZGUuSWdub3JlTW91bnRzKTtcbiAgICB9XG4gICAgLy8gTW92ZSB0byB0aGUgZmlyc3Qgbm9kZSAoaW4gcHJlLW9yZGVyKSB0aGF0IHN0YXJ0cyBhdCBvciBhZnRlciBgcG9zYC5cbiAgICBtb3ZlVG8ocG9zKSB7XG4gICAgICAgIGxldCB7IGN1cnNvciB9ID0gdGhpcywgcCA9IHBvcyAtIHRoaXMub2Zmc2V0O1xuICAgICAgICB3aGlsZSAoIXRoaXMuZG9uZSAmJiBjdXJzb3IuZnJvbSA8IHApIHtcbiAgICAgICAgICAgIGlmIChjdXJzb3IudG8gPj0gcG9zICYmIGN1cnNvci5lbnRlcihwLCAxLCBleHBvcnRzLkl0ZXJNb2RlLklnbm9yZU92ZXJsYXlzIHwgZXhwb3J0cy5JdGVyTW9kZS5FeGNsdWRlQnVmZmVycykpIDtcbiAgICAgICAgICAgIGVsc2UgaWYgKCFjdXJzb3IubmV4dChmYWxzZSkpXG4gICAgICAgICAgICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBoYXNOb2RlKGN1cnNvcikge1xuICAgICAgICB0aGlzLm1vdmVUbyhjdXJzb3IuZnJvbSk7XG4gICAgICAgIGlmICghdGhpcy5kb25lICYmIHRoaXMuY3Vyc29yLmZyb20gKyB0aGlzLm9mZnNldCA9PSBjdXJzb3IuZnJvbSAmJiB0aGlzLmN1cnNvci50cmVlKSB7XG4gICAgICAgICAgICBmb3IgKGxldCB0cmVlID0gdGhpcy5jdXJzb3IudHJlZTs7KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRyZWUgPT0gY3Vyc29yLnRyZWUpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIGlmICh0cmVlLmNoaWxkcmVuLmxlbmd0aCAmJiB0cmVlLnBvc2l0aW9uc1swXSA9PSAwICYmIHRyZWUuY2hpbGRyZW5bMF0gaW5zdGFuY2VvZiBUcmVlKVxuICAgICAgICAgICAgICAgICAgICB0cmVlID0gdHJlZS5jaGlsZHJlblswXTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5jbGFzcyBGcmFnbWVudEN1cnNvciB7XG4gICAgY29uc3RydWN0b3IoZnJhZ21lbnRzKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5mcmFnbWVudHMgPSBmcmFnbWVudHM7XG4gICAgICAgIHRoaXMuY3VyVG8gPSAwO1xuICAgICAgICB0aGlzLmZyYWdJID0gMDtcbiAgICAgICAgaWYgKGZyYWdtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxldCBmaXJzdCA9IHRoaXMuY3VyRnJhZyA9IGZyYWdtZW50c1swXTtcbiAgICAgICAgICAgIHRoaXMuY3VyVG8gPSAoX2EgPSBmaXJzdC50cmVlLnByb3Aoc3RvcHBlZElubmVyKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZmlyc3QudG87XG4gICAgICAgICAgICB0aGlzLmlubmVyID0gbmV3IFN0cnVjdHVyZUN1cnNvcihmaXJzdC50cmVlLCAtZmlyc3Qub2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY3VyRnJhZyA9IHRoaXMuaW5uZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIGhhc05vZGUobm9kZSkge1xuICAgICAgICB3aGlsZSAodGhpcy5jdXJGcmFnICYmIG5vZGUuZnJvbSA+PSB0aGlzLmN1clRvKVxuICAgICAgICAgICAgdGhpcy5uZXh0RnJhZygpO1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJGcmFnICYmIHRoaXMuY3VyRnJhZy5mcm9tIDw9IG5vZGUuZnJvbSAmJiB0aGlzLmN1clRvID49IG5vZGUudG8gJiYgdGhpcy5pbm5lci5oYXNOb2RlKG5vZGUpO1xuICAgIH1cbiAgICBuZXh0RnJhZygpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLmZyYWdJKys7XG4gICAgICAgIGlmICh0aGlzLmZyYWdJID09IHRoaXMuZnJhZ21lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5jdXJGcmFnID0gdGhpcy5pbm5lciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgZnJhZyA9IHRoaXMuY3VyRnJhZyA9IHRoaXMuZnJhZ21lbnRzW3RoaXMuZnJhZ0ldO1xuICAgICAgICAgICAgdGhpcy5jdXJUbyA9IChfYSA9IGZyYWcudHJlZS5wcm9wKHN0b3BwZWRJbm5lcikpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGZyYWcudG87XG4gICAgICAgICAgICB0aGlzLmlubmVyID0gbmV3IFN0cnVjdHVyZUN1cnNvcihmcmFnLnRyZWUsIC1mcmFnLm9mZnNldCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZmluZE1vdW50cyhwb3MsIHBhcnNlcikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICAgICAgaWYgKHRoaXMuaW5uZXIpIHtcbiAgICAgICAgICAgIHRoaXMuaW5uZXIuY3Vyc29yLm1vdmVUbyhwb3MsIDEpO1xuICAgICAgICAgICAgZm9yIChsZXQgcG9zID0gdGhpcy5pbm5lci5jdXJzb3Iubm9kZTsgcG9zOyBwb3MgPSBwb3MucGFyZW50KSB7XG4gICAgICAgICAgICAgICAgbGV0IG1vdW50ID0gKF9hID0gcG9zLnRyZWUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wcm9wKE5vZGVQcm9wLm1vdW50ZWQpO1xuICAgICAgICAgICAgICAgIGlmIChtb3VudCAmJiBtb3VudC5wYXJzZXIgPT0gcGFyc2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSB0aGlzLmZyYWdJOyBpIDwgdGhpcy5mcmFnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmcmFnID0gdGhpcy5mcmFnbWVudHNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZnJhZy5mcm9tID49IHBvcy50bylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmcmFnLnRyZWUgPT0gdGhpcy5jdXJGcmFnLnRyZWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmFnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvcy5mcm9tIC0gZnJhZy5vZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vdW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5mdW5jdGlvbiBwdW5jaFJhbmdlcyhvdXRlciwgcmFuZ2VzKSB7XG4gICAgbGV0IGNvcHkgPSBudWxsLCBjdXJyZW50ID0gcmFuZ2VzO1xuICAgIGZvciAobGV0IGkgPSAxLCBqID0gMDsgaSA8IG91dGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBnYXBGcm9tID0gb3V0ZXJbaSAtIDFdLnRvLCBnYXBUbyA9IG91dGVyW2ldLmZyb207XG4gICAgICAgIGZvciAoOyBqIDwgY3VycmVudC5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgbGV0IHIgPSBjdXJyZW50W2pdO1xuICAgICAgICAgICAgaWYgKHIuZnJvbSA+PSBnYXBUbylcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGlmIChyLnRvIDw9IGdhcEZyb20pXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBpZiAoIWNvcHkpXG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGNvcHkgPSByYW5nZXMuc2xpY2UoKTtcbiAgICAgICAgICAgIGlmIChyLmZyb20gPCBnYXBGcm9tKSB7XG4gICAgICAgICAgICAgICAgY29weVtqXSA9IG5ldyBSYW5nZShyLmZyb20sIGdhcEZyb20pO1xuICAgICAgICAgICAgICAgIGlmIChyLnRvID4gZ2FwVG8pXG4gICAgICAgICAgICAgICAgICAgIGNvcHkuc3BsaWNlKGogKyAxLCAwLCBuZXcgUmFuZ2UoZ2FwVG8sIHIudG8pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHIudG8gPiBnYXBUbykge1xuICAgICAgICAgICAgICAgIGNvcHlbai0tXSA9IG5ldyBSYW5nZShnYXBUbywgci50byk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb3B5LnNwbGljZShqLS0sIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjdXJyZW50O1xufVxuZnVuY3Rpb24gZmluZENvdmVyQ2hhbmdlcyhhLCBiLCBmcm9tLCB0bykge1xuICAgIGxldCBpQSA9IDAsIGlCID0gMCwgaW5BID0gZmFsc2UsIGluQiA9IGZhbHNlLCBwb3MgPSAtMWU5O1xuICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICBmb3IgKDs7KSB7XG4gICAgICAgIGxldCBuZXh0QSA9IGlBID09IGEubGVuZ3RoID8gMWU5IDogaW5BID8gYVtpQV0udG8gOiBhW2lBXS5mcm9tO1xuICAgICAgICBsZXQgbmV4dEIgPSBpQiA9PSBiLmxlbmd0aCA/IDFlOSA6IGluQiA/IGJbaUJdLnRvIDogYltpQl0uZnJvbTtcbiAgICAgICAgaWYgKGluQSAhPSBpbkIpIHtcbiAgICAgICAgICAgIGxldCBzdGFydCA9IE1hdGgubWF4KHBvcywgZnJvbSksIGVuZCA9IE1hdGgubWluKG5leHRBLCBuZXh0QiwgdG8pO1xuICAgICAgICAgICAgaWYgKHN0YXJ0IDwgZW5kKVxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5ldyBSYW5nZShzdGFydCwgZW5kKSk7XG4gICAgICAgIH1cbiAgICAgICAgcG9zID0gTWF0aC5taW4obmV4dEEsIG5leHRCKTtcbiAgICAgICAgaWYgKHBvcyA9PSAxZTkpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgaWYgKG5leHRBID09IHBvcykge1xuICAgICAgICAgICAgaWYgKCFpbkEpXG4gICAgICAgICAgICAgICAgaW5BID0gdHJ1ZTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGluQSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlBKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5leHRCID09IHBvcykge1xuICAgICAgICAgICAgaWYgKCFpbkIpXG4gICAgICAgICAgICAgICAgaW5CID0gdHJ1ZTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGluQiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlCKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8vIEdpdmVuIGEgbnVtYmVyIG9mIGZyYWdtZW50cyBmb3IgdGhlIG91dGVyIHRyZWUsIGFuZCBhIHNldCBvZiByYW5nZXNcbi8vIHRvIHBhcnNlLCBmaW5kIGZyYWdtZW50cyBmb3IgaW5uZXIgdHJlZXMgbW91bnRlZCBhcm91bmQgdGhvc2Vcbi8vIHJhbmdlcywgaWYgYW55LlxuZnVuY3Rpb24gZW50ZXJGcmFnbWVudHMobW91bnRzLCByYW5nZXMpIHtcbiAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgZm9yIChsZXQgeyBwb3MsIG1vdW50LCBmcmFnIH0gb2YgbW91bnRzKSB7XG4gICAgICAgIGxldCBzdGFydFBvcyA9IHBvcyArIChtb3VudC5vdmVybGF5ID8gbW91bnQub3ZlcmxheVswXS5mcm9tIDogMCksIGVuZFBvcyA9IHN0YXJ0UG9zICsgbW91bnQudHJlZS5sZW5ndGg7XG4gICAgICAgIGxldCBmcm9tID0gTWF0aC5tYXgoZnJhZy5mcm9tLCBzdGFydFBvcyksIHRvID0gTWF0aC5taW4oZnJhZy50bywgZW5kUG9zKTtcbiAgICAgICAgaWYgKG1vdW50Lm92ZXJsYXkpIHtcbiAgICAgICAgICAgIGxldCBvdmVybGF5ID0gbW91bnQub3ZlcmxheS5tYXAociA9PiBuZXcgUmFuZ2Uoci5mcm9tICsgcG9zLCByLnRvICsgcG9zKSk7XG4gICAgICAgICAgICBsZXQgY2hhbmdlcyA9IGZpbmRDb3ZlckNoYW5nZXMocmFuZ2VzLCBvdmVybGF5LCBmcm9tLCB0byk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgcG9zID0gZnJvbTs7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBsYXN0ID0gaSA9PSBjaGFuZ2VzLmxlbmd0aCwgZW5kID0gbGFzdCA/IHRvIDogY2hhbmdlc1tpXS5mcm9tO1xuICAgICAgICAgICAgICAgIGlmIChlbmQgPiBwb3MpXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5ldyBUcmVlRnJhZ21lbnQocG9zLCBlbmQsIG1vdW50LnRyZWUsIC1zdGFydFBvcywgZnJhZy5mcm9tID49IHBvcyB8fCBmcmFnLm9wZW5TdGFydCwgZnJhZy50byA8PSBlbmQgfHwgZnJhZy5vcGVuRW5kKSk7XG4gICAgICAgICAgICAgICAgaWYgKGxhc3QpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIHBvcyA9IGNoYW5nZXNbaV0udG87XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChuZXcgVHJlZUZyYWdtZW50KGZyb20sIHRvLCBtb3VudC50cmVlLCAtc3RhcnRQb3MsIGZyYWcuZnJvbSA+PSBzdGFydFBvcyB8fCBmcmFnLm9wZW5TdGFydCwgZnJhZy50byA8PSBlbmRQb3MgfHwgZnJhZy5vcGVuRW5kKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0cy5EZWZhdWx0QnVmZmVyTGVuZ3RoID0gRGVmYXVsdEJ1ZmZlckxlbmd0aDtcbmV4cG9ydHMuTW91bnRlZFRyZWUgPSBNb3VudGVkVHJlZTtcbmV4cG9ydHMuTm9kZVByb3AgPSBOb2RlUHJvcDtcbmV4cG9ydHMuTm9kZVNldCA9IE5vZGVTZXQ7XG5leHBvcnRzLk5vZGVUeXBlID0gTm9kZVR5cGU7XG5leHBvcnRzLk5vZGVXZWFrTWFwID0gTm9kZVdlYWtNYXA7XG5leHBvcnRzLlBhcnNlciA9IFBhcnNlcjtcbmV4cG9ydHMuVHJlZSA9IFRyZWU7XG5leHBvcnRzLlRyZWVCdWZmZXIgPSBUcmVlQnVmZmVyO1xuZXhwb3J0cy5UcmVlQ3Vyc29yID0gVHJlZUN1cnNvcjtcbmV4cG9ydHMuVHJlZUZyYWdtZW50ID0gVHJlZUZyYWdtZW50O1xuZXhwb3J0cy5wYXJzZU1peGVkID0gcGFyc2VNaXhlZDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNvbW1vbiA9IHJlcXVpcmUoJ0BsZXplci9jb21tb24nKTtcblxubGV0IG5leHRUYWdJRCA9IDA7XG4vKipcbkhpZ2hsaWdodGluZyB0YWdzIGFyZSBtYXJrZXJzIHRoYXQgZGVub3RlIGEgaGlnaGxpZ2h0aW5nIGNhdGVnb3J5LlxuVGhleSBhcmUgW2Fzc29jaWF0ZWRdKCNoaWdobGlnaHQuc3R5bGVUYWdzKSB3aXRoIHBhcnRzIG9mIGEgc3ludGF4XG50cmVlIGJ5IGEgbGFuZ3VhZ2UgbW9kZSwgYW5kIHRoZW4gbWFwcGVkIHRvIGFuIGFjdHVhbCBDU1Mgc3R5bGUgYnlcbmEgW2hpZ2hsaWdodGVyXSgjaGlnaGxpZ2h0LkhpZ2hsaWdodGVyKS5cblxuQmVjYXVzZSBzeW50YXggdHJlZSBub2RlIHR5cGVzIGFuZCBoaWdobGlnaHQgc3R5bGVzIGhhdmUgdG8gYmVcbmFibGUgdG8gdGFsayB0aGUgc2FtZSBsYW5ndWFnZSwgQ29kZU1pcnJvciB1c2VzIGEgbW9zdGx5IF9jbG9zZWRfXG5bdm9jYWJ1bGFyeV0oI2hpZ2hsaWdodC50YWdzKSBvZiBzeW50YXggdGFncyAoYXMgb3Bwb3NlZCB0b1xudHJhZGl0aW9uYWwgb3BlbiBzdHJpbmctYmFzZWQgc3lzdGVtcywgd2hpY2ggbWFrZSBpdCBoYXJkIGZvclxuaGlnaGxpZ2h0aW5nIHRoZW1lcyB0byBjb3ZlciBhbGwgdGhlIHRva2VucyBwcm9kdWNlZCBieSB0aGVcbnZhcmlvdXMgbGFuZ3VhZ2VzKS5cblxuSXQgX2lzXyBwb3NzaWJsZSB0byBbZGVmaW5lXSgjaGlnaGxpZ2h0LlRhZ15kZWZpbmUpIHlvdXIgb3duXG5oaWdobGlnaHRpbmcgdGFncyBmb3Igc3lzdGVtLWludGVybmFsIHVzZSAod2hlcmUgeW91IGNvbnRyb2wgYm90aFxudGhlIGxhbmd1YWdlIHBhY2thZ2UgYW5kIHRoZSBoaWdobGlnaHRlciksIGJ1dCBzdWNoIHRhZ3Mgd2lsbCBub3RcbmJlIHBpY2tlZCB1cCBieSByZWd1bGFyIGhpZ2hsaWdodGVycyAodGhvdWdoIHlvdSBjYW4gZGVyaXZlIHRoZW1cbmZyb20gc3RhbmRhcmQgdGFncyB0byBhbGxvdyBoaWdobGlnaHRlcnMgdG8gZmFsbCBiYWNrIHRvIHRob3NlKS5cbiovXG5jbGFzcyBUYWcge1xuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgVGhlIHNldCBvZiB0aGlzIHRhZyBhbmQgYWxsIGl0cyBwYXJlbnQgdGFncywgc3RhcnRpbmcgd2l0aFxuICAgIHRoaXMgb25lIGl0c2VsZiBhbmQgc29ydGVkIGluIG9yZGVyIG9mIGRlY3JlYXNpbmcgc3BlY2lmaWNpdHkuXG4gICAgKi9cbiAgICBzZXQsIFxuICAgIC8qKlxuICAgIFRoZSBiYXNlIHVubW9kaWZpZWQgdGFnIHRoYXQgdGhpcyBvbmUgaXMgYmFzZWQgb24sIGlmIGl0J3NcbiAgICBtb2RpZmllZCBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGJhc2UsIFxuICAgIC8qKlxuICAgIFRoZSBtb2RpZmllcnMgYXBwbGllZCB0byB0aGlzLmJhc2UgQGludGVybmFsXG4gICAgKi9cbiAgICBtb2RpZmllZCkge1xuICAgICAgICB0aGlzLnNldCA9IHNldDtcbiAgICAgICAgdGhpcy5iYXNlID0gYmFzZTtcbiAgICAgICAgdGhpcy5tb2RpZmllZCA9IG1vZGlmaWVkO1xuICAgICAgICAvKipcbiAgICAgICAgQGludGVybmFsXG4gICAgICAgICovXG4gICAgICAgIHRoaXMuaWQgPSBuZXh0VGFnSUQrKztcbiAgICB9XG4gICAgLyoqXG4gICAgRGVmaW5lIGEgbmV3IHRhZy4gSWYgYHBhcmVudGAgaXMgZ2l2ZW4sIHRoZSB0YWcgaXMgdHJlYXRlZCBhcyBhXG4gICAgc3ViLXRhZyBvZiB0aGF0IHBhcmVudCwgYW5kXG4gICAgW2hpZ2hsaWdodGVyc10oI2hpZ2hsaWdodC50YWdIaWdobGlnaHRlcikgdGhhdCBkb24ndCBtZW50aW9uXG4gICAgdGhpcyB0YWcgd2lsbCB0cnkgdG8gZmFsbCBiYWNrIHRvIHRoZSBwYXJlbnQgdGFnIChvciBncmFuZHBhcmVudFxuICAgIHRhZywgZXRjKS5cbiAgICAqL1xuICAgIHN0YXRpYyBkZWZpbmUocGFyZW50KSB7XG4gICAgICAgIGlmIChwYXJlbnQgPT09IG51bGwgfHwgcGFyZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJlbnQuYmFzZSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbiBub3QgZGVyaXZlIGZyb20gYSBtb2RpZmllZCB0YWdcIik7XG4gICAgICAgIGxldCB0YWcgPSBuZXcgVGFnKFtdLCBudWxsLCBbXSk7XG4gICAgICAgIHRhZy5zZXQucHVzaCh0YWcpO1xuICAgICAgICBpZiAocGFyZW50KVxuICAgICAgICAgICAgZm9yIChsZXQgdCBvZiBwYXJlbnQuc2V0KVxuICAgICAgICAgICAgICAgIHRhZy5zZXQucHVzaCh0KTtcbiAgICAgICAgcmV0dXJuIHRhZztcbiAgICB9XG4gICAgLyoqXG4gICAgRGVmaW5lIGEgdGFnIF9tb2RpZmllcl8sIHdoaWNoIGlzIGEgZnVuY3Rpb24gdGhhdCwgZ2l2ZW4gYSB0YWcsXG4gICAgd2lsbCByZXR1cm4gYSB0YWcgdGhhdCBpcyBhIHN1YnRhZyBvZiB0aGUgb3JpZ2luYWwuIEFwcGx5aW5nIHRoZVxuICAgIHNhbWUgbW9kaWZpZXIgdG8gYSB0d2ljZSB0YWcgd2lsbCByZXR1cm4gdGhlIHNhbWUgdmFsdWUgKGBtMSh0MSlcbiAgICA9PSBtMSh0MSlgKSBhbmQgYXBwbHlpbmcgbXVsdGlwbGUgbW9kaWZpZXJzIHdpbGwsIHJlZ2FyZGxlc3Mgb3JcbiAgICBvcmRlciwgcHJvZHVjZSB0aGUgc2FtZSB0YWcgKGBtMShtMih0MSkpID09IG0yKG0xKHQxKSlgKS5cbiAgICBcbiAgICBXaGVuIG11bHRpcGxlIG1vZGlmaWVycyBhcmUgYXBwbGllZCB0byBhIGdpdmVuIGJhc2UgdGFnLCBlYWNoXG4gICAgc21hbGxlciBzZXQgb2YgbW9kaWZpZXJzIGlzIHJlZ2lzdGVyZWQgYXMgYSBwYXJlbnQsIHNvIHRoYXQgZm9yXG4gICAgZXhhbXBsZSBgbTEobTIobTModDEpKSlgIGlzIGEgc3VidHlwZSBvZiBgbTEobTIodDEpKWAsXG4gICAgYG0xKG0zKHQxKWAsIGFuZCBzbyBvbi5cbiAgICAqL1xuICAgIHN0YXRpYyBkZWZpbmVNb2RpZmllcigpIHtcbiAgICAgICAgbGV0IG1vZCA9IG5ldyBNb2RpZmllcjtcbiAgICAgICAgcmV0dXJuICh0YWcpID0+IHtcbiAgICAgICAgICAgIGlmICh0YWcubW9kaWZpZWQuaW5kZXhPZihtb2QpID4gLTEpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhZztcbiAgICAgICAgICAgIHJldHVybiBNb2RpZmllci5nZXQodGFnLmJhc2UgfHwgdGFnLCB0YWcubW9kaWZpZWQuY29uY2F0KG1vZCkuc29ydCgoYSwgYikgPT4gYS5pZCAtIGIuaWQpKTtcbiAgICAgICAgfTtcbiAgICB9XG59XG5sZXQgbmV4dE1vZGlmaWVySUQgPSAwO1xuY2xhc3MgTW9kaWZpZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmluc3RhbmNlcyA9IFtdO1xuICAgICAgICB0aGlzLmlkID0gbmV4dE1vZGlmaWVySUQrKztcbiAgICB9XG4gICAgc3RhdGljIGdldChiYXNlLCBtb2RzKSB7XG4gICAgICAgIGlmICghbW9kcy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gYmFzZTtcbiAgICAgICAgbGV0IGV4aXN0cyA9IG1vZHNbMF0uaW5zdGFuY2VzLmZpbmQodCA9PiB0LmJhc2UgPT0gYmFzZSAmJiBzYW1lQXJyYXkobW9kcywgdC5tb2RpZmllZCkpO1xuICAgICAgICBpZiAoZXhpc3RzKVxuICAgICAgICAgICAgcmV0dXJuIGV4aXN0cztcbiAgICAgICAgbGV0IHNldCA9IFtdLCB0YWcgPSBuZXcgVGFnKHNldCwgYmFzZSwgbW9kcyk7XG4gICAgICAgIGZvciAobGV0IG0gb2YgbW9kcylcbiAgICAgICAgICAgIG0uaW5zdGFuY2VzLnB1c2godGFnKTtcbiAgICAgICAgbGV0IGNvbmZpZ3MgPSBwb3dlclNldChtb2RzKTtcbiAgICAgICAgZm9yIChsZXQgcGFyZW50IG9mIGJhc2Uuc2V0KVxuICAgICAgICAgICAgaWYgKCFwYXJlbnQubW9kaWZpZWQubGVuZ3RoKVxuICAgICAgICAgICAgICAgIGZvciAobGV0IGNvbmZpZyBvZiBjb25maWdzKVxuICAgICAgICAgICAgICAgICAgICBzZXQucHVzaChNb2RpZmllci5nZXQocGFyZW50LCBjb25maWcpKTtcbiAgICAgICAgcmV0dXJuIHRhZztcbiAgICB9XG59XG5mdW5jdGlvbiBzYW1lQXJyYXkoYSwgYikge1xuICAgIHJldHVybiBhLmxlbmd0aCA9PSBiLmxlbmd0aCAmJiBhLmV2ZXJ5KCh4LCBpKSA9PiB4ID09IGJbaV0pO1xufVxuZnVuY3Rpb24gcG93ZXJTZXQoYXJyYXkpIHtcbiAgICBsZXQgc2V0cyA9IFtbXV07XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICBmb3IgKGxldCBqID0gMCwgZSA9IHNldHMubGVuZ3RoOyBqIDwgZTsgaisrKSB7XG4gICAgICAgICAgICBzZXRzLnB1c2goc2V0c1tqXS5jb25jYXQoYXJyYXlbaV0pKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2V0cy5zb3J0KChhLCBiKSA9PiBiLmxlbmd0aCAtIGEubGVuZ3RoKTtcbn1cbi8qKlxuVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIGFkZCBhIHNldCBvZiB0YWdzIHRvIGEgbGFuZ3VhZ2Ugc3ludGF4XG52aWEgW2BOb2RlU2V0LmV4dGVuZGBdKCNjb21tb24uTm9kZVNldC5leHRlbmQpIG9yXG5bYExSUGFyc2VyLmNvbmZpZ3VyZWBdKCNsci5MUlBhcnNlci5jb25maWd1cmUpLlxuXG5UaGUgYXJndW1lbnQgb2JqZWN0IG1hcHMgbm9kZSBzZWxlY3RvcnMgdG8gW2hpZ2hsaWdodGluZ1xudGFnc10oI2hpZ2hsaWdodC5UYWcpIG9yIGFycmF5cyBvZiB0YWdzLlxuXG5Ob2RlIHNlbGVjdG9ycyBtYXkgaG9sZCBvbmUgb3IgbW9yZSAoc3BhY2Utc2VwYXJhdGVkKSBub2RlIHBhdGhzLlxuU3VjaCBhIHBhdGggY2FuIGJlIGEgW25vZGUgbmFtZV0oI2NvbW1vbi5Ob2RlVHlwZS5uYW1lKSwgb3Jcbm11bHRpcGxlIG5vZGUgbmFtZXMgKG9yIGAqYCB3aWxkY2FyZHMpIHNlcGFyYXRlZCBieSBzbGFzaFxuY2hhcmFjdGVycywgYXMgaW4gYFwiQmxvY2svRGVjbGFyYXRpb24vVmFyaWFibGVOYW1lXCJgLiBTdWNoIGEgcGF0aFxubWF0Y2hlcyB0aGUgZmluYWwgbm9kZSBidXQgb25seSBpZiBpdHMgZGlyZWN0IHBhcmVudCBub2RlcyBhcmUgdGhlXG5vdGhlciBub2RlcyBtZW50aW9uZWQuIEEgYCpgIGluIHN1Y2ggYSBwYXRoIG1hdGNoZXMgYW55IHBhcmVudCxcbmJ1dCBvbmx5IGEgc2luZ2xlIGxldmVs4oCUd2lsZGNhcmRzIHRoYXQgbWF0Y2ggbXVsdGlwbGUgcGFyZW50c1xuYXJlbid0IHN1cHBvcnRlZCwgYm90aCBmb3IgZWZmaWNpZW5jeSByZWFzb25zIGFuZCBiZWNhdXNlIExlemVyXG50cmVlcyBtYWtlIGl0IHJhdGhlciBoYXJkIHRvIHJlYXNvbiBhYm91dCB3aGF0IHRoZXkgd291bGQgbWF0Y2guKVxuXG5BIHBhdGggY2FuIGJlIGVuZGVkIHdpdGggYC8uLi5gIHRvIGluZGljYXRlIHRoYXQgdGhlIHRhZyBhc3NpZ25lZFxudG8gdGhlIG5vZGUgc2hvdWxkIGFsc28gYXBwbHkgdG8gYWxsIGNoaWxkIG5vZGVzLCBldmVuIGlmIHRoZXlcbm1hdGNoIHRoZWlyIG93biBzdHlsZSAoYnkgZGVmYXVsdCwgb25seSB0aGUgaW5uZXJtb3N0IHN0eWxlIGlzXG51c2VkKS5cblxuV2hlbiBhIHBhdGggZW5kcyBpbiBgIWAsIGFzIGluIGBBdHRyaWJ1dGUhYCwgbm8gZnVydGhlciBtYXRjaGluZ1xuaGFwcGVucyBmb3IgdGhlIG5vZGUncyBjaGlsZCBub2RlcywgYW5kIHRoZSBlbnRpcmUgbm9kZSBnZXRzIHRoZVxuZ2l2ZW4gc3R5bGUuXG5cbkluIHRoaXMgbm90YXRpb24sIG5vZGUgbmFtZXMgdGhhdCBjb250YWluIGAvYCwgYCFgLCBgKmAsIG9yIGAuLi5gXG5tdXN0IGJlIHF1b3RlZCBhcyBKU09OIHN0cmluZ3MuXG5cbkZvciBleGFtcGxlOlxuXG5gYGBqYXZhc2NyaXB0XG5wYXJzZXIud2l0aFByb3BzKFxuICBzdHlsZVRhZ3Moe1xuICAgIC8vIFN0eWxlIE51bWJlciBhbmQgQmlnTnVtYmVyIG5vZGVzXG4gICAgXCJOdW1iZXIgQmlnTnVtYmVyXCI6IHRhZ3MubnVtYmVyLFxuICAgIC8vIFN0eWxlIEVzY2FwZSBub2RlcyB3aG9zZSBwYXJlbnQgaXMgU3RyaW5nXG4gICAgXCJTdHJpbmcvRXNjYXBlXCI6IHRhZ3MuZXNjYXBlLFxuICAgIC8vIFN0eWxlIGFueXRoaW5nIGluc2lkZSBBdHRyaWJ1dGVzIG5vZGVzXG4gICAgXCJBdHRyaWJ1dGVzIVwiOiB0YWdzLm1ldGEsXG4gICAgLy8gQWRkIGEgc3R5bGUgdG8gYWxsIGNvbnRlbnQgaW5zaWRlIEl0YWxpYyBub2Rlc1xuICAgIFwiSXRhbGljLy4uLlwiOiB0YWdzLmVtcGhhc2lzLFxuICAgIC8vIFN0eWxlIEludmFsaWRTdHJpbmcgbm9kZXMgYXMgYm90aCBgc3RyaW5nYCBhbmQgYGludmFsaWRgXG4gICAgXCJJbnZhbGlkU3RyaW5nXCI6IFt0YWdzLnN0cmluZywgdGFncy5pbnZhbGlkXSxcbiAgICAvLyBTdHlsZSB0aGUgbm9kZSBuYW1lZCBcIi9cIiBhcyBwdW5jdHVhdGlvblxuICAgICdcIi9cIic6IHRhZ3MucHVuY3R1YXRpb25cbiAgfSlcbilcbmBgYFxuKi9cbmZ1bmN0aW9uIHN0eWxlVGFncyhzcGVjKSB7XG4gICAgbGV0IGJ5TmFtZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgZm9yIChsZXQgcHJvcCBpbiBzcGVjKSB7XG4gICAgICAgIGxldCB0YWdzID0gc3BlY1twcm9wXTtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHRhZ3MpKVxuICAgICAgICAgICAgdGFncyA9IFt0YWdzXTtcbiAgICAgICAgZm9yIChsZXQgcGFydCBvZiBwcm9wLnNwbGl0KFwiIFwiKSlcbiAgICAgICAgICAgIGlmIChwYXJ0KSB7XG4gICAgICAgICAgICAgICAgbGV0IHBpZWNlcyA9IFtdLCBtb2RlID0gMiAvKiBNb2RlLk5vcm1hbCAqLywgcmVzdCA9IHBhcnQ7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgcG9zID0gMDs7KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN0ID09IFwiLi4uXCIgJiYgcG9zID4gMCAmJiBwb3MgKyAzID09IHBhcnQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlID0gMSAvKiBNb2RlLkluaGVyaXQgKi87XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsZXQgbSA9IC9eXCIoPzpbXlwiXFxcXF18XFxcXC4pKj9cInxbXlxcLyFdKy8uZXhlYyhyZXN0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIHBhdGg6IFwiICsgcGFydCk7XG4gICAgICAgICAgICAgICAgICAgIHBpZWNlcy5wdXNoKG1bMF0gPT0gXCIqXCIgPyBcIlwiIDogbVswXVswXSA9PSAnXCInID8gSlNPTi5wYXJzZShtWzBdKSA6IG1bMF0pO1xuICAgICAgICAgICAgICAgICAgICBwb3MgKz0gbVswXS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3MgPT0gcGFydC5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5leHQgPSBwYXJ0W3BvcysrXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvcyA9PSBwYXJ0Lmxlbmd0aCAmJiBuZXh0ID09IFwiIVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlID0gMCAvKiBNb2RlLk9wYXF1ZSAqLztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0ICE9IFwiL1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIHBhdGg6IFwiICsgcGFydCk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3QgPSBwYXJ0LnNsaWNlKHBvcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBsYXN0ID0gcGllY2VzLmxlbmd0aCAtIDEsIGlubmVyID0gcGllY2VzW2xhc3RdO1xuICAgICAgICAgICAgICAgIGlmICghaW5uZXIpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBwYXRoOiBcIiArIHBhcnQpO1xuICAgICAgICAgICAgICAgIGxldCBydWxlID0gbmV3IFJ1bGUodGFncywgbW9kZSwgbGFzdCA+IDAgPyBwaWVjZXMuc2xpY2UoMCwgbGFzdCkgOiBudWxsKTtcbiAgICAgICAgICAgICAgICBieU5hbWVbaW5uZXJdID0gcnVsZS5zb3J0KGJ5TmFtZVtpbm5lcl0pO1xuICAgICAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcnVsZU5vZGVQcm9wLmFkZChieU5hbWUpO1xufVxuY29uc3QgcnVsZU5vZGVQcm9wID0gbmV3IGNvbW1vbi5Ob2RlUHJvcCgpO1xuY2xhc3MgUnVsZSB7XG4gICAgY29uc3RydWN0b3IodGFncywgbW9kZSwgY29udGV4dCwgbmV4dCkge1xuICAgICAgICB0aGlzLnRhZ3MgPSB0YWdzO1xuICAgICAgICB0aGlzLm1vZGUgPSBtb2RlO1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICB0aGlzLm5leHQgPSBuZXh0O1xuICAgIH1cbiAgICBnZXQgb3BhcXVlKCkgeyByZXR1cm4gdGhpcy5tb2RlID09IDAgLyogTW9kZS5PcGFxdWUgKi87IH1cbiAgICBnZXQgaW5oZXJpdCgpIHsgcmV0dXJuIHRoaXMubW9kZSA9PSAxIC8qIE1vZGUuSW5oZXJpdCAqLzsgfVxuICAgIHNvcnQob3RoZXIpIHtcbiAgICAgICAgaWYgKCFvdGhlciB8fCBvdGhlci5kZXB0aCA8IHRoaXMuZGVwdGgpIHtcbiAgICAgICAgICAgIHRoaXMubmV4dCA9IG90aGVyO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgb3RoZXIubmV4dCA9IHRoaXMuc29ydChvdGhlci5uZXh0KTtcbiAgICAgICAgcmV0dXJuIG90aGVyO1xuICAgIH1cbiAgICBnZXQgZGVwdGgoKSB7IHJldHVybiB0aGlzLmNvbnRleHQgPyB0aGlzLmNvbnRleHQubGVuZ3RoIDogMDsgfVxufVxuUnVsZS5lbXB0eSA9IG5ldyBSdWxlKFtdLCAyIC8qIE1vZGUuTm9ybWFsICovLCBudWxsKTtcbi8qKlxuRGVmaW5lIGEgW2hpZ2hsaWdodGVyXSgjaGlnaGxpZ2h0LkhpZ2hsaWdodGVyKSBmcm9tIGFuIGFycmF5IG9mXG50YWcvY2xhc3MgcGFpcnMuIENsYXNzZXMgYXNzb2NpYXRlZCB3aXRoIG1vcmUgc3BlY2lmaWMgdGFncyB3aWxsXG50YWtlIHByZWNlZGVuY2UuXG4qL1xuZnVuY3Rpb24gdGFnSGlnaGxpZ2h0ZXIodGFncywgb3B0aW9ucykge1xuICAgIGxldCBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGZvciAobGV0IHN0eWxlIG9mIHRhZ3MpIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHN0eWxlLnRhZykpXG4gICAgICAgICAgICBtYXBbc3R5bGUudGFnLmlkXSA9IHN0eWxlLmNsYXNzO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBmb3IgKGxldCB0YWcgb2Ygc3R5bGUudGFnKVxuICAgICAgICAgICAgICAgIG1hcFt0YWcuaWRdID0gc3R5bGUuY2xhc3M7XG4gICAgfVxuICAgIGxldCB7IHNjb3BlLCBhbGwgPSBudWxsIH0gPSBvcHRpb25zIHx8IHt9O1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0eWxlOiAodGFncykgPT4ge1xuICAgICAgICAgICAgbGV0IGNscyA9IGFsbDtcbiAgICAgICAgICAgIGZvciAobGV0IHRhZyBvZiB0YWdzKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc3ViIG9mIHRhZy5zZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRhZ0NsYXNzID0gbWFwW3N1Yi5pZF07XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWdDbGFzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xzID0gY2xzID8gY2xzICsgXCIgXCIgKyB0YWdDbGFzcyA6IHRhZ0NsYXNzO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2xzO1xuICAgICAgICB9LFxuICAgICAgICBzY29wZVxuICAgIH07XG59XG5mdW5jdGlvbiBoaWdobGlnaHRUYWdzKGhpZ2hsaWdodGVycywgdGFncykge1xuICAgIGxldCByZXN1bHQgPSBudWxsO1xuICAgIGZvciAobGV0IGhpZ2hsaWdodGVyIG9mIGhpZ2hsaWdodGVycykge1xuICAgICAgICBsZXQgdmFsdWUgPSBoaWdobGlnaHRlci5zdHlsZSh0YWdzKTtcbiAgICAgICAgaWYgKHZhbHVlKVxuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0ID8gcmVzdWx0ICsgXCIgXCIgKyB2YWx1ZSA6IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG5IaWdobGlnaHQgdGhlIGdpdmVuIFt0cmVlXSgjY29tbW9uLlRyZWUpIHdpdGggdGhlIGdpdmVuXG5baGlnaGxpZ2h0ZXJdKCNoaWdobGlnaHQuSGlnaGxpZ2h0ZXIpLiBPZnRlbiwgdGhlIGhpZ2hlci1sZXZlbFxuW2BoaWdobGlnaHRDb2RlYF0oI2hpZ2hsaWdodC5oaWdobGlnaHRDb2RlKSBmdW5jdGlvbiBpcyBlYXNpZXIgdG9cbnVzZS5cbiovXG5mdW5jdGlvbiBoaWdobGlnaHRUcmVlKHRyZWUsIGhpZ2hsaWdodGVyLCBcbi8qKlxuQXNzaWduIHN0eWxpbmcgdG8gYSByZWdpb24gb2YgdGhlIHRleHQuIFdpbGwgYmUgY2FsbGVkLCBpbiBvcmRlclxub2YgcG9zaXRpb24sIGZvciBhbnkgcmFuZ2VzIHdoZXJlIG1vcmUgdGhhbiB6ZXJvIGNsYXNzZXMgYXBwbHkuXG5gY2xhc3Nlc2AgaXMgYSBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIENTUyBjbGFzc2VzLlxuKi9cbnB1dFN0eWxlLCBcbi8qKlxuVGhlIHN0YXJ0IG9mIHRoZSByYW5nZSB0byBoaWdobGlnaHQuXG4qL1xuZnJvbSA9IDAsIFxuLyoqXG5UaGUgZW5kIG9mIHRoZSByYW5nZS5cbiovXG50byA9IHRyZWUubGVuZ3RoKSB7XG4gICAgbGV0IGJ1aWxkZXIgPSBuZXcgSGlnaGxpZ2h0QnVpbGRlcihmcm9tLCBBcnJheS5pc0FycmF5KGhpZ2hsaWdodGVyKSA/IGhpZ2hsaWdodGVyIDogW2hpZ2hsaWdodGVyXSwgcHV0U3R5bGUpO1xuICAgIGJ1aWxkZXIuaGlnaGxpZ2h0UmFuZ2UodHJlZS5jdXJzb3IoKSwgZnJvbSwgdG8sIFwiXCIsIGJ1aWxkZXIuaGlnaGxpZ2h0ZXJzKTtcbiAgICBidWlsZGVyLmZsdXNoKHRvKTtcbn1cbi8qKlxuSGlnaGxpZ2h0IHRoZSBnaXZlbiB0cmVlIHdpdGggdGhlIGdpdmVuIGhpZ2hsaWdodGVyLCBjYWxsaW5nXG5gcHV0VGV4dGAgZm9yIGV2ZXJ5IHBpZWNlIG9mIHRleHQsIGVpdGhlciB3aXRoIGEgc2V0IG9mIGNsYXNzZXMgb3JcbndpdGggdGhlIGVtcHR5IHN0cmluZyB3aGVuIHVuc3R5bGVkLCBhbmQgYHB1dEJyZWFrYCBmb3IgZXZlcnkgbGluZVxuYnJlYWsuXG4qL1xuZnVuY3Rpb24gaGlnaGxpZ2h0Q29kZShjb2RlLCB0cmVlLCBoaWdobGlnaHRlciwgcHV0VGV4dCwgcHV0QnJlYWssIGZyb20gPSAwLCB0byA9IGNvZGUubGVuZ3RoKSB7XG4gICAgbGV0IHBvcyA9IGZyb207XG4gICAgZnVuY3Rpb24gd3JpdGVUbyhwLCBjbGFzc2VzKSB7XG4gICAgICAgIGlmIChwIDw9IHBvcylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgZm9yIChsZXQgdGV4dCA9IGNvZGUuc2xpY2UocG9zLCBwKSwgaSA9IDA7Oykge1xuICAgICAgICAgICAgbGV0IG5leHRCcmVhayA9IHRleHQuaW5kZXhPZihcIlxcblwiLCBpKTtcbiAgICAgICAgICAgIGxldCB1cHRvID0gbmV4dEJyZWFrIDwgMCA/IHRleHQubGVuZ3RoIDogbmV4dEJyZWFrO1xuICAgICAgICAgICAgaWYgKHVwdG8gPiBpKVxuICAgICAgICAgICAgICAgIHB1dFRleHQodGV4dC5zbGljZShpLCB1cHRvKSwgY2xhc3Nlcyk7XG4gICAgICAgICAgICBpZiAobmV4dEJyZWFrIDwgMClcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIHB1dEJyZWFrKCk7XG4gICAgICAgICAgICBpID0gbmV4dEJyZWFrICsgMTtcbiAgICAgICAgfVxuICAgICAgICBwb3MgPSBwO1xuICAgIH1cbiAgICBoaWdobGlnaHRUcmVlKHRyZWUsIGhpZ2hsaWdodGVyLCAoZnJvbSwgdG8sIGNsYXNzZXMpID0+IHtcbiAgICAgICAgd3JpdGVUbyhmcm9tLCBcIlwiKTtcbiAgICAgICAgd3JpdGVUbyh0bywgY2xhc3Nlcyk7XG4gICAgfSwgZnJvbSwgdG8pO1xuICAgIHdyaXRlVG8odG8sIFwiXCIpO1xufVxuY2xhc3MgSGlnaGxpZ2h0QnVpbGRlciB7XG4gICAgY29uc3RydWN0b3IoYXQsIGhpZ2hsaWdodGVycywgc3Bhbikge1xuICAgICAgICB0aGlzLmF0ID0gYXQ7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0ZXJzID0gaGlnaGxpZ2h0ZXJzO1xuICAgICAgICB0aGlzLnNwYW4gPSBzcGFuO1xuICAgICAgICB0aGlzLmNsYXNzID0gXCJcIjtcbiAgICB9XG4gICAgc3RhcnRTcGFuKGF0LCBjbHMpIHtcbiAgICAgICAgaWYgKGNscyAhPSB0aGlzLmNsYXNzKSB7XG4gICAgICAgICAgICB0aGlzLmZsdXNoKGF0KTtcbiAgICAgICAgICAgIGlmIChhdCA+IHRoaXMuYXQpXG4gICAgICAgICAgICAgICAgdGhpcy5hdCA9IGF0O1xuICAgICAgICAgICAgdGhpcy5jbGFzcyA9IGNscztcbiAgICAgICAgfVxuICAgIH1cbiAgICBmbHVzaCh0bykge1xuICAgICAgICBpZiAodG8gPiB0aGlzLmF0ICYmIHRoaXMuY2xhc3MpXG4gICAgICAgICAgICB0aGlzLnNwYW4odGhpcy5hdCwgdG8sIHRoaXMuY2xhc3MpO1xuICAgIH1cbiAgICBoaWdobGlnaHRSYW5nZShjdXJzb3IsIGZyb20sIHRvLCBpbmhlcml0ZWRDbGFzcywgaGlnaGxpZ2h0ZXJzKSB7XG4gICAgICAgIGxldCB7IHR5cGUsIGZyb206IHN0YXJ0LCB0bzogZW5kIH0gPSBjdXJzb3I7XG4gICAgICAgIGlmIChzdGFydCA+PSB0byB8fCBlbmQgPD0gZnJvbSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKHR5cGUuaXNUb3ApXG4gICAgICAgICAgICBoaWdobGlnaHRlcnMgPSB0aGlzLmhpZ2hsaWdodGVycy5maWx0ZXIoaCA9PiAhaC5zY29wZSB8fCBoLnNjb3BlKHR5cGUpKTtcbiAgICAgICAgbGV0IGNscyA9IGluaGVyaXRlZENsYXNzO1xuICAgICAgICBsZXQgcnVsZSA9IGdldFN0eWxlVGFncyhjdXJzb3IpIHx8IFJ1bGUuZW1wdHk7XG4gICAgICAgIGxldCB0YWdDbHMgPSBoaWdobGlnaHRUYWdzKGhpZ2hsaWdodGVycywgcnVsZS50YWdzKTtcbiAgICAgICAgaWYgKHRhZ0Nscykge1xuICAgICAgICAgICAgaWYgKGNscylcbiAgICAgICAgICAgICAgICBjbHMgKz0gXCIgXCI7XG4gICAgICAgICAgICBjbHMgKz0gdGFnQ2xzO1xuICAgICAgICAgICAgaWYgKHJ1bGUubW9kZSA9PSAxIC8qIE1vZGUuSW5oZXJpdCAqLylcbiAgICAgICAgICAgICAgICBpbmhlcml0ZWRDbGFzcyArPSAoaW5oZXJpdGVkQ2xhc3MgPyBcIiBcIiA6IFwiXCIpICsgdGFnQ2xzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhcnRTcGFuKE1hdGgubWF4KGZyb20sIHN0YXJ0KSwgY2xzKTtcbiAgICAgICAgaWYgKHJ1bGUub3BhcXVlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBsZXQgbW91bnRlZCA9IGN1cnNvci50cmVlICYmIGN1cnNvci50cmVlLnByb3AoY29tbW9uLk5vZGVQcm9wLm1vdW50ZWQpO1xuICAgICAgICBpZiAobW91bnRlZCAmJiBtb3VudGVkLm92ZXJsYXkpIHtcbiAgICAgICAgICAgIGxldCBpbm5lciA9IGN1cnNvci5ub2RlLmVudGVyKG1vdW50ZWQub3ZlcmxheVswXS5mcm9tICsgc3RhcnQsIDEpO1xuICAgICAgICAgICAgbGV0IGlubmVySGlnaGxpZ2h0ZXJzID0gdGhpcy5oaWdobGlnaHRlcnMuZmlsdGVyKGggPT4gIWguc2NvcGUgfHwgaC5zY29wZShtb3VudGVkLnRyZWUudHlwZSkpO1xuICAgICAgICAgICAgbGV0IGhhc0NoaWxkID0gY3Vyc29yLmZpcnN0Q2hpbGQoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBwb3MgPSBzdGFydDs7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBuZXh0ID0gaSA8IG1vdW50ZWQub3ZlcmxheS5sZW5ndGggPyBtb3VudGVkLm92ZXJsYXlbaV0gOiBudWxsO1xuICAgICAgICAgICAgICAgIGxldCBuZXh0UG9zID0gbmV4dCA/IG5leHQuZnJvbSArIHN0YXJ0IDogZW5kO1xuICAgICAgICAgICAgICAgIGxldCByYW5nZUZyb20gPSBNYXRoLm1heChmcm9tLCBwb3MpLCByYW5nZVRvID0gTWF0aC5taW4odG8sIG5leHRQb3MpO1xuICAgICAgICAgICAgICAgIGlmIChyYW5nZUZyb20gPCByYW5nZVRvICYmIGhhc0NoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChjdXJzb3IuZnJvbSA8IHJhbmdlVG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0UmFuZ2UoY3Vyc29yLCByYW5nZUZyb20sIHJhbmdlVG8sIGluaGVyaXRlZENsYXNzLCBoaWdobGlnaHRlcnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydFNwYW4oTWF0aC5taW4ocmFuZ2VUbywgY3Vyc29yLnRvKSwgY2xzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJzb3IudG8gPj0gbmV4dFBvcyB8fCAhY3Vyc29yLm5leHRTaWJsaW5nKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFuZXh0IHx8IG5leHRQb3MgPiB0bylcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgcG9zID0gbmV4dC50byArIHN0YXJ0O1xuICAgICAgICAgICAgICAgIGlmIChwb3MgPiBmcm9tKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0UmFuZ2UoaW5uZXIuY3Vyc29yKCksIE1hdGgubWF4KGZyb20sIG5leHQuZnJvbSArIHN0YXJ0KSwgTWF0aC5taW4odG8sIHBvcyksIFwiXCIsIGlubmVySGlnaGxpZ2h0ZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydFNwYW4oTWF0aC5taW4odG8sIHBvcyksIGNscyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhhc0NoaWxkKVxuICAgICAgICAgICAgICAgIGN1cnNvci5wYXJlbnQoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjdXJzb3IuZmlyc3RDaGlsZCgpKSB7XG4gICAgICAgICAgICBpZiAobW91bnRlZClcbiAgICAgICAgICAgICAgICBpbmhlcml0ZWRDbGFzcyA9IFwiXCI7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnNvci50byA8PSBmcm9tKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBpZiAoY3Vyc29yLmZyb20gPj0gdG8pXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0UmFuZ2UoY3Vyc29yLCBmcm9tLCB0bywgaW5oZXJpdGVkQ2xhc3MsIGhpZ2hsaWdodGVycyk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydFNwYW4oTWF0aC5taW4odG8sIGN1cnNvci50byksIGNscyk7XG4gICAgICAgICAgICB9IHdoaWxlIChjdXJzb3IubmV4dFNpYmxpbmcoKSk7XG4gICAgICAgICAgICBjdXJzb3IucGFyZW50KCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbk1hdGNoIGEgc3ludGF4IG5vZGUncyBbaGlnaGxpZ2h0IHJ1bGVzXSgjaGlnaGxpZ2h0LnN0eWxlVGFncykuIElmXG50aGVyZSdzIGEgbWF0Y2gsIHJldHVybiBpdHMgc2V0IG9mIHRhZ3MsIGFuZCB3aGV0aGVyIGl0IGlzXG5vcGFxdWUgKHVzZXMgYSBgIWApIG9yIGFwcGxpZXMgdG8gYWxsIGNoaWxkIG5vZGVzIChgLy4uLmApLlxuKi9cbmZ1bmN0aW9uIGdldFN0eWxlVGFncyhub2RlKSB7XG4gICAgbGV0IHJ1bGUgPSBub2RlLnR5cGUucHJvcChydWxlTm9kZVByb3ApO1xuICAgIHdoaWxlIChydWxlICYmIHJ1bGUuY29udGV4dCAmJiAhbm9kZS5tYXRjaENvbnRleHQocnVsZS5jb250ZXh0KSlcbiAgICAgICAgcnVsZSA9IHJ1bGUubmV4dDtcbiAgICByZXR1cm4gcnVsZSB8fCBudWxsO1xufVxuY29uc3QgdCA9IFRhZy5kZWZpbmU7XG5jb25zdCBjb21tZW50ID0gdCgpLCBuYW1lID0gdCgpLCB0eXBlTmFtZSA9IHQobmFtZSksIHByb3BlcnR5TmFtZSA9IHQobmFtZSksIGxpdGVyYWwgPSB0KCksIHN0cmluZyA9IHQobGl0ZXJhbCksIG51bWJlciA9IHQobGl0ZXJhbCksIGNvbnRlbnQgPSB0KCksIGhlYWRpbmcgPSB0KGNvbnRlbnQpLCBrZXl3b3JkID0gdCgpLCBvcGVyYXRvciA9IHQoKSwgcHVuY3R1YXRpb24gPSB0KCksIGJyYWNrZXQgPSB0KHB1bmN0dWF0aW9uKSwgbWV0YSA9IHQoKTtcbi8qKlxuVGhlIGRlZmF1bHQgc2V0IG9mIGhpZ2hsaWdodGluZyBbdGFnc10oI2hpZ2hsaWdodC5UYWcpLlxuXG5UaGlzIGNvbGxlY3Rpb24gaXMgaGVhdmlseSBiaWFzZWQgdG93YXJkcyBwcm9ncmFtbWluZyBsYW5ndWFnZXMsXG5hbmQgbmVjZXNzYXJpbHkgaW5jb21wbGV0ZS4gQSBmdWxsIG9udG9sb2d5IG9mIHN5bnRhY3RpY1xuY29uc3RydWN0cyB3b3VsZCBmaWxsIGEgc3RhY2sgb2YgYm9va3MsIGFuZCBiZSBpbXByYWN0aWNhbCB0b1xud3JpdGUgdGhlbWVzIGZvci4gU28gdHJ5IHRvIG1ha2UgZG8gd2l0aCB0aGlzIHNldC4gSWYgYWxsIGVsc2VcbmZhaWxzLCBbb3BlbiBhblxuaXNzdWVdKGh0dHBzOi8vZ2l0aHViLmNvbS9jb2RlbWlycm9yL2NvZGVtaXJyb3IubmV4dCkgdG8gcHJvcG9zZSBhXG5uZXcgdGFnLCBvciBbZGVmaW5lXSgjaGlnaGxpZ2h0LlRhZ15kZWZpbmUpIGEgbG9jYWwgY3VzdG9tIHRhZyBmb3JcbnlvdXIgdXNlIGNhc2UuXG5cbk5vdGUgdGhhdCBpdCBpcyBub3Qgb2JsaWdhdG9yeSB0byBhbHdheXMgYXR0YWNoIHRoZSBtb3N0IHNwZWNpZmljXG50YWcgcG9zc2libGUgdG8gYW4gZWxlbWVudOKAlGlmIHlvdXIgZ3JhbW1hciBjYW4ndCBlYXNpbHlcbmRpc3Rpbmd1aXNoIGEgY2VydGFpbiB0eXBlIG9mIGVsZW1lbnQgKHN1Y2ggYXMgYSBsb2NhbCB2YXJpYWJsZSksXG5pdCBpcyBva2F5IHRvIHN0eWxlIGl0IGFzIGl0cyBtb3JlIGdlbmVyYWwgdmFyaWFudCAoYSB2YXJpYWJsZSkuXG5cbkZvciB0YWdzIHRoYXQgZXh0ZW5kIHNvbWUgcGFyZW50IHRhZywgdGhlIGRvY3VtZW50YXRpb24gbGlua3MgdG9cbnRoZSBwYXJlbnQuXG4qL1xuY29uc3QgdGFncyA9IHtcbiAgICAvKipcbiAgICBBIGNvbW1lbnQuXG4gICAgKi9cbiAgICBjb21tZW50LFxuICAgIC8qKlxuICAgIEEgbGluZSBbY29tbWVudF0oI2hpZ2hsaWdodC50YWdzLmNvbW1lbnQpLlxuICAgICovXG4gICAgbGluZUNvbW1lbnQ6IHQoY29tbWVudCksXG4gICAgLyoqXG4gICAgQSBibG9jayBbY29tbWVudF0oI2hpZ2hsaWdodC50YWdzLmNvbW1lbnQpLlxuICAgICovXG4gICAgYmxvY2tDb21tZW50OiB0KGNvbW1lbnQpLFxuICAgIC8qKlxuICAgIEEgZG9jdW1lbnRhdGlvbiBbY29tbWVudF0oI2hpZ2hsaWdodC50YWdzLmNvbW1lbnQpLlxuICAgICovXG4gICAgZG9jQ29tbWVudDogdChjb21tZW50KSxcbiAgICAvKipcbiAgICBBbnkga2luZCBvZiBpZGVudGlmaWVyLlxuICAgICovXG4gICAgbmFtZSxcbiAgICAvKipcbiAgICBUaGUgW25hbWVdKCNoaWdobGlnaHQudGFncy5uYW1lKSBvZiBhIHZhcmlhYmxlLlxuICAgICovXG4gICAgdmFyaWFibGVOYW1lOiB0KG5hbWUpLFxuICAgIC8qKlxuICAgIEEgdHlwZSBbbmFtZV0oI2hpZ2hsaWdodC50YWdzLm5hbWUpLlxuICAgICovXG4gICAgdHlwZU5hbWU6IHR5cGVOYW1lLFxuICAgIC8qKlxuICAgIEEgdGFnIG5hbWUgKHN1YnRhZyBvZiBbYHR5cGVOYW1lYF0oI2hpZ2hsaWdodC50YWdzLnR5cGVOYW1lKSkuXG4gICAgKi9cbiAgICB0YWdOYW1lOiB0KHR5cGVOYW1lKSxcbiAgICAvKipcbiAgICBBIHByb3BlcnR5IG9yIGZpZWxkIFtuYW1lXSgjaGlnaGxpZ2h0LnRhZ3MubmFtZSkuXG4gICAgKi9cbiAgICBwcm9wZXJ0eU5hbWU6IHByb3BlcnR5TmFtZSxcbiAgICAvKipcbiAgICBBbiBhdHRyaWJ1dGUgbmFtZSAoc3VidGFnIG9mIFtgcHJvcGVydHlOYW1lYF0oI2hpZ2hsaWdodC50YWdzLnByb3BlcnR5TmFtZSkpLlxuICAgICovXG4gICAgYXR0cmlidXRlTmFtZTogdChwcm9wZXJ0eU5hbWUpLFxuICAgIC8qKlxuICAgIFRoZSBbbmFtZV0oI2hpZ2hsaWdodC50YWdzLm5hbWUpIG9mIGEgY2xhc3MuXG4gICAgKi9cbiAgICBjbGFzc05hbWU6IHQobmFtZSksXG4gICAgLyoqXG4gICAgQSBsYWJlbCBbbmFtZV0oI2hpZ2hsaWdodC50YWdzLm5hbWUpLlxuICAgICovXG4gICAgbGFiZWxOYW1lOiB0KG5hbWUpLFxuICAgIC8qKlxuICAgIEEgbmFtZXNwYWNlIFtuYW1lXSgjaGlnaGxpZ2h0LnRhZ3MubmFtZSkuXG4gICAgKi9cbiAgICBuYW1lc3BhY2U6IHQobmFtZSksXG4gICAgLyoqXG4gICAgVGhlIFtuYW1lXSgjaGlnaGxpZ2h0LnRhZ3MubmFtZSkgb2YgYSBtYWNyby5cbiAgICAqL1xuICAgIG1hY3JvTmFtZTogdChuYW1lKSxcbiAgICAvKipcbiAgICBBIGxpdGVyYWwgdmFsdWUuXG4gICAgKi9cbiAgICBsaXRlcmFsLFxuICAgIC8qKlxuICAgIEEgc3RyaW5nIFtsaXRlcmFsXSgjaGlnaGxpZ2h0LnRhZ3MubGl0ZXJhbCkuXG4gICAgKi9cbiAgICBzdHJpbmcsXG4gICAgLyoqXG4gICAgQSBkb2N1bWVudGF0aW9uIFtzdHJpbmddKCNoaWdobGlnaHQudGFncy5zdHJpbmcpLlxuICAgICovXG4gICAgZG9jU3RyaW5nOiB0KHN0cmluZyksXG4gICAgLyoqXG4gICAgQSBjaGFyYWN0ZXIgbGl0ZXJhbCAoc3VidGFnIG9mIFtzdHJpbmddKCNoaWdobGlnaHQudGFncy5zdHJpbmcpKS5cbiAgICAqL1xuICAgIGNoYXJhY3RlcjogdChzdHJpbmcpLFxuICAgIC8qKlxuICAgIEFuIGF0dHJpYnV0ZSB2YWx1ZSAoc3VidGFnIG9mIFtzdHJpbmddKCNoaWdobGlnaHQudGFncy5zdHJpbmcpKS5cbiAgICAqL1xuICAgIGF0dHJpYnV0ZVZhbHVlOiB0KHN0cmluZyksXG4gICAgLyoqXG4gICAgQSBudW1iZXIgW2xpdGVyYWxdKCNoaWdobGlnaHQudGFncy5saXRlcmFsKS5cbiAgICAqL1xuICAgIG51bWJlcixcbiAgICAvKipcbiAgICBBbiBpbnRlZ2VyIFtudW1iZXJdKCNoaWdobGlnaHQudGFncy5udW1iZXIpIGxpdGVyYWwuXG4gICAgKi9cbiAgICBpbnRlZ2VyOiB0KG51bWJlciksXG4gICAgLyoqXG4gICAgQSBmbG9hdGluZy1wb2ludCBbbnVtYmVyXSgjaGlnaGxpZ2h0LnRhZ3MubnVtYmVyKSBsaXRlcmFsLlxuICAgICovXG4gICAgZmxvYXQ6IHQobnVtYmVyKSxcbiAgICAvKipcbiAgICBBIGJvb2xlYW4gW2xpdGVyYWxdKCNoaWdobGlnaHQudGFncy5saXRlcmFsKS5cbiAgICAqL1xuICAgIGJvb2w6IHQobGl0ZXJhbCksXG4gICAgLyoqXG4gICAgUmVndWxhciBleHByZXNzaW9uIFtsaXRlcmFsXSgjaGlnaGxpZ2h0LnRhZ3MubGl0ZXJhbCkuXG4gICAgKi9cbiAgICByZWdleHA6IHQobGl0ZXJhbCksXG4gICAgLyoqXG4gICAgQW4gZXNjYXBlIFtsaXRlcmFsXSgjaGlnaGxpZ2h0LnRhZ3MubGl0ZXJhbCksIGZvciBleGFtcGxlIGFcbiAgICBiYWNrc2xhc2ggZXNjYXBlIGluIGEgc3RyaW5nLlxuICAgICovXG4gICAgZXNjYXBlOiB0KGxpdGVyYWwpLFxuICAgIC8qKlxuICAgIEEgY29sb3IgW2xpdGVyYWxdKCNoaWdobGlnaHQudGFncy5saXRlcmFsKS5cbiAgICAqL1xuICAgIGNvbG9yOiB0KGxpdGVyYWwpLFxuICAgIC8qKlxuICAgIEEgVVJMIFtsaXRlcmFsXSgjaGlnaGxpZ2h0LnRhZ3MubGl0ZXJhbCkuXG4gICAgKi9cbiAgICB1cmw6IHQobGl0ZXJhbCksXG4gICAgLyoqXG4gICAgQSBsYW5ndWFnZSBrZXl3b3JkLlxuICAgICovXG4gICAga2V5d29yZCxcbiAgICAvKipcbiAgICBUaGUgW2tleXdvcmRdKCNoaWdobGlnaHQudGFncy5rZXl3b3JkKSBmb3IgdGhlIHNlbGYgb3IgdGhpc1xuICAgIG9iamVjdC5cbiAgICAqL1xuICAgIHNlbGY6IHQoa2V5d29yZCksXG4gICAgLyoqXG4gICAgVGhlIFtrZXl3b3JkXSgjaGlnaGxpZ2h0LnRhZ3Mua2V5d29yZCkgZm9yIG51bGwuXG4gICAgKi9cbiAgICBudWxsOiB0KGtleXdvcmQpLFxuICAgIC8qKlxuICAgIEEgW2tleXdvcmRdKCNoaWdobGlnaHQudGFncy5rZXl3b3JkKSBkZW5vdGluZyBzb21lIGF0b21pYyB2YWx1ZS5cbiAgICAqL1xuICAgIGF0b206IHQoa2V5d29yZCksXG4gICAgLyoqXG4gICAgQSBba2V5d29yZF0oI2hpZ2hsaWdodC50YWdzLmtleXdvcmQpIHRoYXQgcmVwcmVzZW50cyBhIHVuaXQuXG4gICAgKi9cbiAgICB1bml0OiB0KGtleXdvcmQpLFxuICAgIC8qKlxuICAgIEEgbW9kaWZpZXIgW2tleXdvcmRdKCNoaWdobGlnaHQudGFncy5rZXl3b3JkKS5cbiAgICAqL1xuICAgIG1vZGlmaWVyOiB0KGtleXdvcmQpLFxuICAgIC8qKlxuICAgIEEgW2tleXdvcmRdKCNoaWdobGlnaHQudGFncy5rZXl3b3JkKSB0aGF0IGFjdHMgYXMgYW4gb3BlcmF0b3IuXG4gICAgKi9cbiAgICBvcGVyYXRvcktleXdvcmQ6IHQoa2V5d29yZCksXG4gICAgLyoqXG4gICAgQSBjb250cm9sLWZsb3cgcmVsYXRlZCBba2V5d29yZF0oI2hpZ2hsaWdodC50YWdzLmtleXdvcmQpLlxuICAgICovXG4gICAgY29udHJvbEtleXdvcmQ6IHQoa2V5d29yZCksXG4gICAgLyoqXG4gICAgQSBba2V5d29yZF0oI2hpZ2hsaWdodC50YWdzLmtleXdvcmQpIHRoYXQgZGVmaW5lcyBzb21ldGhpbmcuXG4gICAgKi9cbiAgICBkZWZpbml0aW9uS2V5d29yZDogdChrZXl3b3JkKSxcbiAgICAvKipcbiAgICBBIFtrZXl3b3JkXSgjaGlnaGxpZ2h0LnRhZ3Mua2V5d29yZCkgcmVsYXRlZCB0byBkZWZpbmluZyBvclxuICAgIGludGVyZmFjaW5nIHdpdGggbW9kdWxlcy5cbiAgICAqL1xuICAgIG1vZHVsZUtleXdvcmQ6IHQoa2V5d29yZCksXG4gICAgLyoqXG4gICAgQW4gb3BlcmF0b3IuXG4gICAgKi9cbiAgICBvcGVyYXRvcixcbiAgICAvKipcbiAgICBBbiBbb3BlcmF0b3JdKCNoaWdobGlnaHQudGFncy5vcGVyYXRvcikgdGhhdCBkZXJlZmVyZW5jZXMgc29tZXRoaW5nLlxuICAgICovXG4gICAgZGVyZWZPcGVyYXRvcjogdChvcGVyYXRvciksXG4gICAgLyoqXG4gICAgQXJpdGhtZXRpYy1yZWxhdGVkIFtvcGVyYXRvcl0oI2hpZ2hsaWdodC50YWdzLm9wZXJhdG9yKS5cbiAgICAqL1xuICAgIGFyaXRobWV0aWNPcGVyYXRvcjogdChvcGVyYXRvciksXG4gICAgLyoqXG4gICAgTG9naWNhbCBbb3BlcmF0b3JdKCNoaWdobGlnaHQudGFncy5vcGVyYXRvcikuXG4gICAgKi9cbiAgICBsb2dpY09wZXJhdG9yOiB0KG9wZXJhdG9yKSxcbiAgICAvKipcbiAgICBCaXQgW29wZXJhdG9yXSgjaGlnaGxpZ2h0LnRhZ3Mub3BlcmF0b3IpLlxuICAgICovXG4gICAgYml0d2lzZU9wZXJhdG9yOiB0KG9wZXJhdG9yKSxcbiAgICAvKipcbiAgICBDb21wYXJpc29uIFtvcGVyYXRvcl0oI2hpZ2hsaWdodC50YWdzLm9wZXJhdG9yKS5cbiAgICAqL1xuICAgIGNvbXBhcmVPcGVyYXRvcjogdChvcGVyYXRvciksXG4gICAgLyoqXG4gICAgW09wZXJhdG9yXSgjaGlnaGxpZ2h0LnRhZ3Mub3BlcmF0b3IpIHRoYXQgdXBkYXRlcyBpdHMgb3BlcmFuZC5cbiAgICAqL1xuICAgIHVwZGF0ZU9wZXJhdG9yOiB0KG9wZXJhdG9yKSxcbiAgICAvKipcbiAgICBbT3BlcmF0b3JdKCNoaWdobGlnaHQudGFncy5vcGVyYXRvcikgdGhhdCBkZWZpbmVzIHNvbWV0aGluZy5cbiAgICAqL1xuICAgIGRlZmluaXRpb25PcGVyYXRvcjogdChvcGVyYXRvciksXG4gICAgLyoqXG4gICAgVHlwZS1yZWxhdGVkIFtvcGVyYXRvcl0oI2hpZ2hsaWdodC50YWdzLm9wZXJhdG9yKS5cbiAgICAqL1xuICAgIHR5cGVPcGVyYXRvcjogdChvcGVyYXRvciksXG4gICAgLyoqXG4gICAgQ29udHJvbC1mbG93IFtvcGVyYXRvcl0oI2hpZ2hsaWdodC50YWdzLm9wZXJhdG9yKS5cbiAgICAqL1xuICAgIGNvbnRyb2xPcGVyYXRvcjogdChvcGVyYXRvciksXG4gICAgLyoqXG4gICAgUHJvZ3JhbSBvciBtYXJrdXAgcHVuY3R1YXRpb24uXG4gICAgKi9cbiAgICBwdW5jdHVhdGlvbixcbiAgICAvKipcbiAgICBbUHVuY3R1YXRpb25dKCNoaWdobGlnaHQudGFncy5wdW5jdHVhdGlvbikgdGhhdCBzZXBhcmF0ZXNcbiAgICB0aGluZ3MuXG4gICAgKi9cbiAgICBzZXBhcmF0b3I6IHQocHVuY3R1YXRpb24pLFxuICAgIC8qKlxuICAgIEJyYWNrZXQtc3R5bGUgW3B1bmN0dWF0aW9uXSgjaGlnaGxpZ2h0LnRhZ3MucHVuY3R1YXRpb24pLlxuICAgICovXG4gICAgYnJhY2tldCxcbiAgICAvKipcbiAgICBBbmdsZSBbYnJhY2tldHNdKCNoaWdobGlnaHQudGFncy5icmFja2V0KSAodXN1YWxseSBgPGAgYW5kIGA+YFxuICAgIHRva2VucykuXG4gICAgKi9cbiAgICBhbmdsZUJyYWNrZXQ6IHQoYnJhY2tldCksXG4gICAgLyoqXG4gICAgU3F1YXJlIFticmFja2V0c10oI2hpZ2hsaWdodC50YWdzLmJyYWNrZXQpICh1c3VhbGx5IGBbYCBhbmQgYF1gXG4gICAgdG9rZW5zKS5cbiAgICAqL1xuICAgIHNxdWFyZUJyYWNrZXQ6IHQoYnJhY2tldCksXG4gICAgLyoqXG4gICAgUGFyZW50aGVzZXMgKHVzdWFsbHkgYChgIGFuZCBgKWAgdG9rZW5zKS4gU3VidGFnIG9mXG4gICAgW2JyYWNrZXRdKCNoaWdobGlnaHQudGFncy5icmFja2V0KS5cbiAgICAqL1xuICAgIHBhcmVuOiB0KGJyYWNrZXQpLFxuICAgIC8qKlxuICAgIEJyYWNlcyAodXN1YWxseSBge2AgYW5kIGB9YCB0b2tlbnMpLiBTdWJ0YWcgb2ZcbiAgICBbYnJhY2tldF0oI2hpZ2hsaWdodC50YWdzLmJyYWNrZXQpLlxuICAgICovXG4gICAgYnJhY2U6IHQoYnJhY2tldCksXG4gICAgLyoqXG4gICAgQ29udGVudCwgZm9yIGV4YW1wbGUgcGxhaW4gdGV4dCBpbiBYTUwgb3IgbWFya3VwIGRvY3VtZW50cy5cbiAgICAqL1xuICAgIGNvbnRlbnQsXG4gICAgLyoqXG4gICAgW0NvbnRlbnRdKCNoaWdobGlnaHQudGFncy5jb250ZW50KSB0aGF0IHJlcHJlc2VudHMgYSBoZWFkaW5nLlxuICAgICovXG4gICAgaGVhZGluZyxcbiAgICAvKipcbiAgICBBIGxldmVsIDEgW2hlYWRpbmddKCNoaWdobGlnaHQudGFncy5oZWFkaW5nKS5cbiAgICAqL1xuICAgIGhlYWRpbmcxOiB0KGhlYWRpbmcpLFxuICAgIC8qKlxuICAgIEEgbGV2ZWwgMiBbaGVhZGluZ10oI2hpZ2hsaWdodC50YWdzLmhlYWRpbmcpLlxuICAgICovXG4gICAgaGVhZGluZzI6IHQoaGVhZGluZyksXG4gICAgLyoqXG4gICAgQSBsZXZlbCAzIFtoZWFkaW5nXSgjaGlnaGxpZ2h0LnRhZ3MuaGVhZGluZykuXG4gICAgKi9cbiAgICBoZWFkaW5nMzogdChoZWFkaW5nKSxcbiAgICAvKipcbiAgICBBIGxldmVsIDQgW2hlYWRpbmddKCNoaWdobGlnaHQudGFncy5oZWFkaW5nKS5cbiAgICAqL1xuICAgIGhlYWRpbmc0OiB0KGhlYWRpbmcpLFxuICAgIC8qKlxuICAgIEEgbGV2ZWwgNSBbaGVhZGluZ10oI2hpZ2hsaWdodC50YWdzLmhlYWRpbmcpLlxuICAgICovXG4gICAgaGVhZGluZzU6IHQoaGVhZGluZyksXG4gICAgLyoqXG4gICAgQSBsZXZlbCA2IFtoZWFkaW5nXSgjaGlnaGxpZ2h0LnRhZ3MuaGVhZGluZykuXG4gICAgKi9cbiAgICBoZWFkaW5nNjogdChoZWFkaW5nKSxcbiAgICAvKipcbiAgICBBIHByb3NlIHNlcGFyYXRvciAoc3VjaCBhcyBhIGhvcml6b250YWwgcnVsZSkuXG4gICAgKi9cbiAgICBjb250ZW50U2VwYXJhdG9yOiB0KGNvbnRlbnQpLFxuICAgIC8qKlxuICAgIFtDb250ZW50XSgjaGlnaGxpZ2h0LnRhZ3MuY29udGVudCkgdGhhdCByZXByZXNlbnRzIGEgbGlzdC5cbiAgICAqL1xuICAgIGxpc3Q6IHQoY29udGVudCksXG4gICAgLyoqXG4gICAgW0NvbnRlbnRdKCNoaWdobGlnaHQudGFncy5jb250ZW50KSB0aGF0IHJlcHJlc2VudHMgYSBxdW90ZS5cbiAgICAqL1xuICAgIHF1b3RlOiB0KGNvbnRlbnQpLFxuICAgIC8qKlxuICAgIFtDb250ZW50XSgjaGlnaGxpZ2h0LnRhZ3MuY29udGVudCkgdGhhdCBpcyBlbXBoYXNpemVkLlxuICAgICovXG4gICAgZW1waGFzaXM6IHQoY29udGVudCksXG4gICAgLyoqXG4gICAgW0NvbnRlbnRdKCNoaWdobGlnaHQudGFncy5jb250ZW50KSB0aGF0IGlzIHN0eWxlZCBzdHJvbmcuXG4gICAgKi9cbiAgICBzdHJvbmc6IHQoY29udGVudCksXG4gICAgLyoqXG4gICAgW0NvbnRlbnRdKCNoaWdobGlnaHQudGFncy5jb250ZW50KSB0aGF0IGlzIHBhcnQgb2YgYSBsaW5rLlxuICAgICovXG4gICAgbGluazogdChjb250ZW50KSxcbiAgICAvKipcbiAgICBbQ29udGVudF0oI2hpZ2hsaWdodC50YWdzLmNvbnRlbnQpIHRoYXQgaXMgc3R5bGVkIGFzIGNvZGUgb3JcbiAgICBtb25vc3BhY2UuXG4gICAgKi9cbiAgICBtb25vc3BhY2U6IHQoY29udGVudCksXG4gICAgLyoqXG4gICAgW0NvbnRlbnRdKCNoaWdobGlnaHQudGFncy5jb250ZW50KSB0aGF0IGhhcyBhIHN0cmlrZS10aHJvdWdoXG4gICAgc3R5bGUuXG4gICAgKi9cbiAgICBzdHJpa2V0aHJvdWdoOiB0KGNvbnRlbnQpLFxuICAgIC8qKlxuICAgIEluc2VydGVkIHRleHQgaW4gYSBjaGFuZ2UtdHJhY2tpbmcgZm9ybWF0LlxuICAgICovXG4gICAgaW5zZXJ0ZWQ6IHQoKSxcbiAgICAvKipcbiAgICBEZWxldGVkIHRleHQuXG4gICAgKi9cbiAgICBkZWxldGVkOiB0KCksXG4gICAgLyoqXG4gICAgQ2hhbmdlZCB0ZXh0LlxuICAgICovXG4gICAgY2hhbmdlZDogdCgpLFxuICAgIC8qKlxuICAgIEFuIGludmFsaWQgb3IgdW5zeW50YWN0aWMgZWxlbWVudC5cbiAgICAqL1xuICAgIGludmFsaWQ6IHQoKSxcbiAgICAvKipcbiAgICBNZXRhZGF0YSBvciBtZXRhLWluc3RydWN0aW9uLlxuICAgICovXG4gICAgbWV0YSxcbiAgICAvKipcbiAgICBbTWV0YWRhdGFdKCNoaWdobGlnaHQudGFncy5tZXRhKSB0aGF0IGFwcGxpZXMgdG8gdGhlIGVudGlyZVxuICAgIGRvY3VtZW50LlxuICAgICovXG4gICAgZG9jdW1lbnRNZXRhOiB0KG1ldGEpLFxuICAgIC8qKlxuICAgIFtNZXRhZGF0YV0oI2hpZ2hsaWdodC50YWdzLm1ldGEpIHRoYXQgYW5ub3RhdGVzIG9yIGFkZHNcbiAgICBhdHRyaWJ1dGVzIHRvIGEgZ2l2ZW4gc3ludGFjdGljIGVsZW1lbnQuXG4gICAgKi9cbiAgICBhbm5vdGF0aW9uOiB0KG1ldGEpLFxuICAgIC8qKlxuICAgIFByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gb3IgcHJlcHJvY2Vzc29yIGRpcmVjdGl2ZS4gU3VidGFnIG9mXG4gICAgW21ldGFdKCNoaWdobGlnaHQudGFncy5tZXRhKS5cbiAgICAqL1xuICAgIHByb2Nlc3NpbmdJbnN0cnVjdGlvbjogdChtZXRhKSxcbiAgICAvKipcbiAgICBbTW9kaWZpZXJdKCNoaWdobGlnaHQuVGFnXmRlZmluZU1vZGlmaWVyKSB0aGF0IGluZGljYXRlcyB0aGF0IGFcbiAgICBnaXZlbiBlbGVtZW50IGlzIGJlaW5nIGRlZmluZWQuIEV4cGVjdGVkIHRvIGJlIHVzZWQgd2l0aCB0aGVcbiAgICB2YXJpb3VzIFtuYW1lXSgjaGlnaGxpZ2h0LnRhZ3MubmFtZSkgdGFncy5cbiAgICAqL1xuICAgIGRlZmluaXRpb246IFRhZy5kZWZpbmVNb2RpZmllcigpLFxuICAgIC8qKlxuICAgIFtNb2RpZmllcl0oI2hpZ2hsaWdodC5UYWdeZGVmaW5lTW9kaWZpZXIpIHRoYXQgaW5kaWNhdGVzIHRoYXRcbiAgICBzb21ldGhpbmcgaXMgY29uc3RhbnQuIE1vc3RseSBleHBlY3RlZCB0byBiZSB1c2VkIHdpdGhcbiAgICBbdmFyaWFibGUgbmFtZXNdKCNoaWdobGlnaHQudGFncy52YXJpYWJsZU5hbWUpLlxuICAgICovXG4gICAgY29uc3RhbnQ6IFRhZy5kZWZpbmVNb2RpZmllcigpLFxuICAgIC8qKlxuICAgIFtNb2RpZmllcl0oI2hpZ2hsaWdodC5UYWdeZGVmaW5lTW9kaWZpZXIpIHVzZWQgdG8gaW5kaWNhdGUgdGhhdFxuICAgIGEgW3ZhcmlhYmxlXSgjaGlnaGxpZ2h0LnRhZ3MudmFyaWFibGVOYW1lKSBvciBbcHJvcGVydHlcbiAgICBuYW1lXSgjaGlnaGxpZ2h0LnRhZ3MucHJvcGVydHlOYW1lKSBpcyBiZWluZyBjYWxsZWQgb3IgZGVmaW5lZFxuICAgIGFzIGEgZnVuY3Rpb24uXG4gICAgKi9cbiAgICBmdW5jdGlvbjogVGFnLmRlZmluZU1vZGlmaWVyKCksXG4gICAgLyoqXG4gICAgW01vZGlmaWVyXSgjaGlnaGxpZ2h0LlRhZ15kZWZpbmVNb2RpZmllcikgdGhhdCBjYW4gYmUgYXBwbGllZCB0b1xuICAgIFtuYW1lc10oI2hpZ2hsaWdodC50YWdzLm5hbWUpIHRvIGluZGljYXRlIHRoYXQgdGhleSBiZWxvbmcgdG9cbiAgICB0aGUgbGFuZ3VhZ2UncyBzdGFuZGFyZCBlbnZpcm9ubWVudC5cbiAgICAqL1xuICAgIHN0YW5kYXJkOiBUYWcuZGVmaW5lTW9kaWZpZXIoKSxcbiAgICAvKipcbiAgICBbTW9kaWZpZXJdKCNoaWdobGlnaHQuVGFnXmRlZmluZU1vZGlmaWVyKSB0aGF0IGluZGljYXRlcyBhIGdpdmVuXG4gICAgW25hbWVzXSgjaGlnaGxpZ2h0LnRhZ3MubmFtZSkgaXMgbG9jYWwgdG8gc29tZSBzY29wZS5cbiAgICAqL1xuICAgIGxvY2FsOiBUYWcuZGVmaW5lTW9kaWZpZXIoKSxcbiAgICAvKipcbiAgICBBIGdlbmVyaWMgdmFyaWFudCBbbW9kaWZpZXJdKCNoaWdobGlnaHQuVGFnXmRlZmluZU1vZGlmaWVyKSB0aGF0XG4gICAgY2FuIGJlIHVzZWQgdG8gdGFnIGxhbmd1YWdlLXNwZWNpZmljIGFsdGVybmF0aXZlIHZhcmlhbnRzIG9mXG4gICAgc29tZSBjb21tb24gdGFnLiBJdCBpcyByZWNvbW1lbmRlZCBmb3IgdGhlbWVzIHRvIGRlZmluZSBzcGVjaWFsXG4gICAgZm9ybXMgb2YgYXQgbGVhc3QgdGhlIFtzdHJpbmddKCNoaWdobGlnaHQudGFncy5zdHJpbmcpIGFuZFxuICAgIFt2YXJpYWJsZSBuYW1lXSgjaGlnaGxpZ2h0LnRhZ3MudmFyaWFibGVOYW1lKSB0YWdzLCBzaW5jZSB0aG9zZVxuICAgIGNvbWUgdXAgYSBsb3QuXG4gICAgKi9cbiAgICBzcGVjaWFsOiBUYWcuZGVmaW5lTW9kaWZpZXIoKVxufTtcbi8qKlxuVGhpcyBpcyBhIGhpZ2hsaWdodGVyIHRoYXQgYWRkcyBzdGFibGUsIHByZWRpY3RhYmxlIGNsYXNzZXMgdG9cbnRva2VucywgZm9yIHN0eWxpbmcgd2l0aCBleHRlcm5hbCBDU1MuXG5cblRoZSBmb2xsb3dpbmcgdGFncyBhcmUgbWFwcGVkIHRvIHRoZWlyIG5hbWUgcHJlZml4ZWQgd2l0aCBgXCJ0b2stXCJgXG4oZm9yIGV4YW1wbGUgYFwidG9rLWNvbW1lbnRcImApOlxuXG4qIFtgbGlua2BdKCNoaWdobGlnaHQudGFncy5saW5rKVxuKiBbYGhlYWRpbmdgXSgjaGlnaGxpZ2h0LnRhZ3MuaGVhZGluZylcbiogW2BlbXBoYXNpc2BdKCNoaWdobGlnaHQudGFncy5lbXBoYXNpcylcbiogW2BzdHJvbmdgXSgjaGlnaGxpZ2h0LnRhZ3Muc3Ryb25nKVxuKiBbYGtleXdvcmRgXSgjaGlnaGxpZ2h0LnRhZ3Mua2V5d29yZClcbiogW2BhdG9tYF0oI2hpZ2hsaWdodC50YWdzLmF0b20pXG4qIFtgYm9vbGBdKCNoaWdobGlnaHQudGFncy5ib29sKVxuKiBbYHVybGBdKCNoaWdobGlnaHQudGFncy51cmwpXG4qIFtgbGFiZWxOYW1lYF0oI2hpZ2hsaWdodC50YWdzLmxhYmVsTmFtZSlcbiogW2BpbnNlcnRlZGBdKCNoaWdobGlnaHQudGFncy5pbnNlcnRlZClcbiogW2BkZWxldGVkYF0oI2hpZ2hsaWdodC50YWdzLmRlbGV0ZWQpXG4qIFtgbGl0ZXJhbGBdKCNoaWdobGlnaHQudGFncy5saXRlcmFsKVxuKiBbYHN0cmluZ2BdKCNoaWdobGlnaHQudGFncy5zdHJpbmcpXG4qIFtgbnVtYmVyYF0oI2hpZ2hsaWdodC50YWdzLm51bWJlcilcbiogW2B2YXJpYWJsZU5hbWVgXSgjaGlnaGxpZ2h0LnRhZ3MudmFyaWFibGVOYW1lKVxuKiBbYHR5cGVOYW1lYF0oI2hpZ2hsaWdodC50YWdzLnR5cGVOYW1lKVxuKiBbYG5hbWVzcGFjZWBdKCNoaWdobGlnaHQudGFncy5uYW1lc3BhY2UpXG4qIFtgY2xhc3NOYW1lYF0oI2hpZ2hsaWdodC50YWdzLmNsYXNzTmFtZSlcbiogW2BtYWNyb05hbWVgXSgjaGlnaGxpZ2h0LnRhZ3MubWFjcm9OYW1lKVxuKiBbYHByb3BlcnR5TmFtZWBdKCNoaWdobGlnaHQudGFncy5wcm9wZXJ0eU5hbWUpXG4qIFtgb3BlcmF0b3JgXSgjaGlnaGxpZ2h0LnRhZ3Mub3BlcmF0b3IpXG4qIFtgY29tbWVudGBdKCNoaWdobGlnaHQudGFncy5jb21tZW50KVxuKiBbYG1ldGFgXSgjaGlnaGxpZ2h0LnRhZ3MubWV0YSlcbiogW2BwdW5jdHVhdGlvbmBdKCNoaWdobGlnaHQudGFncy5wdW5jdHVhdGlvbilcbiogW2BpbnZhbGlkYF0oI2hpZ2hsaWdodC50YWdzLmludmFsaWQpXG5cbkluIGFkZGl0aW9uLCB0aGVzZSBtYXBwaW5ncyBhcmUgcHJvdmlkZWQ6XG5cbiogW2ByZWdleHBgXSgjaGlnaGxpZ2h0LnRhZ3MucmVnZXhwKSxcbiAgW2Blc2NhcGVgXSgjaGlnaGxpZ2h0LnRhZ3MuZXNjYXBlKSwgYW5kXG4gIFtgc3BlY2lhbGBdKCNoaWdobGlnaHQudGFncy5zcGVjaWFsKVtgKHN0cmluZylgXSgjaGlnaGxpZ2h0LnRhZ3Muc3RyaW5nKVxuICBhcmUgbWFwcGVkIHRvIGBcInRvay1zdHJpbmcyXCJgXG4qIFtgc3BlY2lhbGBdKCNoaWdobGlnaHQudGFncy5zcGVjaWFsKVtgKHZhcmlhYmxlTmFtZSlgXSgjaGlnaGxpZ2h0LnRhZ3MudmFyaWFibGVOYW1lKVxuICB0byBgXCJ0b2stdmFyaWFibGVOYW1lMlwiYFxuKiBbYGxvY2FsYF0oI2hpZ2hsaWdodC50YWdzLmxvY2FsKVtgKHZhcmlhYmxlTmFtZSlgXSgjaGlnaGxpZ2h0LnRhZ3MudmFyaWFibGVOYW1lKVxuICB0byBgXCJ0b2stdmFyaWFibGVOYW1lIHRvay1sb2NhbFwiYFxuKiBbYGRlZmluaXRpb25gXSgjaGlnaGxpZ2h0LnRhZ3MuZGVmaW5pdGlvbilbYCh2YXJpYWJsZU5hbWUpYF0oI2hpZ2hsaWdodC50YWdzLnZhcmlhYmxlTmFtZSlcbiAgdG8gYFwidG9rLXZhcmlhYmxlTmFtZSB0b2stZGVmaW5pdGlvblwiYFxuKiBbYGRlZmluaXRpb25gXSgjaGlnaGxpZ2h0LnRhZ3MuZGVmaW5pdGlvbilbYChwcm9wZXJ0eU5hbWUpYF0oI2hpZ2hsaWdodC50YWdzLnByb3BlcnR5TmFtZSlcbiAgdG8gYFwidG9rLXByb3BlcnR5TmFtZSB0b2stZGVmaW5pdGlvblwiYFxuKi9cbmNvbnN0IGNsYXNzSGlnaGxpZ2h0ZXIgPSB0YWdIaWdobGlnaHRlcihbXG4gICAgeyB0YWc6IHRhZ3MubGluaywgY2xhc3M6IFwidG9rLWxpbmtcIiB9LFxuICAgIHsgdGFnOiB0YWdzLmhlYWRpbmcsIGNsYXNzOiBcInRvay1oZWFkaW5nXCIgfSxcbiAgICB7IHRhZzogdGFncy5lbXBoYXNpcywgY2xhc3M6IFwidG9rLWVtcGhhc2lzXCIgfSxcbiAgICB7IHRhZzogdGFncy5zdHJvbmcsIGNsYXNzOiBcInRvay1zdHJvbmdcIiB9LFxuICAgIHsgdGFnOiB0YWdzLmtleXdvcmQsIGNsYXNzOiBcInRvay1rZXl3b3JkXCIgfSxcbiAgICB7IHRhZzogdGFncy5hdG9tLCBjbGFzczogXCJ0b2stYXRvbVwiIH0sXG4gICAgeyB0YWc6IHRhZ3MuYm9vbCwgY2xhc3M6IFwidG9rLWJvb2xcIiB9LFxuICAgIHsgdGFnOiB0YWdzLnVybCwgY2xhc3M6IFwidG9rLXVybFwiIH0sXG4gICAgeyB0YWc6IHRhZ3MubGFiZWxOYW1lLCBjbGFzczogXCJ0b2stbGFiZWxOYW1lXCIgfSxcbiAgICB7IHRhZzogdGFncy5pbnNlcnRlZCwgY2xhc3M6IFwidG9rLWluc2VydGVkXCIgfSxcbiAgICB7IHRhZzogdGFncy5kZWxldGVkLCBjbGFzczogXCJ0b2stZGVsZXRlZFwiIH0sXG4gICAgeyB0YWc6IHRhZ3MubGl0ZXJhbCwgY2xhc3M6IFwidG9rLWxpdGVyYWxcIiB9LFxuICAgIHsgdGFnOiB0YWdzLnN0cmluZywgY2xhc3M6IFwidG9rLXN0cmluZ1wiIH0sXG4gICAgeyB0YWc6IHRhZ3MubnVtYmVyLCBjbGFzczogXCJ0b2stbnVtYmVyXCIgfSxcbiAgICB7IHRhZzogW3RhZ3MucmVnZXhwLCB0YWdzLmVzY2FwZSwgdGFncy5zcGVjaWFsKHRhZ3Muc3RyaW5nKV0sIGNsYXNzOiBcInRvay1zdHJpbmcyXCIgfSxcbiAgICB7IHRhZzogdGFncy52YXJpYWJsZU5hbWUsIGNsYXNzOiBcInRvay12YXJpYWJsZU5hbWVcIiB9LFxuICAgIHsgdGFnOiB0YWdzLmxvY2FsKHRhZ3MudmFyaWFibGVOYW1lKSwgY2xhc3M6IFwidG9rLXZhcmlhYmxlTmFtZSB0b2stbG9jYWxcIiB9LFxuICAgIHsgdGFnOiB0YWdzLmRlZmluaXRpb24odGFncy52YXJpYWJsZU5hbWUpLCBjbGFzczogXCJ0b2stdmFyaWFibGVOYW1lIHRvay1kZWZpbml0aW9uXCIgfSxcbiAgICB7IHRhZzogdGFncy5zcGVjaWFsKHRhZ3MudmFyaWFibGVOYW1lKSwgY2xhc3M6IFwidG9rLXZhcmlhYmxlTmFtZTJcIiB9LFxuICAgIHsgdGFnOiB0YWdzLmRlZmluaXRpb24odGFncy5wcm9wZXJ0eU5hbWUpLCBjbGFzczogXCJ0b2stcHJvcGVydHlOYW1lIHRvay1kZWZpbml0aW9uXCIgfSxcbiAgICB7IHRhZzogdGFncy50eXBlTmFtZSwgY2xhc3M6IFwidG9rLXR5cGVOYW1lXCIgfSxcbiAgICB7IHRhZzogdGFncy5uYW1lc3BhY2UsIGNsYXNzOiBcInRvay1uYW1lc3BhY2VcIiB9LFxuICAgIHsgdGFnOiB0YWdzLmNsYXNzTmFtZSwgY2xhc3M6IFwidG9rLWNsYXNzTmFtZVwiIH0sXG4gICAgeyB0YWc6IHRhZ3MubWFjcm9OYW1lLCBjbGFzczogXCJ0b2stbWFjcm9OYW1lXCIgfSxcbiAgICB7IHRhZzogdGFncy5wcm9wZXJ0eU5hbWUsIGNsYXNzOiBcInRvay1wcm9wZXJ0eU5hbWVcIiB9LFxuICAgIHsgdGFnOiB0YWdzLm9wZXJhdG9yLCBjbGFzczogXCJ0b2stb3BlcmF0b3JcIiB9LFxuICAgIHsgdGFnOiB0YWdzLmNvbW1lbnQsIGNsYXNzOiBcInRvay1jb21tZW50XCIgfSxcbiAgICB7IHRhZzogdGFncy5tZXRhLCBjbGFzczogXCJ0b2stbWV0YVwiIH0sXG4gICAgeyB0YWc6IHRhZ3MuaW52YWxpZCwgY2xhc3M6IFwidG9rLWludmFsaWRcIiB9LFxuICAgIHsgdGFnOiB0YWdzLnB1bmN0dWF0aW9uLCBjbGFzczogXCJ0b2stcHVuY3R1YXRpb25cIiB9XG5dKTtcblxuZXhwb3J0cy5UYWcgPSBUYWc7XG5leHBvcnRzLmNsYXNzSGlnaGxpZ2h0ZXIgPSBjbGFzc0hpZ2hsaWdodGVyO1xuZXhwb3J0cy5nZXRTdHlsZVRhZ3MgPSBnZXRTdHlsZVRhZ3M7XG5leHBvcnRzLmhpZ2hsaWdodENvZGUgPSBoaWdobGlnaHRDb2RlO1xuZXhwb3J0cy5oaWdobGlnaHRUcmVlID0gaGlnaGxpZ2h0VHJlZTtcbmV4cG9ydHMuc3R5bGVUYWdzID0gc3R5bGVUYWdzO1xuZXhwb3J0cy50YWdIaWdobGlnaHRlciA9IHRhZ0hpZ2hsaWdodGVyO1xuZXhwb3J0cy50YWdzID0gdGFncztcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY3JlbHQoKSB7XG4gIHZhciBlbHQgPSBhcmd1bWVudHNbMF07XG4gIGlmICh0eXBlb2YgZWx0ID09IFwic3RyaW5nXCIpIGVsdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZWx0KTtcbiAgdmFyIGkgPSAxLCBuZXh0ID0gYXJndW1lbnRzWzFdO1xuICBpZiAobmV4dCAmJiB0eXBlb2YgbmV4dCA9PSBcIm9iamVjdFwiICYmIG5leHQubm9kZVR5cGUgPT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheShuZXh0KSkge1xuICAgIGZvciAodmFyIG5hbWUgaW4gbmV4dCkgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuZXh0LCBuYW1lKSkge1xuICAgICAgdmFyIHZhbHVlID0gbmV4dFtuYW1lXTtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJzdHJpbmdcIikgZWx0LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gICAgICBlbHNlIGlmICh2YWx1ZSAhPSBudWxsKSBlbHRbbmFtZV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgaSsrO1xuICB9XG4gIGZvciAoOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhZGQoZWx0LCBhcmd1bWVudHNbaV0pO1xuICByZXR1cm4gZWx0XG59XG5cbmZ1bmN0aW9uIGFkZChlbHQsIGNoaWxkKSB7XG4gIGlmICh0eXBlb2YgY2hpbGQgPT0gXCJzdHJpbmdcIikge1xuICAgIGVsdC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjaGlsZCkpO1xuICB9IGVsc2UgaWYgKGNoaWxkID09IG51bGwpIDsgZWxzZSBpZiAoY2hpbGQubm9kZVR5cGUgIT0gbnVsbCkge1xuICAgIGVsdC5hcHBlbmRDaGlsZChjaGlsZCk7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShjaGlsZCkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkLmxlbmd0aDsgaSsrKSBhZGQoZWx0LCBjaGlsZFtpXSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVbnN1cHBvcnRlZCBjaGlsZCBub2RlOiBcIiArIGNoaWxkKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlbHQ7XG4iLCJ2YXIgQyA9IFwiXFx1MDM3Y1wiXG52YXIgQ09VTlQgPSB0eXBlb2YgU3ltYm9sID09IFwidW5kZWZpbmVkXCIgPyBcIl9fXCIgKyBDIDogU3ltYm9sLmZvcihDKVxudmFyIFNFVCA9IHR5cGVvZiBTeW1ib2wgPT0gXCJ1bmRlZmluZWRcIiA/IFwiX19zdHlsZVNldFwiICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMWU4KSA6IFN5bWJvbChcInN0eWxlU2V0XCIpXG52YXIgdG9wID0gdHlwZW9mIGdsb2JhbFRoaXMgIT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93ICE9IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fVxuXG4vLyA6OiAtIFN0eWxlIG1vZHVsZXMgZW5jYXBzdWxhdGUgYSBzZXQgb2YgQ1NTIHJ1bGVzIGRlZmluZWQgZnJvbVxuLy8gSmF2YVNjcmlwdC4gVGhlaXIgZGVmaW5pdGlvbnMgYXJlIG9ubHkgYXZhaWxhYmxlIGluIGEgZ2l2ZW4gRE9NXG4vLyByb290IGFmdGVyIGl0IGhhcyBiZWVuIF9tb3VudGVkXyB0aGVyZSB3aXRoIGBTdHlsZU1vZHVsZS5tb3VudGAuXG4vL1xuLy8gU3R5bGUgbW9kdWxlcyBzaG91bGQgYmUgY3JlYXRlZCBvbmNlIGFuZCBzdG9yZWQgc29tZXdoZXJlLCBhc1xuLy8gb3Bwb3NlZCB0byByZS1jcmVhdGluZyB0aGVtIGV2ZXJ5IHRpbWUgeW91IG5lZWQgdGhlbS4gVGhlIGFtb3VudCBvZlxuLy8gQ1NTIHJ1bGVzIGdlbmVyYXRlZCBmb3IgYSBnaXZlbiBET00gcm9vdCBpcyBib3VuZGVkIGJ5IHRoZSBhbW91bnRcbi8vIG9mIHN0eWxlIG1vZHVsZXMgdGhhdCB3ZXJlIHVzZWQuIFNvIHRvIGF2b2lkIGxlYWtpbmcgcnVsZXMsIGRvbid0XG4vLyBjcmVhdGUgdGhlc2UgZHluYW1pY2FsbHksIGJ1dCB0cmVhdCB0aGVtIGFzIG9uZS10aW1lIGFsbG9jYXRpb25zLlxudmFyIFN0eWxlTW9kdWxlID0gZXhwb3J0cy5TdHlsZU1vZHVsZSA9IGZ1bmN0aW9uIFN0eWxlTW9kdWxlKHNwZWMsIG9wdGlvbnMpIHtcbiAgdGhpcy5ydWxlcyA9IFtdXG4gIHZhciByZWYgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgZmluaXNoID0gcmVmLmZpbmlzaDtcblxuICBmdW5jdGlvbiBzcGxpdFNlbGVjdG9yKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIC9eQC8udGVzdChzZWxlY3RvcikgPyBbc2VsZWN0b3JdIDogc2VsZWN0b3Iuc3BsaXQoLyxcXHMqLylcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbmRlcihzZWxlY3RvcnMsIHNwZWMsIHRhcmdldCwgaXNLZXlmcmFtZXMpIHtcbiAgICB2YXIgbG9jYWwgPSBbXSwgaXNBdCA9IC9eQChcXHcrKVxcYi8uZXhlYyhzZWxlY3RvcnNbMF0pLCBrZXlmcmFtZXMgPSBpc0F0ICYmIGlzQXRbMV0gPT0gXCJrZXlmcmFtZXNcIlxuICAgIGlmIChpc0F0ICYmIHNwZWMgPT0gbnVsbCkgeyByZXR1cm4gdGFyZ2V0LnB1c2goc2VsZWN0b3JzWzBdICsgXCI7XCIpIH1cbiAgICBmb3IgKHZhciBwcm9wIGluIHNwZWMpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHNwZWNbcHJvcF1cbiAgICAgIGlmICgvJi8udGVzdChwcm9wKSkge1xuICAgICAgICByZW5kZXIocHJvcC5zcGxpdCgvLFxccyovKS5tYXAoZnVuY3Rpb24gKHBhcnQpIHsgcmV0dXJuIHNlbGVjdG9ycy5tYXAoZnVuY3Rpb24gKHNlbCkgeyByZXR1cm4gcGFydC5yZXBsYWNlKC8mLywgc2VsKTsgfSk7IH0pLnJlZHVjZShmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5jb25jYXQoYik7IH0pLFxuICAgICAgICAgICAgICAgdmFsdWUsIHRhcmdldClcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgaWYgKCFpc0F0KSB7IHRocm93IG5ldyBSYW5nZUVycm9yKFwiVGhlIHZhbHVlIG9mIGEgcHJvcGVydHkgKFwiICsgcHJvcCArIFwiKSBzaG91bGQgYmUgYSBwcmltaXRpdmUgdmFsdWUuXCIpIH1cbiAgICAgICAgcmVuZGVyKHNwbGl0U2VsZWN0b3IocHJvcCksIHZhbHVlLCBsb2NhbCwga2V5ZnJhbWVzKVxuICAgICAgfSBlbHNlIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIGxvY2FsLnB1c2gocHJvcC5yZXBsYWNlKC9fLiovLCBcIlwiKS5yZXBsYWNlKC9bQS1aXS9nLCBmdW5jdGlvbiAobCkgeyByZXR1cm4gXCItXCIgKyBsLnRvTG93ZXJDYXNlKCk7IH0pICsgXCI6IFwiICsgdmFsdWUgKyBcIjtcIilcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGxvY2FsLmxlbmd0aCB8fCBrZXlmcmFtZXMpIHtcbiAgICAgIHRhcmdldC5wdXNoKChmaW5pc2ggJiYgIWlzQXQgJiYgIWlzS2V5ZnJhbWVzID8gc2VsZWN0b3JzLm1hcChmaW5pc2gpIDogc2VsZWN0b3JzKS5qb2luKFwiLCBcIikgK1xuICAgICAgICAgICAgICAgICAgXCIge1wiICsgbG9jYWwuam9pbihcIiBcIikgKyBcIn1cIilcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBwcm9wIGluIHNwZWMpIHsgcmVuZGVyKHNwbGl0U2VsZWN0b3IocHJvcCksIHNwZWNbcHJvcF0sIHRoaXMucnVsZXMpIH1cbn07XG5cbi8vIDo6ICgpIOKGkiBzdHJpbmdcbi8vIFJldHVybnMgYSBzdHJpbmcgY29udGFpbmluZyB0aGUgbW9kdWxlJ3MgQ1NTIHJ1bGVzLlxuU3R5bGVNb2R1bGUucHJvdG90eXBlLmdldFJ1bGVzID0gZnVuY3Rpb24gZ2V0UnVsZXMgKCkgeyByZXR1cm4gdGhpcy5ydWxlcy5qb2luKFwiXFxuXCIpIH07XG5cbi8vIDo6ICgpIOKGkiBzdHJpbmdcbi8vIEdlbmVyYXRlIGEgbmV3IHVuaXF1ZSBDU1MgY2xhc3MgbmFtZS5cblN0eWxlTW9kdWxlLm5ld05hbWUgPSBmdW5jdGlvbiBuZXdOYW1lICgpIHtcbiAgdmFyIGlkID0gdG9wW0NPVU5UXSB8fCAxXG4gIHRvcFtDT1VOVF0gPSBpZCArIDFcbiAgcmV0dXJuIEMgKyBpZC50b1N0cmluZygzNilcbn07XG5cbi8vIDo6ICh1bmlvbjxEb2N1bWVudCwgU2hhZG93Um9vdD4sIHVuaW9uPFtTdHlsZU1vZHVsZV0sIFN0eWxlTW9kdWxlPiwgP3tub25jZTogP3N0cmluZ30pXG4vL1xuLy8gTW91bnQgdGhlIGdpdmVuIHNldCBvZiBtb2R1bGVzIGluIHRoZSBnaXZlbiBET00gcm9vdCwgd2hpY2ggZW5zdXJlc1xuLy8gdGhhdCB0aGUgQ1NTIHJ1bGVzIGRlZmluZWQgYnkgdGhlIG1vZHVsZSBhcmUgYXZhaWxhYmxlIGluIHRoYXRcbi8vIGNvbnRleHQuXG4vL1xuLy8gUnVsZXMgYXJlIG9ubHkgYWRkZWQgdG8gdGhlIGRvY3VtZW50IG9uY2UgcGVyIHJvb3QuXG4vL1xuLy8gUnVsZSBvcmRlciB3aWxsIGZvbGxvdyB0aGUgb3JkZXIgb2YgdGhlIG1vZHVsZXMsIHNvIHRoYXQgcnVsZXMgZnJvbVxuLy8gbW9kdWxlcyBsYXRlciBpbiB0aGUgYXJyYXkgdGFrZSBwcmVjZWRlbmNlIG9mIHRob3NlIGZyb20gZWFybGllclxuLy8gbW9kdWxlcy4gSWYgeW91IGNhbGwgdGhpcyBmdW5jdGlvbiBtdWx0aXBsZSB0aW1lcyBmb3IgdGhlIHNhbWUgcm9vdFxuLy8gaW4gYSB3YXkgdGhhdCBjaGFuZ2VzIHRoZSBvcmRlciBvZiBhbHJlYWR5IG1vdW50ZWQgbW9kdWxlcywgdGhlIG9sZFxuLy8gb3JkZXIgd2lsbCBiZSBjaGFuZ2VkLlxuLy9cbi8vIElmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgbm9uY2UgaXMgcHJvdmlkZWQsIGl0IGlzIGFkZGVkIHRvXG4vLyB0aGUgYDxzdHlsZT5gIHRhZyBnZW5lcmF0ZWQgYnkgdGhlIGxpYnJhcnkuXG5TdHlsZU1vZHVsZS5tb3VudCA9IGZ1bmN0aW9uIG1vdW50IChyb290LCBtb2R1bGVzLCBvcHRpb25zKSB7XG4gIHZhciBzZXQgPSByb290W1NFVF0sIG5vbmNlID0gb3B0aW9ucyAmJiBvcHRpb25zLm5vbmNlXG4gIGlmICghc2V0KSB7IHNldCA9IG5ldyBTdHlsZVNldChyb290LCBub25jZSkgfVxuICBlbHNlIGlmIChub25jZSkgeyBzZXQuc2V0Tm9uY2Uobm9uY2UpIH1cbiAgc2V0Lm1vdW50KEFycmF5LmlzQXJyYXkobW9kdWxlcykgPyBtb2R1bGVzIDogW21vZHVsZXNdLCByb290KVxufTtcblxudmFyIGFkb3B0ZWRTZXQgPSBuZXcgTWFwIC8vPERvY3VtZW50LCBTdHlsZVNldD5cblxudmFyIFN0eWxlU2V0ID0gZnVuY3Rpb24gU3R5bGVTZXQocm9vdCwgbm9uY2UpIHtcbiAgdmFyIGRvYyA9IHJvb3Qub3duZXJEb2N1bWVudCB8fCByb290LCB3aW4gPSBkb2MuZGVmYXVsdFZpZXdcbiAgaWYgKCFyb290LmhlYWQgJiYgcm9vdC5hZG9wdGVkU3R5bGVTaGVldHMgJiYgd2luLkNTU1N0eWxlU2hlZXQpIHtcbiAgICB2YXIgYWRvcHRlZCA9IGFkb3B0ZWRTZXQuZ2V0KGRvYylcbiAgICBpZiAoYWRvcHRlZCkgeyByZXR1cm4gcm9vdFtTRVRdID0gYWRvcHRlZCB9XG4gICAgdGhpcy5zaGVldCA9IG5ldyB3aW4uQ1NTU3R5bGVTaGVldFxuICAgIGFkb3B0ZWRTZXQuc2V0KGRvYywgdGhpcylcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnN0eWxlVGFnID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKVxuICAgIGlmIChub25jZSkgeyB0aGlzLnN0eWxlVGFnLnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKSB9XG4gIH1cbiAgdGhpcy5tb2R1bGVzID0gW11cbiAgcm9vdFtTRVRdID0gdGhpc1xufTtcblxuU3R5bGVTZXQucHJvdG90eXBlLm1vdW50ID0gZnVuY3Rpb24gbW91bnQgKG1vZHVsZXMsIHJvb3QpIHtcbiAgdmFyIHNoZWV0ID0gdGhpcy5zaGVldFxuICB2YXIgcG9zID0gMCAvKiBDdXJyZW50IHJ1bGUgb2Zmc2V0ICovLCBqID0gMCAvKiBJbmRleCBpbnRvIHRoaXMubW9kdWxlcyAqL1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbW9kID0gbW9kdWxlc1tpXSwgaW5kZXggPSB0aGlzLm1vZHVsZXMuaW5kZXhPZihtb2QpXG4gICAgaWYgKGluZGV4IDwgaiAmJiBpbmRleCA+IC0xKSB7IC8vIE9yZGVyaW5nIGNvbmZsaWN0XG4gICAgICB0aGlzLm1vZHVsZXMuc3BsaWNlKGluZGV4LCAxKVxuICAgICAgai0tXG4gICAgICBpbmRleCA9IC0xXG4gICAgfVxuICAgIGlmIChpbmRleCA9PSAtMSkge1xuICAgICAgdGhpcy5tb2R1bGVzLnNwbGljZShqKyssIDAsIG1vZClcbiAgICAgIGlmIChzaGVldCkgeyBmb3IgKHZhciBrID0gMDsgayA8IG1vZC5ydWxlcy5sZW5ndGg7IGsrKylcbiAgICAgICAgeyBzaGVldC5pbnNlcnRSdWxlKG1vZC5ydWxlc1trXSwgcG9zKyspIH0gfVxuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAoaiA8IGluZGV4KSB7IHBvcyArPSB0aGlzLm1vZHVsZXNbaisrXS5ydWxlcy5sZW5ndGggfVxuICAgICAgcG9zICs9IG1vZC5ydWxlcy5sZW5ndGhcbiAgICAgIGorK1xuICAgIH1cbiAgfVxuXG4gIGlmIChzaGVldCkge1xuICAgIGlmIChyb290LmFkb3B0ZWRTdHlsZVNoZWV0cy5pbmRleE9mKHRoaXMuc2hlZXQpIDwgMClcbiAgICAgIHsgcm9vdC5hZG9wdGVkU3R5bGVTaGVldHMgPSBbdGhpcy5zaGVldCBdLmNvbmNhdCggcm9vdC5hZG9wdGVkU3R5bGVTaGVldHMpIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgdGV4dCA9IFwiXCJcbiAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCB0aGlzLm1vZHVsZXMubGVuZ3RoOyBpJDErKylcbiAgICAgIHsgdGV4dCArPSB0aGlzLm1vZHVsZXNbaSQxXS5nZXRSdWxlcygpICsgXCJcXG5cIiB9XG4gICAgdGhpcy5zdHlsZVRhZy50ZXh0Q29udGVudCA9IHRleHRcbiAgICB2YXIgdGFyZ2V0ID0gcm9vdC5oZWFkIHx8IHJvb3RcbiAgICBpZiAodGhpcy5zdHlsZVRhZy5wYXJlbnROb2RlICE9IHRhcmdldClcbiAgICAgIHsgdGFyZ2V0Lmluc2VydEJlZm9yZSh0aGlzLnN0eWxlVGFnLCB0YXJnZXQuZmlyc3RDaGlsZCkgfVxuICB9XG59O1xuXG5TdHlsZVNldC5wcm90b3R5cGUuc2V0Tm9uY2UgPSBmdW5jdGlvbiBzZXROb25jZSAobm9uY2UpIHtcbiAgaWYgKHRoaXMuc3R5bGVUYWcgJiYgdGhpcy5zdHlsZVRhZy5nZXRBdHRyaWJ1dGUoXCJub25jZVwiKSAhPSBub25jZSlcbiAgICB7IHRoaXMuc3R5bGVUYWcuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpIH1cbn07XG5cbi8vIFN0eWxlOjpPYmplY3Q8dW5pb248U3R5bGUsc3RyaW5nPj5cbi8vXG4vLyBBIHN0eWxlIGlzIGFuIG9iamVjdCB0aGF0LCBpbiB0aGUgc2ltcGxlIGNhc2UsIG1hcHMgQ1NTIHByb3BlcnR5XG4vLyBuYW1lcyB0byBzdHJpbmdzIGhvbGRpbmcgdGhlaXIgdmFsdWVzLCBhcyBpbiBge2NvbG9yOiBcInJlZFwiLFxuLy8gZm9udFdlaWdodDogXCJib2xkXCJ9YC4gVGhlIHByb3BlcnR5IG5hbWVzIGNhbiBiZSBnaXZlbiBpblxuLy8gY2FtZWwtY2FzZeKAlHRoZSBsaWJyYXJ5IHdpbGwgaW5zZXJ0IGEgZGFzaCBiZWZvcmUgY2FwaXRhbCBsZXR0ZXJzXG4vLyB3aGVuIGNvbnZlcnRpbmcgdGhlbSB0byBDU1MuXG4vL1xuLy8gSWYgeW91IGluY2x1ZGUgYW4gdW5kZXJzY29yZSBpbiBhIHByb3BlcnR5IG5hbWUsIGl0IGFuZCBldmVyeXRoaW5nXG4vLyBhZnRlciBpdCB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgb3V0cHV0LCB3aGljaCBjYW4gYmUgdXNlZnVsIHdoZW5cbi8vIHByb3ZpZGluZyBhIHByb3BlcnR5IG11bHRpcGxlIHRpbWVzLCBmb3IgYnJvd3NlciBjb21wYXRpYmlsaXR5XG4vLyByZWFzb25zLlxuLy9cbi8vIEEgcHJvcGVydHkgaW4gYSBzdHlsZSBvYmplY3QgY2FuIGFsc28gYmUgYSBzdWItc2VsZWN0b3IsIHdoaWNoXG4vLyBleHRlbmRzIHRoZSBjdXJyZW50IGNvbnRleHQgdG8gYWRkIGEgcHNldWRvLXNlbGVjdG9yIG9yIGEgY2hpbGRcbi8vIHNlbGVjdG9yLiBTdWNoIGEgcHJvcGVydHkgc2hvdWxkIGNvbnRhaW4gYSBgJmAgY2hhcmFjdGVyLCB3aGljaFxuLy8gd2lsbCBiZSByZXBsYWNlZCBieSB0aGUgY3VycmVudCBzZWxlY3Rvci4gRm9yIGV4YW1wbGUgYHtcIiY6YmVmb3JlXCI6XG4vLyB7Y29udGVudDogJ1wiaGlcIid9fWAuIFN1Yi1zZWxlY3RvcnMgYW5kIHJlZ3VsYXIgcHJvcGVydGllcyBjYW5cbi8vIGZyZWVseSBiZSBtaXhlZCBpbiBhIGdpdmVuIG9iamVjdC4gQW55IHByb3BlcnR5IGNvbnRhaW5pbmcgYSBgJmAgaXNcbi8vIGFzc3VtZWQgdG8gYmUgYSBzdWItc2VsZWN0b3IuXG4vL1xuLy8gRmluYWxseSwgYSBwcm9wZXJ0eSBjYW4gc3BlY2lmeSBhbiBALWJsb2NrIHRvIGJlIHdyYXBwZWQgYXJvdW5kIHRoZVxuLy8gc3R5bGVzIGRlZmluZWQgaW5zaWRlIHRoZSBvYmplY3QgdGhhdCdzIHRoZSBwcm9wZXJ0eSdzIHZhbHVlLiBGb3Jcbi8vIGV4YW1wbGUgdG8gY3JlYXRlIGEgbWVkaWEgcXVlcnkgeW91IGNhbiBkbyBge1wiQG1lZGlhIHNjcmVlbiBhbmRcbi8vIChtaW4td2lkdGg6IDQwMHB4KVwiOiB7Li4ufX1gLlxuXG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBiYXNlID0ge1xuICA4OiBcIkJhY2tzcGFjZVwiLFxuICA5OiBcIlRhYlwiLFxuICAxMDogXCJFbnRlclwiLFxuICAxMjogXCJOdW1Mb2NrXCIsXG4gIDEzOiBcIkVudGVyXCIsXG4gIDE2OiBcIlNoaWZ0XCIsXG4gIDE3OiBcIkNvbnRyb2xcIixcbiAgMTg6IFwiQWx0XCIsXG4gIDIwOiBcIkNhcHNMb2NrXCIsXG4gIDI3OiBcIkVzY2FwZVwiLFxuICAzMjogXCIgXCIsXG4gIDMzOiBcIlBhZ2VVcFwiLFxuICAzNDogXCJQYWdlRG93blwiLFxuICAzNTogXCJFbmRcIixcbiAgMzY6IFwiSG9tZVwiLFxuICAzNzogXCJBcnJvd0xlZnRcIixcbiAgMzg6IFwiQXJyb3dVcFwiLFxuICAzOTogXCJBcnJvd1JpZ2h0XCIsXG4gIDQwOiBcIkFycm93RG93blwiLFxuICA0NDogXCJQcmludFNjcmVlblwiLFxuICA0NTogXCJJbnNlcnRcIixcbiAgNDY6IFwiRGVsZXRlXCIsXG4gIDU5OiBcIjtcIixcbiAgNjE6IFwiPVwiLFxuICA5MTogXCJNZXRhXCIsXG4gIDkyOiBcIk1ldGFcIixcbiAgMTA2OiBcIipcIixcbiAgMTA3OiBcIitcIixcbiAgMTA4OiBcIixcIixcbiAgMTA5OiBcIi1cIixcbiAgMTEwOiBcIi5cIixcbiAgMTExOiBcIi9cIixcbiAgMTQ0OiBcIk51bUxvY2tcIixcbiAgMTQ1OiBcIlNjcm9sbExvY2tcIixcbiAgMTYwOiBcIlNoaWZ0XCIsXG4gIDE2MTogXCJTaGlmdFwiLFxuICAxNjI6IFwiQ29udHJvbFwiLFxuICAxNjM6IFwiQ29udHJvbFwiLFxuICAxNjQ6IFwiQWx0XCIsXG4gIDE2NTogXCJBbHRcIixcbiAgMTczOiBcIi1cIixcbiAgMTg2OiBcIjtcIixcbiAgMTg3OiBcIj1cIixcbiAgMTg4OiBcIixcIixcbiAgMTg5OiBcIi1cIixcbiAgMTkwOiBcIi5cIixcbiAgMTkxOiBcIi9cIixcbiAgMTkyOiBcImBcIixcbiAgMjE5OiBcIltcIixcbiAgMjIwOiBcIlxcXFxcIixcbiAgMjIxOiBcIl1cIixcbiAgMjIyOiBcIidcIlxufTtcblxudmFyIHNoaWZ0ID0ge1xuICA0ODogXCIpXCIsXG4gIDQ5OiBcIiFcIixcbiAgNTA6IFwiQFwiLFxuICA1MTogXCIjXCIsXG4gIDUyOiBcIiRcIixcbiAgNTM6IFwiJVwiLFxuICA1NDogXCJeXCIsXG4gIDU1OiBcIiZcIixcbiAgNTY6IFwiKlwiLFxuICA1NzogXCIoXCIsXG4gIDU5OiBcIjpcIixcbiAgNjE6IFwiK1wiLFxuICAxNzM6IFwiX1wiLFxuICAxODY6IFwiOlwiLFxuICAxODc6IFwiK1wiLFxuICAxODg6IFwiPFwiLFxuICAxODk6IFwiX1wiLFxuICAxOTA6IFwiPlwiLFxuICAxOTE6IFwiP1wiLFxuICAxOTI6IFwiflwiLFxuICAyMTk6IFwie1wiLFxuICAyMjA6IFwifFwiLFxuICAyMjE6IFwifVwiLFxuICAyMjI6IFwiXFxcIlwiXG59O1xuXG52YXIgbWFjID0gdHlwZW9mIG5hdmlnYXRvciAhPSBcInVuZGVmaW5lZFwiICYmIC9NYWMvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKTtcbnZhciBpZSA9IHR5cGVvZiBuYXZpZ2F0b3IgIT0gXCJ1bmRlZmluZWRcIiAmJiAvTVNJRSBcXGR8VHJpZGVudFxcLyg/Ols3LTldfFxcZHsyLH0pXFwuLipydjooXFxkKykvLmV4ZWMobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbi8vIEZpbGwgaW4gdGhlIGRpZ2l0IGtleXNcbmZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykgYmFzZVs0OCArIGldID0gYmFzZVs5NiArIGldID0gU3RyaW5nKGkpO1xuXG4vLyBUaGUgZnVuY3Rpb24ga2V5c1xuZm9yICh2YXIgaSA9IDE7IGkgPD0gMjQ7IGkrKykgYmFzZVtpICsgMTExXSA9IFwiRlwiICsgaTtcblxuLy8gQW5kIHRoZSBhbHBoYWJldGljIGtleXNcbmZvciAodmFyIGkgPSA2NTsgaSA8PSA5MDsgaSsrKSB7XG4gIGJhc2VbaV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGkgKyAzMik7XG4gIHNoaWZ0W2ldID0gU3RyaW5nLmZyb21DaGFyQ29kZShpKTtcbn1cblxuLy8gRm9yIGVhY2ggY29kZSB0aGF0IGRvZXNuJ3QgaGF2ZSBhIHNoaWZ0LWVxdWl2YWxlbnQsIGNvcHkgdGhlIGJhc2UgbmFtZVxuZm9yICh2YXIgY29kZSBpbiBiYXNlKSBpZiAoIXNoaWZ0Lmhhc093blByb3BlcnR5KGNvZGUpKSBzaGlmdFtjb2RlXSA9IGJhc2VbY29kZV07XG5cbmZ1bmN0aW9uIGtleU5hbWUoZXZlbnQpIHtcbiAgLy8gT24gbWFjT1MsIGtleXMgaGVsZCB3aXRoIFNoaWZ0IGFuZCBDbWQgZG9uJ3QgcmVmbGVjdCB0aGUgZWZmZWN0IG9mIFNoaWZ0IGluIGAua2V5YC5cbiAgLy8gT24gSUUsIHNoaWZ0IGVmZmVjdCBpcyBuZXZlciBpbmNsdWRlZCBpbiBgLmtleWAuXG4gIHZhciBpZ25vcmVLZXkgPSBtYWMgJiYgZXZlbnQubWV0YUtleSAmJiBldmVudC5zaGlmdEtleSAmJiAhZXZlbnQuY3RybEtleSAmJiAhZXZlbnQuYWx0S2V5IHx8XG4gICAgICBpZSAmJiBldmVudC5zaGlmdEtleSAmJiBldmVudC5rZXkgJiYgZXZlbnQua2V5Lmxlbmd0aCA9PSAxIHx8XG4gICAgICBldmVudC5rZXkgPT0gXCJVbmlkZW50aWZpZWRcIjtcbiAgdmFyIG5hbWUgPSAoIWlnbm9yZUtleSAmJiBldmVudC5rZXkpIHx8XG4gICAgKGV2ZW50LnNoaWZ0S2V5ID8gc2hpZnQgOiBiYXNlKVtldmVudC5rZXlDb2RlXSB8fFxuICAgIGV2ZW50LmtleSB8fCBcIlVuaWRlbnRpZmllZFwiO1xuICAvLyBFZGdlIHNvbWV0aW1lcyBwcm9kdWNlcyB3cm9uZyBuYW1lcyAoSXNzdWUgIzMpXG4gIGlmIChuYW1lID09IFwiRXNjXCIpIG5hbWUgPSBcIkVzY2FwZVwiO1xuICBpZiAobmFtZSA9PSBcIkRlbFwiKSBuYW1lID0gXCJEZWxldGVcIjtcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubWljcm9zb2Z0LmNvbS9lbi11cy9taWNyb3NvZnQtZWRnZS9wbGF0Zm9ybS9pc3N1ZXMvODg2MDU3MS9cbiAgaWYgKG5hbWUgPT0gXCJMZWZ0XCIpIG5hbWUgPSBcIkFycm93TGVmdFwiO1xuICBpZiAobmFtZSA9PSBcIlVwXCIpIG5hbWUgPSBcIkFycm93VXBcIjtcbiAgaWYgKG5hbWUgPT0gXCJSaWdodFwiKSBuYW1lID0gXCJBcnJvd1JpZ2h0XCI7XG4gIGlmIChuYW1lID09IFwiRG93blwiKSBuYW1lID0gXCJBcnJvd0Rvd25cIjtcbiAgcmV0dXJuIG5hbWVcbn1cblxuZXhwb3J0cy5iYXNlID0gYmFzZTtcbmV4cG9ydHMua2V5TmFtZSA9IGtleU5hbWU7XG5leHBvcnRzLnNoaWZ0ID0gc2hpZnQ7XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc3MjkpO1xuIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInRoaXMiLCJBdXRvY29tcGxldGVyIiwiSWZOb3RoaW5nWWV0RW50ZXJlZEF1dG9jb21wbGV0ZXIiLCJjb25zdHJ1Y3RvciIsImlmTm90aGluZ1lldEVudGVyZWQiLCJvdGhlcndpc2UiLCJnZXRBdXRvY29tcGxldGlvbiIsInBuIiwiX2p1c3RDaGVjayIsImdldFBhcnNlZFN0cmluZyIsImxlbmd0aCIsIkF1dG9jb21wbGV0aW9uIiwibGl0ZXJhbCIsInVuZGVmaW5lZCIsIkVudGlyZVNlcXVlbmNlQ29tcGxldGVyIiwiZWJuZiIsInN5bWJvbDJBdXRvY29tcGxldGlvbiIsImFscmVhZHlFbnRlcmVkIiwic2VxdWVuY2UiLCJnZXRSdWxlIiwiY2hpbGRyZW4iLCJnZXRDaGlsZHJlbiIsImVudGlyZVNlcXVlbmNlQ29tcGxldGlvbiIsIkVudGlyZVNlcXVlbmNlIiwiaSIsImtleSIsImdldFN5bWJvbCIsImdldE5hbWVGb3JDaGlsZCIsImF1dG9jb21wbGV0aW9uc0ZvckNoaWxkIiwiZ2V0IiwiYWRkIiwiYm5mIiwiQk5GIiwiZ2V0Qk5GIiwibmV3U2VxdWVuY2UiLCJTZXF1ZW5jZSIsInNldFBhcnNlZENoaWxkTmFtZXMiLCJjcmVhdGVCTkYiLCJyZW1vdmVTdGFydFByb2R1Y3Rpb24iLCJhZGRQcm9kdWN0aW9uIiwiUHJvZHVjdGlvbiIsIkFSVElGSUNJQUxfU1RBUlRfU1lNQk9MIiwiZ2V0VGFyZ2V0IiwiUkRQYXJzZXIiLCJMZXhlciIsIkVCTkZQYXJzZWROb2RlRmFjdG9yeSIsIklOU1RBTkNFIiwicGFyc2UiLCJzZXQiLCJhc0FycmF5IiwiaWR4IiwiZ2V0Q29tcGxldGlvbiIsIlB1cnBvc2UiLCJGT1JfSU5TRVJUSU9OIiwiaW5kZXhPZiIsIkRFRkFVTFRfSU5MSU5FX0FVVE9DT01QTEVURVIiLCJ2ZXRvIiwibmFtZSIsImdldE5hbWUiLCJwYXJhbWV0ZXJpemVkIiwiRXZhbHVhdG9yIiwiRklSU1RfQ0hJTERfRVZBTFVBVE9SIiwiZXZhbHVhdGUiLCJBTExfQ0hJTERSRU5fRVZBTFVBVE9SIiwibWFwIiwicCIsIkRFRkFVTFRfRVZBTFVBVE9SIiwiUGFyc2VFeGNlcHRpb24iLCJFcnJvciIsImZhaWxlZFRlcm1pbmFsIiwicGFyc2VyIiwic3VwZXIiLCJ0bXAiLCJkb2VzQXV0b2NvbXBsZXRlIiwiZ2V0UGFyZW50IiwiZmlyc3RBdXRvY29tcGxldGluZ0FuY2VzdG9yVGhhdEZhaWxlZCIsIm1lc3NhZ2UiLCJnZXRFcnJvciIsImdldFJvb3QiLCJnZXRGYWlsZWRUZXJtaW5hbCIsImdldEZpcnN0QXV0b2NvbXBsZXRpbmdBbmNlc3RvclRoYXRGYWlsZWQiLCJsZXhlciIsImdldExleGVyIiwiZ3JhbW1hciIsImdldEdyYW1tYXIiLCJlcnJvclBvcyIsImdldE1hdGNoZXIiLCJwb3MiLCJwYXJzZWQiLCJ3b3JraW5nVGV4dCIsInN1YnN0cmluZyIsIndvcmtpbmdMZXhlciIsInBhcnNlcjIiLCJnZXRQYXJzZWROb2RlRmFjdG9yeSIsImV4cGVjdGF0aW9ucyIsImUiLCJsaW5lcyIsInNwbGl0IiwiZXJyb3JMaW5lIiwiZXJyb3JQb3NJbkxhc3RMaW5lIiwiZXJyb3JNZXNzYWdlIiwiYWMiLCJ0b1N0cmluZyIsIlBhcnNlZE5vZGUiLCJEZWZhdWx0UGFyc2VkTm9kZSIsIm1hdGNoZXIiLCJzeW1ib2wiLCJwcm9kdWN0aW9uIiwibnRoRW50cnlJblBhcmVudCIsInNldE50aEVudHJ5SW5QYXJlbnQiLCJudGhFbnRyeSIsImdldE50aEVudHJ5SW5QYXJlbnQiLCJnZXRQcm9kdWN0aW9uIiwiRUJORlByb2R1Y3Rpb24iLCJwYXJlbnRIYXNTYW1lUnVsZSIsInRoaXNSdWxlIiwicGFyZW50IiwicGFyZW50UnVsZSIsImp1c3RDaGVjayIsInJ1bGUiLCJnZXRBdXRvY29tcGxldGVyIiwibm90aWZ5TGlzdGVuZXJzIiwibnVtQ2hpbGRyZW4iLCJnZXRDaGlsZCIsInN0YXRlIiwiZXF1YWxzIiwiUGFyc2luZ1N0YXRlIiwiU1VDQ0VTU0ZVTCIsIkVORF9PRl9JTlBVVCIsInBhcnNlTGlzdGVuZXIiLCJnZXRPblN1Y2Nlc3NmdWxQYXJzZWQiLCJuIiwiZ2V0RXZhbHVhdG9yIiwiRUJORiIsIkxJTkVCUkVBSyIsIlRlcm1pbmFsIiwidGFyZ2V0R3JhbW1hciIsIk1hcCIsImNvbXBpbGVkIiwicGFyc2VTdGFydExpc3RlbmVycyIsIlFVQU5USUZJRVIiLCJxdWFudGlmaWVyIiwiSURFTlRJRklFUiIsImlkZW50aWZpZXIiLCJWQVJJQUJMRV9OQU1FIiwidmFyaWFibGVOYW1lIiwiRU5UUllfTkFNRSIsImVudHJ5TmFtZSIsIkxJU1QiLCJsaXN0IiwiVFVQTEUiLCJ0dXBsZSIsIkNIQVJBQ1RFUl9DTEFTUyIsImNoYXJhY3RlckNsYXNzIiwiVFlQRSIsInR5cGUiLCJWQVJJQUJMRSIsInZhcmlhYmxlIiwiTk9fVkFSSUFCTEUiLCJub1ZhcmlhYmxlIiwiRVhQUkVTU0lPTiIsImV4cHJlc3Npb24iLCJMSU5FQlJFQUtfU1RBUiIsInN0YXIiLCJ3aXRoTmFtZSIsInByb2dyYW0iLCJnZXRUYXJnZXRHcmFtbWFyIiwiZGVmaW5lU2VudGVuY2UiLCJwYXR0ZXJuIiwiZXZhbHVhdG9yIiwiaG93VG9Db21wbGV0ZSIsImF1dG9jb21wbGV0ZXIiLCJkZWZpbmVUeXBlIiwiY29tcGlsZSIsInJocyIsIm5ld1J1bGUiLCJzZXRFdmFsdWF0b3IiLCJzZXRBdXRvY29tcGxldGVyIiwidW5kZWZpbmVUeXBlIiwidW5pdHNTeW1ib2wiLCJyZW1vdmVSdWxlcyIsInRleHQiLCJhdXRvY29tcGxldGlvbnMiLCJjbGVhciIsInJkUGFyc2VyIiwiRUJORlBhcnNlciIsImFkZFBhcnNlU3RhcnRMaXN0ZW5lciIsImZpcmVQYXJzaW5nU3RhcnRlZCIsImciLCJvciIsIl9wbiIsIkludFJhbmdlIiwiT1BUSU9OQUwiLCJQTFVTIiwiU1RBUiIsIklOVEVHRVJfUkFOR0UiLCJJTlRFR0VSIiwib3B0aW9uYWwiLCJwbHVzIiwiV0hJVEVTUEFDRV9TVEFSIiwiZW50cnkiLCJuYW1lZEVudHJ5IiwiblR1cGxlIiwiZW50cnlOYW1lcyIsIkFycmF5Iiwic3RyIiwidHlwZU9iamVjdCIsInF1YW50aWZpZXJPYmplY3QiLCJKb2luIiwiam9pbiIsInNldENhcmRpbmFsaXR5IiwibmFtZWRTeW1ib2wiLCJyYW5nZSIsInJlcGVhdCIsImdldExvd2VyIiwiZ2V0VXBwZXIiLCJwYXJzZWROb2RlIiwibkNoaWxkcmVuIiwicmhzTGlzdCIsInB1c2giLCJjaGlsZCIsIldISVRFU1BBQ0VfUExVUyIsIk5vblRlcm1pbmFsIiwibGlzdGVuZXIiLCJyZW1vdmVQYXJzZVN0YXJ0TGlzdGVuZXIiLCJzcGxpY2UiLCJsIiwicG5PckZvclN5bWJvbCIsInN5bWJvbE5hbWUiLCJmb3JTeW1ib2wiLCJpc0VtcHR5TGl0ZXJhbCIsIkxpdGVyYWwiLCJsaXRlcmFscyIsInByZWZpeCIsInBvc3RmaXgiLCJwYXJhbWV0ZXJOYW1lIiwiUGFyYW1ldGVyaXplZCIsIlZldG8iLCJEb2VzQXV0b2NvbXBsZXRlIiwiZ2V0QWxyZWFkeUVudGVyZWQiLCJzZXRBbHJlYWR5RW50ZXJlZCIsInNPclN5bWJvbE5hbWUiLCJzIiwiX3B1cnBvc2UiLCJwYXJhbU5hbWVPclN5bWJvbE5hbWUiLCJwYXJhbU5hbWUiLCJnZXRQYXJhbU5hbWUiLCJWRVRPIiwic2VxdWVuY2VPZkNvbXBsZXRpb25zIiwiY29tcGxldGlvbnMiLCJnZXRTZXF1ZW5jZU9mQ29tcGxldGlvbnMiLCJnZXRTZXF1ZW5jZSIsImFkZExpdGVyYWwiLCJjb21wbGV0aW9uIiwiYWRkUGFyYW1ldGVyaXplZCIsInBhcmFtZXRlciIsInB1cnBvc2UiLCJhdXRvY29tcGxldGlvblN0cmluZyIsIkZPUl9NRU5VIiwiaW5zIiwiTmFtZWQiLCJVTk5BTUVEIiwib3RoZXIiLCJzeW1ib2xzIiwicHJvZHVjdGlvbnMiLCJ2YWx1ZSIsInJlc2V0IiwiZ2V0TGVmdCIsImV4aXN0aW5nIiwiZmluZEluZGV4IiwidiIsImNvbnNvbGUiLCJsb2ciLCJzeW0iLCJnZXRSaWdodCIsImlzRXBzaWxvbiIsInJldCIsImdldFByb2R1Y3Rpb25zIiwibGVmdCIsImZpbHRlciIsIkFSVElGSUNJQUxfU1RPUF9TWU1CT0wiLCJzZXROYW1lIiwiYXV0b2NvbXBsZXRpb24iLCJpc1Rlcm1pbmFsIiwiZmluZCIsImFkZENoaWxkcmVuIiwicmVtb3ZlQWxsQ2hpbGRyZW4iLCJuYW1lcyIsImlucHV0IiwiZ2V0UG9zaXRpb24iLCJzZXRQb3NpdGlvbiIsImZ3ZCIsImxlbiIsInBlZWsiLCJjaGFyQXQiLCJmcm9tIiwidG8iLCJpc0RvbmUiLCJpc0F0RW5kIiwiTWF0Y2hlciIsImlzQmV0dGVyVGhhbiIsIm8iLCJvYmplY3QiLCJnZXRSZXByZXNlbnRlZFN5bWJvbCIsIlN5bSIsImlzTm9uVGVybWluYWwiLCJ1c2VzIiwicHJvZ3Jlc3NpbmciLCJTZXQiLCJyU3ltIiwibWFrZVJhbmRvbVN5bWJvbCIsInJlc3VsdCIsIk1hdGgiLCJmbG9vciIsImNoYXJhY3RlcnMiLCJyYW5kb20iLCJQYXJzZWROb2RlRmFjdG9yeSIsIkRFRkFVTFQiLCJjcmVhdGVOb2RlIiwib3JkaW5hbCIsImxhYmVsIiwiRkFJTEVEIiwiTk9UX1BBUlNFRCIsIkFzdEJ1aWxkZXIiLCJyaWdodCIsImFzdEJ1aWxkZXIiLCJleHRlbnNpb25MaXN0ZW5lciIsInJlbW92ZUVwc2lsb24iLCJhcnIiLCJFUFNJTE9OIiwic2V0QXN0QnVpbGRlciIsImJ1aWx0QVNUIiwid2FzRXh0ZW5kZWQiLCJvbkV4dGVuc2lvbiIsInNiIiwiayIsImFycmF5c0VxdWFsIiwiYSIsImIiLCJwYXJzZWROb2RlRmFjdG9yeSIsInNlcSIsIlN5bWJvbFNlcXVlbmNlIiwiZW5kT2ZJbnB1dCIsInBhcnNlZFNlcXVlbmNlIiwicGFyc2VSZWN1cnNpdmUiLCJjb2xsZWN0QXV0b2NvbXBsZXRpb25zIiwibGFzdCIsImNyZWF0ZVBhcnNlZFRyZWUiLCJidWlsZEFzdCIsImF1dG9jb21wbGV0aW5nUGFyZW50cyIsImNvbGxlY3RBdXRvY29tcGxldGluZ1BhcmVudHMiLCJkb25lIiwiYXV0b2NvbXBsZXRpbmdQYXJlbnQiLCJwcm9kIiwiaGFzIiwiYWRkQXV0b2NvbXBsZXRpb25zIiwic3ltYm9sU2VxdWVuY2UiLCJwYXRoVG9Sb290IiwiYXV0b2NvbXBsZXRpbmdQYXJlbnRTdGFydCIsImMiLCJjQ29tcGxldGlvbiIsInNvbWUiLCJuZXh0IiwiZ2V0Q3VycmVudFN5bWJvbCIsIm1hdGNoZXMiLCJhZGRNYXRjaGVyIiwiaW5jcmVtZW50UG9zaXRpb24iLCJiZXN0IiwidSIsImFsdGVybmF0ZXMiLCJsZXhlclBvc09mQmVzdCIsImFsdGVybmF0ZSIsImxleGVyUG9zIiwibmV4dFNlcXVlbmNlIiwicmVwbGFjZUN1cnJlbnRTeW1ib2wiLCJtIiwiZ2V0TGFzdE1hdGNoZXIiLCJsZWFmU2VxdWVuY2UiLCJyZXRMYXN0IiwicGFyc2VkTm9kZVNlcXVlbmNlIiwiblBhcnNlZE1hdGNoZXJzIiwicGFyc2VkTWF0Y2hlcnMiLCJjaGlsZFNlcXVlbmNlIiwicGFyZW50U2VxdWVuY2UiLCJwcm9kdWN0aW9uVG9DcmVhdGVDaGlsZFNlcXVlbmNlIiwibGhzIiwicmhzU2l6ZSIsImNoaWxkTGlzdCIsInNsaWNlIiwibWF0Y2hlckZyb21DaGlsZFNlcXVlbmNlIiwibmV3UGFyZW50Iiwibm90aWZ5RXh0ZW5zaW9uTGlzdGVuZXJzIiwiY2hpbGRTdGF0ZSIsInN0YXJ0IiwiYXQiLCJjb3B5IiwicmVwbGFjZW1lbnQiLCJDaGFyYWN0ZXJDbGFzcyIsIkVwc2lsb24iLCJfbWF0Y2hlciIsIkVuZE9mSW5wdXQiLCJEaWdpdCIsIm1hdGNoIiwiTGV0dGVyIiwiZGVidWciLCJXaGl0ZXNwYWNlIiwidHJpbSIsImVuZCIsIm5lZ2F0ZWQiLCJyYW5nZXMiLCJSYW5nZXMiLCJTaW5nbGVDaGFyYWN0ZXJSYW5nZSIsImNoYXJDb2RlQXQiLCJuSWR4IiwiQ2hhcmFjdGVyUmFuZ2UiLCJjaGVja0NoYXJhY3RlciIsImxvd2VyIiwidXBwZXIiLCJudW1iZXIiLCJjaGVjayIsInNvcnRlciIsImFycjEiLCJhcnIyIiwic29ydCIsIkRJR0lUIiwiTEVUVEVSIiwiV0hJVEVTUEFDRSIsIkVCTkZDb3JlIiwiU0lHTiIsIm1ha2VTaWduIiwibWFrZUludGVnZXIiLCJGTE9BVCIsIm1ha2VGbG9hdCIsIk1PTlRIIiwibWFrZU1vbnRoIiwiV0VFS0RBWSIsIm1ha2VXZWVrZGF5IiwibWFrZVdoaXRlc3BhY2VTdGFyIiwibWFrZVdoaXRlc3BhY2VQbHVzIiwibWFrZUludGVnZXJSYW5nZSIsIlRJTUUiLCJtYWtlVGltZSIsIkRBVEUiLCJtYWtlRGF0ZSIsIkRBVEVUSU1FIiwibWFrZURhdGV0aW1lIiwiQ09MT1IiLCJtYWtlQ29sb3IiLCJTSUdOX05BTUUiLCJJTlRFR0VSX05BTUUiLCJwYXJzZUludCIsIkZMT0FUX05BTUUiLCJwYXJzZUZsb2F0IiwiV0hJVEVTUEFDRV9TVEFSX05BTUUiLCJXSElURVNQQUNFX1BMVVNfTkFNRSIsImRlbGltaXRlciIsIklOVEVHRVJfUkFOR0VfTkFNRSIsImJsYWNrIiwicmdiMmludCIsIndoaXRlIiwicmVkIiwib3JhbmdlIiwieWVsbG93IiwibGF3bmdyZWVuIiwiZ3JlZW4iLCJzcHJpbmdncmVlbiIsImN5YW4iLCJhenVyZSIsImJsdWUiLCJ2aW9sZXQiLCJtYWdlbnRhIiwicGluayIsImdyYXkiLCJjdXN0b20iLCJDT0xPUl9OQU1FIiwiciIsImhvdXIiLCJtaW51dGUiLCJUSU1FX05BTUUiLCJwYXJzZVRpbWUiLCJNT05USF9OQU1FIiwiV0VFS0RBWV9OQU1FIiwiZGF5IiwieWVhciIsIkRBVEVfTkFNRSIsIm1vbnRoIiwiZGF0ZSIsIkRhdGUiLCJzZXREYXRlIiwic2V0TW9udGgiLCJzZXRGdWxsWWVhciIsInNldEhvdXJzIiwiREFURVRJTUVfTkFNRSIsInRpbWUiLCJnZXRIb3VycyIsInNldE1pbnV0ZXMiLCJnZXRNaW51dGVzIiwic2V0U2Vjb25kcyIsImdldFNlY29uZHMiLCJzZXRNaWxsaXNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJ0b2tzIiwiaCIsImQiLCJESUdJVF9OQU1FIiwiTEVUVEVSX05BTUUiLCJQQVRIX05BTUUiLCJydWxlcyIsInRvcExldmVsU3ltYm9sIiwiYWRkUnVsZSIsImdldFJ1bGVzIiwidGFyZ2V0IiwidGd0IiwibmV3T3JFeGlzdGluZ05vblRlcm1pbmFsIiwiUGx1cyIsIlN0YXIiLCJvcHRpb25zIiwiT3IiLCJnZXRTeW1ib2xzIiwiZ2V0TmFtZXMiLCJPcHRpb25hbCIsIlJlcGVhdCIsIm9wZW4iLCJjbG9zZSIsIm9ubHlLZWVwRW50cmllcyIsImNhcmRpbmFsaXR5Iiwic2V0T25seUtlZXBFbnRyaWVzIiwid3NTdGFyIiwibmFtZWQiLCJSdWxlIiwiZ2V0RW50cnkiLCJnZXRDYXJkaW5hbGl0eSIsImZpcnN0IiwiaGFzT3BlbiIsImhhc0Nsb3NlIiwiaGFzRGVsaW1pdGVyIiwidGhhdCIsInJlcGV0aXRpb24iLCJfcGFyZW50IiwicDEiLCJwMiIsIl9jaGlsZHJlbiIsIk5hbWVkUnVsZSIsIm9uU3VjY2Vzc2Z1bFBhcnNlZCIsImMwIiwiaW8iLCJmaW8iLCJvcHRpb24iLCJjMSIsImdldEZyb20iLCJnZXRUbyIsInNlcUxlbiIsImNoIiwiX29uU3VjY2Vzc2Z1bFBhcnNlZCIsInBhcnNlZENoaWxkTmFtZXMiLCJnZXR0ZXIiLCJzZXR0ZXIiLCJ2VG8iLCJuQ3ljbGVzIiwiaW5pdGlhbGl6ZSIsInZGcm9tIiwiaW50ZXJwb2xhdGUiLCJjeWNsZSIsImludGVycG9sYXRlZCIsIlBhcnNlciIsImRlZmluZWRDaGFubmVscyIsImRlZmluZWRSZWdpb25zIiwiX2UiLCJwb3dlciIsImxlZCIsInVuaXQiLCJyb3VuZCIsIm1pY3Jvc2NvcGUiLCJ0aW1lbGluZSIsIlRpbWVsaW5lIiwiTWljcm9zY29wZSIsImdsb2JhbFN0YXJ0IiwiZ2V0VGltZWxpbmUiLCJnZXRNaWNyb3Njb3BlIiwiaW5pdFBhcnNlciIsIkxFRCIsIkxFRF8zODUiLCJMRURfNDcwIiwiTEVEXzU2NyIsIkxFRF82MjUiLCJMRURTZXR0aW5nIiwiZmlyc3RMZWRTZXR0aW5nIiwib3RoZXJMZWRTZXR0aW5ncyIsImV4cG9zdXJlVGltZSIsImNoYW5uZWwiLCJDaGFubmVsIiwiYWRkQ2hhbm5lbCIsImRpbWVuc2lvbnMiLCJjZW50ZXIiLCJhZGRQb3NpdGlvbiIsIlBvc2l0aW9uIiwiblVuaXRzIiwidW5pdEluU2Vjb25kcyIsIkxlbnMiLCJGSVZFIiwiVFdFTlRZIiwiTWFnbmlmaWNhdGlvbkNoYW5nZXIiLCJaRVJPX0ZJVkUiLCJPTkVfWkVSTyIsIlRXT19aRVJPIiwiQmlubmluZyIsIk9ORSIsIlRXTyIsIlRIUkVFIiwiRk9VUiIsImFmdGVyU2Vjb25kcyIsIkFMTF9QT1NJVElPTlMiLCJBTExfQ0hBTk5FTFMiLCJpbnRlcnZhbCIsImR1cmF0aW9uIiwicG9zaXRpb25OYW1lcyIsImNoYW5uZWxOYW1lcyIsImxlbnMiLCJtYWciLCJiaW5uaW5nIiwiZHoiLCJnZXRUaW1lIiwiZ2V0RGF0ZSIsInBsYW5uZWRFeGVjdXRpb25UaW1lIiwicHV0Iiwic2V0TGVucyIsInNldE1hZ25pZmljYXRpb25DaGFuZ2VyIiwic2V0QmlubmluZyIsImFjcXVpcmUiLCJpbnRlcnBvbGF0b3IiLCJJbnRlcnBvbGF0b3IiLCJnZXRDaGFubmVsIiwiZ2V0TEVEU2V0dGluZyIsImdldEludGVuc2l0eSIsIl9jIiwic2V0SW50ZW5zaXR5IiwiZ2V0RXhwb3N1cmVUaW1lIiwic2V0RXhwb3N1cmVUaW1lIiwiY28yQ29uY2VudHJhdGlvbiIsImdldENPMkNvbmNlbnRyYXRpb24iLCJzZXRDTzJDb25jZW50cmF0aW9uIiwidGVtcGVyYXR1cmUiLCJnZXRUZW1wZXJhdHVyZSIsInNldFRlbXBlcmF0dXJlIiwid2F2ZWxlbmd0aCIsIldBVkVMRU5HVEgiLCJMRURzIiwiaW50ZW5zaXR5IiwicmVtYWluaW5nIiwibGVkU2V0dGluZ3MiLCJtYWduaWZpY2F0aW9uIiwiTEVOU0VTIiwiTUFHTklGSUNBVElPTl9DSEFOR0VTIiwiVHVwbGUzRCIsInQiLCJ4IiwieSIsInoiLCJleHRlbnQiLCJJbmN1YmF0aW9uIiwiY2hhbm5lbHMiLCJwb3NpdGlvbnMiLCJtYWduaWZpY2F0aW9uQ2hhbmdlciIsImluY3ViYXRpb24iLCJvbkFjcXVpcmUiLCJhY3F1aXJlU2luZ2xlUG9zaXRpb25BbmRDaGFubmVsIiwic2V0T25BY3F1aXJlIiwiZnVuYyIsImNsZWFyQ2hhbm5lbHMiLCJwb3NpdGlvbiIsImNsZWFyUG9zaXRpb25zIiwiZ2V0TGVucyIsImdldE1hZ25pZmljYXRpb25DaGFuZ2VyIiwiYWNxdWlyZVBvc2l0aW9uc0FuZENoYW5uZWxzIiwiX2R6IiwidGltZVN0YW1wIiwidG9Mb2NhbGVTdHJpbmciLCJob3VyMTIiLCJzZWNvbmQiLCJsZWRTZXR0aW5nIiwic3RvcCIsImV4ZWN1dG9yIiwicnVuQW5kUmVtb3ZlRW50cmllc0JlZm9yZSIsInRpbWVzVG9SZW1vdmUiLCJlbnRyeVRpbWUiLCJlbnRyaWVzIiwidGltZVRvUmVtb3ZlIiwiaW5kZXgiLCJwcm9jZXNzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0Iiwid2FpdEZvclByb2Nlc3NpbmciLCJjYW5jZWwiLCJyZW5kZXIiLCJfc3RhdGUiLCJhcHBseSIsImVsIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwidmlldyIsImF1dG9jb21wbGV0aW9uRXh0ZW5zaW9uIiwiYWN0aXZhdGVPblR5cGluZyIsImRlZmF1bHRLZXltYXAiLCJpbnRlcmFjdGlvbkRlbGF5IiwiY2xvc2VPbkJsdXIiLCJvdmVycmlkZSIsImdldENvbXBsZXRpb25zIiwiYWRkVG9PcHRpb25zIiwic2VsZWN0TmV4dCIsIm1vdmVDb21wbGV0aW9uU2VsZWN0aW9uIiwic2VsZWN0UHJldmlvdXMiLCJzZXRDb21wbGV0aW9ucyIsImdldFNlbGVjdGVkIiwic2VsZWN0ZWRDb21wbGV0aW9uIiwiY3VycmVudENvbXBsZXRpb25zIiwiY29tcGxldGlvblByZWZpeCIsImhpZGVQb3B1cCIsImNsb3NlQ29tcGxldGlvbiIsImNvbXBsZXRlIiwic3RhcnRDb21wbGV0aW9uIiwiaXNBY3RpdmUiLCJjb21wbGV0aW9uU3RhdHVzIiwiY29udGV4dCIsImFscmVhZHlFbnRlcmVkTGVuZ3RoIiwicmVwbGFjZUFsbCIsInN0YXJ0c1dpdGgiLCJiYXNpY1NldHVwIiwibGluZU51bWJlcnMiLCJoaWdobGlnaHRBY3RpdmVMaW5lR3V0dGVyIiwiaGlnaGxpZ2h0U3BlY2lhbENoYXJzIiwiaGlzdG9yeSIsImZvbGRHdXR0ZXIiLCJkcmF3U2VsZWN0aW9uIiwiZHJvcEN1cnNvciIsIkVkaXRvclN0YXRlIiwiYWxsb3dNdWx0aXBsZVNlbGVjdGlvbnMiLCJvZiIsImluZGVudE9uSW5wdXQiLCJzeW50YXhIaWdobGlnaHRpbmciLCJkZWZhdWx0SGlnaGxpZ2h0U3R5bGUiLCJmYWxsYmFjayIsImJyYWNrZXRNYXRjaGluZyIsImNsb3NlQnJhY2tldHMiLCJyZWN0YW5ndWxhclNlbGVjdGlvbiIsImNyb3NzaGFpckN1cnNvciIsImhpZ2hsaWdodEFjdGl2ZUxpbmUiLCJrZXltYXAiLCJjbG9zZUJyYWNrZXRzS2V5bWFwIiwic2VhcmNoS2V5bWFwIiwiaGlzdG9yeUtleW1hcCIsImZvbGRLZXltYXAiLCJjb21wbGV0aW9uS2V5bWFwIiwibGludEtleW1hcCIsInBhcmFtZXRlcml6ZWRDb21wbGV0aW9uIiwiZXJyb3JIaWdobGlnaHQiLCJvblJ1biIsInJ1biIsImJlZm9yZVJ1biIsImFmdGVyUnVuIiwiZWRpdG9yRWxlbWVudCIsImNyZWF0ZUVkaXRvckVsZW1lbnQiLCJvdXRwdXRFbGVtZW50IiwiY3JlYXRlT3V0cHV0RWxlbWVudCIsImNyZWF0ZUJ1dHRvbiIsIm9uY2xpY2siLCJlZGl0b3IiLCJFZGl0b3JWaWV3IiwiZXh0ZW5zaW9ucyIsIkVycm9ySGlnaGxpZ2h0IiwiY29tcGxldGVyIiwiQUNDb21wbGV0ZXIiLCJkaXNwYXRjaCIsImVmZmVjdHMiLCJTdGF0ZUVmZmVjdCIsInJlY29uZmlndXJlIiwiZG9tRXZlbnRIYW5kbGVycyIsImtleWRvd24iLCJoYW5kbGVLZXlFdmVudCIsImxpbmVXcmFwcGluZyIsImhpZ2hsaWdodF9leHRlbnNpb24iLCJlcnJvcl9oaWdobGlnaHRfZXh0ZW5zaW9uIiwiZ2V0U2VsZWN0ZWRMaW5lc1N0YXJ0Iiwic2VsRnJvbSIsInNlbGVjdGlvbiIsIm1haW4iLCJkb2MiLCJsaW5lQXQiLCJnZXRTZWxlY3RlZExpbmVzRW5kIiwic2VsVG8iLCJnZXRTZWxlY3RlZExpbmVzIiwic2xpY2VEb2MiLCJzZXRPblJ1biIsInNldEJlZm9yZVJ1biIsInNldEFmdGVyUnVuIiwiaWQiLCJzZXRBdHRyaWJ1dGUiLCJhcHBlbmRDaGlsZCIsImlubmVyVGV4dCIsInNlbGVjdGVkTGluZXNPbmx5IiwidGV4dENvbnRlbnQiLCJlbnRpcmVUZXh0IiwidGV4dFRvRXZhbHVhdGUiLCJlcnJvciIsImNhbGwiLCJzdGFjayIsImluc2VydENvbXBsZXRpb24iLCJjYXJldCIsImhlYWQiLCJjdXJzb3JJc0F0RW5kIiwiZW1wdHkiLCJhbmNob3IiLCJyZXBsIiwiY2FuY2VsUGFyYW1ldGVyaXplZENvbXBsZXRpb24iLCJQYXJhbWV0ZXJpemVkQ29tcGxldGlvbiIsInNldFBhcmFtZXRlckNoYW5nZUxpc3RlbmVyIiwicElkeCIsIndhc0xhc3QiLCJwYXJhbWV0ZXJDaGFuZ2VkIiwicmVwbGFjZVNlbGVjdGlvbiIsImF1dG9jb21wbGV0ZSIsIl9wSWR4IiwiY3RybEtleSIsImRlZmF1bHRQcmV2ZW50ZWQiLCJtZXRhS2V5IiwiYWx0S2V5IiwiYXV0b2luc2VydFNpbmdsZU9wdGlvbiIsInRleHRUb0N1cnNvciIsImNsZWFyRXJyb3IiLCJmIiwic2V0RXJyb3IiLCJhdExlYXN0T25lQ29tcGxldGlvbkZvckN1cnJlbnRQYXJhbXRlciIsImNvbXAiLCJwYXJzZVBhcmFtZXRlcnMiLCJnZXRGb3JBdXRvY29tcGxldGlvbiIsInBwIiwiZ2V0Q3VycmVudFBhcmFtZXRlciIsInBhcmFtZXRlclN5bWJvbCIsImFkZEVycm9yRWZmZWN0IiwicmVtb3ZlRXJyb3JFZmZlY3QiLCJTdGF0ZUZpZWxkIiwiY3JlYXRlIiwiRGVjb3JhdGlvbiIsIm5vbmUiLCJ1cGRhdGUiLCJ0cmFuc2FjdGlvbiIsImNoYW5nZXMiLCJlZmZlY3QiLCJpcyIsInByb3ZpZGUiLCJkZWNvcmF0aW9ucyIsImVycm9yX2RlY29yYXRpb24iLCJtYXJrIiwiaW5jbHVzaXZlIiwiYXR0cmlidXRlcyIsInN0eWxlIiwidGFnTmFtZSIsInRjIiwicGFyYW1ldGVyQ2hhbmdlTGlzdGVuZXIiLCJpMCIsImkxIiwiYWRkSGlnaGxpZ2h0IiwicmVtb3ZlSGlnaGxpZ2h0IiwiaGlnaGxpZ2h0X2RlY29yYXRpb24iLCJNeVdpZGdldFR5cGUiLCJXaWRnZXRUeXBlIiwidG9ET00iLCJfdmlldyIsInNwYW4iLCJlbmRfZGVjb3JhdGlvbiIsIndpZGdldCIsInNpZGUiLCJyZW1vdmVIaWdobGlnaHRzIiwicGFyYW1ldGVycyIsImZvckF1dG9jb21wbGV0aW9uIiwiaW5zZXJ0aW9uU3RyaW5nIiwib2Zmc2V0IiwiYXRFbmQiLCJoaWdobGlnaHRFbmQiLCJkcyIsImZpZWxkIiwiaXQiLCJpdGVyIiwiY3Vyc29yIiwic2l6ZSIsImdldFBhcmFtSW5kZXhGb3JDdXJzb3IiLCJwcmV2aW91cyIsImN1cnJlbnRQYXJhbWV0ZXJJbmRleCIsIm5QYXJhbWV0ZXJzIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsInNoaWZ0S2V5IiwiUGFyc2VkUGFyYW0iLCJzaW5nbGUiLCJlbnRpcmUiLCJvZmZzIiwiTUFYX0lOVCIsImxhbmd1YWdlIiwiQ29tcGxldGlvbkNvbnRleHQiLCJleHBsaWNpdCIsImFib3J0TGlzdGVuZXJzIiwidG9rZW5CZWZvcmUiLCJ0eXBlcyIsInRva2VuIiwic3ludGF4VHJlZSIsInJlc29sdmVJbm5lciIsIm1hdGNoQmVmb3JlIiwiZXhwciIsImxpbmUiLCJtYXgiLCJmb3VuZCIsInNlYXJjaCIsImVuc3VyZUFuY2hvciIsImFib3J0ZWQiLCJhZGRFdmVudExpc3RlbmVyIiwidG9TZXQiLCJjaGFycyIsImZsYXQiLCJPYmplY3QiLCJrZXlzIiwid29yZHMiLCJ0ZXN0IiwicmVwbGFjZSIsImNvbXBsZXRlRnJvbUxpc3QiLCJ2YWxpZEZvciIsImV2ZXJ5IiwicmVzdCIsInNvdXJjZSIsIlJlZ0V4cCIsInByZWZpeE1hdGNoIiwiT3B0aW9uIiwic2NvcmUiLCJjdXIiLCJfYSIsImFkZFN0YXJ0IiwiYWRkRW5kIiwiZmxhZ3MiLCJpZ25vcmVDYXNlIiwicGlja2VkQ29tcGxldGlvbiIsIkFubm90YXRpb24iLCJpbnNlcnRDb21wbGV0aW9uVGV4dCIsInN0YXRlJDEiLCJmcm9tT2ZmIiwidG9PZmYiLCJhc3NpZ24iLCJjaGFuZ2VCeVJhbmdlIiwiaW5zZXJ0IiwiRWRpdG9yU2VsZWN0aW9uIiwic2Nyb2xsSW50b1ZpZXciLCJ1c2VyRXZlbnQiLCJTb3VyY2VDYWNoZSIsIldlYWtNYXAiLCJhc1NvdXJjZSIsImlzQXJyYXkiLCJrbm93biIsInN0YXJ0Q29tcGxldGlvbkVmZmVjdCIsImNsb3NlQ29tcGxldGlvbkVmZmVjdCIsIkZ1enp5TWF0Y2hlciIsImZvbGRlZCIsImFueSIsInByZWNpc2UiLCJieVdvcmQiLCJtYXRjaGVkIiwiY2hhciIsImNvZGVQb2ludEF0IiwiY29kZVBvaW50U2l6ZSIsInBhcnQiLCJ0b1VwcGVyQ2FzZSIsInRvTG93ZXJDYXNlIiwiYXN0cmFsIiwid29yZCIsImZpcnN0U2l6ZSIsImRpcmVjdCIsImFueVRvIiwibWluIiwicHJlY2lzZVRvIiwiYnlXb3JkVG8iLCJieVdvcmRGb2xkZWQiLCJhZGphY2VudFRvIiwiYWRqYWNlbnRTdGFydCIsImFkamFjZW50RW5kIiwiaGFzTG93ZXIiLCJ3b3JkQWRqYWNlbnQiLCJwcmV2VHlwZSIsImZyb21Db2RlUG9pbnQiLCJTdHJpY3RNYXRjaGVyIiwiY29tcGxldGlvbkNvbmZpZyIsIkZhY2V0IiwiY29tYmluZSIsImNvbmZpZ3MiLCJjb21iaW5lQ29uZmlnIiwiYWN0aXZhdGVPbkNvbXBsZXRpb24iLCJhY3RpdmF0ZU9uVHlwaW5nRGVsYXkiLCJzZWxlY3RPbk9wZW4iLCJtYXhSZW5kZXJlZE9wdGlvbnMiLCJ0b29sdGlwQ2xhc3MiLCJvcHRpb25DbGFzcyIsImFib3ZlQ3Vyc29yIiwiaWNvbnMiLCJwb3NpdGlvbkluZm8iLCJkZWZhdWx0UG9zaXRpb25JbmZvIiwiZmlsdGVyU3RyaWN0IiwiY29tcGFyZUNvbXBsZXRpb25zIiwibG9jYWxlQ29tcGFyZSIsInVwZGF0ZVN5bmNUaW1lIiwiam9pbkNsYXNzIiwiY29uY2F0IiwidmlldyQxIiwiaW5mbyIsInNwYWNlIiwidG9vbHRpcCIsIm1heFdpZHRoIiwicnRsIiwidGV4dERpcmVjdGlvbiIsIkRpcmVjdGlvbiIsIlJUTCIsIm5hcnJvdyIsInNwYWNlTGVmdCIsInNwYWNlUmlnaHQiLCJpbmZvV2lkdGgiLCJpbmZvSGVpZ2h0IiwiYm90dG9tIiwidG9wIiwic3BhY2VCZWxvdyIsIm9mZnNldEhlaWdodCIsIm9mZnNldFdpZHRoIiwiY2xhc3MiLCJyYW5nZUFyb3VuZFNlbGVjdGVkIiwidG90YWwiLCJzZWxlY3RlZCIsIm9mZiIsIkNvbXBsZXRpb25Ub29sdGlwIiwic3RhdGVGaWVsZCIsImFwcGx5Q29tcGxldGlvbiIsImluZm9EZXN0cm95IiwicGxhY2VJbmZvUmVxIiwicmVhZCIsIm1lYXN1cmVJbmZvIiwid3JpdGUiLCJwbGFjZUluZm8iLCJjdXJyZW50Q2xhc3MiLCJjU3RhdGUiLCJjb25maWciLCJmYWNldCIsIm9wdGlvbkNvbnRlbnQiLCJjb250ZW50IiwiaWNvbiIsImNsYXNzTGlzdCIsImNscyIsIl9zIiwiX3YiLCJsYWJlbEVsdCIsImNsYXNzTmFtZSIsImRpc3BsYXlMYWJlbCIsImoiLCJjcmVhdGVUZXh0Tm9kZSIsImRldGFpbCIsImRldGFpbEVsdCIsImRvbSIsInVwZGF0ZVRvb2x0aXBDbGFzcyIsInBhcmVudE5vZGUiLCJub2RlTmFtZSIsImV4ZWMiLCJyZWxhdGVkVGFyZ2V0IiwiY29udGVudERPTSIsInNob3dPcHRpb25zIiwibW91bnQiLCJ1cGRhdGVTZWwiLCJyZW1vdmUiLCJjcmVhdGVMaXN0Qm94IiwicmVxdWVzdE1lYXN1cmUiLCJwcmV2U3RhdGUiLCJzdGFydFN0YXRlIiwiZGlzYWJsZWQiLCJ0b2dnbGUiLCJwb3NpdGlvbmVkIiwidXBkYXRlU2VsZWN0ZWRPcHRpb24iLCJkZXN0cm95SW5mbyIsImluZm9SZXN1bHQiLCJ0aGVuIiwib2JqIiwiYWRkSW5mb1BhbmUiLCJjYXRjaCIsImxvZ0V4Y2VwdGlvbiIsIndyYXAiLCJub2RlVHlwZSIsImRlc3Ryb3kiLCJvcHQiLCJmaXJzdENoaWxkIiwibmV4dFNpYmxpbmciLCJoYXNBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJjb250YWluZXIiLCJlbGVtZW50IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwic2VsZiIsInNjYWxlWSIsImhlaWdodCIsInNjcm9sbFRvcCIsInNlbCIsInF1ZXJ5U2VsZWN0b3IiLCJsaXN0UmVjdCIsImluZm9SZWN0Iiwic2VsUmVjdCIsIndpbiIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsImNzc1RleHQiLCJ1bCIsInBocmFzZSIsImN1clNlY3Rpb24iLCJzZWN0aW9uIiwiaGVhZGVyIiwibGkiLCJub2RlIiwiYm9vc3QiLCJDb21wbGV0aW9uRGlhbG9nIiwiYXR0cnMiLCJ0aW1lc3RhbXAiLCJzZXRTZWxlY3RlZCIsIm1ha2VBdHRycyIsImJ1aWxkIiwiYWN0aXZlIiwicHJldiIsImNvbmYiLCJzZWN0aW9ucyIsImFkZE9wdGlvbiIsImhhc1Jlc3VsdCIsImdldE1hdGNoIiwic2VjdGlvbk9yZGVyIiwiY21wIiwiX2IiLCJyYW5rIiwiY29tcGFyZSIsInNvcnRPcHRpb25zIiwic2VsZWN0ZWRWYWx1ZSIsInJlZHVjZSIsImNyZWF0ZVRvb2x0aXAiLCJhYm92ZSIsIm5vdyIsIm1hcFBvcyIsIkNvbXBsZXRpb25TdGF0ZSIsInRyIiwibGFuZ3VhZ2VEYXRhQXQiLCJBY3RpdmVTb3VyY2UiLCJkb2NDaGFuZ2VkIiwidG91Y2hlc1JhbmdlIiwiaUEiLCJpQiIsImVuZEEiLCJlbmRCIiwic2FtZVJlc3VsdHMiLCJzZXRTZWxlY3RlZEVmZmVjdCIsImJhc2VBdHRycyIsIm5vQXR0cnMiLCJnZXRVc2VyRXZlbnQiLCJpc1VzZXJFdmVudCIsImFubm90YXRpb24iLCJleHBsaWNpdFBvcyIsImhhbmRsZVVzZXJFdmVudCIsImhhbmRsZUNoYW5nZSIsInNldEFjdGl2ZUVmZmVjdCIsIkFjdGl2ZVJlc3VsdCIsImNoZWNrVmFsaWQiLCJtYXBwaW5nIiwic291cmNlcyIsImNvbXBsZXRpb25TdGF0ZSIsInNob3dUb29sdGlwIiwidmFsIiwiY29udGVudEF0dHJpYnV0ZXMiLCJhbm5vdGF0aW9ucyIsImNvbXBsZXRpb25Ub29sdGlwIiwiZm9yd2FyZCIsImJ5Iiwic3RlcCIsImdldFRvb2x0aXAiLCJhY2NlcHRDb21wbGV0aW9uIiwicmVhZE9ubHkiLCJSdW5uaW5nUXVlcnkiLCJ1cGRhdGVzIiwiY29tcGxldGlvblBsdWdpbiIsIlZpZXdQbHVnaW4iLCJmcm9tQ2xhc3MiLCJkZWJvdW5jZVVwZGF0ZSIsInJ1bm5pbmciLCJkZWJvdW5jZUFjY2VwdCIsInBlbmRpbmdTdGFydCIsImNvbXBvc2luZyIsInN0YXJ0UXVlcnkiLCJzZWxlY3Rpb25TZXQiLCJkb2VzUmVzZXQiLCJ0cmFuc2FjdGlvbnMiLCJxdWVyeSIsImhhbmRsZXIiLCJjbGVhclRpbWVvdXQiLCJkZWxheSIsInEiLCJzdGFydFVwZGF0ZSIsInBlbmRpbmciLCJzY2hlZHVsZUFjY2VwdCIsImVyciIsImFjY2VwdCIsInVwZGF0ZWQiLCJjdXJyZW50IiwiZXZlbnRIYW5kbGVycyIsImJsdXIiLCJkaWFsb2ciLCJjb250YWlucyIsImNvbXBvc2l0aW9uc3RhcnQiLCJjb21wb3NpdGlvbmVuZCIsIndpbmRvd3MiLCJuYXZpZ2F0b3IiLCJwbGF0Zm9ybSIsImNvbW1pdENoYXJhY3RlcnMiLCJQcmVjIiwiaGlnaGVzdCIsImNvbW1pdENoYXJzIiwiYmFzZVRoZW1lIiwiZm9udEZhbWlseSIsIndoaXRlU3BhY2UiLCJvdmVyZmxvdyIsIm1heFdpZHRoX2ZhbGxiYWNrIiwibWluV2lkdGgiLCJtYXhIZWlnaHQiLCJsaXN0U3R5bGUiLCJtYXJnaW4iLCJwYWRkaW5nIiwibGluZUhlaWdodCIsIm92ZXJmbG93WCIsInRleHRPdmVyZmxvdyIsImRpc3BsYXkiLCJib3JkZXJCb3R0b20iLCJwYWRkaW5nTGVmdCIsIm9wYWNpdHkiLCJiYWNrZ3JvdW5kIiwiY29sb3IiLCJ0ZXh0QWxpZ24iLCJ3aWR0aCIsImJveFNpemluZyIsImJhY2tncm91bmRDb2xvciIsInZlcnRpY2FsQWxpZ24iLCJib3JkZXJMZWZ0IiwidGV4dERlY29yYXRpb24iLCJtYXJnaW5MZWZ0IiwiZm9udFN0eWxlIiwiZm9udFNpemUiLCJwYWRkaW5nUmlnaHQiLCJGaWVsZFBvcyIsIkZpZWxkUmFuZ2UiLCJNYXBNb2RlIiwiVHJhY2tEZWwiLCJTbmlwcGV0IiwiZmllbGRQb3NpdGlvbnMiLCJpbnN0YW50aWF0ZSIsImxpbmVTdGFydCIsImxpbmVPYmoiLCJiYXNlSW5kZW50IiwiaW5kZW50IiwidGFicyIsImluZGVudFVuaXQiLCJ0ZW1wbGF0ZSIsImZpZWxkcyIsInJhd05hbWUiLCJfIiwiYnJhY2UiLCJmaWVsZE1hcmtlciIsImlnbm9yZUV2ZW50IiwiZmllbGRSYW5nZSIsIkFjdGl2ZVNuaXBwZXQiLCJkZWNvIiwibWFwcGVkIiwic2VsZWN0aW9uSW5zaWRlRmllbGQiLCJzZXRBY3RpdmUiLCJtb3ZlVG9GaWVsZCIsInNuaXBwZXRTdGF0ZSIsImZpZWxkU2VsZWN0aW9uIiwic25pcHBldCIsInNwZWMiLCJUZXh0IiwiVHJhbnNhY3Rpb24iLCJhcHBlbmRDb25maWciLCJhZGRTbmlwcGV0S2V5bWFwIiwic25pcHBldFBvaW50ZXJIYW5kbGVyIiwibW92ZUZpZWxkIiwiZGlyIiwiY2xlYXJTbmlwcGV0IiwibmV4dFNuaXBwZXRGaWVsZCIsInByZXZTbmlwcGV0RmllbGQiLCJkZWZhdWx0U25pcHBldEtleW1hcCIsInNoaWZ0Iiwic25pcHBldEtleW1hcCIsIm1hcHMiLCJjb21wdXRlIiwibW91c2Vkb3duIiwicG9zQXRDb29yZHMiLCJjbGllbnRYIiwiY2xpZW50WSIsIm1hcFJFIiwicmUiLCJ1bmljb2RlIiwid29yZENhY2hlcyIsInN0b3JlV29yZHMiLCJ3b3JkUkUiLCJzZWVuIiwiaWdub3JlQXQiLCJpdGVyTGluZXMiLCJsYXN0SW5kZXgiLCJjb2xsZWN0V29yZHMiLCJjYWNoZSIsImJpZyIsImNhY2hlZCIsImRlZmF1bHRzIiwiYnJhY2tldHMiLCJiZWZvcmUiLCJzdHJpbmdQcmVmaXhlcyIsImNsb3NlQnJhY2tldEVmZmVjdCIsIlRyYWNrQWZ0ZXIiLCJjbG9zZWRCcmFja2V0IiwiUmFuZ2VWYWx1ZSIsInN0YXJ0U2lkZSIsImVuZFNpZGUiLCJicmFja2V0U3RhdGUiLCJSYW5nZVNldCIsImRlZmluZWRDbG9zaW5nIiwiY2xvc2luZyIsImFuZHJvaWQiLCJ1c2VyQWdlbnQiLCJpbnB1dEhhbmRsZXIiLCJjb21wb3NpdGlvblN0YXJ0ZWQiLCJpbnNlcnRCcmFja2V0IiwiZGVsZXRlQnJhY2tldFBhaXIiLCJ0b2tlbnMiLCJkb250Iiwic2xpY2VTdHJpbmciLCJwcmV2Q2hhciIsIm5leHRDaGFyIiwiYnJhY2tldCIsInRvayIsImNsb3NlZCIsImhhbmRsZVNhbWUiLCJoYW5kbGVPcGVuIiwiY2xvc2VkQnJhY2tldEF0IiwiaGFuZGxlQ2xvc2UiLCJiZXR3ZWVuIiwiY2xvc2VCZWZvcmUiLCJfb3BlbiIsImFsbG93VHJpcGxlIiwibm9kZVN0YXJ0IiwiY2FuU3RhcnRTdHJpbmdBdCIsImNoYXJDYXRlZ29yaXplciIsIkNoYXJDYXRlZ29yeSIsIldvcmQiLCJxdW90ZVRva2VuIiwicHJlZml4ZXMiLCJtYXhQcmVmaXgiLCJxdW90ZVBvcyIsInByb2JhYmx5SW5TdHJpbmciLCJ0cmVlIiwiY2hhckNhdCIsImNvbXBsZXRpb25LZXltYXBFeHQiLCJjb21wdXRlTiIsImNvbXBsZXRpb25BcnJheUNhY2hlIiwiY29tcGxldGVBbnlXb3JkIiwid29yZENoYXJzIiwiZXNjYXBlZCIsIndvcmRDYWNoZSIsImhhc05leHRTbmlwcGV0RmllbGQiLCJoYXNQcmV2U25pcHBldEZpZWxkIiwiaWZJbiIsIm5vZGVzIiwiaXNUb3AiLCJpZk5vdEluIiwic2VsZWN0ZWRDb21wbGV0aW9uSW5kZXgiLCJzZXRTZWxlY3RlZENvbXBsZXRpb24iLCJzbmlwcGV0Q29tcGxldGlvbiIsImNvbW1vbiIsInRvZ2dsZUNvbW1lbnQiLCJnZXRDb25maWciLCJ0b2dnbGVMaW5lQ29tbWVudCIsImJsb2NrIiwidG9nZ2xlQmxvY2tDb21tZW50QnlMaW5lIiwiY29tbWFuZCIsImNoYW5nZUxpbmVDb21tZW50IiwibGluZUNvbW1lbnQiLCJsaW5lVW5jb21tZW50IiwidG9nZ2xlQmxvY2tDb21tZW50IiwiY2hhbmdlQmxvY2tDb21tZW50IiwiYmxvY2tDb21tZW50IiwiYmxvY2tVbmNvbW1lbnQiLCJmcm9tTGluZSIsInRvTGluZSIsInNlbGVjdGVkTGluZVJhbmdlcyIsImRhdGEiLCJTZWFyY2hNYXJnaW4iLCJjb21tZW50cyIsInN0YXJ0VGV4dCIsImVuZFRleHQiLCJ0ZXh0QmVmb3JlIiwidGV4dEFmdGVyIiwic3BhY2VCZWZvcmUiLCJzcGFjZUFmdGVyIiwiYmVmb3JlT2ZmIiwic3RhcnRTcGFjZSIsImVuZFNwYWNlIiwiZW5kT2ZmIiwiZmluZEJsb2NrQ29tbWVudCIsImNvbW1lbnQiLCJwcmV2TGluZSIsInN0YXJ0SSIsIm1pbkluZGVudCIsImNoYW5nZVNldCIsImZyb21IaXN0b3J5IiwiaXNvbGF0ZUhpc3RvcnkiLCJpbnZlcnRlZEVmZmVjdHMiLCJoaXN0b3J5Q29uZmlnIiwibWluRGVwdGgiLCJuZXdHcm91cERlbGF5Iiwiam9pblRvRXZlbnQiLCJfdCIsImlzQWRqYWNlbnQiLCJhZGoiLCJoaXN0b3J5RmllbGRfIiwiSGlzdG9yeVN0YXRlIiwiZnJvbUhpc3QiLCJpdGVtIiwiSGlzdEV2ZW50IiwiZnJvbVRyYW5zYWN0aW9uIiwidW5kb25lIiwidXBkYXRlQnJhbmNoIiwiYWRkU2VsZWN0aW9uIiwiaXNvbGF0ZSIsImFkZFRvSGlzdG9yeSIsImFkZE1hcHBpbmciLCJkZXNjIiwiYWRkQ2hhbmdlcyIsInRvSlNPTiIsImZyb21KU09OIiwianNvbiIsImhpc3RvcnlGaWVsZCIsImNtZCIsImhpc3RvcnlTdGF0ZSIsInBvcCIsInVuZG8iLCJyZWRvIiwidW5kb1NlbGVjdGlvbiIsInJlZG9TZWxlY3Rpb24iLCJkZXB0aCIsImhpc3RTdGF0ZSIsImJyYW5jaCIsInVuZG9EZXB0aCIsInJlZG9EZXB0aCIsInN0YXJ0U2VsZWN0aW9uIiwic2VsZWN0aW9uc0FmdGVyIiwic2V0U2VsQWZ0ZXIiLCJhZnRlciIsIkNoYW5nZVNldCIsIkNoYW5nZURlc2MiLCJpbnZlcnQiLCJzZWxlY3Rpb25zIiwibWF4TGVuIiwibmV3RXZlbnQiLCJuZXdCcmFuY2giLCJjb25jIiwiTWF4U2VsZWN0aW9uc1BlckV2ZW50IiwibGFzdEV2ZW50Iiwic2VscyIsImVxIiwicG9wU2VsZWN0aW9uIiwiYWRkTWFwcGluZ1RvQnJhbmNoIiwibWFwRXZlbnQiLCJleHRyYVNlbGVjdGlvbnMiLCJtYXBwZWRDaGFuZ2VzIiwibWFwRGVzYyIsImZ1bGxNYXBwaW5nIiwiY29tcG9zZURlc2MiLCJtYXBFZmZlY3RzIiwiam9pbmFibGVVc2VyRXZlbnQiLCJwcmV2VGltZSIsInByZXZVc2VyRXZlbnQiLCJpdGVyQ2hhbmdlZFJhbmdlcyIsIl9mIiwiY29tcG9zZSIsIm9ubHlTZWxlY3Rpb24iLCJtYWMiLCJsaW51eCIsIm1haW5JbmRleCIsInNldFNlbCIsIm1vdmVTZWwiLCJob3ciLCJyYW5nZUVuZCIsImN1cnNvckJ5Q2hhciIsIm1vdmVCeUNoYXIiLCJsdHJBdEN1cnNvciIsInRleHREaXJlY3Rpb25BdCIsIkxUUiIsImN1cnNvckNoYXJMZWZ0IiwiY3Vyc29yQ2hhclJpZ2h0IiwiY3Vyc29yQnlHcm91cCIsIm1vdmVCeUdyb3VwIiwiY3Vyc29yR3JvdXBMZWZ0IiwiY3Vyc29yR3JvdXBSaWdodCIsInNlZ21lbnRlciIsIkludGwiLCJTZWdtZW50ZXIiLCJncmFudWxhcml0eSIsIm1vdmVCeVN1YndvcmQiLCJjYXRlZ29yaXplIiwiY2F0IiwiU3BhY2UiLCJzdGVwcyIsInNhd1VwcGVyIiwic2F3TG93ZXIiLCJhaGVhZCIsIm5leHRDYXQiLCJza2lwcGVkIiwic2VnbWVudHMiLCJzZWdtZW50IiwiY3Vyc29yQnlTdWJ3b3JkIiwiaW50ZXJlc3RpbmdOb2RlIiwiYnJhY2tldFByb3AiLCJwcm9wIiwibW92ZUJ5U3ludGF4IiwibmV3UG9zIiwiTm9kZVByb3AiLCJjbG9zZWRCeSIsIm9wZW5lZEJ5IiwiY2hpbGRBZnRlciIsImNoaWxkQmVmb3JlIiwibWF0Y2hCcmFja2V0cyIsImN1cnNvclN5bnRheExlZnQiLCJjdXJzb3JTeW50YXhSaWdodCIsImN1cnNvckJ5TGluZSIsIm1vdmVkIiwibW92ZVZlcnRpY2FsbHkiLCJtb3ZlVG9MaW5lQm91bmRhcnkiLCJjdXJzb3JMaW5lVXAiLCJjdXJzb3JMaW5lRG93biIsInBhZ2VJbmZvIiwic2VsZlNjcm9sbCIsInNjcm9sbERPTSIsImNsaWVudEhlaWdodCIsInNjcm9sbEhlaWdodCIsIm1hcmdpblRvcCIsIm1hcmdpbkJvdHRvbSIsInNjcm9sbE1hcmdpbnMiLCJtYXJnaW5zIiwiZGVmYXVsdExpbmVIZWlnaHQiLCJjdXJzb3JCeVBhZ2UiLCJwYWdlIiwic3RhcnRQb3MiLCJjb29yZHNBdFBvcyIsInNjcm9sbFJlY3QiLCJzY3JvbGxCb3R0b20iLCJ5TWFyZ2luIiwiY3Vyc29yUGFnZVVwIiwiY3Vyc29yUGFnZURvd24iLCJtb3ZlQnlMaW5lQm91bmRhcnkiLCJsaW5lQmxvY2tBdCIsImN1cnNvckxpbmVCb3VuZGFyeUZvcndhcmQiLCJjdXJzb3JMaW5lQm91bmRhcnlCYWNrd2FyZCIsImN1cnNvckxpbmVCb3VuZGFyeUxlZnQiLCJjdXJzb3JMaW5lQm91bmRhcnlSaWdodCIsImN1cnNvckxpbmVTdGFydCIsImN1cnNvckxpbmVFbmQiLCJ0b01hdGNoaW5nQnJhY2tldCIsImV4dGVuZCIsIm1hdGNoaW5nIiwiY3Vyc29yTWF0Y2hpbmdCcmFja2V0IiwiZXh0ZW5kU2VsIiwiZ29hbENvbHVtbiIsImJpZGlMZXZlbCIsInNlbGVjdEJ5Q2hhciIsInNlbGVjdENoYXJMZWZ0Iiwic2VsZWN0Q2hhclJpZ2h0Iiwic2VsZWN0QnlHcm91cCIsInNlbGVjdEdyb3VwTGVmdCIsInNlbGVjdEdyb3VwUmlnaHQiLCJzZWxlY3RCeVN1YndvcmQiLCJzZWxlY3RTeW50YXhMZWZ0Iiwic2VsZWN0U3ludGF4UmlnaHQiLCJzZWxlY3RCeUxpbmUiLCJzZWxlY3RMaW5lVXAiLCJzZWxlY3RMaW5lRG93biIsInNlbGVjdEJ5UGFnZSIsInNlbGVjdFBhZ2VVcCIsInNlbGVjdFBhZ2VEb3duIiwic2VsZWN0TGluZUJvdW5kYXJ5Rm9yd2FyZCIsInNlbGVjdExpbmVCb3VuZGFyeUJhY2t3YXJkIiwic2VsZWN0TGluZUJvdW5kYXJ5TGVmdCIsInNlbGVjdExpbmVCb3VuZGFyeVJpZ2h0Iiwic2VsZWN0TGluZVN0YXJ0Iiwic2VsZWN0TGluZUVuZCIsImN1cnNvckRvY1N0YXJ0IiwiY3Vyc29yRG9jRW5kIiwic2VsZWN0RG9jU3RhcnQiLCJzZWxlY3REb2NFbmQiLCJzZWxlY3RBbGwiLCJzZWxlY3RMaW5lIiwic2VsZWN0ZWRMaW5lQmxvY2tzIiwic2VsZWN0UGFyZW50U3ludGF4IiwicmVzb2x2ZVN0YWNrIiwic2ltcGxpZnlTZWxlY3Rpb24iLCJkZWxldGVCeSIsInRvd2FyZHMiLCJza2lwQXRvbWljIiwiYW5ub3VuY2UiLCJhdG9taWNSYW5nZXMiLCJkZWxldGVCeUNoYXIiLCJieUluZGVudFVuaXQiLCJ0YXJnZXRQb3MiLCJkcm9wIiwiY291bnRDb2x1bW4iLCJ0YWJTaXplIiwiZ2V0SW5kZW50VW5pdCIsImZpbmRDbHVzdGVyQnJlYWsiLCJkZWxldGVDaGFyQmFja3dhcmQiLCJkZWxldGVDaGFyRm9yd2FyZCIsImRlbGV0ZUJ5R3JvdXAiLCJkZWxldGVHcm91cEJhY2t3YXJkIiwiZGVsZXRlR3JvdXBGb3J3YXJkIiwiZGVsZXRlVG9MaW5lRW5kIiwibGluZUVuZCIsImRlbGV0ZUxpbmVCb3VuZGFyeUJhY2t3YXJkIiwiZGVsZXRlTGluZUJvdW5kYXJ5Rm9yd2FyZCIsInNwbGl0TGluZSIsInRyYW5zcG9zZUNoYXJzIiwiYXBwZW5kIiwiYmxvY2tzIiwidXB0byIsInN0YXJ0TGluZSIsImVuZExpbmUiLCJtb3ZlTGluZSIsIm5leHRMaW5lIiwibGluZUJyZWFrIiwibW92ZUxpbmVVcCIsIm1vdmVMaW5lRG93biIsImNvcHlMaW5lIiwiY29weUxpbmVVcCIsImNvcHlMaW5lRG93biIsImRlbGV0ZUxpbmUiLCJkaXN0IiwiYXNzb2MiLCJkb2N1bWVudFRvcCIsImluc2VydE5ld2xpbmVBbmRJbmRlbnQiLCJuZXdsaW5lQW5kSW5kZW50IiwiaW5zZXJ0QmxhbmtMaW5lIiwiYXRFb2YiLCJleHBsb2RlIiwiaXNCZXR3ZWVuQnJhY2tldHMiLCJjeCIsIkluZGVudENvbnRleHQiLCJzaW11bGF0ZUJyZWFrIiwic2ltdWxhdGVEb3VibGVCcmVhayIsImdldEluZGVudGF0aW9uIiwiaW5kZW50U3RyaW5nIiwibGluZUluZGVudCIsImNoYW5nZUJ5U2VsZWN0ZWRMaW5lIiwiYXRMaW5lIiwiaW5kZW50U2VsZWN0aW9uIiwib3ZlcnJpZGVJbmRlbnRhdGlvbiIsIm5vcm0iLCJpbmRlbnRNb3JlIiwiaW5kZW50TGVzcyIsImNvbCIsImtlZXAiLCJ0b2dnbGVUYWJGb2N1c01vZGUiLCJzZXRUYWJGb2N1c01vZGUiLCJlbWFjc1N0eWxlS2V5bWFwIiwic3RhbmRhcmRLZXltYXAiLCJpbmRlbnRXaXRoVGFiIiwiY3Vyc29yQ2hhckJhY2t3YXJkIiwiY3Vyc29yQ2hhckZvcndhcmQiLCJjdXJzb3JHcm91cEJhY2t3YXJkIiwiY3Vyc29yR3JvdXBGb3J3YXJkIiwiY3Vyc29yU3Vid29yZEJhY2t3YXJkIiwiY3Vyc29yU3Vid29yZEZvcndhcmQiLCJkZWxldGVDaGFyQmFja3dhcmRTdHJpY3QiLCJkZWxldGVUb0xpbmVTdGFydCIsImRlbGV0ZVRyYWlsaW5nV2hpdGVzcGFjZSIsInRyYWlsaW5nIiwiYmVmb3JlaW5wdXQiLCJpbnB1dFR5cGUiLCJpbnNlcnROZXdsaW5lIiwiaW5zZXJ0TmV3bGluZUtlZXBJbmRlbnQiLCJpbnNlcnRUYWIiLCJzZWxlY3RDaGFyQmFja3dhcmQiLCJzZWxlY3RDaGFyRm9yd2FyZCIsInNlbGVjdEdyb3VwQmFja3dhcmQiLCJzZWxlY3RHcm91cEZvcndhcmQiLCJzZWxlY3RNYXRjaGluZ0JyYWNrZXQiLCJzZWxlY3RTdWJ3b3JkQmFja3dhcmQiLCJzZWxlY3RTdWJ3b3JkRm9yd2FyZCIsInRlbXBvcmFyaWx5U2V0VGFiRm9jdXNNb2RlIiwiaGlnaGxpZ2h0Iiwic3R5bGVNb2QiLCJsYW5ndWFnZURhdGFQcm9wIiwiZGVmaW5lTGFuZ3VhZ2VGYWNldCIsImJhc2VEYXRhIiwidmFsdWVzIiwic3VibGFuZ3VhZ2VQcm9wIiwiTGFuZ3VhZ2UiLCJleHRyYUV4dGVuc2lvbnMiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImRlZmluZVByb3BlcnR5IiwiZXh0ZW5zaW9uIiwibGFuZ3VhZ2VEYXRhIiwidG9wTm9kZUF0IiwiYmFzZSIsInN1YiIsImlubmVyTm9kZSIsInN1YmxhbmciLCJpc0FjdGl2ZUF0IiwiZmluZFJlZ2lvbnMiLCJsYW5nIiwiYWxsb3dzTmVzdGluZyIsImV4cGxvcmUiLCJtb3VudGVkIiwib3ZlcmxheSIsIlRyZWUiLCJ0b3BMYW5nIiwidG9wTm9kZSIsImVudGVyIiwiSXRlck1vZGUiLCJFeGNsdWRlQnVmZmVycyIsInNldFN0YXRlIiwiTFJMYW5ndWFnZSIsImNvbmZpZ3VyZSIsInByb3BzIiwiaGFzV3JhcHBlcnMiLCJlbnN1cmVTeW50YXhUcmVlIiwidGltZW91dCIsIm9sZFZpZXBvcnQiLCJ2aWV3cG9ydCIsInVwZGF0ZVZpZXdwb3J0Iiwid29yayIsIkRvY0lucHV0IiwiY3Vyc29yUG9zIiwic3RyaW5nIiwic3luY1RvIiwiY2h1bmsiLCJsaW5lQ2h1bmtzIiwic3RyaW5nU3RhcnQiLCJjdXJyZW50Q29udGV4dCIsIlBhcnNlQ29udGV4dCIsImZyYWdtZW50cyIsInRyZWVMZW4iLCJzY2hlZHVsZU9uIiwidGVtcFNraXBwZWQiLCJzdGFydFBhcnNlIiwidW50aWwiLCJ0YWtlVHJlZSIsIndpdGhDb250ZXh0IiwiZW5kVGltZSIsInN0b3BwZWRBdCIsInN0b3BBdCIsImFkdmFuY2UiLCJ3aXRob3V0VGVtcFNraXBwZWQiLCJUcmVlRnJhZ21lbnQiLCJhZGRUcmVlIiwicGFyc2VkUG9zIiwiY3V0RnJhZ21lbnRzIiwibmV3U3RhdGUiLCJmcm9tQSIsInRvQSIsImZyb21CIiwidG9CIiwiYXBwbHlDaGFuZ2VzIiwic3RhcnRMZW4iLCJza2lwVW50aWxJblZpZXciLCJnZXRTa2lwcGluZ1BhcnNlciIsImNyZWF0ZVBhcnNlIiwiYWxsIiwiTm9kZVR5cGUiLCJmcmFncyIsIkxhbmd1YWdlU3RhdGUiLCJuZXdDeCIsImluaXQiLCJ2cFRvIiwicGFyc2VTdGF0ZSIsInJlcXVlc3RJZGxlIiwiY2FsbGJhY2siLCJyZXF1ZXN0SWRsZUNhbGxiYWNrIiwiaWRsZSIsImNhbmNlbElkbGVDYWxsYmFjayIsImlzSW5wdXRQZW5kaW5nIiwic2NoZWR1bGluZyIsInBhcnNlV29ya2VyIiwid29ya2luZyIsIndvcmtTY2hlZHVsZWQiLCJjaHVua0VuZCIsImNodW5rQnVkZ2V0IiwiYmluZCIsInNjaGVkdWxlV29yayIsImhhc0ZvY3VzIiwiY2hlY2tBc3luY1NjaGVkdWxlIiwiZGVhZGxpbmUiLCJ0aW1lUmVtYWluaW5nIiwidmlld3BvcnRGaXJzdCIsImlzV29ya2luZyIsImZvY3VzIiwibGFuZ3VhZ2VzIiwiZW5hYmxlcyIsIkxhbmd1YWdlRGVzY3JpcHRpb24iLCJhbGlhcyIsImZpbGVuYW1lIiwibG9hZEZ1bmMiLCJzdXBwb3J0IiwibG9hZGluZyIsImxvYWQiLCJSYW5nZUVycm9yIiwibWF0Y2hGaWxlbmFtZSIsImRlc2NzIiwiZXh0IiwibWF0Y2hMYW5ndWFnZU5hbWUiLCJmdXp6eSIsImluZGVudFNlcnZpY2UiLCJKU09OIiwic3RyaW5naWZ5IiwiY29scyIsInRzIiwic2VydmljZSIsImFzdCIsImlubmVyIiwiZW50ZXJVbmZpbmlzaGVkTm9kZXNCZWZvcmUiLCJpbmRlbnRGb3IiLCJzeW50YXhJbmRlbnRhdGlvbiIsImJpYXMiLCJ0ZXh0QWZ0ZXJQb3MiLCJjb2x1bW4iLCJvdmVycmlkZW4iLCJzaW11bGF0ZWRCcmVhayIsImluZGVudE5vZGVQcm9wIiwic3RyYXRlZ3kiLCJpbmRlbnRTdHJhdGVneSIsIlRyZWVJbmRlbnRDb250ZXh0IiwibGFzdENoaWxkIiwiZGVsaW1pdGVkU3RyYXRlZ3kiLCJpZ25vcmVDbG9zZWQiLCJ0b3BJbmRlbnQiLCJiYXNlSW5kZW50Rm9yIiwiYXRCcmVhayIsImlzUGFyZW50IiwiYWxpZ24iLCJ1bml0cyIsImNsb3NlZEF0IiwiYWxpZ25lZCIsIm9wZW5Ub2tlbiIsInNpbSIsIm9wZW5MaW5lIiwiaXNTa2lwcGVkIiwiYnJhY2tldGVkQWxpZ25lZCIsImZvbGRTZXJ2aWNlIiwiZm9sZE5vZGVQcm9wIiwiaXNVbmZpbmlzaGVkIiwiaXNFcnJvciIsImZvbGRhYmxlIiwic3ludGF4Rm9sZGluZyIsIm1hcFJhbmdlIiwiZm9sZEVmZmVjdCIsInVuZm9sZEVmZmVjdCIsInNlbGVjdGVkTGluZXMiLCJmb2xkU3RhdGUiLCJmb2xkRXhpc3RzIiwicHJlcGFyZVBsYWNlaG9sZGVyIiwiZm9sZENvbmZpZyIsIlByZXBhcmVkRm9sZFdpZGdldCIsImZvbGRXaWRnZXQiLCJmaWx0ZXJGcm9tIiwiZmlsdGVyVG8iLCJvblNlbGVjdGlvbiIsImZpbmRGb2xkIiwibWF5YmVFbmFibGUiLCJjb2RlRm9sZGluZyIsImZvbGRDb2RlIiwiYW5ub3VuY2VGb2xkIiwidW5mb2xkQ29kZSIsImZvbGQiLCJsaW5lRnJvbSIsImxpbmVUbyIsImZvbGRBbGwiLCJ1bmZvbGRBbGwiLCJmb2xkYWJsZUNvbnRhaW5lciIsImxpbmVCbG9jayIsImZvbGRhYmxlUmVnaW9uIiwiZGVmYXVsdENvbmZpZyIsInBsYWNlaG9sZGVyRE9NIiwicGxhY2Vob2xkZXJUZXh0IiwiYmFzZVRoZW1lJDEiLCJ3aWRnZXRUb0RPTSIsInByZXBhcmVkIiwicG9zQXRET00iLCJ0aXRsZSIsImZvbGRHdXR0ZXJEZWZhdWx0cyIsIm9wZW5UZXh0IiwiY2xvc2VkVGV4dCIsIm1hcmtlckRPTSIsImZvbGRpbmdDaGFuZ2VkIiwiRm9sZE1hcmtlciIsIkd1dHRlck1hcmtlciIsImJvcmRlciIsImJvcmRlclJhZGl1cyIsIkhpZ2hsaWdodFN0eWxlIiwic3BlY3MiLCJtb2RTcGVjIiwiZGVmIiwiU3R5bGVNb2R1bGUiLCJuZXdOYW1lIiwic2NvcGVPcHQiLCJzY29wZSIsInRhZ0hpZ2hsaWdodGVyIiwidGFnIiwidGhlbWVUeXBlIiwiaGlnaGxpZ2h0ZXJGYWNldCIsImZhbGxiYWNrSGlnaGxpZ2h0ZXIiLCJnZXRIaWdobGlnaHRlcnMiLCJ0cmVlSGlnaGxpZ2h0ZXIiLCJoaWdoIiwibWFya0NhY2hlIiwiYnVpbGREZWNvIiwiZGVjb3JhdGVkVG8iLCJoaWdobGlnaHRlcnMiLCJzdHlsZUNoYW5nZSIsImRlY29yYXRlZFRvTWFwcGVkIiwidmlld3BvcnRDaGFuZ2VkIiwiYnVpbGRlciIsIlJhbmdlU2V0QnVpbGRlciIsInZpc2libGVSYW5nZXMiLCJoaWdobGlnaHRUcmVlIiwiZmluaXNoIiwidGFncyIsIm1ldGEiLCJsaW5rIiwiaGVhZGluZyIsImZvbnRXZWlnaHQiLCJlbXBoYXNpcyIsInN0cm9uZyIsInN0cmlrZXRocm91Z2giLCJrZXl3b3JkIiwiYXRvbSIsImJvb2wiLCJ1cmwiLCJjb250ZW50U2VwYXJhdG9yIiwibGFiZWxOYW1lIiwiaW5zZXJ0ZWQiLCJkZWxldGVkIiwicmVnZXhwIiwiZXNjYXBlIiwic3BlY2lhbCIsImRlZmluaXRpb24iLCJsb2NhbCIsInR5cGVOYW1lIiwibmFtZXNwYWNlIiwibWFjcm9OYW1lIiwicHJvcGVydHlOYW1lIiwiaW52YWxpZCIsIkRlZmF1bHRCcmFja2V0cyIsImJyYWNrZXRNYXRjaGluZ0NvbmZpZyIsImFmdGVyQ3Vyc29yIiwibWF4U2NhbkRpc3RhbmNlIiwicmVuZGVyTWF0Y2giLCJkZWZhdWx0UmVuZGVyTWF0Y2giLCJtYXRjaGluZ01hcmsiLCJub25tYXRjaGluZ01hcmsiLCJicmFja2V0TWF0Y2hpbmdVbmlxdWUiLCJicmFja2V0TWF0Y2hpbmdIYW5kbGUiLCJtYXRjaGluZ05vZGVzIiwiYnlQcm9wIiwiZmluZEhhbmRsZSIsImhhc0hhbmRsZSIsImhhbmRsZSIsIm1hdGNoTWFya2VkQnJhY2tldHMiLCJ0b2tlblR5cGUiLCJzdGFydENoIiwic3RhcnRUb2tlbiIsIml0ZXJSYW5nZSIsImRpc3RhbmNlIiwiYmFzZVBvcyIsIm1hdGNoUGxhaW5CcmFja2V0cyIsIl9wb3MiLCJmaXJzdFRva2VuIiwiZW5kSGFuZGxlIiwicHJldlNpYmxpbmciLCJjb3VudENvbCIsInN0YXJ0SW5kZXgiLCJzdGFydFZhbHVlIiwiU3RyaW5nU3RyZWFtIiwib3ZlcnJpZGVJbmRlbnQiLCJsYXN0Q29sdW1uUG9zIiwibGFzdENvbHVtblZhbHVlIiwiZW9sIiwic29sIiwiZWF0Iiwib2siLCJlYXRXaGlsZSIsImVhdFNwYWNlIiwic2tpcFRvRW5kIiwic2tpcFRvIiwiYmFja1VwIiwiaW5kZW50YXRpb24iLCJjb25zdW1lIiwiY2FzZUluc2Vuc2l0aXZlIiwiY2FzZWQiLCJzdWJzdHIiLCJkZWZhdWx0Q29weVN0YXRlIiwiSW5kZW50ZWRGcm9tIiwiU3RyZWFtTGFuZ3VhZ2UiLCJibGFua0xpbmUiLCJjb3B5U3RhdGUiLCJ0b2tlblRhYmxlIiwibm9Ub2tlbnMiLCJQYXJzZSIsImdldEluZGVudCIsInR5cGVBcnJheSIsImRvY0lEIiwic3RyZWFtUGFyc2VyIiwic3RhdGVBZnRlciIsInBlck5vZGUiLCJUb2tlblRhYmxlIiwiZGVmYXVsdFRva2VuVGFibGUiLCJzdGF0ZVBvcyIsImZpbmRTdGF0ZSIsInN0cmVhbSIsInJlYWRUb2tlbiIsImN1dFRyZWUiLCJpbnNpZGUiLCJjaHVua3MiLCJjaHVua1BvcyIsImNodW5rUmV1c2VkIiwicmFuZ2VJbmRleCIsImVkaXRvclN0YXRlIiwib3BlblN0YXJ0Iiwib3BlbkVuZCIsImZpbmRTdGFydEluRnJhZ21lbnRzIiwiY2h1bmtTdGFydCIsIm1vdmVSYW5nZUluZGV4IiwicGFyc2VFbmQiLCJwYXJzZUxpbmUiLCJmaW5pc2hDaHVuayIsImxpbmVBZnRlciIsInJhbmdlU3RhcnQiLCJza2lwR2Fwc1RvIiwib2ZmUG9zIiwiZW1pdFRva2VuIiwibGVuMCIsImJ1ZmZlciIsIm5vZGVTZXQiLCJ0b3BJRCIsIm1heEJ1ZmZlckxlbmd0aCIsInJldXNlZCIsImJhbGFuY2UiLCJOb2RlU2V0Iiwid2FybmVkIiwiYnlUYWciLCJkZWZhdWx0VGFibGUiLCJsZWdhY3lOYW1lIiwiY3JlYXRlVG9rZW5UeXBlIiwiZXh0cmEiLCJ0YWJsZSIsIndhcm5Gb3JQYXJ0IiwibXNnIiwid2FybiIsInRhZ1N0ciIsInN0eWxlVGFncyIsImJ1aWxkRm9yTGluZSIsInRleHRIYXNSVEwiLCJhbHdheXNJc29sYXRlIiwiaXNvbGF0ZU1hcmtzIiwiYWx3YXlzIiwicGVyTGluZVRleHREaXJlY3Rpb24iLCJoYXNSVEwiLCJjaGFuZ2UiLCJhZGRlZCIsIml0ZXJDaGFuZ2VzIiwiZkEiLCJ0QSIsImZCIiwidEIiLCJjaGFuZ2VBZGRzUlRMIiwicGx1Z2luIiwiYWNjZXNzIiwib3V0ZXJEZWNvcmF0aW9ucyIsImxvd2VzdCIsImJpZGlJc29sYXRlZFJhbmdlcyIsImNsaXBSVExMaW5lcyIsIml0ZXJhdGUiLCJpc28iLCJtYXJrcyIsImJpZGlJc29sYXRlIiwibHRyIiwiYXV0byIsIkxhbmd1YWdlU3VwcG9ydCIsImJpZGlJc29sYXRlcyIsImNvbnRpbnVlZEluZGVudCIsImV4Y2VwdCIsIm1hdGNoRXhjZXB0IiwiZGVsaW1pdGVkSW5kZW50IiwiZmxhdEluZGVudCIsImZ1bGxDb25maWciLCJjYW5Gb2xkIiwiY2FuVW5mb2xkIiwibWFya2VycyIsImJ1aWxkTWFya2VycyIsInZpZXdwb3J0TGluZUJsb2NrcyIsImd1dHRlciIsImluaXRpYWxTcGFjZXIiLCJjbGljayIsImZvbGRJbnNpZGUiLCJmb2xkZWRSYW5nZXMiLCJmb3JjZVBhcnNpbmciLCJzdWNjZXNzIiwiaGlnaGxpZ2h0aW5nRm9yIiwiaGlnaGxpZ2h0ZXIiLCJ0cmFuc2FjdGlvbkZpbHRlciIsIm5ld0RvYyIsIm5ld1NlbGVjdGlvbiIsInNlcXVlbnRpYWwiLCJpbmRlbnRSYW5nZSIsInN0eWxlTW9kdWxlIiwiZGFya1RoZW1lIiwic3ludGF4UGFyc2VyUnVubmluZyIsInN5bnRheFRyZWVBdmFpbGFibGUiLCJ0b2dnbGVGb2xkIiwiZm9sZFJhbmdlIiwiZWx0IiwiU2VsZWN0ZWREaWFnbm9zdGljIiwiZGlhZ25vc3RpYyIsIkxpbnRTdGF0ZSIsImRpYWdub3N0aWNzIiwicGFuZWwiLCJtYXJrZWREaWFnbm9zdGljcyIsImRpYWdub3N0aWNGaWx0ZXIiLCJsaW50Q29uZmlnIiwibWFya2VyRmlsdGVyIiwiRGlhZ25vc3RpY1dpZGdldCIsInNldmVyaXR5IiwibWFya0NsYXNzIiwiZmluZERpYWdub3N0aWMiLCJoaWRlVG9vbHRpcCIsImhpZGVPbiIsInNldERpYWdub3N0aWNzRWZmZWN0IiwibWF5YmVFbmFibGVMaW50IiwibGludFN0YXRlIiwibGludEV4dGVuc2lvbnMiLCJzZXREaWFnbm9zdGljcyIsInRvZ2dsZVBhbmVsIiwibW92ZVBhbmVsU2VsZWN0aW9uIiwic2VsUG9zIiwiYXV0b1BhbmVsIiwiTGludFBhbmVsIiwic2hvd1BhbmVsIiwiYWN0aXZlTWFyayIsImRpYWdub3N0aWNzVG9vbHRpcCIsInJlbmRlckRpYWdub3N0aWMiLCJvcGVuTGludFBhbmVsIiwiZ2V0UGFuZWwiLCJjbG9zZUxpbnRQYW5lbCIsIm5leHREaWFnbm9zdGljIiwibGludFBsdWdpbiIsImxpbnRUaW1lIiwibmVlZHNSZWZyZXNoIiwiZm9yY2UiLCJ0b29sdGlwRmlsdGVyIiwiYXNzaWduS2V5cyIsImFjdGlvbnMiLCJhc3NpZ25lZCIsImluUGFuZWwiLCJyZW5kZXJNZXNzYWdlIiwiYWN0aW9uIiwiZmlyZWQiLCJrZXlJbmRleCIsIm5hbWVFbHQiLCJvbm1vdXNlZG93biIsIlBhbmVsSXRlbSIsIml0ZW1zIiwidGFiSW5kZXgiLCJyb2xlIiwib25rZXlkb3duIiwia2V5Q29kZSIsIm1vdmVTZWxlY3Rpb24iLCJzZWxlY3RlZEluZGV4IiwibmVlZHNTeW5jIiwibmV3U2VsZWN0ZWRJdGVtIiwiX3N0YXJ0IiwiX2VuZCIsInN5bmMiLCJkb21Qb3MiLCJybSIsImluc2VydEJlZm9yZSIsInN2ZyIsImVuY29kZVVSSUNvbXBvbmVudCIsInVuZGVybGluZSIsImZvbnQiLCJiYWNrZ3JvdW5kUG9zaXRpb24iLCJiYWNrZ3JvdW5kUmVwZWF0IiwicGFkZGluZ0JvdHRvbSIsImJhY2tncm91bmRJbWFnZSIsImJvcmRlclJpZ2h0IiwiYm9yZGVyQm90dG9tQ29sb3IiLCJvdmVyZmxvd1kiLCJiYWNrZ3JvdW5kX2ZhbGxiYWNrIiwiY29sb3JfZmFsbGJhY2siLCJzZXZlcml0eVdlaWdodCIsInNldiIsIkxpbnRHdXR0ZXJNYXJrZXIiLCJkaWFnbm9zdGljc0ZpbHRlciIsImxpbnRHdXR0ZXJDb25maWciLCJvbm1vdXNlb3ZlciIsIm1hcmtlciIsImhvdmVyZWQiLCJlbGVtZW50QXRIZWlnaHQiLCJzZXRMaW50R3V0dGVyVG9vbHRpcCIsImdldENvb3JkcyIsIm9ubW91c2VvdXQiLCJvbm1vdXNlbW92ZSIsIm1vdXNlbW92ZSIsInJlY3QiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwibGludEd1dHRlclRvb2x0aXAiLCJ0cmFja0hvdmVyT24iLCJob3ZlclRpbWUiLCJob3ZlclRpbWVvdXQiLCJndXR0ZXJNYXJrZXJNb3VzZU92ZXIiLCJtYXJrZXJzRm9yRGlhZ25vc3RpY3MiLCJieUxpbmUiLCJsaW50R3V0dGVyRXh0ZW5zaW9uIiwibGludEd1dHRlck1hcmtlcnMiLCJsaW50R3V0dGVyVGhlbWUiLCJob3ZlclRvb2x0aXAiLCJzdGFja1N0YXJ0Iiwic3RhY2tFbmQiLCJkaWFnbm9zdGljQ291bnQiLCJsaW50IiwiZm9yRWFjaERpYWdub3N0aWMiLCJsU3RhdGUiLCJmb3JjZUxpbnRpbmciLCJsaW50R3V0dGVyIiwibGludGVyIiwicHJldmlvdXNEaWFnbm9zdGljIiwicHJldkZyb20iLCJwcmV2VG8iLCJsYXN0RnJvbSIsImxhc3RUbyIsImJhc2ljTm9ybWFsaXplIiwiU3RyaW5nIiwibm9ybWFsaXplIiwiU2VhcmNoQ3Vyc29yIiwiYnVmZmVyUG9zIiwiYnVmZmVyU3RhcnQiLCJuZXh0T3ZlcmxhcHBpbmciLCJjb2RlIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJiYXNlRmxhZ3MiLCJSZWdFeHBDdXJzb3IiLCJjdXJMaW5lIiwiTXVsdGlsaW5lUmVnRXhwQ3Vyc29yIiwiY3VyTGluZVN0YXJ0IiwibWF0Y2hQb3MiLCJ0b0NoYXJFbmQiLCJnZXRMaW5lIiwic2tpcCIsImZsYXR0ZW5lZCIsIkZsYXR0ZW5lZERvYyIsImNhY2hlZEZyb20iLCJjcmVhdGVMaW5lRGlhbG9nIiwiZ28iLCJzaWduIiwibG4iLCJjbCIsInBlcmNlbnQiLCJwYyIsImRvY0xpbmUiLCJkaWFsb2dFZmZlY3QiLCJvbnN1Ym1pdCIsImRpYWxvZ0ZpZWxkIiwiZ290b0xpbmUiLCJzZWxlY3QiLCJkZWZhdWx0SGlnaGxpZ2h0T3B0aW9ucyIsImhpZ2hsaWdodFdvcmRBcm91bmRDdXJzb3IiLCJtaW5TZWxlY3Rpb25MZW5ndGgiLCJtYXhNYXRjaGVzIiwid2hvbGVXb3JkcyIsImhpZ2hsaWdodENvbmZpZyIsIm1hdGNoRGVjbyIsIm1haW5NYXRjaERlY28iLCJpbnNpZGVXb3JkQm91bmRhcmllcyIsImluc2lkZVdvcmQiLCJtYXRjaEhpZ2hsaWdodGVyIiwiZ2V0RGVjbyIsIndvcmRBdCIsImRlZmF1bHRUaGVtZSIsInNlbGVjdE5leHRPY2N1cnJlbmNlIiwibmV3U2VsIiwic2VsZWN0V29yZCIsInNlYXJjaGVkVGV4dCIsImZ1bGxXb3JkIiwiY3ljbGVkIiwiZmluZE5leHRPY2N1cnJlbmNlIiwiYWRkUmFuZ2UiLCJzZWFyY2hDb25maWdGYWNldCIsImNhc2VTZW5zaXRpdmUiLCJ3aG9sZVdvcmQiLCJjcmVhdGVQYW5lbCIsIlNlYXJjaFBhbmVsIiwic2Nyb2xsVG9NYXRjaCIsIlNlYXJjaFF1ZXJ5IiwidmFsaWQiLCJ2YWxpZFJlZ0V4cCIsInVucXVvdGVkIiwidW5xdW90ZSIsIlJlZ0V4cFF1ZXJ5IiwiU3RyaW5nUXVlcnkiLCJnZXRDdXJzb3IiLCJzdCIsInJlZ2V4cEN1cnNvciIsInN0cmluZ0N1cnNvciIsIlF1ZXJ5VHlwZSIsInN0cmluZ1dvcmRUZXN0IiwiY2F0ZWdvcml6ZXIiLCJidWYiLCJidWZQb3MiLCJjaGFyQmVmb3JlIiwiY2hhckFmdGVyIiwibmV4dE1hdGNoIiwiY3VyRnJvbSIsImN1clRvIiwicHJldk1hdGNoSW5SYW5nZSIsInByZXZNYXRjaCIsImdldFJlcGxhY2VtZW50IiwiX3Jlc3VsdCIsIm1hdGNoQWxsIiwibGltaXQiLCJyZWdleHBXb3JkVGVzdCIsIl9mcm9tIiwiX3RvIiwic2V0U2VhcmNoUXVlcnkiLCJzZWFyY2hTdGF0ZSIsIlNlYXJjaFN0YXRlIiwiZGVmYXVsdFF1ZXJ5IiwiY3JlYXRlU2VhcmNoUGFuZWwiLCJtYXRjaE1hcmsiLCJzZWxlY3RlZE1hdGNoTWFyayIsInNlYXJjaEhpZ2hsaWdodGVyIiwic2VhcmNoQ29tbWFuZCIsIm9wZW5TZWFyY2hQYW5lbCIsImZpbmROZXh0IiwiYW5ub3VuY2VNYXRjaCIsInNlbGVjdFNlYXJjaElucHV0IiwiZmluZFByZXZpb3VzIiwic2VsZWN0TWF0Y2hlcyIsInNlbGVjdFNlbGVjdGlvbk1hdGNoZXMiLCJyZXBsYWNlTmV4dCIsInRvVGV4dCIsImFubm91bmNlVGV4dCIsIl9kIiwic2VsVGV4dCIsImdldFNlYXJjaElucHV0IiwiYWN0aXZlRWxlbWVudCIsInNlYXJjaElucHV0Iiwic2VhcmNoRXh0ZW5zaW9ucyIsImNsb3NlU2VhcmNoUGFuZWwiLCJidXR0b24iLCJjb21taXQiLCJzZWFyY2hGaWVsZCIsInBsYWNlaG9sZGVyIiwiZm9ybSIsIm9uY2hhbmdlIiwib25rZXl1cCIsInJlcGxhY2VGaWVsZCIsImNhc2VGaWVsZCIsImNoZWNrZWQiLCJyZUZpZWxkIiwid29yZEZpZWxkIiwicnVuU2NvcGVIYW5kbGVycyIsInNldFF1ZXJ5IiwiQW5ub3VuY2VNYXJnaW4iLCJCcmVhayIsIm1hcmdpblJpZ2h0IiwibG93IiwiZ2V0U2VhcmNoUXVlcnkiLCJjdXJTdGF0ZSIsImhpZ2hsaWdodFNlbGVjdGlvbk1hdGNoZXMiLCJzZWFyY2hQYW5lbE9wZW4iLCJsaW5lSW5uZXIiLCJjbGlwIiwicGFydHMiLCJkZWNvbXBvc2UiLCJUZXh0Tm9kZSIsInNjYW5JZGVudGljYWwiLCJSYXdUZXh0Q3Vyc29yIiwiUGFydGlhbFRleHRDdXJzb3IiLCJMaW5lQ3Vyc29yIiwiZmxhdHRlbiIsIlRleHRMZWFmIiwidGV4dExlbmd0aCIsImlzTGluZSIsIkxpbmUiLCJzbGljZVRleHQiLCJqb2luZWQiLCJhcHBlbmRUZXh0IiwibWlkIiwibmV3TGVuIiwibGluZVNlcCIsImNoaWxkT3BlbiIsInRvdGFsTGluZXMiLCJlQSIsImVCIiwiY2hBIiwiY2hCIiwibWF4Q2h1bmsiLCJtaW5DaHVuayIsImNodW5rZWQiLCJjdXJyZW50TGluZXMiLCJjdXJyZW50TGVuIiwiY3VycmVudENodW5rIiwiZmx1c2giLCJvZmZzZXRzIiwibmV4dElubmVyIiwib2Zmc2V0VmFsdWUiLCJhZnRlckJyZWFrIiwiaXNFeHRlbmRpbmdDaGFyIiwiaXNSZWdpb25hbEluZGljYXRvciIsIlpXSiIsImluY2x1ZGVFeHRlbmRpbmciLCJuZXh0Q2x1c3RlckJyZWFrIiwicHJldkNsdXN0ZXJCcmVhayIsInN1cnJvZ2F0ZUxvdyIsInN1cnJvZ2F0ZUhpZ2giLCJjb3VudEJlZm9yZSIsImNvZGUwIiwiY29kZTEiLCJEZWZhdWx0U3BsaXQiLCJuZXdMZW5ndGgiLCJpdGVyR2FwcyIsInBvc0EiLCJwb3NCIiwiaW5kaXZpZHVhbCIsImludmVydGVkRGVzYyIsImNvbXBvc2VTZXRzIiwibWFwU2V0IiwibW9kZSIsIlNpbXBsZSIsIlRyYWNrQmVmb3JlIiwiX3RvQiIsInJlc3VsdFNlY3Rpb25zIiwicmVzdWx0SW5zZXJ0ZWQiLCJmaWx0ZXJlZFNlY3Rpb25zIiwiU2VjdGlvbkl0ZXIiLCJhZGRTZWN0aW9uIiwiYWRkSW5zZXJ0IiwiZmlsdGVyZWQiLCJpbnNUZXh0IiwiaW5zTGVuIiwiY3JlYXRlU2V0IiwiZm9yY2VKb2luIiwic2V0QSIsInNldEIiLCJta1NldCIsInBpZWNlIiwibGVuMiIsInNlY3Rpb25MZW4iLCJpbnNCIiwidGV4dEJpdCIsImZvcndhcmQyIiwiU2VsZWN0aW9uUmFuZ2UiLCJsZXZlbCIsImFicyIsImluY2x1ZGVBc3NvYyIsImFzU2luZ2xlIiwicmVwbGFjZVJhbmdlIiwid2hpY2giLCJub3JtYWxpemVkIiwiY2hlY2tTZWxlY3Rpb24iLCJkb2NMZW5ndGgiLCJuZXh0SUQiLCJjb21wYXJlSW5wdXQiLCJpc1N0YXRpYyIsImRlZmF1bHQiLCJyZWFkZXIiLCJzYW1lQXJyYXkiLCJzdGF0aWMiLCJGYWNldFByb3ZpZGVyIiwiZGVwcyIsImRlcGVuZGVuY2llcyIsImR5bmFtaWNTbG90IiwiYWRkcmVzc2VzIiwibXVsdGkiLCJkZXBEb2MiLCJkZXBTZWwiLCJkZXBBZGRycyIsImRlcCIsImVuc3VyZUFsbCIsIm5ld1ZhbCIsImNvbXBhcmVBcnJheSIsIm9sZFN0YXRlIiwib2xkQWRkciIsImFkZHJlc3MiLCJvbGRWYWwiLCJnZXRBZGRyIiwiYWRkcnMiLCJjaGFuZ2VkIiwiYWRkciIsImVuc3VyZUFkZHIiLCJkeW5hbWljRmFjZXRTbG90IiwicHJvdmlkZXJzIiwicHJvdmlkZXJBZGRycyIsInByb3ZpZGVyVHlwZXMiLCJkeW5hbWljIiwiZGVwQ2hhbmdlZCIsIm9sZFByb3ZpZGVycyIsImZhY2V0cyIsIm9sZFZhbHVlIiwiaW5pdEZpZWxkIiwiY3JlYXRlRiIsInVwZGF0ZUYiLCJjb21wYXJlRiIsInByb3ZpZGVzIiwic2xvdCIsInByZWMiLCJQcmVjRXh0ZW5zaW9uIiwiQ29tcGFydG1lbnQiLCJDb21wYXJ0bWVudEluc3RhbmNlIiwiY29tcGFydG1lbnQiLCJjb21wYXJ0bWVudHMiLCJDb25maWd1cmF0aW9uIiwiZHluYW1pY1Nsb3RzIiwic3RhdGljVmFsdWVzIiwic3RhdHVzVGVtcGxhdGUiLCJzdGF0aWNGYWNldCIsIm5ld0NvbXBhcnRtZW50cyIsImRlbGV0ZSIsIm9sZEZhY2V0cyIsInN0YXR1cyIsImNvbXB1dGVTbG90IiwibGluZVNlcGFyYXRvciIsImNoYW5nZUZpbHRlciIsInRyYW5zYWN0aW9uRXh0ZW5kZXIiLCJBbm5vdGF0aW9uVHlwZSIsIlN0YXRlRWZmZWN0VHlwZSIsIl9kb2MiLCJhcHBseVRyYW5zYWN0aW9uIiwiYW5uIiwicmVjb25maWd1cmVkIiwiam9pblJhbmdlcyIsIm1lcmdlVHJhbnNhY3Rpb24iLCJtYXBGb3JBIiwibWFwRm9yQiIsInJlc29sdmVUcmFuc2FjdGlvbklubmVyIiwiZG9jU2l6ZSIsInJlc29sdmVUcmFuc2FjdGlvbiIsImV4dGVuZGVycyIsImV4dGVuZFRyYW5zYWN0aW9uIiwiYmFjayIsImZpbHRlcnMiLCJmaWx0ZXJUcmFuc2FjdGlvbiIsInJlbW90ZSIsIm5vbkFTQ0lJU2luZ2xlQ2FzZVdvcmRDaGFyIiwid29yZENoYXIiLCJyZXF1aXJlIiwic3RhcnRWYWx1ZXMiLCJmb3JFYWNoIiwicmVzdWx0MSIsIm5ld0NoYW5nZXMiLCJuZXdNYXBwZWQiLCJtYXBCeSIsImZpZWxkSW5pdCIsImNvbmZpZ3VyYXRpb24iLCJwaHJhc2VzIiwicHJvdmlkZXIiLCJoYXNXb3JkQ2hhciIsIk90aGVyIiwia0EiLCJrQiIsIlJhbmdlIiwicG9pbnQiLCJtYXBNb2RlIiwiY21wUmFuZ2UiLCJDaHVuayIsIm1heFBvaW50Iiwic3RhcnRBdCIsImxvIiwiaGkiLCJkaWZmIiwibmV3RnJvbSIsIm5ld1RvIiwibmV4dExheWVyIiwiaXNFbXB0eSIsInVwZGF0ZVNwZWMiLCJMYXllckN1cnNvciIsImdvdG8iLCJzcGlsbCIsImFkZElubmVyIiwiY2h1bmtJbmRleCIsImFkZENodW5rIiwibmV4dENodW5rIiwiZmluaXNoSW5uZXIiLCJ0b3VjaCIsIkhlYXBDdXJzb3IiLCJzZXRzIiwib2xkU2V0cyIsIm5ld1NldHMiLCJ0ZXh0RGlmZiIsImNvbXBhcmF0b3IiLCJtaW5Qb2ludFNpemUiLCJzaGFyZWRDaHVua3MiLCJmaW5kU2hhcmVkQ2h1bmtzIiwic2lkZUEiLCJTcGFuQ3Vyc29yIiwic2lkZUIiLCJzYW1lVmFsdWVzIiwic3BhbnMiLCJvcGVuUmFuZ2VzIiwiYWN0aXZlRm9yUG9pbnQiLCJvcGVuQ291bnQiLCJwb2ludEZyb20iLCJwb2ludFJhbmsiLCJsYXp5U29ydCIsImxheWVyIiwibmV3QXJyYXlzIiwic2V0TWF4UG9pbnQiLCJpbkEiLCJzaGFyZWQiLCJtaW5Qb2ludCIsImdvdG9Jbm5lciIsInNldFJhbmdlSW5kZXgiLCJoZWFwIiwiaGVhcEJ1YmJsZSIsImNoaWxkSW5kZXgiLCJhY3RpdmVUbyIsImFjdGl2ZVJhbmsiLCJtaW5BY3RpdmUiLCJyZW1vdmVBY3RpdmUiLCJmaW5kTWluSW5kZXgiLCJhZGRBY3RpdmUiLCJ0cmFja09wZW4iLCJ3YXNQb2ludCIsIm5leHRWYWwiLCJyZXZlcnNlIiwic3RhcnRBIiwic3RhcnRCIiwiZFBvcyIsImNsaXBFbmQiLCJjb21wYXJlUG9pbnQiLCJjb21wYXJlUmFuZ2UiLCJhcnJheSIsImZvdW5kUG9zIiwiZmluZENvbHVtbiIsInN0cmljdCIsImZyb21DaGFyQ29kZSIsInczY0tleW5hbWUiLCJnZXRTZWxlY3Rpb24iLCJoYXNTZWxlY3Rpb24iLCJhbmNob3JOb2RlIiwiY2xpZW50UmVjdHNGb3IiLCJ0ZXh0UmFuZ2UiLCJub2RlVmFsdWUiLCJnZXRDbGllbnRSZWN0cyIsImlzRXF1aXZhbGVudFBvc2l0aW9uIiwidGFyZ2V0Tm9kZSIsInRhcmdldE9mZiIsInNjYW5Gb3IiLCJkb21JbmRleCIsInByZXZpb3VzU2libGluZyIsImlzQmxvY2tFbGVtZW50IiwibWF4T2Zmc2V0IiwiY2hpbGROb2RlcyIsImNvbnRlbnRFZGl0YWJsZSIsImZsYXR0ZW5SZWN0Iiwid2luZG93UmVjdCIsInZwIiwidmlzdWFsVmlld3BvcnQiLCJnZXRTY2FsZSIsInNjYWxlWCIsImlzRmluaXRlIiwiRE9NU2VsZWN0aW9uU3RhdGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImRvbVNlbCIsInNldFJhbmdlIiwic2NyYXRjaFJhbmdlIiwicHJldmVudFNjcm9sbFN1cHBvcnRlZCIsImZvY3VzUHJldmVudFNjcm9sbCIsInNjcm9sbExlZnQiLCJwcmV2ZW50U2Nyb2xsIiwiY3JlYXRlUmFuZ2UiLCJzZXRFbmQiLCJzZXRTdGFydCIsImRpc3BhdGNoS2V5IiwibW9kcyIsImNhbmNlbGFibGUiLCJkb3duIiwiS2V5Ym9hcmRFdmVudCIsInN5bnRoZXRpYyIsImRpc3BhdGNoRXZlbnQiLCJ1cCIsImNsZWFyQXR0cmlidXRlcyIsInJlbW92ZUF0dHJpYnV0ZU5vZGUiLCJpc1Njcm9sbGVkVG9Cb3R0b20iLCJ0ZXh0Tm9kZUJlZm9yZSIsInN0YXJ0Tm9kZSIsInN0YXJ0T2Zmc2V0IiwidGV4dE5vZGVBZnRlciIsIkRPTVBvcyIsIm5vQ2hpbGRyZW4iLCJDb250ZW50VmlldyIsIm92ZXJyaWRlRE9NVGV4dCIsInBvc0F0U3RhcnQiLCJwb3NCZWZvcmUiLCJwb3NBdEVuZCIsImJyZWFrQWZ0ZXIiLCJwb3NBZnRlciIsInRyYWNrIiwiY29udGVudFZpZXciLCJjYW5SZXVzZURPTSIsInJldXNlRE9NIiwid3JpdHRlbiIsInJtJDEiLCJfZG9tIiwibG9jYWxQb3NGcm9tRE9NIiwiZG9tQm91bmRzQXJvdW5kIiwiZnJvbUkiLCJmcm9tU3RhcnQiLCJ0b0kiLCJ0b0VuZCIsInByZXZFbmQiLCJzdGFydERPTSIsImVuZERPTSIsIm1hcmtEaXJ0eSIsImFuZFBhcmVudCIsIm1hcmtQYXJlbnRzRGlydHkiLCJzZXRQYXJlbnQiLCJzZXRET00iLCJjbVZpZXciLCJyb290VmlldyIsInJlcGxhY2VDaGlsZHJlbiIsImlnbm9yZU11dGF0aW9uIiwiX3JlYyIsIl9ldmVudCIsImNoaWxkQ3Vyc29yIiwiQ2hpbGRDdXJzb3IiLCJjaGlsZFBvcyIsImZpbmRQb3MiLCJpc0VkaXRhYmxlIiwiaXNXaWRnZXQiLCJpc0hpZGRlbiIsIm1lcmdlIiwiaGFzU3RhcnQiLCJiZWNvbWUiLCJnZXRTaWRlIiwicmVtb3ZlQ2hpbGQiLCJicmVha0F0U3RhcnQiLCJicmVha0F0RW5kIiwibWVyZ2VDaGlsZHJlbkludG8iLCJkTGVuIiwibmF2IiwidmVuZG9yIiwiZG9jdW1lbnRFbGVtZW50IiwiaWVfZWRnZSIsImllX3VwdG8xMCIsImllXzExdXAiLCJpZSIsImdlY2tvIiwiY2hyb21lIiwid2Via2l0Iiwic2FmYXJpIiwiaW9zIiwibWF4VG91Y2hQb2ludHMiLCJicm93c2VyIiwiaWVfdmVyc2lvbiIsImRvY3VtZW50TW9kZSIsImdlY2tvX3ZlcnNpb24iLCJjaHJvbWVfdmVyc2lvbiIsIndlYmtpdF92ZXJzaW9uIiwiVGV4dFZpZXciLCJjcmVhdGVET00iLCJ0ZXh0RE9NIiwiZG9tQXRQb3MiLCJjb29yZHNBdCIsInJlY3RzIiwidGV4dENvb3JkcyIsIk1hcmtWaWV3Iiwic2V0QXR0cnMiLCJfaGFzU3RhcnQiLCJkZXRhY2hGcm9tIiwiaW5saW5lRE9NQXRQb3MiLCJjb29yZHNJbkNoaWxkcmVuIiwiV2lkZ2V0VmlldyIsInByZXZXaWRnZXQiLCJ1cGRhdGVET00iLCJlZGl0YWJsZSIsImZyb21CYWNrIiwiV2lkZ2V0QnVmZmVyVmlldyIsImpvaW5JbmxpbmVJbnRvIiwiYmVmb3JlUG9zIiwiYWZ0ZXJQb3MiLCJzY2FuIiwiZmFsbGJhY2tSZWN0IiwiY29tYmluZUF0dHJzIiwiYXR0cnNFcSIsImlnbm9yZSIsImtleXNBIiwia2V5c0IiLCJ1cGRhdGVBdHRycyIsImdldEF0dHJzIiwiYXR0ciIsIkxpbmVWaWV3IiwiYXJndW1lbnRzIiwicHJldkF0dHJzIiwidHJhbnNmZXJET00iLCJzZXREZWNvIiwiYWRkTGluZURlY28iLCJoYWNrIiwiY21JZ25vcmUiLCJtZWFzdXJlVGV4dFNpemUiLCJ0ZXh0SGVpZ2h0IiwidG90YWxXaWR0aCIsImNoYXJXaWR0aCIsImhlaWdodE9yYWNsZSIsInZpZXdTdGF0ZSIsImNvdmVycyIsImRvY1ZpZXciLCJCbG9ja1dpZGdldFZpZXciLCJfdGFrZURlY28iLCJlc3RpbWF0ZWRIZWlnaHQiLCJsaW5lQnJlYWtzIiwiQmxvY2tUeXBlIiwiaGVpZ2h0UmVsZXZhbnQiLCJNYXJrRGVjb3JhdGlvbiIsImlubGluZU9yZGVyIiwiUG9pbnREZWNvcmF0aW9uIiwiaXNCbG9ja0dhcCIsImdldEluY2x1c2l2ZSIsIkxpbmVEZWNvcmF0aW9uIiwiaGFzSGVpZ2h0IiwiaXNSZXBsYWNlIiwiV2lkZ2V0UmFuZ2UiLCJXaWRnZXRCZWZvcmUiLCJXaWRnZXRBZnRlciIsImluY2x1c2l2ZVN0YXJ0IiwiaW5jbHVzaXZlRW5kIiwiQ29udGVudEJ1aWxkZXIiLCJkaXNhbGxvd0Jsb2NrRWZmZWN0c0ZvciIsInBlbmRpbmdCdWZmZXIiLCJidWZmZXJNYXJrcyIsImF0Q3Vyc29yUG9zIiwidGV4dE9mZiIsInBvc0NvdmVyZWQiLCJmbHVzaEJ1ZmZlciIsIndyYXBNYXJrcyIsImFkZEJsb2NrV2lkZ2V0IiwiYnVpbGRUZXh0IiwidGFrZSIsIk51bGxXaWRnZXQiLCJpbmxpbmUiLCJjdXJzb3JCZWZvcmUiLCJjdXJzb3JBZnRlciIsImR5bmFtaWNEZWNvcmF0aW9uTWFwIiwiZGVjIiwiTG93VHlwZXMiLCJBcmFiaWNUeXBlcyIsIkJyYWNrZXRzIiwiQnJhY2tldFN0YWNrIiwiY2hhclR5cGUiLCJCaWRpUkUiLCJCaWRpU3BhbiIsIm9yZGVyIiwibWF5YmUiLCJpc29sYXRlc0VxIiwiZGlyZWN0aW9uIiwiZW1pdFNwYW5zIiwiYmFzZUxldmVsIiwiaXNvbGF0ZXMiLCJvdXJUeXBlIiwiaUNoIiwiaUkiLCJzYW1lRGlyIiwiaXNOdW0iLCJyZWN1cnNlIiwibG9jYWxMZXZlbCIsImlTY2FuIiwiakkiLCJjb21wdXRlU2VjdGlvbk9yZGVyIiwib3V0ZXJUeXBlIiwickZyb20iLCJyVG8iLCJwcmV2U3Ryb25nIiwiY29tcHV0ZUNoYXJUeXBlcyIsIm9wcG9zaXRlVHlwZSIsInNJIiwiYnIiLCJzSiIsImVtYmVkIiwicHJvY2Vzc0JyYWNrZXRQYWlycyIsImJlZm9yZUwiLCJmcm9tSiIsInByb2Nlc3NOZXV0cmFscyIsImNvbXB1dGVPcmRlciIsInRyaXZpYWxPcmRlciIsIm1vdmVkT3ZlciIsIm1vdmVWaXN1YWxseSIsInNwYW5JIiwic3BhbkVuZCIsIm5leHRJIiwibmV4dEluZGV4IiwibmV4dFNwYW4iLCJhdXRvRGlyZWN0aW9uIiwiY2xpY2tBZGRzU2VsZWN0aW9uUmFuZ2UiLCJkcmFnTW92ZXNTZWxlY3Rpb24kMSIsIm1vdXNlU2VsZWN0aW9uU3R5bGUiLCJleGNlcHRpb25TaW5rIiwidXBkYXRlTGlzdGVuZXIiLCJmb2N1c0NoYW5nZUVmZmVjdCIsIm5hdGl2ZVNlbGVjdGlvbkhpZGRlbiIsInNjcm9sbEhhbmRsZXIiLCJTY3JvbGxUYXJnZXQiLCJ4TWFyZ2luIiwiaXNTbmFwc2hvdCIsInNldEVkaXRDb250ZXh0Rm9ybWF0dGluZyIsImV4Y2VwdGlvbiIsIm9uZXJyb3IiLCJuZXh0UGx1Z2luSUQiLCJ2aWV3UGx1Z2luIiwiZG9tRXZlbnRPYnNlcnZlcnMiLCJidWlsZEV4dGVuc2lvbnMiLCJldmVudE9ic2VydmVycyIsInBsdWdpbkluc3QiLCJQbHVnaW5JbnN0YW5jZSIsIm11c3RVcGRhdGUiLCJkZWFjdGl2YXRlIiwiZWRpdG9yQXR0cmlidXRlcyIsImdldElzb2xhdGVkUmFuZ2VzIiwiRnVuY3Rpb24iLCJmcm9tRG9jIiwidG9Eb2MiLCJnZXRTY3JvbGxNYXJnaW5zIiwiQ2hhbmdlZFJhbmdlIiwiYWRkVG9TZXQiLCJtZSIsImV4dGVuZFdpdGhSYW5nZXMiLCJkSSIsInJJIiwiVmlld1VwZGF0ZSIsImNoYW5nZWRSYW5nZXMiLCJoZWlnaHRDaGFuZ2VkIiwiZ2VvbWV0cnlDaGFuZ2VkIiwiZm9jdXNDaGFuZ2VkIiwiRG9jVmlldyIsImRvbUNoYW5nZWQiLCJoYXNDb21wb3NpdGlvbiIsIm1hcmtlZEZvckNvbXBvc2l0aW9uIiwiZWRpdENvbnRleHRGb3JtYXR0aW5nIiwibGFzdENvbXBvc2l0aW9uQWZ0ZXJDdXJzb3IiLCJtaW5XaWR0aEZyb20iLCJtaW5XaWR0aFRvIiwiaW1wcmVjaXNlQW5jaG9yIiwiaW1wcmVjaXNlSGVhZCIsImZvcmNlU2VsZWN0aW9uIiwibGFzdFVwZGF0ZSIsInVwZGF0ZURlY28iLCJ1cGRhdGVJbm5lciIsInVwZGF0ZUVkaXRDb250ZXh0Rm9ybWF0dGluZyIsInJlYWRDb21wb3NpdGlvbkF0IiwiaW5wdXRTdGF0ZSIsIm9ic2VydmVyIiwiZWRpdENvbnRleHQiLCJjb21wb3NpdGlvbiIsInRvdWNoZWQiLCJ0b3VjaGVzQ29tcG9zaXRpb24iLCJoZWFkUG9zIiwiZmluZENvbXBvc2l0aW9uTm9kZSIsInRleHROb2RlIiwiaW52IiwicGFyZW50VmlldyIsImZpbmRDb21wb3NpdGlvblJhbmdlIiwiZGVjb0RpZmYiLCJEZWNvcmF0aW9uQ29tcGFyYXRvciQxIiwiZmluZENoYW5nZWREZWNvIiwib2xkTGVuZ3RoIiwibXVzdE1lYXN1cmVDb250ZW50IiwidXBkYXRlQ2hpbGRyZW4iLCJjb250ZW50SGVpZ2h0IiwiZmxleEJhc2lzIiwic2VsZWN0aW9uUmFuZ2UiLCJjVmlldyIsImdhcHMiLCJCbG9ja0dhcFdpZGdldCIsInVwZGF0ZUdhcHMiLCJjb21wTGluZSIsImNvbXBvc2l0aW9uVmlldyIsImZpeENvbXBvc2l0aW9uRE9NIiwiZml4IiwidXBkYXRlU2VsZWN0aW9uIiwibXVzdFJlYWQiLCJmcm9tUG9pbnRlciIsInJlYWRTZWxlY3Rpb25SYW5nZSIsImFjdGl2ZUVsdCIsImZvY3VzZWQiLCJzZWxlY3Rpb25Ob3RGb2N1cyIsIm1vdmVUb0xpbmUiLCJkdW1teSIsInN1cHByZXNzV2lkZ2V0Q3Vyc29yQ2hhbmdlIiwiYXNzaWduZWRTbG90IiwiaW5VbmVkaXRhYmxlIiwicmF3U2VsIiwibmV4dFRvIiwiY29sbGFwc2UiLCJjYXJldEJpZGlMZXZlbCIsInJlbW92ZUFsbFJhbmdlcyIsInNldFNlbGVjdGlvblJhbmdlIiwicG9zRnJvbURPTSIsImVuZm9yY2VDdXJzb3JBc3NvYyIsIm1vZGlmeSIsIm5ld1JhbmdlIiwibmVhcmVzdCIsImRvbVZpZXciLCJiZXN0UG9zIiwiY29vcmRzRm9yQ2hhciIsImNoaWxkT2ZmIiwibWVhc3VyZVZpc2libGVMaW5lSGVpZ2h0cyIsImNvbnRlbnRXaWR0aCIsImNsaWVudFdpZHRoIiwiaXNXaWRlciIsIndpZGVzdCIsImNoaWxkUmVjdCIsImdldENvbXB1dGVkU3R5bGUiLCJtZWFzdXJlIiwiY29tcHV0ZUJsb2NrR2FwRGVjbyIsInZzIiwidmlld3BvcnRzIiwiYWxsRGVjbyIsImR5bmFtaWNPdXRlciIsIm91dGVyRGVjbyIsImxpbmVHYXBEZWNvIiwicmVmIiwidGFyZ2V0UmVjdCIsImJvdW5kaW5nIiwiYm9keSIsInNjcm9sbFdpZHRoIiwibW92ZVgiLCJtb3ZlWSIsInJlY3RIZWlnaHQiLCJib3VuZGluZ0hlaWdodCIsInNjcm9sbEJ5IiwibW92ZWRYIiwibW92ZWRZIiwiaG9zdCIsInNjcm9sbFJlY3RJbnRvVmlldyIsImRlc2NBZnRlciIsImRlc2NCZWZvcmUiLCJnZXRkeCIsImdldGR5IiwieU92ZXJsYXAiLCJ1cFRvcCIsInVwQm90IiwiZG9tUG9zQXRDb29yZHMiLCJjbG9zZXN0IiwiY2xvc2VzdFJlY3QiLCJjbG9zZXN0WCIsImNsb3Nlc3RZIiwiYmVsb3ciLCJhYm92ZVJlY3QiLCJiZWxvd1JlY3QiLCJjbG9zZXN0T3ZlcmxhcCIsImR4IiwiZHkiLCJkb21Qb3NJblRleHQiLCJjbGlwWCIsImNsb3Nlc3RPZmZzZXQiLCJjbG9zZXN0RFkiLCJnZW5lcmFsU2lkZSIsImNvb3JkcyIsImRvY1RvcCIsInBhZGRpbmdUb3AiLCJkb2NIZWlnaHQiLCJ5T2Zmc2V0IiwiaGFsZkxpbmUiLCJib3VuY2VkIiwicG9zQXRDb29yZHNJbXByZWNpc2UiLCJlbGVtZW50RnJvbVBvaW50IiwiY2FyZXRQb3NpdGlvbkZyb21Qb2ludCIsIm9mZnNldE5vZGUiLCJjYXJldFJhbmdlRnJvbVBvaW50Iiwic3RhcnRDb250YWluZXIiLCJpc1N1c3BpY2lvdXNTYWZhcmlDYXJldFJlc3VsdCIsImlzU3VzcGljaW91c0Nocm9tZUNhcmV0UmVzdWx0IiwiY29udGVudFJlY3QiLCJpbnRvIiwiZGVmYXVsdENoYXJhY3RlcldpZHRoIiwibGluZUxlbmd0aCIsImJsb2NrQXQiLCJiaWRpU3BhbnMiLCJ2aXN1YWxMaW5lU2lkZSIsInNraXBBdG9taWNSYW5nZXMiLCJhdG9tcyIsInNraXBBdG9tcyIsIm9sZFBvcyIsIklucHV0U3RhdGUiLCJzZXRTZWxlY3Rpb25PcmlnaW4iLCJvcmlnaW4iLCJsYXN0U2VsZWN0aW9uT3JpZ2luIiwibGFzdFNlbGVjdGlvblRpbWUiLCJsYXN0S2V5Q29kZSIsImxhc3RLZXlUaW1lIiwibGFzdFRvdWNoVGltZSIsImxhc3RGb2N1c1RpbWUiLCJsYXN0U2Nyb2xsVG9wIiwibGFzdFNjcm9sbExlZnQiLCJwZW5kaW5nSU9TS2V5IiwidGFiRm9jdXNNb2RlIiwibGFzdENvbnRleHRNZW51Iiwic2Nyb2xsSGFuZGxlcnMiLCJoYW5kbGVycyIsImNvbXBvc2l0aW9uRmlyc3RDaGFuZ2UiLCJjb21wb3NpdGlvbkVuZGVkQXQiLCJjb21wb3NpdGlvblBlbmRpbmdLZXkiLCJjb21wb3NpdGlvblBlbmRpbmdDaGFuZ2UiLCJtb3VzZVNlbGVjdGlvbiIsImRyYWdnZWRDb250ZW50IiwiaGFuZGxlRXZlbnQiLCJub3RpZmllZEZvY3VzZWQiLCJhcHBsaWVkRmlyZWZveEhhY2siLCJmaXJlZm94Q29weUN1dEhhY2siLCJidWJibGVzIiwiZXZlbnRCZWxvbmdzVG9FZGl0b3IiLCJpZ25vcmVEdXJpbmdDb21wb3NpdGlvbiIsInJ1bkhhbmRsZXJzIiwib2JzZXJ2ZXJzIiwiZW5zdXJlSGFuZGxlcnMiLCJwbHVnaW5zIiwiY29tcHV0ZUhhbmRsZXJzIiwicGFzc2l2ZSIsImV4aXN0cyIsIm1vZGlmaWVyQ29kZXMiLCJkZWxheUFuZHJvaWRLZXkiLCJQZW5kaW5nS2V5cyIsIkVtYWNzeVBlbmRpbmdLZXlzIiwiZm9yY2VGbHVzaCIsImZsdXNoSU9TS2V5Iiwic3RhcnRNb3VzZVNlbGVjdGlvbiIsImJpbmRIYW5kbGVyIiwicmVjb3JkIiwiZHJhZ1Njcm9sbFNwZWVkIiwiTW91c2VTZWxlY3Rpb24iLCJzdGFydEV2ZW50IiwibXVzdFNlbGVjdCIsInNjcm9sbFNwZWVkIiwic2Nyb2xsaW5nIiwic2Nyb2xsUGFyZW50Iiwic2Nyb2xsYWJsZVBhcmVudCIsIm1vdmUiLCJtdWx0aXBsZSIsImFkZHNTZWxlY3Rpb25SYW5nZSIsImRyYWdnaW5nIiwicmFuZ2VDb3VudCIsImdldFJhbmdlQXQiLCJpc0luUHJpbWFyeVNlbGVjdGlvbiIsImdldENsaWNrVHlwZSIsImJ1dHRvbnMiLCJzeCIsInN5Iiwic2V0U2Nyb2xsU3BlZWQiLCJzZXRJbnRlcnZhbCIsInNjcm9sbCIsImNsZWFySW50ZXJ2YWwiLCJicm9rZW5DbGlwYm9hcmRBUEkiLCJkb1Bhc3RlIiwibGFzdExpbmV3aXNlQ29weSIsImxhc3RMaW5lIiwicmFuZ2VGb3JDbGljayIsImxpbmVQb3MiLCJncm91cEF0IiwidmlzdWFsIiwidG91Y2hzdGFydCIsInRvdWNobW92ZSIsIm1ha2VTdHlsZSIsInF1ZXJ5UG9zIiwic3RhcnRTZWwiLCJyZW1vdmVkIiwic3RhcnRSYW5nZSIsInJlbW92ZVJhbmdlQXJvdW5kIiwiYmFzaWNNb3VzZVNlbGVjdGlvbiIsIm11c3RGb2N1cyIsIm1vdXNlU2VsIiwiaW5zaWRlWSIsImZpbmRQb3NpdGlvblNpZGUiLCJCYWRNb3VzZURldGFpbCIsImxhc3RNb3VzZURvd24iLCJsYXN0TW91c2VEb3duQ291bnQiLCJsYXN0TW91c2VEb3duVGltZSIsImxhc3RUaW1lIiwiZHJvcFRleHQiLCJkcm9wUG9zIiwiZGVsIiwiZHJhZ01vdmVzU2VsZWN0aW9uIiwiZHJhZ3N0YXJ0IiwiZHJhZ2dhYmxlIiwiZGF0YVRyYW5zZmVyIiwic2V0RGF0YSIsImVmZmVjdEFsbG93ZWQiLCJkcmFnZW5kIiwiZmlsZXMiLCJmaW5pc2hGaWxlIiwiRmlsZVJlYWRlciIsIm9ubG9hZCIsInJlYWRBc1RleHQiLCJnZXREYXRhIiwicGFzdGUiLCJjbGlwYm9hcmREYXRhIiwiY2FwdHVyZVBhc3RlIiwiY3V0IiwibGluZXdpc2UiLCJjb3BpZWRSYW5nZSIsImNsZWFyRGF0YSIsInNlbGVjdGlvbkVuZCIsInNlbGVjdGlvblN0YXJ0IiwiY2FwdHVyZUNvcHkiLCJpc0ZvY3VzQ2hhbmdlIiwiZm9jdXNDaGFuZ2VUcmFuc2FjdGlvbiIsImdldEVmZmVjdCIsInVwZGF0ZUZvckZvY3VzQ2hhbmdlIiwiY2xlYXJTZWxlY3Rpb25SYW5nZSIsImNvbXBvc2l0aW9udXBkYXRlIiwicGVuZGluZ1JlY29yZHMiLCJmbHVzaFNvb24iLCJjb250ZXh0bWVudSIsInN0YXJ0Vmlld0hlaWdodCIsIndyYXBwaW5nV2hpdGVTcGFjZSIsIkhlaWdodE9yYWNsZSIsImhlaWdodFNhbXBsZXMiLCJoZWlnaHRGb3JHYXAiLCJjZWlsIiwiaGVpZ2h0Rm9yTGluZSIsInNldERvYyIsIm11c3RSZWZyZXNoRm9yV3JhcHBpbmciLCJtdXN0UmVmcmVzaEZvckhlaWdodHMiLCJsaW5lSGVpZ2h0cyIsIm5ld0hlaWdodCIsInJlZnJlc2giLCJrbm93bkhlaWdodHMiLCJNZWFzdXJlZEhlaWdodHMiLCJoZWlnaHRzIiwibW9yZSIsIkJsb2NrSW5mbyIsIl9jb250ZW50Iiwid2lkZ2V0TGluZUJyZWFrcyIsIkhlaWdodE1hcCIsIm91dGRhdGVkIiwic2V0SGVpZ2h0Iiwib3JhY2xlIiwiZGVjb21wb3NlTGVmdCIsImRlY29tcG9zZVJpZ2h0Iiwib2xkRG9jIiwiQnlQb3NOb0hlaWdodCIsIk5vZGVCdWlsZGVyIiwidXBkYXRlSGVpZ2h0IiwiSGVpZ2h0TWFwVGV4dCIsImJyZWFrIiwiYnJrIiwiSGVpZ2h0TWFwQnJhbmNoIiwiSGVpZ2h0TWFwQmxvY2siLCJfaGVpZ2h0IiwiX29yYWNsZSIsIl92YWx1ZSIsIl90eXBlIiwiZm9yRWFjaExpbmUiLCJfZm9yY2UiLCJtZWFzdXJlZCIsImNvbGxhcHNlZCIsIndpZGdldEhlaWdodCIsImJyZWFrcyIsIkhlaWdodE1hcEdhcCIsImhlaWdodE1ldHJpY3MiLCJwZXJMaW5lIiwiZmlyc3RMaW5lIiwicGVyQ2hhciIsInRvdGFsUGVyTGluZSIsImd1ZXNzIiwibGluZVRvcCIsIkJ5SGVpZ2h0IiwibGluZXNBYm92ZSIsInVuc2hpZnQiLCJzaW5nbGVIZWlnaHQiLCJyaWdodFRvcCIsInJpZ2h0T2Zmc2V0Iiwic3ViUXVlcnkiLCJCeVBvcyIsInJpZ2h0U3RhcnQiLCJiYWxhbmNlZCIsIm1lcmdlR2FwcyIsInJlYmFsYW5jZSIsImFyb3VuZCIsImNvdmVyaW5nIiwid3JpdHRlblRvIiwiaXNDb3ZlcmVkIiwiYWRkQmxvY2siLCJlbnRlckxpbmUiLCJibGFua0NvbnRlbnQiLCJnYXAiLCJlbnN1cmVMaW5lIiwiRGVjb3JhdGlvbkNvbXBhcmF0b3IiLCJ2aXNpYmxlUGl4ZWxSYW5nZSIsInBhcmVudFJlY3QiLCJvZmZzZXRQYXJlbnQiLCJmdWxsUGl4ZWxSYW5nZSIsIkxpbmVHYXAiLCJzYW1lIiwiZ0EiLCJnQiIsImRyYXciLCJ3cmFwcGluZyIsIkxpbmVHYXBXaWRnZXQiLCJ2ZXJ0aWNhbCIsIlZpZXdTdGF0ZSIsInBpeGVsVmlld3BvcnQiLCJpblZpZXciLCJjb250ZW50RE9NV2lkdGgiLCJjb250ZW50RE9NSGVpZ2h0IiwiZWRpdG9ySGVpZ2h0IiwiZWRpdG9yV2lkdGgiLCJzY3JvbGxlZFRvQm90dG9tIiwic2Nyb2xsQW5jaG9yUG9zIiwic2Nyb2xsQW5jaG9ySGVpZ2h0Iiwic2NhbGVyIiwiSWRTY2FsZXIiLCJzY3JvbGxUYXJnZXQiLCJwcmludGluZyIsImRlZmF1bHRUZXh0RGlyZWN0aW9uIiwibXVzdEVuZm9yY2VDdXJzb3JBc3NvYyIsImd1ZXNzV3JhcHBpbmciLCJzdGF0ZURlY28iLCJoZWlnaHRNYXAiLCJnZXRWaWV3cG9ydCIsInVwZGF0ZUZvclZpZXdwb3J0IiwidXBkYXRlVmlld3BvcnRMaW5lcyIsImxpbmVHYXBzIiwiZW5zdXJlTGluZUdhcHMiLCJjb21wdXRlVmlzaWJsZVJhbmdlcyIsIlZpZXdwb3J0IiwidXBkYXRlU2NhbGVyIiwiQmlnU2NhbGVyIiwidmlld3BvcnRMaW5lcyIsInNjYWxlQmxvY2siLCJwcmV2RGVjbyIsImNvbnRlbnRDaGFuZ2VzIiwiaGVpZ2h0Q2hhbmdlcyIsImhlaWdodFJlbGV2YW50RGVjb0NoYW5nZXMiLCJwcmV2SGVpZ2h0Iiwic2Nyb2xsQW5jaG9yIiwic2Nyb2xsQW5jaG9yQXQiLCJtYXBWaWV3cG9ydCIsInZpZXdwb3J0SXNBcHByb3ByaWF0ZSIsInZpZXdwb3J0Q2hhbmdlIiwidXBkYXRlTGluZUdhcHMiLCJtYXBMaW5lR2FwcyIsImRvbVJlY3QiLCJtZWFzdXJlQ29udGVudCIsImRUb3AiLCJkQm90dG9tIiwidmlzaWJsZVRvcCIsImZyb21ET00iLCJ2aXNpYmxlQm90dG9tIiwidG9wUG9zIiwidmlld0hlaWdodCIsIm1heU1lYXN1cmUiLCJoYWxmTWFyZ2luIiwiZG91YmxlTWFyZ2luIiwiYWRkR2FwIiwic3RydWN0dXJlIiwiYXZvaWQiLCJnYXBTaXplIiwiY2hlY2tMaW5lIiwibGluZVN0cnVjdHVyZSIsInZpZXdGcm9tIiwidmlld1RvIiwiYm90IiwibWFyZ2luSGVpZ2h0IiwidGFyZ2V0RnJhYyIsImZpbmRGcmFjdGlvbiIsInNwYWNlRnJhYyIsImZpbmRQb3NpdGlvbiIsIm1hcmdpbldpZHRoIiwiZnJhY3Rpb24iLCJsaW5lQmxvY2tBdEhlaWdodCIsInJhdGlvIiwiY291bnRlZCIsInNjYWxlIiwidnBIZWlnaHQiLCJkb21CYXNlIiwiZG9tVG9wIiwiZG9tQm90dG9tIiwiYlRvcCIsImJCb3R0b20iLCJ0aGVtZSIsInN0cnMiLCJiYXNlVGhlbWVJRCIsImJhc2VMaWdodElEIiwiYmFzZURhcmtJRCIsImxpZ2h0RGFya0lEcyIsImJ1aWxkVGhlbWUiLCJzY29wZXMiLCJvdXRsaW5lIiwiZmxleERpcmVjdGlvbiIsImFsaWduSXRlbXMiLCJ6SW5kZXgiLCJmbGV4R3JvdyIsImZsZXhTaHJpbmsiLCJ3b3JkV3JhcCIsIm1pbkhlaWdodCIsIldlYmtpdFVzZXJNb2RpZnkiLCJ3aGl0ZVNwYWNlX2ZhbGxiYWNrIiwid29yZEJyZWFrIiwib3ZlcmZsb3dXcmFwIiwiY2FyZXRDb2xvciIsImNvbnRhaW4iLCJwb2ludGVyRXZlbnRzIiwiYW5pbWF0aW9uIiwiYm9yZGVyTGVmdENvbG9yIiwidW5pY29kZUJpZGkiLCJpbnNldElubGluZVN0YXJ0IiwiYm9yZGVyVG9wIiwiYmFja2dyb3VuZFNpemUiLCJMaW5lQnJlYWtQbGFjZWhvbGRlciIsIkRPTVJlYWRlciIsInBvaW50cyIsInJlYWRSYW5nZSIsImZpbmRQb2ludEJlZm9yZSIsIm9sZExlbiIsInJlYWROb2RlIiwibmV4dFZpZXciLCJyZWFkVGV4dE5vZGUiLCJuZXh0QnJlYWsiLCJicmVha1NpemUiLCJmcm9tVmlldyIsImZpbmRQb2ludEluc2lkZSIsIkRPTVBvaW50IiwiRE9NQ2hhbmdlIiwidHlwZU92ZXIiLCJib3VuZHMiLCJpSGVhZCIsImlBbmNob3IiLCJzZWxQb2ludHMiLCJzZWxlY3Rpb25Qb2ludHMiLCJzZWxlY3Rpb25Gcm9tUG9pbnRzIiwib2ZmRnJvbSIsIm9mZlRvIiwiYXBwbHlET01DaGFuZ2UiLCJkb21DaGFuZ2UiLCJsYXN0S2V5IiwicHJlZmVycmVkUG9zIiwicHJlZmVycmVkU2lkZSIsIm1pbkxlbiIsImZpbmREaWZmIiwiZ2V0QXR0cmlidXRlIiwiYXBwbHlET01DaGFuZ2VJbm5lciIsImRlZmF1bHRUciIsImRlZmF1bHRJbnNlcnQiLCJtYWluU2VsIiwiY29tcG9zaXRpb25SYW5nZSIsInJlcGxhY2VkIiwicmFuZ2VDaGFuZ2VzIiwic2VsT2ZmIiwiYXBwbHlEZWZhdWx0SW5zZXJ0Iiwib2JzZXJ2ZU9wdGlvbnMiLCJjaGFyYWN0ZXJEYXRhIiwic3VidHJlZSIsImNoYXJhY3RlckRhdGFPbGRWYWx1ZSIsInVzZUNoYXJEYXRhIiwiRE9NT2JzZXJ2ZXIiLCJzZWxlY3Rpb25DaGFuZ2VkIiwiZGVsYXllZEZsdXNoIiwicmVzaXplVGltZW91dCIsInF1ZXVlIiwiZGVsYXllZEFuZHJvaWRLZXkiLCJmbHVzaGluZ0FuZHJvaWRLZXkiLCJsYXN0Q2hhbmdlIiwic2Nyb2xsVGFyZ2V0cyIsImludGVyc2VjdGlvbiIsInJlc2l6ZVNjcm9sbCIsImludGVyc2VjdGluZyIsImdhcEludGVyc2VjdGlvbiIsInByaW50UXVlcnkiLCJwYXJlbnRDaGVjayIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJtdXRhdGlvbnMiLCJtdXQiLCJyZW1vdmVkTm9kZXMiLCJFZGl0Q29udGV4dCIsIkVESVRfQ09OVEVYVCIsIkVkaXRDb250ZXh0TWFuYWdlciIsIm9uQ2hhckRhdGEiLCJwcmV2VmFsdWUiLCJvblNlbGVjdGlvbkNoYW5nZSIsIm9uUmVzaXplIiwib25QcmludCIsIm9uU2Nyb2xsIiwibWF0Y2hNZWRpYSIsIlJlc2l6ZU9ic2VydmVyIiwib2JzZXJ2ZSIsImFkZFdpbmRvd0xpc3RlbmVycyIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwibGlzdGVuRm9yU2Nyb2xsIiwiaW50ZXJzZWN0aW9uUmF0aW8iLCJvblNjcm9sbENoYW5nZWQiLCJjcmVhdGVFdmVudCIsInRocmVzaG9sZCIsIm1lYXN1cmVSZXEiLCJkaXNjb25uZWN0Iiwid2FzQ2hhbmdlZCIsInNoYWRvd1Jvb3QiLCJkZWVwQWN0aXZlRWxlbWVudCIsImdldENvbXBvc2VkUmFuZ2VzIiwiYnVpbGRTZWxlY3Rpb25SYW5nZUZyb21SYW5nZSIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImdldFRhcmdldFJhbmdlcyIsImV4ZWNDb21tYW5kIiwic2FmYXJpU2VsZWN0aW9uUmFuZ2VIYWNrIiwiYXRFbGVtZW50U3RhcnQiLCJwcm9jZXNzUmVjb3JkcyIsImNsZWFyRGVsYXllZEFuZHJvaWRLZXkiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInRha2VSZWNvcmRzIiwicmVjb3JkcyIsInJlYWRNdXRhdGlvbiIsInJlYWRDaGFuZ2UiLCJyZWFkU2VsZWN0aW9uIiwiaGFuZGxlZCIsInJlYyIsImZpbmRDaGlsZCIsInNldFdpbmRvdyIsInJlbW92ZVdpbmRvd0xpc3RlbmVycyIsImN1clZpZXciLCJlbmRDb250YWluZXIiLCJlbmRPZmZzZXQiLCJjdXJBbmNob3IiLCJwZW5kaW5nQ29udGV4dENoYW5nZSIsInJlc2V0UmFuZ2UiLCJ0b0NvbnRleHRQb3MiLCJ0b0VkaXRvclBvcyIsInVwZGF0ZVJhbmdlU3RhcnQiLCJ1cGRhdGVSYW5nZUVuZCIsInJldmVydFBlbmRpbmciLCJET01SZWN0IiwidXBkYXRlQ2hhcmFjdGVyQm91bmRzIiwiZm9ybWF0IiwiZ2V0VGV4dEZvcm1hdHMiLCJsaW5lU3R5bGUiLCJ1bmRlcmxpbmVTdHlsZSIsInRoaWNrbmVzcyIsInVuZGVybGluZVRoaWNrbmVzcyIsInVwZGF0ZUNvbnRyb2xCb3VuZHMiLCJ1cGRhdGVTZWxlY3Rpb25Cb3VuZHMiLCJhcHBseUVkaXRzIiwiYWJvcnQiLCJfZnJvbUIiLCJ1cGRhdGVUZXh0IiwicmFuZ2VJc1ZhbGlkIiwic2V0U2VsZWN0aW9uIiwiY29udGV4dFBvcyIsImVkaXRvclBvcyIsIl9yb290IiwicGx1Z2luTWFwIiwiZWRpdG9yQXR0cnMiLCJjb250ZW50QXR0cnMiLCJiaWRpQ2FjaGUiLCJkZXN0cm95ZWQiLCJ1cGRhdGVTdGF0ZSIsIm1lYXN1cmVTY2hlZHVsZWQiLCJtZWFzdXJlUmVxdWVzdHMiLCJhbm5vdW5jZURPTSIsImRpc3BhdGNoVHJhbnNhY3Rpb25zIiwidHJzIiwic2Nyb2xsVG8iLCJtb3VudFN0eWxlcyIsInJlZHJhd24iLCJhdHRyc0NoYW5nZWQiLCJmb2N1c0ZsYWciLCJkaXNwYXRjaEZvY3VzIiwicGVuZGluZ0tleSIsIkNhY2hlZE9yZGVyIiwidXBkYXRlUGx1Z2lucyIsInN0eWxlTW9kdWxlcyIsInNob3dBbm5vdW5jZW1lbnRzIiwiZG9jVmlld1VwZGF0ZSIsImhhZEZvY3VzIiwicHJldlNwZWNzIiwibmV3UGx1Z2lucyIsInNET00iLCJtZWFzdXJpbmciLCJCYWRNZWFzdXJlIiwidGhlbWVDbGFzc2VzIiwiYXR0cnNGcm9tRmFjZXQiLCJzcGVsbGNoZWNrIiwiYXV0b2NvcnJlY3QiLCJhdXRvY2FwaXRhbGl6ZSIsInRyYW5zbGF0ZSIsImNvbnRlbnRlZGl0YWJsZSIsImNoYW5nZWRDb250ZW50IiwiY2hhbmdlZEVkaXRvciIsIm5vbmNlIiwiY3NwTm9uY2UiLCJyZWFkTWVhc3VyZWQiLCJyZXF1ZXN0IiwiZG9jdW1lbnRQYWRkaW5nIiwiaW5pdGlhbCIsImJ5R3JvdXAiLCJpbmNsdWRlV3JhcCIsImVkaXRvclJlY3QiLCJzdGFydFkiLCJnb2FsIiwic3RhcnRDb29yZHMiLCJyZXNvbHZlZEdvYWwiLCJjdXJZIiwiY2hhclJlY3QiLCJNYXhCaWRpTGluZSIsImZyZXNoIiwic2V0Um9vdCIsInNjcm9sbFNuYXBzaG90IiwiZGFyayIsImZpbmRGcm9tRE9NIiwibGFzdERpciIsImN1cnJlbnRQbGF0Zm9ybSIsIm1vZGlmaWVycyIsImhhbmRsZUtleUV2ZW50cyIsImdldEtleW1hcCIsIktleW1hcHMiLCJiaW5kaW5ncyIsImJvdW5kIiwiaXNQcmVmaXgiLCJjaGVja1ByZWZpeCIsInN0b3BQcm9wYWdhdGlvbiIsInNjb3BlT2JqIiwiYWx0IiwiY3RybCIsIm1vZCIsIm5vcm1hbGl6ZUtleU5hbWUiLCJvdXJPYmoiLCJzdG9yZWRQcmVmaXgiLCJQcmVmaXhUaW1lb3V0IiwiZnVsbCIsImJpbmRpbmciLCJfYW55IiwiY3VycmVudEtleUV2ZW50IiwiYnVpbGRLZXltYXAiLCJrZXlOYW1lIiwiY2hhckNvZGUiLCJpc0NoYXIiLCJwcmV2ZW50ZWQiLCJiYXNlTmFtZSIsInNoaWZ0TmFtZSIsInJhbiIsInJ1bkZvciIsIlJlY3RhbmdsZU1hcmtlciIsImFkanVzdCIsImZvclJhbmdlIiwiZ2V0QmFzZSIsImxpbmVFbHQiLCJsZWZ0U2lkZSIsInRleHRJbmRlbnQiLCJyaWdodFNpZGUiLCJzdGFydEJsb2NrIiwiZW5kQmxvY2siLCJ2aXN1YWxTdGFydCIsInZpc3VhbEVuZCIsIndyYXBwZWRMaW5lIiwicGllY2VzIiwiZHJhd0ZvckxpbmUiLCJkcmF3Rm9yV2lkZ2V0IiwiaG9yaXpvbnRhbCIsImFkZFNwYW4iLCJmcm9tT3BlbiIsInRvT3BlbiIsImZyb21Db29yZHMiLCJ0b0Nvb3JkcyIsImVuZFBvcyIsInNwYW5Gcm9tIiwic3BhblRvIiwicmVjdGFuZ2xlc0ZvclJhbmdlIiwiTGF5ZXJWaWV3IiwiZHJhd24iLCJzZXRPcmRlciIsImxheWVyT3JkZXIiLCJ1cGRhdGVPbkRvY1ZpZXdVcGRhdGUiLCJ0cmFuc2Zvcm0iLCJvbGQiLCJvbGRJIiwiQ2FuSGlkZVByaW1hcnkiLCJzZWxlY3Rpb25Db25maWciLCJjdXJzb3JCbGlua1JhdGUiLCJkcmF3UmFuZ2VDdXJzb3IiLCJjb25maWdDaGFuZ2VkIiwiY3Vyc29yTGF5ZXIiLCJjdXJzb3JzIiwicHJpbSIsImFuaW1hdGlvbk5hbWUiLCJjb25mQ2hhbmdlIiwic2V0QmxpbmtSYXRlIiwiYW5pbWF0aW9uRHVyYXRpb24iLCJzZWxlY3Rpb25MYXllciIsInRoZW1lU3BlYyIsImhpZGVOYXRpdmVTZWxlY3Rpb24iLCJzZXREcm9wQ3Vyc29yUG9zIiwiZHJvcEN1cnNvclBvcyIsImRyYXdEcm9wQ3Vyc29yIiwicmVhZFBvcyIsImRyYXdDdXJzb3IiLCJvdXRlciIsInNldERyb3BQb3MiLCJkcmFnb3ZlciIsImRyYWdsZWF2ZSIsIml0ZXJNYXRjaGVzIiwiTWF0Y2hEZWNvcmF0b3IiLCJkZWNvcmF0aW9uIiwiZGVjb3JhdGUiLCJib3VuZGFyeSIsIm1heExlbmd0aCIsImdsb2JhbCIsImFkZE1hdGNoIiwiY3JlYXRlRGVjbyIsInZpc2libGUiLCJtYXRjaFJhbmdlcyIsImNoYW5nZUZyb20iLCJjaGFuZ2VUbyIsInVwZGF0ZVJhbmdlIiwidXBkYXRlRnJvbSIsInVwZGF0ZVRvIiwiVW5pY29kZVJlZ2V4cFN1cHBvcnQiLCJTcGVjaWFscyIsIk5hbWVzIiwiX3N1cHBvcnRzVGFiU2l6ZSIsInNwZWNpYWxDaGFyQ29uZmlnIiwic3BlY2lhbENoYXJzIiwiYWRkU3BlY2lhbENoYXJzIiwicmVwbGFjZVRhYnMiLCJzdHlsZXMiLCJNb3pUYWJTaXplIiwic3VwcG9ydHNUYWJTaXplIiwiX3BsdWdpbiIsIlNwZWNpYWxDaGFyV2lkZ2V0IiwicGgiLCJUYWJXaWRnZXQiLCJsaW5lRGVjbyIsImFjdGl2ZUxpbmVIaWdobGlnaHRlciIsImxhc3RMaW5lU3RhcnQiLCJQbGFjZWhvbGRlciIsIk1heE9mZiIsImdldFBvcyIsImFic29sdXRlQ29sdW1uIiwiQWx0IiwiQ29udHJvbCIsIlNoaWZ0IiwiTWV0YSIsInNob3dDcm9zc2hhaXIiLCJPdXRzaWRlIiwiVG9vbHRpcFZpZXdNYW5hZ2VyIiwiY3JlYXRlVG9vbHRpcFZpZXciLCJyZW1vdmVUb29sdGlwVmlldyIsInRvb2x0aXBzIiwidG9vbHRpcFZpZXdzIiwibmV3QWJvdmUiLCJ0aXAiLCJ0b29sdGlwVmlldyIsIndpbmRvd1NwYWNlIiwidG9vbHRpcENvbmZpZyIsInRvb2x0aXBTcGFjZSIsImtub3duSGVpZ2h0IiwidG9vbHRpcFBsdWdpbiIsIm1hZGVBYnNvbHV0ZSIsImxhc3RUcmFuc2FjdGlvbiIsIm1lYXN1cmVUaW1lb3V0IiwiY2xhc3NlcyIsImNyZWF0ZUNvbnRhaW5lciIsInJlYWRNZWFzdXJlIiwid3JpdGVNZWFzdXJlIiwicmVzaXplT2JzZXJ2ZXIiLCJtZWFzdXJlU29vbiIsIm1hbmFnZXIiLCJ1bm9ic2VydmUiLCJpbnRlcnNlY3Rpb25PYnNlcnZlciIsIm9ic2VydmVJbnRlcnNlY3Rpb24iLCJtYXliZU1lYXN1cmUiLCJzaG91bGRNZWFzdXJlIiwibmV3Q29uZmlnIiwiYXJyb3ciLCJtYWtlQWJzb2x1dGUiLCJ0diIsIm90aGVycyIsInRWaWV3IiwiYXJyb3dIZWlnaHQiLCJub09mZnNldCIsInN0cmljdFNpZGUiLCJzcGFjZVZlcnQiLCJyZXNpemUiLCJvdmVybGFwIiwiYXJyb3dMZWZ0IiwiYm9yZGVyVG9wQ29sb3IiLCJzaG93SG92ZXJUb29sdGlwIiwiaW5wdXRzIiwiSG92ZXJUb29sdGlwSG9zdCIsImNyZWF0ZUhvc3RlZFZpZXciLCJob3N0ZWRWaWV3IiwicGFzc1Byb3AiLCJnaXZlbiIsInNob3dIb3ZlclRvb2x0aXBIb3N0IiwiSG92ZXJQbHVnaW4iLCJzZXRIb3ZlciIsInJlc3RhcnRUaW1lb3V0IiwibGFzdE1vdmUiLCJjaGVja0hvdmVyIiwibW91c2VsZWF2ZSIsInN0YXJ0SG92ZXIiLCJwb3NDb29yZHMiLCJiaWRpIiwidG9vbHRpcE1hcmdpbiIsImlzSW5Ub29sdGlwIiwiZG9jQm90dG9tIiwiaXNPdmVyUmFuZ2UiLCJ3YXRjaFRvb2x0aXBMZWF2ZSIsIndhdGNoIiwiY2xvc2VIb3ZlclRvb2x0aXBFZmZlY3QiLCJjbG9zZUhvdmVyVG9vbHRpcHMiLCJwYW5lbENvbmZpZyIsInRvcENvbnRhaW5lciIsImJvdHRvbUNvbnRhaW5lciIsInBhbmVsUGx1Z2luIiwicGFuZWxzIiwiUGFuZWxHcm91cCIsInN5bmNDbGFzc2VzIiwic2Nyb2xsTWFyZ2luIiwic3luY0RPTSIsImN1ckRPTSIsImVsZW1lbnRDbGFzcyIsImd1dHRlckxpbmVDbGFzcyIsInJlbmRlckVtcHR5RWxlbWVudHMiLCJlbGVtZW50U3R5bGUiLCJsaW5lTWFya2VyIiwid2lkZ2V0TWFya2VyIiwibGluZU1hcmtlckNoYW5nZSIsInVwZGF0ZVNwYWNlciIsImFjdGl2ZUd1dHRlcnMiLCJ1bmZpeEd1dHRlcnMiLCJndXR0ZXJzIiwiZ3V0dGVyVmlldyIsImZpeGVkIiwicHJldlZpZXdwb3J0IiwiU2luZ2xlR3V0dGVyVmlldyIsInN5bmNHdXR0ZXJzIiwidXBkYXRlR3V0dGVycyIsInZwQSIsInZwQiIsInZwT3ZlcmxhcCIsImRldGFjaCIsImxpbmVDbGFzc2VzIiwiY2xhc3NTZXQiLCJjb250ZXh0cyIsIlVwZGF0ZUNvbnRleHQiLCJhZHZhbmNlQ3Vyc29yIiwiY29sbGVjdCIsImFkZEVsZW1lbnQiLCJlbGVtZW50cyIsIm5ld0VsdCIsIkd1dHRlckVsZW1lbnQiLCJleHRyYU1hcmtlcnMiLCJsb2NhbE1hcmtlcnMiLCJmb3JMaW5lIiwic3BhY2VyIiwicHJldk1hcmtlcnMiLCJzYW1lTWFya2VycyIsInNldE1hcmtlcnMiLCJpTmV3IiwiaU9sZCIsImxpbmVOdW1iZXJNYXJrZXJzIiwibGluZU51bWJlckNvbmZpZyIsImZvcm1hdE51bWJlciIsIk51bWJlck1hcmtlciIsImxpbmVOdW1iZXJHdXR0ZXIiLCJtYXhMaW5lTnVtYmVyIiwiYWN0aXZlTGluZUd1dHRlck1hcmtlciIsImFjdGl2ZUxpbmVHdXR0ZXJIaWdobGlnaHRlciIsIldoaXRlc3BhY2VEZWNvIiwiZGVjb3JhdG9yIiwid2hpdGVzcGFjZUhpZ2hsaWdodGVyIiwiZ2V0V2hpdGVzcGFjZURlY28iLCJ0cmFpbGluZ0hpZ2hsaWdodGVyIiwiX190ZXN0IiwiaXNEb3duIiwia2V5dXAiLCJnZXREcmF3U2VsZWN0aW9uQ29uZmlnIiwiaGFzSG92ZXJUb29sdGlwcyIsImRlY29yYXRpb25DYWNoZSIsIm1ha2VEZWNvcmF0b3IiLCJoaWdobGlnaHRUcmFpbGluZ1doaXRlc3BhY2UiLCJoaWdobGlnaHRXaGl0ZXNwYWNlIiwiaG92ZXJTdGF0ZSIsImhpZGVPbkNoYW5nZSIsImV2ZW50RmlsdGVyIiwibmV3U3RhcnQiLCJuZXdMaW5lIiwiX2V4dGVuZCIsInN0YXJ0T2ZmIiwic3RhcnRDb2wiLCJlbmRDb2wiLCJyZWN0YW5nbGVGb3IiLCJyZWN0YW5nbGVTZWxlY3Rpb25TdHlsZSIsInJlcG9zaXRpb25Ub29sdGlwcyIsInNjcm9sbFBhc3RFbmQiLCJEZWZhdWx0QnVmZmVyTGVuZ3RoIiwibmV4dFByb3BJRCIsImRlc2VyaWFsaXplIiwiZ3JvdXAiLCJjb250ZXh0SGFzaCIsImxvb2tBaGVhZCIsIk1vdW50ZWRUcmVlIiwibm9Qcm9wcyIsInNyYyIsImlzQW5vbnltb3VzIiwiZ3JvdXBzIiwibmV3VHlwZXMiLCJuZXdQcm9wcyIsIkNhY2hlZE5vZGUiLCJDYWNoZWRJbm5lck5vZGUiLCJUcmVlQ3Vyc29yIiwiY3Vyc29yQXQiLCJtb3ZlVG8iLCJfdHJlZSIsIlRyZWVOb2RlIiwicmVzb2x2ZU5vZGUiLCJsYXllcnMiLCJpdGVyU3RhY2siLCJzdGFja0l0ZXJhdG9yIiwibGVhdmUiLCJhbm9uIiwiSW5jbHVkZUFub255bW91cyIsImVudGVyZWQiLCJwcm9wVmFsdWVzIiwiYmFsYW5jZVJhbmdlIiwibWFrZVRyZWUiLCJtaW5SZXBlYXRUeXBlIiwiRmxhdEJ1ZmZlckN1cnNvciIsInRha2VOb2RlIiwicGFyZW50U3RhcnQiLCJtaW5Qb3MiLCJpblJlcGVhdCIsImxvb2tBaGVhZEF0U3RhcnQiLCJtYXhTaXplIiwiZm9yayIsIm1pblN0YXJ0Iiwibm9kZVNpemUiLCJsb2NhbFNraXBwZWQiLCJmaW5kQnVmZmVyU2l6ZSIsIlVpbnQxNkFycmF5IiwiY29weVRvQnVmZmVyIiwiVHJlZUJ1ZmZlciIsImxvY2FsQ2hpbGRyZW4iLCJsb2NhbFBvc2l0aW9ucyIsImxvY2FsSW5SZXBlYXQiLCJsYXN0R3JvdXAiLCJsYXN0RW5kIiwibWFrZVJlcGVhdExlYWYiLCJ0YWtlRmxhdE5vZGUiLCJtYWtlIiwibG9va0FoZWFkUHJvcCIsImxhc3RJIiwibWFrZUJhbGFuY2VkIiwibm9kZUNvdW50IiwicGFpciIsImJ1aWxkVHJlZSIsImNoaWxkU3RyaW5nIiwiZW5kSW5kZXgiLCJwaWNrIiwiY2hlY2tTaWRlIiwiZW5kSSIsIm92ZXJsYXlzIiwiSWdub3JlT3ZlcmxheXMiLCJCYXNlTm9kZSIsIm1hdGNoQ29udGV4dCIsIm1hdGNoTm9kZUNvbnRleHQiLCJuZXh0Q2hpbGQiLCJCdWZmZXJOb2RlIiwiQnVmZmVyQ29udGV4dCIsImhhc0NoaWxkIiwiSWdub3JlTW91bnRzIiwiclBvcyIsIm5leHRTaWduaWZpY2FudFBhcmVudCIsInRvVHJlZSIsImV4dGVybmFsU2libGluZyIsImhlYWRzIiwicGlja2VkIiwibmV3SGVhZHMiLCJTdGFja0l0ZXJhdG9yIiwiYnVmZmVyTm9kZSIsInlpZWxkTm9kZSIsInlpZWxkQnVmIiwieWllbGQiLCJlbnRlckNoaWxkIiwic2libGluZyIsImF0TGFzdE5vZGUiLCJtdXN0TGVhdmUiLCJub2RlU2l6ZUNhY2hlIiwiYmFsYW5jZVR5cGUiLCJta1RvcCIsIm1rVHJlZSIsIm1heENoaWxkIiwiZGl2aWRlIiwiZ3JvdXBGcm9tIiwiZ3JvdXBTdGFydCIsImdyb3VwU2l6ZSIsIm5leHRTaXplIiwib25seSIsInBhcnRpYWwiLCJtaW5HYXAiLCJmSSIsIm5leHRGIiwiY0kiLCJuZXh0QyIsIm5leHRQb3MiLCJmRnJvbSIsImZUbyIsIlN0cmluZ0lucHV0IiwiSW5uZXJQYXJzZSIsImNoZWNrUmFuZ2VzIiwiQWN0aXZlT3ZlcmxheSIsInByZWRpY2F0ZSIsIm1vdW50cyIsInN0b3BwZWRJbm5lciIsIk1peGVkUGFyc2UiLCJuZXN0IiwiaW5uZXJEb25lIiwiYmFzZVRyZWUiLCJiYXNlUGFyc2UiLCJzdGFydElubmVyIiwiZnJhZ21lbnRDdXJzb3IiLCJGcmFnbWVudEN1cnNvciIsImNvdmVyZWQiLCJoYXNOb2RlIiwiZnJhZyIsImNoZWNrQ292ZXIiLCJtYXRlcmlhbGl6ZSIsIm9sZE1vdW50cyIsImZpbmRNb3VudHMiLCJwdW5jaFJhbmdlcyIsImVudGVyRnJhZ21lbnRzIiwic2xpY2VCdWYiLCJuZXdTdGFjayIsImlubmVyT2Zmc2V0Iiwic3RhY2tQb3MiLCJ0YXJnZXRJIiwiU3RydWN0dXJlQ3Vyc29yIiwiZnJhZ0kiLCJjdXJGcmFnIiwibmV4dEZyYWciLCJnYXBGcm9tIiwiZ2FwVG8iLCJmaW5kQ292ZXJDaGFuZ2VzIiwiaW5CIiwibmV4dEEiLCJuZXh0QiIsIk5vZGVXZWFrTWFwIiwic2V0QnVmZmVyIiwiZ2V0QnVmZmVyIiwiY3Vyc29yU2V0IiwiY3Vyc29yR2V0IiwicGFyc2VNaXhlZCIsIm5leHRUYWdJRCIsIlRhZyIsIm1vZGlmaWVkIiwiZGVmaW5lTW9kaWZpZXIiLCJNb2RpZmllciIsIm5leHRNb2RpZmllcklEIiwiaW5zdGFuY2VzIiwicG93ZXJTZXQiLCJydWxlTm9kZVByb3AiLCJvcGFxdWUiLCJpbmhlcml0IiwidGFnQ2xhc3MiLCJwdXRTdHlsZSIsIkhpZ2hsaWdodEJ1aWxkZXIiLCJoaWdobGlnaHRSYW5nZSIsInN0YXJ0U3BhbiIsImluaGVyaXRlZENsYXNzIiwiZ2V0U3R5bGVUYWdzIiwidGFnQ2xzIiwiaGlnaGxpZ2h0VGFncyIsImlubmVySGlnaGxpZ2h0ZXJzIiwicmFuZ2VGcm9tIiwicmFuZ2VUbyIsIm9wZXJhdG9yIiwicHVuY3R1YXRpb24iLCJkb2NDb21tZW50IiwiYXR0cmlidXRlTmFtZSIsImRvY1N0cmluZyIsImNoYXJhY3RlciIsImF0dHJpYnV0ZVZhbHVlIiwiaW50ZWdlciIsImZsb2F0IiwibnVsbCIsIm1vZGlmaWVyIiwib3BlcmF0b3JLZXl3b3JkIiwiY29udHJvbEtleXdvcmQiLCJkZWZpbml0aW9uS2V5d29yZCIsIm1vZHVsZUtleXdvcmQiLCJkZXJlZk9wZXJhdG9yIiwiYXJpdGhtZXRpY09wZXJhdG9yIiwibG9naWNPcGVyYXRvciIsImJpdHdpc2VPcGVyYXRvciIsImNvbXBhcmVPcGVyYXRvciIsInVwZGF0ZU9wZXJhdG9yIiwiZGVmaW5pdGlvbk9wZXJhdG9yIiwidHlwZU9wZXJhdG9yIiwiY29udHJvbE9wZXJhdG9yIiwic2VwYXJhdG9yIiwiYW5nbGVCcmFja2V0Iiwic3F1YXJlQnJhY2tldCIsInBhcmVuIiwiaGVhZGluZzEiLCJoZWFkaW5nMiIsImhlYWRpbmczIiwiaGVhZGluZzQiLCJoZWFkaW5nNSIsImhlYWRpbmc2IiwicXVvdGUiLCJtb25vc3BhY2UiLCJkb2N1bWVudE1ldGEiLCJwcm9jZXNzaW5nSW5zdHJ1Y3Rpb24iLCJjb25zdGFudCIsImZ1bmN0aW9uIiwic3RhbmRhcmQiLCJjbGFzc0hpZ2hsaWdodGVyIiwiaGlnaGxpZ2h0Q29kZSIsInB1dFRleHQiLCJwdXRCcmVhayIsIndyaXRlVG8iLCJieU5hbWUiLCJDT1VOVCIsImZvciIsIlNFVCIsImdsb2JhbFRoaXMiLCJzcGxpdFNlbGVjdG9yIiwic2VsZWN0b3IiLCJzZWxlY3RvcnMiLCJpc0tleWZyYW1lcyIsImlzQXQiLCJrZXlmcmFtZXMiLCJtb2R1bGVzIiwic2V0Tm9uY2UiLCJTdHlsZVNldCIsImFkb3B0ZWRTZXQiLCJhZG9wdGVkU3R5bGVTaGVldHMiLCJDU1NTdHlsZVNoZWV0IiwiYWRvcHRlZCIsInNoZWV0Iiwic3R5bGVUYWciLCJpbnNlcnRSdWxlIiwiaSQxIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyJdLCJzb3VyY2VSb290IjoiIn0=